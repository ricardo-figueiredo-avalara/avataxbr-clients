# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ServiceCalculationsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def calculations_account_account_id_company_company_code_transaction_type_document_code_get(self, authorization, account_id, company_code, transaction_type, document_code, **kwargs):
        """
        Retrieve transactions
        Retrieve a single transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.calculations_account_account_id_company_company_code_transaction_type_document_code_get(authorization, account_id, company_code, transaction_type, document_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: Bearer {auth} (required)
        :param str account_id: Account ID (required)
        :param str company_code: Company Code (required)
        :param str transaction_type: Transaction Type (sale, purchase, receipts or payment) (required)
        :param str document_code: Document Code (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.calculations_account_account_id_company_company_code_transaction_type_document_code_get_with_http_info(authorization, account_id, company_code, transaction_type, document_code, **kwargs)
        else:
            (data) = self.calculations_account_account_id_company_company_code_transaction_type_document_code_get_with_http_info(authorization, account_id, company_code, transaction_type, document_code, **kwargs)
            return data

    def calculations_account_account_id_company_company_code_transaction_type_document_code_get_with_http_info(self, authorization, account_id, company_code, transaction_type, document_code, **kwargs):
        """
        Retrieve transactions
        Retrieve a single transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.calculations_account_account_id_company_company_code_transaction_type_document_code_get_with_http_info(authorization, account_id, company_code, transaction_type, document_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: Bearer {auth} (required)
        :param str account_id: Account ID (required)
        :param str company_code: Company Code (required)
        :param str transaction_type: Transaction Type (sale, purchase, receipts or payment) (required)
        :param str document_code: Document Code (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'account_id', 'company_code', 'transaction_type', 'document_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calculations_account_account_id_company_company_code_transaction_type_document_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `calculations_account_account_id_company_company_code_transaction_type_document_code_get`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `calculations_account_account_id_company_company_code_transaction_type_document_code_get`")
        # verify the required parameter 'company_code' is set
        if ('company_code' not in params) or (params['company_code'] is None):
            raise ValueError("Missing the required parameter `company_code` when calling `calculations_account_account_id_company_company_code_transaction_type_document_code_get`")
        # verify the required parameter 'transaction_type' is set
        if ('transaction_type' not in params) or (params['transaction_type'] is None):
            raise ValueError("Missing the required parameter `transaction_type` when calling `calculations_account_account_id_company_company_code_transaction_type_document_code_get`")
        # verify the required parameter 'document_code' is set
        if ('document_code' not in params) or (params['document_code'] is None):
            raise ValueError("Missing the required parameter `document_code` when calling `calculations_account_account_id_company_company_code_transaction_type_document_code_get`")


        collection_formats = {}

        resource_path = '/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'company_code' in params:
            path_params['companyCode'] = params['company_code']
        if 'transaction_type' in params:
            path_params['transactionType'] = params['transaction_type']
        if 'document_code' in params:
            path_params['documentCode'] = params['document_code']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post(self, authorization, account_id, company_code, transaction_type, document_code, **kwargs):
        """
        Promote a calculation to transaction
        Promote a calculation to transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post(authorization, account_id, company_code, transaction_type, document_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: Bearer {auth} (required)
        :param str account_id: Account ID (required)
        :param str company_code: Company Code (required)
        :param str transaction_type: Transaction Type (sale, purchase, receipts or payment) (required)
        :param str document_code: Document Code (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post_with_http_info(authorization, account_id, company_code, transaction_type, document_code, **kwargs)
        else:
            (data) = self.calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post_with_http_info(authorization, account_id, company_code, transaction_type, document_code, **kwargs)
            return data

    def calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post_with_http_info(self, authorization, account_id, company_code, transaction_type, document_code, **kwargs):
        """
        Promote a calculation to transaction
        Promote a calculation to transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post_with_http_info(authorization, account_id, company_code, transaction_type, document_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: Bearer {auth} (required)
        :param str account_id: Account ID (required)
        :param str company_code: Company Code (required)
        :param str transaction_type: Transaction Type (sale, purchase, receipts or payment) (required)
        :param str document_code: Document Code (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'account_id', 'company_code', 'transaction_type', 'document_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post`")
        # verify the required parameter 'company_code' is set
        if ('company_code' not in params) or (params['company_code'] is None):
            raise ValueError("Missing the required parameter `company_code` when calling `calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post`")
        # verify the required parameter 'transaction_type' is set
        if ('transaction_type' not in params) or (params['transaction_type'] is None):
            raise ValueError("Missing the required parameter `transaction_type` when calling `calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post`")
        # verify the required parameter 'document_code' is set
        if ('document_code' not in params) or (params['document_code'] is None):
            raise ValueError("Missing the required parameter `document_code` when calling `calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post`")


        collection_formats = {}

        resource_path = '/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/transactions'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'company_code' in params:
            path_params['companyCode'] = params['company_code']
        if 'transaction_type' in params:
            path_params['transactionType'] = params['transaction_type']
        if 'document_code' in params:
            path_params['documentCode'] = params['document_code']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def calculations_account_account_id_company_company_code_transaction_type_get(self, authorization, account_id, company_code, transaction_type, **kwargs):
        """
        Retrieve transactions
        Retrieve a list of transactions
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.calculations_account_account_id_company_company_code_transaction_type_get(authorization, account_id, company_code, transaction_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: Bearer {auth} (required)
        :param str account_id: Account ID (required)
        :param str company_code: Company Code (required)
        :param str transaction_type: Transaction Type (sale, purchase, receipts or payment) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.calculations_account_account_id_company_company_code_transaction_type_get_with_http_info(authorization, account_id, company_code, transaction_type, **kwargs)
        else:
            (data) = self.calculations_account_account_id_company_company_code_transaction_type_get_with_http_info(authorization, account_id, company_code, transaction_type, **kwargs)
            return data

    def calculations_account_account_id_company_company_code_transaction_type_get_with_http_info(self, authorization, account_id, company_code, transaction_type, **kwargs):
        """
        Retrieve transactions
        Retrieve a list of transactions
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.calculations_account_account_id_company_company_code_transaction_type_get_with_http_info(authorization, account_id, company_code, transaction_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: Bearer {auth} (required)
        :param str account_id: Account ID (required)
        :param str company_code: Company Code (required)
        :param str transaction_type: Transaction Type (sale, purchase, receipts or payment) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'account_id', 'company_code', 'transaction_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calculations_account_account_id_company_company_code_transaction_type_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `calculations_account_account_id_company_company_code_transaction_type_get`")
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `calculations_account_account_id_company_company_code_transaction_type_get`")
        # verify the required parameter 'company_code' is set
        if ('company_code' not in params) or (params['company_code'] is None):
            raise ValueError("Missing the required parameter `company_code` when calling `calculations_account_account_id_company_company_code_transaction_type_get`")
        # verify the required parameter 'transaction_type' is set
        if ('transaction_type' not in params) or (params['transaction_type'] is None):
            raise ValueError("Missing the required parameter `transaction_type` when calling `calculations_account_account_id_company_company_code_transaction_type_get`")


        collection_formats = {}

        resource_path = '/calculations/account/{accountId}/company/{companyCode}/{transactionType}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'company_code' in params:
            path_params['companyCode'] = params['company_code']
        if 'transaction_type' in params:
            path_params['transactionType'] = params['transaction_type']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def calculationsservice_payment_post(self, authorization, body, **kwargs):
        """
        Calculation Method
        Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.calculationsservice_payment_post(authorization, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: Bearer {auth} (required)
        :param PaymentTransactionIn body: Transaction Message (required)
        :return: PaymentTransactionOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.calculationsservice_payment_post_with_http_info(authorization, body, **kwargs)
        else:
            (data) = self.calculationsservice_payment_post_with_http_info(authorization, body, **kwargs)
            return data

    def calculationsservice_payment_post_with_http_info(self, authorization, body, **kwargs):
        """
        Calculation Method
        Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.calculationsservice_payment_post_with_http_info(authorization, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: Bearer {auth} (required)
        :param PaymentTransactionIn body: Transaction Message (required)
        :return: PaymentTransactionOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calculationsservice_payment_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `calculationsservice_payment_post`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `calculationsservice_payment_post`")


        collection_formats = {}

        resource_path = '/calculations?service-payment'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PaymentTransactionOut',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def calculationsservice_purchase_post(self, authorization, body, **kwargs):
        """
        Calculation Method
        Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.calculationsservice_purchase_post(authorization, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: Bearer {auth} (required)
        :param PurchaseTransactionIn body: Transaction Message (required)
        :return: PurchaseTransactionOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.calculationsservice_purchase_post_with_http_info(authorization, body, **kwargs)
        else:
            (data) = self.calculationsservice_purchase_post_with_http_info(authorization, body, **kwargs)
            return data

    def calculationsservice_purchase_post_with_http_info(self, authorization, body, **kwargs):
        """
        Calculation Method
        Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.calculationsservice_purchase_post_with_http_info(authorization, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: Bearer {auth} (required)
        :param PurchaseTransactionIn body: Transaction Message (required)
        :return: PurchaseTransactionOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calculationsservice_purchase_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `calculationsservice_purchase_post`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `calculationsservice_purchase_post`")


        collection_formats = {}

        resource_path = '/calculations?service-purchase'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PurchaseTransactionOut',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def calculationsservice_receipt_post(self, authorization, body, **kwargs):
        """
        Calculation Method
        Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.calculationsservice_receipt_post(authorization, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: Bearer {auth} (required)
        :param ReceiptTransactionIn body: Transaction Message (required)
        :return: ReceiptTransactionOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.calculationsservice_receipt_post_with_http_info(authorization, body, **kwargs)
        else:
            (data) = self.calculationsservice_receipt_post_with_http_info(authorization, body, **kwargs)
            return data

    def calculationsservice_receipt_post_with_http_info(self, authorization, body, **kwargs):
        """
        Calculation Method
        Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.calculationsservice_receipt_post_with_http_info(authorization, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: Bearer {auth} (required)
        :param ReceiptTransactionIn body: Transaction Message (required)
        :return: ReceiptTransactionOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calculationsservice_receipt_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `calculationsservice_receipt_post`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `calculationsservice_receipt_post`")


        collection_formats = {}

        resource_path = '/calculations?service-receipt'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ReceiptTransactionOut',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def calculationsservice_sales_post(self, authorization, body, **kwargs):
        """
        Calculation Method
        Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each 'calculations-<type>'.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.calculationsservice_sales_post(authorization, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: Bearer {auth} (required)
        :param SalesTransactionIn body: Transaction Message (required)
        :return: SalesTransactionOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.calculationsservice_sales_post_with_http_info(authorization, body, **kwargs)
        else:
            (data) = self.calculationsservice_sales_post_with_http_info(authorization, body, **kwargs)
            return data

    def calculationsservice_sales_post_with_http_info(self, authorization, body, **kwargs):
        """
        Calculation Method
        Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each 'calculations-<type>'.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.calculationsservice_sales_post_with_http_info(authorization, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: Bearer {auth} (required)
        :param SalesTransactionIn body: Transaction Message (required)
        :return: SalesTransactionOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calculationsservice_sales_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `calculationsservice_sales_post`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `calculationsservice_sales_post`")


        collection_formats = {}

        resource_path = '/calculations?service-sales'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SalesTransactionOut',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
