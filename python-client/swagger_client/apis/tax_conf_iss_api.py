# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TaxConfISSApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_iss_conf_by_city(self, iss_conf_by_city, **kwargs):
        """
        create a new ISS Configuration
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_iss_conf_by_city(iss_conf_by_city, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param IssConfByCity iss_conf_by_city: The pet JSON you want to post (required)
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_iss_conf_by_city_with_http_info(iss_conf_by_city, **kwargs)
        else:
            (data) = self.create_iss_conf_by_city_with_http_info(iss_conf_by_city, **kwargs)
            return data

    def create_iss_conf_by_city_with_http_info(self, iss_conf_by_city, **kwargs):
        """
        create a new ISS Configuration
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_iss_conf_by_city_with_http_info(iss_conf_by_city, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param IssConfByCity iss_conf_by_city: The pet JSON you want to post (required)
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['iss_conf_by_city']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_iss_conf_by_city" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'iss_conf_by_city' is set
        if ('iss_conf_by_city' not in params) or (params['iss_conf_by_city'] is None):
            raise ValueError("Missing the required parameter `iss_conf_by_city` when calling `create_iss_conf_by_city`")


        collection_formats = {}

        resource_path = '/taxconf/iss'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'iss_conf_by_city' in params:
            body_params = params['iss_conf_by_city']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse201',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_iss_conf(self, city_code, **kwargs):
        """
        disable a ISS by City Code.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_iss_conf(city_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float city_code: City Code (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_iss_conf_with_http_info(city_code, **kwargs)
        else:
            (data) = self.delete_iss_conf_with_http_info(city_code, **kwargs)
            return data

    def delete_iss_conf_with_http_info(self, city_code, **kwargs):
        """
        disable a ISS by City Code.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_iss_conf_with_http_info(city_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float city_code: City Code (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['city_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_iss_conf" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'city_code' is set
        if ('city_code' not in params) or (params['city_code'] is None):
            raise ValueError("Missing the required parameter `city_code` when calling `delete_iss_conf`")


        collection_formats = {}

        resource_path = '/taxconf/iss/{cityCode}'.replace('{format}', 'json')
        path_params = {}
        if 'city_code' in params:
            path_params['cityCode'] = params['city_code']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_iss_conf_by_city(self, city_code, **kwargs):
        """
        get ISS information by City Code.
        This operation return configurations of ISS that match with parameters queries 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_iss_conf_by_city(city_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float city_code: City Code (required)
        :param str code: Identificator of this configuration, it is unique for account or standard namedspace 
        :param date date: When informed return valid version configuration for this date 
        :param bool inactive: return the inctives versions too 
        :return: list[IssConfByCity]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_iss_conf_by_city_with_http_info(city_code, **kwargs)
        else:
            (data) = self.get_iss_conf_by_city_with_http_info(city_code, **kwargs)
            return data

    def get_iss_conf_by_city_with_http_info(self, city_code, **kwargs):
        """
        get ISS information by City Code.
        This operation return configurations of ISS that match with parameters queries 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_iss_conf_by_city_with_http_info(city_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float city_code: City Code (required)
        :param str code: Identificator of this configuration, it is unique for account or standard namedspace 
        :param date date: When informed return valid version configuration for this date 
        :param bool inactive: return the inctives versions too 
        :return: list[IssConfByCity]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['city_code', 'code', 'date', 'inactive']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_iss_conf_by_city" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'city_code' is set
        if ('city_code' not in params) or (params['city_code'] is None):
            raise ValueError("Missing the required parameter `city_code` when calling `get_iss_conf_by_city`")

        if 'code' in params and len(params['code']) > 60:
            raise ValueError("Invalid value for parameter `code` when calling `get_iss_conf_by_city`, length must be less than or equal to `60`")

        collection_formats = {}

        resource_path = '/taxconf/iss/{cityCode}'.replace('{format}', 'json')
        path_params = {}
        if 'city_code' in params:
            path_params['cityCode'] = params['city_code']

        query_params = {}
        if 'code' in params:
            query_params['code'] = params['code']
        if 'date' in params:
            query_params['date'] = params['date']
        if 'inactive' in params:
            query_params['inactive'] = params['inactive']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[IssConfByCity]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_iss_list(self, **kwargs):
        """
        retrive list of ISS
        This operation return ISS configurations that match with parameters queries 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_iss_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str suffixcode: Identify this ISS 
        :param date date: When informed return valid version configuration for this date 
        :param bool inactive: return the inactive versions too 
        :return: list[IssConfByCity]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_iss_list_with_http_info(**kwargs)
        else:
            (data) = self.get_iss_list_with_http_info(**kwargs)
            return data

    def get_iss_list_with_http_info(self, **kwargs):
        """
        retrive list of ISS
        This operation return ISS configurations that match with parameters queries 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_iss_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str suffixcode: Identify this ISS 
        :param date date: When informed return valid version configuration for this date 
        :param bool inactive: return the inactive versions too 
        :return: list[IssConfByCity]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['suffixcode', 'date', 'inactive']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_iss_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'suffixcode' in params and len(params['suffixcode']) > 60:
            raise ValueError("Invalid value for parameter `suffixcode` when calling `get_iss_list`, length must be less than or equal to `60`")

        collection_formats = {}

        resource_path = '/taxconf/iss'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'suffixcode' in params:
            query_params['suffixcode'] = params['suffixcode']
        if 'date' in params:
            query_params['date'] = params['date']
        if 'inactive' in params:
            query_params['inactive'] = params['inactive']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[IssConfByCity]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_iss_conf_by_city(self, city_code, iss_conf_by_city, **kwargs):
        """
        update a ISS by City Code.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_iss_conf_by_city(city_code, iss_conf_by_city, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float city_code: City Code (required)
        :param IssConfByCity iss_conf_by_city: The pet JSON you want to post (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_iss_conf_by_city_with_http_info(city_code, iss_conf_by_city, **kwargs)
        else:
            (data) = self.update_iss_conf_by_city_with_http_info(city_code, iss_conf_by_city, **kwargs)
            return data

    def update_iss_conf_by_city_with_http_info(self, city_code, iss_conf_by_city, **kwargs):
        """
        update a ISS by City Code.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_iss_conf_by_city_with_http_info(city_code, iss_conf_by_city, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float city_code: City Code (required)
        :param IssConfByCity iss_conf_by_city: The pet JSON you want to post (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['city_code', 'iss_conf_by_city']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_iss_conf_by_city" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'city_code' is set
        if ('city_code' not in params) or (params['city_code'] is None):
            raise ValueError("Missing the required parameter `city_code` when calling `update_iss_conf_by_city`")
        # verify the required parameter 'iss_conf_by_city' is set
        if ('iss_conf_by_city' not in params) or (params['iss_conf_by_city'] is None):
            raise ValueError("Missing the required parameter `iss_conf_by_city` when calling `update_iss_conf_by_city`")


        collection_formats = {}

        resource_path = '/taxconf/iss/{cityCode}'.replace('{format}', 'json')
        path_params = {}
        if 'city_code' in params:
            path_params['cityCode'] = params['city_code']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'iss_conf_by_city' in params:
            body_params = params['iss_conf_by_city']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
