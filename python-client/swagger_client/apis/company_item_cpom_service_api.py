# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CompanyItemCPOMServiceApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def companies_company_id_items_code_cpom_city_code_get(self, company_id, code, city_code, **kwargs):
        """
        This operation return custom agast configurations that match with parameters queries 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.companies_company_id_items_code_cpom_city_code_get(company_id, code, city_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_id: Company ID (required)
        :param str code: Item Code (required)
        :param float city_code: City Code (required)
        :return: ItemCpom
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.companies_company_id_items_code_cpom_city_code_get_with_http_info(company_id, code, city_code, **kwargs)
        else:
            (data) = self.companies_company_id_items_code_cpom_city_code_get_with_http_info(company_id, code, city_code, **kwargs)
            return data

    def companies_company_id_items_code_cpom_city_code_get_with_http_info(self, company_id, code, city_code, **kwargs):
        """
        This operation return custom agast configurations that match with parameters queries 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.companies_company_id_items_code_cpom_city_code_get_with_http_info(company_id, code, city_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_id: Company ID (required)
        :param str code: Item Code (required)
        :param float city_code: City Code (required)
        :return: ItemCpom
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'code', 'city_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method companies_company_id_items_code_cpom_city_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params) or (params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `companies_company_id_items_code_cpom_city_code_get`")
        # verify the required parameter 'code' is set
        if ('code' not in params) or (params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `companies_company_id_items_code_cpom_city_code_get`")
        # verify the required parameter 'city_code' is set
        if ('city_code' not in params) or (params['city_code'] is None):
            raise ValueError("Missing the required parameter `city_code` when calling `companies_company_id_items_code_cpom_city_code_get`")

        if 'code' in params and len(params['code']) > 60:
            raise ValueError("Invalid value for parameter `code` when calling `companies_company_id_items_code_cpom_city_code_get`, length must be less than or equal to `60`")

        collection_formats = {}

        resource_path = '/companies/{companyId}/items/{code}/cpom/{cityCode}'.replace('{format}', 'json')
        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']
        if 'code' in params:
            path_params['code'] = params['code']
        if 'city_code' in params:
            path_params['cityCode'] = params['city_code']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ItemCpom',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def companies_company_id_items_code_cpom_get(self, company_id, code, **kwargs):
        """
        This operation return custom agast configurations that match with parameters queries 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.companies_company_id_items_code_cpom_get(company_id, code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_id: Company ID (required)
        :param str code: Item Code (required)
        :param int x_pagination_limit: The per page limit. Currently set to 10 but subject to change at any time (max 100).
        :param int x_pagination_current_page: The current page. Defaults to 1.
        :param str x_pagination_sort:
        :return: list[ItemCpom]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.companies_company_id_items_code_cpom_get_with_http_info(company_id, code, **kwargs)
        else:
            (data) = self.companies_company_id_items_code_cpom_get_with_http_info(company_id, code, **kwargs)
            return data

    def companies_company_id_items_code_cpom_get_with_http_info(self, company_id, code, **kwargs):
        """
        This operation return custom agast configurations that match with parameters queries 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.companies_company_id_items_code_cpom_get_with_http_info(company_id, code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_id: Company ID (required)
        :param str code: Item Code (required)
        :param int x_pagination_limit: The per page limit. Currently set to 10 but subject to change at any time (max 100).
        :param int x_pagination_current_page: The current page. Defaults to 1.
        :param str x_pagination_sort:
        :return: list[ItemCpom]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'code', 'x_pagination_limit', 'x_pagination_current_page', 'x_pagination_sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method companies_company_id_items_code_cpom_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params) or (params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `companies_company_id_items_code_cpom_get`")
        # verify the required parameter 'code' is set
        if ('code' not in params) or (params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `companies_company_id_items_code_cpom_get`")

        if 'code' in params and len(params['code']) > 60:
            raise ValueError("Invalid value for parameter `code` when calling `companies_company_id_items_code_cpom_get`, length must be less than or equal to `60`")
        if 'x_pagination_limit' in params and params['x_pagination_limit'] < 5:
            raise ValueError("Invalid value for parameter `x_pagination_limit` when calling `companies_company_id_items_code_cpom_get`, must be a value greater than or equal to `5`")
        if 'x_pagination_current_page' in params and params['x_pagination_current_page'] < 1:
            raise ValueError("Invalid value for parameter `x_pagination_current_page` when calling `companies_company_id_items_code_cpom_get`, must be a value greater than or equal to `1`")

        collection_formats = {}

        resource_path = '/companies/{companyId}/items/{code}/cpom'.replace('{format}', 'json')
        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']
        if 'code' in params:
            path_params['code'] = params['code']

        query_params = {}

        header_params = {}
        if 'x_pagination_limit' in params:
            header_params['X-Pagination-Limit'] = params['x_pagination_limit']
        if 'x_pagination_current_page' in params:
            header_params['X-Pagination-Current-Page'] = params['x_pagination_current_page']
        if 'x_pagination_sort' in params:
            header_params['X-Pagination-Sort'] = params['x_pagination_sort']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ItemCpom]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_item_cpom(self, company_id, code, body, **kwargs):
        """
        Create custom agast for one company
        This method operation create a custom agast for one company 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_item_cpom(company_id, code, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_id: Company ID (required)
        :param str code: Item Code (required)
        :param ItemCpom body: Transaction Message (required)
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_item_cpom_with_http_info(company_id, code, body, **kwargs)
        else:
            (data) = self.create_item_cpom_with_http_info(company_id, code, body, **kwargs)
            return data

    def create_item_cpom_with_http_info(self, company_id, code, body, **kwargs):
        """
        Create custom agast for one company
        This method operation create a custom agast for one company 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_item_cpom_with_http_info(company_id, code, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_id: Company ID (required)
        :param str code: Item Code (required)
        :param ItemCpom body: Transaction Message (required)
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'code', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_item_cpom" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params) or (params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `create_item_cpom`")
        # verify the required parameter 'code' is set
        if ('code' not in params) or (params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `create_item_cpom`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_item_cpom`")

        if 'code' in params and len(params['code']) > 60:
            raise ValueError("Invalid value for parameter `code` when calling `create_item_cpom`, length must be less than or equal to `60`")

        collection_formats = {}

        resource_path = '/companies/{companyId}/items/{code}/cpom'.replace('{format}', 'json')
        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']
        if 'code' in params:
            path_params['code'] = params['code']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse201',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_item_cpom(self, company_id, code, city_code, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_item_cpom(company_id, code, city_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_id: Company ID (required)
        :param str code: Item Code (required)
        :param float city_code: City Code (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_item_cpom_with_http_info(company_id, code, city_code, **kwargs)
        else:
            (data) = self.delete_item_cpom_with_http_info(company_id, code, city_code, **kwargs)
            return data

    def delete_item_cpom_with_http_info(self, company_id, code, city_code, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_item_cpom_with_http_info(company_id, code, city_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_id: Company ID (required)
        :param str code: Item Code (required)
        :param float city_code: City Code (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'code', 'city_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_item_cpom" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params) or (params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `delete_item_cpom`")
        # verify the required parameter 'code' is set
        if ('code' not in params) or (params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `delete_item_cpom`")
        # verify the required parameter 'city_code' is set
        if ('city_code' not in params) or (params['city_code'] is None):
            raise ValueError("Missing the required parameter `city_code` when calling `delete_item_cpom`")

        if 'code' in params and len(params['code']) > 60:
            raise ValueError("Invalid value for parameter `code` when calling `delete_item_cpom`, length must be less than or equal to `60`")

        collection_formats = {}

        resource_path = '/companies/{companyId}/items/{code}/cpom/{cityCode}'.replace('{format}', 'json')
        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']
        if 'code' in params:
            path_params['code'] = params['code']
        if 'city_code' in params:
            path_params['cityCode'] = params['city_code']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_item_cpom(self, company_id, code, city_code, body, **kwargs):
        """
        Update custom agast for one company
        This method operation create a custom agast for one company 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_item_cpom(company_id, code, city_code, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_id: Company ID (required)
        :param str code: Item Code (required)
        :param float city_code: City Code (required)
        :param ItemCpom body: Transaction Message (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_item_cpom_with_http_info(company_id, code, city_code, body, **kwargs)
        else:
            (data) = self.update_item_cpom_with_http_info(company_id, code, city_code, body, **kwargs)
            return data

    def update_item_cpom_with_http_info(self, company_id, code, city_code, body, **kwargs):
        """
        Update custom agast for one company
        This method operation create a custom agast for one company 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_item_cpom_with_http_info(company_id, code, city_code, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str company_id: Company ID (required)
        :param str code: Item Code (required)
        :param float city_code: City Code (required)
        :param ItemCpom body: Transaction Message (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'code', 'city_code', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_item_cpom" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params) or (params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `update_item_cpom`")
        # verify the required parameter 'code' is set
        if ('code' not in params) or (params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `update_item_cpom`")
        # verify the required parameter 'city_code' is set
        if ('city_code' not in params) or (params['city_code'] is None):
            raise ValueError("Missing the required parameter `city_code` when calling `update_item_cpom`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_item_cpom`")

        if 'code' in params and len(params['code']) > 60:
            raise ValueError("Invalid value for parameter `code` when calling `update_item_cpom`, length must be less than or equal to `60`")

        collection_formats = {}

        resource_path = '/companies/{companyId}/items/{code}/cpom/{cityCode}'.replace('{format}', 'json')
        path_params = {}
        if 'company_id' in params:
            path_params['companyId'] = params['company_id']
        if 'code' in params:
            path_params['code'] = params['code']
        if 'city_code' in params:
            path_params['cityCode'] = params['city_code']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
