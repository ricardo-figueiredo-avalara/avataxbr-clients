# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PaymentBill(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, n_fat=None, v_orig=None, v_discount=None, v_net=None):
        """
        PaymentBill - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'n_fat': 'str',
            'v_orig': 'float',
            'v_discount': 'float',
            'v_net': 'float'
        }

        self.attribute_map = {
            'n_fat': 'nFat',
            'v_orig': 'vOrig',
            'v_discount': 'vDiscount',
            'v_net': 'vNet'
        }

        self._n_fat = n_fat
        self._v_orig = v_orig
        self._v_discount = v_discount
        self._v_net = v_net

    @property
    def n_fat(self):
        """
        Gets the n_fat of this PaymentBill.
        Bill identifier

        :return: The n_fat of this PaymentBill.
        :rtype: str
        """
        return self._n_fat

    @n_fat.setter
    def n_fat(self, n_fat):
        """
        Sets the n_fat of this PaymentBill.
        Bill identifier

        :param n_fat: The n_fat of this PaymentBill.
        :type: str
        """
        if n_fat is not None and len(n_fat) > 60:
            raise ValueError("Invalid value for `n_fat`, length must be less than or equal to `60`")
        if n_fat is not None and len(n_fat) < 1:
            raise ValueError("Invalid value for `n_fat`, length must be greater than or equal to `1`")

        self._n_fat = n_fat

    @property
    def v_orig(self):
        """
        Gets the v_orig of this PaymentBill.
        Orignal value

        :return: The v_orig of this PaymentBill.
        :rtype: float
        """
        return self._v_orig

    @v_orig.setter
    def v_orig(self, v_orig):
        """
        Sets the v_orig of this PaymentBill.
        Orignal value

        :param v_orig: The v_orig of this PaymentBill.
        :type: float
        """

        self._v_orig = v_orig

    @property
    def v_discount(self):
        """
        Gets the v_discount of this PaymentBill.
        Discount

        :return: The v_discount of this PaymentBill.
        :rtype: float
        """
        return self._v_discount

    @v_discount.setter
    def v_discount(self, v_discount):
        """
        Sets the v_discount of this PaymentBill.
        Discount

        :param v_discount: The v_discount of this PaymentBill.
        :type: float
        """

        self._v_discount = v_discount

    @property
    def v_net(self):
        """
        Gets the v_net of this PaymentBill.
        Net value

        :return: The v_net of this PaymentBill.
        :rtype: float
        """
        return self._v_net

    @v_net.setter
    def v_net(self, v_net):
        """
        Sets the v_net of this PaymentBill.
        Net value

        :param v_net: The v_net of this PaymentBill.
        :type: float
        """

        self._v_net = v_net

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
