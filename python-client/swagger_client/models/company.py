# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Company(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, code=None, official_name=None, name=None, entity_type=None, subject_to_srf1234=None, federal_tax_regime=None, pis_subject_to=None, cofins_subject_to=None, csll_subject_to=None, receipts_are_full_no_cumulative_pis_cofins=None, inss_withhold_subject_to=None, iss_withhold_subject_to=None, irrf_withhold_subject_to=None, icms_rate_for_simplestaxregime=None, is_exempt_by_gross_revenue_for_simplestaxregime=None, configuration=None, mail_server=None, authorized_to_download_n_fe=None):
        """
        Company - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'code': 'str',
            'official_name': 'str',
            'name': 'str',
            'entity_type': 'EntityType',
            'subject_to_srf1234': 'bool',
            'federal_tax_regime': 'FederalTaxRegime',
            'pis_subject_to': 'str',
            'cofins_subject_to': 'str',
            'csll_subject_to': 'str',
            'receipts_are_full_no_cumulative_pis_cofins': 'bool',
            'inss_withhold_subject_to': 'bool',
            'iss_withhold_subject_to': 'bool',
            'irrf_withhold_subject_to': 'bool',
            'icms_rate_for_simplestaxregime': 'float',
            'is_exempt_by_gross_revenue_for_simplestaxregime': 'bool',
            'configuration': 'CompanyConfiguration',
            'mail_server': 'CompanyMailServer',
            'authorized_to_download_n_fe': 'list[CompanyAuthorizedToDownloadNFe]'
        }

        self.attribute_map = {
            'code': 'code',
            'official_name': 'officialName',
            'name': 'name',
            'entity_type': 'entityType',
            'subject_to_srf1234': 'subjectToSRF1234',
            'federal_tax_regime': 'federalTaxRegime',
            'pis_subject_to': 'pisSubjectTo',
            'cofins_subject_to': 'cofinsSubjectTo',
            'csll_subject_to': 'csllSubjectTo',
            'receipts_are_full_no_cumulative_pis_cofins': 'receiptsAreFullNoCumulativePisCofins',
            'inss_withhold_subject_to': 'inssWithholdSubjectTo',
            'iss_withhold_subject_to': 'issWithholdSubjectTo',
            'irrf_withhold_subject_to': 'irrfWithholdSubjectTo',
            'icms_rate_for_simplestaxregime': 'icmsRateForSimplestaxregime',
            'is_exempt_by_gross_revenue_for_simplestaxregime': 'isExemptByGrossRevenueForSimplestaxregime',
            'configuration': 'configuration',
            'mail_server': 'mailServer',
            'authorized_to_download_n_fe': 'authorizedToDownloadNFe'
        }

        self._code = code
        self._official_name = official_name
        self._name = name
        self._entity_type = entity_type
        self._subject_to_srf1234 = subject_to_srf1234
        self._federal_tax_regime = federal_tax_regime
        self._pis_subject_to = pis_subject_to
        self._cofins_subject_to = cofins_subject_to
        self._csll_subject_to = csll_subject_to
        self._receipts_are_full_no_cumulative_pis_cofins = receipts_are_full_no_cumulative_pis_cofins
        self._inss_withhold_subject_to = inss_withhold_subject_to
        self._iss_withhold_subject_to = iss_withhold_subject_to
        self._irrf_withhold_subject_to = irrf_withhold_subject_to
        self._icms_rate_for_simplestaxregime = icms_rate_for_simplestaxregime
        self._is_exempt_by_gross_revenue_for_simplestaxregime = is_exempt_by_gross_revenue_for_simplestaxregime
        self._configuration = configuration
        self._mail_server = mail_server
        self._authorized_to_download_n_fe = authorized_to_download_n_fe

    @property
    def code(self):
        """
        Gets the code of this Company.
        string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company

        :return: The code of this Company.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this Company.
        string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company

        :param code: The code of this Company.
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")
        if code is not None and len(code) > 60:
            raise ValueError("Invalid value for `code`, length must be less than or equal to `60`")

        self._code = code

    @property
    def official_name(self):
        """
        Gets the official_name of this Company.
        Official Company name (Razão Social)

        :return: The official_name of this Company.
        :rtype: str
        """
        return self._official_name

    @official_name.setter
    def official_name(self, official_name):
        """
        Sets the official_name of this Company.
        Official Company name (Razão Social)

        :param official_name: The official_name of this Company.
        :type: str
        """
        if official_name is None:
            raise ValueError("Invalid value for `official_name`, must not be `None`")
        if official_name is not None and len(official_name) > 150:
            raise ValueError("Invalid value for `official_name`, length must be less than or equal to `150`")

        self._official_name = official_name

    @property
    def name(self):
        """
        Gets the name of this Company.
        Company name (DBA - Nome de Fantasia),  Used to identify branches/subsidiaries with same name

        :return: The name of this Company.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Company.
        Company name (DBA - Nome de Fantasia),  Used to identify branches/subsidiaries with same name

        :param name: The name of this Company.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 150:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `150`")

        self._name = name

    @property
    def entity_type(self):
        """
        Gets the entity_type of this Company.

        :return: The entity_type of this Company.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this Company.

        :param entity_type: The entity_type of this Company.
        :type: EntityType
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")

        self._entity_type = entity_type

    @property
    def subject_to_srf1234(self):
        """
        Gets the subject_to_srf1234 of this Company.
        Company has participation of state-owned capital (it will be considerated like a government entity)

        :return: The subject_to_srf1234 of this Company.
        :rtype: bool
        """
        return self._subject_to_srf1234

    @subject_to_srf1234.setter
    def subject_to_srf1234(self, subject_to_srf1234):
        """
        Sets the subject_to_srf1234 of this Company.
        Company has participation of state-owned capital (it will be considerated like a government entity)

        :param subject_to_srf1234: The subject_to_srf1234 of this Company.
        :type: bool
        """

        self._subject_to_srf1234 = subject_to_srf1234

    @property
    def federal_tax_regime(self):
        """
        Gets the federal_tax_regime of this Company.

        :return: The federal_tax_regime of this Company.
        :rtype: FederalTaxRegime
        """
        return self._federal_tax_regime

    @federal_tax_regime.setter
    def federal_tax_regime(self, federal_tax_regime):
        """
        Sets the federal_tax_regime of this Company.

        :param federal_tax_regime: The federal_tax_regime of this Company.
        :type: FederalTaxRegime
        """
        if federal_tax_regime is None:
            raise ValueError("Invalid value for `federal_tax_regime`, must not be `None`")

        self._federal_tax_regime = federal_tax_regime

    @property
    def pis_subject_to(self):
        """
        Gets the pis_subject_to of this Company.
        this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 

        :return: The pis_subject_to of this Company.
        :rtype: str
        """
        return self._pis_subject_to

    @pis_subject_to.setter
    def pis_subject_to(self, pis_subject_to):
        """
        Sets the pis_subject_to of this Company.
        this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 

        :param pis_subject_to: The pis_subject_to of this Company.
        :type: str
        """
        allowed_values = ["TAXABLE", "NOT TAXABLE", "EXEMPT"]
        if pis_subject_to not in allowed_values:
            raise ValueError(
                "Invalid value for `pis_subject_to` ({0}), must be one of {1}"
                .format(pis_subject_to, allowed_values)
            )

        self._pis_subject_to = pis_subject_to

    @property
    def cofins_subject_to(self):
        """
        Gets the cofins_subject_to of this Company.
        this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 

        :return: The cofins_subject_to of this Company.
        :rtype: str
        """
        return self._cofins_subject_to

    @cofins_subject_to.setter
    def cofins_subject_to(self, cofins_subject_to):
        """
        Sets the cofins_subject_to of this Company.
        this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 

        :param cofins_subject_to: The cofins_subject_to of this Company.
        :type: str
        """
        allowed_values = ["TAXABLE", "NOT TAXABLE", "EXEMPT"]
        if cofins_subject_to not in allowed_values:
            raise ValueError(
                "Invalid value for `cofins_subject_to` ({0}), must be one of {1}"
                .format(cofins_subject_to, allowed_values)
            )

        self._cofins_subject_to = cofins_subject_to

    @property
    def csll_subject_to(self):
        """
        Gets the csll_subject_to of this Company.
        this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 

        :return: The csll_subject_to of this Company.
        :rtype: str
        """
        return self._csll_subject_to

    @csll_subject_to.setter
    def csll_subject_to(self, csll_subject_to):
        """
        Sets the csll_subject_to of this Company.
        this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 

        :param csll_subject_to: The csll_subject_to of this Company.
        :type: str
        """
        allowed_values = ["TAXABLE", "NOT TAXABLE", "EXEMPT"]
        if csll_subject_to not in allowed_values:
            raise ValueError(
                "Invalid value for `csll_subject_to` ({0}), must be one of {1}"
                .format(csll_subject_to, allowed_values)
            )

        self._csll_subject_to = csll_subject_to

    @property
    def receipts_are_full_no_cumulative_pis_cofins(self):
        """
        Gets the receipts_are_full_no_cumulative_pis_cofins of this Company.
        When th company is REAL PROFIT usually it operates under a Non-Cumulative PIS/COFINS regime But exist some services that are always Cumulative regime. If the company has all receipts from Non-Cumulative services this flag will be set to True. This flag informs special conditions to credit of PIS/COFINS when this company is out of Free zone and  purchases from Free Zone Company Quando uma empresa fora da Zona Franca adquire uma produto ou serviço de uma empresa situada na Zona Franca de Manaus, o crédito de PIS E COFINS segue estas aliquotas diferenciadas. Fundamentação, art. 5º da Instrução Normativa SRF nº 546/2005; art. 3º, § 12 da Lei nº 10.637/2002; art. 3º, § 17 da Lei nº 10.833/2003; art. 4º da Lei nº 11.307/2006. DESTINATÁRIO ALÍQUOTAS PIS COFINS a) Venda efetuada a pessoa jurídica estabelecida fora da Zona Franca de Manaus, que apure a Contribuição para o PIS/PASEP no regime de não-cumulatividade débito 0,65% 3% crédito 1% 4,6% c) Venda efetuada a pessoa jurídica estabelecida fora da Zona Franca de Manaus, que apure o imposto de renda com base no lucro real e que tenha sua receita, total ou parcialmente, excluída do regime de incidência não-cumulativa da Contribuição para o PIS/PASEP débito 1,3% 6% crédito 1,65% 7,6% 

        :return: The receipts_are_full_no_cumulative_pis_cofins of this Company.
        :rtype: bool
        """
        return self._receipts_are_full_no_cumulative_pis_cofins

    @receipts_are_full_no_cumulative_pis_cofins.setter
    def receipts_are_full_no_cumulative_pis_cofins(self, receipts_are_full_no_cumulative_pis_cofins):
        """
        Sets the receipts_are_full_no_cumulative_pis_cofins of this Company.
        When th company is REAL PROFIT usually it operates under a Non-Cumulative PIS/COFINS regime But exist some services that are always Cumulative regime. If the company has all receipts from Non-Cumulative services this flag will be set to True. This flag informs special conditions to credit of PIS/COFINS when this company is out of Free zone and  purchases from Free Zone Company Quando uma empresa fora da Zona Franca adquire uma produto ou serviço de uma empresa situada na Zona Franca de Manaus, o crédito de PIS E COFINS segue estas aliquotas diferenciadas. Fundamentação, art. 5º da Instrução Normativa SRF nº 546/2005; art. 3º, § 12 da Lei nº 10.637/2002; art. 3º, § 17 da Lei nº 10.833/2003; art. 4º da Lei nº 11.307/2006. DESTINATÁRIO ALÍQUOTAS PIS COFINS a) Venda efetuada a pessoa jurídica estabelecida fora da Zona Franca de Manaus, que apure a Contribuição para o PIS/PASEP no regime de não-cumulatividade débito 0,65% 3% crédito 1% 4,6% c) Venda efetuada a pessoa jurídica estabelecida fora da Zona Franca de Manaus, que apure o imposto de renda com base no lucro real e que tenha sua receita, total ou parcialmente, excluída do regime de incidência não-cumulativa da Contribuição para o PIS/PASEP débito 1,3% 6% crédito 1,65% 7,6% 

        :param receipts_are_full_no_cumulative_pis_cofins: The receipts_are_full_no_cumulative_pis_cofins of this Company.
        :type: bool
        """

        self._receipts_are_full_no_cumulative_pis_cofins = receipts_are_full_no_cumulative_pis_cofins

    @property
    def inss_withhold_subject_to(self):
        """
        Gets the inss_withhold_subject_to of this Company.
        On purchase transaction, to force withholding INSS this Flag can be set to True

        :return: The inss_withhold_subject_to of this Company.
        :rtype: bool
        """
        return self._inss_withhold_subject_to

    @inss_withhold_subject_to.setter
    def inss_withhold_subject_to(self, inss_withhold_subject_to):
        """
        Sets the inss_withhold_subject_to of this Company.
        On purchase transaction, to force withholding INSS this Flag can be set to True

        :param inss_withhold_subject_to: The inss_withhold_subject_to of this Company.
        :type: bool
        """

        self._inss_withhold_subject_to = inss_withhold_subject_to

    @property
    def iss_withhold_subject_to(self):
        """
        Gets the iss_withhold_subject_to of this Company.
        On purchase transaction, to force withhold ISS this Flag can be set to True

        :return: The iss_withhold_subject_to of this Company.
        :rtype: bool
        """
        return self._iss_withhold_subject_to

    @iss_withhold_subject_to.setter
    def iss_withhold_subject_to(self, iss_withhold_subject_to):
        """
        Sets the iss_withhold_subject_to of this Company.
        On purchase transaction, to force withhold ISS this Flag can be set to True

        :param iss_withhold_subject_to: The iss_withhold_subject_to of this Company.
        :type: bool
        """

        self._iss_withhold_subject_to = iss_withhold_subject_to

    @property
    def irrf_withhold_subject_to(self):
        """
        Gets the irrf_withhold_subject_to of this Company.
        On purchase transaction, if this flag is FALSE, the system will not withhold IRRF. if this flag is TRUE the system will analise other rules to define if will have witholding 

        :return: The irrf_withhold_subject_to of this Company.
        :rtype: bool
        """
        return self._irrf_withhold_subject_to

    @irrf_withhold_subject_to.setter
    def irrf_withhold_subject_to(self, irrf_withhold_subject_to):
        """
        Sets the irrf_withhold_subject_to of this Company.
        On purchase transaction, if this flag is FALSE, the system will not withhold IRRF. if this flag is TRUE the system will analise other rules to define if will have witholding 

        :param irrf_withhold_subject_to: The irrf_withhold_subject_to of this Company.
        :type: bool
        """

        self._irrf_withhold_subject_to = irrf_withhold_subject_to

    @property
    def icms_rate_for_simplestaxregime(self):
        """
        Gets the icms_rate_for_simplestaxregime of this Company.
        Actual ICMS Rate for this company (if the company is Tax Regime Simplified). Aliquota de ICMS da companhia caso Optante do Simples 

        :return: The icms_rate_for_simplestaxregime of this Company.
        :rtype: float
        """
        return self._icms_rate_for_simplestaxregime

    @icms_rate_for_simplestaxregime.setter
    def icms_rate_for_simplestaxregime(self, icms_rate_for_simplestaxregime):
        """
        Sets the icms_rate_for_simplestaxregime of this Company.
        Actual ICMS Rate for this company (if the company is Tax Regime Simplified). Aliquota de ICMS da companhia caso Optante do Simples 

        :param icms_rate_for_simplestaxregime: The icms_rate_for_simplestaxregime of this Company.
        :type: float
        """

        self._icms_rate_for_simplestaxregime = icms_rate_for_simplestaxregime

    @property
    def is_exempt_by_gross_revenue_for_simplestaxregime(self):
        """
        Gets the is_exempt_by_gross_revenue_for_simplestaxregime of this Company.
        ICMS Exempt when Tax Regime is Simplified because total gross revenue is bellow amount defined by state (see PARANÁ State) Isenção do ICMS no Simples Nacional para faixa de receita bruta 

        :return: The is_exempt_by_gross_revenue_for_simplestaxregime of this Company.
        :rtype: bool
        """
        return self._is_exempt_by_gross_revenue_for_simplestaxregime

    @is_exempt_by_gross_revenue_for_simplestaxregime.setter
    def is_exempt_by_gross_revenue_for_simplestaxregime(self, is_exempt_by_gross_revenue_for_simplestaxregime):
        """
        Sets the is_exempt_by_gross_revenue_for_simplestaxregime of this Company.
        ICMS Exempt when Tax Regime is Simplified because total gross revenue is bellow amount defined by state (see PARANÁ State) Isenção do ICMS no Simples Nacional para faixa de receita bruta 

        :param is_exempt_by_gross_revenue_for_simplestaxregime: The is_exempt_by_gross_revenue_for_simplestaxregime of this Company.
        :type: bool
        """

        self._is_exempt_by_gross_revenue_for_simplestaxregime = is_exempt_by_gross_revenue_for_simplestaxregime

    @property
    def configuration(self):
        """
        Gets the configuration of this Company.

        :return: The configuration of this Company.
        :rtype: CompanyConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """
        Sets the configuration of this Company.

        :param configuration: The configuration of this Company.
        :type: CompanyConfiguration
        """

        self._configuration = configuration

    @property
    def mail_server(self):
        """
        Gets the mail_server of this Company.

        :return: The mail_server of this Company.
        :rtype: CompanyMailServer
        """
        return self._mail_server

    @mail_server.setter
    def mail_server(self, mail_server):
        """
        Sets the mail_server of this Company.

        :param mail_server: The mail_server of this Company.
        :type: CompanyMailServer
        """

        self._mail_server = mail_server

    @property
    def authorized_to_download_n_fe(self):
        """
        Gets the authorized_to_download_n_fe of this Company.
        Person or company authorized to downloadNFe

        :return: The authorized_to_download_n_fe of this Company.
        :rtype: list[CompanyAuthorizedToDownloadNFe]
        """
        return self._authorized_to_download_n_fe

    @authorized_to_download_n_fe.setter
    def authorized_to_download_n_fe(self, authorized_to_download_n_fe):
        """
        Sets the authorized_to_download_n_fe of this Company.
        Person or company authorized to downloadNFe

        :param authorized_to_download_n_fe: The authorized_to_download_n_fe of this Company.
        :type: list[CompanyAuthorizedToDownloadNFe]
        """

        self._authorized_to_download_n_fe = authorized_to_download_n_fe

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
