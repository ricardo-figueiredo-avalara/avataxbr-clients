# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PurchaseEntity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, type=None, email=None, cnpjcpf=None, city_tax_id=None, state_tax_id=None, suframa=None, phone=None, tax_regime=None, has_cpom=None, subject_withholding_irrf=None, inss_previous_contrib=None, inss_basis_discount=None, iss_rf_rate=None):
        """
        PurchaseEntity - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'type': 'EntityType',
            'email': 'str',
            'cnpjcpf': 'str',
            'city_tax_id': 'str',
            'state_tax_id': 'str',
            'suframa': 'str',
            'phone': 'str',
            'tax_regime': 'FederalTaxRegime',
            'has_cpom': 'bool',
            'subject_withholding_irrf': 'bool',
            'inss_previous_contrib': 'float',
            'inss_basis_discount': 'float',
            'iss_rf_rate': 'float'
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'email': 'email',
            'cnpjcpf': 'cnpjcpf',
            'city_tax_id': 'cityTaxId',
            'state_tax_id': 'stateTaxId',
            'suframa': 'suframa',
            'phone': 'phone',
            'tax_regime': 'taxRegime',
            'has_cpom': 'hasCpom',
            'subject_withholding_irrf': 'subjectWithholdingIrrf',
            'inss_previous_contrib': 'inssPreviousContrib',
            'inss_basis_discount': 'inssBasisDiscount',
            'iss_rf_rate': 'issRfRate'
        }

        self._name = name
        self._type = type
        self._email = email
        self._cnpjcpf = cnpjcpf
        self._city_tax_id = city_tax_id
        self._state_tax_id = state_tax_id
        self._suframa = suframa
        self._phone = phone
        self._tax_regime = tax_regime
        self._has_cpom = has_cpom
        self._subject_withholding_irrf = subject_withholding_irrf
        self._inss_previous_contrib = inss_previous_contrib
        self._inss_basis_discount = inss_basis_discount
        self._iss_rf_rate = iss_rf_rate

    @property
    def name(self):
        """
        Gets the name of this PurchaseEntity.
        Legal Name of Service buyer.

        :return: The name of this PurchaseEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PurchaseEntity.
        Legal Name of Service buyer.

        :param name: The name of this PurchaseEntity.
        :type: str
        """
        if name is not None and len(name) > 60:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `60`")

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this PurchaseEntity.

        :return: The type of this PurchaseEntity.
        :rtype: EntityType
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PurchaseEntity.

        :param type: The type of this PurchaseEntity.
        :type: EntityType
        """

        self._type = type

    @property
    def email(self):
        """
        Gets the email of this PurchaseEntity.
        Entity Email

        :return: The email of this PurchaseEntity.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this PurchaseEntity.
        Entity Email

        :param email: The email of this PurchaseEntity.
        :type: str
        """
        if email is not None and len(email) > 60:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `60`")

        self._email = email

    @property
    def cnpjcpf(self):
        """
        Gets the cnpjcpf of this PurchaseEntity.
        CNPJ/CPF of Sales Buyer. If CPF, pattern is '[0-9]{11}' if CNPJ, pattern is '[0-9]{14}'

        :return: The cnpjcpf of this PurchaseEntity.
        :rtype: str
        """
        return self._cnpjcpf

    @cnpjcpf.setter
    def cnpjcpf(self, cnpjcpf):
        """
        Sets the cnpjcpf of this PurchaseEntity.
        CNPJ/CPF of Sales Buyer. If CPF, pattern is '[0-9]{11}' if CNPJ, pattern is '[0-9]{14}'

        :param cnpjcpf: The cnpjcpf of this PurchaseEntity.
        :type: str
        """
        if cnpjcpf is not None and not re.search('([!-每]{0}|[!-每]{5,20})?', cnpjcpf):
            raise ValueError("Invalid value for `cnpjcpf`, must be a follow pattern or equal to `/([!-每]{0}|[!-每]{5,20})?/`")

        self._cnpjcpf = cnpjcpf

    @property
    def city_tax_id(self):
        """
        Gets the city_tax_id of this PurchaseEntity.
        City Tax ID

        :return: The city_tax_id of this PurchaseEntity.
        :rtype: str
        """
        return self._city_tax_id

    @city_tax_id.setter
    def city_tax_id(self, city_tax_id):
        """
        Sets the city_tax_id of this PurchaseEntity.
        City Tax ID

        :param city_tax_id: The city_tax_id of this PurchaseEntity.
        :type: str
        """
        if city_tax_id is not None and len(city_tax_id) > 15:
            raise ValueError("Invalid value for `city_tax_id`, length must be less than or equal to `15`")

        self._city_tax_id = city_tax_id

    @property
    def state_tax_id(self):
        """
        Gets the state_tax_id of this PurchaseEntity.
        State Tax ID

        :return: The state_tax_id of this PurchaseEntity.
        :rtype: str
        """
        return self._state_tax_id

    @state_tax_id.setter
    def state_tax_id(self, state_tax_id):
        """
        Sets the state_tax_id of this PurchaseEntity.
        State Tax ID

        :param state_tax_id: The state_tax_id of this PurchaseEntity.
        :type: str
        """
        if state_tax_id is not None and not re.search('[0-9]{2,14}|ISENTO', state_tax_id):
            raise ValueError("Invalid value for `state_tax_id`, must be a follow pattern or equal to `/[0-9]{2,14}|ISENTO/`")

        self._state_tax_id = state_tax_id

    @property
    def suframa(self):
        """
        Gets the suframa of this PurchaseEntity.
        Suframa ID

        :return: The suframa of this PurchaseEntity.
        :rtype: str
        """
        return self._suframa

    @suframa.setter
    def suframa(self, suframa):
        """
        Sets the suframa of this PurchaseEntity.
        Suframa ID

        :param suframa: The suframa of this PurchaseEntity.
        :type: str
        """
        if suframa is not None and not re.search('[0-9]{8,9}', suframa):
            raise ValueError("Invalid value for `suframa`, must be a follow pattern or equal to `/[0-9]{8,9}/`")

        self._suframa = suframa

    @property
    def phone(self):
        """
        Gets the phone of this PurchaseEntity.
        Entity Phone

        :return: The phone of this PurchaseEntity.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this PurchaseEntity.
        Entity Phone

        :param phone: The phone of this PurchaseEntity.
        :type: str
        """
        if phone is not None and not re.search('[0-9]{6,14}', phone):
            raise ValueError("Invalid value for `phone`, must be a follow pattern or equal to `/[0-9]{6,14}/`")

        self._phone = phone

    @property
    def tax_regime(self):
        """
        Gets the tax_regime of this PurchaseEntity.

        :return: The tax_regime of this PurchaseEntity.
        :rtype: FederalTaxRegime
        """
        return self._tax_regime

    @tax_regime.setter
    def tax_regime(self, tax_regime):
        """
        Sets the tax_regime of this PurchaseEntity.

        :param tax_regime: The tax_regime of this PurchaseEntity.
        :type: FederalTaxRegime
        """

        self._tax_regime = tax_regime

    @property
    def has_cpom(self):
        """
        Gets the has_cpom of this PurchaseEntity.
        Some cities require PURCHASE.Buyers to withhold ISS (City Tax) from PURCHASE.Sellers stablished in different cities. In case the PURCHASE.Seller has acquired a Tax Registration in this destination city, by providing this information in the service invoice, this withholding obligation is lifted.

        :return: The has_cpom of this PurchaseEntity.
        :rtype: bool
        """
        return self._has_cpom

    @has_cpom.setter
    def has_cpom(self, has_cpom):
        """
        Sets the has_cpom of this PurchaseEntity.
        Some cities require PURCHASE.Buyers to withhold ISS (City Tax) from PURCHASE.Sellers stablished in different cities. In case the PURCHASE.Seller has acquired a Tax Registration in this destination city, by providing this information in the service invoice, this withholding obligation is lifted.

        :param has_cpom: The has_cpom of this PurchaseEntity.
        :type: bool
        """

        self._has_cpom = has_cpom

    @property
    def subject_withholding_irrf(self):
        """
        Gets the subject_withholding_irrf of this PurchaseEntity.
        These are the federal taxes attributes that determine whether withholding of taxes should take place. In special cases where the PURCHASE.Seller is exempt of one or more of these taxes the withholding follows the same rules. The Business type may also dictate these rules as well.

        :return: The subject_withholding_irrf of this PurchaseEntity.
        :rtype: bool
        """
        return self._subject_withholding_irrf

    @subject_withholding_irrf.setter
    def subject_withholding_irrf(self, subject_withholding_irrf):
        """
        Sets the subject_withholding_irrf of this PurchaseEntity.
        These are the federal taxes attributes that determine whether withholding of taxes should take place. In special cases where the PURCHASE.Seller is exempt of one or more of these taxes the withholding follows the same rules. The Business type may also dictate these rules as well.

        :param subject_withholding_irrf: The subject_withholding_irrf of this PurchaseEntity.
        :type: bool
        """

        self._subject_withholding_irrf = subject_withholding_irrf

    @property
    def inss_previous_contrib(self):
        """
        Gets the inss_previous_contrib of this PurchaseEntity.
        The INSS contribution is capped at a maximum limit (amount of actual retired payment available in the country).  Individuals sellers subject to INSS withholding can provide the amount already tax by other transactions (with the same buyer or different ones) to deduct to the tax basis. This amount is to be provided to the Seller in a form of a signed document.

        :return: The inss_previous_contrib of this PurchaseEntity.
        :rtype: float
        """
        return self._inss_previous_contrib

    @inss_previous_contrib.setter
    def inss_previous_contrib(self, inss_previous_contrib):
        """
        Sets the inss_previous_contrib of this PurchaseEntity.
        The INSS contribution is capped at a maximum limit (amount of actual retired payment available in the country).  Individuals sellers subject to INSS withholding can provide the amount already tax by other transactions (with the same buyer or different ones) to deduct to the tax basis. This amount is to be provided to the Seller in a form of a signed document.

        :param inss_previous_contrib: The inss_previous_contrib of this PurchaseEntity.
        :type: float
        """

        self._inss_previous_contrib = inss_previous_contrib

    @property
    def inss_basis_discount(self):
        """
        Gets the inss_basis_discount of this PurchaseEntity.
        The INSS contribution is applicable only to the labor amount in a service contract.  There are several items that may be deducted from the service invoice total to arrive at the INSS taxable amount. This amount is to be provided to the Seller in the body of the Invoice or calculated during the transaction input.

        :return: The inss_basis_discount of this PurchaseEntity.
        :rtype: float
        """
        return self._inss_basis_discount

    @inss_basis_discount.setter
    def inss_basis_discount(self, inss_basis_discount):
        """
        Sets the inss_basis_discount of this PurchaseEntity.
        The INSS contribution is applicable only to the labor amount in a service contract.  There are several items that may be deducted from the service invoice total to arrive at the INSS taxable amount. This amount is to be provided to the Seller in the body of the Invoice or calculated during the transaction input.

        :param inss_basis_discount: The inss_basis_discount of this PurchaseEntity.
        :type: float
        """

        self._inss_basis_discount = inss_basis_discount

    @property
    def iss_rf_rate(self):
        """
        Gets the iss_rf_rate of this PurchaseEntity.
        When Seller is Simples regime, the seller needs send RF rate.

        :return: The iss_rf_rate of this PurchaseEntity.
        :rtype: float
        """
        return self._iss_rf_rate

    @iss_rf_rate.setter
    def iss_rf_rate(self, iss_rf_rate):
        """
        Sets the iss_rf_rate of this PurchaseEntity.
        When Seller is Simples regime, the seller needs send RF rate.

        :param iss_rf_rate: The iss_rf_rate of this PurchaseEntity.
        :type: float
        """

        self._iss_rf_rate = iss_rf_rate

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
