# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VehicleID(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, license_plate=None, state_code=None, rtnc=None):
        """
        VehicleID - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'license_plate': 'str',
            'state_code': 'StateEnum',
            'rtnc': 'str'
        }

        self.attribute_map = {
            'license_plate': 'licensePlate',
            'state_code': 'stateCode',
            'rtnc': 'rtnc'
        }

        self._license_plate = license_plate
        self._state_code = state_code
        self._rtnc = rtnc

    @property
    def license_plate(self):
        """
        Gets the license_plate of this VehicleID.

        :return: The license_plate of this VehicleID.
        :rtype: str
        """
        return self._license_plate

    @license_plate.setter
    def license_plate(self, license_plate):
        """
        Sets the license_plate of this VehicleID.

        :param license_plate: The license_plate of this VehicleID.
        :type: str
        """
        if license_plate is None:
            raise ValueError("Invalid value for `license_plate`, must not be `None`")
        if license_plate is not None and not re.search('[A-Z]{2,3}[0-9]{4}|[A-Z]{3,4}[0-9]{3}', license_plate):
            raise ValueError("Invalid value for `license_plate`, must be a follow pattern or equal to `/[A-Z]{2,3}[0-9]{4}|[A-Z]{3,4}[0-9]{3}/`")

        self._license_plate = license_plate

    @property
    def state_code(self):
        """
        Gets the state_code of this VehicleID.

        :return: The state_code of this VehicleID.
        :rtype: StateEnum
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """
        Sets the state_code of this VehicleID.

        :param state_code: The state_code of this VehicleID.
        :type: StateEnum
        """
        if state_code is None:
            raise ValueError("Invalid value for `state_code`, must not be `None`")

        self._state_code = state_code

    @property
    def rtnc(self):
        """
        Gets the rtnc of this VehicleID.
        Cargo Transport National Register, Registro Nacional de Transportador de Carga (ANTT)

        :return: The rtnc of this VehicleID.
        :rtype: str
        """
        return self._rtnc

    @rtnc.setter
    def rtnc(self, rtnc):
        """
        Sets the rtnc of this VehicleID.
        Cargo Transport National Register, Registro Nacional de Transportador de Carga (ANTT)

        :param rtnc: The rtnc of this VehicleID.
        :type: str
        """
        if rtnc is not None and len(rtnc) > 20:
            raise ValueError("Invalid value for `rtnc`, length must be less than or equal to `20`")

        self._rtnc = rtnc

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
