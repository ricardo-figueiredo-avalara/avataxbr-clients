# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IpbtConfItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, state=None, federal_tax=None, import_tax=None, state_tax=None, city_tax=None, source=None):
        """
        IpbtConfItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'state': 'StateEnum',
            'federal_tax': 'float',
            'import_tax': 'float',
            'state_tax': 'float',
            'city_tax': 'float',
            'source': 'str'
        }

        self.attribute_map = {
            'state': 'state',
            'federal_tax': 'federalTax',
            'import_tax': 'importTax',
            'state_tax': 'stateTax',
            'city_tax': 'cityTax',
            'source': 'source'
        }

        self._state = state
        self._federal_tax = federal_tax
        self._import_tax = import_tax
        self._state_tax = state_tax
        self._city_tax = city_tax
        self._source = source

    @property
    def state(self):
        """
        Gets the state of this IpbtConfItem.

        :return: The state of this IpbtConfItem.
        :rtype: StateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this IpbtConfItem.

        :param state: The state of this IpbtConfItem.
        :type: StateEnum
        """

        self._state = state

    @property
    def federal_tax(self):
        """
        Gets the federal_tax of this IpbtConfItem.

        :return: The federal_tax of this IpbtConfItem.
        :rtype: float
        """
        return self._federal_tax

    @federal_tax.setter
    def federal_tax(self, federal_tax):
        """
        Sets the federal_tax of this IpbtConfItem.

        :param federal_tax: The federal_tax of this IpbtConfItem.
        :type: float
        """

        self._federal_tax = federal_tax

    @property
    def import_tax(self):
        """
        Gets the import_tax of this IpbtConfItem.

        :return: The import_tax of this IpbtConfItem.
        :rtype: float
        """
        return self._import_tax

    @import_tax.setter
    def import_tax(self, import_tax):
        """
        Sets the import_tax of this IpbtConfItem.

        :param import_tax: The import_tax of this IpbtConfItem.
        :type: float
        """

        self._import_tax = import_tax

    @property
    def state_tax(self):
        """
        Gets the state_tax of this IpbtConfItem.

        :return: The state_tax of this IpbtConfItem.
        :rtype: float
        """
        return self._state_tax

    @state_tax.setter
    def state_tax(self, state_tax):
        """
        Sets the state_tax of this IpbtConfItem.

        :param state_tax: The state_tax of this IpbtConfItem.
        :type: float
        """

        self._state_tax = state_tax

    @property
    def city_tax(self):
        """
        Gets the city_tax of this IpbtConfItem.

        :return: The city_tax of this IpbtConfItem.
        :rtype: float
        """
        return self._city_tax

    @city_tax.setter
    def city_tax(self, city_tax):
        """
        Sets the city_tax of this IpbtConfItem.

        :param city_tax: The city_tax of this IpbtConfItem.
        :type: float
        """

        self._city_tax = city_tax

    @property
    def source(self):
        """
        Gets the source of this IpbtConfItem.

        :return: The source of this IpbtConfItem.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this IpbtConfItem.

        :param source: The source of this IpbtConfItem.
        :type: str
        """

        self._source = source

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
