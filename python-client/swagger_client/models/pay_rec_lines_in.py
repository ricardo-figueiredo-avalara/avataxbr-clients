# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PayRecLinesIn(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, line_code=None, line_type=None, item_code=None, item_description=None, item_doc_number=None, line_untaxed_penality=None, line_untaxed_discount=None):
        """
        PayRecLinesIn - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'line_code': 'int',
            'line_type': 'str',
            'item_code': 'str',
            'item_description': 'str',
            'item_doc_number': 'str',
            'line_untaxed_penality': 'float',
            'line_untaxed_discount': 'float'
        }

        self.attribute_map = {
            'line_code': 'lineCode',
            'line_type': 'lineType',
            'item_code': 'itemCode',
            'item_description': 'itemDescription',
            'item_doc_number': 'itemDocNumber',
            'line_untaxed_penality': 'lineUntaxedPenality',
            'line_untaxed_discount': 'lineUntaxedDiscount'
        }

        self._line_code = line_code
        self._line_type = line_type
        self._item_code = item_code
        self._item_description = item_description
        self._item_doc_number = item_doc_number
        self._line_untaxed_penality = line_untaxed_penality
        self._line_untaxed_discount = line_untaxed_discount

    @property
    def line_code(self):
        """
        Gets the line_code of this PayRecLinesIn.
        Installment number in this document

        :return: The line_code of this PayRecLinesIn.
        :rtype: int
        """
        return self._line_code

    @line_code.setter
    def line_code(self, line_code):
        """
        Sets the line_code of this PayRecLinesIn.
        Installment number in this document

        :param line_code: The line_code of this PayRecLinesIn.
        :type: int
        """

        self._line_code = line_code

    @property
    def line_type(self):
        """
        Gets the line_type of this PayRecLinesIn.

        :return: The line_type of this PayRecLinesIn.
        :rtype: str
        """
        return self._line_type

    @line_type.setter
    def line_type(self, line_type):
        """
        Sets the line_type of this PayRecLinesIn.

        :param line_type: The line_type of this PayRecLinesIn.
        :type: str
        """
        allowed_values = ["installment"]
        if line_type not in allowed_values:
            raise ValueError(
                "Invalid value for `line_type` ({0}), must be one of {1}"
                .format(line_type, allowed_values)
            )

        self._line_type = line_type

    @property
    def item_code(self):
        """
        Gets the item_code of this PayRecLinesIn.
        Bill transaction code This string is a code maintained by the client application to uniquely identify a document in the client's systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc.

        :return: The item_code of this PayRecLinesIn.
        :rtype: str
        """
        return self._item_code

    @item_code.setter
    def item_code(self, item_code):
        """
        Sets the item_code of this PayRecLinesIn.
        Bill transaction code This string is a code maintained by the client application to uniquely identify a document in the client's systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc.

        :param item_code: The item_code of this PayRecLinesIn.
        :type: str
        """
        if item_code is None:
            raise ValueError("Invalid value for `item_code`, must not be `None`")

        self._item_code = item_code

    @property
    def item_description(self):
        """
        Gets the item_description of this PayRecLinesIn.
        Free description about this payment

        :return: The item_description of this PayRecLinesIn.
        :rtype: str
        """
        return self._item_description

    @item_description.setter
    def item_description(self, item_description):
        """
        Sets the item_description of this PayRecLinesIn.
        Free description about this payment

        :param item_description: The item_description of this PayRecLinesIn.
        :type: str
        """

        self._item_description = item_description

    @property
    def item_doc_number(self):
        """
        Gets the item_doc_number of this PayRecLinesIn.
        Installment number, when paid AS IS

        :return: The item_doc_number of this PayRecLinesIn.
        :rtype: str
        """
        return self._item_doc_number

    @item_doc_number.setter
    def item_doc_number(self, item_doc_number):
        """
        Sets the item_doc_number of this PayRecLinesIn.
        Installment number, when paid AS IS

        :param item_doc_number: The item_doc_number of this PayRecLinesIn.
        :type: str
        """

        self._item_doc_number = item_doc_number

    @property
    def line_untaxed_penality(self):
        """
        Gets the line_untaxed_penality of this PayRecLinesIn.
        Penalty, usually because paid after due date

        :return: The line_untaxed_penality of this PayRecLinesIn.
        :rtype: float
        """
        return self._line_untaxed_penality

    @line_untaxed_penality.setter
    def line_untaxed_penality(self, line_untaxed_penality):
        """
        Sets the line_untaxed_penality of this PayRecLinesIn.
        Penalty, usually because paid after due date

        :param line_untaxed_penality: The line_untaxed_penality of this PayRecLinesIn.
        :type: float
        """

        self._line_untaxed_penality = line_untaxed_penality

    @property
    def line_untaxed_discount(self):
        """
        Gets the line_untaxed_discount of this PayRecLinesIn.
        unconditional discounts

        :return: The line_untaxed_discount of this PayRecLinesIn.
        :rtype: float
        """
        return self._line_untaxed_discount

    @line_untaxed_discount.setter
    def line_untaxed_discount(self, line_untaxed_discount):
        """
        Sets the line_untaxed_discount of this PayRecLinesIn.
        unconditional discounts

        :param line_untaxed_discount: The line_untaxed_discount of this PayRecLinesIn.
        :type: float
        """

        self._line_untaxed_discount = line_untaxed_discount

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
