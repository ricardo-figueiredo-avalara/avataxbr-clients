# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SalesLinesOut(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, line_code=None, item_code=None, number_of_items=1.0, line_amount=None, item_description=None, line_taxed_discount=None, line_untaxed_discount=None, tax_deductions=None, avalara_goods_and_services_type=None, line_net_value=None, cst=None, cst_rf=None, calculated_tax=None):
        """
        SalesLinesOut - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'line_code': 'int',
            'item_code': 'str',
            'number_of_items': 'float',
            'line_amount': 'float',
            'item_description': 'str',
            'line_taxed_discount': 'float',
            'line_untaxed_discount': 'float',
            'tax_deductions': 'SalesLinesOutTaxDeductions',
            'avalara_goods_and_services_type': 'str',
            'line_net_value': 'float',
            'cst': 'str',
            'cst_rf': 'str',
            'calculated_tax': 'SalesCalculatedTax'
        }

        self.attribute_map = {
            'line_code': 'lineCode',
            'item_code': 'itemCode',
            'number_of_items': 'numberOfItems',
            'line_amount': 'lineAmount',
            'item_description': 'itemDescription',
            'line_taxed_discount': 'lineTaxedDiscount',
            'line_untaxed_discount': 'lineUntaxedDiscount',
            'tax_deductions': 'taxDeductions',
            'avalara_goods_and_services_type': 'avalaraGoodsAndServicesType',
            'line_net_value': 'lineNetValue',
            'cst': 'cst',
            'cst_rf': 'cstRf',
            'calculated_tax': 'calculatedTax'
        }

        self._line_code = line_code
        self._item_code = item_code
        self._number_of_items = number_of_items
        self._line_amount = line_amount
        self._item_description = item_description
        self._line_taxed_discount = line_taxed_discount
        self._line_untaxed_discount = line_untaxed_discount
        self._tax_deductions = tax_deductions
        self._avalara_goods_and_services_type = avalara_goods_and_services_type
        self._line_net_value = line_net_value
        self._cst = cst
        self._cst_rf = cst_rf
        self._calculated_tax = calculated_tax

    @property
    def line_code(self):
        """
        Gets the line_code of this SalesLinesOut.
        This string is a unique identifier for this line in the transaction

        :return: The line_code of this SalesLinesOut.
        :rtype: int
        """
        return self._line_code

    @line_code.setter
    def line_code(self, line_code):
        """
        Sets the line_code of this SalesLinesOut.
        This string is a unique identifier for this line in the transaction

        :param line_code: The line_code of this SalesLinesOut.
        :type: int
        """

        self._line_code = line_code

    @property
    def item_code(self):
        """
        Gets the item_code of this SalesLinesOut.
        This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states.

        :return: The item_code of this SalesLinesOut.
        :rtype: str
        """
        return self._item_code

    @item_code.setter
    def item_code(self, item_code):
        """
        Sets the item_code of this SalesLinesOut.
        This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states.

        :param item_code: The item_code of this SalesLinesOut.
        :type: str
        """
        if item_code is None:
            raise ValueError("Invalid value for `item_code`, must not be `None`")

        self._item_code = item_code

    @property
    def number_of_items(self):
        """
        Gets the number_of_items of this SalesLinesOut.
        This decimal captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1

        :return: The number_of_items of this SalesLinesOut.
        :rtype: float
        """
        return self._number_of_items

    @number_of_items.setter
    def number_of_items(self, number_of_items):
        """
        Sets the number_of_items of this SalesLinesOut.
        This decimal captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1

        :param number_of_items: The number_of_items of this SalesLinesOut.
        :type: float
        """

        self._number_of_items = number_of_items

    @property
    def line_amount(self):
        """
        Gets the line_amount of this SalesLinesOut.
        This decimal captures the total cost of this line. In its simplest form lineAmount = (item price * numberOfItems).

        :return: The line_amount of this SalesLinesOut.
        :rtype: float
        """
        return self._line_amount

    @line_amount.setter
    def line_amount(self, line_amount):
        """
        Sets the line_amount of this SalesLinesOut.
        This decimal captures the total cost of this line. In its simplest form lineAmount = (item price * numberOfItems).

        :param line_amount: The line_amount of this SalesLinesOut.
        :type: float
        """

        self._line_amount = line_amount

    @property
    def item_description(self):
        """
        Gets the item_description of this SalesLinesOut.
        This string captures the description of the item represented by this line, will be used LC 116

        :return: The item_description of this SalesLinesOut.
        :rtype: str
        """
        return self._item_description

    @item_description.setter
    def item_description(self, item_description):
        """
        Sets the item_description of this SalesLinesOut.
        This string captures the description of the item represented by this line, will be used LC 116

        :param item_description: The item_description of this SalesLinesOut.
        :type: str
        """

        self._item_description = item_description

    @property
    def line_taxed_discount(self):
        """
        Gets the line_taxed_discount of this SalesLinesOut.
        Conditional discount

        :return: The line_taxed_discount of this SalesLinesOut.
        :rtype: float
        """
        return self._line_taxed_discount

    @line_taxed_discount.setter
    def line_taxed_discount(self, line_taxed_discount):
        """
        Sets the line_taxed_discount of this SalesLinesOut.
        Conditional discount

        :param line_taxed_discount: The line_taxed_discount of this SalesLinesOut.
        :type: float
        """

        self._line_taxed_discount = line_taxed_discount

    @property
    def line_untaxed_discount(self):
        """
        Gets the line_untaxed_discount of this SalesLinesOut.
        Unconditional discount

        :return: The line_untaxed_discount of this SalesLinesOut.
        :rtype: float
        """
        return self._line_untaxed_discount

    @line_untaxed_discount.setter
    def line_untaxed_discount(self, line_untaxed_discount):
        """
        Sets the line_untaxed_discount of this SalesLinesOut.
        Unconditional discount

        :param line_untaxed_discount: The line_untaxed_discount of this SalesLinesOut.
        :type: float
        """

        self._line_untaxed_discount = line_untaxed_discount

    @property
    def tax_deductions(self):
        """
        Gets the tax_deductions of this SalesLinesOut.

        :return: The tax_deductions of this SalesLinesOut.
        :rtype: SalesLinesOutTaxDeductions
        """
        return self._tax_deductions

    @tax_deductions.setter
    def tax_deductions(self, tax_deductions):
        """
        Sets the tax_deductions of this SalesLinesOut.

        :param tax_deductions: The tax_deductions of this SalesLinesOut.
        :type: SalesLinesOutTaxDeductions
        """

        self._tax_deductions = tax_deductions

    @property
    def avalara_goods_and_services_type(self):
        """
        Gets the avalara_goods_and_services_type of this SalesLinesOut.
        AGAST CODE for itemCode

        :return: The avalara_goods_and_services_type of this SalesLinesOut.
        :rtype: str
        """
        return self._avalara_goods_and_services_type

    @avalara_goods_and_services_type.setter
    def avalara_goods_and_services_type(self, avalara_goods_and_services_type):
        """
        Sets the avalara_goods_and_services_type of this SalesLinesOut.
        AGAST CODE for itemCode

        :param avalara_goods_and_services_type: The avalara_goods_and_services_type of this SalesLinesOut.
        :type: str
        """

        self._avalara_goods_and_services_type = avalara_goods_and_services_type

    @property
    def line_net_value(self):
        """
        Gets the line_net_value of this SalesLinesOut.
        This decimal captures the total cost of this line. In its simplest form lineNetValue = (lineAmount - discountTaxable - sum of whithholdings).

        :return: The line_net_value of this SalesLinesOut.
        :rtype: float
        """
        return self._line_net_value

    @line_net_value.setter
    def line_net_value(self, line_net_value):
        """
        Sets the line_net_value of this SalesLinesOut.
        This decimal captures the total cost of this line. In its simplest form lineNetValue = (lineAmount - discountTaxable - sum of whithholdings).

        :param line_net_value: The line_net_value of this SalesLinesOut.
        :type: float
        """

        self._line_net_value = line_net_value

    @property
    def cst(self):
        """
        Gets the cst of this SalesLinesOut.
        - '01' # ORIGIN MODE - '02' # ORIGIN MODE BUT EXEMPT - '03' # ORIGIN MODE BUT IMMUNE - '04' # ORIGIN MODE BUT SUSPENDED FOR LEGAL REASON - '05' # ORIGIN MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON - '21' # DESTINATION MODE - '22' # DESTINATION MODE BUT EXEMPT - '23' # DESTINATION MODE BUT IMMUNE - '24' # DESTINATION MODE BUT SUSPENDED - '25' # DESTINATION MODE BUT SUSPENDED - '40' # FOREIGN IMMUNE MODE 

        :return: The cst of this SalesLinesOut.
        :rtype: str
        """
        return self._cst

    @cst.setter
    def cst(self, cst):
        """
        Sets the cst of this SalesLinesOut.
        - '01' # ORIGIN MODE - '02' # ORIGIN MODE BUT EXEMPT - '03' # ORIGIN MODE BUT IMMUNE - '04' # ORIGIN MODE BUT SUSPENDED FOR LEGAL REASON - '05' # ORIGIN MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON - '21' # DESTINATION MODE - '22' # DESTINATION MODE BUT EXEMPT - '23' # DESTINATION MODE BUT IMMUNE - '24' # DESTINATION MODE BUT SUSPENDED - '25' # DESTINATION MODE BUT SUSPENDED - '40' # FOREIGN IMMUNE MODE 

        :param cst: The cst of this SalesLinesOut.
        :type: str
        """
        allowed_values = ["01", "02", "03", "04", "05", "21", "22", "23", "24", "25", "40"]
        if cst not in allowed_values:
            raise ValueError(
                "Invalid value for `cst` ({0}), must be one of {1}"
                .format(cst, allowed_values)
            )

        self._cst = cst

    @property
    def cst_rf(self):
        """
        Gets the cst_rf of this SalesLinesOut.
        - '61' # WITHHOLD NORMAL MODE - '62' # WITHHOLD NORMAL MODE BUT EXEMPT - '63' # WITHHOLD NORMAL MODE BUT IMMUNE - '64' # WITHHOLD NORMAL MODE BUT SUSPENDED FOR LEGAL REASON - '65' # WITHHOLD NORMAL MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON - '66' # WITHHOLD FORCED MODE - '67' # WITHHOLD FORCED MODE BUT EXEMPT - '68' # WITHHOLD FORCED MODE BUT IMMUNE - '69' # WITHHOLD FORCED MODE BUT SUSPENDED FOR LEGAL REASON - '70' # WITHHOLD FORCED MODE BUT SUSPENDED FOR ADMINISTRATIVE PROCESS - '71' # NO WITHHOLD MODE - '72' # NO WITHHOLD FOREIGN MODE 

        :return: The cst_rf of this SalesLinesOut.
        :rtype: str
        """
        return self._cst_rf

    @cst_rf.setter
    def cst_rf(self, cst_rf):
        """
        Sets the cst_rf of this SalesLinesOut.
        - '61' # WITHHOLD NORMAL MODE - '62' # WITHHOLD NORMAL MODE BUT EXEMPT - '63' # WITHHOLD NORMAL MODE BUT IMMUNE - '64' # WITHHOLD NORMAL MODE BUT SUSPENDED FOR LEGAL REASON - '65' # WITHHOLD NORMAL MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON - '66' # WITHHOLD FORCED MODE - '67' # WITHHOLD FORCED MODE BUT EXEMPT - '68' # WITHHOLD FORCED MODE BUT IMMUNE - '69' # WITHHOLD FORCED MODE BUT SUSPENDED FOR LEGAL REASON - '70' # WITHHOLD FORCED MODE BUT SUSPENDED FOR ADMINISTRATIVE PROCESS - '71' # NO WITHHOLD MODE - '72' # NO WITHHOLD FOREIGN MODE 

        :param cst_rf: The cst_rf of this SalesLinesOut.
        :type: str
        """
        allowed_values = ["61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72"]
        if cst_rf not in allowed_values:
            raise ValueError(
                "Invalid value for `cst_rf` ({0}), must be one of {1}"
                .format(cst_rf, allowed_values)
            )

        self._cst_rf = cst_rf

    @property
    def calculated_tax(self):
        """
        Gets the calculated_tax of this SalesLinesOut.

        :return: The calculated_tax of this SalesLinesOut.
        :rtype: SalesCalculatedTax
        """
        return self._calculated_tax

    @calculated_tax.setter
    def calculated_tax(self, calculated_tax):
        """
        Sets the calculated_tax of this SalesLinesOut.

        :param calculated_tax: The calculated_tax of this SalesLinesOut.
        :type: SalesCalculatedTax
        """

        self._calculated_tax = calculated_tax

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
