# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PurchaseHeaderOutPayment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, terms=None, withholding_mode=None, installments=None):
        """
        PurchaseHeaderOutPayment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'terms': 'PaymentTerms',
            'withholding_mode': 'WithholdingMode',
            'installments': 'list[InstallmentComplete]'
        }

        self.attribute_map = {
            'terms': 'terms',
            'withholding_mode': 'withholdingMode',
            'installments': 'installments'
        }

        self._terms = terms
        self._withholding_mode = withholding_mode
        self._installments = installments

    @property
    def terms(self):
        """
        Gets the terms of this PurchaseHeaderOutPayment.

        :return: The terms of this PurchaseHeaderOutPayment.
        :rtype: PaymentTerms
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """
        Sets the terms of this PurchaseHeaderOutPayment.

        :param terms: The terms of this PurchaseHeaderOutPayment.
        :type: PaymentTerms
        """

        self._terms = terms

    @property
    def withholding_mode(self):
        """
        Gets the withholding_mode of this PurchaseHeaderOutPayment.

        :return: The withholding_mode of this PurchaseHeaderOutPayment.
        :rtype: WithholdingMode
        """
        return self._withholding_mode

    @withholding_mode.setter
    def withholding_mode(self, withholding_mode):
        """
        Sets the withholding_mode of this PurchaseHeaderOutPayment.

        :param withholding_mode: The withholding_mode of this PurchaseHeaderOutPayment.
        :type: WithholdingMode
        """

        self._withholding_mode = withholding_mode

    @property
    def installments(self):
        """
        Gets the installments of this PurchaseHeaderOutPayment.
        installments

        :return: The installments of this PurchaseHeaderOutPayment.
        :rtype: list[InstallmentComplete]
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """
        Sets the installments of this PurchaseHeaderOutPayment.
        installments

        :param installments: The installments of this PurchaseHeaderOutPayment.
        :type: list[InstallmentComplete]
        """

        self._installments = installments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
