# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AdditionalInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, fiscal_info=None, complementary_info=None, proc_ref=None):
        """
        AdditionalInformation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'fiscal_info': 'str',
            'complementary_info': 'str',
            'proc_ref': 'list[AdditionalInformationProcRef]'
        }

        self.attribute_map = {
            'fiscal_info': 'fiscalInfo',
            'complementary_info': 'complementaryInfo',
            'proc_ref': 'procRef'
        }

        self._fiscal_info = fiscal_info
        self._complementary_info = complementary_info
        self._proc_ref = proc_ref

    @property
    def fiscal_info(self):
        """
        Gets the fiscal_info of this AdditionalInformation.
        Additional information of fiscal interest

        :return: The fiscal_info of this AdditionalInformation.
        :rtype: str
        """
        return self._fiscal_info

    @fiscal_info.setter
    def fiscal_info(self, fiscal_info):
        """
        Sets the fiscal_info of this AdditionalInformation.
        Additional information of fiscal interest

        :param fiscal_info: The fiscal_info of this AdditionalInformation.
        :type: str
        """
        if fiscal_info is not None and len(fiscal_info) > 2000:
            raise ValueError("Invalid value for `fiscal_info`, length must be less than or equal to `2000`")
        if fiscal_info is not None and not re.search('[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}', fiscal_info):
            raise ValueError("Invalid value for `fiscal_info`, must be a follow pattern or equal to `/[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}/`")

        self._fiscal_info = fiscal_info

    @property
    def complementary_info(self):
        """
        Gets the complementary_info of this AdditionalInformation.
        Additional information of user interest

        :return: The complementary_info of this AdditionalInformation.
        :rtype: str
        """
        return self._complementary_info

    @complementary_info.setter
    def complementary_info(self, complementary_info):
        """
        Sets the complementary_info of this AdditionalInformation.
        Additional information of user interest

        :param complementary_info: The complementary_info of this AdditionalInformation.
        :type: str
        """
        if complementary_info is not None and len(complementary_info) > 5000:
            raise ValueError("Invalid value for `complementary_info`, length must be less than or equal to `5000`")
        if complementary_info is not None and not re.search('[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}', complementary_info):
            raise ValueError("Invalid value for `complementary_info`, must be a follow pattern or equal to `/[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}/`")

        self._complementary_info = complementary_info

    @property
    def proc_ref(self):
        """
        Gets the proc_ref of this AdditionalInformation.
        Referenced Process

        :return: The proc_ref of this AdditionalInformation.
        :rtype: list[AdditionalInformationProcRef]
        """
        return self._proc_ref

    @proc_ref.setter
    def proc_ref(self, proc_ref):
        """
        Sets the proc_ref of this AdditionalInformation.
        Referenced Process

        :param proc_ref: The proc_ref of this AdditionalInformation.
        :type: list[AdditionalInformationProcRef]
        """

        self._proc_ref = proc_ref

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
