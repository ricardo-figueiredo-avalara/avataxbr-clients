# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IssConfServiceListTaxRate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, iss=None, iss_rf=None, iss_e=None, iss_i=None, ibpt=None):
        """
        IssConfServiceListTaxRate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'iss': 'ServiceItemTaxRate',
            'iss_rf': 'ServiceItemTaxRate',
            'iss_e': 'ServiceItemTaxRate',
            'iss_i': 'ServiceItemTaxRate',
            'ibpt': 'IssConfServiceListTaxRateIbpt'
        }

        self.attribute_map = {
            'iss': 'ISS',
            'iss_rf': 'ISS_RF',
            'iss_e': 'ISS_E',
            'iss_i': 'ISS_I',
            'ibpt': 'ibpt'
        }

        self._iss = iss
        self._iss_rf = iss_rf
        self._iss_e = iss_e
        self._iss_i = iss_i
        self._ibpt = ibpt

    @property
    def iss(self):
        """
        Gets the iss of this IssConfServiceListTaxRate.

        :return: The iss of this IssConfServiceListTaxRate.
        :rtype: ServiceItemTaxRate
        """
        return self._iss

    @iss.setter
    def iss(self, iss):
        """
        Sets the iss of this IssConfServiceListTaxRate.

        :param iss: The iss of this IssConfServiceListTaxRate.
        :type: ServiceItemTaxRate
        """

        self._iss = iss

    @property
    def iss_rf(self):
        """
        Gets the iss_rf of this IssConfServiceListTaxRate.

        :return: The iss_rf of this IssConfServiceListTaxRate.
        :rtype: ServiceItemTaxRate
        """
        return self._iss_rf

    @iss_rf.setter
    def iss_rf(self, iss_rf):
        """
        Sets the iss_rf of this IssConfServiceListTaxRate.

        :param iss_rf: The iss_rf of this IssConfServiceListTaxRate.
        :type: ServiceItemTaxRate
        """

        self._iss_rf = iss_rf

    @property
    def iss_e(self):
        """
        Gets the iss_e of this IssConfServiceListTaxRate.

        :return: The iss_e of this IssConfServiceListTaxRate.
        :rtype: ServiceItemTaxRate
        """
        return self._iss_e

    @iss_e.setter
    def iss_e(self, iss_e):
        """
        Sets the iss_e of this IssConfServiceListTaxRate.

        :param iss_e: The iss_e of this IssConfServiceListTaxRate.
        :type: ServiceItemTaxRate
        """

        self._iss_e = iss_e

    @property
    def iss_i(self):
        """
        Gets the iss_i of this IssConfServiceListTaxRate.

        :return: The iss_i of this IssConfServiceListTaxRate.
        :rtype: ServiceItemTaxRate
        """
        return self._iss_i

    @iss_i.setter
    def iss_i(self, iss_i):
        """
        Sets the iss_i of this IssConfServiceListTaxRate.

        :param iss_i: The iss_i of this IssConfServiceListTaxRate.
        :type: ServiceItemTaxRate
        """

        self._iss_i = iss_i

    @property
    def ibpt(self):
        """
        Gets the ibpt of this IssConfServiceListTaxRate.

        :return: The ibpt of this IssConfServiceListTaxRate.
        :rtype: IssConfServiceListTaxRateIbpt
        """
        return self._ibpt

    @ibpt.setter
    def ibpt(self, ibpt):
        """
        Sets the ibpt of this IssConfServiceListTaxRate.

        :param ibpt: The ibpt of this IssConfServiceListTaxRate.
        :type: IssConfServiceListTaxRateIbpt
        """

        self._ibpt = ibpt

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
