# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PaymentPaymentMode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, mode=None, value=None, card_tp_integration=None, card_cnpj=None, card_brand=None, card_authorization=None):
        """
        PaymentPaymentMode - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'mode': 'str',
            'value': 'float',
            'card_tp_integration': 'str',
            'card_cnpj': 'str',
            'card_brand': 'str',
            'card_authorization': 'str'
        }

        self.attribute_map = {
            'mode': 'mode',
            'value': 'value',
            'card_tp_integration': 'cardTpIntegration',
            'card_cnpj': 'cardCNPJ',
            'card_brand': 'cardBrand',
            'card_authorization': 'cardAuthorization'
        }

        self._mode = mode
        self._value = value
        self._card_tp_integration = card_tp_integration
        self._card_cnpj = card_cnpj
        self._card_brand = card_brand
        self._card_authorization = card_authorization

    @property
    def mode(self):
        """
        Gets the mode of this PaymentPaymentMode.
        Payment mode - '01' # Dinheiro - '02' # Cheque - '03' # Cartão de Crédito - '04' # Cartão de Débito - '05' # Crédito Loja - '10' # Vale Alimentação - '11' # Vale Refeição - '12' # Vale Presente - '13' # Vale Combustível - '99' # Outros 

        :return: The mode of this PaymentPaymentMode.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this PaymentPaymentMode.
        Payment mode - '01' # Dinheiro - '02' # Cheque - '03' # Cartão de Crédito - '04' # Cartão de Débito - '05' # Crédito Loja - '10' # Vale Alimentação - '11' # Vale Refeição - '12' # Vale Presente - '13' # Vale Combustível - '99' # Outros 

        :param mode: The mode of this PaymentPaymentMode.
        :type: str
        """
        allowed_values = ["01", "02", "03", "04", "05", "10", "11", "12", "13", "99"]
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def value(self):
        """
        Gets the value of this PaymentPaymentMode.
        payment value

        :return: The value of this PaymentPaymentMode.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this PaymentPaymentMode.
        payment value

        :param value: The value of this PaymentPaymentMode.
        :type: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def card_tp_integration(self):
        """
        Gets the card_tp_integration of this PaymentPaymentMode.
        - '1' # Payment integrated with system, - '2' # Payment not integrated with system 

        :return: The card_tp_integration of this PaymentPaymentMode.
        :rtype: str
        """
        return self._card_tp_integration

    @card_tp_integration.setter
    def card_tp_integration(self, card_tp_integration):
        """
        Sets the card_tp_integration of this PaymentPaymentMode.
        - '1' # Payment integrated with system, - '2' # Payment not integrated with system 

        :param card_tp_integration: The card_tp_integration of this PaymentPaymentMode.
        :type: str
        """
        allowed_values = ["1", "2"]
        if card_tp_integration not in allowed_values:
            raise ValueError(
                "Invalid value for `card_tp_integration` ({0}), must be one of {1}"
                .format(card_tp_integration, allowed_values)
            )

        self._card_tp_integration = card_tp_integration

    @property
    def card_cnpj(self):
        """
        Gets the card_cnpj of this PaymentPaymentMode.
        Federal tax id of accrediting card (credenciadora do cartão)

        :return: The card_cnpj of this PaymentPaymentMode.
        :rtype: str
        """
        return self._card_cnpj

    @card_cnpj.setter
    def card_cnpj(self, card_cnpj):
        """
        Sets the card_cnpj of this PaymentPaymentMode.
        Federal tax id of accrediting card (credenciadora do cartão)

        :param card_cnpj: The card_cnpj of this PaymentPaymentMode.
        :type: str
        """
        if card_cnpj is not None and not re.search('[0-9]{14}', card_cnpj):
            raise ValueError("Invalid value for `card_cnpj`, must be a follow pattern or equal to `/[0-9]{14}/`")

        self._card_cnpj = card_cnpj

    @property
    def card_brand(self):
        """
        Gets the card_brand of this PaymentPaymentMode.
        card brand - '01' # Visa - '02' # Mastercard - '03' # American Express - '04' # Sorocred - '99' # Other 

        :return: The card_brand of this PaymentPaymentMode.
        :rtype: str
        """
        return self._card_brand

    @card_brand.setter
    def card_brand(self, card_brand):
        """
        Sets the card_brand of this PaymentPaymentMode.
        card brand - '01' # Visa - '02' # Mastercard - '03' # American Express - '04' # Sorocred - '99' # Other 

        :param card_brand: The card_brand of this PaymentPaymentMode.
        :type: str
        """
        allowed_values = ["01", "02", "03", "04", "99"]
        if card_brand not in allowed_values:
            raise ValueError(
                "Invalid value for `card_brand` ({0}), must be one of {1}"
                .format(card_brand, allowed_values)
            )

        self._card_brand = card_brand

    @property
    def card_authorization(self):
        """
        Gets the card_authorization of this PaymentPaymentMode.
        transaction authorization number

        :return: The card_authorization of this PaymentPaymentMode.
        :rtype: str
        """
        return self._card_authorization

    @card_authorization.setter
    def card_authorization(self, card_authorization):
        """
        Sets the card_authorization of this PaymentPaymentMode.
        transaction authorization number

        :param card_authorization: The card_authorization of this PaymentPaymentMode.
        :type: str
        """
        if card_authorization is not None and len(card_authorization) > 20:
            raise ValueError("Invalid value for `card_authorization`, length must be less than or equal to `20`")
        if card_authorization is not None and len(card_authorization) < 1:
            raise ValueError("Invalid value for `card_authorization`, length must be greater than or equal to `1`")

        self._card_authorization = card_authorization

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
