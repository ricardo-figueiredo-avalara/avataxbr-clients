# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LineForGoodsAdi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, add_number=None, sequential_number=None, manufacturer_code=None, adi_discount=None, drawback_number=None):
        """
        LineForGoodsAdi - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'add_number': 'int',
            'sequential_number': 'int',
            'manufacturer_code': 'str',
            'adi_discount': 'float',
            'drawback_number': 'str'
        }

        self.attribute_map = {
            'add_number': 'addNumber',
            'sequential_number': 'sequentialNumber',
            'manufacturer_code': 'manufacturerCode',
            'adi_discount': 'adiDiscount',
            'drawback_number': 'drawbackNumber'
        }

        self._add_number = add_number
        self._sequential_number = sequential_number
        self._manufacturer_code = manufacturer_code
        self._adi_discount = adi_discount
        self._drawback_number = drawback_number

    @property
    def add_number(self):
        """
        Gets the add_number of this LineForGoodsAdi.
        aditional sequence number (1 to 100)

        :return: The add_number of this LineForGoodsAdi.
        :rtype: int
        """
        return self._add_number

    @add_number.setter
    def add_number(self, add_number):
        """
        Sets the add_number of this LineForGoodsAdi.
        aditional sequence number (1 to 100)

        :param add_number: The add_number of this LineForGoodsAdi.
        :type: int
        """
        if add_number is None:
            raise ValueError("Invalid value for `add_number`, must not be `None`")

        self._add_number = add_number

    @property
    def sequential_number(self):
        """
        Gets the sequential_number of this LineForGoodsAdi.
        sequential item number for this adi, sequence number (1 to 999)

        :return: The sequential_number of this LineForGoodsAdi.
        :rtype: int
        """
        return self._sequential_number

    @sequential_number.setter
    def sequential_number(self, sequential_number):
        """
        Sets the sequential_number of this LineForGoodsAdi.
        sequential item number for this adi, sequence number (1 to 999)

        :param sequential_number: The sequential_number of this LineForGoodsAdi.
        :type: int
        """
        if sequential_number is None:
            raise ValueError("Invalid value for `sequential_number`, must not be `None`")

        self._sequential_number = sequential_number

    @property
    def manufacturer_code(self):
        """
        Gets the manufacturer_code of this LineForGoodsAdi.
        Manufatorer erp internal code

        :return: The manufacturer_code of this LineForGoodsAdi.
        :rtype: str
        """
        return self._manufacturer_code

    @manufacturer_code.setter
    def manufacturer_code(self, manufacturer_code):
        """
        Sets the manufacturer_code of this LineForGoodsAdi.
        Manufatorer erp internal code

        :param manufacturer_code: The manufacturer_code of this LineForGoodsAdi.
        :type: str
        """
        if manufacturer_code is None:
            raise ValueError("Invalid value for `manufacturer_code`, must not be `None`")
        if manufacturer_code is not None and len(manufacturer_code) > 60:
            raise ValueError("Invalid value for `manufacturer_code`, length must be less than or equal to `60`")
        if manufacturer_code is not None and len(manufacturer_code) < 1:
            raise ValueError("Invalid value for `manufacturer_code`, length must be greater than or equal to `1`")

        self._manufacturer_code = manufacturer_code

    @property
    def adi_discount(self):
        """
        Gets the adi_discount of this LineForGoodsAdi.
        This decimal 13 integers and 2 decimals, aditional adi discount

        :return: The adi_discount of this LineForGoodsAdi.
        :rtype: float
        """
        return self._adi_discount

    @adi_discount.setter
    def adi_discount(self, adi_discount):
        """
        Sets the adi_discount of this LineForGoodsAdi.
        This decimal 13 integers and 2 decimals, aditional adi discount

        :param adi_discount: The adi_discount of this LineForGoodsAdi.
        :type: float
        """

        self._adi_discount = adi_discount

    @property
    def drawback_number(self):
        """
        Gets the drawback_number of this LineForGoodsAdi.
        Drawback number

        :return: The drawback_number of this LineForGoodsAdi.
        :rtype: str
        """
        return self._drawback_number

    @drawback_number.setter
    def drawback_number(self, drawback_number):
        """
        Sets the drawback_number of this LineForGoodsAdi.
        Drawback number

        :param drawback_number: The drawback_number of this LineForGoodsAdi.
        :type: str
        """
        if drawback_number is not None and len(drawback_number) < 1:
            raise ValueError("Invalid value for `drawback_number`, length must be greater than or equal to `1`")
        if drawback_number is not None and not re.search('[0-9]{0,11}', drawback_number):
            raise ValueError("Invalid value for `drawback_number`, must be a follow pattern or equal to `/[0-9]{0,11}/`")

        self._drawback_number = drawback_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
