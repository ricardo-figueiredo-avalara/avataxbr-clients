# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NRefRefECF(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, n_ecf=None, n_coo=None, mod_ecf=None):
        """
        NRefRefECF - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'n_ecf': 'str',
            'n_coo': 'str',
            'mod_ecf': 'str'
        }

        self.attribute_map = {
            'n_ecf': 'nECF',
            'n_coo': 'nCOO',
            'mod_ecf': 'modECF'
        }

        self._n_ecf = n_ecf
        self._n_coo = n_coo
        self._mod_ecf = mod_ecf

    @property
    def n_ecf(self):
        """
        Gets the n_ecf of this NRefRefECF.
        ECF Sequential number that generated Cupom attached to NFe informar o número de ordem seqüencial do ECF que emitiu o Cupom Fiscal vinculado à NF-e 

        :return: The n_ecf of this NRefRefECF.
        :rtype: str
        """
        return self._n_ecf

    @n_ecf.setter
    def n_ecf(self, n_ecf):
        """
        Sets the n_ecf of this NRefRefECF.
        ECF Sequential number that generated Cupom attached to NFe informar o número de ordem seqüencial do ECF que emitiu o Cupom Fiscal vinculado à NF-e 

        :param n_ecf: The n_ecf of this NRefRefECF.
        :type: str
        """
        if n_ecf is None:
            raise ValueError("Invalid value for `n_ecf`, must not be `None`")
        if n_ecf is not None and not re.search('[0-9]{1,3}', n_ecf):
            raise ValueError("Invalid value for `n_ecf`, must be a follow pattern or equal to `/[0-9]{1,3}/`")

        self._n_ecf = n_ecf

    @property
    def n_coo(self):
        """
        Gets the n_coo of this NRefRefECF.
        Operational counter number attached to NFe Informar o Número do Contador de Ordem de Operação - COO vinculado à NF-e 

        :return: The n_coo of this NRefRefECF.
        :rtype: str
        """
        return self._n_coo

    @n_coo.setter
    def n_coo(self, n_coo):
        """
        Sets the n_coo of this NRefRefECF.
        Operational counter number attached to NFe Informar o Número do Contador de Ordem de Operação - COO vinculado à NF-e 

        :param n_coo: The n_coo of this NRefRefECF.
        :type: str
        """
        if n_coo is None:
            raise ValueError("Invalid value for `n_coo`, must not be `None`")
        if n_coo is not None and not re.search('[0-9]{1,6}', n_coo):
            raise ValueError("Invalid value for `n_coo`, must be a follow pattern or equal to `/[0-9]{1,6}/`")

        self._n_coo = n_coo

    @property
    def mod_ecf(self):
        """
        Gets the mod_ecf of this NRefRefECF.
        Fiscal document model - '2B' # coupon tax not ECF - '2C' # PDV coupon tax - '2D' # ECF coupon tax 

        :return: The mod_ecf of this NRefRefECF.
        :rtype: str
        """
        return self._mod_ecf

    @mod_ecf.setter
    def mod_ecf(self, mod_ecf):
        """
        Sets the mod_ecf of this NRefRefECF.
        Fiscal document model - '2B' # coupon tax not ECF - '2C' # PDV coupon tax - '2D' # ECF coupon tax 

        :param mod_ecf: The mod_ecf of this NRefRefECF.
        :type: str
        """
        allowed_values = ["2B", "2C", "2D"]
        if mod_ecf not in allowed_values:
            raise ValueError(
                "Invalid value for `mod_ecf` ({0}), must be one of {1}"
                .format(mod_ecf, allowed_values)
            )

        self._mod_ecf = mod_ecf

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
