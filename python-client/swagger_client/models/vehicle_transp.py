# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VehicleTransp(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type=None, automobile=None, trailer=None, wagon=None, ferry=None):
        """
        VehicleTransp - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',
            'automobile': 'VehicleID',
            'trailer': 'list[VehicleID]',
            'wagon': 'str',
            'ferry': 'str'
        }

        self.attribute_map = {
            'type': 'type',
            'automobile': 'automobile',
            'trailer': 'trailer',
            'wagon': 'wagon',
            'ferry': 'ferry'
        }

        self._type = type
        self._automobile = automobile
        self._trailer = trailer
        self._wagon = wagon
        self._ferry = ferry

    @property
    def type(self):
        """
        Gets the type of this VehicleTransp.

        :return: The type of this VehicleTransp.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this VehicleTransp.

        :param type: The type of this VehicleTransp.
        :type: str
        """
        allowed_values = ["automobile", "wagon", "ferry", "trailer"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def automobile(self):
        """
        Gets the automobile of this VehicleTransp.

        :return: The automobile of this VehicleTransp.
        :rtype: VehicleID
        """
        return self._automobile

    @automobile.setter
    def automobile(self, automobile):
        """
        Sets the automobile of this VehicleTransp.

        :param automobile: The automobile of this VehicleTransp.
        :type: VehicleID
        """

        self._automobile = automobile

    @property
    def trailer(self):
        """
        Gets the trailer of this VehicleTransp.
        Trailer

        :return: The trailer of this VehicleTransp.
        :rtype: list[VehicleID]
        """
        return self._trailer

    @trailer.setter
    def trailer(self, trailer):
        """
        Sets the trailer of this VehicleTransp.
        Trailer

        :param trailer: The trailer of this VehicleTransp.
        :type: list[VehicleID]
        """

        self._trailer = trailer

    @property
    def wagon(self):
        """
        Gets the wagon of this VehicleTransp.

        :return: The wagon of this VehicleTransp.
        :rtype: str
        """
        return self._wagon

    @wagon.setter
    def wagon(self, wagon):
        """
        Sets the wagon of this VehicleTransp.

        :param wagon: The wagon of this VehicleTransp.
        :type: str
        """
        if wagon is not None and len(wagon) > 20:
            raise ValueError("Invalid value for `wagon`, length must be less than or equal to `20`")
        if wagon is not None and len(wagon) < 1:
            raise ValueError("Invalid value for `wagon`, length must be greater than or equal to `1`")

        self._wagon = wagon

    @property
    def ferry(self):
        """
        Gets the ferry of this VehicleTransp.
        Ferry

        :return: The ferry of this VehicleTransp.
        :rtype: str
        """
        return self._ferry

    @ferry.setter
    def ferry(self, ferry):
        """
        Sets the ferry of this VehicleTransp.
        Ferry

        :param ferry: The ferry of this VehicleTransp.
        :type: str
        """
        if ferry is not None and len(ferry) > 20:
            raise ValueError("Invalid value for `ferry`, length must be less than or equal to `20`")
        if ferry is not None and len(ferry) < 1:
            raise ValueError("Invalid value for `ferry`, length must be greater than or equal to `1`")

        self._ferry = ferry

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
