# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Payment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, installments_terms=None, bill=None, installment=None, payment_mode=None):
        """
        Payment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'installments_terms': 'int',
            'bill': 'PaymentBill',
            'installment': 'list[PaymentInstallment]',
            'payment_mode': 'list[PaymentPaymentMode]'
        }

        self.attribute_map = {
            'installments_terms': 'installmentsTerms',
            'bill': 'bill',
            'installment': 'installment',
            'payment_mode': 'paymentMode'
        }

        self._installments_terms = installments_terms
        self._bill = bill
        self._installment = installment
        self._payment_mode = payment_mode

    @property
    def installments_terms(self):
        """
        Gets the installments_terms of this Payment.
        Installment terms - 0 # cash - 1 # on terms - 2 # other 

        :return: The installments_terms of this Payment.
        :rtype: int
        """
        return self._installments_terms

    @installments_terms.setter
    def installments_terms(self, installments_terms):
        """
        Sets the installments_terms of this Payment.
        Installment terms - 0 # cash - 1 # on terms - 2 # other 

        :param installments_terms: The installments_terms of this Payment.
        :type: int
        """

        self._installments_terms = installments_terms

    @property
    def bill(self):
        """
        Gets the bill of this Payment.

        :return: The bill of this Payment.
        :rtype: PaymentBill
        """
        return self._bill

    @bill.setter
    def bill(self, bill):
        """
        Sets the bill of this Payment.

        :param bill: The bill of this Payment.
        :type: PaymentBill
        """

        self._bill = bill

    @property
    def installment(self):
        """
        Gets the installment of this Payment.

        :return: The installment of this Payment.
        :rtype: list[PaymentInstallment]
        """
        return self._installment

    @installment.setter
    def installment(self, installment):
        """
        Sets the installment of this Payment.

        :param installment: The installment of this Payment.
        :type: list[PaymentInstallment]
        """

        self._installment = installment

    @property
    def payment_mode(self):
        """
        Gets the payment_mode of this Payment.

        :return: The payment_mode of this Payment.
        :rtype: list[PaymentPaymentMode]
        """
        return self._payment_mode

    @payment_mode.setter
    def payment_mode(self, payment_mode):
        """
        Sets the payment_mode of this Payment.

        :param payment_mode: The payment_mode of this Payment.
        :type: list[PaymentPaymentMode]
        """

        self._payment_mode = payment_mode

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
