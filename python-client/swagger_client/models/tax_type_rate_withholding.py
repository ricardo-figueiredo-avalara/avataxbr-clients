# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TaxTypeRateWithholding(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, all=None, business=None, federal_government=None, state_government=None, city_government=None):
        """
        TaxTypeRateWithholding - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'all': 'WithholdDef',
            'business': 'WithholdDef',
            'federal_government': 'WithholdDef',
            'state_government': 'WithholdDef',
            'city_government': 'WithholdDef'
        }

        self.attribute_map = {
            'all': 'all',
            'business': 'business',
            'federal_government': 'federalGovernment',
            'state_government': 'stateGovernment',
            'city_government': 'cityGovernment'
        }

        self._all = all
        self._business = business
        self._federal_government = federal_government
        self._state_government = state_government
        self._city_government = city_government

    @property
    def all(self):
        """
        Gets the all of this TaxTypeRateWithholding.

        :return: The all of this TaxTypeRateWithholding.
        :rtype: WithholdDef
        """
        return self._all

    @all.setter
    def all(self, all):
        """
        Sets the all of this TaxTypeRateWithholding.

        :param all: The all of this TaxTypeRateWithholding.
        :type: WithholdDef
        """

        self._all = all

    @property
    def business(self):
        """
        Gets the business of this TaxTypeRateWithholding.

        :return: The business of this TaxTypeRateWithholding.
        :rtype: WithholdDef
        """
        return self._business

    @business.setter
    def business(self, business):
        """
        Sets the business of this TaxTypeRateWithholding.

        :param business: The business of this TaxTypeRateWithholding.
        :type: WithholdDef
        """

        self._business = business

    @property
    def federal_government(self):
        """
        Gets the federal_government of this TaxTypeRateWithholding.

        :return: The federal_government of this TaxTypeRateWithholding.
        :rtype: WithholdDef
        """
        return self._federal_government

    @federal_government.setter
    def federal_government(self, federal_government):
        """
        Sets the federal_government of this TaxTypeRateWithholding.

        :param federal_government: The federal_government of this TaxTypeRateWithholding.
        :type: WithholdDef
        """

        self._federal_government = federal_government

    @property
    def state_government(self):
        """
        Gets the state_government of this TaxTypeRateWithholding.

        :return: The state_government of this TaxTypeRateWithholding.
        :rtype: WithholdDef
        """
        return self._state_government

    @state_government.setter
    def state_government(self, state_government):
        """
        Sets the state_government of this TaxTypeRateWithholding.

        :param state_government: The state_government of this TaxTypeRateWithholding.
        :type: WithholdDef
        """

        self._state_government = state_government

    @property
    def city_government(self):
        """
        Gets the city_government of this TaxTypeRateWithholding.

        :return: The city_government of this TaxTypeRateWithholding.
        :rtype: WithholdDef
        """
        return self._city_government

    @city_government.setter
    def city_government(self, city_government):
        """
        Sets the city_government of this TaxTypeRateWithholding.

        :param city_government: The city_government of this TaxTypeRateWithholding.
        :type: WithholdDef
        """

        self._city_government = city_government

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
