# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IcmsConfByStateIcmsSTConf(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, has_reduction_of_mva_for_simples=None, reduction_of_mva_for_simples=None, calc_mode=None, mva_rate=None, icms_st_base_discount=None, srp=None, srp_unit=None):
        """
        IcmsConfByStateIcmsSTConf - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'has_reduction_of_mva_for_simples': 'bool',
            'reduction_of_mva_for_simples': 'float',
            'calc_mode': 'str',
            'mva_rate': 'float',
            'icms_st_base_discount': 'float',
            'srp': 'float',
            'srp_unit': 'str'
        }

        self.attribute_map = {
            'has_reduction_of_mva_for_simples': 'hasReductionOfMVAForSimples',
            'reduction_of_mva_for_simples': 'reductionOfMVAForSimples',
            'calc_mode': 'calcMode',
            'mva_rate': 'mvaRate',
            'icms_st_base_discount': 'icmsStBaseDiscount',
            'srp': 'srp',
            'srp_unit': 'srpUnit'
        }

        self._has_reduction_of_mva_for_simples = has_reduction_of_mva_for_simples
        self._reduction_of_mva_for_simples = reduction_of_mva_for_simples
        self._calc_mode = calc_mode
        self._mva_rate = mva_rate
        self._icms_st_base_discount = icms_st_base_discount
        self._srp = srp
        self._srp_unit = srp_unit

    @property
    def has_reduction_of_mva_for_simples(self):
        """
        Gets the has_reduction_of_mva_for_simples of this IcmsConfByStateIcmsSTConf.
        inform that substituted is tax regime Simplified the operation MVA will be reduced

        :return: The has_reduction_of_mva_for_simples of this IcmsConfByStateIcmsSTConf.
        :rtype: bool
        """
        return self._has_reduction_of_mva_for_simples

    @has_reduction_of_mva_for_simples.setter
    def has_reduction_of_mva_for_simples(self, has_reduction_of_mva_for_simples):
        """
        Sets the has_reduction_of_mva_for_simples of this IcmsConfByStateIcmsSTConf.
        inform that substituted is tax regime Simplified the operation MVA will be reduced

        :param has_reduction_of_mva_for_simples: The has_reduction_of_mva_for_simples of this IcmsConfByStateIcmsSTConf.
        :type: bool
        """

        self._has_reduction_of_mva_for_simples = has_reduction_of_mva_for_simples

    @property
    def reduction_of_mva_for_simples(self):
        """
        Gets the reduction_of_mva_for_simples of this IcmsConfByStateIcmsSTConf.
        mva reduction when substituted is tax regime Simplified.

        :return: The reduction_of_mva_for_simples of this IcmsConfByStateIcmsSTConf.
        :rtype: float
        """
        return self._reduction_of_mva_for_simples

    @reduction_of_mva_for_simples.setter
    def reduction_of_mva_for_simples(self, reduction_of_mva_for_simples):
        """
        Sets the reduction_of_mva_for_simples of this IcmsConfByStateIcmsSTConf.
        mva reduction when substituted is tax regime Simplified.

        :param reduction_of_mva_for_simples: The reduction_of_mva_for_simples of this IcmsConfByStateIcmsSTConf.
        :type: float
        """

        self._reduction_of_mva_for_simples = reduction_of_mva_for_simples

    @property
    def calc_mode(self):
        """
        Gets the calc_mode of this IcmsConfByStateIcmsSTConf.
        how this ICMS-ST will be calculed for itens linked to this configuration

        :return: The calc_mode of this IcmsConfByStateIcmsSTConf.
        :rtype: str
        """
        return self._calc_mode

    @calc_mode.setter
    def calc_mode(self, calc_mode):
        """
        Sets the calc_mode of this IcmsConfByStateIcmsSTConf.
        how this ICMS-ST will be calculed for itens linked to this configuration

        :param calc_mode: The calc_mode of this IcmsConfByStateIcmsSTConf.
        :type: str
        """
        allowed_values = ["BYMVARATE", "SRP", "MSRP"]
        if calc_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `calc_mode` ({0}), must be one of {1}"
                .format(calc_mode, allowed_values)
            )

        self._calc_mode = calc_mode

    @property
    def mva_rate(self):
        """
        Gets the mva_rate of this IcmsConfByStateIcmsSTConf.
        ICMS-ST mva rate to define calc base

        :return: The mva_rate of this IcmsConfByStateIcmsSTConf.
        :rtype: float
        """
        return self._mva_rate

    @mva_rate.setter
    def mva_rate(self, mva_rate):
        """
        Sets the mva_rate of this IcmsConfByStateIcmsSTConf.
        ICMS-ST mva rate to define calc base

        :param mva_rate: The mva_rate of this IcmsConfByStateIcmsSTConf.
        :type: float
        """

        self._mva_rate = mva_rate

    @property
    def icms_st_base_discount(self):
        """
        Gets the icms_st_base_discount of this IcmsConfByStateIcmsSTConf.
        ICMS rate - Redução da BC ICMS ST (%)

        :return: The icms_st_base_discount of this IcmsConfByStateIcmsSTConf.
        :rtype: float
        """
        return self._icms_st_base_discount

    @icms_st_base_discount.setter
    def icms_st_base_discount(self, icms_st_base_discount):
        """
        Sets the icms_st_base_discount of this IcmsConfByStateIcmsSTConf.
        ICMS rate - Redução da BC ICMS ST (%)

        :param icms_st_base_discount: The icms_st_base_discount of this IcmsConfByStateIcmsSTConf.
        :type: float
        """

        self._icms_st_base_discount = icms_st_base_discount

    @property
    def srp(self):
        """
        Gets the srp of this IcmsConfByStateIcmsSTConf.
        SRP or MSRP amount base for this ICMS-ST configuration

        :return: The srp of this IcmsConfByStateIcmsSTConf.
        :rtype: float
        """
        return self._srp

    @srp.setter
    def srp(self, srp):
        """
        Sets the srp of this IcmsConfByStateIcmsSTConf.
        SRP or MSRP amount base for this ICMS-ST configuration

        :param srp: The srp of this IcmsConfByStateIcmsSTConf.
        :type: float
        """

        self._srp = srp

    @property
    def srp_unit(self):
        """
        Gets the srp_unit of this IcmsConfByStateIcmsSTConf.
        unit used to srv amount value

        :return: The srp_unit of this IcmsConfByStateIcmsSTConf.
        :rtype: str
        """
        return self._srp_unit

    @srp_unit.setter
    def srp_unit(self, srp_unit):
        """
        Sets the srp_unit of this IcmsConfByStateIcmsSTConf.
        unit used to srv amount value

        :param srp_unit: The srp_unit of this IcmsConfByStateIcmsSTConf.
        :type: str
        """
        if srp_unit is not None and len(srp_unit) > 6:
            raise ValueError("Invalid value for `srp_unit`, length must be less than or equal to `6`")

        self._srp_unit = srp_unit

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
