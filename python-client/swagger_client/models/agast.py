# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Agast(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, code=None, description=None, hs_code=None, ex=None, cest=None, cean=None, code_type=None, cst_ipi=None, ipi_legal_tax_class=None, pis_cofins_tax_reporting=None, accruable_pis_taxation=None, accruable_cofins_taxation=None, accruable_csll_taxation=None, iss_dueat_destination=None, pis_cofins_credit_not_allowed=None, iss_taxation=None, federal_tax_rate=None, special_product_class=None, icms_conf=None):
        """
        Agast - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'code': 'str',
            'description': 'str',
            'hs_code': 'str',
            'ex': 'int',
            'cest': 'str',
            'cean': 'str',
            'code_type': 'AgastCodeType',
            'cst_ipi': 'str',
            'ipi_legal_tax_class': 'str',
            'pis_cofins_tax_reporting': 'str',
            'accruable_pis_taxation': 'str',
            'accruable_cofins_taxation': 'str',
            'accruable_csll_taxation': 'str',
            'iss_dueat_destination': 'bool',
            'pis_cofins_credit_not_allowed': 'bool',
            'iss_taxation': 'str',
            'federal_tax_rate': 'list[TaxTypeRate]',
            'special_product_class': 'str',
            'icms_conf': 'list[AgastIcmsConf]'
        }

        self.attribute_map = {
            'code': 'code',
            'description': 'description',
            'hs_code': 'hsCode',
            'ex': 'ex',
            'cest': 'cest',
            'cean': 'cean',
            'code_type': 'codeType',
            'cst_ipi': 'cstIPI',
            'ipi_legal_tax_class': 'ipiLegalTaxClass',
            'pis_cofins_tax_reporting': 'pisCofinsTaxReporting',
            'accruable_pis_taxation': 'accruablePISTaxation',
            'accruable_cofins_taxation': 'accruableCOFINSTaxation',
            'accruable_csll_taxation': 'accruableCSLLTaxation',
            'iss_dueat_destination': 'issDueatDestination',
            'pis_cofins_credit_not_allowed': 'pisCofinsCreditNotAllowed',
            'iss_taxation': 'issTaxation',
            'federal_tax_rate': 'federalTaxRate',
            'special_product_class': 'specialProductClass',
            'icms_conf': 'icmsConf'
        }

        self._code = code
        self._description = description
        self._hs_code = hs_code
        self._ex = ex
        self._cest = cest
        self._cean = cean
        self._code_type = code_type
        self._cst_ipi = cst_ipi
        self._ipi_legal_tax_class = ipi_legal_tax_class
        self._pis_cofins_tax_reporting = pis_cofins_tax_reporting
        self._accruable_pis_taxation = accruable_pis_taxation
        self._accruable_cofins_taxation = accruable_cofins_taxation
        self._accruable_csll_taxation = accruable_csll_taxation
        self._iss_dueat_destination = iss_dueat_destination
        self._pis_cofins_credit_not_allowed = pis_cofins_credit_not_allowed
        self._iss_taxation = iss_taxation
        self._federal_tax_rate = federal_tax_rate
        self._special_product_class = special_product_class
        self._icms_conf = icms_conf

    @property
    def code(self):
        """
        Gets the code of this Agast.
        Agast Code. AGAST (Avalara Goods and Services Types) are preset products with default tax definitions available to be used as provided or copied to create an specific comapany item.

        :return: The code of this Agast.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this Agast.
        Agast Code. AGAST (Avalara Goods and Services Types) are preset products with default tax definitions available to be used as provided or copied to create an specific comapany item.

        :param code: The code of this Agast.
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def description(self):
        """
        Gets the description of this Agast.
        Agast Description

        :return: The description of this Agast.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Agast.
        Agast Description

        :param description: The description of this Agast.
        :type: str
        """
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")

        self._description = description

    @property
    def hs_code(self):
        """
        Gets the hs_code of this Agast.
        harmonized code, NCM or LC 116

        :return: The hs_code of this Agast.
        :rtype: str
        """
        return self._hs_code

    @hs_code.setter
    def hs_code(self, hs_code):
        """
        Sets the hs_code of this Agast.
        harmonized code, NCM or LC 116

        :param hs_code: The hs_code of this Agast.
        :type: str
        """
        if hs_code is not None and len(hs_code) > 8:
            raise ValueError("Invalid value for `hs_code`, length must be less than or equal to `8`")

        self._hs_code = hs_code

    @property
    def ex(self):
        """
        Gets the ex of this Agast.
        hsCode Exception for IPI tax

        :return: The ex of this Agast.
        :rtype: int
        """
        return self._ex

    @ex.setter
    def ex(self, ex):
        """
        Sets the ex of this Agast.
        hsCode Exception for IPI tax

        :param ex: The ex of this Agast.
        :type: int
        """

        self._ex = ex

    @property
    def cest(self):
        """
        Gets the cest of this Agast.
        tax substitution code - Codigo especificador da Substuicao Tributaria

        :return: The cest of this Agast.
        :rtype: str
        """
        return self._cest

    @cest.setter
    def cest(self, cest):
        """
        Sets the cest of this Agast.
        tax substitution code - Codigo especificador da Substuicao Tributaria

        :param cest: The cest of this Agast.
        :type: str
        """
        if cest is not None and not re.search('[0-9]{7}', cest):
            raise ValueError("Invalid value for `cest`, must be a follow pattern or equal to `/[0-9]{7}/`")

        self._cest = cest

    @property
    def cean(self):
        """
        Gets the cean of this Agast.
        GTIN NUMBER

        :return: The cean of this Agast.
        :rtype: str
        """
        return self._cean

    @cean.setter
    def cean(self, cean):
        """
        Sets the cean of this Agast.
        GTIN NUMBER

        :param cean: The cean of this Agast.
        :type: str
        """
        if cean is not None and not re.search('[0-9]{0}|[0-9]{8}|[0-9]{12,14}', cean):
            raise ValueError("Invalid value for `cean`, must be a follow pattern or equal to `/[0-9]{0}|[0-9]{8}|[0-9]{12,14}/`")

        self._cean = cean

    @property
    def code_type(self):
        """
        Gets the code_type of this Agast.

        :return: The code_type of this Agast.
        :rtype: AgastCodeType
        """
        return self._code_type

    @code_type.setter
    def code_type(self, code_type):
        """
        Sets the code_type of this Agast.

        :param code_type: The code_type of this Agast.
        :type: AgastCodeType
        """

        self._code_type = code_type

    @property
    def cst_ipi(self):
        """
        Gets the cst_ipi of this Agast.
        Inform if this process is subject to IPI taxation on output process - '50' # Saída Tributada - '51' # Saída Tributável com Alíquota Zero - '52' # Saída Isenta - '53' # Saída Não-Tributada - '54' # Saída Imune 

        :return: The cst_ipi of this Agast.
        :rtype: str
        """
        return self._cst_ipi

    @cst_ipi.setter
    def cst_ipi(self, cst_ipi):
        """
        Sets the cst_ipi of this Agast.
        Inform if this process is subject to IPI taxation on output process - '50' # Saída Tributada - '51' # Saída Tributável com Alíquota Zero - '52' # Saída Isenta - '53' # Saída Não-Tributada - '54' # Saída Imune 

        :param cst_ipi: The cst_ipi of this Agast.
        :type: str
        """
        allowed_values = ["50", "51", "52", "53", "54"]
        if cst_ipi not in allowed_values:
            raise ValueError(
                "Invalid value for `cst_ipi` ({0}), must be one of {1}"
                .format(cst_ipi, allowed_values)
            )

        self._cst_ipi = cst_ipi

    @property
    def ipi_legal_tax_class(self):
        """
        Gets the ipi_legal_tax_class of this Agast.
        Legal tax classificação for IPI (enquadramento tributário) When the process has CST IPI 52 or 54, it is mandatory to inform a Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo=mCnJajU4BKU= 

        :return: The ipi_legal_tax_class of this Agast.
        :rtype: str
        """
        return self._ipi_legal_tax_class

    @ipi_legal_tax_class.setter
    def ipi_legal_tax_class(self, ipi_legal_tax_class):
        """
        Sets the ipi_legal_tax_class of this Agast.
        Legal tax classificação for IPI (enquadramento tributário) When the process has CST IPI 52 or 54, it is mandatory to inform a Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo=mCnJajU4BKU= 

        :param ipi_legal_tax_class: The ipi_legal_tax_class of this Agast.
        :type: str
        """

        self._ipi_legal_tax_class = ipi_legal_tax_class

    @property
    def pis_cofins_tax_reporting(self):
        """
        Gets the pis_cofins_tax_reporting of this Agast.
        when the company is Real Profit inform if this item is cumulative or no cumulative by default

        :return: The pis_cofins_tax_reporting of this Agast.
        :rtype: str
        """
        return self._pis_cofins_tax_reporting

    @pis_cofins_tax_reporting.setter
    def pis_cofins_tax_reporting(self, pis_cofins_tax_reporting):
        """
        Sets the pis_cofins_tax_reporting of this Agast.
        when the company is Real Profit inform if this item is cumulative or no cumulative by default

        :param pis_cofins_tax_reporting: The pis_cofins_tax_reporting of this Agast.
        :type: str
        """
        allowed_values = ["cumulative", "noCumulative"]
        if pis_cofins_tax_reporting not in allowed_values:
            raise ValueError(
                "Invalid value for `pis_cofins_tax_reporting` ({0}), must be one of {1}"
                .format(pis_cofins_tax_reporting, allowed_values)
            )

        self._pis_cofins_tax_reporting = pis_cofins_tax_reporting

    @property
    def accruable_pis_taxation(self):
        """
        Gets the accruable_pis_taxation of this Agast.
        Inform if this item by nature is subject to PIS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE 

        :return: The accruable_pis_taxation of this Agast.
        :rtype: str
        """
        return self._accruable_pis_taxation

    @accruable_pis_taxation.setter
    def accruable_pis_taxation(self, accruable_pis_taxation):
        """
        Sets the accruable_pis_taxation of this Agast.
        Inform if this item by nature is subject to PIS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE 

        :param accruable_pis_taxation: The accruable_pis_taxation of this Agast.
        :type: str
        """
        allowed_values = ["T", "Z", "E", "H", "N"]
        if accruable_pis_taxation not in allowed_values:
            raise ValueError(
                "Invalid value for `accruable_pis_taxation` ({0}), must be one of {1}"
                .format(accruable_pis_taxation, allowed_values)
            )

        self._accruable_pis_taxation = accruable_pis_taxation

    @property
    def accruable_cofins_taxation(self):
        """
        Gets the accruable_cofins_taxation of this Agast.
        Inform if this item by nature is subject to COFINS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE 

        :return: The accruable_cofins_taxation of this Agast.
        :rtype: str
        """
        return self._accruable_cofins_taxation

    @accruable_cofins_taxation.setter
    def accruable_cofins_taxation(self, accruable_cofins_taxation):
        """
        Sets the accruable_cofins_taxation of this Agast.
        Inform if this item by nature is subject to COFINS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE 

        :param accruable_cofins_taxation: The accruable_cofins_taxation of this Agast.
        :type: str
        """
        allowed_values = ["T", "Z", "E", "H", "N"]
        if accruable_cofins_taxation not in allowed_values:
            raise ValueError(
                "Invalid value for `accruable_cofins_taxation` ({0}), must be one of {1}"
                .format(accruable_cofins_taxation, allowed_values)
            )

        self._accruable_cofins_taxation = accruable_cofins_taxation

    @property
    def accruable_csll_taxation(self):
        """
        Gets the accruable_csll_taxation of this Agast.
        Inform if this item by nature is subject to CSLL taxation or exempt - 'T' # TAXABLE - 'E' # EXEMPT 

        :return: The accruable_csll_taxation of this Agast.
        :rtype: str
        """
        return self._accruable_csll_taxation

    @accruable_csll_taxation.setter
    def accruable_csll_taxation(self, accruable_csll_taxation):
        """
        Sets the accruable_csll_taxation of this Agast.
        Inform if this item by nature is subject to CSLL taxation or exempt - 'T' # TAXABLE - 'E' # EXEMPT 

        :param accruable_csll_taxation: The accruable_csll_taxation of this Agast.
        :type: str
        """
        allowed_values = ["T", "E"]
        if accruable_csll_taxation not in allowed_values:
            raise ValueError(
                "Invalid value for `accruable_csll_taxation` ({0}), must be one of {1}"
                .format(accruable_csll_taxation, allowed_values)
            )

        self._accruable_csll_taxation = accruable_csll_taxation

    @property
    def iss_dueat_destination(self):
        """
        Gets the iss_dueat_destination of this Agast.
        for service items with City Jurisdiction, inform where the ISS tax is due

        :return: The iss_dueat_destination of this Agast.
        :rtype: bool
        """
        return self._iss_dueat_destination

    @iss_dueat_destination.setter
    def iss_dueat_destination(self, iss_dueat_destination):
        """
        Sets the iss_dueat_destination of this Agast.
        for service items with City Jurisdiction, inform where the ISS tax is due

        :param iss_dueat_destination: The iss_dueat_destination of this Agast.
        :type: bool
        """

        self._iss_dueat_destination = iss_dueat_destination

    @property
    def pis_cofins_credit_not_allowed(self):
        """
        Gets the pis_cofins_credit_not_allowed of this Agast.
        on Real Profit Purchase transaction, inform if this item allows tax credits when it is non-cumulative

        :return: The pis_cofins_credit_not_allowed of this Agast.
        :rtype: bool
        """
        return self._pis_cofins_credit_not_allowed

    @pis_cofins_credit_not_allowed.setter
    def pis_cofins_credit_not_allowed(self, pis_cofins_credit_not_allowed):
        """
        Sets the pis_cofins_credit_not_allowed of this Agast.
        on Real Profit Purchase transaction, inform if this item allows tax credits when it is non-cumulative

        :param pis_cofins_credit_not_allowed: The pis_cofins_credit_not_allowed of this Agast.
        :type: bool
        """

        self._pis_cofins_credit_not_allowed = pis_cofins_credit_not_allowed

    @property
    def iss_taxation(self):
        """
        Gets the iss_taxation of this Agast.
        - 'T' # TAXABLE - TRIBUTÁVEL INCLUSIVE PARA EXPORTAÇÃO' - 'E' # TAXABLE WITH EXEMPTION FOR EXPORTS - ISENTO PARA SERVIÇOS PRESTADOS AO EXTERIOR (DEFAULT) - 'F' # EXEMPT - 'A' # SUSPENDED FOR ADMINISTRATIVE REASON - 'L' # SUSPENDED FOR LEGAL DECISION - 'I' # IMMUNE 

        :return: The iss_taxation of this Agast.
        :rtype: str
        """
        return self._iss_taxation

    @iss_taxation.setter
    def iss_taxation(self, iss_taxation):
        """
        Sets the iss_taxation of this Agast.
        - 'T' # TAXABLE - TRIBUTÁVEL INCLUSIVE PARA EXPORTAÇÃO' - 'E' # TAXABLE WITH EXEMPTION FOR EXPORTS - ISENTO PARA SERVIÇOS PRESTADOS AO EXTERIOR (DEFAULT) - 'F' # EXEMPT - 'A' # SUSPENDED FOR ADMINISTRATIVE REASON - 'L' # SUSPENDED FOR LEGAL DECISION - 'I' # IMMUNE 

        :param iss_taxation: The iss_taxation of this Agast.
        :type: str
        """
        allowed_values = ["T", "E", "F", "A", "L", "I"]
        if iss_taxation not in allowed_values:
            raise ValueError(
                "Invalid value for `iss_taxation` ({0}), must be one of {1}"
                .format(iss_taxation, allowed_values)
            )

        self._iss_taxation = iss_taxation

    @property
    def federal_tax_rate(self):
        """
        Gets the federal_tax_rate of this Agast.
        This is an array of tax object related to an agast.

        :return: The federal_tax_rate of this Agast.
        :rtype: list[TaxTypeRate]
        """
        return self._federal_tax_rate

    @federal_tax_rate.setter
    def federal_tax_rate(self, federal_tax_rate):
        """
        Sets the federal_tax_rate of this Agast.
        This is an array of tax object related to an agast.

        :param federal_tax_rate: The federal_tax_rate of this Agast.
        :type: list[TaxTypeRate]
        """

        self._federal_tax_rate = federal_tax_rate

    @property
    def special_product_class(self):
        """
        Gets the special_product_class of this Agast.

        :return: The special_product_class of this Agast.
        :rtype: str
        """
        return self._special_product_class

    @special_product_class.setter
    def special_product_class(self, special_product_class):
        """
        Sets the special_product_class of this Agast.

        :param special_product_class: The special_product_class of this Agast.
        :type: str
        """
        allowed_values = ["OTHERS", "COMMUNICATION", "ENERGY", "TRANSPORT", "FUEL AND LUBRIFICANT", "VEHICLE", "ALCOHOLIC BEVERAGES", "WEAPONS", "AMMO", "PERFUME", "TOBACCO"]
        if special_product_class not in allowed_values:
            raise ValueError(
                "Invalid value for `special_product_class` ({0}), must be one of {1}"
                .format(special_product_class, allowed_values)
            )

        self._special_product_class = special_product_class

    @property
    def icms_conf(self):
        """
        Gets the icms_conf of this Agast.
        One per State

        :return: The icms_conf of this Agast.
        :rtype: list[AgastIcmsConf]
        """
        return self._icms_conf

    @icms_conf.setter
    def icms_conf(self, icms_conf):
        """
        Sets the icms_conf of this Agast.
        One per State

        :param icms_conf: The icms_conf of this Agast.
        :type: list[AgastIcmsConf]
        """

        self._icms_conf = icms_conf

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
