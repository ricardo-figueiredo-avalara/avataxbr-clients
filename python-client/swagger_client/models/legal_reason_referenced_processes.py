# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LegalReasonReferencedProcesses(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, n_proc=None, ind_proc=None):
        """
        LegalReasonReferencedProcesses - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'n_proc': 'str',
            'ind_proc': 'str'
        }

        self.attribute_map = {
            'n_proc': 'nProc',
            'ind_proc': 'indProc'
        }

        self._n_proc = n_proc
        self._ind_proc = ind_proc

    @property
    def n_proc(self):
        """
        Gets the n_proc of this LegalReasonReferencedProcesses.
        Process Identifier (NFe <nProc> tag)

        :return: The n_proc of this LegalReasonReferencedProcesses.
        :rtype: str
        """
        return self._n_proc

    @n_proc.setter
    def n_proc(self, n_proc):
        """
        Sets the n_proc of this LegalReasonReferencedProcesses.
        Process Identifier (NFe <nProc> tag)

        :param n_proc: The n_proc of this LegalReasonReferencedProcesses.
        :type: str
        """
        if n_proc is not None and len(n_proc) > 60:
            raise ValueError("Invalid value for `n_proc`, length must be less than or equal to `60`")

        self._n_proc = n_proc

    @property
    def ind_proc(self):
        """
        Gets the ind_proc of this LegalReasonReferencedProcesses.
        Process Origin (NFe <indProc> tag) - '0' # SEFAZ; - '1' # Justiça Federal; - '2' # Justiça Estadual; - '3' # Secex/RFB; - '9' # Outros 

        :return: The ind_proc of this LegalReasonReferencedProcesses.
        :rtype: str
        """
        return self._ind_proc

    @ind_proc.setter
    def ind_proc(self, ind_proc):
        """
        Sets the ind_proc of this LegalReasonReferencedProcesses.
        Process Origin (NFe <indProc> tag) - '0' # SEFAZ; - '1' # Justiça Federal; - '2' # Justiça Estadual; - '3' # Secex/RFB; - '9' # Outros 

        :param ind_proc: The ind_proc of this LegalReasonReferencedProcesses.
        :type: str
        """
        allowed_values = ["0", "1", "2", "3", "9"]
        if ind_proc not in allowed_values:
            raise ValueError(
                "Invalid value for `ind_proc` ({0}), must be one of {1}"
                .format(ind_proc, allowed_values)
            )

        self._ind_proc = ind_proc

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
