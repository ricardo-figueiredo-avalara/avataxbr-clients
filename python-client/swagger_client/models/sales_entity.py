# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SalesEntity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, type=None, email=None, cnpjcpf=None, city_tax_id=None, state_tax_id=None, suframa=None, phone=None, tax_regime=None, special_tax_regime=None, subject_to_srf1234=None, required_withholding_iss=None, art=None, admin_process=None, build_code=None):
        """
        SalesEntity - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'type': 'EntityType',
            'email': 'str',
            'cnpjcpf': 'str',
            'city_tax_id': 'str',
            'state_tax_id': 'str',
            'suframa': 'str',
            'phone': 'str',
            'tax_regime': 'FederalTaxRegime',
            'special_tax_regime': 'str',
            'subject_to_srf1234': 'bool',
            'required_withholding_iss': 'bool',
            'art': 'str',
            'admin_process': 'str',
            'build_code': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'email': 'email',
            'cnpjcpf': 'cnpjcpf',
            'city_tax_id': 'cityTaxId',
            'state_tax_id': 'stateTaxId',
            'suframa': 'suframa',
            'phone': 'phone',
            'tax_regime': 'taxRegime',
            'special_tax_regime': 'specialTaxRegime',
            'subject_to_srf1234': 'subjectToSRF1234',
            'required_withholding_iss': 'requiredWithholdingISS',
            'art': 'art',
            'admin_process': 'adminProcess',
            'build_code': 'buildCode'
        }

        self._name = name
        self._type = type
        self._email = email
        self._cnpjcpf = cnpjcpf
        self._city_tax_id = city_tax_id
        self._state_tax_id = state_tax_id
        self._suframa = suframa
        self._phone = phone
        self._tax_regime = tax_regime
        self._special_tax_regime = special_tax_regime
        self._subject_to_srf1234 = subject_to_srf1234
        self._required_withholding_iss = required_withholding_iss
        self._art = art
        self._admin_process = admin_process
        self._build_code = build_code

    @property
    def name(self):
        """
        Gets the name of this SalesEntity.
        SERVICE BUYER NAME OFFICIAL

        :return: The name of this SalesEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SalesEntity.
        SERVICE BUYER NAME OFFICIAL

        :param name: The name of this SalesEntity.
        :type: str
        """
        if name is not None and len(name) > 60:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `60`")

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this SalesEntity.

        :return: The type of this SalesEntity.
        :rtype: EntityType
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SalesEntity.

        :param type: The type of this SalesEntity.
        :type: EntityType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def email(self):
        """
        Gets the email of this SalesEntity.
        Entity Email

        :return: The email of this SalesEntity.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this SalesEntity.
        Entity Email

        :param email: The email of this SalesEntity.
        :type: str
        """
        if email is not None and len(email) > 60:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `60`")

        self._email = email

    @property
    def cnpjcpf(self):
        """
        Gets the cnpjcpf of this SalesEntity.
        CNPJ/CPF of Sales Buyer, if CPF pattern is '[0-9]{11}' if CNPJ pattern is '[0-9]{14}'

        :return: The cnpjcpf of this SalesEntity.
        :rtype: str
        """
        return self._cnpjcpf

    @cnpjcpf.setter
    def cnpjcpf(self, cnpjcpf):
        """
        Sets the cnpjcpf of this SalesEntity.
        CNPJ/CPF of Sales Buyer, if CPF pattern is '[0-9]{11}' if CNPJ pattern is '[0-9]{14}'

        :param cnpjcpf: The cnpjcpf of this SalesEntity.
        :type: str
        """
        if cnpjcpf is not None and not re.search('([!-ÿ]{0}|[!-ÿ]{5,20})?', cnpjcpf):
            raise ValueError("Invalid value for `cnpjcpf`, must be a follow pattern or equal to `/([!-ÿ]{0}|[!-ÿ]{5,20})?/`")

        self._cnpjcpf = cnpjcpf

    @property
    def city_tax_id(self):
        """
        Gets the city_tax_id of this SalesEntity.
        City Tax ID

        :return: The city_tax_id of this SalesEntity.
        :rtype: str
        """
        return self._city_tax_id

    @city_tax_id.setter
    def city_tax_id(self, city_tax_id):
        """
        Sets the city_tax_id of this SalesEntity.
        City Tax ID

        :param city_tax_id: The city_tax_id of this SalesEntity.
        :type: str
        """
        if city_tax_id is not None and len(city_tax_id) > 15:
            raise ValueError("Invalid value for `city_tax_id`, length must be less than or equal to `15`")

        self._city_tax_id = city_tax_id

    @property
    def state_tax_id(self):
        """
        Gets the state_tax_id of this SalesEntity.
        State Tax ID

        :return: The state_tax_id of this SalesEntity.
        :rtype: str
        """
        return self._state_tax_id

    @state_tax_id.setter
    def state_tax_id(self, state_tax_id):
        """
        Sets the state_tax_id of this SalesEntity.
        State Tax ID

        :param state_tax_id: The state_tax_id of this SalesEntity.
        :type: str
        """
        if state_tax_id is not None and not re.search('[0-9]{2,14}|ISENTO', state_tax_id):
            raise ValueError("Invalid value for `state_tax_id`, must be a follow pattern or equal to `/[0-9]{2,14}|ISENTO/`")

        self._state_tax_id = state_tax_id

    @property
    def suframa(self):
        """
        Gets the suframa of this SalesEntity.
        Suframa ID

        :return: The suframa of this SalesEntity.
        :rtype: str
        """
        return self._suframa

    @suframa.setter
    def suframa(self, suframa):
        """
        Sets the suframa of this SalesEntity.
        Suframa ID

        :param suframa: The suframa of this SalesEntity.
        :type: str
        """
        if suframa is not None and not re.search('[0-9]{8,9}', suframa):
            raise ValueError("Invalid value for `suframa`, must be a follow pattern or equal to `/[0-9]{8,9}/`")

        self._suframa = suframa

    @property
    def phone(self):
        """
        Gets the phone of this SalesEntity.
        Entity Phone

        :return: The phone of this SalesEntity.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this SalesEntity.
        Entity Phone

        :param phone: The phone of this SalesEntity.
        :type: str
        """
        if phone is not None and not re.search('[0-9]{6,14}', phone):
            raise ValueError("Invalid value for `phone`, must be a follow pattern or equal to `/[0-9]{6,14}/`")

        self._phone = phone

    @property
    def tax_regime(self):
        """
        Gets the tax_regime of this SalesEntity.

        :return: The tax_regime of this SalesEntity.
        :rtype: FederalTaxRegime
        """
        return self._tax_regime

    @tax_regime.setter
    def tax_regime(self, tax_regime):
        """
        Sets the tax_regime of this SalesEntity.

        :param tax_regime: The tax_regime of this SalesEntity.
        :type: FederalTaxRegime
        """
        if tax_regime is None:
            raise ValueError("Invalid value for `tax_regime`, must not be `None`")

        self._tax_regime = tax_regime

    @property
    def special_tax_regime(self):
        """
        Gets the special_tax_regime of this SalesEntity.
        Entity Special Tax Regime  - 'MEM' # Microempresa municipal - 'EST' # Estimativa - 'SPR' # Sociedade de profissionais - 'COP' # Cooperativa - 'MEI' # Microempresário Individual (MEI) - 'MPP' # Microempresário e Empresa de Pequeno Porte (ME EPP) 

        :return: The special_tax_regime of this SalesEntity.
        :rtype: str
        """
        return self._special_tax_regime

    @special_tax_regime.setter
    def special_tax_regime(self, special_tax_regime):
        """
        Sets the special_tax_regime of this SalesEntity.
        Entity Special Tax Regime  - 'MEM' # Microempresa municipal - 'EST' # Estimativa - 'SPR' # Sociedade de profissionais - 'COP' # Cooperativa - 'MEI' # Microempresário Individual (MEI) - 'MPP' # Microempresário e Empresa de Pequeno Porte (ME EPP) 

        :param special_tax_regime: The special_tax_regime of this SalesEntity.
        :type: str
        """
        allowed_values = ["MEM", "EST", "SPR", "COP", "MEI", "MPP"]
        if special_tax_regime not in allowed_values:
            raise ValueError(
                "Invalid value for `special_tax_regime` ({0}), must be one of {1}"
                .format(special_tax_regime, allowed_values)
            )

        self._special_tax_regime = special_tax_regime

    @property
    def subject_to_srf1234(self):
        """
        Gets the subject_to_srf1234 of this SalesEntity.
        Companies subject to rule follow same rule of Government

        :return: The subject_to_srf1234 of this SalesEntity.
        :rtype: bool
        """
        return self._subject_to_srf1234

    @subject_to_srf1234.setter
    def subject_to_srf1234(self, subject_to_srf1234):
        """
        Sets the subject_to_srf1234 of this SalesEntity.
        Companies subject to rule follow same rule of Government

        :param subject_to_srf1234: The subject_to_srf1234 of this SalesEntity.
        :type: bool
        """

        self._subject_to_srf1234 = subject_to_srf1234

    @property
    def required_withholding_iss(self):
        """
        Gets the required_withholding_iss of this SalesEntity.
        If Withholding ISS is required, independently the rules applied.

        :return: The required_withholding_iss of this SalesEntity.
        :rtype: bool
        """
        return self._required_withholding_iss

    @required_withholding_iss.setter
    def required_withholding_iss(self, required_withholding_iss):
        """
        Sets the required_withholding_iss of this SalesEntity.
        If Withholding ISS is required, independently the rules applied.

        :param required_withholding_iss: The required_withholding_iss of this SalesEntity.
        :type: bool
        """

        self._required_withholding_iss = required_withholding_iss

    @property
    def art(self):
        """
        Gets the art of this SalesEntity.
        technical note. Anota\\u00e7\\u00e3o de Responsabilidade T\\u00e9cnica-ART, estabelece que todos os contratos referentes à  execu\\u00e7\\u00e3o de servi\\u00e7os ou obras de Engenharia, Agronomia, Geologia, Geografia ou Meteorologia dever\\u00e3o ser objeto de anota\\u00e7\\u00e3o no Conselho Regional de Engenharia e Agronomia

        :return: The art of this SalesEntity.
        :rtype: str
        """
        return self._art

    @art.setter
    def art(self, art):
        """
        Sets the art of this SalesEntity.
        technical note. Anota\\u00e7\\u00e3o de Responsabilidade T\\u00e9cnica-ART, estabelece que todos os contratos referentes à  execu\\u00e7\\u00e3o de servi\\u00e7os ou obras de Engenharia, Agronomia, Geologia, Geografia ou Meteorologia dever\\u00e3o ser objeto de anota\\u00e7\\u00e3o no Conselho Regional de Engenharia e Agronomia

        :param art: The art of this SalesEntity.
        :type: str
        """
        if art is not None and len(art) > 15:
            raise ValueError("Invalid value for `art`, length must be less than or equal to `15`")

        self._art = art

    @property
    def admin_process(self):
        """
        Gets the admin_process of this SalesEntity.
        PROCESS NUMBER TO ISS SUSPENDED FOR ADMINISTRATIVE PROCESS

        :return: The admin_process of this SalesEntity.
        :rtype: str
        """
        return self._admin_process

    @admin_process.setter
    def admin_process(self, admin_process):
        """
        Sets the admin_process of this SalesEntity.
        PROCESS NUMBER TO ISS SUSPENDED FOR ADMINISTRATIVE PROCESS

        :param admin_process: The admin_process of this SalesEntity.
        :type: str
        """
        if admin_process is not None and len(admin_process) > 30:
            raise ValueError("Invalid value for `admin_process`, length must be less than or equal to `30`")

        self._admin_process = admin_process

    @property
    def build_code(self):
        """
        Gets the build_code of this SalesEntity.
        Business code. Código da obra OBRA

        :return: The build_code of this SalesEntity.
        :rtype: str
        """
        return self._build_code

    @build_code.setter
    def build_code(self, build_code):
        """
        Sets the build_code of this SalesEntity.
        Business code. Código da obra OBRA

        :param build_code: The build_code of this SalesEntity.
        :type: str
        """
        if build_code is not None and len(build_code) > 15:
            raise ValueError("Invalid value for `build_code`, length must be less than or equal to `15`")

        self._build_code = build_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
