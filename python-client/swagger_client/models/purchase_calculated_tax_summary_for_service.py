# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PurchaseCalculatedTaxSummaryForService(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, number_of_lines=None, subtotal=None, total_tax=None, grand_total=None, tax_by_type=None):
        """
        PurchaseCalculatedTaxSummaryForService - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'number_of_lines': 'int',
            'subtotal': 'float',
            'total_tax': 'float',
            'grand_total': 'float',
            'tax_by_type': 'PurchaseCalculatedTaxSummaryForServiceTaxByType'
        }

        self.attribute_map = {
            'number_of_lines': 'numberOfLines',
            'subtotal': 'subtotal',
            'total_tax': 'totalTax',
            'grand_total': 'grandTotal',
            'tax_by_type': 'taxByType'
        }

        self._number_of_lines = number_of_lines
        self._subtotal = subtotal
        self._total_tax = total_tax
        self._grand_total = grand_total
        self._tax_by_type = tax_by_type

    @property
    def number_of_lines(self):
        """
        Gets the number_of_lines of this PurchaseCalculatedTaxSummaryForService.
        Count of lines

        :return: The number_of_lines of this PurchaseCalculatedTaxSummaryForService.
        :rtype: int
        """
        return self._number_of_lines

    @number_of_lines.setter
    def number_of_lines(self, number_of_lines):
        """
        Sets the number_of_lines of this PurchaseCalculatedTaxSummaryForService.
        Count of lines

        :param number_of_lines: The number_of_lines of this PurchaseCalculatedTaxSummaryForService.
        :type: int
        """

        self._number_of_lines = number_of_lines

    @property
    def subtotal(self):
        """
        Gets the subtotal of this PurchaseCalculatedTaxSummaryForService.
        sum of all line tax attribute

        :return: The subtotal of this PurchaseCalculatedTaxSummaryForService.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """
        Sets the subtotal of this PurchaseCalculatedTaxSummaryForService.
        sum of all line tax attribute

        :param subtotal: The subtotal of this PurchaseCalculatedTaxSummaryForService.
        :type: float
        """

        self._subtotal = subtotal

    @property
    def total_tax(self):
        """
        Gets the total_tax of this PurchaseCalculatedTaxSummaryForService.
        sum of all line lineAmount attribute

        :return: The total_tax of this PurchaseCalculatedTaxSummaryForService.
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """
        Sets the total_tax of this PurchaseCalculatedTaxSummaryForService.
        sum of all line lineAmount attribute

        :param total_tax: The total_tax of this PurchaseCalculatedTaxSummaryForService.
        :type: float
        """

        self._total_tax = total_tax

    @property
    def grand_total(self):
        """
        Gets the grand_total of this PurchaseCalculatedTaxSummaryForService.
        sum of all line lineAmount attribute - sum of all line tax attribute - sum of all line lineTaxedDiscount attribute

        :return: The grand_total of this PurchaseCalculatedTaxSummaryForService.
        :rtype: float
        """
        return self._grand_total

    @grand_total.setter
    def grand_total(self, grand_total):
        """
        Sets the grand_total of this PurchaseCalculatedTaxSummaryForService.
        sum of all line lineAmount attribute - sum of all line tax attribute - sum of all line lineTaxedDiscount attribute

        :param grand_total: The grand_total of this PurchaseCalculatedTaxSummaryForService.
        :type: float
        """

        self._grand_total = grand_total

    @property
    def tax_by_type(self):
        """
        Gets the tax_by_type of this PurchaseCalculatedTaxSummaryForService.

        :return: The tax_by_type of this PurchaseCalculatedTaxSummaryForService.
        :rtype: PurchaseCalculatedTaxSummaryForServiceTaxByType
        """
        return self._tax_by_type

    @tax_by_type.setter
    def tax_by_type(self, tax_by_type):
        """
        Sets the tax_by_type of this PurchaseCalculatedTaxSummaryForService.

        :param tax_by_type: The tax_by_type of this PurchaseCalculatedTaxSummaryForService.
        :type: PurchaseCalculatedTaxSummaryForServiceTaxByType
        """

        self._tax_by_type = tax_by_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
