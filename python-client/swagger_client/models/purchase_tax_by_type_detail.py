# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PurchaseTaxByTypeDetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, location_type=None, jurisdiction_name=None, jurisdiction_type=None, tax_type=None, rate_type=None, scenario=None, subtotal_taxable=None, subtotal_exempt=None, rate=None, tax=None, exemption_code=None, significant_locations=None, tax_rule_type=None):
        """
        PurchaseTaxByTypeDetail - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'location_type': 'str',
            'jurisdiction_name': 'str',
            'jurisdiction_type': 'str',
            'tax_type': 'str',
            'rate_type': 'str',
            'scenario': 'str',
            'subtotal_taxable': 'float',
            'subtotal_exempt': 'float',
            'rate': 'float',
            'tax': 'float',
            'exemption_code': 'str',
            'significant_locations': 'list[str]',
            'tax_rule_type': 'str'
        }

        self.attribute_map = {
            'location_type': 'locationType',
            'jurisdiction_name': 'jurisdictionName',
            'jurisdiction_type': 'jurisdictionType',
            'tax_type': 'taxType',
            'rate_type': 'rateType',
            'scenario': 'scenario',
            'subtotal_taxable': 'subtotalTaxable',
            'subtotal_exempt': 'subtotalExempt',
            'rate': 'rate',
            'tax': 'tax',
            'exemption_code': 'exemptionCode',
            'significant_locations': 'significantLocations',
            'tax_rule_type': 'taxRuleType'
        }

        self._location_type = location_type
        self._jurisdiction_name = jurisdiction_name
        self._jurisdiction_type = jurisdiction_type
        self._tax_type = tax_type
        self._rate_type = rate_type
        self._scenario = scenario
        self._subtotal_taxable = subtotal_taxable
        self._subtotal_exempt = subtotal_exempt
        self._rate = rate
        self._tax = tax
        self._exemption_code = exemption_code
        self._significant_locations = significant_locations
        self._tax_rule_type = tax_rule_type

    @property
    def location_type(self):
        """
        Gets the location_type of this PurchaseTaxByTypeDetail.
        This string captures the applicable location type. Location used for calc. Buyer or Seller

        :return: The location_type of this PurchaseTaxByTypeDetail.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """
        Sets the location_type of this PurchaseTaxByTypeDetail.
        This string captures the applicable location type. Location used for calc. Buyer or Seller

        :param location_type: The location_type of this PurchaseTaxByTypeDetail.
        :type: str
        """

        self._location_type = location_type

    @property
    def jurisdiction_name(self):
        """
        Gets the jurisdiction_name of this PurchaseTaxByTypeDetail.
        Jurisdiction used for calctax amount

        :return: The jurisdiction_name of this PurchaseTaxByTypeDetail.
        :rtype: str
        """
        return self._jurisdiction_name

    @jurisdiction_name.setter
    def jurisdiction_name(self, jurisdiction_name):
        """
        Sets the jurisdiction_name of this PurchaseTaxByTypeDetail.
        Jurisdiction used for calctax amount

        :param jurisdiction_name: The jurisdiction_name of this PurchaseTaxByTypeDetail.
        :type: str
        """

        self._jurisdiction_name = jurisdiction_name

    @property
    def jurisdiction_type(self):
        """
        Gets the jurisdiction_type of this PurchaseTaxByTypeDetail.
        Type of jurisdiction - 'city' - 'state' - 'country' 

        :return: The jurisdiction_type of this PurchaseTaxByTypeDetail.
        :rtype: str
        """
        return self._jurisdiction_type

    @jurisdiction_type.setter
    def jurisdiction_type(self, jurisdiction_type):
        """
        Sets the jurisdiction_type of this PurchaseTaxByTypeDetail.
        Type of jurisdiction - 'city' - 'state' - 'country' 

        :param jurisdiction_type: The jurisdiction_type of this PurchaseTaxByTypeDetail.
        :type: str
        """
        allowed_values = ["city", "state", "country"]
        if jurisdiction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `jurisdiction_type` ({0}), must be one of {1}"
                .format(jurisdiction_type, allowed_values)
            )

        self._jurisdiction_type = jurisdiction_type

    @property
    def tax_type(self):
        """
        Gets the tax_type of this PurchaseTaxByTypeDetail.
        Tax identificator - 'pis' - 'pisRf' - 'cofins' - 'cofinsRf' - 'csll' - 'csllRf' - 'irrf' - 'inssAr' - 'inssRf' - 'issRf' 

        :return: The tax_type of this PurchaseTaxByTypeDetail.
        :rtype: str
        """
        return self._tax_type

    @tax_type.setter
    def tax_type(self, tax_type):
        """
        Sets the tax_type of this PurchaseTaxByTypeDetail.
        Tax identificator - 'pis' - 'pisRf' - 'cofins' - 'cofinsRf' - 'csll' - 'csllRf' - 'irrf' - 'inssAr' - 'inssRf' - 'issRf' 

        :param tax_type: The tax_type of this PurchaseTaxByTypeDetail.
        :type: str
        """
        allowed_values = ["pis", "pisRf", "cofins", "cofinsRf", "csll", "csllRf", "irrf", "inssAr", "inssRf", "issRf"]
        if tax_type not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_type` ({0}), must be one of {1}"
                .format(tax_type, allowed_values)
            )

        self._tax_type = tax_type

    @property
    def rate_type(self):
        """
        Gets the rate_type of this PurchaseTaxByTypeDetail.
        Name of configuration rate

        :return: The rate_type of this PurchaseTaxByTypeDetail.
        :rtype: str
        """
        return self._rate_type

    @rate_type.setter
    def rate_type(self, rate_type):
        """
        Sets the rate_type of this PurchaseTaxByTypeDetail.
        Name of configuration rate

        :param rate_type: The rate_type of this PurchaseTaxByTypeDetail.
        :type: str
        """

        self._rate_type = rate_type

    @property
    def scenario(self):
        """
        Gets the scenario of this PurchaseTaxByTypeDetail.
        This string captures the transaction scenario used to calculate the tax for this tax type. Scenarios are specific to the tax type. This field provides information about how the tax engine interpreted the transaction information that was passed in.

        :return: The scenario of this PurchaseTaxByTypeDetail.
        :rtype: str
        """
        return self._scenario

    @scenario.setter
    def scenario(self, scenario):
        """
        Sets the scenario of this PurchaseTaxByTypeDetail.
        This string captures the transaction scenario used to calculate the tax for this tax type. Scenarios are specific to the tax type. This field provides information about how the tax engine interpreted the transaction information that was passed in.

        :param scenario: The scenario of this PurchaseTaxByTypeDetail.
        :type: str
        """

        self._scenario = scenario

    @property
    def subtotal_taxable(self):
        """
        Gets the subtotal_taxable of this PurchaseTaxByTypeDetail.
        This decimal captures how much of the lineAmount was taxable by this tax, calc base

        :return: The subtotal_taxable of this PurchaseTaxByTypeDetail.
        :rtype: float
        """
        return self._subtotal_taxable

    @subtotal_taxable.setter
    def subtotal_taxable(self, subtotal_taxable):
        """
        Sets the subtotal_taxable of this PurchaseTaxByTypeDetail.
        This decimal captures how much of the lineAmount was taxable by this tax, calc base

        :param subtotal_taxable: The subtotal_taxable of this PurchaseTaxByTypeDetail.
        :type: float
        """

        self._subtotal_taxable = subtotal_taxable

    @property
    def subtotal_exempt(self):
        """
        Gets the subtotal_exempt of this PurchaseTaxByTypeDetail.
        This decimal captures how much of the lineAmount was non-taxed. This is simply the line amount minus the taxable.

        :return: The subtotal_exempt of this PurchaseTaxByTypeDetail.
        :rtype: float
        """
        return self._subtotal_exempt

    @subtotal_exempt.setter
    def subtotal_exempt(self, subtotal_exempt):
        """
        Sets the subtotal_exempt of this PurchaseTaxByTypeDetail.
        This decimal captures how much of the lineAmount was non-taxed. This is simply the line amount minus the taxable.

        :param subtotal_exempt: The subtotal_exempt of this PurchaseTaxByTypeDetail.
        :type: float
        """

        self._subtotal_exempt = subtotal_exempt

    @property
    def rate(self):
        """
        Gets the rate of this PurchaseTaxByTypeDetail.
        This decimal captures the tax rate for this tax.3.00 (3%)

        :return: The rate of this PurchaseTaxByTypeDetail.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """
        Sets the rate of this PurchaseTaxByTypeDetail.
        This decimal captures the tax rate for this tax.3.00 (3%)

        :param rate: The rate of this PurchaseTaxByTypeDetail.
        :type: float
        """

        self._rate = rate

    @property
    def tax(self):
        """
        Gets the tax of this PurchaseTaxByTypeDetail.
        This decimal captures how much of the lineAmount was taxable by this tax

        :return: The tax of this PurchaseTaxByTypeDetail.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """
        Sets the tax of this PurchaseTaxByTypeDetail.
        This decimal captures how much of the lineAmount was taxable by this tax

        :param tax: The tax of this PurchaseTaxByTypeDetail.
        :type: float
        """

        self._tax = tax

    @property
    def exemption_code(self):
        """
        Gets the exemption_code of this PurchaseTaxByTypeDetail.
        This string is required if is exempt

        :return: The exemption_code of this PurchaseTaxByTypeDetail.
        :rtype: str
        """
        return self._exemption_code

    @exemption_code.setter
    def exemption_code(self, exemption_code):
        """
        Sets the exemption_code of this PurchaseTaxByTypeDetail.
        This string is required if is exempt

        :param exemption_code: The exemption_code of this PurchaseTaxByTypeDetail.
        :type: str
        """

        self._exemption_code = exemption_code

    @property
    def significant_locations(self):
        """
        Gets the significant_locations of this PurchaseTaxByTypeDetail.
        This element captures the list of locations that contributed to the tax determination. for BR16 Service is Buyer and Seller Address

        :return: The significant_locations of this PurchaseTaxByTypeDetail.
        :rtype: list[str]
        """
        return self._significant_locations

    @significant_locations.setter
    def significant_locations(self, significant_locations):
        """
        Sets the significant_locations of this PurchaseTaxByTypeDetail.
        This element captures the list of locations that contributed to the tax determination. for BR16 Service is Buyer and Seller Address

        :param significant_locations: The significant_locations of this PurchaseTaxByTypeDetail.
        :type: list[str]
        """

        self._significant_locations = significant_locations

    @property
    def tax_rule_type(self):
        """
        Gets the tax_rule_type of this PurchaseTaxByTypeDetail.
        This string with type of rule - 'SELLER' - 'BUYER' - 'TRANSACTION' - 'ITEM' - 'TAX' 

        :return: The tax_rule_type of this PurchaseTaxByTypeDetail.
        :rtype: str
        """
        return self._tax_rule_type

    @tax_rule_type.setter
    def tax_rule_type(self, tax_rule_type):
        """
        Sets the tax_rule_type of this PurchaseTaxByTypeDetail.
        This string with type of rule - 'SELLER' - 'BUYER' - 'TRANSACTION' - 'ITEM' - 'TAX' 

        :param tax_rule_type: The tax_rule_type of this PurchaseTaxByTypeDetail.
        :type: str
        """
        allowed_values = ["SELLER", "BUYER", "TRANSACTION", "ITEM", "TAX"]
        if tax_rule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_rule_type` ({0}), must be one of {1}"
                .format(tax_rule_type, allowed_values)
            )

        self._tax_rule_type = tax_rule_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
