# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FuelPumpNumber(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, nozzle_number_fuel_supply=None, fuel_pump_number=None, fuel_tank_number=None, start_value_of_pump_number=None, end_value_of_pump_number=None):
        """
        FuelPumpNumber - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'nozzle_number_fuel_supply': 'str',
            'fuel_pump_number': 'str',
            'fuel_tank_number': 'str',
            'start_value_of_pump_number': 'float',
            'end_value_of_pump_number': 'float'
        }

        self.attribute_map = {
            'nozzle_number_fuel_supply': 'nozzleNumberFuelSupply',
            'fuel_pump_number': 'fuelPumpNumber',
            'fuel_tank_number': 'fuelTankNumber',
            'start_value_of_pump_number': 'startValueOfPumpNumber',
            'end_value_of_pump_number': 'endValueOfPumpNumber'
        }

        self._nozzle_number_fuel_supply = nozzle_number_fuel_supply
        self._fuel_pump_number = fuel_pump_number
        self._fuel_tank_number = fuel_tank_number
        self._start_value_of_pump_number = start_value_of_pump_number
        self._end_value_of_pump_number = end_value_of_pump_number

    @property
    def nozzle_number_fuel_supply(self):
        """
        Gets the nozzle_number_fuel_supply of this FuelPumpNumber.
        Identification number of nozzle used in the dispensing process.   Numero de identificação do Bico utilizado no abastecimento 

        :return: The nozzle_number_fuel_supply of this FuelPumpNumber.
        :rtype: str
        """
        return self._nozzle_number_fuel_supply

    @nozzle_number_fuel_supply.setter
    def nozzle_number_fuel_supply(self, nozzle_number_fuel_supply):
        """
        Sets the nozzle_number_fuel_supply of this FuelPumpNumber.
        Identification number of nozzle used in the dispensing process.   Numero de identificação do Bico utilizado no abastecimento 

        :param nozzle_number_fuel_supply: The nozzle_number_fuel_supply of this FuelPumpNumber.
        :type: str
        """
        if nozzle_number_fuel_supply is None:
            raise ValueError("Invalid value for `nozzle_number_fuel_supply`, must not be `None`")
        if nozzle_number_fuel_supply is not None and not re.search('[0-9]{1,3}', nozzle_number_fuel_supply):
            raise ValueError("Invalid value for `nozzle_number_fuel_supply`, must be a follow pattern or equal to `/[0-9]{1,3}/`")

        self._nozzle_number_fuel_supply = nozzle_number_fuel_supply

    @property
    def fuel_pump_number(self):
        """
        Gets the fuel_pump_number of this FuelPumpNumber.
        Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado 

        :return: The fuel_pump_number of this FuelPumpNumber.
        :rtype: str
        """
        return self._fuel_pump_number

    @fuel_pump_number.setter
    def fuel_pump_number(self, fuel_pump_number):
        """
        Sets the fuel_pump_number of this FuelPumpNumber.
        Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado 

        :param fuel_pump_number: The fuel_pump_number of this FuelPumpNumber.
        :type: str
        """
        if fuel_pump_number is None:
            raise ValueError("Invalid value for `fuel_pump_number`, must not be `None`")
        if fuel_pump_number is not None and not re.search('[0-9]{1,3}', fuel_pump_number):
            raise ValueError("Invalid value for `fuel_pump_number`, must be a follow pattern or equal to `/[0-9]{1,3}/`")

        self._fuel_pump_number = fuel_pump_number

    @property
    def fuel_tank_number(self):
        """
        Gets the fuel_tank_number of this FuelPumpNumber.
        Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado 

        :return: The fuel_tank_number of this FuelPumpNumber.
        :rtype: str
        """
        return self._fuel_tank_number

    @fuel_tank_number.setter
    def fuel_tank_number(self, fuel_tank_number):
        """
        Sets the fuel_tank_number of this FuelPumpNumber.
        Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado 

        :param fuel_tank_number: The fuel_tank_number of this FuelPumpNumber.
        :type: str
        """
        if fuel_tank_number is None:
            raise ValueError("Invalid value for `fuel_tank_number`, must not be `None`")
        if fuel_tank_number is not None and not re.search('[0-9]{1,3}', fuel_tank_number):
            raise ValueError("Invalid value for `fuel_tank_number`, must be a follow pattern or equal to `/[0-9]{1,3}/`")

        self._fuel_tank_number = fuel_tank_number

    @property
    def start_value_of_pump_number(self):
        """
        Gets the start_value_of_pump_number of this FuelPumpNumber.
        Valor do Encerrante no ínicio do abastecimento.  Reading of auto-counter (encerrante) at the start of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$ 

        :return: The start_value_of_pump_number of this FuelPumpNumber.
        :rtype: float
        """
        return self._start_value_of_pump_number

    @start_value_of_pump_number.setter
    def start_value_of_pump_number(self, start_value_of_pump_number):
        """
        Sets the start_value_of_pump_number of this FuelPumpNumber.
        Valor do Encerrante no ínicio do abastecimento.  Reading of auto-counter (encerrante) at the start of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$ 

        :param start_value_of_pump_number: The start_value_of_pump_number of this FuelPumpNumber.
        :type: float
        """
        if start_value_of_pump_number is None:
            raise ValueError("Invalid value for `start_value_of_pump_number`, must not be `None`")

        self._start_value_of_pump_number = start_value_of_pump_number

    @property
    def end_value_of_pump_number(self):
        """
        Gets the end_value_of_pump_number of this FuelPumpNumber.
        Valor do Encerrante no final do abastecimento.  Reading of auto-counter (encerrante) at the end of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$ 

        :return: The end_value_of_pump_number of this FuelPumpNumber.
        :rtype: float
        """
        return self._end_value_of_pump_number

    @end_value_of_pump_number.setter
    def end_value_of_pump_number(self, end_value_of_pump_number):
        """
        Sets the end_value_of_pump_number of this FuelPumpNumber.
        Valor do Encerrante no final do abastecimento.  Reading of auto-counter (encerrante) at the end of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$ 

        :param end_value_of_pump_number: The end_value_of_pump_number of this FuelPumpNumber.
        :type: float
        """
        if end_value_of_pump_number is None:
            raise ValueError("Invalid value for `end_value_of_pump_number`, must not be `None`")

        self._end_value_of_pump_number = end_value_of_pump_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
