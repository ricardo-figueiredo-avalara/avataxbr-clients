# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Fuel(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, prod_anp_code=None, per_mix_gn=None, authorization_code_codif=None, quantity_on_room_temperature=None, state_code_of_und_user=None, cide=None, pump_number=None):
        """
        Fuel - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'prod_anp_code': 'str',
            'per_mix_gn': 'float',
            'authorization_code_codif': 'str',
            'quantity_on_room_temperature': 'float',
            'state_code_of_und_user': 'StateEnum',
            'cide': 'FuelCide',
            'pump_number': 'FuelPumpNumber'
        }

        self.attribute_map = {
            'prod_anp_code': 'prodANPCode',
            'per_mix_gn': 'perMixGN',
            'authorization_code_codif': 'authorizationCodeCODIF',
            'quantity_on_room_temperature': 'quantityOnRoomTemperature',
            'state_code_of_und_user': 'stateCodeOfUndUser',
            'cide': 'cide',
            'pump_number': 'pumpNumber'
        }

        self._prod_anp_code = prod_anp_code
        self._per_mix_gn = per_mix_gn
        self._authorization_code_codif = authorization_code_codif
        self._quantity_on_room_temperature = quantity_on_room_temperature
        self._state_code_of_und_user = state_code_of_und_user
        self._cide = cide
        self._pump_number = pump_number

    @property
    def prod_anp_code(self):
        """
        Gets the prod_anp_code of this Fuel.

        :return: The prod_anp_code of this Fuel.
        :rtype: str
        """
        return self._prod_anp_code

    @prod_anp_code.setter
    def prod_anp_code(self, prod_anp_code):
        """
        Sets the prod_anp_code of this Fuel.

        :param prod_anp_code: The prod_anp_code of this Fuel.
        :type: str
        """
        if prod_anp_code is None:
            raise ValueError("Invalid value for `prod_anp_code`, must not be `None`")
        if prod_anp_code is not None and not re.search('[0-9]{9}', prod_anp_code):
            raise ValueError("Invalid value for `prod_anp_code`, must be a follow pattern or equal to `/[0-9]{9}/`")

        self._prod_anp_code = prod_anp_code

    @property
    def per_mix_gn(self):
        """
        Gets the per_mix_gn of this Fuel.
        percentage of natural gas (GLP)

        :return: The per_mix_gn of this Fuel.
        :rtype: float
        """
        return self._per_mix_gn

    @per_mix_gn.setter
    def per_mix_gn(self, per_mix_gn):
        """
        Sets the per_mix_gn of this Fuel.
        percentage of natural gas (GLP)

        :param per_mix_gn: The per_mix_gn of this Fuel.
        :type: float
        """

        self._per_mix_gn = per_mix_gn

    @property
    def authorization_code_codif(self):
        """
        Gets the authorization_code_codif of this Fuel.

        :return: The authorization_code_codif of this Fuel.
        :rtype: str
        """
        return self._authorization_code_codif

    @authorization_code_codif.setter
    def authorization_code_codif(self, authorization_code_codif):
        """
        Sets the authorization_code_codif of this Fuel.

        :param authorization_code_codif: The authorization_code_codif of this Fuel.
        :type: str
        """
        if authorization_code_codif is not None and not re.search('[0-9]{1,21}', authorization_code_codif):
            raise ValueError("Invalid value for `authorization_code_codif`, must be a follow pattern or equal to `/[0-9]{1,21}/`")

        self._authorization_code_codif = authorization_code_codif

    @property
    def quantity_on_room_temperature(self):
        """
        Gets the quantity_on_room_temperature of this Fuel.
        This decimal 12 integers and 0 to 4 decimals Quantidade de combustível faturada à temperatura ambiente. Informar quando a quantidade faturada informada no campo qCom (I10) tiver sido ajustada para uma temperatura diferente da ambiente. 

        :return: The quantity_on_room_temperature of this Fuel.
        :rtype: float
        """
        return self._quantity_on_room_temperature

    @quantity_on_room_temperature.setter
    def quantity_on_room_temperature(self, quantity_on_room_temperature):
        """
        Sets the quantity_on_room_temperature of this Fuel.
        This decimal 12 integers and 0 to 4 decimals Quantidade de combustível faturada à temperatura ambiente. Informar quando a quantidade faturada informada no campo qCom (I10) tiver sido ajustada para uma temperatura diferente da ambiente. 

        :param quantity_on_room_temperature: The quantity_on_room_temperature of this Fuel.
        :type: float
        """

        self._quantity_on_room_temperature = quantity_on_room_temperature

    @property
    def state_code_of_und_user(self):
        """
        Gets the state_code_of_und_user of this Fuel.
        state where fuel was used

        :return: The state_code_of_und_user of this Fuel.
        :rtype: StateEnum
        """
        return self._state_code_of_und_user

    @state_code_of_und_user.setter
    def state_code_of_und_user(self, state_code_of_und_user):
        """
        Sets the state_code_of_und_user of this Fuel.
        state where fuel was used

        :param state_code_of_und_user: The state_code_of_und_user of this Fuel.
        :type: StateEnum
        """
        if state_code_of_und_user is None:
            raise ValueError("Invalid value for `state_code_of_und_user`, must not be `None`")

        self._state_code_of_und_user = state_code_of_und_user

    @property
    def cide(self):
        """
        Gets the cide of this Fuel.

        :return: The cide of this Fuel.
        :rtype: FuelCide
        """
        return self._cide

    @cide.setter
    def cide(self, cide):
        """
        Sets the cide of this Fuel.

        :param cide: The cide of this Fuel.
        :type: FuelCide
        """

        self._cide = cide

    @property
    def pump_number(self):
        """
        Gets the pump_number of this Fuel.

        :return: The pump_number of this Fuel.
        :rtype: FuelPumpNumber
        """
        return self._pump_number

    @pump_number.setter
    def pump_number(self, pump_number):
        """
        Sets the pump_number of this Fuel.

        :param pump_number: The pump_number of this Fuel.
        :type: FuelPumpNumber
        """

        self._pump_number = pump_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
