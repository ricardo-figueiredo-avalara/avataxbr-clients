# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HeaderForGoods(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, message_type='goods', account_id=None, company_code=None, document_code=None, participants=None, nf_access_key=None, nfce_qr_code=None, transaction_type=None, transaction_model=None, transaction_class=None, e_doc_creator_type=None, e_doc_creator_perspective=True, entity_code=None, currency=None, company_location=None, transaction_date=None, shipping_date=None, additional_info=None, tp_imp=None, id_dest=None, ind_pres=None, invoice_number=None, invoice_serial=None, default_locations=None, transport=None, nf_ref=None, payment=None, purchase_info=None, export=None):
        """
        HeaderForGoods - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'message_type': 'str',
            'account_id': 'str',
            'company_code': 'str',
            'document_code': 'str',
            'participants': 'HeaderForGoodsParticipants',
            'nf_access_key': 'str',
            'nfce_qr_code': 'str',
            'transaction_type': 'str',
            'transaction_model': 'str',
            'transaction_class': 'str',
            'e_doc_creator_type': 'str',
            'e_doc_creator_perspective': 'bool',
            'entity_code': 'str',
            'currency': 'str',
            'company_location': 'str',
            'transaction_date': 'str',
            'shipping_date': 'str',
            'additional_info': 'AdditionalInformation',
            'tp_imp': 'str',
            'id_dest': 'int',
            'ind_pres': 'str',
            'invoice_number': 'int',
            'invoice_serial': 'int',
            'default_locations': 'DefaultLocations',
            'transport': 'Transport',
            'nf_ref': 'list[NRef]',
            'payment': 'Payment',
            'purchase_info': 'PurchaseInfo',
            'export': 'ExportInfo'
        }

        self.attribute_map = {
            'message_type': 'messageType',
            'account_id': 'accountId',
            'company_code': 'companyCode',
            'document_code': 'documentCode',
            'participants': 'participants',
            'nf_access_key': 'nfAccessKey',
            'nfce_qr_code': 'nfceQrCode',
            'transaction_type': 'transactionType',
            'transaction_model': 'transactionModel',
            'transaction_class': 'transactionClass',
            'e_doc_creator_type': 'eDocCreatorType',
            'e_doc_creator_perspective': 'eDocCreatorPerspective',
            'entity_code': 'entityCode',
            'currency': 'currency',
            'company_location': 'companyLocation',
            'transaction_date': 'transactionDate',
            'shipping_date': 'shippingDate',
            'additional_info': 'additionalInfo',
            'tp_imp': 'tpImp',
            'id_dest': 'idDest',
            'ind_pres': 'indPres',
            'invoice_number': 'invoiceNumber',
            'invoice_serial': 'invoiceSerial',
            'default_locations': 'defaultLocations',
            'transport': 'transport',
            'nf_ref': 'nfRef',
            'payment': 'payment',
            'purchase_info': 'purchaseInfo',
            'export': 'export'
        }

        self._message_type = message_type
        self._account_id = account_id
        self._company_code = company_code
        self._document_code = document_code
        self._participants = participants
        self._nf_access_key = nf_access_key
        self._nfce_qr_code = nfce_qr_code
        self._transaction_type = transaction_type
        self._transaction_model = transaction_model
        self._transaction_class = transaction_class
        self._e_doc_creator_type = e_doc_creator_type
        self._e_doc_creator_perspective = e_doc_creator_perspective
        self._entity_code = entity_code
        self._currency = currency
        self._company_location = company_location
        self._transaction_date = transaction_date
        self._shipping_date = shipping_date
        self._additional_info = additional_info
        self._tp_imp = tp_imp
        self._id_dest = id_dest
        self._ind_pres = ind_pres
        self._invoice_number = invoice_number
        self._invoice_serial = invoice_serial
        self._default_locations = default_locations
        self._transport = transport
        self._nf_ref = nf_ref
        self._payment = payment
        self._purchase_info = purchase_info
        self._export = export

    @property
    def message_type(self):
        """
        Gets the message_type of this HeaderForGoods.

        :return: The message_type of this HeaderForGoods.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """
        Sets the message_type of this HeaderForGoods.

        :param message_type: The message_type of this HeaderForGoods.
        :type: str
        """
        allowed_values = ["goods"]
        if message_type not in allowed_values:
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"
                .format(message_type, allowed_values)
            )

        self._message_type = message_type

    @property
    def account_id(self):
        """
        Gets the account_id of this HeaderForGoods.
        This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode on the next line.

        :return: The account_id of this HeaderForGoods.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this HeaderForGoods.
        This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode on the next line.

        :param account_id: The account_id of this HeaderForGoods.
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def company_code(self):
        """
        Gets the company_code of this HeaderForGoods.
        string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company

        :return: The company_code of this HeaderForGoods.
        :rtype: str
        """
        return self._company_code

    @company_code.setter
    def company_code(self, company_code):
        """
        Sets the company_code of this HeaderForGoods.
        string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company

        :param company_code: The company_code of this HeaderForGoods.
        :type: str
        """
        if company_code is None:
            raise ValueError("Invalid value for `company_code`, must not be `None`")
        if company_code is not None and len(company_code) > 60:
            raise ValueError("Invalid value for `company_code`, length must be less than or equal to `60`")

        self._company_code = company_code

    @property
    def document_code(self):
        """
        Gets the document_code of this HeaderForGoods.
        This string is a code maintained by the client application to uniquely identify a document in the client's systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc. When has this field, the transaction will be stored

        :return: The document_code of this HeaderForGoods.
        :rtype: str
        """
        return self._document_code

    @document_code.setter
    def document_code(self, document_code):
        """
        Sets the document_code of this HeaderForGoods.
        This string is a code maintained by the client application to uniquely identify a document in the client's systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc. When has this field, the transaction will be stored

        :param document_code: The document_code of this HeaderForGoods.
        :type: str
        """

        self._document_code = document_code

    @property
    def participants(self):
        """
        Gets the participants of this HeaderForGoods.

        :return: The participants of this HeaderForGoods.
        :rtype: HeaderForGoodsParticipants
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """
        Sets the participants of this HeaderForGoods.

        :param participants: The participants of this HeaderForGoods.
        :type: HeaderForGoodsParticipants
        """

        self._participants = participants

    @property
    def nf_access_key(self):
        """
        Gets the nf_access_key of this HeaderForGoods.
        This is the public NF id. With this number is possible get invoice information directly from government.

        :return: The nf_access_key of this HeaderForGoods.
        :rtype: str
        """
        return self._nf_access_key

    @nf_access_key.setter
    def nf_access_key(self, nf_access_key):
        """
        Sets the nf_access_key of this HeaderForGoods.
        This is the public NF id. With this number is possible get invoice information directly from government.

        :param nf_access_key: The nf_access_key of this HeaderForGoods.
        :type: str
        """

        self._nf_access_key = nf_access_key

    @property
    def nfce_qr_code(self):
        """
        Gets the nfce_qr_code of this HeaderForGoods.
        qr code printed on DANFE;

        :return: The nfce_qr_code of this HeaderForGoods.
        :rtype: str
        """
        return self._nfce_qr_code

    @nfce_qr_code.setter
    def nfce_qr_code(self, nfce_qr_code):
        """
        Sets the nfce_qr_code of this HeaderForGoods.
        qr code printed on DANFE;

        :param nfce_qr_code: The nfce_qr_code of this HeaderForGoods.
        :type: str
        """
        if nfce_qr_code is not None and len(nfce_qr_code) > 600:
            raise ValueError("Invalid value for `nfce_qr_code`, length must be less than or equal to `600`")
        if nfce_qr_code is not None and len(nfce_qr_code) < 100:
            raise ValueError("Invalid value for `nfce_qr_code`, length must be greater than or equal to `100`")

        self._nfce_qr_code = nfce_qr_code

    @property
    def transaction_type(self):
        """
        Gets the transaction_type of this HeaderForGoods.
        This string indicates the type of transaction for which tax should be calculated.

        :return: The transaction_type of this HeaderForGoods.
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """
        Sets the transaction_type of this HeaderForGoods.
        This string indicates the type of transaction for which tax should be calculated.

        :param transaction_type: The transaction_type of this HeaderForGoods.
        :type: str
        """
        allowed_values = ["Sales", "Purchase", "SalesReturn", "PurchaseReturn", "TransferReturn", "Shipping", "ShippingReturn", "Transfer", "ReceiptAdjustment", "TransferAdjustment"]
        if transaction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_type` ({0}), must be one of {1}"
                .format(transaction_type, allowed_values)
            )

        self._transaction_type = transaction_type

    @property
    def transaction_model(self):
        """
        Gets the transaction_model of this HeaderForGoods.
        This string indicates the type of transaction for which tax should be calculated. - '01' # Nota Fiscal 1/1A - '1B' # Nota Fiscal Avulsa - '02' # Nota Fiscal de Venda a-Consumidor - '2D' # Cupom Fiscal - '2E' # Cupom Fiscal-Bilhete de Passagem - '04' # Nota Fiscal de Produtor - '06' # Nota Fiscal/Conta de Energia Elétrica - '07' # Nota Fiscal de Serviço de Transporte - '08' # Conhecimento de Transporte Rodoviário de-Cargas - '8B' # Conhecimento de Transporte de-Cargas Avulso - '09' # Conhecimento de Transporte Aquaviário de-Cargas - '10' # Conhecimento Aéreo - '11' # Conhecimento de Transporte Ferroviário de-Cargas - '13' # Bilhete de Passagem Rodoviário - '14' # Bilhete de Passagem Aquaviário - '15' # Bilhete de Passagem e-Nota de-Bagagem - '16' # Bilhete de Passagem Ferroviário - '18' # Resumo de Movimento Diário - '21' # Nota Fiscal de Serviço de-Comunicação - '22' # Nota Fiscal de Serviço de Telecomunicação - '26' # Conhecimento de Transporte Multimodal de-Cargas - '27' # Nota Fiscal De Transporte Ferroviário De-Carga - '28' # Nota Fiscal/Conta de Fornecimento de Gás-Canalizado - '29' # Nota Fiscal/Conta de Fornecimento de Água-Canalizada - '55' # Nota Fiscal Eletrônica (NF-e) - '57' # Conhecimento de Transporte Eletrônico (CT-e) - '59' # Cupom Fiscal Eletrônico (CF-e-SAT) - '60' # Cupom Fiscal Eletrônico (CF-e-ECF) - '65' # Nota Fiscal Eletrônica ao-Consumidor Final (NFC-e) 

        :return: The transaction_model of this HeaderForGoods.
        :rtype: str
        """
        return self._transaction_model

    @transaction_model.setter
    def transaction_model(self, transaction_model):
        """
        Sets the transaction_model of this HeaderForGoods.
        This string indicates the type of transaction for which tax should be calculated. - '01' # Nota Fiscal 1/1A - '1B' # Nota Fiscal Avulsa - '02' # Nota Fiscal de Venda a-Consumidor - '2D' # Cupom Fiscal - '2E' # Cupom Fiscal-Bilhete de Passagem - '04' # Nota Fiscal de Produtor - '06' # Nota Fiscal/Conta de Energia Elétrica - '07' # Nota Fiscal de Serviço de Transporte - '08' # Conhecimento de Transporte Rodoviário de-Cargas - '8B' # Conhecimento de Transporte de-Cargas Avulso - '09' # Conhecimento de Transporte Aquaviário de-Cargas - '10' # Conhecimento Aéreo - '11' # Conhecimento de Transporte Ferroviário de-Cargas - '13' # Bilhete de Passagem Rodoviário - '14' # Bilhete de Passagem Aquaviário - '15' # Bilhete de Passagem e-Nota de-Bagagem - '16' # Bilhete de Passagem Ferroviário - '18' # Resumo de Movimento Diário - '21' # Nota Fiscal de Serviço de-Comunicação - '22' # Nota Fiscal de Serviço de Telecomunicação - '26' # Conhecimento de Transporte Multimodal de-Cargas - '27' # Nota Fiscal De Transporte Ferroviário De-Carga - '28' # Nota Fiscal/Conta de Fornecimento de Gás-Canalizado - '29' # Nota Fiscal/Conta de Fornecimento de Água-Canalizada - '55' # Nota Fiscal Eletrônica (NF-e) - '57' # Conhecimento de Transporte Eletrônico (CT-e) - '59' # Cupom Fiscal Eletrônico (CF-e-SAT) - '60' # Cupom Fiscal Eletrônico (CF-e-ECF) - '65' # Nota Fiscal Eletrônica ao-Consumidor Final (NFC-e) 

        :param transaction_model: The transaction_model of this HeaderForGoods.
        :type: str
        """
        allowed_values = ["01", "1B", "02", "2D", "2E", "04", "06", "07", "08", "8B", "09", "10", "11", "13", "14", "15", "16", "18", "21", "22", "26", "27", "28", "29", "55", "57", "59", "60", "65"]
        if transaction_model not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_model` ({0}), must be one of {1}"
                .format(transaction_model, allowed_values)
            )

        self._transaction_model = transaction_model

    @property
    def transaction_class(self):
        """
        Gets the transaction_class of this HeaderForGoods.
        Natureza da Opreração - 'Describe kind of this transaction, summary

        :return: The transaction_class of this HeaderForGoods.
        :rtype: str
        """
        return self._transaction_class

    @transaction_class.setter
    def transaction_class(self, transaction_class):
        """
        Sets the transaction_class of this HeaderForGoods.
        Natureza da Opreração - 'Describe kind of this transaction, summary

        :param transaction_class: The transaction_class of this HeaderForGoods.
        :type: str
        """

        self._transaction_class = transaction_class

    @property
    def e_doc_creator_type(self):
        """
        Gets the e_doc_creator_type of this HeaderForGoods.

        :return: The e_doc_creator_type of this HeaderForGoods.
        :rtype: str
        """
        return self._e_doc_creator_type

    @e_doc_creator_type.setter
    def e_doc_creator_type(self, e_doc_creator_type):
        """
        Sets the e_doc_creator_type of this HeaderForGoods.

        :param e_doc_creator_type: The e_doc_creator_type of this HeaderForGoods.
        :type: str
        """
        allowed_values = ["self", "other"]
        if e_doc_creator_type not in allowed_values:
            raise ValueError(
                "Invalid value for `e_doc_creator_type` ({0}), must be one of {1}"
                .format(e_doc_creator_type, allowed_values)
            )

        self._e_doc_creator_type = e_doc_creator_type

    @property
    def e_doc_creator_perspective(self):
        """
        Gets the e_doc_creator_perspective of this HeaderForGoods.
        This Flag is used only when eDocCreatorType is other and the return show Taxes using eDocCreator perspective or self perspective.

        :return: The e_doc_creator_perspective of this HeaderForGoods.
        :rtype: bool
        """
        return self._e_doc_creator_perspective

    @e_doc_creator_perspective.setter
    def e_doc_creator_perspective(self, e_doc_creator_perspective):
        """
        Sets the e_doc_creator_perspective of this HeaderForGoods.
        This Flag is used only when eDocCreatorType is other and the return show Taxes using eDocCreator perspective or self perspective.

        :param e_doc_creator_perspective: The e_doc_creator_perspective of this HeaderForGoods.
        :type: bool
        """

        self._e_doc_creator_perspective = e_doc_creator_perspective

    @property
    def entity_code(self):
        """
        Gets the entity_code of this HeaderForGoods.
        This string is a code maintained by the client application and recorded in CUP to uniquely identify the party with whom the company (identified by companyCode) is transacting. It is unique within the context of a Company.

        :return: The entity_code of this HeaderForGoods.
        :rtype: str
        """
        return self._entity_code

    @entity_code.setter
    def entity_code(self, entity_code):
        """
        Sets the entity_code of this HeaderForGoods.
        This string is a code maintained by the client application and recorded in CUP to uniquely identify the party with whom the company (identified by companyCode) is transacting. It is unique within the context of a Company.

        :param entity_code: The entity_code of this HeaderForGoods.
        :type: str
        """
        if entity_code is None:
            raise ValueError("Invalid value for `entity_code`, must not be `None`")

        self._entity_code = entity_code

    @property
    def currency(self):
        """
        Gets the currency of this HeaderForGoods.
        currency code

        :return: The currency of this HeaderForGoods.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this HeaderForGoods.
        currency code

        :param currency: The currency of this HeaderForGoods.
        :type: str
        """
        allowed_values = ["BRL"]
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def company_location(self):
        """
        Gets the company_location of this HeaderForGoods.
        This string contains a previously configured company code which may also have codes needed for tax return purposes. These codes are maintained through the customer portal. Main company address identity

        :return: The company_location of this HeaderForGoods.
        :rtype: str
        """
        return self._company_location

    @company_location.setter
    def company_location(self, company_location):
        """
        Sets the company_location of this HeaderForGoods.
        This string contains a previously configured company code which may also have codes needed for tax return purposes. These codes are maintained through the customer portal. Main company address identity

        :param company_location: The company_location of this HeaderForGoods.
        :type: str
        """
        if company_location is None:
            raise ValueError("Invalid value for `company_location`, must not be `None`")

        self._company_location = company_location

    @property
    def transaction_date(self):
        """
        Gets the transaction_date of this HeaderForGoods.
        This string is the transaction date in ISO 8601 format, create transaction date

        :return: The transaction_date of this HeaderForGoods.
        :rtype: str
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """
        Sets the transaction_date of this HeaderForGoods.
        This string is the transaction date in ISO 8601 format, create transaction date

        :param transaction_date: The transaction_date of this HeaderForGoods.
        :type: str
        """
        if transaction_date is None:
            raise ValueError("Invalid value for `transaction_date`, must not be `None`")

        self._transaction_date = transaction_date

    @property
    def shipping_date(self):
        """
        Gets the shipping_date of this HeaderForGoods.
        This string is the transaction date in ISO 8601 format, when products were shipped, can be empty or absent

        :return: The shipping_date of this HeaderForGoods.
        :rtype: str
        """
        return self._shipping_date

    @shipping_date.setter
    def shipping_date(self, shipping_date):
        """
        Sets the shipping_date of this HeaderForGoods.
        This string is the transaction date in ISO 8601 format, when products were shipped, can be empty or absent

        :param shipping_date: The shipping_date of this HeaderForGoods.
        :type: str
        """

        self._shipping_date = shipping_date

    @property
    def additional_info(self):
        """
        Gets the additional_info of this HeaderForGoods.

        :return: The additional_info of this HeaderForGoods.
        :rtype: AdditionalInformation
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """
        Sets the additional_info of this HeaderForGoods.

        :param additional_info: The additional_info of this HeaderForGoods.
        :type: AdditionalInformation
        """

        self._additional_info = additional_info

    @property
    def tp_imp(self):
        """
        Gets the tp_imp of this HeaderForGoods.
        how the document will be printed - '0' # without DANFE; - '1' # DANFe Letter; - '2' # DANFe Landscape; - '3' # DANFe Simplified; - '4' # DANFe NFC-e; - '5' # DANFe NFC-e e-mail 

        :return: The tp_imp of this HeaderForGoods.
        :rtype: str
        """
        return self._tp_imp

    @tp_imp.setter
    def tp_imp(self, tp_imp):
        """
        Sets the tp_imp of this HeaderForGoods.
        how the document will be printed - '0' # without DANFE; - '1' # DANFe Letter; - '2' # DANFe Landscape; - '3' # DANFe Simplified; - '4' # DANFe NFC-e; - '5' # DANFe NFC-e e-mail 

        :param tp_imp: The tp_imp of this HeaderForGoods.
        :type: str
        """
        allowed_values = ["0", "1", "2", "3", "4", "5"]
        if tp_imp not in allowed_values:
            raise ValueError(
                "Invalid value for `tp_imp` ({0}), must be one of {1}"
                .format(tp_imp, allowed_values)
            )

        self._tp_imp = tp_imp

    @property
    def id_dest(self):
        """
        Gets the id_dest of this HeaderForGoods.
        This indicator inform transaction target place, when is AUTOMATIC the company address and entity address are analyzed to identify type of transaction target place 1- same state; 2 - interstate; 3-with exterior. Exist some cases where is necessary force this situation like when buyer from another state buy something in loco, the address are from different states, but transaction no.  Identificador de Local de destino da operação, na opção AUTOMATIC endereços da Companhia e da entidade destino são analisados para saber se é uma operação dentro do mesmo estado, interestadual ou com o exterior. Há situações onde é necessário forçar este indicador como por exemplo  Quando uma pessoa com endereço em outro estado, compra uma mercadoria de forma presencial, é uma operação interna apesar dos endereços dos envolvidos estarem em estados distintos. - 0 # AUTOMATIC - DEFAULT - 1 # Interna; - 2 # Interestadual; - 3 # Exterior) 

        :return: The id_dest of this HeaderForGoods.
        :rtype: int
        """
        return self._id_dest

    @id_dest.setter
    def id_dest(self, id_dest):
        """
        Sets the id_dest of this HeaderForGoods.
        This indicator inform transaction target place, when is AUTOMATIC the company address and entity address are analyzed to identify type of transaction target place 1- same state; 2 - interstate; 3-with exterior. Exist some cases where is necessary force this situation like when buyer from another state buy something in loco, the address are from different states, but transaction no.  Identificador de Local de destino da operação, na opção AUTOMATIC endereços da Companhia e da entidade destino são analisados para saber se é uma operação dentro do mesmo estado, interestadual ou com o exterior. Há situações onde é necessário forçar este indicador como por exemplo  Quando uma pessoa com endereço em outro estado, compra uma mercadoria de forma presencial, é uma operação interna apesar dos endereços dos envolvidos estarem em estados distintos. - 0 # AUTOMATIC - DEFAULT - 1 # Interna; - 2 # Interestadual; - 3 # Exterior) 

        :param id_dest: The id_dest of this HeaderForGoods.
        :type: int
        """

        self._id_dest = id_dest

    @property
    def ind_pres(self):
        """
        Gets the ind_pres of this HeaderForGoods.
        Presence indicator - '0' # Not applicable - '1' # Presential; - '2' # Remote, internet; - '3' # Remote, phone; - '4' # NFC-e home delivery; - '9' # Remote, others 

        :return: The ind_pres of this HeaderForGoods.
        :rtype: str
        """
        return self._ind_pres

    @ind_pres.setter
    def ind_pres(self, ind_pres):
        """
        Sets the ind_pres of this HeaderForGoods.
        Presence indicator - '0' # Not applicable - '1' # Presential; - '2' # Remote, internet; - '3' # Remote, phone; - '4' # NFC-e home delivery; - '9' # Remote, others 

        :param ind_pres: The ind_pres of this HeaderForGoods.
        :type: str
        """
        allowed_values = ["0", "1", "2", "3", "4", "9"]
        if ind_pres not in allowed_values:
            raise ValueError(
                "Invalid value for `ind_pres` ({0}), must be one of {1}"
                .format(ind_pres, allowed_values)
            )

        self._ind_pres = ind_pres

    @property
    def invoice_number(self):
        """
        Gets the invoice_number of this HeaderForGoods.
        Invoice number, sequential unique by invoice serial (Número da nota fiscal)

        :return: The invoice_number of this HeaderForGoods.
        :rtype: int
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """
        Sets the invoice_number of this HeaderForGoods.
        Invoice number, sequential unique by invoice serial (Número da nota fiscal)

        :param invoice_number: The invoice_number of this HeaderForGoods.
        :type: int
        """
        if invoice_number is None:
            raise ValueError("Invalid value for `invoice_number`, must not be `None`")

        self._invoice_number = invoice_number

    @property
    def invoice_serial(self):
        """
        Gets the invoice_serial of this HeaderForGoods.
        Invoice number, sequential unique by invoice serial (Número da nota fiscal) 

        :return: The invoice_serial of this HeaderForGoods.
        :rtype: int
        """
        return self._invoice_serial

    @invoice_serial.setter
    def invoice_serial(self, invoice_serial):
        """
        Sets the invoice_serial of this HeaderForGoods.
        Invoice number, sequential unique by invoice serial (Número da nota fiscal) 

        :param invoice_serial: The invoice_serial of this HeaderForGoods.
        :type: int
        """
        if invoice_serial is None:
            raise ValueError("Invalid value for `invoice_serial`, must not be `None`")

        self._invoice_serial = invoice_serial

    @property
    def default_locations(self):
        """
        Gets the default_locations of this HeaderForGoods.

        :return: The default_locations of this HeaderForGoods.
        :rtype: DefaultLocations
        """
        return self._default_locations

    @default_locations.setter
    def default_locations(self, default_locations):
        """
        Sets the default_locations of this HeaderForGoods.

        :param default_locations: The default_locations of this HeaderForGoods.
        :type: DefaultLocations
        """

        self._default_locations = default_locations

    @property
    def transport(self):
        """
        Gets the transport of this HeaderForGoods.
        Shipment

        :return: The transport of this HeaderForGoods.
        :rtype: Transport
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """
        Sets the transport of this HeaderForGoods.
        Shipment

        :param transport: The transport of this HeaderForGoods.
        :type: Transport
        """

        self._transport = transport

    @property
    def nf_ref(self):
        """
        Gets the nf_ref of this HeaderForGoods.
        Transactions or other invoices referenced

        :return: The nf_ref of this HeaderForGoods.
        :rtype: list[NRef]
        """
        return self._nf_ref

    @nf_ref.setter
    def nf_ref(self, nf_ref):
        """
        Sets the nf_ref of this HeaderForGoods.
        Transactions or other invoices referenced

        :param nf_ref: The nf_ref of this HeaderForGoods.
        :type: list[NRef]
        """

        self._nf_ref = nf_ref

    @property
    def payment(self):
        """
        Gets the payment of this HeaderForGoods.

        :return: The payment of this HeaderForGoods.
        :rtype: Payment
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """
        Sets the payment of this HeaderForGoods.

        :param payment: The payment of this HeaderForGoods.
        :type: Payment
        """
        if payment is None:
            raise ValueError("Invalid value for `payment`, must not be `None`")

        self._payment = payment

    @property
    def purchase_info(self):
        """
        Gets the purchase_info of this HeaderForGoods.

        :return: The purchase_info of this HeaderForGoods.
        :rtype: PurchaseInfo
        """
        return self._purchase_info

    @purchase_info.setter
    def purchase_info(self, purchase_info):
        """
        Sets the purchase_info of this HeaderForGoods.

        :param purchase_info: The purchase_info of this HeaderForGoods.
        :type: PurchaseInfo
        """

        self._purchase_info = purchase_info

    @property
    def export(self):
        """
        Gets the export of this HeaderForGoods.

        :return: The export of this HeaderForGoods.
        :rtype: ExportInfo
        """
        return self._export

    @export.setter
    def export(self, export):
        """
        Sets the export of this HeaderForGoods.

        :param export: The export of this HeaderForGoods.
        :type: ExportInfo
        """

        self._export = export

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
