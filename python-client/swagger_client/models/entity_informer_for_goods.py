# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EntityInformerForGoods(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type=None, tax_regime=None, federal_tax_regime=None, city_code=None, address=None, details=None, icms_tax_payer=None):
        """
        EntityInformerForGoods - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'EntityType',
            'tax_regime': 'FederalTaxRegime',
            'federal_tax_regime': 'EntityInformerForGoodsFederalTaxRegime',
            'city_code': 'str',
            'address': 'Address',
            'details': 'object',
            'icms_tax_payer': 'bool'
        }

        self.attribute_map = {
            'type': 'type',
            'tax_regime': 'taxRegime',
            'federal_tax_regime': 'federalTaxRegime',
            'city_code': 'cityCode',
            'address': 'address',
            'details': 'details',
            'icms_tax_payer': 'icmsTaxPayer'
        }

        self._type = type
        self._tax_regime = tax_regime
        self._federal_tax_regime = federal_tax_regime
        self._city_code = city_code
        self._address = address
        self._details = details
        self._icms_tax_payer = icms_tax_payer

    @property
    def type(self):
        """
        Gets the type of this EntityInformerForGoods.

        :return: The type of this EntityInformerForGoods.
        :rtype: EntityType
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this EntityInformerForGoods.

        :param type: The type of this EntityInformerForGoods.
        :type: EntityType
        """

        self._type = type

    @property
    def tax_regime(self):
        """
        Gets the tax_regime of this EntityInformerForGoods.

        :return: The tax_regime of this EntityInformerForGoods.
        :rtype: FederalTaxRegime
        """
        return self._tax_regime

    @tax_regime.setter
    def tax_regime(self, tax_regime):
        """
        Sets the tax_regime of this EntityInformerForGoods.

        :param tax_regime: The tax_regime of this EntityInformerForGoods.
        :type: FederalTaxRegime
        """

        self._tax_regime = tax_regime

    @property
    def federal_tax_regime(self):
        """
        Gets the federal_tax_regime of this EntityInformerForGoods.

        :return: The federal_tax_regime of this EntityInformerForGoods.
        :rtype: EntityInformerForGoodsFederalTaxRegime
        """
        return self._federal_tax_regime

    @federal_tax_regime.setter
    def federal_tax_regime(self, federal_tax_regime):
        """
        Sets the federal_tax_regime of this EntityInformerForGoods.

        :param federal_tax_regime: The federal_tax_regime of this EntityInformerForGoods.
        :type: EntityInformerForGoodsFederalTaxRegime
        """

        self._federal_tax_regime = federal_tax_regime

    @property
    def city_code(self):
        """
        Gets the city_code of this EntityInformerForGoods.

        :return: The city_code of this EntityInformerForGoods.
        :rtype: str
        """
        return self._city_code

    @city_code.setter
    def city_code(self, city_code):
        """
        Sets the city_code of this EntityInformerForGoods.

        :param city_code: The city_code of this EntityInformerForGoods.
        :type: str
        """

        self._city_code = city_code

    @property
    def address(self):
        """
        Gets the address of this EntityInformerForGoods.

        :return: The address of this EntityInformerForGoods.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this EntityInformerForGoods.

        :param address: The address of this EntityInformerForGoods.
        :type: Address
        """

        self._address = address

    @property
    def details(self):
        """
        Gets the details of this EntityInformerForGoods.

        :return: The details of this EntityInformerForGoods.
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this EntityInformerForGoods.

        :param details: The details of this EntityInformerForGoods.
        :type: object
        """

        self._details = details

    @property
    def icms_tax_payer(self):
        """
        Gets the icms_tax_payer of this EntityInformerForGoods.

        :return: The icms_tax_payer of this EntityInformerForGoods.
        :rtype: bool
        """
        return self._icms_tax_payer

    @icms_tax_payer.setter
    def icms_tax_payer(self, icms_tax_payer):
        """
        Sets the icms_tax_payer of this EntityInformerForGoods.

        :param icms_tax_payer: The icms_tax_payer of this EntityInformerForGoods.
        :type: bool
        """

        self._icms_tax_payer = icms_tax_payer

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
