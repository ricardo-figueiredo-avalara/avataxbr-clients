# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EntityLocation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, street=None, neighborhood=None, zipcode=None, city_code=None, city_name=None, state=None, country_code='0', country='BRA'):
        """
        EntityLocation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'street': 'str',
            'neighborhood': 'str',
            'zipcode': 'str',
            'city_code': 'str',
            'city_name': 'str',
            'state': 'StateEnum',
            'country_code': 'str',
            'country': 'str'
        }

        self.attribute_map = {
            'street': 'street',
            'neighborhood': 'neighborhood',
            'zipcode': 'zipcode',
            'city_code': 'cityCode',
            'city_name': 'cityName',
            'state': 'state',
            'country_code': 'countryCode',
            'country': 'country'
        }

        self._street = street
        self._neighborhood = neighborhood
        self._zipcode = zipcode
        self._city_code = city_code
        self._city_name = city_name
        self._state = state
        self._country_code = country_code
        self._country = country

    @property
    def street(self):
        """
        Gets the street of this EntityLocation.
        Street Name

        :return: The street of this EntityLocation.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """
        Sets the street of this EntityLocation.
        Street Name

        :param street: The street of this EntityLocation.
        :type: str
        """
        if street is not None and len(street) > 60:
            raise ValueError("Invalid value for `street`, length must be less than or equal to `60`")

        self._street = street

    @property
    def neighborhood(self):
        """
        Gets the neighborhood of this EntityLocation.
        Neighborhood Name

        :return: The neighborhood of this EntityLocation.
        :rtype: str
        """
        return self._neighborhood

    @neighborhood.setter
    def neighborhood(self, neighborhood):
        """
        Sets the neighborhood of this EntityLocation.
        Neighborhood Name

        :param neighborhood: The neighborhood of this EntityLocation.
        :type: str
        """
        if neighborhood is not None and len(neighborhood) > 60:
            raise ValueError("Invalid value for `neighborhood`, length must be less than or equal to `60`")

        self._neighborhood = neighborhood

    @property
    def zipcode(self):
        """
        Gets the zipcode of this EntityLocation.
        Brazilian Zip Code

        :return: The zipcode of this EntityLocation.
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """
        Sets the zipcode of this EntityLocation.
        Brazilian Zip Code

        :param zipcode: The zipcode of this EntityLocation.
        :type: str
        """
        if zipcode is None:
            raise ValueError("Invalid value for `zipcode`, must not be `None`")
        if zipcode is not None and not re.search('^(\\d{8}|\\d{5}\\-\\d{3})$', zipcode):
            raise ValueError("Invalid value for `zipcode`, must be a follow pattern or equal to `/^(\\d{8}|\\d{5}\\-\\d{3})$/`")

        self._zipcode = zipcode

    @property
    def city_code(self):
        """
        Gets the city_code of this EntityLocation.
        City Code (IBGE)

        :return: The city_code of this EntityLocation.
        :rtype: str
        """
        return self._city_code

    @city_code.setter
    def city_code(self, city_code):
        """
        Sets the city_code of this EntityLocation.
        City Code (IBGE)

        :param city_code: The city_code of this EntityLocation.
        :type: str
        """
        if city_code is not None and not re.search('^(\\d{7})$', city_code):
            raise ValueError("Invalid value for `city_code`, must be a follow pattern or equal to `/^(\\d{7})$/`")

        self._city_code = city_code

    @property
    def city_name(self):
        """
        Gets the city_name of this EntityLocation.
        City Name

        :return: The city_name of this EntityLocation.
        :rtype: str
        """
        return self._city_name

    @city_name.setter
    def city_name(self, city_name):
        """
        Sets the city_name of this EntityLocation.
        City Name

        :param city_name: The city_name of this EntityLocation.
        :type: str
        """
        if city_name is not None and len(city_name) > 60:
            raise ValueError("Invalid value for `city_name`, length must be less than or equal to `60`")

        self._city_name = city_name

    @property
    def state(self):
        """
        Gets the state of this EntityLocation.

        :return: The state of this EntityLocation.
        :rtype: StateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this EntityLocation.

        :param state: The state of this EntityLocation.
        :type: StateEnum
        """

        self._state = state

    @property
    def country_code(self):
        """
        Gets the country_code of this EntityLocation.
        Country Code

        :return: The country_code of this EntityLocation.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this EntityLocation.
        Country Code

        :param country_code: The country_code of this EntityLocation.
        :type: str
        """
        if country_code is not None and not re.search('[0-9]{1,4}', country_code):
            raise ValueError("Invalid value for `country_code`, must be a follow pattern or equal to `/[0-9]{1,4}/`")

        self._country_code = country_code

    @property
    def country(self):
        """
        Gets the country of this EntityLocation.
        Use ISO 3166-1 alpha-3 codes

        :return: The country of this EntityLocation.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this EntityLocation.
        Use ISO 3166-1 alpha-3 codes

        :param country: The country of this EntityLocation.
        :type: str
        """
        if country is not None and len(country) > 3:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `3`")
        if country is not None and not re.search('^([A-Z]{3})$', country):
            raise ValueError("Invalid value for `country`, must be a follow pattern or equal to `/^([A-Z]{3})$/`")

        self._country = country

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
