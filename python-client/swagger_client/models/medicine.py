# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Medicine(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, lote_number=None, lote_quantity=None, manufactoty_date=None, expiration_date=None, max_value_to_end_user=None):
        """
        Medicine - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'lote_number': 'str',
            'lote_quantity': 'float',
            'manufactoty_date': 'date',
            'expiration_date': 'date',
            'max_value_to_end_user': 'float'
        }

        self.attribute_map = {
            'lote_number': 'loteNumber',
            'lote_quantity': 'loteQuantity',
            'manufactoty_date': 'manufactotyDate',
            'expiration_date': 'expirationDate',
            'max_value_to_end_user': 'maxValueToEndUser'
        }

        self._lote_number = lote_number
        self._lote_quantity = lote_quantity
        self._manufactoty_date = manufactoty_date
        self._expiration_date = expiration_date
        self._max_value_to_end_user = max_value_to_end_user

    @property
    def lote_number(self):
        """
        Gets the lote_number of this Medicine.

        :return: The lote_number of this Medicine.
        :rtype: str
        """
        return self._lote_number

    @lote_number.setter
    def lote_number(self, lote_number):
        """
        Sets the lote_number of this Medicine.

        :param lote_number: The lote_number of this Medicine.
        :type: str
        """
        if lote_number is None:
            raise ValueError("Invalid value for `lote_number`, must not be `None`")
        if lote_number is not None and len(lote_number) > 20:
            raise ValueError("Invalid value for `lote_number`, length must be less than or equal to `20`")

        self._lote_number = lote_number

    @property
    def lote_quantity(self):
        """
        Gets the lote_quantity of this Medicine.
        This is a decimal type with 11 digits including 3 decimal positions.

        :return: The lote_quantity of this Medicine.
        :rtype: float
        """
        return self._lote_quantity

    @lote_quantity.setter
    def lote_quantity(self, lote_quantity):
        """
        Sets the lote_quantity of this Medicine.
        This is a decimal type with 11 digits including 3 decimal positions.

        :param lote_quantity: The lote_quantity of this Medicine.
        :type: float
        """
        if lote_quantity is None:
            raise ValueError("Invalid value for `lote_quantity`, must not be `None`")

        self._lote_quantity = lote_quantity

    @property
    def manufactoty_date(self):
        """
        Gets the manufactoty_date of this Medicine.

        :return: The manufactoty_date of this Medicine.
        :rtype: date
        """
        return self._manufactoty_date

    @manufactoty_date.setter
    def manufactoty_date(self, manufactoty_date):
        """
        Sets the manufactoty_date of this Medicine.

        :param manufactoty_date: The manufactoty_date of this Medicine.
        :type: date
        """
        if manufactoty_date is None:
            raise ValueError("Invalid value for `manufactoty_date`, must not be `None`")

        self._manufactoty_date = manufactoty_date

    @property
    def expiration_date(self):
        """
        Gets the expiration_date of this Medicine.

        :return: The expiration_date of this Medicine.
        :rtype: date
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """
        Sets the expiration_date of this Medicine.

        :param expiration_date: The expiration_date of this Medicine.
        :type: date
        """
        if expiration_date is None:
            raise ValueError("Invalid value for `expiration_date`, must not be `None`")

        self._expiration_date = expiration_date

    @property
    def max_value_to_end_user(self):
        """
        Gets the max_value_to_end_user of this Medicine.
        This is a decimal type with 15 digits including 2 decimal positions.  Max value to end user.

        :return: The max_value_to_end_user of this Medicine.
        :rtype: float
        """
        return self._max_value_to_end_user

    @max_value_to_end_user.setter
    def max_value_to_end_user(self, max_value_to_end_user):
        """
        Sets the max_value_to_end_user of this Medicine.
        This is a decimal type with 15 digits including 2 decimal positions.  Max value to end user.

        :param max_value_to_end_user: The max_value_to_end_user of this Medicine.
        :type: float
        """
        if max_value_to_end_user is None:
            raise ValueError("Invalid value for `max_value_to_end_user`, must not be `None`")

        self._max_value_to_end_user = max_value_to_end_user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
