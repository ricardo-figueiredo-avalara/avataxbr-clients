# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IssConfServiceListTaxRateIbpt(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, national_fed_tax=None, city_tax=None):
        """
        IssConfServiceListTaxRateIbpt - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'national_fed_tax': 'float',
            'city_tax': 'float'
        }

        self.attribute_map = {
            'national_fed_tax': 'nationalFedTax',
            'city_tax': 'cityTax'
        }

        self._national_fed_tax = national_fed_tax
        self._city_tax = city_tax

    @property
    def national_fed_tax(self):
        """
        Gets the national_fed_tax of this IssConfServiceListTaxRateIbpt.

        :return: The national_fed_tax of this IssConfServiceListTaxRateIbpt.
        :rtype: float
        """
        return self._national_fed_tax

    @national_fed_tax.setter
    def national_fed_tax(self, national_fed_tax):
        """
        Sets the national_fed_tax of this IssConfServiceListTaxRateIbpt.

        :param national_fed_tax: The national_fed_tax of this IssConfServiceListTaxRateIbpt.
        :type: float
        """

        self._national_fed_tax = national_fed_tax

    @property
    def city_tax(self):
        """
        Gets the city_tax of this IssConfServiceListTaxRateIbpt.

        :return: The city_tax of this IssConfServiceListTaxRateIbpt.
        :rtype: float
        """
        return self._city_tax

    @city_tax.setter
    def city_tax(self, city_tax):
        """
        Sets the city_tax of this IssConfServiceListTaxRateIbpt.

        :param city_tax: The city_tax of this IssConfServiceListTaxRateIbpt.
        :type: float
        """

        self._city_tax = city_tax

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
