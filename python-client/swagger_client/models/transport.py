# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Transport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, mod_freight=None, withhold_icms_transport=None, volumes=None, vehicle=None):
        """
        Transport - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'mod_freight': 'str',
            'withhold_icms_transport': 'bool',
            'volumes': 'list[TransportVolumes]',
            'vehicle': 'VehicleTransp'
        }

        self.attribute_map = {
            'mod_freight': 'modFreight',
            'withhold_icms_transport': 'withholdICMSTransport',
            'volumes': 'volumes',
            'vehicle': 'vehicle'
        }

        self._mod_freight = mod_freight
        self._withhold_icms_transport = withhold_icms_transport
        self._volumes = volumes
        self._vehicle = vehicle

    @property
    def mod_freight(self):
        """
        Gets the mod_freight of this Transport.
        Freight model  - 0 - CIF,  - 1 - FOB,  - 2 - Thrid party, - 9 - Free shipping when 9 - Free shipping, the fields below will be ignored if present - 'transporter' - 'withholdICMSTransport' - 'volumes' - 'vehicle' 

        :return: The mod_freight of this Transport.
        :rtype: str
        """
        return self._mod_freight

    @mod_freight.setter
    def mod_freight(self, mod_freight):
        """
        Sets the mod_freight of this Transport.
        Freight model  - 0 - CIF,  - 1 - FOB,  - 2 - Thrid party, - 9 - Free shipping when 9 - Free shipping, the fields below will be ignored if present - 'transporter' - 'withholdICMSTransport' - 'volumes' - 'vehicle' 

        :param mod_freight: The mod_freight of this Transport.
        :type: str
        """
        allowed_values = ["CIF", "FOB", "Thridparty", "FreeShipping"]
        if mod_freight not in allowed_values:
            raise ValueError(
                "Invalid value for `mod_freight` ({0}), must be one of {1}"
                .format(mod_freight, allowed_values)
            )

        self._mod_freight = mod_freight

    @property
    def withhold_icms_transport(self):
        """
        Gets the withhold_icms_transport of this Transport.
        Forces witholding of ICMS on transport amount (freight)

        :return: The withhold_icms_transport of this Transport.
        :rtype: bool
        """
        return self._withhold_icms_transport

    @withhold_icms_transport.setter
    def withhold_icms_transport(self, withhold_icms_transport):
        """
        Sets the withhold_icms_transport of this Transport.
        Forces witholding of ICMS on transport amount (freight)

        :param withhold_icms_transport: The withhold_icms_transport of this Transport.
        :type: bool
        """

        self._withhold_icms_transport = withhold_icms_transport

    @property
    def volumes(self):
        """
        Gets the volumes of this Transport.
        Packages

        :return: The volumes of this Transport.
        :rtype: list[TransportVolumes]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """
        Sets the volumes of this Transport.
        Packages

        :param volumes: The volumes of this Transport.
        :type: list[TransportVolumes]
        """

        self._volumes = volumes

    @property
    def vehicle(self):
        """
        Gets the vehicle of this Transport.

        :return: The vehicle of this Transport.
        :rtype: VehicleTransp
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """
        Sets the vehicle of this Transport.

        :param vehicle: The vehicle of this Transport.
        :type: VehicleTransp
        """

        self._vehicle = vehicle

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
