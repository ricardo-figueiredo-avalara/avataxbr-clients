# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PayRecHeader(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, account_id=None, company_code=None, transaction_type=None, document_code=None, currency=None, transaction_date=None, tax_calculation_date=None, vendor_code=None, payment_mode=None):
        """
        PayRecHeader - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'account_id': 'str',
            'company_code': 'str',
            'transaction_type': 'str',
            'document_code': 'str',
            'currency': 'str',
            'transaction_date': 'date',
            'tax_calculation_date': 'date',
            'vendor_code': 'str',
            'payment_mode': 'str'
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'company_code': 'companyCode',
            'transaction_type': 'transactionType',
            'document_code': 'documentCode',
            'currency': 'currency',
            'transaction_date': 'transactionDate',
            'tax_calculation_date': 'taxCalculationDate',
            'vendor_code': 'vendorCode',
            'payment_mode': 'paymentMode'
        }

        self._account_id = account_id
        self._company_code = company_code
        self._transaction_type = transaction_type
        self._document_code = document_code
        self._currency = currency
        self._transaction_date = transaction_date
        self._tax_calculation_date = tax_calculation_date
        self._vendor_code = vendor_code
        self._payment_mode = payment_mode

    @property
    def account_id(self):
        """
        Gets the account_id of this PayRecHeader.
        This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode on the next line.

        :return: The account_id of this PayRecHeader.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this PayRecHeader.
        This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode on the next line.

        :param account_id: The account_id of this PayRecHeader.
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def company_code(self):
        """
        Gets the company_code of this PayRecHeader.
        This string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company

        :return: The company_code of this PayRecHeader.
        :rtype: str
        """
        return self._company_code

    @company_code.setter
    def company_code(self, company_code):
        """
        Sets the company_code of this PayRecHeader.
        This string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company

        :param company_code: The company_code of this PayRecHeader.
        :type: str
        """
        if company_code is None:
            raise ValueError("Invalid value for `company_code`, must not be `None`")
        if company_code is not None and len(company_code) > 60:
            raise ValueError("Invalid value for `company_code`, length must be less than or equal to `60`")

        self._company_code = company_code

    @property
    def transaction_type(self):
        """
        Gets the transaction_type of this PayRecHeader.
        This string indicates the type of transaction for which tax should be calculated. - 'Sale' - 'Purchase' - 'Payment' - 'Receipt' 

        :return: The transaction_type of this PayRecHeader.
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """
        Sets the transaction_type of this PayRecHeader.
        This string indicates the type of transaction for which tax should be calculated. - 'Sale' - 'Purchase' - 'Payment' - 'Receipt' 

        :param transaction_type: The transaction_type of this PayRecHeader.
        :type: str
        """
        allowed_values = ["Sale", "Purchase", "Payment", "Receipt"]
        if transaction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_type` ({0}), must be one of {1}"
                .format(transaction_type, allowed_values)
            )

        self._transaction_type = transaction_type

    @property
    def document_code(self):
        """
        Gets the document_code of this PayRecHeader.
        This string is a code maintained by the client application to uniquely identify a document in the client's systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc. When has this field, the transaction will be stored

        :return: The document_code of this PayRecHeader.
        :rtype: str
        """
        return self._document_code

    @document_code.setter
    def document_code(self, document_code):
        """
        Sets the document_code of this PayRecHeader.
        This string is a code maintained by the client application to uniquely identify a document in the client's systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc. When has this field, the transaction will be stored

        :param document_code: The document_code of this PayRecHeader.
        :type: str
        """

        self._document_code = document_code

    @property
    def currency(self):
        """
        Gets the currency of this PayRecHeader.
        currency code. 'BRL' for Brazilian Reais.

        :return: The currency of this PayRecHeader.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this PayRecHeader.
        currency code. 'BRL' for Brazilian Reais.

        :param currency: The currency of this PayRecHeader.
        :type: str
        """
        allowed_values = ["BRL"]
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def transaction_date(self):
        """
        Gets the transaction_date of this PayRecHeader.
        This string is the transaction date in ISO 8601 format (which may be different from the date the tax calculation is performed)

        :return: The transaction_date of this PayRecHeader.
        :rtype: date
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """
        Sets the transaction_date of this PayRecHeader.
        This string is the transaction date in ISO 8601 format (which may be different from the date the tax calculation is performed)

        :param transaction_date: The transaction_date of this PayRecHeader.
        :type: date
        """
        if transaction_date is None:
            raise ValueError("Invalid value for `transaction_date`, must not be `None`")

        self._transaction_date = transaction_date

    @property
    def tax_calculation_date(self):
        """
        Gets the tax_calculation_date of this PayRecHeader.
        accrual date, This string is the date, in ISO 8601 format, on which tax is to be calculated for this transaction (normally tax is calculated on the date the transaction is performed as captured in the transactionDate field). This is useful for layaways and other deferred transactions.

        :return: The tax_calculation_date of this PayRecHeader.
        :rtype: date
        """
        return self._tax_calculation_date

    @tax_calculation_date.setter
    def tax_calculation_date(self, tax_calculation_date):
        """
        Sets the tax_calculation_date of this PayRecHeader.
        accrual date, This string is the date, in ISO 8601 format, on which tax is to be calculated for this transaction (normally tax is calculated on the date the transaction is performed as captured in the transactionDate field). This is useful for layaways and other deferred transactions.

        :param tax_calculation_date: The tax_calculation_date of this PayRecHeader.
        :type: date
        """

        self._tax_calculation_date = tax_calculation_date

    @property
    def vendor_code(self):
        """
        Gets the vendor_code of this PayRecHeader.
        This string is a code maintained by the client application to uniquely identify the party with whom the company (identified by companyCode) is transacting. It is unique within the context of an Account.

        :return: The vendor_code of this PayRecHeader.
        :rtype: str
        """
        return self._vendor_code

    @vendor_code.setter
    def vendor_code(self, vendor_code):
        """
        Sets the vendor_code of this PayRecHeader.
        This string is a code maintained by the client application to uniquely identify the party with whom the company (identified by companyCode) is transacting. It is unique within the context of an Account.

        :param vendor_code: The vendor_code of this PayRecHeader.
        :type: str
        """
        if vendor_code is None:
            raise ValueError("Invalid value for `vendor_code`, must not be `None`")

        self._vendor_code = vendor_code

    @property
    def payment_mode(self):
        """
        Gets the payment_mode of this PayRecHeader.
        - 'CALCULATE' - 'ASIS' When ASIS, the transaction is stored without executing tax determination (no Calculation). 

        :return: The payment_mode of this PayRecHeader.
        :rtype: str
        """
        return self._payment_mode

    @payment_mode.setter
    def payment_mode(self, payment_mode):
        """
        Sets the payment_mode of this PayRecHeader.
        - 'CALCULATE' - 'ASIS' When ASIS, the transaction is stored without executing tax determination (no Calculation). 

        :param payment_mode: The payment_mode of this PayRecHeader.
        :type: str
        """
        allowed_values = ["CALCULATE", "ASIS"]
        if payment_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_mode` ({0}), must be one of {1}"
                .format(payment_mode, allowed_values)
            )

        self._payment_mode = payment_mode

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
