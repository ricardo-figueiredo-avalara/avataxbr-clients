# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ItemSimple(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, company_id=None, code=None, agast=None, description=None):
        """
        ItemSimple - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'company_id': 'str',
            'code': 'str',
            'agast': 'str',
            'description': 'str'
        }

        self.attribute_map = {
            'company_id': 'companyId',
            'code': 'code',
            'agast': 'agast',
            'description': 'description'
        }

        self._company_id = company_id
        self._code = code
        self._agast = agast
        self._description = description

    @property
    def company_id(self):
        """
        Gets the company_id of this ItemSimple.
        Company ID

        :return: The company_id of this ItemSimple.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """
        Sets the company_id of this ItemSimple.
        Company ID

        :param company_id: The company_id of this ItemSimple.
        :type: str
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")

        self._company_id = company_id

    @property
    def code(self):
        """
        Gets the code of this ItemSimple.
        ERP Code

        :return: The code of this ItemSimple.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this ItemSimple.
        ERP Code

        :param code: The code of this ItemSimple.
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")
        if code is not None and len(code) > 60:
            raise ValueError("Invalid value for `code`, length must be less than or equal to `60`")

        self._code = code

    @property
    def agast(self):
        """
        Gets the agast of this ItemSimple.
        Agast Code

        :return: The agast of this ItemSimple.
        :rtype: str
        """
        return self._agast

    @agast.setter
    def agast(self, agast):
        """
        Sets the agast of this ItemSimple.
        Agast Code

        :param agast: The agast of this ItemSimple.
        :type: str
        """
        if agast is None:
            raise ValueError("Invalid value for `agast`, must not be `None`")
        if agast is not None and len(agast) > 60:
            raise ValueError("Invalid value for `agast`, length must be less than or equal to `60`")

        self._agast = agast

    @property
    def description(self):
        """
        Gets the description of this ItemSimple.
        Item Description

        :return: The description of this ItemSimple.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ItemSimple.
        Item Description

        :param description: The description of this ItemSimple.
        :type: str
        """
        if description is not None and len(description) > 60:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `60`")

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
