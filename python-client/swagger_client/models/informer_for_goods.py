# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InformerForGoods(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, header=None, line=None, company=None, entity=None, emitter=None, receiver=None, transporter=None, csts=None, amount=None, discount=None, quantity=None, unit_price=None, freight_amount=None, insurance_amount=None, other_cost_amount=None, exempt_value=None):
        """
        InformerForGoods - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'header': 'HeaderForGoods',
            'line': 'LineForGoods',
            'company': 'EntityInformerForGoods',
            'entity': 'EntityInformerForGoods',
            'emitter': 'EntityInformerForGoods',
            'receiver': 'EntityInformerForGoods',
            'transporter': 'EntityInformerForGoods',
            'csts': 'InformerForGoodsCsts',
            'amount': 'float',
            'discount': 'float',
            'quantity': 'float',
            'unit_price': 'float',
            'freight_amount': 'float',
            'insurance_amount': 'float',
            'other_cost_amount': 'float',
            'exempt_value': 'float'
        }

        self.attribute_map = {
            'header': 'header',
            'line': 'line',
            'company': '_company',
            'entity': '_entity',
            'emitter': 'emitter',
            'receiver': 'receiver',
            'transporter': 'transporter',
            'csts': 'csts',
            'amount': 'amount',
            'discount': 'discount',
            'quantity': 'quantity',
            'unit_price': 'unitPrice',
            'freight_amount': 'freightAmount',
            'insurance_amount': 'insuranceAmount',
            'other_cost_amount': 'otherCostAmount',
            'exempt_value': 'exemptValue'
        }

        self._header = header
        self._line = line
        self._company = company
        self._entity = entity
        self._emitter = emitter
        self._receiver = receiver
        self._transporter = transporter
        self._csts = csts
        self._amount = amount
        self._discount = discount
        self._quantity = quantity
        self._unit_price = unit_price
        self._freight_amount = freight_amount
        self._insurance_amount = insurance_amount
        self._other_cost_amount = other_cost_amount
        self._exempt_value = exempt_value

    @property
    def header(self):
        """
        Gets the header of this InformerForGoods.

        :return: The header of this InformerForGoods.
        :rtype: HeaderForGoods
        """
        return self._header

    @header.setter
    def header(self, header):
        """
        Sets the header of this InformerForGoods.

        :param header: The header of this InformerForGoods.
        :type: HeaderForGoods
        """

        self._header = header

    @property
    def line(self):
        """
        Gets the line of this InformerForGoods.

        :return: The line of this InformerForGoods.
        :rtype: LineForGoods
        """
        return self._line

    @line.setter
    def line(self, line):
        """
        Sets the line of this InformerForGoods.

        :param line: The line of this InformerForGoods.
        :type: LineForGoods
        """

        self._line = line

    @property
    def company(self):
        """
        Gets the company of this InformerForGoods.

        :return: The company of this InformerForGoods.
        :rtype: EntityInformerForGoods
        """
        return self._company

    @company.setter
    def company(self, company):
        """
        Sets the company of this InformerForGoods.

        :param company: The company of this InformerForGoods.
        :type: EntityInformerForGoods
        """

        self._company = company

    @property
    def entity(self):
        """
        Gets the entity of this InformerForGoods.

        :return: The entity of this InformerForGoods.
        :rtype: EntityInformerForGoods
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """
        Sets the entity of this InformerForGoods.

        :param entity: The entity of this InformerForGoods.
        :type: EntityInformerForGoods
        """

        self._entity = entity

    @property
    def emitter(self):
        """
        Gets the emitter of this InformerForGoods.

        :return: The emitter of this InformerForGoods.
        :rtype: EntityInformerForGoods
        """
        return self._emitter

    @emitter.setter
    def emitter(self, emitter):
        """
        Sets the emitter of this InformerForGoods.

        :param emitter: The emitter of this InformerForGoods.
        :type: EntityInformerForGoods
        """

        self._emitter = emitter

    @property
    def receiver(self):
        """
        Gets the receiver of this InformerForGoods.

        :return: The receiver of this InformerForGoods.
        :rtype: EntityInformerForGoods
        """
        return self._receiver

    @receiver.setter
    def receiver(self, receiver):
        """
        Sets the receiver of this InformerForGoods.

        :param receiver: The receiver of this InformerForGoods.
        :type: EntityInformerForGoods
        """

        self._receiver = receiver

    @property
    def transporter(self):
        """
        Gets the transporter of this InformerForGoods.

        :return: The transporter of this InformerForGoods.
        :rtype: EntityInformerForGoods
        """
        return self._transporter

    @transporter.setter
    def transporter(self, transporter):
        """
        Sets the transporter of this InformerForGoods.

        :param transporter: The transporter of this InformerForGoods.
        :type: EntityInformerForGoods
        """

        self._transporter = transporter

    @property
    def csts(self):
        """
        Gets the csts of this InformerForGoods.

        :return: The csts of this InformerForGoods.
        :rtype: InformerForGoodsCsts
        """
        return self._csts

    @csts.setter
    def csts(self, csts):
        """
        Sets the csts of this InformerForGoods.

        :param csts: The csts of this InformerForGoods.
        :type: InformerForGoodsCsts
        """

        self._csts = csts

    @property
    def amount(self):
        """
        Gets the amount of this InformerForGoods.

        :return: The amount of this InformerForGoods.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this InformerForGoods.

        :param amount: The amount of this InformerForGoods.
        :type: float
        """

        self._amount = amount

    @property
    def discount(self):
        """
        Gets the discount of this InformerForGoods.

        :return: The discount of this InformerForGoods.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """
        Sets the discount of this InformerForGoods.

        :param discount: The discount of this InformerForGoods.
        :type: float
        """

        self._discount = discount

    @property
    def quantity(self):
        """
        Gets the quantity of this InformerForGoods.

        :return: The quantity of this InformerForGoods.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this InformerForGoods.

        :param quantity: The quantity of this InformerForGoods.
        :type: float
        """

        self._quantity = quantity

    @property
    def unit_price(self):
        """
        Gets the unit_price of this InformerForGoods.

        :return: The unit_price of this InformerForGoods.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """
        Sets the unit_price of this InformerForGoods.

        :param unit_price: The unit_price of this InformerForGoods.
        :type: float
        """

        self._unit_price = unit_price

    @property
    def freight_amount(self):
        """
        Gets the freight_amount of this InformerForGoods.

        :return: The freight_amount of this InformerForGoods.
        :rtype: float
        """
        return self._freight_amount

    @freight_amount.setter
    def freight_amount(self, freight_amount):
        """
        Sets the freight_amount of this InformerForGoods.

        :param freight_amount: The freight_amount of this InformerForGoods.
        :type: float
        """

        self._freight_amount = freight_amount

    @property
    def insurance_amount(self):
        """
        Gets the insurance_amount of this InformerForGoods.

        :return: The insurance_amount of this InformerForGoods.
        :rtype: float
        """
        return self._insurance_amount

    @insurance_amount.setter
    def insurance_amount(self, insurance_amount):
        """
        Sets the insurance_amount of this InformerForGoods.

        :param insurance_amount: The insurance_amount of this InformerForGoods.
        :type: float
        """

        self._insurance_amount = insurance_amount

    @property
    def other_cost_amount(self):
        """
        Gets the other_cost_amount of this InformerForGoods.

        :return: The other_cost_amount of this InformerForGoods.
        :rtype: float
        """
        return self._other_cost_amount

    @other_cost_amount.setter
    def other_cost_amount(self, other_cost_amount):
        """
        Sets the other_cost_amount of this InformerForGoods.

        :param other_cost_amount: The other_cost_amount of this InformerForGoods.
        :type: float
        """

        self._other_cost_amount = other_cost_amount

    @property
    def exempt_value(self):
        """
        Gets the exempt_value of this InformerForGoods.

        :return: The exempt_value of this InformerForGoods.
        :rtype: float
        """
        return self._exempt_value

    @exempt_value.setter
    def exempt_value(self, exempt_value):
        """
        Sets the exempt_value of this InformerForGoods.

        :param exempt_value: The exempt_value of this InformerForGoods.
        :type: float
        """

        self._exempt_value = exempt_value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
