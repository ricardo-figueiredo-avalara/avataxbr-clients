# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PurchaseLinesIn(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, line_code=None, item_code=None, number_of_items=1.0, line_amount=None, item_description=None, line_taxed_discount=None, line_untaxed_discount=None, use_type=None, tax_deductions=None):
        """
        PurchaseLinesIn - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'line_code': 'int',
            'item_code': 'str',
            'number_of_items': 'float',
            'line_amount': 'float',
            'item_description': 'str',
            'line_taxed_discount': 'float',
            'line_untaxed_discount': 'float',
            'use_type': 'str',
            'tax_deductions': 'SalesLinesOutTaxDeductions'
        }

        self.attribute_map = {
            'line_code': 'lineCode',
            'item_code': 'itemCode',
            'number_of_items': 'numberOfItems',
            'line_amount': 'lineAmount',
            'item_description': 'itemDescription',
            'line_taxed_discount': 'lineTaxedDiscount',
            'line_untaxed_discount': 'lineUntaxedDiscount',
            'use_type': 'useType',
            'tax_deductions': 'taxDeductions'
        }

        self._line_code = line_code
        self._item_code = item_code
        self._number_of_items = number_of_items
        self._line_amount = line_amount
        self._item_description = item_description
        self._line_taxed_discount = line_taxed_discount
        self._line_untaxed_discount = line_untaxed_discount
        self._use_type = use_type
        self._tax_deductions = tax_deductions

    @property
    def line_code(self):
        """
        Gets the line_code of this PurchaseLinesIn.
        This string is a unique identifier for this line in the transaction

        :return: The line_code of this PurchaseLinesIn.
        :rtype: int
        """
        return self._line_code

    @line_code.setter
    def line_code(self, line_code):
        """
        Sets the line_code of this PurchaseLinesIn.
        This string is a unique identifier for this line in the transaction

        :param line_code: The line_code of this PurchaseLinesIn.
        :type: int
        """

        self._line_code = line_code

    @property
    def item_code(self):
        """
        Gets the item_code of this PurchaseLinesIn.
        This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states.

        :return: The item_code of this PurchaseLinesIn.
        :rtype: str
        """
        return self._item_code

    @item_code.setter
    def item_code(self, item_code):
        """
        Sets the item_code of this PurchaseLinesIn.
        This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states.

        :param item_code: The item_code of this PurchaseLinesIn.
        :type: str
        """
        if item_code is None:
            raise ValueError("Invalid value for `item_code`, must not be `None`")

        self._item_code = item_code

    @property
    def number_of_items(self):
        """
        Gets the number_of_items of this PurchaseLinesIn.
        This decimal captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1

        :return: The number_of_items of this PurchaseLinesIn.
        :rtype: float
        """
        return self._number_of_items

    @number_of_items.setter
    def number_of_items(self, number_of_items):
        """
        Sets the number_of_items of this PurchaseLinesIn.
        This decimal captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1

        :param number_of_items: The number_of_items of this PurchaseLinesIn.
        :type: float
        """

        self._number_of_items = number_of_items

    @property
    def line_amount(self):
        """
        Gets the line_amount of this PurchaseLinesIn.
        This decimal captures the total cost of this line. In its simplest form lineAmount = (item price * numberOfItems).

        :return: The line_amount of this PurchaseLinesIn.
        :rtype: float
        """
        return self._line_amount

    @line_amount.setter
    def line_amount(self, line_amount):
        """
        Sets the line_amount of this PurchaseLinesIn.
        This decimal captures the total cost of this line. In its simplest form lineAmount = (item price * numberOfItems).

        :param line_amount: The line_amount of this PurchaseLinesIn.
        :type: float
        """

        self._line_amount = line_amount

    @property
    def item_description(self):
        """
        Gets the item_description of this PurchaseLinesIn.
        This string captures the description of the item represented by this line, will be used LC 116

        :return: The item_description of this PurchaseLinesIn.
        :rtype: str
        """
        return self._item_description

    @item_description.setter
    def item_description(self, item_description):
        """
        Sets the item_description of this PurchaseLinesIn.
        This string captures the description of the item represented by this line, will be used LC 116

        :param item_description: The item_description of this PurchaseLinesIn.
        :type: str
        """

        self._item_description = item_description

    @property
    def line_taxed_discount(self):
        """
        Gets the line_taxed_discount of this PurchaseLinesIn.
        Conditional discount

        :return: The line_taxed_discount of this PurchaseLinesIn.
        :rtype: float
        """
        return self._line_taxed_discount

    @line_taxed_discount.setter
    def line_taxed_discount(self, line_taxed_discount):
        """
        Sets the line_taxed_discount of this PurchaseLinesIn.
        Conditional discount

        :param line_taxed_discount: The line_taxed_discount of this PurchaseLinesIn.
        :type: float
        """

        self._line_taxed_discount = line_taxed_discount

    @property
    def line_untaxed_discount(self):
        """
        Gets the line_untaxed_discount of this PurchaseLinesIn.
        Unconditional discount

        :return: The line_untaxed_discount of this PurchaseLinesIn.
        :rtype: float
        """
        return self._line_untaxed_discount

    @line_untaxed_discount.setter
    def line_untaxed_discount(self, line_untaxed_discount):
        """
        Sets the line_untaxed_discount of this PurchaseLinesIn.
        Unconditional discount

        :param line_untaxed_discount: The line_untaxed_discount of this PurchaseLinesIn.
        :type: float
        """

        self._line_untaxed_discount = line_untaxed_discount

    @property
    def use_type(self):
        """
        Gets the use_type of this PurchaseLinesIn.
        Type of entity use associated with this line - 'resale' - 'production' - 'use or consumption' - 'fixed assets' 

        :return: The use_type of this PurchaseLinesIn.
        :rtype: str
        """
        return self._use_type

    @use_type.setter
    def use_type(self, use_type):
        """
        Sets the use_type of this PurchaseLinesIn.
        Type of entity use associated with this line - 'resale' - 'production' - 'use or consumption' - 'fixed assets' 

        :param use_type: The use_type of this PurchaseLinesIn.
        :type: str
        """
        allowed_values = ["resale", "production", "use or consumption", "fixed assets"]
        if use_type not in allowed_values:
            raise ValueError(
                "Invalid value for `use_type` ({0}), must be one of {1}"
                .format(use_type, allowed_values)
            )

        self._use_type = use_type

    @property
    def tax_deductions(self):
        """
        Gets the tax_deductions of this PurchaseLinesIn.

        :return: The tax_deductions of this PurchaseLinesIn.
        :rtype: SalesLinesOutTaxDeductions
        """
        return self._tax_deductions

    @tax_deductions.setter
    def tax_deductions(self, tax_deductions):
        """
        Sets the tax_deductions of this PurchaseLinesIn.

        :param tax_deductions: The tax_deductions of this PurchaseLinesIn.
        :type: SalesLinesOutTaxDeductions
        """

        self._tax_deductions = tax_deductions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
