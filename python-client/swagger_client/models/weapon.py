# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Weapon(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, weapon_restriction_type=None, serie_number=None, gun_barrel_serie_number=None, weapon_description=None):
        """
        Weapon - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'weapon_restriction_type': 'str',
            'serie_number': 'str',
            'gun_barrel_serie_number': 'str',
            'weapon_description': 'str'
        }

        self.attribute_map = {
            'weapon_restriction_type': 'weaponRestrictionType',
            'serie_number': 'serieNumber',
            'gun_barrel_serie_number': 'gunBarrelSerieNumber',
            'weapon_description': 'weaponDescription'
        }

        self._weapon_restriction_type = weapon_restriction_type
        self._serie_number = serie_number
        self._gun_barrel_serie_number = gun_barrel_serie_number
        self._weapon_description = weapon_description

    @property
    def weapon_restriction_type(self):
        """
        Gets the weapon_restriction_type of this Weapon.
        - '0' # restrict use - '1' # public use 

        :return: The weapon_restriction_type of this Weapon.
        :rtype: str
        """
        return self._weapon_restriction_type

    @weapon_restriction_type.setter
    def weapon_restriction_type(self, weapon_restriction_type):
        """
        Sets the weapon_restriction_type of this Weapon.
        - '0' # restrict use - '1' # public use 

        :param weapon_restriction_type: The weapon_restriction_type of this Weapon.
        :type: str
        """
        allowed_values = ["0", "1"]
        if weapon_restriction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `weapon_restriction_type` ({0}), must be one of {1}"
                .format(weapon_restriction_type, allowed_values)
            )

        self._weapon_restriction_type = weapon_restriction_type

    @property
    def serie_number(self):
        """
        Gets the serie_number of this Weapon.

        :return: The serie_number of this Weapon.
        :rtype: str
        """
        return self._serie_number

    @serie_number.setter
    def serie_number(self, serie_number):
        """
        Sets the serie_number of this Weapon.

        :param serie_number: The serie_number of this Weapon.
        :type: str
        """
        if serie_number is None:
            raise ValueError("Invalid value for `serie_number`, must not be `None`")
        if serie_number is not None and len(serie_number) > 15:
            raise ValueError("Invalid value for `serie_number`, length must be less than or equal to `15`")

        self._serie_number = serie_number

    @property
    def gun_barrel_serie_number(self):
        """
        Gets the gun_barrel_serie_number of this Weapon.
        Barrel's serial number. Número de série do cano 

        :return: The gun_barrel_serie_number of this Weapon.
        :rtype: str
        """
        return self._gun_barrel_serie_number

    @gun_barrel_serie_number.setter
    def gun_barrel_serie_number(self, gun_barrel_serie_number):
        """
        Sets the gun_barrel_serie_number of this Weapon.
        Barrel's serial number. Número de série do cano 

        :param gun_barrel_serie_number: The gun_barrel_serie_number of this Weapon.
        :type: str
        """
        if gun_barrel_serie_number is None:
            raise ValueError("Invalid value for `gun_barrel_serie_number`, must not be `None`")
        if gun_barrel_serie_number is not None and len(gun_barrel_serie_number) > 15:
            raise ValueError("Invalid value for `gun_barrel_serie_number`, length must be less than or equal to `15`")

        self._gun_barrel_serie_number = gun_barrel_serie_number

    @property
    def weapon_description(self):
        """
        Gets the weapon_description of this Weapon.
        weapon description

        :return: The weapon_description of this Weapon.
        :rtype: str
        """
        return self._weapon_description

    @weapon_description.setter
    def weapon_description(self, weapon_description):
        """
        Sets the weapon_description of this Weapon.
        weapon description

        :param weapon_description: The weapon_description of this Weapon.
        :type: str
        """
        if weapon_description is None:
            raise ValueError("Invalid value for `weapon_description`, must not be `None`")
        if weapon_description is not None and len(weapon_description) > 256:
            raise ValueError("Invalid value for `weapon_description`, length must be less than or equal to `256`")

        self._weapon_description = weapon_description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
