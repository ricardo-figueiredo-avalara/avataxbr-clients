# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FuelCide(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, base_calc_cide=None, rate_cide=None, value_cide=None):
        """
        FuelCide - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'base_calc_cide': 'float',
            'rate_cide': 'float',
            'value_cide': 'float'
        }

        self.attribute_map = {
            'base_calc_cide': 'baseCalcCIDE',
            'rate_cide': 'rateCIDE',
            'value_cide': 'valueCIDE'
        }

        self._base_calc_cide = base_calc_cide
        self._rate_cide = rate_cide
        self._value_cide = value_cide

    @property
    def base_calc_cide(self):
        """
        Gets the base_calc_cide of this FuelCide.
        percentage of natural gas (GLP), this decimal 12 integers and 0 to 4 decimals

        :return: The base_calc_cide of this FuelCide.
        :rtype: float
        """
        return self._base_calc_cide

    @base_calc_cide.setter
    def base_calc_cide(self, base_calc_cide):
        """
        Sets the base_calc_cide of this FuelCide.
        percentage of natural gas (GLP), this decimal 12 integers and 0 to 4 decimals

        :param base_calc_cide: The base_calc_cide of this FuelCide.
        :type: float
        """
        if base_calc_cide is None:
            raise ValueError("Invalid value for `base_calc_cide`, must not be `None`")

        self._base_calc_cide = base_calc_cide

    @property
    def rate_cide(self):
        """
        Gets the rate_cide of this FuelCide.
        percentage of natural gas (GLP), this decimal 11 integers and 0 to 4 decimals - R$

        :return: The rate_cide of this FuelCide.
        :rtype: float
        """
        return self._rate_cide

    @rate_cide.setter
    def rate_cide(self, rate_cide):
        """
        Sets the rate_cide of this FuelCide.
        percentage of natural gas (GLP), this decimal 11 integers and 0 to 4 decimals - R$

        :param rate_cide: The rate_cide of this FuelCide.
        :type: float
        """
        if rate_cide is None:
            raise ValueError("Invalid value for `rate_cide`, must not be `None`")

        self._rate_cide = rate_cide

    @property
    def value_cide(self):
        """
        Gets the value_cide of this FuelCide.
        percentage of natural gas (GLP), this decimal 13 integers and 2 decimals - R$

        :return: The value_cide of this FuelCide.
        :rtype: float
        """
        return self._value_cide

    @value_cide.setter
    def value_cide(self, value_cide):
        """
        Sets the value_cide of this FuelCide.
        percentage of natural gas (GLP), this decimal 13 integers and 2 decimals - R$

        :param value_cide: The value_cide of this FuelCide.
        :type: float
        """
        if value_cide is None:
            raise ValueError("Invalid value for `value_cide`, must not be `None`")

        self._value_cide = value_cide

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
