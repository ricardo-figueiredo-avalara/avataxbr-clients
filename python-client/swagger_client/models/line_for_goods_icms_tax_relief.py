# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LineForGoodsIcmsTaxRelief(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, reason_code=None, tax_base_discount=None, tax_amount=None):
        """
        LineForGoodsIcmsTaxRelief - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'reason_code': 'str',
            'tax_base_discount': 'float',
            'tax_amount': 'float'
        }

        self.attribute_map = {
            'reason_code': 'reasonCode',
            'tax_base_discount': 'taxBaseDiscount',
            'tax_amount': 'taxAmount'
        }

        self._reason_code = reason_code
        self._tax_base_discount = tax_base_discount
        self._tax_amount = tax_amount

    @property
    def reason_code(self):
        """
        Gets the reason_code of this LineForGoodsIcmsTaxRelief.
        When item transaction subject to desoneration, this is the reason code - '1' # Táxi; - '3' # Produtor Agropecuário; - '4' # Frotista/Locadora; - '5' # Diplomático/Consular; - '6' # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações); - '7' # SUFRAMA; - '8' # Venda a órgão Público; - '9' # Outros - '10' # Deficiente Condutor - '11' # Deficiente não condutor - '12' # Fomento agropecuário - '16' # Olimpíadas Rio 2016 

        :return: The reason_code of this LineForGoodsIcmsTaxRelief.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """
        Sets the reason_code of this LineForGoodsIcmsTaxRelief.
        When item transaction subject to desoneration, this is the reason code - '1' # Táxi; - '3' # Produtor Agropecuário; - '4' # Frotista/Locadora; - '5' # Diplomático/Consular; - '6' # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações); - '7' # SUFRAMA; - '8' # Venda a órgão Público; - '9' # Outros - '10' # Deficiente Condutor - '11' # Deficiente não condutor - '12' # Fomento agropecuário - '16' # Olimpíadas Rio 2016 

        :param reason_code: The reason_code of this LineForGoodsIcmsTaxRelief.
        :type: str
        """
        allowed_values = ["1", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "16"]
        if reason_code not in allowed_values:
            raise ValueError(
                "Invalid value for `reason_code` ({0}), must be one of {1}"
                .format(reason_code, allowed_values)
            )

        self._reason_code = reason_code

    @property
    def tax_base_discount(self):
        """
        Gets the tax_base_discount of this LineForGoodsIcmsTaxRelief.
        ICMS Tax base rate discount  (desconto na base do ICMS referetne a desoneração)

        :return: The tax_base_discount of this LineForGoodsIcmsTaxRelief.
        :rtype: float
        """
        return self._tax_base_discount

    @tax_base_discount.setter
    def tax_base_discount(self, tax_base_discount):
        """
        Sets the tax_base_discount of this LineForGoodsIcmsTaxRelief.
        ICMS Tax base rate discount  (desconto na base do ICMS referetne a desoneração)

        :param tax_base_discount: The tax_base_discount of this LineForGoodsIcmsTaxRelief.
        :type: float
        """

        self._tax_base_discount = tax_base_discount

    @property
    def tax_amount(self):
        """
        Gets the tax_amount of this LineForGoodsIcmsTaxRelief.
        Amount for Icms Relief (desoneração)

        :return: The tax_amount of this LineForGoodsIcmsTaxRelief.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """
        Sets the tax_amount of this LineForGoodsIcmsTaxRelief.
        Amount for Icms Relief (desoneração)

        :param tax_amount: The tax_amount of this LineForGoodsIcmsTaxRelief.
        :type: float
        """

        self._tax_amount = tax_amount

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
