# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Vehicle(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, tp_op=None, chassis_number=None, color_code=None, color_name=None, cv_power=None, cylinder_volum_cc=None, net_weight=None, gross_weight=None, serial_number=None, fuel_type=None, engine_number=None, cmt=None, length_between_axis=None, model_year=None, manufactory_year=None, paint_type=None, vehicle_renavam_type=None, specie_renavam_type=None, model_renavam_code=None, color_denatran_code=None, vin=None, vehicle_manufactory_status=None, max_occupants_quantity=None, restriction_type=None):
        """
        Vehicle - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'tp_op': 'int',
            'chassis_number': 'str',
            'color_code': 'str',
            'color_name': 'str',
            'cv_power': 'str',
            'cylinder_volum_cc': 'str',
            'net_weight': 'str',
            'gross_weight': 'str',
            'serial_number': 'str',
            'fuel_type': 'str',
            'engine_number': 'str',
            'cmt': 'str',
            'length_between_axis': 'str',
            'model_year': 'str',
            'manufactory_year': 'str',
            'paint_type': 'str',
            'vehicle_renavam_type': 'str',
            'specie_renavam_type': 'str',
            'model_renavam_code': 'str',
            'color_denatran_code': 'str',
            'vin': 'str',
            'vehicle_manufactory_status': 'str',
            'max_occupants_quantity': 'str',
            'restriction_type': 'str'
        }

        self.attribute_map = {
            'tp_op': 'tpOp',
            'chassis_number': 'chassisNumber',
            'color_code': 'colorCode',
            'color_name': 'colorName',
            'cv_power': 'cvPower',
            'cylinder_volum_cc': 'cylinderVolumCC',
            'net_weight': 'netWeight',
            'gross_weight': 'grossWeight',
            'serial_number': 'serialNumber',
            'fuel_type': 'fuelType',
            'engine_number': 'engineNumber',
            'cmt': 'cmt',
            'length_between_axis': 'lengthBetweenAxis',
            'model_year': 'modelYear',
            'manufactory_year': 'manufactoryYear',
            'paint_type': 'paintType',
            'vehicle_renavam_type': 'vehicleRENAVAMType',
            'specie_renavam_type': 'specieRENAVAMType',
            'model_renavam_code': 'modelRENAVAMCode',
            'color_denatran_code': 'colorDENATRANCode',
            'vin': 'vin',
            'vehicle_manufactory_status': 'vehicleManufactoryStatus',
            'max_occupants_quantity': 'maxOccupantsQuantity',
            'restriction_type': 'restrictionType'
        }

        self._tp_op = tp_op
        self._chassis_number = chassis_number
        self._color_code = color_code
        self._color_name = color_name
        self._cv_power = cv_power
        self._cylinder_volum_cc = cylinder_volum_cc
        self._net_weight = net_weight
        self._gross_weight = gross_weight
        self._serial_number = serial_number
        self._fuel_type = fuel_type
        self._engine_number = engine_number
        self._cmt = cmt
        self._length_between_axis = length_between_axis
        self._model_year = model_year
        self._manufactory_year = manufactory_year
        self._paint_type = paint_type
        self._vehicle_renavam_type = vehicle_renavam_type
        self._specie_renavam_type = specie_renavam_type
        self._model_renavam_code = model_renavam_code
        self._color_denatran_code = color_denatran_code
        self._vin = vin
        self._vehicle_manufactory_status = vehicle_manufactory_status
        self._max_occupants_quantity = max_occupants_quantity
        self._restriction_type = restriction_type

    @property
    def tp_op(self):
        """
        Gets the tp_op of this Vehicle.
        - 1 # Sales by car dealership - 2 # Direct billing - 3 # Direct sales - 0 # Other 

        :return: The tp_op of this Vehicle.
        :rtype: int
        """
        return self._tp_op

    @tp_op.setter
    def tp_op(self, tp_op):
        """
        Sets the tp_op of this Vehicle.
        - 1 # Sales by car dealership - 2 # Direct billing - 3 # Direct sales - 0 # Other 

        :param tp_op: The tp_op of this Vehicle.
        :type: int
        """
        if tp_op is None:
            raise ValueError("Invalid value for `tp_op`, must not be `None`")

        self._tp_op = tp_op

    @property
    def chassis_number(self):
        """
        Gets the chassis_number of this Vehicle.

        :return: The chassis_number of this Vehicle.
        :rtype: str
        """
        return self._chassis_number

    @chassis_number.setter
    def chassis_number(self, chassis_number):
        """
        Sets the chassis_number of this Vehicle.

        :param chassis_number: The chassis_number of this Vehicle.
        :type: str
        """
        if chassis_number is None:
            raise ValueError("Invalid value for `chassis_number`, must not be `None`")
        if chassis_number is not None and len(chassis_number) > 17:
            raise ValueError("Invalid value for `chassis_number`, length must be less than or equal to `17`")
        if chassis_number is not None and not re.search('[A-Z0-9]+', chassis_number):
            raise ValueError("Invalid value for `chassis_number`, must be a follow pattern or equal to `/[A-Z0-9]+/`")

        self._chassis_number = chassis_number

    @property
    def color_code(self):
        """
        Gets the color_code of this Vehicle.
        color code used by factory

        :return: The color_code of this Vehicle.
        :rtype: str
        """
        return self._color_code

    @color_code.setter
    def color_code(self, color_code):
        """
        Sets the color_code of this Vehicle.
        color code used by factory

        :param color_code: The color_code of this Vehicle.
        :type: str
        """
        if color_code is None:
            raise ValueError("Invalid value for `color_code`, must not be `None`")
        if color_code is not None and len(color_code) > 17:
            raise ValueError("Invalid value for `color_code`, length must be less than or equal to `17`")

        self._color_code = color_code

    @property
    def color_name(self):
        """
        Gets the color_name of this Vehicle.
        color name

        :return: The color_name of this Vehicle.
        :rtype: str
        """
        return self._color_name

    @color_name.setter
    def color_name(self, color_name):
        """
        Sets the color_name of this Vehicle.
        color name

        :param color_name: The color_name of this Vehicle.
        :type: str
        """
        if color_name is None:
            raise ValueError("Invalid value for `color_name`, must not be `None`")
        if color_name is not None and len(color_name) > 40:
            raise ValueError("Invalid value for `color_name`, length must be less than or equal to `40`")

        self._color_name = color_name

    @property
    def cv_power(self):
        """
        Gets the cv_power of this Vehicle.
        Power using CV unid

        :return: The cv_power of this Vehicle.
        :rtype: str
        """
        return self._cv_power

    @cv_power.setter
    def cv_power(self, cv_power):
        """
        Sets the cv_power of this Vehicle.
        Power using CV unid

        :param cv_power: The cv_power of this Vehicle.
        :type: str
        """
        if cv_power is None:
            raise ValueError("Invalid value for `cv_power`, must not be `None`")
        if cv_power is not None and len(cv_power) > 4:
            raise ValueError("Invalid value for `cv_power`, length must be less than or equal to `4`")

        self._cv_power = cv_power

    @property
    def cylinder_volum_cc(self):
        """
        Gets the cylinder_volum_cc of this Vehicle.
        engine size in cubic centimeters

        :return: The cylinder_volum_cc of this Vehicle.
        :rtype: str
        """
        return self._cylinder_volum_cc

    @cylinder_volum_cc.setter
    def cylinder_volum_cc(self, cylinder_volum_cc):
        """
        Sets the cylinder_volum_cc of this Vehicle.
        engine size in cubic centimeters

        :param cylinder_volum_cc: The cylinder_volum_cc of this Vehicle.
        :type: str
        """
        if cylinder_volum_cc is None:
            raise ValueError("Invalid value for `cylinder_volum_cc`, must not be `None`")
        if cylinder_volum_cc is not None and len(cylinder_volum_cc) > 4:
            raise ValueError("Invalid value for `cylinder_volum_cc`, length must be less than or equal to `4`")

        self._cylinder_volum_cc = cylinder_volum_cc

    @property
    def net_weight(self):
        """
        Gets the net_weight of this Vehicle.
        net weight

        :return: The net_weight of this Vehicle.
        :rtype: str
        """
        return self._net_weight

    @net_weight.setter
    def net_weight(self, net_weight):
        """
        Sets the net_weight of this Vehicle.
        net weight

        :param net_weight: The net_weight of this Vehicle.
        :type: str
        """
        if net_weight is None:
            raise ValueError("Invalid value for `net_weight`, must not be `None`")
        if net_weight is not None and len(net_weight) > 9:
            raise ValueError("Invalid value for `net_weight`, length must be less than or equal to `9`")

        self._net_weight = net_weight

    @property
    def gross_weight(self):
        """
        Gets the gross_weight of this Vehicle.
        gross weight

        :return: The gross_weight of this Vehicle.
        :rtype: str
        """
        return self._gross_weight

    @gross_weight.setter
    def gross_weight(self, gross_weight):
        """
        Sets the gross_weight of this Vehicle.
        gross weight

        :param gross_weight: The gross_weight of this Vehicle.
        :type: str
        """
        if gross_weight is None:
            raise ValueError("Invalid value for `gross_weight`, must not be `None`")
        if gross_weight is not None and len(gross_weight) > 9:
            raise ValueError("Invalid value for `gross_weight`, length must be less than or equal to `9`")

        self._gross_weight = gross_weight

    @property
    def serial_number(self):
        """
        Gets the serial_number of this Vehicle.
        serie

        :return: The serial_number of this Vehicle.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """
        Sets the serial_number of this Vehicle.
        serie

        :param serial_number: The serial_number of this Vehicle.
        :type: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")
        if serial_number is not None and len(serial_number) > 9:
            raise ValueError("Invalid value for `serial_number`, length must be less than or equal to `9`")

        self._serial_number = serial_number

    @property
    def fuel_type(self):
        """
        Gets the fuel_type of this Vehicle.
        - '01' # Alcohol - '02' # Gas - '03' # Diesel - '16' # Alcohol/Gas - '17' # Gas/Alcohol/GNV - '18' # Gas/Electric 

        :return: The fuel_type of this Vehicle.
        :rtype: str
        """
        return self._fuel_type

    @fuel_type.setter
    def fuel_type(self, fuel_type):
        """
        Sets the fuel_type of this Vehicle.
        - '01' # Alcohol - '02' # Gas - '03' # Diesel - '16' # Alcohol/Gas - '17' # Gas/Alcohol/GNV - '18' # Gas/Electric 

        :param fuel_type: The fuel_type of this Vehicle.
        :type: str
        """
        allowed_values = ["01", "02", "03", "16", "17", "18"]
        if fuel_type not in allowed_values:
            raise ValueError(
                "Invalid value for `fuel_type` ({0}), must be one of {1}"
                .format(fuel_type, allowed_values)
            )

        self._fuel_type = fuel_type

    @property
    def engine_number(self):
        """
        Gets the engine_number of this Vehicle.
        engine number

        :return: The engine_number of this Vehicle.
        :rtype: str
        """
        return self._engine_number

    @engine_number.setter
    def engine_number(self, engine_number):
        """
        Sets the engine_number of this Vehicle.
        engine number

        :param engine_number: The engine_number of this Vehicle.
        :type: str
        """
        if engine_number is None:
            raise ValueError("Invalid value for `engine_number`, must not be `None`")
        if engine_number is not None and len(engine_number) > 21:
            raise ValueError("Invalid value for `engine_number`, length must be less than or equal to `21`")

        self._engine_number = engine_number

    @property
    def cmt(self):
        """
        Gets the cmt of this Vehicle.
        traction capacity, tonne

        :return: The cmt of this Vehicle.
        :rtype: str
        """
        return self._cmt

    @cmt.setter
    def cmt(self, cmt):
        """
        Sets the cmt of this Vehicle.
        traction capacity, tonne

        :param cmt: The cmt of this Vehicle.
        :type: str
        """
        if cmt is None:
            raise ValueError("Invalid value for `cmt`, must not be `None`")
        if cmt is not None and len(cmt) > 9:
            raise ValueError("Invalid value for `cmt`, length must be less than or equal to `9`")

        self._cmt = cmt

    @property
    def length_between_axis(self):
        """
        Gets the length_between_axis of this Vehicle.
        length between axis

        :return: The length_between_axis of this Vehicle.
        :rtype: str
        """
        return self._length_between_axis

    @length_between_axis.setter
    def length_between_axis(self, length_between_axis):
        """
        Sets the length_between_axis of this Vehicle.
        length between axis

        :param length_between_axis: The length_between_axis of this Vehicle.
        :type: str
        """
        if length_between_axis is None:
            raise ValueError("Invalid value for `length_between_axis`, must not be `None`")
        if length_between_axis is not None and len(length_between_axis) > 4:
            raise ValueError("Invalid value for `length_between_axis`, length must be less than or equal to `4`")

        self._length_between_axis = length_between_axis

    @property
    def model_year(self):
        """
        Gets the model_year of this Vehicle.
        model year

        :return: The model_year of this Vehicle.
        :rtype: str
        """
        return self._model_year

    @model_year.setter
    def model_year(self, model_year):
        """
        Sets the model_year of this Vehicle.
        model year

        :param model_year: The model_year of this Vehicle.
        :type: str
        """
        if model_year is None:
            raise ValueError("Invalid value for `model_year`, must not be `None`")
        if model_year is not None and not re.search('[0-9]{4}', model_year):
            raise ValueError("Invalid value for `model_year`, must be a follow pattern or equal to `/[0-9]{4}/`")

        self._model_year = model_year

    @property
    def manufactory_year(self):
        """
        Gets the manufactory_year of this Vehicle.
        year of factory

        :return: The manufactory_year of this Vehicle.
        :rtype: str
        """
        return self._manufactory_year

    @manufactory_year.setter
    def manufactory_year(self, manufactory_year):
        """
        Sets the manufactory_year of this Vehicle.
        year of factory

        :param manufactory_year: The manufactory_year of this Vehicle.
        :type: str
        """
        if manufactory_year is None:
            raise ValueError("Invalid value for `manufactory_year`, must not be `None`")
        if manufactory_year is not None and not re.search('[0-9]{4}', manufactory_year):
            raise ValueError("Invalid value for `manufactory_year`, must be a follow pattern or equal to `/[0-9]{4}/`")

        self._manufactory_year = manufactory_year

    @property
    def paint_type(self):
        """
        Gets the paint_type of this Vehicle.
        paynt type

        :return: The paint_type of this Vehicle.
        :rtype: str
        """
        return self._paint_type

    @paint_type.setter
    def paint_type(self, paint_type):
        """
        Sets the paint_type of this Vehicle.
        paynt type

        :param paint_type: The paint_type of this Vehicle.
        :type: str
        """
        if paint_type is None:
            raise ValueError("Invalid value for `paint_type`, must not be `None`")
        if paint_type is not None and len(paint_type) > 1:
            raise ValueError("Invalid value for `paint_type`, length must be less than or equal to `1`")

        self._paint_type = paint_type

    @property
    def vehicle_renavam_type(self):
        """
        Gets the vehicle_renavam_type of this Vehicle.

        :return: The vehicle_renavam_type of this Vehicle.
        :rtype: str
        """
        return self._vehicle_renavam_type

    @vehicle_renavam_type.setter
    def vehicle_renavam_type(self, vehicle_renavam_type):
        """
        Sets the vehicle_renavam_type of this Vehicle.

        :param vehicle_renavam_type: The vehicle_renavam_type of this Vehicle.
        :type: str
        """
        if vehicle_renavam_type is None:
            raise ValueError("Invalid value for `vehicle_renavam_type`, must not be `None`")
        if vehicle_renavam_type is not None and not re.search('[0-9]{1,2}', vehicle_renavam_type):
            raise ValueError("Invalid value for `vehicle_renavam_type`, must be a follow pattern or equal to `/[0-9]{1,2}/`")

        self._vehicle_renavam_type = vehicle_renavam_type

    @property
    def specie_renavam_type(self):
        """
        Gets the specie_renavam_type of this Vehicle.

        :return: The specie_renavam_type of this Vehicle.
        :rtype: str
        """
        return self._specie_renavam_type

    @specie_renavam_type.setter
    def specie_renavam_type(self, specie_renavam_type):
        """
        Sets the specie_renavam_type of this Vehicle.

        :param specie_renavam_type: The specie_renavam_type of this Vehicle.
        :type: str
        """
        if specie_renavam_type is None:
            raise ValueError("Invalid value for `specie_renavam_type`, must not be `None`")
        if specie_renavam_type is not None and not re.search('[0-9]{1}', specie_renavam_type):
            raise ValueError("Invalid value for `specie_renavam_type`, must be a follow pattern or equal to `/[0-9]{1}/`")

        self._specie_renavam_type = specie_renavam_type

    @property
    def model_renavam_code(self):
        """
        Gets the model_renavam_code of this Vehicle.

        :return: The model_renavam_code of this Vehicle.
        :rtype: str
        """
        return self._model_renavam_code

    @model_renavam_code.setter
    def model_renavam_code(self, model_renavam_code):
        """
        Sets the model_renavam_code of this Vehicle.

        :param model_renavam_code: The model_renavam_code of this Vehicle.
        :type: str
        """
        if model_renavam_code is None:
            raise ValueError("Invalid value for `model_renavam_code`, must not be `None`")
        if model_renavam_code is not None and not re.search('[0-9]{1,6}', model_renavam_code):
            raise ValueError("Invalid value for `model_renavam_code`, must be a follow pattern or equal to `/[0-9]{1,6}/`")

        self._model_renavam_code = model_renavam_code

    @property
    def color_denatran_code(self):
        """
        Gets the color_denatran_code of this Vehicle.
        - '01' # YELLOW - '02' # BLUE - '03' # BEIGE - '04' # WHITE - '05' # GRAY - '06' # GOLDEN - '07' # GRENA - '08' # ORANGE - '09' # BROWN - '10' # SILVER - '11' # BLACK - '12' # PINK - '13' # PURPLE - '14' # GREEN - '15' # RED - '16' # FANTASY 

        :return: The color_denatran_code of this Vehicle.
        :rtype: str
        """
        return self._color_denatran_code

    @color_denatran_code.setter
    def color_denatran_code(self, color_denatran_code):
        """
        Sets the color_denatran_code of this Vehicle.
        - '01' # YELLOW - '02' # BLUE - '03' # BEIGE - '04' # WHITE - '05' # GRAY - '06' # GOLDEN - '07' # GRENA - '08' # ORANGE - '09' # BROWN - '10' # SILVER - '11' # BLACK - '12' # PINK - '13' # PURPLE - '14' # GREEN - '15' # RED - '16' # FANTASY 

        :param color_denatran_code: The color_denatran_code of this Vehicle.
        :type: str
        """
        allowed_values = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16"]
        if color_denatran_code not in allowed_values:
            raise ValueError(
                "Invalid value for `color_denatran_code` ({0}), must be one of {1}"
                .format(color_denatran_code, allowed_values)
            )

        self._color_denatran_code = color_denatran_code

    @property
    def vin(self):
        """
        Gets the vin of this Vehicle.
        chassis condition original or modified (remarcado)

        :return: The vin of this Vehicle.
        :rtype: str
        """
        return self._vin

    @vin.setter
    def vin(self, vin):
        """
        Sets the vin of this Vehicle.
        chassis condition original or modified (remarcado)

        :param vin: The vin of this Vehicle.
        :type: str
        """
        allowed_values = ["R", "N"]
        if vin not in allowed_values:
            raise ValueError(
                "Invalid value for `vin` ({0}), must be one of {1}"
                .format(vin, allowed_values)
            )

        self._vin = vin

    @property
    def vehicle_manufactory_status(self):
        """
        Gets the vehicle_manufactory_status of this Vehicle.
        - '1' # Finished(Done) - '2' # Not finished - '3' # Semi-finished 

        :return: The vehicle_manufactory_status of this Vehicle.
        :rtype: str
        """
        return self._vehicle_manufactory_status

    @vehicle_manufactory_status.setter
    def vehicle_manufactory_status(self, vehicle_manufactory_status):
        """
        Sets the vehicle_manufactory_status of this Vehicle.
        - '1' # Finished(Done) - '2' # Not finished - '3' # Semi-finished 

        :param vehicle_manufactory_status: The vehicle_manufactory_status of this Vehicle.
        :type: str
        """
        allowed_values = ["1", "2", "3"]
        if vehicle_manufactory_status not in allowed_values:
            raise ValueError(
                "Invalid value for `vehicle_manufactory_status` ({0}), must be one of {1}"
                .format(vehicle_manufactory_status, allowed_values)
            )

        self._vehicle_manufactory_status = vehicle_manufactory_status

    @property
    def max_occupants_quantity(self):
        """
        Gets the max_occupants_quantity of this Vehicle.
        max number of sit occupants

        :return: The max_occupants_quantity of this Vehicle.
        :rtype: str
        """
        return self._max_occupants_quantity

    @max_occupants_quantity.setter
    def max_occupants_quantity(self, max_occupants_quantity):
        """
        Sets the max_occupants_quantity of this Vehicle.
        max number of sit occupants

        :param max_occupants_quantity: The max_occupants_quantity of this Vehicle.
        :type: str
        """
        if max_occupants_quantity is None:
            raise ValueError("Invalid value for `max_occupants_quantity`, must not be `None`")
        if max_occupants_quantity is not None and len(max_occupants_quantity) > 3:
            raise ValueError("Invalid value for `max_occupants_quantity`, length must be less than or equal to `3`")

        self._max_occupants_quantity = max_occupants_quantity

    @property
    def restriction_type(self):
        """
        Gets the restriction_type of this Vehicle.
        Lien/restriction type - '0' # No one; - '1' # Alienação Fiduciária; - '2' # Arrendamento Mercantil; - '3' # Reserva de Domínio; - '4' # Penhor de Veículos; - '9' # Other. 

        :return: The restriction_type of this Vehicle.
        :rtype: str
        """
        return self._restriction_type

    @restriction_type.setter
    def restriction_type(self, restriction_type):
        """
        Sets the restriction_type of this Vehicle.
        Lien/restriction type - '0' # No one; - '1' # Alienação Fiduciária; - '2' # Arrendamento Mercantil; - '3' # Reserva de Domínio; - '4' # Penhor de Veículos; - '9' # Other. 

        :param restriction_type: The restriction_type of this Vehicle.
        :type: str
        """
        allowed_values = ["0", "1", "2", "3", "4", "9"]
        if restriction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `restriction_type` ({0}), must be one of {1}"
                .format(restriction_type, allowed_values)
            )

        self._restriction_type = restriction_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
