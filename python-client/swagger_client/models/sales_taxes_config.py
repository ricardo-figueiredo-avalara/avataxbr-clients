# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SalesTaxesConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, accruable_cofins_taxation=None, accruable_csll_taxation=None, accruable_pis_taxation=None, accruable_cofins_exemp_code_taxation=None, accruable_pis_exemp_code_taxation=None, withholding_cofins=None, withholding_csll=None, withholding_irrf=None, withholding_pis=None, withhold_irrf_exempt_reason_taxation=None):
        """
        SalesTaxesConfig - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'accruable_cofins_taxation': 'str',
            'accruable_csll_taxation': 'str',
            'accruable_pis_taxation': 'str',
            'accruable_cofins_exemp_code_taxation': 'str',
            'accruable_pis_exemp_code_taxation': 'str',
            'withholding_cofins': 'bool',
            'withholding_csll': 'bool',
            'withholding_irrf': 'bool',
            'withholding_pis': 'bool',
            'withhold_irrf_exempt_reason_taxation': 'str'
        }

        self.attribute_map = {
            'accruable_cofins_taxation': 'accruableCOFINSTaxation',
            'accruable_csll_taxation': 'accruableCSLLTaxation',
            'accruable_pis_taxation': 'accruablePISTaxation',
            'accruable_cofins_exemp_code_taxation': 'accruableCOFINSExempCodeTaxation',
            'accruable_pis_exemp_code_taxation': 'accruablePISExempCodeTaxation',
            'withholding_cofins': 'withholdingCOFINS',
            'withholding_csll': 'withholdingCSLL',
            'withholding_irrf': 'withholdingIRRF',
            'withholding_pis': 'withholdingPIS',
            'withhold_irrf_exempt_reason_taxation': 'withholdIRRFExemptReasonTaxation'
        }

        self._accruable_cofins_taxation = accruable_cofins_taxation
        self._accruable_csll_taxation = accruable_csll_taxation
        self._accruable_pis_taxation = accruable_pis_taxation
        self._accruable_cofins_exemp_code_taxation = accruable_cofins_exemp_code_taxation
        self._accruable_pis_exemp_code_taxation = accruable_pis_exemp_code_taxation
        self._withholding_cofins = withholding_cofins
        self._withholding_csll = withholding_csll
        self._withholding_irrf = withholding_irrf
        self._withholding_pis = withholding_pis
        self._withhold_irrf_exempt_reason_taxation = withhold_irrf_exempt_reason_taxation

    @property
    def accruable_cofins_taxation(self):
        """
        Gets the accruable_cofins_taxation of this SalesTaxesConfig.
        There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE 

        :return: The accruable_cofins_taxation of this SalesTaxesConfig.
        :rtype: str
        """
        return self._accruable_cofins_taxation

    @accruable_cofins_taxation.setter
    def accruable_cofins_taxation(self, accruable_cofins_taxation):
        """
        Sets the accruable_cofins_taxation of this SalesTaxesConfig.
        There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE 

        :param accruable_cofins_taxation: The accruable_cofins_taxation of this SalesTaxesConfig.
        :type: str
        """
        allowed_values = ["T", "N", "Z", "E", "H", "S"]
        if accruable_cofins_taxation not in allowed_values:
            raise ValueError(
                "Invalid value for `accruable_cofins_taxation` ({0}), must be one of {1}"
                .format(accruable_cofins_taxation, allowed_values)
            )

        self._accruable_cofins_taxation = accruable_cofins_taxation

    @property
    def accruable_csll_taxation(self):
        """
        Gets the accruable_csll_taxation of this SalesTaxesConfig.
        There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT 

        :return: The accruable_csll_taxation of this SalesTaxesConfig.
        :rtype: str
        """
        return self._accruable_csll_taxation

    @accruable_csll_taxation.setter
    def accruable_csll_taxation(self, accruable_csll_taxation):
        """
        Sets the accruable_csll_taxation of this SalesTaxesConfig.
        There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT 

        :param accruable_csll_taxation: The accruable_csll_taxation of this SalesTaxesConfig.
        :type: str
        """
        allowed_values = ["T", "E"]
        if accruable_csll_taxation not in allowed_values:
            raise ValueError(
                "Invalid value for `accruable_csll_taxation` ({0}), must be one of {1}"
                .format(accruable_csll_taxation, allowed_values)
            )

        self._accruable_csll_taxation = accruable_csll_taxation

    @property
    def accruable_pis_taxation(self):
        """
        Gets the accruable_pis_taxation of this SalesTaxesConfig.
        There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE 

        :return: The accruable_pis_taxation of this SalesTaxesConfig.
        :rtype: str
        """
        return self._accruable_pis_taxation

    @accruable_pis_taxation.setter
    def accruable_pis_taxation(self, accruable_pis_taxation):
        """
        Sets the accruable_pis_taxation of this SalesTaxesConfig.
        There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE 

        :param accruable_pis_taxation: The accruable_pis_taxation of this SalesTaxesConfig.
        :type: str
        """
        allowed_values = ["T", "N", "Z", "E", "H", "S"]
        if accruable_pis_taxation not in allowed_values:
            raise ValueError(
                "Invalid value for `accruable_pis_taxation` ({0}), must be one of {1}"
                .format(accruable_pis_taxation, allowed_values)
            )

        self._accruable_pis_taxation = accruable_pis_taxation

    @property
    def accruable_cofins_exemp_code_taxation(self):
        """
        Gets the accruable_cofins_exemp_code_taxation of this SalesTaxesConfig.
        This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption

        :return: The accruable_cofins_exemp_code_taxation of this SalesTaxesConfig.
        :rtype: str
        """
        return self._accruable_cofins_exemp_code_taxation

    @accruable_cofins_exemp_code_taxation.setter
    def accruable_cofins_exemp_code_taxation(self, accruable_cofins_exemp_code_taxation):
        """
        Sets the accruable_cofins_exemp_code_taxation of this SalesTaxesConfig.
        This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption

        :param accruable_cofins_exemp_code_taxation: The accruable_cofins_exemp_code_taxation of this SalesTaxesConfig.
        :type: str
        """
        if accruable_cofins_exemp_code_taxation is not None and not re.search('[0-9]{3}', accruable_cofins_exemp_code_taxation):
            raise ValueError("Invalid value for `accruable_cofins_exemp_code_taxation`, must be a follow pattern or equal to `/[0-9]{3}/`")

        self._accruable_cofins_exemp_code_taxation = accruable_cofins_exemp_code_taxation

    @property
    def accruable_pis_exemp_code_taxation(self):
        """
        Gets the accruable_pis_exemp_code_taxation of this SalesTaxesConfig.
        This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption

        :return: The accruable_pis_exemp_code_taxation of this SalesTaxesConfig.
        :rtype: str
        """
        return self._accruable_pis_exemp_code_taxation

    @accruable_pis_exemp_code_taxation.setter
    def accruable_pis_exemp_code_taxation(self, accruable_pis_exemp_code_taxation):
        """
        Sets the accruable_pis_exemp_code_taxation of this SalesTaxesConfig.
        This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption

        :param accruable_pis_exemp_code_taxation: The accruable_pis_exemp_code_taxation of this SalesTaxesConfig.
        :type: str
        """
        if accruable_pis_exemp_code_taxation is not None and not re.search('[0-9]{3}', accruable_pis_exemp_code_taxation):
            raise ValueError("Invalid value for `accruable_pis_exemp_code_taxation`, must be a follow pattern or equal to `/[0-9]{3}/`")

        self._accruable_pis_exemp_code_taxation = accruable_pis_exemp_code_taxation

    @property
    def withholding_cofins(self):
        """
        Gets the withholding_cofins of this SalesTaxesConfig.
        Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.

        :return: The withholding_cofins of this SalesTaxesConfig.
        :rtype: bool
        """
        return self._withholding_cofins

    @withholding_cofins.setter
    def withholding_cofins(self, withholding_cofins):
        """
        Sets the withholding_cofins of this SalesTaxesConfig.
        Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.

        :param withholding_cofins: The withholding_cofins of this SalesTaxesConfig.
        :type: bool
        """

        self._withholding_cofins = withholding_cofins

    @property
    def withholding_csll(self):
        """
        Gets the withholding_csll of this SalesTaxesConfig.
        Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.

        :return: The withholding_csll of this SalesTaxesConfig.
        :rtype: bool
        """
        return self._withholding_csll

    @withholding_csll.setter
    def withholding_csll(self, withholding_csll):
        """
        Sets the withholding_csll of this SalesTaxesConfig.
        Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.

        :param withholding_csll: The withholding_csll of this SalesTaxesConfig.
        :type: bool
        """

        self._withholding_csll = withholding_csll

    @property
    def withholding_irrf(self):
        """
        Gets the withholding_irrf of this SalesTaxesConfig.
        Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.

        :return: The withholding_irrf of this SalesTaxesConfig.
        :rtype: bool
        """
        return self._withholding_irrf

    @withholding_irrf.setter
    def withholding_irrf(self, withholding_irrf):
        """
        Sets the withholding_irrf of this SalesTaxesConfig.
        Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.

        :param withholding_irrf: The withholding_irrf of this SalesTaxesConfig.
        :type: bool
        """

        self._withholding_irrf = withholding_irrf

    @property
    def withholding_pis(self):
        """
        Gets the withholding_pis of this SalesTaxesConfig.
        Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.

        :return: The withholding_pis of this SalesTaxesConfig.
        :rtype: bool
        """
        return self._withholding_pis

    @withholding_pis.setter
    def withholding_pis(self, withholding_pis):
        """
        Sets the withholding_pis of this SalesTaxesConfig.
        Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.

        :param withholding_pis: The withholding_pis of this SalesTaxesConfig.
        :type: bool
        """

        self._withholding_pis = withholding_pis

    @property
    def withhold_irrf_exempt_reason_taxation(self):
        """
        Gets the withhold_irrf_exempt_reason_taxation of this SalesTaxesConfig.
        When property withholdingIRRF is false is mandatory inform the reason

        :return: The withhold_irrf_exempt_reason_taxation of this SalesTaxesConfig.
        :rtype: str
        """
        return self._withhold_irrf_exempt_reason_taxation

    @withhold_irrf_exempt_reason_taxation.setter
    def withhold_irrf_exempt_reason_taxation(self, withhold_irrf_exempt_reason_taxation):
        """
        Sets the withhold_irrf_exempt_reason_taxation of this SalesTaxesConfig.
        When property withholdingIRRF is false is mandatory inform the reason

        :param withhold_irrf_exempt_reason_taxation: The withhold_irrf_exempt_reason_taxation of this SalesTaxesConfig.
        :type: str
        """

        self._withhold_irrf_exempt_reason_taxation = withhold_irrf_exempt_reason_taxation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
