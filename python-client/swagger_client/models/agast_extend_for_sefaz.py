# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AgastExtendForSefaz(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, hs_code=None, ex=None, cest=None, cean=None, nve=None, unit=None, unit_taxable=None, n_fci=None):
        """
        AgastExtendForSefaz - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'hs_code': 'str',
            'ex': 'int',
            'cest': 'str',
            'cean': 'str',
            'nve': 'str',
            'unit': 'str',
            'unit_taxable': 'str',
            'n_fci': 'str'
        }

        self.attribute_map = {
            'hs_code': 'hsCode',
            'ex': 'ex',
            'cest': 'cest',
            'cean': 'cean',
            'nve': 'nve',
            'unit': 'unit',
            'unit_taxable': 'unitTaxable',
            'n_fci': 'nFCI'
        }

        self._hs_code = hs_code
        self._ex = ex
        self._cest = cest
        self._cean = cean
        self._nve = nve
        self._unit = unit
        self._unit_taxable = unit_taxable
        self._n_fci = n_fci

    @property
    def hs_code(self):
        """
        Gets the hs_code of this AgastExtendForSefaz.
        harmonized code, NCM or LC 116

        :return: The hs_code of this AgastExtendForSefaz.
        :rtype: str
        """
        return self._hs_code

    @hs_code.setter
    def hs_code(self, hs_code):
        """
        Sets the hs_code of this AgastExtendForSefaz.
        harmonized code, NCM or LC 116

        :param hs_code: The hs_code of this AgastExtendForSefaz.
        :type: str
        """
        if hs_code is not None and len(hs_code) > 8:
            raise ValueError("Invalid value for `hs_code`, length must be less than or equal to `8`")

        self._hs_code = hs_code

    @property
    def ex(self):
        """
        Gets the ex of this AgastExtendForSefaz.
        hsCode Exception for IPI tax

        :return: The ex of this AgastExtendForSefaz.
        :rtype: int
        """
        return self._ex

    @ex.setter
    def ex(self, ex):
        """
        Sets the ex of this AgastExtendForSefaz.
        hsCode Exception for IPI tax

        :param ex: The ex of this AgastExtendForSefaz.
        :type: int
        """

        self._ex = ex

    @property
    def cest(self):
        """
        Gets the cest of this AgastExtendForSefaz.
        tax substitution code - Codigo especificador da Substuicao Tributaria

        :return: The cest of this AgastExtendForSefaz.
        :rtype: str
        """
        return self._cest

    @cest.setter
    def cest(self, cest):
        """
        Sets the cest of this AgastExtendForSefaz.
        tax substitution code - Codigo especificador da Substuicao Tributaria

        :param cest: The cest of this AgastExtendForSefaz.
        :type: str
        """
        if cest is not None and not re.search('[0-9]{7}', cest):
            raise ValueError("Invalid value for `cest`, must be a follow pattern or equal to `/[0-9]{7}/`")

        self._cest = cest

    @property
    def cean(self):
        """
        Gets the cean of this AgastExtendForSefaz.
        GTIN NUMBER

        :return: The cean of this AgastExtendForSefaz.
        :rtype: str
        """
        return self._cean

    @cean.setter
    def cean(self, cean):
        """
        Sets the cean of this AgastExtendForSefaz.
        GTIN NUMBER

        :param cean: The cean of this AgastExtendForSefaz.
        :type: str
        """
        if cean is not None and not re.search('[0-9]{0}|[0-9]{8}|[0-9]{12,14}', cean):
            raise ValueError("Invalid value for `cean`, must be a follow pattern or equal to `/[0-9]{0}|[0-9]{8}|[0-9]{12,14}/`")

        self._cean = cean

    @property
    def nve(self):
        """
        Gets the nve of this AgastExtendForSefaz.
        Nomenclatura de Valor aduaneio e Estatístico - NCM extension code

        :return: The nve of this AgastExtendForSefaz.
        :rtype: str
        """
        return self._nve

    @nve.setter
    def nve(self, nve):
        """
        Sets the nve of this AgastExtendForSefaz.
        Nomenclatura de Valor aduaneio e Estatístico - NCM extension code

        :param nve: The nve of this AgastExtendForSefaz.
        :type: str
        """
        if nve is not None and not re.search('[A-Z]{2}[0-9]{4}', nve):
            raise ValueError("Invalid value for `nve`, must be a follow pattern or equal to `/[A-Z]{2}[0-9]{4}/`")

        self._nve = nve

    @property
    def unit(self):
        """
        Gets the unit of this AgastExtendForSefaz.
        Sales Unit

        :return: The unit of this AgastExtendForSefaz.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """
        Sets the unit of this AgastExtendForSefaz.
        Sales Unit

        :param unit: The unit of this AgastExtendForSefaz.
        :type: str
        """
        if unit is not None and len(unit) > 6:
            raise ValueError("Invalid value for `unit`, length must be less than or equal to `6`")

        self._unit = unit

    @property
    def unit_taxable(self):
        """
        Gets the unit_taxable of this AgastExtendForSefaz.
        Sales Taxable Unit

        :return: The unit_taxable of this AgastExtendForSefaz.
        :rtype: str
        """
        return self._unit_taxable

    @unit_taxable.setter
    def unit_taxable(self, unit_taxable):
        """
        Sets the unit_taxable of this AgastExtendForSefaz.
        Sales Taxable Unit

        :param unit_taxable: The unit_taxable of this AgastExtendForSefaz.
        :type: str
        """
        if unit_taxable is not None and len(unit_taxable) > 6:
            raise ValueError("Invalid value for `unit_taxable`, length must be less than or equal to `6`")

        self._unit_taxable = unit_taxable

    @property
    def n_fci(self):
        """
        Gets the n_fci of this AgastExtendForSefaz.
        Importation content form number (Número de controle da FCI - Ficha de Conteúdo de Importação)

        :return: The n_fci of this AgastExtendForSefaz.
        :rtype: str
        """
        return self._n_fci

    @n_fci.setter
    def n_fci(self, n_fci):
        """
        Sets the n_fci of this AgastExtendForSefaz.
        Importation content form number (Número de controle da FCI - Ficha de Conteúdo de Importação)

        :param n_fci: The n_fci of this AgastExtendForSefaz.
        :type: str
        """
        if n_fci is not None and not re.search('[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}', n_fci):
            raise ValueError("Invalid value for `n_fci`, must be a follow pattern or equal to `/[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/`")

        self._n_fci = n_fci

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
