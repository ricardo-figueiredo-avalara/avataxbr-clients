# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Error(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, code=None, message=None, field=None, value=None, _in=None):
        """
        Error - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'code': 'int',
            'message': 'str',
            'field': 'str',
            'value': 'str',
            '_in': 'str'
        }

        self.attribute_map = {
            'code': 'code',
            'message': 'message',
            'field': 'field',
            'value': 'value',
            '_in': 'in'
        }

        self._code = code
        self._message = message
        self._field = field
        self._value = value
        self.__in = _in

    @property
    def code(self):
        """
        Gets the code of this Error.

        :return: The code of this Error.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this Error.

        :param code: The code of this Error.
        :type: int
        """

        self._code = code

    @property
    def message(self):
        """
        Gets the message of this Error.

        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this Error.

        :param message: The message of this Error.
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def field(self):
        """
        Gets the field of this Error.

        :return: The field of this Error.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """
        Sets the field of this Error.

        :param field: The field of this Error.
        :type: str
        """

        self._field = field

    @property
    def value(self):
        """
        Gets the value of this Error.

        :return: The value of this Error.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this Error.

        :param value: The value of this Error.
        :type: str
        """

        self._value = value

    @property
    def _in(self):
        """
        Gets the _in of this Error.

        :return: The _in of this Error.
        :rtype: str
        """
        return self.__in

    @_in.setter
    def _in(self, _in):
        """
        Sets the _in of this Error.

        :param _in: The _in of this Error.
        :type: str
        """
        allowed_values = ["params", "body", "query"]
        if _in not in allowed_values:
            raise ValueError(
                "Invalid value for `_in` ({0}), must be one of {1}"
                .format(_in, allowed_values)
            )

        self.__in = _in

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
