# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TaxTypeRate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, tax_type=None, tax_model=None, rate=None, srv_amount=None, quantity_unid_base=None, specialization_type=None, exemption_reason_code=None, custom_exemption_reason_description=None, withholding=None):
        """
        TaxTypeRate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'tax_type': 'TaxType',
            'tax_model': 'str',
            'rate': 'float',
            'srv_amount': 'float',
            'quantity_unid_base': 'str',
            'specialization_type': 'str',
            'exemption_reason_code': 'str',
            'custom_exemption_reason_description': 'str',
            'withholding': 'TaxTypeRateWithholding'
        }

        self.attribute_map = {
            'tax_type': 'taxType',
            'tax_model': 'taxModel',
            'rate': 'rate',
            'srv_amount': 'srvAmount',
            'quantity_unid_base': 'quantityUnidBase',
            'specialization_type': 'specializationType',
            'exemption_reason_code': 'exemptionReasonCode',
            'custom_exemption_reason_description': 'customExemptionReasonDescription',
            'withholding': 'withholding'
        }

        self._tax_type = tax_type
        self._tax_model = tax_model
        self._rate = rate
        self._srv_amount = srv_amount
        self._quantity_unid_base = quantity_unid_base
        self._specialization_type = specialization_type
        self._exemption_reason_code = exemption_reason_code
        self._custom_exemption_reason_description = custom_exemption_reason_description
        self._withholding = withholding

    @property
    def tax_type(self):
        """
        Gets the tax_type of this TaxTypeRate.

        :return: The tax_type of this TaxTypeRate.
        :rtype: TaxType
        """
        return self._tax_type

    @tax_type.setter
    def tax_type(self, tax_type):
        """
        Sets the tax_type of this TaxTypeRate.

        :param tax_type: The tax_type of this TaxTypeRate.
        :type: TaxType
        """
        if tax_type is None:
            raise ValueError("Invalid value for `tax_type`, must not be `None`")

        self._tax_type = tax_type

    @property
    def tax_model(self):
        """
        Gets the tax_model of this TaxTypeRate.
        Tax can be calculated by rate or by quantity

        :return: The tax_model of this TaxTypeRate.
        :rtype: str
        """
        return self._tax_model

    @tax_model.setter
    def tax_model(self, tax_model):
        """
        Sets the tax_model of this TaxTypeRate.
        Tax can be calculated by rate or by quantity

        :param tax_model: The tax_model of this TaxTypeRate.
        :type: str
        """
        allowed_values = ["rate", "srf"]
        if tax_model not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_model` ({0}), must be one of {1}"
                .format(tax_model, allowed_values)
            )

        self._tax_model = tax_model

    @property
    def rate(self):
        """
        Gets the rate of this TaxTypeRate.
        Specific tax rate ex 3.5 (3.5%)

        :return: The rate of this TaxTypeRate.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """
        Sets the rate of this TaxTypeRate.
        Specific tax rate ex 3.5 (3.5%)

        :param rate: The rate of this TaxTypeRate.
        :type: float
        """

        self._rate = rate

    @property
    def srv_amount(self):
        """
        Gets the srv_amount of this TaxTypeRate.
        Specific tax rate ex 3.5 (3.5%)

        :return: The srv_amount of this TaxTypeRate.
        :rtype: float
        """
        return self._srv_amount

    @srv_amount.setter
    def srv_amount(self, srv_amount):
        """
        Sets the srv_amount of this TaxTypeRate.
        Specific tax rate ex 3.5 (3.5%)

        :param srv_amount: The srv_amount of this TaxTypeRate.
        :type: float
        """

        self._srv_amount = srv_amount

    @property
    def quantity_unid_base(self):
        """
        Gets the quantity_unid_base of this TaxTypeRate.

        :return: The quantity_unid_base of this TaxTypeRate.
        :rtype: str
        """
        return self._quantity_unid_base

    @quantity_unid_base.setter
    def quantity_unid_base(self, quantity_unid_base):
        """
        Sets the quantity_unid_base of this TaxTypeRate.

        :param quantity_unid_base: The quantity_unid_base of this TaxTypeRate.
        :type: str
        """
        if quantity_unid_base is not None and len(quantity_unid_base) > 6:
            raise ValueError("Invalid value for `quantity_unid_base`, length must be less than or equal to `6`")

        self._quantity_unid_base = quantity_unid_base

    @property
    def specialization_type(self):
        """
        Gets the specialization_type of this TaxTypeRate.

        :return: The specialization_type of this TaxTypeRate.
        :rtype: str
        """
        return self._specialization_type

    @specialization_type.setter
    def specialization_type(self, specialization_type):
        """
        Sets the specialization_type of this TaxTypeRate.

        :param specialization_type: The specialization_type of this TaxTypeRate.
        :type: str
        """
        allowed_values = ["basic", "monophase", "taxSubstitution"]
        if specialization_type not in allowed_values:
            raise ValueError(
                "Invalid value for `specialization_type` ({0}), must be one of {1}"
                .format(specialization_type, allowed_values)
            )

        self._specialization_type = specialization_type

    @property
    def exemption_reason_code(self):
        """
        Gets the exemption_reason_code of this TaxTypeRate.
        UUID Reference to an item in the LegalReason store. 

        :return: The exemption_reason_code of this TaxTypeRate.
        :rtype: str
        """
        return self._exemption_reason_code

    @exemption_reason_code.setter
    def exemption_reason_code(self, exemption_reason_code):
        """
        Sets the exemption_reason_code of this TaxTypeRate.
        UUID Reference to an item in the LegalReason store. 

        :param exemption_reason_code: The exemption_reason_code of this TaxTypeRate.
        :type: str
        """

        self._exemption_reason_code = exemption_reason_code

    @property
    def custom_exemption_reason_description(self):
        """
        Gets the custom_exemption_reason_description of this TaxTypeRate.
        Optional textual reason description, to be used when reason codes are generic (i.e. reason code 999 = Other). 

        :return: The custom_exemption_reason_description of this TaxTypeRate.
        :rtype: str
        """
        return self._custom_exemption_reason_description

    @custom_exemption_reason_description.setter
    def custom_exemption_reason_description(self, custom_exemption_reason_description):
        """
        Sets the custom_exemption_reason_description of this TaxTypeRate.
        Optional textual reason description, to be used when reason codes are generic (i.e. reason code 999 = Other). 

        :param custom_exemption_reason_description: The custom_exemption_reason_description of this TaxTypeRate.
        :type: str
        """

        self._custom_exemption_reason_description = custom_exemption_reason_description

    @property
    def withholding(self):
        """
        Gets the withholding of this TaxTypeRate.

        :return: The withholding of this TaxTypeRate.
        :rtype: TaxTypeRateWithholding
        """
        return self._withholding

    @withholding.setter
    def withholding(self, withholding):
        """
        Sets the withholding of this TaxTypeRate.

        :param withholding: The withholding of this TaxTypeRate.
        :type: TaxTypeRateWithholding
        """

        self._withholding = withholding

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
