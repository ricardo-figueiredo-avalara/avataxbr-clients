# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ExportInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, shipping_state=None, place=None, place_description=None):
        """
        ExportInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'shipping_state': 'StateEnum',
            'place': 'str',
            'place_description': 'str'
        }

        self.attribute_map = {
            'shipping_state': 'shippingState',
            'place': 'place',
            'place_description': 'placeDescription'
        }

        self._shipping_state = shipping_state
        self._place = place
        self._place_description = place_description

    @property
    def shipping_state(self):
        """
        Gets the shipping_state of this ExportInfo.
        shipping state

        :return: The shipping_state of this ExportInfo.
        :rtype: StateEnum
        """
        return self._shipping_state

    @shipping_state.setter
    def shipping_state(self, shipping_state):
        """
        Sets the shipping_state of this ExportInfo.
        shipping state

        :param shipping_state: The shipping_state of this ExportInfo.
        :type: StateEnum
        """
        if shipping_state is None:
            raise ValueError("Invalid value for `shipping_state`, must not be `None`")

        self._shipping_state = shipping_state

    @property
    def place(self):
        """
        Gets the place of this ExportInfo.
        shipping place

        :return: The place of this ExportInfo.
        :rtype: str
        """
        return self._place

    @place.setter
    def place(self, place):
        """
        Sets the place of this ExportInfo.
        shipping place

        :param place: The place of this ExportInfo.
        :type: str
        """
        if place is None:
            raise ValueError("Invalid value for `place`, must not be `None`")
        if place is not None and len(place) > 60:
            raise ValueError("Invalid value for `place`, length must be less than or equal to `60`")
        if place is not None and len(place) < 1:
            raise ValueError("Invalid value for `place`, length must be greater than or equal to `1`")

        self._place = place

    @property
    def place_description(self):
        """
        Gets the place_description of this ExportInfo.
        description of shipping place

        :return: The place_description of this ExportInfo.
        :rtype: str
        """
        return self._place_description

    @place_description.setter
    def place_description(self, place_description):
        """
        Sets the place_description of this ExportInfo.
        description of shipping place

        :param place_description: The place_description of this ExportInfo.
        :type: str
        """
        if place_description is not None and len(place_description) > 60:
            raise ValueError("Invalid value for `place_description`, length must be less than or equal to `60`")
        if place_description is not None and len(place_description) < 1:
            raise ValueError("Invalid value for `place_description`, length must be greater than or equal to `1`")

        self._place_description = place_description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
