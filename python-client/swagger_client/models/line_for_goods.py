# coding: utf-8

"""
    BR16 - API

    This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LineForGoods(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, line_code=None, item_code=None, avalara_goods_and_services_type=None, number_of_items=1.0, returned_percentage_amount=None, line_unit_price=None, line_amount=None, item_description=None, line_taxed_discount=None, line_untaxed_discount=None, use_type=None, process_scenario=None, cfop=None, has_stock_impact=None, has_finantial_impact=None, freight_amount=None, insurance_amount=None, other_cost_amount=None, ind_tot_type=True, order_number=None, order_item_number=None, fci_number=None, recopi_number=None, inf_ad_prod=None, vehicle=None, medicine=None, weapon=None, fuel=None, entity_is_icms_substitute=None, is_transport_icms_withheld=None, icms_tax_relief=None, export=None, di=None, calculated_tax=None):
        """
        LineForGoods - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'line_code': 'int',
            'item_code': 'str',
            'avalara_goods_and_services_type': 'str',
            'number_of_items': 'float',
            'returned_percentage_amount': 'float',
            'line_unit_price': 'float',
            'line_amount': 'float',
            'item_description': 'str',
            'line_taxed_discount': 'float',
            'line_untaxed_discount': 'float',
            'use_type': 'str',
            'process_scenario': 'str',
            'cfop': 'int',
            'has_stock_impact': 'bool',
            'has_finantial_impact': 'bool',
            'freight_amount': 'float',
            'insurance_amount': 'float',
            'other_cost_amount': 'float',
            'ind_tot_type': 'bool',
            'order_number': 'str',
            'order_item_number': 'str',
            'fci_number': 'str',
            'recopi_number': 'str',
            'inf_ad_prod': 'str',
            'vehicle': 'Vehicle',
            'medicine': 'Medicine',
            'weapon': 'Weapon',
            'fuel': 'Fuel',
            'entity_is_icms_substitute': 'bool',
            'is_transport_icms_withheld': 'bool',
            'icms_tax_relief': 'LineForGoodsIcmsTaxRelief',
            'export': 'list[LineForGoodsExport]',
            'di': 'list[LineForGoodsDi]',
            'calculated_tax': 'LineForGoodsCalculatedTax'
        }

        self.attribute_map = {
            'line_code': 'lineCode',
            'item_code': 'itemCode',
            'avalara_goods_and_services_type': 'avalaraGoodsAndServicesType',
            'number_of_items': 'numberOfItems',
            'returned_percentage_amount': 'returnedPercentageAmount',
            'line_unit_price': 'lineUnitPrice',
            'line_amount': 'lineAmount',
            'item_description': 'itemDescription',
            'line_taxed_discount': 'lineTaxedDiscount',
            'line_untaxed_discount': 'lineUntaxedDiscount',
            'use_type': 'useType',
            'process_scenario': 'processScenario',
            'cfop': 'cfop',
            'has_stock_impact': 'hasStockImpact',
            'has_finantial_impact': 'hasFinantialImpact',
            'freight_amount': 'freightAmount',
            'insurance_amount': 'insuranceAmount',
            'other_cost_amount': 'otherCostAmount',
            'ind_tot_type': 'indTotType',
            'order_number': 'orderNumber',
            'order_item_number': 'orderItemNumber',
            'fci_number': 'fciNumber',
            'recopi_number': 'recopiNumber',
            'inf_ad_prod': 'infAdProd',
            'vehicle': 'vehicle',
            'medicine': 'medicine',
            'weapon': 'weapon',
            'fuel': 'fuel',
            'entity_is_icms_substitute': 'entityIsIcmsSubstitute',
            'is_transport_icms_withheld': 'isTransportIcmsWithheld',
            'icms_tax_relief': 'icmsTaxRelief',
            'export': 'export',
            'di': 'di',
            'calculated_tax': 'calculatedTax'
        }

        self._line_code = line_code
        self._item_code = item_code
        self._avalara_goods_and_services_type = avalara_goods_and_services_type
        self._number_of_items = number_of_items
        self._returned_percentage_amount = returned_percentage_amount
        self._line_unit_price = line_unit_price
        self._line_amount = line_amount
        self._item_description = item_description
        self._line_taxed_discount = line_taxed_discount
        self._line_untaxed_discount = line_untaxed_discount
        self._use_type = use_type
        self._process_scenario = process_scenario
        self._cfop = cfop
        self._has_stock_impact = has_stock_impact
        self._has_finantial_impact = has_finantial_impact
        self._freight_amount = freight_amount
        self._insurance_amount = insurance_amount
        self._other_cost_amount = other_cost_amount
        self._ind_tot_type = ind_tot_type
        self._order_number = order_number
        self._order_item_number = order_item_number
        self._fci_number = fci_number
        self._recopi_number = recopi_number
        self._inf_ad_prod = inf_ad_prod
        self._vehicle = vehicle
        self._medicine = medicine
        self._weapon = weapon
        self._fuel = fuel
        self._entity_is_icms_substitute = entity_is_icms_substitute
        self._is_transport_icms_withheld = is_transport_icms_withheld
        self._icms_tax_relief = icms_tax_relief
        self._export = export
        self._di = di
        self._calculated_tax = calculated_tax

    @property
    def line_code(self):
        """
        Gets the line_code of this LineForGoods.
        This string is a unique identifier for this line in the transaction

        :return: The line_code of this LineForGoods.
        :rtype: int
        """
        return self._line_code

    @line_code.setter
    def line_code(self, line_code):
        """
        Sets the line_code of this LineForGoods.
        This string is a unique identifier for this line in the transaction

        :param line_code: The line_code of this LineForGoods.
        :type: int
        """
        if line_code is None:
            raise ValueError("Invalid value for `line_code`, must not be `None`")

        self._line_code = line_code

    @property
    def item_code(self):
        """
        Gets the item_code of this LineForGoods.
        This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states.

        :return: The item_code of this LineForGoods.
        :rtype: str
        """
        return self._item_code

    @item_code.setter
    def item_code(self, item_code):
        """
        Sets the item_code of this LineForGoods.
        This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states.

        :param item_code: The item_code of this LineForGoods.
        :type: str
        """
        if item_code is None:
            raise ValueError("Invalid value for `item_code`, must not be `None`")
        if item_code is not None and len(item_code) > 60:
            raise ValueError("Invalid value for `item_code`, length must be less than or equal to `60`")

        self._item_code = item_code

    @property
    def avalara_goods_and_services_type(self):
        """
        Gets the avalara_goods_and_services_type of this LineForGoods.
        AGAST CODE for itemCode

        :return: The avalara_goods_and_services_type of this LineForGoods.
        :rtype: str
        """
        return self._avalara_goods_and_services_type

    @avalara_goods_and_services_type.setter
    def avalara_goods_and_services_type(self, avalara_goods_and_services_type):
        """
        Sets the avalara_goods_and_services_type of this LineForGoods.
        AGAST CODE for itemCode

        :param avalara_goods_and_services_type: The avalara_goods_and_services_type of this LineForGoods.
        :type: str
        """

        self._avalara_goods_and_services_type = avalara_goods_and_services_type

    @property
    def number_of_items(self):
        """
        Gets the number_of_items of this LineForGoods.
        This decimal 11 integers and 1 to 4 decimals captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1

        :return: The number_of_items of this LineForGoods.
        :rtype: float
        """
        return self._number_of_items

    @number_of_items.setter
    def number_of_items(self, number_of_items):
        """
        Sets the number_of_items of this LineForGoods.
        This decimal 11 integers and 1 to 4 decimals captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1

        :param number_of_items: The number_of_items of this LineForGoods.
        :type: float
        """
        if number_of_items is None:
            raise ValueError("Invalid value for `number_of_items`, must not be `None`")

        self._number_of_items = number_of_items

    @property
    def returned_percentage_amount(self):
        """
        Gets the returned_percentage_amount of this LineForGoods.
        when is return operation this field inform the percentage of returned itens. This decimal max 3 integers and 2 decimals, v >=0.00 and v <= 100.00

        :return: The returned_percentage_amount of this LineForGoods.
        :rtype: float
        """
        return self._returned_percentage_amount

    @returned_percentage_amount.setter
    def returned_percentage_amount(self, returned_percentage_amount):
        """
        Sets the returned_percentage_amount of this LineForGoods.
        when is return operation this field inform the percentage of returned itens. This decimal max 3 integers and 2 decimals, v >=0.00 and v <= 100.00

        :param returned_percentage_amount: The returned_percentage_amount of this LineForGoods.
        :type: float
        """

        self._returned_percentage_amount = returned_percentage_amount

    @property
    def line_unit_price(self):
        """
        Gets the line_unit_price of this LineForGoods.
        This decimal 11 integers and 1 to 10 decimals captures the unit price of this line.

        :return: The line_unit_price of this LineForGoods.
        :rtype: float
        """
        return self._line_unit_price

    @line_unit_price.setter
    def line_unit_price(self, line_unit_price):
        """
        Sets the line_unit_price of this LineForGoods.
        This decimal 11 integers and 1 to 10 decimals captures the unit price of this line.

        :param line_unit_price: The line_unit_price of this LineForGoods.
        :type: float
        """

        self._line_unit_price = line_unit_price

    @property
    def line_amount(self):
        """
        Gets the line_amount of this LineForGoods.
        In its simplest form lineAmount = (item price * numberOfItems). If taxIncluded is 'true', lineAmount = (item price * numberOfItems + tax).

        :return: The line_amount of this LineForGoods.
        :rtype: float
        """
        return self._line_amount

    @line_amount.setter
    def line_amount(self, line_amount):
        """
        Sets the line_amount of this LineForGoods.
        In its simplest form lineAmount = (item price * numberOfItems). If taxIncluded is 'true', lineAmount = (item price * numberOfItems + tax).

        :param line_amount: The line_amount of this LineForGoods.
        :type: float
        """
        if line_amount is None:
            raise ValueError("Invalid value for `line_amount`, must not be `None`")

        self._line_amount = line_amount

    @property
    def item_description(self):
        """
        Gets the item_description of this LineForGoods.
        This string captures the description of the item represented by this line, will be used LC 116

        :return: The item_description of this LineForGoods.
        :rtype: str
        """
        return self._item_description

    @item_description.setter
    def item_description(self, item_description):
        """
        Sets the item_description of this LineForGoods.
        This string captures the description of the item represented by this line, will be used LC 116

        :param item_description: The item_description of this LineForGoods.
        :type: str
        """
        if item_description is None:
            raise ValueError("Invalid value for `item_description`, must not be `None`")

        self._item_description = item_description

    @property
    def line_taxed_discount(self):
        """
        Gets the line_taxed_discount of this LineForGoods.
        Discount conditional, This decimal 13 integers and 0 to 2 decimals

        :return: The line_taxed_discount of this LineForGoods.
        :rtype: float
        """
        return self._line_taxed_discount

    @line_taxed_discount.setter
    def line_taxed_discount(self, line_taxed_discount):
        """
        Sets the line_taxed_discount of this LineForGoods.
        Discount conditional, This decimal 13 integers and 0 to 2 decimals

        :param line_taxed_discount: The line_taxed_discount of this LineForGoods.
        :type: float
        """

        self._line_taxed_discount = line_taxed_discount

    @property
    def line_untaxed_discount(self):
        """
        Gets the line_untaxed_discount of this LineForGoods.
        discount unconditional, This decimal 13 integers and 0 to 2 decimals

        :return: The line_untaxed_discount of this LineForGoods.
        :rtype: float
        """
        return self._line_untaxed_discount

    @line_untaxed_discount.setter
    def line_untaxed_discount(self, line_untaxed_discount):
        """
        Sets the line_untaxed_discount of this LineForGoods.
        discount unconditional, This decimal 13 integers and 0 to 2 decimals

        :param line_untaxed_discount: The line_untaxed_discount of this LineForGoods.
        :type: float
        """

        self._line_untaxed_discount = line_untaxed_discount

    @property
    def use_type(self):
        """
        Gets the use_type of this LineForGoods.
        This is a enumeration folowing table

        :return: The use_type of this LineForGoods.
        :rtype: str
        """
        return self._use_type

    @use_type.setter
    def use_type(self, use_type):
        """
        Sets the use_type of this LineForGoods.
        This is a enumeration folowing table

        :param use_type: The use_type of this LineForGoods.
        :type: str
        """
        allowed_values = ["use or consumption", "resale", "agricultural production", "production", "use or consumption on business establishment", "use or consumption on transporter service establishment", "use or consumption on communication service establishment", "use or consumption on demand by contract", "use or consumption on energy supplier establishment", "use or consumption of fuel transaction type exportation", "fixed assets", "resale export", "resale icms exempt", "resale buyer under the same icmsSt tax rule", "transport of goods that don't need invoice (nf)"]
        if use_type not in allowed_values:
            raise ValueError(
                "Invalid value for `use_type` ({0}), must be one of {1}"
                .format(use_type, allowed_values)
            )

        self._use_type = use_type

    @property
    def process_scenario(self):
        """
        Gets the process_scenario of this LineForGoods.
        Reference to process configurantion of this transaction, See ProcessScenario definition

        :return: The process_scenario of this LineForGoods.
        :rtype: str
        """
        return self._process_scenario

    @process_scenario.setter
    def process_scenario(self, process_scenario):
        """
        Sets the process_scenario of this LineForGoods.
        Reference to process configurantion of this transaction, See ProcessScenario definition

        :param process_scenario: The process_scenario of this LineForGoods.
        :type: str
        """
        if process_scenario is None:
            raise ValueError("Invalid value for `process_scenario`, must not be `None`")
        if process_scenario is not None and len(process_scenario) > 60:
            raise ValueError("Invalid value for `process_scenario`, length must be less than or equal to `60`")

        self._process_scenario = process_scenario

    @property
    def cfop(self):
        """
        Gets the cfop of this LineForGoods.
        Fiscal Operation Code of transport service

        :return: The cfop of this LineForGoods.
        :rtype: int
        """
        return self._cfop

    @cfop.setter
    def cfop(self, cfop):
        """
        Sets the cfop of this LineForGoods.
        Fiscal Operation Code of transport service

        :param cfop: The cfop of this LineForGoods.
        :type: int
        """

        self._cfop = cfop

    @property
    def has_stock_impact(self):
        """
        Gets the has_stock_impact of this LineForGoods.
        return if this transaction has stock impact for this process or CFOP

        :return: The has_stock_impact of this LineForGoods.
        :rtype: bool
        """
        return self._has_stock_impact

    @has_stock_impact.setter
    def has_stock_impact(self, has_stock_impact):
        """
        Sets the has_stock_impact of this LineForGoods.
        return if this transaction has stock impact for this process or CFOP

        :param has_stock_impact: The has_stock_impact of this LineForGoods.
        :type: bool
        """

        self._has_stock_impact = has_stock_impact

    @property
    def has_finantial_impact(self):
        """
        Gets the has_finantial_impact of this LineForGoods.
        return if this transaction has finantial impact for this process or CFOP

        :return: The has_finantial_impact of this LineForGoods.
        :rtype: bool
        """
        return self._has_finantial_impact

    @has_finantial_impact.setter
    def has_finantial_impact(self, has_finantial_impact):
        """
        Sets the has_finantial_impact of this LineForGoods.
        return if this transaction has finantial impact for this process or CFOP

        :param has_finantial_impact: The has_finantial_impact of this LineForGoods.
        :type: bool
        """

        self._has_finantial_impact = has_finantial_impact

    @property
    def freight_amount(self):
        """
        Gets the freight_amount of this LineForGoods.
        This decimal 13 integers and 0 to 2 decimals

        :return: The freight_amount of this LineForGoods.
        :rtype: float
        """
        return self._freight_amount

    @freight_amount.setter
    def freight_amount(self, freight_amount):
        """
        Sets the freight_amount of this LineForGoods.
        This decimal 13 integers and 0 to 2 decimals

        :param freight_amount: The freight_amount of this LineForGoods.
        :type: float
        """

        self._freight_amount = freight_amount

    @property
    def insurance_amount(self):
        """
        Gets the insurance_amount of this LineForGoods.
        This decimal 13 integers and 0 to 2 decimals

        :return: The insurance_amount of this LineForGoods.
        :rtype: float
        """
        return self._insurance_amount

    @insurance_amount.setter
    def insurance_amount(self, insurance_amount):
        """
        Sets the insurance_amount of this LineForGoods.
        This decimal 13 integers and 0 to 2 decimals

        :param insurance_amount: The insurance_amount of this LineForGoods.
        :type: float
        """

        self._insurance_amount = insurance_amount

    @property
    def other_cost_amount(self):
        """
        Gets the other_cost_amount of this LineForGoods.
        This decimal 13 integers and 0 to 2 decimals

        :return: The other_cost_amount of this LineForGoods.
        :rtype: float
        """
        return self._other_cost_amount

    @other_cost_amount.setter
    def other_cost_amount(self, other_cost_amount):
        """
        Sets the other_cost_amount of this LineForGoods.
        This decimal 13 integers and 0 to 2 decimals

        :param other_cost_amount: The other_cost_amount of this LineForGoods.
        :type: float
        """

        self._other_cost_amount = other_cost_amount

    @property
    def ind_tot_type(self):
        """
        Gets the ind_tot_type of this LineForGoods.
        The item value will compose the invoice total value.

        :return: The ind_tot_type of this LineForGoods.
        :rtype: bool
        """
        return self._ind_tot_type

    @ind_tot_type.setter
    def ind_tot_type(self, ind_tot_type):
        """
        Sets the ind_tot_type of this LineForGoods.
        The item value will compose the invoice total value.

        :param ind_tot_type: The ind_tot_type of this LineForGoods.
        :type: bool
        """

        self._ind_tot_type = ind_tot_type

    @property
    def order_number(self):
        """
        Gets the order_number of this LineForGoods.
        order number, information used for B2B control process

        :return: The order_number of this LineForGoods.
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """
        Sets the order_number of this LineForGoods.
        order number, information used for B2B control process

        :param order_number: The order_number of this LineForGoods.
        :type: str
        """
        if order_number is not None and len(order_number) > 15:
            raise ValueError("Invalid value for `order_number`, length must be less than or equal to `15`")
        if order_number is not None and len(order_number) < 1:
            raise ValueError("Invalid value for `order_number`, length must be greater than or equal to `1`")

        self._order_number = order_number

    @property
    def order_item_number(self):
        """
        Gets the order_item_number of this LineForGoods.
        number of the item from order number, information used for B2B control process

        :return: The order_item_number of this LineForGoods.
        :rtype: str
        """
        return self._order_item_number

    @order_item_number.setter
    def order_item_number(self, order_item_number):
        """
        Sets the order_item_number of this LineForGoods.
        number of the item from order number, information used for B2B control process

        :param order_item_number: The order_item_number of this LineForGoods.
        :type: str
        """
        if order_item_number is not None and not re.search('[0-9]{1,6}', order_item_number):
            raise ValueError("Invalid value for `order_item_number`, must be a follow pattern or equal to `/[0-9]{1,6}/`")

        self._order_item_number = order_item_number

    @property
    def fci_number(self):
        """
        Gets the fci_number of this LineForGoods.
        Gloal Unique identifier (Importation form)

        :return: The fci_number of this LineForGoods.
        :rtype: str
        """
        return self._fci_number

    @fci_number.setter
    def fci_number(self, fci_number):
        """
        Sets the fci_number of this LineForGoods.
        Gloal Unique identifier (Importation form)

        :param fci_number: The fci_number of this LineForGoods.
        :type: str
        """
        if fci_number is not None and not re.search('[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}', fci_number):
            raise ValueError("Invalid value for `fci_number`, must be a follow pattern or equal to `/[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/`")

        self._fci_number = fci_number

    @property
    def recopi_number(self):
        """
        Gets the recopi_number of this LineForGoods.
        RECOPI number

        :return: The recopi_number of this LineForGoods.
        :rtype: str
        """
        return self._recopi_number

    @recopi_number.setter
    def recopi_number(self, recopi_number):
        """
        Sets the recopi_number of this LineForGoods.
        RECOPI number

        :param recopi_number: The recopi_number of this LineForGoods.
        :type: str
        """
        if recopi_number is not None and len(recopi_number) > 20:
            raise ValueError("Invalid value for `recopi_number`, length must be less than or equal to `20`")
        if recopi_number is not None and not re.search('[0-9]{20}', recopi_number):
            raise ValueError("Invalid value for `recopi_number`, must be a follow pattern or equal to `/[0-9]{20}/`")

        self._recopi_number = recopi_number

    @property
    def inf_ad_prod(self):
        """
        Gets the inf_ad_prod of this LineForGoods.
        additional information about product (referenced standard, complementary info, etc)

        :return: The inf_ad_prod of this LineForGoods.
        :rtype: str
        """
        return self._inf_ad_prod

    @inf_ad_prod.setter
    def inf_ad_prod(self, inf_ad_prod):
        """
        Sets the inf_ad_prod of this LineForGoods.
        additional information about product (referenced standard, complementary info, etc)

        :param inf_ad_prod: The inf_ad_prod of this LineForGoods.
        :type: str
        """
        if inf_ad_prod is not None and len(inf_ad_prod) > 500:
            raise ValueError("Invalid value for `inf_ad_prod`, length must be less than or equal to `500`")

        self._inf_ad_prod = inf_ad_prod

    @property
    def vehicle(self):
        """
        Gets the vehicle of this LineForGoods.

        :return: The vehicle of this LineForGoods.
        :rtype: Vehicle
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """
        Sets the vehicle of this LineForGoods.

        :param vehicle: The vehicle of this LineForGoods.
        :type: Vehicle
        """

        self._vehicle = vehicle

    @property
    def medicine(self):
        """
        Gets the medicine of this LineForGoods.

        :return: The medicine of this LineForGoods.
        :rtype: Medicine
        """
        return self._medicine

    @medicine.setter
    def medicine(self, medicine):
        """
        Sets the medicine of this LineForGoods.

        :param medicine: The medicine of this LineForGoods.
        :type: Medicine
        """

        self._medicine = medicine

    @property
    def weapon(self):
        """
        Gets the weapon of this LineForGoods.

        :return: The weapon of this LineForGoods.
        :rtype: Weapon
        """
        return self._weapon

    @weapon.setter
    def weapon(self, weapon):
        """
        Sets the weapon of this LineForGoods.

        :param weapon: The weapon of this LineForGoods.
        :type: Weapon
        """

        self._weapon = weapon

    @property
    def fuel(self):
        """
        Gets the fuel of this LineForGoods.

        :return: The fuel of this LineForGoods.
        :rtype: Fuel
        """
        return self._fuel

    @fuel.setter
    def fuel(self, fuel):
        """
        Sets the fuel of this LineForGoods.

        :param fuel: The fuel of this LineForGoods.
        :type: Fuel
        """

        self._fuel = fuel

    @property
    def entity_is_icms_substitute(self):
        """
        Gets the entity_is_icms_substitute of this LineForGoods.
        Inform that for this item the Entity referenced is ICMS Substitute

        :return: The entity_is_icms_substitute of this LineForGoods.
        :rtype: bool
        """
        return self._entity_is_icms_substitute

    @entity_is_icms_substitute.setter
    def entity_is_icms_substitute(self, entity_is_icms_substitute):
        """
        Sets the entity_is_icms_substitute of this LineForGoods.
        Inform that for this item the Entity referenced is ICMS Substitute

        :param entity_is_icms_substitute: The entity_is_icms_substitute of this LineForGoods.
        :type: bool
        """

        self._entity_is_icms_substitute = entity_is_icms_substitute

    @property
    def is_transport_icms_withheld(self):
        """
        Gets the is_transport_icms_withheld of this LineForGoods.
        Inform that this item has ICMS withheld for transport value service.

        :return: The is_transport_icms_withheld of this LineForGoods.
        :rtype: bool
        """
        return self._is_transport_icms_withheld

    @is_transport_icms_withheld.setter
    def is_transport_icms_withheld(self, is_transport_icms_withheld):
        """
        Sets the is_transport_icms_withheld of this LineForGoods.
        Inform that this item has ICMS withheld for transport value service.

        :param is_transport_icms_withheld: The is_transport_icms_withheld of this LineForGoods.
        :type: bool
        """

        self._is_transport_icms_withheld = is_transport_icms_withheld

    @property
    def icms_tax_relief(self):
        """
        Gets the icms_tax_relief of this LineForGoods.

        :return: The icms_tax_relief of this LineForGoods.
        :rtype: LineForGoodsIcmsTaxRelief
        """
        return self._icms_tax_relief

    @icms_tax_relief.setter
    def icms_tax_relief(self, icms_tax_relief):
        """
        Sets the icms_tax_relief of this LineForGoods.

        :param icms_tax_relief: The icms_tax_relief of this LineForGoods.
        :type: LineForGoodsIcmsTaxRelief
        """

        self._icms_tax_relief = icms_tax_relief

    @property
    def export(self):
        """
        Gets the export of this LineForGoods.
        Exportation detail

        :return: The export of this LineForGoods.
        :rtype: list[LineForGoodsExport]
        """
        return self._export

    @export.setter
    def export(self, export):
        """
        Sets the export of this LineForGoods.
        Exportation detail

        :param export: The export of this LineForGoods.
        :type: list[LineForGoodsExport]
        """

        self._export = export

    @property
    def di(self):
        """
        Gets the di of this LineForGoods.
        Import declaration

        :return: The di of this LineForGoods.
        :rtype: list[LineForGoodsDi]
        """
        return self._di

    @di.setter
    def di(self, di):
        """
        Sets the di of this LineForGoods.
        Import declaration

        :param di: The di of this LineForGoods.
        :type: list[LineForGoodsDi]
        """

        self._di = di

    @property
    def calculated_tax(self):
        """
        Gets the calculated_tax of this LineForGoods.

        :return: The calculated_tax of this LineForGoods.
        :rtype: LineForGoodsCalculatedTax
        """
        return self._calculated_tax

    @calculated_tax.setter
    def calculated_tax(self, calculated_tax):
        """
        Sets the calculated_tax of this LineForGoods.

        :param calculated_tax: The calculated_tax of this LineForGoods.
        :type: LineForGoodsCalculatedTax
        """

        self._calculated_tax = calculated_tax

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
