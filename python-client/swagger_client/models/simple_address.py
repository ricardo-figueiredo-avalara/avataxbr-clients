# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SimpleAddress(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, line1=None, line2=None, line3=None, city=None, zipcode=None, state=None, country='BRA'):
        """
        SimpleAddress - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'line1': 'str',
            'line2': 'str',
            'line3': 'str',
            'city': 'str',
            'zipcode': 'str',
            'state': 'StateEnum',
            'country': 'str'
        }

        self.attribute_map = {
            'line1': 'line1',
            'line2': 'line2',
            'line3': 'line3',
            'city': 'city',
            'zipcode': 'zipcode',
            'state': 'state',
            'country': 'country'
        }

        self._line1 = line1
        self._line2 = line2
        self._line3 = line3
        self._city = city
        self._zipcode = zipcode
        self._state = state
        self._country = country

    @property
    def line1(self):
        """
        Gets the line1 of this SimpleAddress.
        Address

        :return: The line1 of this SimpleAddress.
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """
        Sets the line1 of this SimpleAddress.
        Address

        :param line1: The line1 of this SimpleAddress.
        :type: str
        """
        if line1 is None:
            raise ValueError("Invalid value for `line1`, must not be `None`")
        if line1 is not None and len(line1) > 60:
            raise ValueError("Invalid value for `line1`, length must be less than or equal to `60`")

        self._line1 = line1

    @property
    def line2(self):
        """
        Gets the line2 of this SimpleAddress.
        Number

        :return: The line2 of this SimpleAddress.
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """
        Sets the line2 of this SimpleAddress.
        Number

        :param line2: The line2 of this SimpleAddress.
        :type: str
        """
        if line2 is None:
            raise ValueError("Invalid value for `line2`, must not be `None`")
        if line2 is not None and len(line2) > 60:
            raise ValueError("Invalid value for `line2`, length must be less than or equal to `60`")

        self._line2 = line2

    @property
    def line3(self):
        """
        Gets the line3 of this SimpleAddress.
        District

        :return: The line3 of this SimpleAddress.
        :rtype: str
        """
        return self._line3

    @line3.setter
    def line3(self, line3):
        """
        Sets the line3 of this SimpleAddress.
        District

        :param line3: The line3 of this SimpleAddress.
        :type: str
        """
        if line3 is None:
            raise ValueError("Invalid value for `line3`, must not be `None`")
        if line3 is not None and len(line3) > 60:
            raise ValueError("Invalid value for `line3`, length must be less than or equal to `60`")

        self._line3 = line3

    @property
    def city(self):
        """
        Gets the city of this SimpleAddress.

        :return: The city of this SimpleAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this SimpleAddress.

        :param city: The city of this SimpleAddress.
        :type: str
        """
        if city is not None and len(city) > 60:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `60`")

        self._city = city

    @property
    def zipcode(self):
        """
        Gets the zipcode of this SimpleAddress.
        Brazilian Zip Code

        :return: The zipcode of this SimpleAddress.
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """
        Sets the zipcode of this SimpleAddress.
        Brazilian Zip Code

        :param zipcode: The zipcode of this SimpleAddress.
        :type: str
        """
        if zipcode is None:
            raise ValueError("Invalid value for `zipcode`, must not be `None`")
        if zipcode is not None and not re.search('^(\\d{8}|\\d{5}\\-\\d{3})$', zipcode):
            raise ValueError("Invalid value for `zipcode`, must be a follow pattern or equal to `/^(\\d{8}|\\d{5}\\-\\d{3})$/`")

        self._zipcode = zipcode

    @property
    def state(self):
        """
        Gets the state of this SimpleAddress.

        :return: The state of this SimpleAddress.
        :rtype: StateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this SimpleAddress.

        :param state: The state of this SimpleAddress.
        :type: StateEnum
        """

        self._state = state

    @property
    def country(self):
        """
        Gets the country of this SimpleAddress.
        Use ISO 3166-1 alpha-3 codes

        :return: The country of this SimpleAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this SimpleAddress.
        Use ISO 3166-1 alpha-3 codes

        :param country: The country of this SimpleAddress.
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")
        if country is not None and len(country) > 3:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `3`")

        self._country = country

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
