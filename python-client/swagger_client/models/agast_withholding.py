# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AgastWithholding(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, irrf=None, irrf_legal_reason=None, inss_subject_to_discharge=None, inss=None, inss_legal_reason=None, in_ss_for_simples=None, inss_for_simples_legal_reason=None, pis=None, cofins=None, csll=None):
        """
        AgastWithholding - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'irrf': 'bool',
            'irrf_legal_reason': 'str',
            'inss_subject_to_discharge': 'bool',
            'inss': 'bool',
            'inss_legal_reason': 'str',
            'in_ss_for_simples': 'bool',
            'inss_for_simples_legal_reason': 'str',
            'pis': 'AgastWithholdingPIS',
            'cofins': 'AgastWithholdingCOFINS',
            'csll': 'AgastWithholdingCSLL'
        }

        self.attribute_map = {
            'irrf': 'IRRF',
            'irrf_legal_reason': 'IRRFLegalReason',
            'inss_subject_to_discharge': 'INSSSubjectToDischarge',
            'inss': 'INSS',
            'inss_legal_reason': 'INSSLegalReason',
            'in_ss_for_simples': 'INSsForSimples',
            'inss_for_simples_legal_reason': 'INSSForSimplesLegalReason',
            'pis': 'PIS',
            'cofins': 'COFINS',
            'csll': 'CSLL'
        }

        self._irrf = irrf
        self._irrf_legal_reason = irrf_legal_reason
        self._inss_subject_to_discharge = inss_subject_to_discharge
        self._inss = inss
        self._inss_legal_reason = inss_legal_reason
        self._in_ss_for_simples = in_ss_for_simples
        self._inss_for_simples_legal_reason = inss_for_simples_legal_reason
        self._pis = pis
        self._cofins = cofins
        self._csll = csll

    @property
    def irrf(self):
        """
        Gets the irrf of this AgastWithholding.

        :return: The irrf of this AgastWithholding.
        :rtype: bool
        """
        return self._irrf

    @irrf.setter
    def irrf(self, irrf):
        """
        Sets the irrf of this AgastWithholding.

        :param irrf: The irrf of this AgastWithholding.
        :type: bool
        """

        self._irrf = irrf

    @property
    def irrf_legal_reason(self):
        """
        Gets the irrf_legal_reason of this AgastWithholding.
        reference id to TaxLegalReason

        :return: The irrf_legal_reason of this AgastWithholding.
        :rtype: str
        """
        return self._irrf_legal_reason

    @irrf_legal_reason.setter
    def irrf_legal_reason(self, irrf_legal_reason):
        """
        Sets the irrf_legal_reason of this AgastWithholding.
        reference id to TaxLegalReason

        :param irrf_legal_reason: The irrf_legal_reason of this AgastWithholding.
        :type: str
        """
        if irrf_legal_reason is not None and len(irrf_legal_reason) > 60:
            raise ValueError("Invalid value for `irrf_legal_reason`, length must be less than or equal to `60`")

        self._irrf_legal_reason = irrf_legal_reason

    @property
    def inss_subject_to_discharge(self):
        """
        Gets the inss_subject_to_discharge of this AgastWithholding.
        Item subjecto to payroll discharge Item sujeto à desoneraçãode folha de pagamento 

        :return: The inss_subject_to_discharge of this AgastWithholding.
        :rtype: bool
        """
        return self._inss_subject_to_discharge

    @inss_subject_to_discharge.setter
    def inss_subject_to_discharge(self, inss_subject_to_discharge):
        """
        Sets the inss_subject_to_discharge of this AgastWithholding.
        Item subjecto to payroll discharge Item sujeto à desoneraçãode folha de pagamento 

        :param inss_subject_to_discharge: The inss_subject_to_discharge of this AgastWithholding.
        :type: bool
        """

        self._inss_subject_to_discharge = inss_subject_to_discharge

    @property
    def inss(self):
        """
        Gets the inss of this AgastWithholding.

        :return: The inss of this AgastWithholding.
        :rtype: bool
        """
        return self._inss

    @inss.setter
    def inss(self, inss):
        """
        Sets the inss of this AgastWithholding.

        :param inss: The inss of this AgastWithholding.
        :type: bool
        """

        self._inss = inss

    @property
    def inss_legal_reason(self):
        """
        Gets the inss_legal_reason of this AgastWithholding.
        reference id to TaxLegalReason

        :return: The inss_legal_reason of this AgastWithholding.
        :rtype: str
        """
        return self._inss_legal_reason

    @inss_legal_reason.setter
    def inss_legal_reason(self, inss_legal_reason):
        """
        Sets the inss_legal_reason of this AgastWithholding.
        reference id to TaxLegalReason

        :param inss_legal_reason: The inss_legal_reason of this AgastWithholding.
        :type: str
        """
        if inss_legal_reason is not None and len(inss_legal_reason) > 60:
            raise ValueError("Invalid value for `inss_legal_reason`, length must be less than or equal to `60`")

        self._inss_legal_reason = inss_legal_reason

    @property
    def in_ss_for_simples(self):
        """
        Gets the in_ss_for_simples of this AgastWithholding.

        :return: The in_ss_for_simples of this AgastWithholding.
        :rtype: bool
        """
        return self._in_ss_for_simples

    @in_ss_for_simples.setter
    def in_ss_for_simples(self, in_ss_for_simples):
        """
        Sets the in_ss_for_simples of this AgastWithholding.

        :param in_ss_for_simples: The in_ss_for_simples of this AgastWithholding.
        :type: bool
        """

        self._in_ss_for_simples = in_ss_for_simples

    @property
    def inss_for_simples_legal_reason(self):
        """
        Gets the inss_for_simples_legal_reason of this AgastWithholding.
        reference id to TaxLegalReason

        :return: The inss_for_simples_legal_reason of this AgastWithholding.
        :rtype: str
        """
        return self._inss_for_simples_legal_reason

    @inss_for_simples_legal_reason.setter
    def inss_for_simples_legal_reason(self, inss_for_simples_legal_reason):
        """
        Sets the inss_for_simples_legal_reason of this AgastWithholding.
        reference id to TaxLegalReason

        :param inss_for_simples_legal_reason: The inss_for_simples_legal_reason of this AgastWithholding.
        :type: str
        """
        if inss_for_simples_legal_reason is not None and len(inss_for_simples_legal_reason) > 60:
            raise ValueError("Invalid value for `inss_for_simples_legal_reason`, length must be less than or equal to `60`")

        self._inss_for_simples_legal_reason = inss_for_simples_legal_reason

    @property
    def pis(self):
        """
        Gets the pis of this AgastWithholding.

        :return: The pis of this AgastWithholding.
        :rtype: AgastWithholdingPIS
        """
        return self._pis

    @pis.setter
    def pis(self, pis):
        """
        Sets the pis of this AgastWithholding.

        :param pis: The pis of this AgastWithholding.
        :type: AgastWithholdingPIS
        """

        self._pis = pis

    @property
    def cofins(self):
        """
        Gets the cofins of this AgastWithholding.

        :return: The cofins of this AgastWithholding.
        :rtype: AgastWithholdingCOFINS
        """
        return self._cofins

    @cofins.setter
    def cofins(self, cofins):
        """
        Sets the cofins of this AgastWithholding.

        :param cofins: The cofins of this AgastWithholding.
        :type: AgastWithholdingCOFINS
        """

        self._cofins = cofins

    @property
    def csll(self):
        """
        Gets the csll of this AgastWithholding.

        :return: The csll of this AgastWithholding.
        :rtype: AgastWithholdingCSLL
        """
        return self._csll

    @csll.setter
    def csll(self, csll):
        """
        Sets the csll of this AgastWithholding.

        :param csll: The csll of this AgastWithholding.
        :type: AgastWithholdingCSLL
        """

        self._csll = csll

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
