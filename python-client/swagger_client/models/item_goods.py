# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ItemGoods(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, company_id=None, code=None, agast=None, description=None, seal_code=None, n_fci=None, is_icms_st_substitute=None, source=None, product_type=None, manufacturer_equivalent=None, appropriate_ip_icredit_when_in_going=None, usually_appropriate_piscofins_credit=None, is_pis_cofins_estimated_credit=None, piscofins_revenue_type=None, icms_base_discount_for_mono_phase_social_contr=None, cean=None, nve=None, sales_unit=None, sales_unit_ip_ifactor=None, sales_unit_icmsfactor=None, sales_unit_icms_stfactor=None, sales_unit_pis_cofinsfactor=None, purchase_unit=None, purchase_unit_ip_ifactor=None, purchase_unit_icmsfactor=None, purchase_unit_icms_stfactor=None, purchase_unit_pis_cofinsfactor=None, first_use=None):
        """
        ItemGoods - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'company_id': 'str',
            'code': 'str',
            'agast': 'str',
            'description': 'str',
            'seal_code': 'str',
            'n_fci': 'str',
            'is_icms_st_substitute': 'bool',
            'source': 'str',
            'product_type': 'str',
            'manufacturer_equivalent': 'bool',
            'appropriate_ip_icredit_when_in_going': 'bool',
            'usually_appropriate_piscofins_credit': 'bool',
            'is_pis_cofins_estimated_credit': 'bool',
            'piscofins_revenue_type': 'str',
            'icms_base_discount_for_mono_phase_social_contr': 'float',
            'cean': 'str',
            'nve': 'str',
            'sales_unit': 'str',
            'sales_unit_ip_ifactor': 'float',
            'sales_unit_icmsfactor': 'float',
            'sales_unit_icms_stfactor': 'float',
            'sales_unit_pis_cofinsfactor': 'float',
            'purchase_unit': 'str',
            'purchase_unit_ip_ifactor': 'float',
            'purchase_unit_icmsfactor': 'float',
            'purchase_unit_icms_stfactor': 'float',
            'purchase_unit_pis_cofinsfactor': 'float',
            'first_use': 'bool'
        }

        self.attribute_map = {
            'company_id': 'companyId',
            'code': 'code',
            'agast': 'agast',
            'description': 'description',
            'seal_code': 'sealCode',
            'n_fci': 'nFCI',
            'is_icms_st_substitute': 'isIcmsStSubstitute',
            'source': 'source',
            'product_type': 'productType',
            'manufacturer_equivalent': 'manufacturerEquivalent',
            'appropriate_ip_icredit_when_in_going': 'appropriateIPIcreditWhenInGoing',
            'usually_appropriate_piscofins_credit': 'usuallyAppropriatePISCOFINSCredit',
            'is_pis_cofins_estimated_credit': 'isPisCofinsEstimatedCredit',
            'piscofins_revenue_type': 'piscofinsRevenueType',
            'icms_base_discount_for_mono_phase_social_contr': 'icmsBaseDiscountForMonoPhaseSocialContr',
            'cean': 'cean',
            'nve': 'nve',
            'sales_unit': 'salesUnit',
            'sales_unit_ip_ifactor': 'salesUnitIPIfactor',
            'sales_unit_icmsfactor': 'salesUnitIcmsfactor',
            'sales_unit_icms_stfactor': 'salesUnitIcmsStfactor',
            'sales_unit_pis_cofinsfactor': 'salesUnitPisCofinsfactor',
            'purchase_unit': 'purchaseUnit',
            'purchase_unit_ip_ifactor': 'purchaseUnitIPIfactor',
            'purchase_unit_icmsfactor': 'purchaseUnitIcmsfactor',
            'purchase_unit_icms_stfactor': 'purchaseUnitIcmsStfactor',
            'purchase_unit_pis_cofinsfactor': 'purchaseUnitPisCofinsfactor',
            'first_use': 'firstUse'
        }

        self._company_id = company_id
        self._code = code
        self._agast = agast
        self._description = description
        self._seal_code = seal_code
        self._n_fci = n_fci
        self._is_icms_st_substitute = is_icms_st_substitute
        self._source = source
        self._product_type = product_type
        self._manufacturer_equivalent = manufacturer_equivalent
        self._appropriate_ip_icredit_when_in_going = appropriate_ip_icredit_when_in_going
        self._usually_appropriate_piscofins_credit = usually_appropriate_piscofins_credit
        self._is_pis_cofins_estimated_credit = is_pis_cofins_estimated_credit
        self._piscofins_revenue_type = piscofins_revenue_type
        self._icms_base_discount_for_mono_phase_social_contr = icms_base_discount_for_mono_phase_social_contr
        self._cean = cean
        self._nve = nve
        self._sales_unit = sales_unit
        self._sales_unit_ip_ifactor = sales_unit_ip_ifactor
        self._sales_unit_icmsfactor = sales_unit_icmsfactor
        self._sales_unit_icms_stfactor = sales_unit_icms_stfactor
        self._sales_unit_pis_cofinsfactor = sales_unit_pis_cofinsfactor
        self._purchase_unit = purchase_unit
        self._purchase_unit_ip_ifactor = purchase_unit_ip_ifactor
        self._purchase_unit_icmsfactor = purchase_unit_icmsfactor
        self._purchase_unit_icms_stfactor = purchase_unit_icms_stfactor
        self._purchase_unit_pis_cofinsfactor = purchase_unit_pis_cofinsfactor
        self._first_use = first_use

    @property
    def company_id(self):
        """
        Gets the company_id of this ItemGoods.
        Company ID

        :return: The company_id of this ItemGoods.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """
        Sets the company_id of this ItemGoods.
        Company ID

        :param company_id: The company_id of this ItemGoods.
        :type: str
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")

        self._company_id = company_id

    @property
    def code(self):
        """
        Gets the code of this ItemGoods.
        ERP Code

        :return: The code of this ItemGoods.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this ItemGoods.
        ERP Code

        :param code: The code of this ItemGoods.
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")
        if code is not None and len(code) > 60:
            raise ValueError("Invalid value for `code`, length must be less than or equal to `60`")

        self._code = code

    @property
    def agast(self):
        """
        Gets the agast of this ItemGoods.
        Agast Code

        :return: The agast of this ItemGoods.
        :rtype: str
        """
        return self._agast

    @agast.setter
    def agast(self, agast):
        """
        Sets the agast of this ItemGoods.
        Agast Code

        :param agast: The agast of this ItemGoods.
        :type: str
        """
        if agast is None:
            raise ValueError("Invalid value for `agast`, must not be `None`")
        if agast is not None and len(agast) > 60:
            raise ValueError("Invalid value for `agast`, length must be less than or equal to `60`")

        self._agast = agast

    @property
    def description(self):
        """
        Gets the description of this ItemGoods.
        Item Description

        :return: The description of this ItemGoods.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ItemGoods.
        Item Description

        :param description: The description of this ItemGoods.
        :type: str
        """
        if description is not None and len(description) > 60:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `60`")

        self._description = description

    @property
    def seal_code(self):
        """
        Gets the seal_code of this ItemGoods.
        Seal Code for ipi tax control (código do selo para controle de IPI)

        :return: The seal_code of this ItemGoods.
        :rtype: str
        """
        return self._seal_code

    @seal_code.setter
    def seal_code(self, seal_code):
        """
        Sets the seal_code of this ItemGoods.
        Seal Code for ipi tax control (código do selo para controle de IPI)

        :param seal_code: The seal_code of this ItemGoods.
        :type: str
        """
        if seal_code is None:
            raise ValueError("Invalid value for `seal_code`, must not be `None`")
        if seal_code is not None and len(seal_code) > 60:
            raise ValueError("Invalid value for `seal_code`, length must be less than or equal to `60`")

        self._seal_code = seal_code

    @property
    def n_fci(self):
        """
        Gets the n_fci of this ItemGoods.
        Importation content form number (Número de controle da FCI - Ficha de Conteúdo de Importação)

        :return: The n_fci of this ItemGoods.
        :rtype: str
        """
        return self._n_fci

    @n_fci.setter
    def n_fci(self, n_fci):
        """
        Sets the n_fci of this ItemGoods.
        Importation content form number (Número de controle da FCI - Ficha de Conteúdo de Importação)

        :param n_fci: The n_fci of this ItemGoods.
        :type: str
        """
        if n_fci is not None and not re.search('[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}', n_fci):
            raise ValueError("Invalid value for `n_fci`, must be a follow pattern or equal to `/[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/`")

        self._n_fci = n_fci

    @property
    def is_icms_st_substitute(self):
        """
        Gets the is_icms_st_substitute of this ItemGoods.
        this field inform that this merchandise or product is ICMS Substitute Must be used when the item is for resale and the company will assume the role of ICMS Substitute (wholesaler, retailer, distributor). Example: when Importing some product the company does not pay IcmsSt at the time of customs clearance but when selling sale the item. Deverá ser utilizado quando a empresa que irá vender a mercadoria sujeita ao ICMS ST for o SUBSTITUTO TRIBUTÁRIO (Distribuidor, atacadista e varejista), como por exemplo das mercadorias IMPORTADAS, neste sentido, a empresa não irá pagar o ICMS ST no desembaraço aduaneiro e irá recolher quando for vender as mesmas. 

        :return: The is_icms_st_substitute of this ItemGoods.
        :rtype: bool
        """
        return self._is_icms_st_substitute

    @is_icms_st_substitute.setter
    def is_icms_st_substitute(self, is_icms_st_substitute):
        """
        Sets the is_icms_st_substitute of this ItemGoods.
        this field inform that this merchandise or product is ICMS Substitute Must be used when the item is for resale and the company will assume the role of ICMS Substitute (wholesaler, retailer, distributor). Example: when Importing some product the company does not pay IcmsSt at the time of customs clearance but when selling sale the item. Deverá ser utilizado quando a empresa que irá vender a mercadoria sujeita ao ICMS ST for o SUBSTITUTO TRIBUTÁRIO (Distribuidor, atacadista e varejista), como por exemplo das mercadorias IMPORTADAS, neste sentido, a empresa não irá pagar o ICMS ST no desembaraço aduaneiro e irá recolher quando for vender as mesmas. 

        :param is_icms_st_substitute: The is_icms_st_substitute of this ItemGoods.
        :type: bool
        """

        self._is_icms_st_substitute = is_icms_st_substitute

    @property
    def source(self):
        """
        Gets the source of this ItemGoods.
        - '0' # National goods - except those treated in codes 3,4, 5 and 8 - '1' # Foreign goods - Imported directly by seller, except those in code 6 - '2' # Foreign goods - Acquired in the internal market (inside Brazil), except those in code 7 - '3' # National goods - Merchandise or goods with imported content above 40% and with less than or equal to 70% - '4' # National goods from production following 'standard basic processes' as stablished by legislation (standard basic processes are devised to separate simple assembly from manufaturing processes) - '5' # National goods - Merchandise or goods with imported content equal or below 40% - '6' # Foreign goods - Directly imported by Seller, without a National Equivalent as listed by Comex and natural gas - '7' # Foreign goods - Acquired inside Brazil, without a National Equivalent  as listed by Comex and natural gas - '8' # National goods - Merchandise or goods with imported content above 70% 

        :return: The source of this ItemGoods.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this ItemGoods.
        - '0' # National goods - except those treated in codes 3,4, 5 and 8 - '1' # Foreign goods - Imported directly by seller, except those in code 6 - '2' # Foreign goods - Acquired in the internal market (inside Brazil), except those in code 7 - '3' # National goods - Merchandise or goods with imported content above 40% and with less than or equal to 70% - '4' # National goods from production following 'standard basic processes' as stablished by legislation (standard basic processes are devised to separate simple assembly from manufaturing processes) - '5' # National goods - Merchandise or goods with imported content equal or below 40% - '6' # Foreign goods - Directly imported by Seller, without a National Equivalent as listed by Comex and natural gas - '7' # Foreign goods - Acquired inside Brazil, without a National Equivalent  as listed by Comex and natural gas - '8' # National goods - Merchandise or goods with imported content above 70% 

        :param source: The source of this ItemGoods.
        :type: str
        """
        allowed_values = ["0", "1", "2", "3", "4", "5", "6", "7", "8"]
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def product_type(self):
        """
        Gets the product_type of this ItemGoods.

        :return: The product_type of this ItemGoods.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """
        Sets the product_type of this ItemGoods.

        :param product_type: The product_type of this ItemGoods.
        :type: str
        """
        allowed_values = ["FOR PRODUCT", "FOR MERCHANDISE", "NO RESTRICTION", "SERVICE", "FEEDSTOCK", "FIXED ASSETS"]
        if product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `product_type` ({0}), must be one of {1}"
                .format(product_type, allowed_values)
            )

        self._product_type = product_type

    @property
    def manufacturer_equivalent(self):
        """
        Gets the manufacturer_equivalent of this ItemGoods.
        Item is merchandise but will be considered product

        :return: The manufacturer_equivalent of this ItemGoods.
        :rtype: bool
        """
        return self._manufacturer_equivalent

    @manufacturer_equivalent.setter
    def manufacturer_equivalent(self, manufacturer_equivalent):
        """
        Sets the manufacturer_equivalent of this ItemGoods.
        Item is merchandise but will be considered product

        :param manufacturer_equivalent: The manufacturer_equivalent of this ItemGoods.
        :type: bool
        """

        self._manufacturer_equivalent = manufacturer_equivalent

    @property
    def appropriate_ip_icredit_when_in_going(self):
        """
        Gets the appropriate_ip_icredit_when_in_going of this ItemGoods.
        Inform that this item will have rights to aprropriate IPI credit

        :return: The appropriate_ip_icredit_when_in_going of this ItemGoods.
        :rtype: bool
        """
        return self._appropriate_ip_icredit_when_in_going

    @appropriate_ip_icredit_when_in_going.setter
    def appropriate_ip_icredit_when_in_going(self, appropriate_ip_icredit_when_in_going):
        """
        Sets the appropriate_ip_icredit_when_in_going of this ItemGoods.
        Inform that this item will have rights to aprropriate IPI credit

        :param appropriate_ip_icredit_when_in_going: The appropriate_ip_icredit_when_in_going of this ItemGoods.
        :type: bool
        """

        self._appropriate_ip_icredit_when_in_going = appropriate_ip_icredit_when_in_going

    @property
    def usually_appropriate_piscofins_credit(self):
        """
        Gets the usually_appropriate_piscofins_credit of this ItemGoods.
        Subject to appropriate PIS/COFINS credit, when NO CUMULATIVE

        :return: The usually_appropriate_piscofins_credit of this ItemGoods.
        :rtype: bool
        """
        return self._usually_appropriate_piscofins_credit

    @usually_appropriate_piscofins_credit.setter
    def usually_appropriate_piscofins_credit(self, usually_appropriate_piscofins_credit):
        """
        Sets the usually_appropriate_piscofins_credit of this ItemGoods.
        Subject to appropriate PIS/COFINS credit, when NO CUMULATIVE

        :param usually_appropriate_piscofins_credit: The usually_appropriate_piscofins_credit of this ItemGoods.
        :type: bool
        """

        self._usually_appropriate_piscofins_credit = usually_appropriate_piscofins_credit

    @property
    def is_pis_cofins_estimated_credit(self):
        """
        Gets the is_pis_cofins_estimated_credit of this ItemGoods.
        The credit PIS/COFINS is subject to purchase form companies, but exist some exceptions, when the credit will be a estimated amount

        :return: The is_pis_cofins_estimated_credit of this ItemGoods.
        :rtype: bool
        """
        return self._is_pis_cofins_estimated_credit

    @is_pis_cofins_estimated_credit.setter
    def is_pis_cofins_estimated_credit(self, is_pis_cofins_estimated_credit):
        """
        Sets the is_pis_cofins_estimated_credit of this ItemGoods.
        The credit PIS/COFINS is subject to purchase form companies, but exist some exceptions, when the credit will be a estimated amount

        :param is_pis_cofins_estimated_credit: The is_pis_cofins_estimated_credit of this ItemGoods.
        :type: bool
        """

        self._is_pis_cofins_estimated_credit = is_pis_cofins_estimated_credit

    @property
    def piscofins_revenue_type(self):
        """
        Gets the piscofins_revenue_type of this ItemGoods.
        - '01' # Vinculada Exclusivamente a Receita Tributada no Mercado Interno - '02' # Exclusivamente a Receita Não Tributada no Mercado Interno - '03' # Exclusivamente a Receita de Exportação - '04' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno - '05' # Vinculada a Receitas Tributadas no Mercado Interno e de Exportação - '06' # Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação - '07' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação 

        :return: The piscofins_revenue_type of this ItemGoods.
        :rtype: str
        """
        return self._piscofins_revenue_type

    @piscofins_revenue_type.setter
    def piscofins_revenue_type(self, piscofins_revenue_type):
        """
        Sets the piscofins_revenue_type of this ItemGoods.
        - '01' # Vinculada Exclusivamente a Receita Tributada no Mercado Interno - '02' # Exclusivamente a Receita Não Tributada no Mercado Interno - '03' # Exclusivamente a Receita de Exportação - '04' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno - '05' # Vinculada a Receitas Tributadas no Mercado Interno e de Exportação - '06' # Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação - '07' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação 

        :param piscofins_revenue_type: The piscofins_revenue_type of this ItemGoods.
        :type: str
        """
        allowed_values = ["01", "02", "03", "04", "05", "06", "07"]
        if piscofins_revenue_type not in allowed_values:
            raise ValueError(
                "Invalid value for `piscofins_revenue_type` ({0}), must be one of {1}"
                .format(piscofins_revenue_type, allowed_values)
            )

        self._piscofins_revenue_type = piscofins_revenue_type

    @property
    def icms_base_discount_for_mono_phase_social_contr(self):
        """
        Gets the icms_base_discount_for_mono_phase_social_contr of this ItemGoods.
        Discount allowed on icms base when PIS/COFINS are Monophase

        :return: The icms_base_discount_for_mono_phase_social_contr of this ItemGoods.
        :rtype: float
        """
        return self._icms_base_discount_for_mono_phase_social_contr

    @icms_base_discount_for_mono_phase_social_contr.setter
    def icms_base_discount_for_mono_phase_social_contr(self, icms_base_discount_for_mono_phase_social_contr):
        """
        Sets the icms_base_discount_for_mono_phase_social_contr of this ItemGoods.
        Discount allowed on icms base when PIS/COFINS are Monophase

        :param icms_base_discount_for_mono_phase_social_contr: The icms_base_discount_for_mono_phase_social_contr of this ItemGoods.
        :type: float
        """

        self._icms_base_discount_for_mono_phase_social_contr = icms_base_discount_for_mono_phase_social_contr

    @property
    def cean(self):
        """
        Gets the cean of this ItemGoods.
        GTIN NUMBER

        :return: The cean of this ItemGoods.
        :rtype: str
        """
        return self._cean

    @cean.setter
    def cean(self, cean):
        """
        Sets the cean of this ItemGoods.
        GTIN NUMBER

        :param cean: The cean of this ItemGoods.
        :type: str
        """
        if cean is not None and not re.search('[0-9]{0}|[0-9]{8}|[0-9]{12,14}', cean):
            raise ValueError("Invalid value for `cean`, must be a follow pattern or equal to `/[0-9]{0}|[0-9]{8}|[0-9]{12,14}/`")

        self._cean = cean

    @property
    def nve(self):
        """
        Gets the nve of this ItemGoods.
        Nomenclatura de Valor aduaneio e Estatístico - NCM extension code

        :return: The nve of this ItemGoods.
        :rtype: str
        """
        return self._nve

    @nve.setter
    def nve(self, nve):
        """
        Sets the nve of this ItemGoods.
        Nomenclatura de Valor aduaneio e Estatístico - NCM extension code

        :param nve: The nve of this ItemGoods.
        :type: str
        """
        if nve is not None and not re.search('[A-Z]{2}[0-9]{4}', nve):
            raise ValueError("Invalid value for `nve`, must be a follow pattern or equal to `/[A-Z]{2}[0-9]{4}/`")

        self._nve = nve

    @property
    def sales_unit(self):
        """
        Gets the sales_unit of this ItemGoods.

        :return: The sales_unit of this ItemGoods.
        :rtype: str
        """
        return self._sales_unit

    @sales_unit.setter
    def sales_unit(self, sales_unit):
        """
        Sets the sales_unit of this ItemGoods.

        :param sales_unit: The sales_unit of this ItemGoods.
        :type: str
        """
        if sales_unit is not None and len(sales_unit) > 6:
            raise ValueError("Invalid value for `sales_unit`, length must be less than or equal to `6`")

        self._sales_unit = sales_unit

    @property
    def sales_unit_ip_ifactor(self):
        """
        Gets the sales_unit_ip_ifactor of this ItemGoods.
        factor to convert sales quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)

        :return: The sales_unit_ip_ifactor of this ItemGoods.
        :rtype: float
        """
        return self._sales_unit_ip_ifactor

    @sales_unit_ip_ifactor.setter
    def sales_unit_ip_ifactor(self, sales_unit_ip_ifactor):
        """
        Sets the sales_unit_ip_ifactor of this ItemGoods.
        factor to convert sales quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)

        :param sales_unit_ip_ifactor: The sales_unit_ip_ifactor of this ItemGoods.
        :type: float
        """

        self._sales_unit_ip_ifactor = sales_unit_ip_ifactor

    @property
    def sales_unit_icmsfactor(self):
        """
        Gets the sales_unit_icmsfactor of this ItemGoods.
        factor to convert sales quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)

        :return: The sales_unit_icmsfactor of this ItemGoods.
        :rtype: float
        """
        return self._sales_unit_icmsfactor

    @sales_unit_icmsfactor.setter
    def sales_unit_icmsfactor(self, sales_unit_icmsfactor):
        """
        Sets the sales_unit_icmsfactor of this ItemGoods.
        factor to convert sales quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)

        :param sales_unit_icmsfactor: The sales_unit_icmsfactor of this ItemGoods.
        :type: float
        """

        self._sales_unit_icmsfactor = sales_unit_icmsfactor

    @property
    def sales_unit_icms_stfactor(self):
        """
        Gets the sales_unit_icms_stfactor of this ItemGoods.
        factor to convert sales quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)

        :return: The sales_unit_icms_stfactor of this ItemGoods.
        :rtype: float
        """
        return self._sales_unit_icms_stfactor

    @sales_unit_icms_stfactor.setter
    def sales_unit_icms_stfactor(self, sales_unit_icms_stfactor):
        """
        Sets the sales_unit_icms_stfactor of this ItemGoods.
        factor to convert sales quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)

        :param sales_unit_icms_stfactor: The sales_unit_icms_stfactor of this ItemGoods.
        :type: float
        """

        self._sales_unit_icms_stfactor = sales_unit_icms_stfactor

    @property
    def sales_unit_pis_cofinsfactor(self):
        """
        Gets the sales_unit_pis_cofinsfactor of this ItemGoods.
        factor to convert sales quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)

        :return: The sales_unit_pis_cofinsfactor of this ItemGoods.
        :rtype: float
        """
        return self._sales_unit_pis_cofinsfactor

    @sales_unit_pis_cofinsfactor.setter
    def sales_unit_pis_cofinsfactor(self, sales_unit_pis_cofinsfactor):
        """
        Sets the sales_unit_pis_cofinsfactor of this ItemGoods.
        factor to convert sales quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)

        :param sales_unit_pis_cofinsfactor: The sales_unit_pis_cofinsfactor of this ItemGoods.
        :type: float
        """

        self._sales_unit_pis_cofinsfactor = sales_unit_pis_cofinsfactor

    @property
    def purchase_unit(self):
        """
        Gets the purchase_unit of this ItemGoods.

        :return: The purchase_unit of this ItemGoods.
        :rtype: str
        """
        return self._purchase_unit

    @purchase_unit.setter
    def purchase_unit(self, purchase_unit):
        """
        Sets the purchase_unit of this ItemGoods.

        :param purchase_unit: The purchase_unit of this ItemGoods.
        :type: str
        """
        if purchase_unit is not None and len(purchase_unit) > 6:
            raise ValueError("Invalid value for `purchase_unit`, length must be less than or equal to `6`")

        self._purchase_unit = purchase_unit

    @property
    def purchase_unit_ip_ifactor(self):
        """
        Gets the purchase_unit_ip_ifactor of this ItemGoods.
        factor to convert purchase quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)

        :return: The purchase_unit_ip_ifactor of this ItemGoods.
        :rtype: float
        """
        return self._purchase_unit_ip_ifactor

    @purchase_unit_ip_ifactor.setter
    def purchase_unit_ip_ifactor(self, purchase_unit_ip_ifactor):
        """
        Sets the purchase_unit_ip_ifactor of this ItemGoods.
        factor to convert purchase quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)

        :param purchase_unit_ip_ifactor: The purchase_unit_ip_ifactor of this ItemGoods.
        :type: float
        """

        self._purchase_unit_ip_ifactor = purchase_unit_ip_ifactor

    @property
    def purchase_unit_icmsfactor(self):
        """
        Gets the purchase_unit_icmsfactor of this ItemGoods.
        factor to convert purchase quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)

        :return: The purchase_unit_icmsfactor of this ItemGoods.
        :rtype: float
        """
        return self._purchase_unit_icmsfactor

    @purchase_unit_icmsfactor.setter
    def purchase_unit_icmsfactor(self, purchase_unit_icmsfactor):
        """
        Sets the purchase_unit_icmsfactor of this ItemGoods.
        factor to convert purchase quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)

        :param purchase_unit_icmsfactor: The purchase_unit_icmsfactor of this ItemGoods.
        :type: float
        """

        self._purchase_unit_icmsfactor = purchase_unit_icmsfactor

    @property
    def purchase_unit_icms_stfactor(self):
        """
        Gets the purchase_unit_icms_stfactor of this ItemGoods.
        factor to convert purchase quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)

        :return: The purchase_unit_icms_stfactor of this ItemGoods.
        :rtype: float
        """
        return self._purchase_unit_icms_stfactor

    @purchase_unit_icms_stfactor.setter
    def purchase_unit_icms_stfactor(self, purchase_unit_icms_stfactor):
        """
        Sets the purchase_unit_icms_stfactor of this ItemGoods.
        factor to convert purchase quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)

        :param purchase_unit_icms_stfactor: The purchase_unit_icms_stfactor of this ItemGoods.
        :type: float
        """

        self._purchase_unit_icms_stfactor = purchase_unit_icms_stfactor

    @property
    def purchase_unit_pis_cofinsfactor(self):
        """
        Gets the purchase_unit_pis_cofinsfactor of this ItemGoods.
        factor to convert purchase quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)

        :return: The purchase_unit_pis_cofinsfactor of this ItemGoods.
        :rtype: float
        """
        return self._purchase_unit_pis_cofinsfactor

    @purchase_unit_pis_cofinsfactor.setter
    def purchase_unit_pis_cofinsfactor(self, purchase_unit_pis_cofinsfactor):
        """
        Sets the purchase_unit_pis_cofinsfactor of this ItemGoods.
        factor to convert purchase quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)

        :param purchase_unit_pis_cofinsfactor: The purchase_unit_pis_cofinsfactor of this ItemGoods.
        :type: float
        """

        self._purchase_unit_pis_cofinsfactor = purchase_unit_pis_cofinsfactor

    @property
    def first_use(self):
        """
        Gets the first_use of this ItemGoods.
        When the product is new, and will be retail, firt time that it exit it is subject to IPI

        :return: The first_use of this ItemGoods.
        :rtype: bool
        """
        return self._first_use

    @first_use.setter
    def first_use(self, first_use):
        """
        Sets the first_use of this ItemGoods.
        When the product is new, and will be retail, firt time that it exit it is subject to IPI

        :param first_use: The first_use of this ItemGoods.
        :type: bool
        """

        self._first_use = first_use

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
