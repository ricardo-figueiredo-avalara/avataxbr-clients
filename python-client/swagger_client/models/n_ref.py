# coding: utf-8

"""
    AvaTax Brazil

    The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NRef(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type=None, ref_n_fe=None, ref_c_te=None, ref_ecf=None, ref_nf=None, ref_farmer_nf=None):
        """
        NRef - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',
            'ref_n_fe': 'str',
            'ref_c_te': 'str',
            'ref_ecf': 'NRefRefECF',
            'ref_nf': 'NRefRefNF',
            'ref_farmer_nf': 'NRefRefFarmerNF'
        }

        self.attribute_map = {
            'type': 'type',
            'ref_n_fe': 'refNFe',
            'ref_c_te': 'refCTe',
            'ref_ecf': 'refECF',
            'ref_nf': 'refNF',
            'ref_farmer_nf': 'refFarmerNF'
        }

        self._type = type
        self._ref_n_fe = ref_n_fe
        self._ref_c_te = ref_c_te
        self._ref_ecf = ref_ecf
        self._ref_nf = ref_nf
        self._ref_farmer_nf = ref_farmer_nf

    @property
    def type(self):
        """
        Gets the type of this NRef.

        :return: The type of this NRef.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this NRef.

        :param type: The type of this NRef.
        :type: str
        """
        allowed_values = ["refNFe", "refCTE", "refECF", "refNF", "refFarmerNF"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def ref_n_fe(self):
        """
        Gets the ref_n_fe of this NRef.

        :return: The ref_n_fe of this NRef.
        :rtype: str
        """
        return self._ref_n_fe

    @ref_n_fe.setter
    def ref_n_fe(self, ref_n_fe):
        """
        Sets the ref_n_fe of this NRef.

        :param ref_n_fe: The ref_n_fe of this NRef.
        :type: str
        """
        if ref_n_fe is not None and len(ref_n_fe) > 44:
            raise ValueError("Invalid value for `ref_n_fe`, length must be less than or equal to `44`")
        if ref_n_fe is not None and not re.search('[0-9]{44}', ref_n_fe):
            raise ValueError("Invalid value for `ref_n_fe`, must be a follow pattern or equal to `/[0-9]{44}/`")

        self._ref_n_fe = ref_n_fe

    @property
    def ref_c_te(self):
        """
        Gets the ref_c_te of this NRef.

        :return: The ref_c_te of this NRef.
        :rtype: str
        """
        return self._ref_c_te

    @ref_c_te.setter
    def ref_c_te(self, ref_c_te):
        """
        Sets the ref_c_te of this NRef.

        :param ref_c_te: The ref_c_te of this NRef.
        :type: str
        """
        if ref_c_te is not None and len(ref_c_te) > 44:
            raise ValueError("Invalid value for `ref_c_te`, length must be less than or equal to `44`")
        if ref_c_te is not None and not re.search('[0-9]{44}', ref_c_te):
            raise ValueError("Invalid value for `ref_c_te`, must be a follow pattern or equal to `/[0-9]{44}/`")

        self._ref_c_te = ref_c_te

    @property
    def ref_ecf(self):
        """
        Gets the ref_ecf of this NRef.

        :return: The ref_ecf of this NRef.
        :rtype: NRefRefECF
        """
        return self._ref_ecf

    @ref_ecf.setter
    def ref_ecf(self, ref_ecf):
        """
        Sets the ref_ecf of this NRef.

        :param ref_ecf: The ref_ecf of this NRef.
        :type: NRefRefECF
        """

        self._ref_ecf = ref_ecf

    @property
    def ref_nf(self):
        """
        Gets the ref_nf of this NRef.

        :return: The ref_nf of this NRef.
        :rtype: NRefRefNF
        """
        return self._ref_nf

    @ref_nf.setter
    def ref_nf(self, ref_nf):
        """
        Sets the ref_nf of this NRef.

        :param ref_nf: The ref_nf of this NRef.
        :type: NRefRefNF
        """

        self._ref_nf = ref_nf

    @property
    def ref_farmer_nf(self):
        """
        Gets the ref_farmer_nf of this NRef.

        :return: The ref_farmer_nf of this NRef.
        :rtype: NRefRefFarmerNF
        """
        return self._ref_farmer_nf

    @ref_farmer_nf.setter
    def ref_farmer_nf(self, ref_farmer_nf):
        """
        Sets the ref_farmer_nf of this NRef.

        :param ref_farmer_nf: The ref_farmer_nf of this NRef.
        :type: NRefRefFarmerNF
        """

        self._ref_farmer_nf = ref_farmer_nf

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
