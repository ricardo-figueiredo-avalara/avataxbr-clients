/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/// <reference path="api.d.ts" />

namespace API.Client {
    'use strict';

    export interface SalesLinesOut {
        /**
         * This string is a unique identifier for this line in the transaction
         */
        "lineCode"?: number;

        /**
         * This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states.
         */
        "itemCode": string;

        /**
         * This decimal captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1
         */
        "numberOfItems"?: number;

        /**
         * This decimal captures the total cost of this line. In its simplest form lineAmount = (item price * numberOfItems).
         */
        "lineAmount"?: number;

        /**
         * This string captures the description of the item represented by this line, will be used LC 116
         */
        "itemDescription"?: string;

        /**
         * Conditional discount
         */
        "lineTaxedDiscount"?: number;

        /**
         * Unconditional discount
         */
        "lineUntaxedDiscount"?: number;

        "taxDeductions"?: SalesLinesOutTaxDeductions;

        /**
         * AGAST CODE for itemCode
         */
        "avalaraGoodsAndServicesType"?: string;

        /**
         * This decimal captures the total cost of this line. In its simplest form lineNetValue = (lineAmount - discountTaxable - sum of whithholdings).
         */
        "lineNetValue"?: number;

        /**
         * - '01' # ORIGIN MODE - '02' # ORIGIN MODE BUT EXEMPT - '03' # ORIGIN MODE BUT IMMUNE - '04' # ORIGIN MODE BUT SUSPENDED FOR LEGAL REASON - '05' # ORIGIN MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON - '21' # DESTINATION MODE - '22' # DESTINATION MODE BUT EXEMPT - '23' # DESTINATION MODE BUT IMMUNE - '24' # DESTINATION MODE BUT SUSPENDED - '25' # DESTINATION MODE BUT SUSPENDED - '40' # FOREIGN IMMUNE MODE 
         */
        "cst"?: SalesLinesOut.CstEnum;

        /**
         * - '61' # WITHHOLD NORMAL MODE - '62' # WITHHOLD NORMAL MODE BUT EXEMPT - '63' # WITHHOLD NORMAL MODE BUT IMMUNE - '64' # WITHHOLD NORMAL MODE BUT SUSPENDED FOR LEGAL REASON - '65' # WITHHOLD NORMAL MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON - '66' # WITHHOLD FORCED MODE - '67' # WITHHOLD FORCED MODE BUT EXEMPT - '68' # WITHHOLD FORCED MODE BUT IMMUNE - '69' # WITHHOLD FORCED MODE BUT SUSPENDED FOR LEGAL REASON - '70' # WITHHOLD FORCED MODE BUT SUSPENDED FOR ADMINISTRATIVE PROCESS - '71' # NO WITHHOLD MODE - '72' # NO WITHHOLD FOREIGN MODE 
         */
        "cstRf"?: SalesLinesOut.CstRfEnum;

        "calculatedTax"?: SalesCalculatedTax;

    }

    export namespace SalesLinesOut {
        export enum CstEnum {
            _01 = <any> '01',
            _02 = <any> '02',
            _03 = <any> '03',
            _04 = <any> '04',
            _05 = <any> '05',
            _21 = <any> '21',
            _22 = <any> '22',
            _23 = <any> '23',
            _24 = <any> '24',
            _25 = <any> '25',
            _40 = <any> '40'
        }
        export enum CstRfEnum {
            _61 = <any> '61',
            _62 = <any> '62',
            _63 = <any> '63',
            _64 = <any> '64',
            _65 = <any> '65',
            _66 = <any> '66',
            _67 = <any> '67',
            _68 = <any> '68',
            _69 = <any> '69',
            _70 = <any> '70',
            _71 = <any> '71',
            _72 = <any> '72'
        }
    }
}
