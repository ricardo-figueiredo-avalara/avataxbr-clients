/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace API.Client {
    'use strict';

    export class CompanyProcessApi {
        protected basePath = 'https://br16-dev-app03.br.avalara.com/v2';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * 
         * This operation return custom process configurations that match with parameters queries 
         * @param companyId Company ID
         * @param code Process Code
         */
        public companiesCompanyIdProcessCodeGet (companyId: string, code: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<CustomProcessScenario> {
            const localVarPath = this.basePath + '/companies/{companyId}/process/{code}'
                .replace('{' + 'companyId' + '}', String(companyId))
                .replace('{' + 'code' + '}', String(code));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'companyId' is not null or undefined
            if (companyId === null || companyId === undefined) {
                throw new Error('Required parameter companyId was null or undefined when calling companiesCompanyIdProcessCodeGet.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new Error('Required parameter code was null or undefined when calling companiesCompanyIdProcessCodeGet.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * This operation return custom process configurations that match with parameters queries 
         * @param companyId Company ID
         * @param xPaginationLimit The per page limit. Currently set to 10 but subject to change at any time (max 100).
         * @param xPaginationCurrentPage The current page. Defaults to 1.
         * @param xPaginationSort 
         */
        public companiesCompanyIdProcessGet (companyId: string, xPaginationLimit?: number, xPaginationCurrentPage?: number, xPaginationSort?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<CustomProcessScenario>> {
            const localVarPath = this.basePath + '/companies/{companyId}/process'
                .replace('{' + 'companyId' + '}', String(companyId));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'companyId' is not null or undefined
            if (companyId === null || companyId === undefined) {
                throw new Error('Required parameter companyId was null or undefined when calling companiesCompanyIdProcessGet.');
            }
            headerParams['X-Pagination-Limit'] = xPaginationLimit;

            headerParams['X-Pagination-Current-Page'] = xPaginationCurrentPage;

            headerParams['X-Pagination-Sort'] = xPaginationSort;

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Create custom process tax for one company
         * This method operation create a custom agast for one company 
         * @param companyId Company ID
         * @param body Transaction Message
         */
        public createCustomProcessScenario (companyId: string, body: CustomProcessScenario, extraHttpRequestParams?: any ) : ng.IHttpPromise<InlineResponse201> {
            const localVarPath = this.basePath + '/companies/{companyId}/process'
                .replace('{' + 'companyId' + '}', String(companyId));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'companyId' is not null or undefined
            if (companyId === null || companyId === undefined) {
                throw new Error('Required parameter companyId was null or undefined when calling createCustomProcessScenario.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling createCustomProcessScenario.');
            }
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: body,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * 
         * @param companyId Company ID
         * @param code Process Code
         */
        public deleteCustomProcessScenario (companyId: string, code: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/companies/{companyId}/process/{code}'
                .replace('{' + 'companyId' + '}', String(companyId))
                .replace('{' + 'code' + '}', String(code));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'companyId' is not null or undefined
            if (companyId === null || companyId === undefined) {
                throw new Error('Required parameter companyId was null or undefined when calling deleteCustomProcessScenario.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new Error('Required parameter code was null or undefined when calling deleteCustomProcessScenario.');
            }
            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Update custom agast for one company
         * This method operation update a custom process for one company 
         * @param companyId Company ID
         * @param code Process Code
         * @param body Transaction Message
         */
        public updateCustomProcessScenario (companyId: string, code: string, body: CustomProcessScenario, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/companies/{companyId}/process/{code}'
                .replace('{' + 'companyId' + '}', String(companyId))
                .replace('{' + 'code' + '}', String(code));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'companyId' is not null or undefined
            if (companyId === null || companyId === undefined) {
                throw new Error('Required parameter companyId was null or undefined when calling updateCustomProcessScenario.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new Error('Required parameter code was null or undefined when calling updateCustomProcessScenario.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling updateCustomProcessScenario.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: body,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
