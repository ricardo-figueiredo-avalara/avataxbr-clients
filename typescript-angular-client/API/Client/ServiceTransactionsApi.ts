/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace API.Client {
    'use strict';

    export class ServiceTransactionsApi {
        protected basePath = 'http://avataxbr-sandbox.avalarabrasil.com.br/v2';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * Retrieve transactions
         * Retrieve a single transaction
         * @param authorization Bearer {auth}
         * @param accountId Account ID
         * @param companyCode Company Code
         * @param transactionType Transaction Type (sale, purchase, receipts or payment)
         * @param documentCode Document Code
         */
        public transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet (authorization: string, accountId: string, companyCode: string, transactionType: string, documentCode: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}'
                .replace('{' + 'accountId' + '}', String(accountId))
                .replace('{' + 'companyCode' + '}', String(companyCode))
                .replace('{' + 'transactionType' + '}', String(transactionType))
                .replace('{' + 'documentCode' + '}', String(documentCode));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new Error('Required parameter authorization was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new Error('Required parameter accountId was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
            }
            // verify required parameter 'companyCode' is not null or undefined
            if (companyCode === null || companyCode === undefined) {
                throw new Error('Required parameter companyCode was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
            }
            // verify required parameter 'transactionType' is not null or undefined
            if (transactionType === null || transactionType === undefined) {
                throw new Error('Required parameter transactionType was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
            }
            // verify required parameter 'documentCode' is not null or undefined
            if (documentCode === null || documentCode === undefined) {
                throw new Error('Required parameter documentCode was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
            }
            headerParams['Authorization'] = authorization;

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Transaction State Transition
         * Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
         * @param authorization Bearer {auth}
         * @param accountId Account ID
         * @param companyCode Company Code
         * @param transactionType Transaction Type (sale, purchase, receipts or payment)
         * @param documentCode Document Code
         * @param body Transaction Message
         */
        public transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost (authorization: string, accountId: string, companyCode: string, transactionType: string, documentCode: string, body: StateTransition, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/stateTransitions'
                .replace('{' + 'accountId' + '}', String(accountId))
                .replace('{' + 'companyCode' + '}', String(companyCode))
                .replace('{' + 'transactionType' + '}', String(transactionType))
                .replace('{' + 'documentCode' + '}', String(documentCode));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new Error('Required parameter authorization was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new Error('Required parameter accountId was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost.');
            }
            // verify required parameter 'companyCode' is not null or undefined
            if (companyCode === null || companyCode === undefined) {
                throw new Error('Required parameter companyCode was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost.');
            }
            // verify required parameter 'transactionType' is not null or undefined
            if (transactionType === null || transactionType === undefined) {
                throw new Error('Required parameter transactionType was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost.');
            }
            // verify required parameter 'documentCode' is not null or undefined
            if (documentCode === null || documentCode === undefined) {
                throw new Error('Required parameter documentCode was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost.');
            }
            headerParams['Authorization'] = authorization;

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: body,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Retrieve transactions
         * Retrieve a list of transactions
         * @param authorization Bearer {auth}
         * @param accountId Account ID
         * @param companyCode Company Code
         * @param transactionType Transaction Type (sale, purchase, receipts or payment)
         */
        public transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet (authorization: string, accountId: string, companyCode: string, transactionType: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/transactions/account/{accountId}/company/{companyCode}/{transactionType}'
                .replace('{' + 'accountId' + '}', String(accountId))
                .replace('{' + 'companyCode' + '}', String(companyCode))
                .replace('{' + 'transactionType' + '}', String(transactionType));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new Error('Required parameter authorization was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new Error('Required parameter accountId was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet.');
            }
            // verify required parameter 'companyCode' is not null or undefined
            if (companyCode === null || companyCode === undefined) {
                throw new Error('Required parameter companyCode was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet.');
            }
            // verify required parameter 'transactionType' is not null or undefined
            if (transactionType === null || transactionType === undefined) {
                throw new Error('Required parameter transactionType was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet.');
            }
            headerParams['Authorization'] = authorization;

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Calculation Method
         * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
         * @param authorization Bearer {auth}
         * @param body Transaction Message
         */
        public transactionsservicePaymentPost (authorization: string, body: PaymentTransactionIn, extraHttpRequestParams?: any ) : ng.IHttpPromise<PaymentTransactionOut> {
            const localVarPath = this.basePath + '/transactions?service-payment';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new Error('Required parameter authorization was null or undefined when calling transactionsservicePaymentPost.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling transactionsservicePaymentPost.');
            }
            headerParams['Authorization'] = authorization;

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: body,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Calculation Method
         * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
         * @param authorization Bearer {auth}
         * @param body Transaction Message
         */
        public transactionsservicePurchasePost (authorization: string, body: PurchaseTransactionIn, extraHttpRequestParams?: any ) : ng.IHttpPromise<PurchaseTransactionOut> {
            const localVarPath = this.basePath + '/transactions?service-purchase';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new Error('Required parameter authorization was null or undefined when calling transactionsservicePurchasePost.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling transactionsservicePurchasePost.');
            }
            headerParams['Authorization'] = authorization;

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: body,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Calculation Method
         * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
         * @param authorization Bearer {auth}
         * @param body Transaction Message
         */
        public transactionsserviceReceiptPost (authorization: string, body: ReceiptTransactionIn, extraHttpRequestParams?: any ) : ng.IHttpPromise<ReceiptTransactionOut> {
            const localVarPath = this.basePath + '/transactions?service-receipt';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new Error('Required parameter authorization was null or undefined when calling transactionsserviceReceiptPost.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling transactionsserviceReceiptPost.');
            }
            headerParams['Authorization'] = authorization;

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: body,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Calculation Method
         * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
         * @param authorization Bearer {auth}
         * @param body Transaction Message
         */
        public transactionsserviceSalesPost (authorization: string, body: SalesTransactionIn, extraHttpRequestParams?: any ) : ng.IHttpPromise<SalesTransactionOut> {
            const localVarPath = this.basePath + '/transactions?service-sales';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new Error('Required parameter authorization was null or undefined when calling transactionsserviceSalesPost.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling transactionsserviceSalesPost.');
            }
            headerParams['Authorization'] = authorization;

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: body,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
