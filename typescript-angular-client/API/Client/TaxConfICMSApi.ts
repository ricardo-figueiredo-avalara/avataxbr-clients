/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace API.Client {
    'use strict';

    export class TaxConfICMSApi {
        protected basePath = 'https://br16-dev-app03.br.avalara.com/v2';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * create a new ICMS Configuration
         * 
         * @param state Brazilian State
         * @param icmsConfState The pet JSON you want to post
         */
        public createIcmsconfstate (state: string, icmsConfState: IcmsConfByState, extraHttpRequestParams?: any ) : ng.IHttpPromise<InlineResponse201> {
            const localVarPath = this.basePath + '/taxconf/icms/{state}'
                .replace('{' + 'state' + '}', String(state));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'state' is not null or undefined
            if (state === null || state === undefined) {
                throw new Error('Required parameter state was null or undefined when calling createIcmsconfstate.');
            }
            // verify required parameter 'icmsConfState' is not null or undefined
            if (icmsConfState === null || icmsConfState === undefined) {
                throw new Error('Required parameter icmsConfState was null or undefined when calling createIcmsconfstate.');
            }
            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: icmsConfState,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * disable a ICMS by State.
         * 
         * @param state Brazilian State
         * @param code ICMS Code
         */
        public deleteIcmsConf (state: string, code: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/taxconf/icms/{state}/{code}'
                .replace('{' + 'state' + '}', String(state))
                .replace('{' + 'code' + '}', String(code));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'state' is not null or undefined
            if (state === null || state === undefined) {
                throw new Error('Required parameter state was null or undefined when calling deleteIcmsConf.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new Error('Required parameter code was null or undefined when calling deleteIcmsConf.');
            }
            let httpRequestParams: any = {
                method: 'DELETE',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * get ICMS information by State.
         * This operation return configurations of icms that match with parameters queries 
         * @param state Brazilian State
         * @param code ICMS Code
         */
        public getIcmsConfByState (state: string, code: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<IcmsConfByState>> {
            const localVarPath = this.basePath + '/taxconf/icms/{state}/{code}'
                .replace('{' + 'state' + '}', String(state))
                .replace('{' + 'code' + '}', String(code));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'state' is not null or undefined
            if (state === null || state === undefined) {
                throw new Error('Required parameter state was null or undefined when calling getIcmsConfByState.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new Error('Required parameter code was null or undefined when calling getIcmsConfByState.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * retrive list of ICMS.
         * This operation return ICMS configurations that match with parameters queries 
         * @param state Brazilian State
         * @param suffixcode Identify this ICMS
         * @param date When informed return valid version configuration for this date
         * @param inactive return the inactive versions too
         */
        public getIcmsList (state: string, suffixcode?: string, date?: Date, inactive?: boolean, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<IcmsConfByState>> {
            const localVarPath = this.basePath + '/taxconf/icms/{state}'
                .replace('{' + 'state' + '}', String(state));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'state' is not null or undefined
            if (state === null || state === undefined) {
                throw new Error('Required parameter state was null or undefined when calling getIcmsList.');
            }
            if (suffixcode !== undefined) {
                queryParameters['suffixcode'] = suffixcode;
            }

            if (date !== undefined) {
                queryParameters['date'] = date;
            }

            if (inactive !== undefined) {
                queryParameters['inactive'] = inactive;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * retrive list of ICMS.
         * This operation return ICMS configurations that match with parameters queries 
         * @param text Search for codes
         * @param state Filter for states
         */
        public getIcmsList_1 (text: string, state?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Array<IcmsConfByState>> {
            const localVarPath = this.basePath + '/taxconf/icms-search/';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'text' is not null or undefined
            if (text === null || text === undefined) {
                throw new Error('Required parameter text was null or undefined when calling getIcmsList_1.');
            }
            if (text !== undefined) {
                queryParameters['text'] = text;
            }

            if (state !== undefined) {
                queryParameters['state'] = state;
            }

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * update a IcmsConf State,
         * 
         * @param state Brazilian State
         * @param code ICMS Code
         * @param icmsConfState The pet JSON you want to post
         */
        public updateIcmsconfstate (state: string, code: string, icmsConfState: IcmsConfByState, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/taxconf/icms/{state}/{code}'
                .replace('{' + 'state' + '}', String(state))
                .replace('{' + 'code' + '}', String(code));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'state' is not null or undefined
            if (state === null || state === undefined) {
                throw new Error('Required parameter state was null or undefined when calling updateIcmsconfstate.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new Error('Required parameter code was null or undefined when calling updateIcmsconfstate.');
            }
            // verify required parameter 'icmsConfState' is not null or undefined
            if (icmsConfState === null || icmsConfState === undefined) {
                throw new Error('Required parameter icmsConfState was null or undefined when calling updateIcmsconfstate.');
            }
            let httpRequestParams: any = {
                method: 'PUT',
                url: localVarPath,
                json: true,
                data: icmsConfState,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
