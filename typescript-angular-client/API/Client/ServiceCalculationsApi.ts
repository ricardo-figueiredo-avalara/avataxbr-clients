/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace API.Client {
    'use strict';

    export class ServiceCalculationsApi {
        protected basePath = 'https://br16-dev-app03.br.avalara.com/v2';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * Retrieve transactions
         * Retrieve a single transaction
         * @param authorization Bearer {auth}
         * @param accountId Account ID
         * @param companyCode Company Code
         * @param transactionType Transaction Type (sale, purchase, receipts or payment)
         * @param documentCode Document Code
         */
        public calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet (authorization: string, accountId: string, companyCode: string, transactionType: string, documentCode: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}'
                .replace('{' + 'accountId' + '}', String(accountId))
                .replace('{' + 'companyCode' + '}', String(companyCode))
                .replace('{' + 'transactionType' + '}', String(transactionType))
                .replace('{' + 'documentCode' + '}', String(documentCode));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new Error('Required parameter authorization was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new Error('Required parameter accountId was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
            }
            // verify required parameter 'companyCode' is not null or undefined
            if (companyCode === null || companyCode === undefined) {
                throw new Error('Required parameter companyCode was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
            }
            // verify required parameter 'transactionType' is not null or undefined
            if (transactionType === null || transactionType === undefined) {
                throw new Error('Required parameter transactionType was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
            }
            // verify required parameter 'documentCode' is not null or undefined
            if (documentCode === null || documentCode === undefined) {
                throw new Error('Required parameter documentCode was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
            }
            headerParams['Authorization'] = authorization;

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Promote a calculation to transaction
         * Promote a calculation to transaction
         * @param authorization Bearer {auth}
         * @param accountId Account ID
         * @param companyCode Company Code
         * @param transactionType Transaction Type (sale, purchase, receipts or payment)
         * @param documentCode Document Code
         */
        public calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost (authorization: string, accountId: string, companyCode: string, transactionType: string, documentCode: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/transactions'
                .replace('{' + 'accountId' + '}', String(accountId))
                .replace('{' + 'companyCode' + '}', String(companyCode))
                .replace('{' + 'transactionType' + '}', String(transactionType))
                .replace('{' + 'documentCode' + '}', String(documentCode));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new Error('Required parameter authorization was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new Error('Required parameter accountId was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost.');
            }
            // verify required parameter 'companyCode' is not null or undefined
            if (companyCode === null || companyCode === undefined) {
                throw new Error('Required parameter companyCode was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost.');
            }
            // verify required parameter 'transactionType' is not null or undefined
            if (transactionType === null || transactionType === undefined) {
                throw new Error('Required parameter transactionType was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost.');
            }
            // verify required parameter 'documentCode' is not null or undefined
            if (documentCode === null || documentCode === undefined) {
                throw new Error('Required parameter documentCode was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost.');
            }
            headerParams['Authorization'] = authorization;

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Retrieve transactions
         * Retrieve a list of transactions
         * @param authorization Bearer {auth}
         * @param accountId Account ID
         * @param companyCode Company Code
         * @param transactionType Transaction Type (sale, purchase, receipts or payment)
         */
        public calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet (authorization: string, accountId: string, companyCode: string, transactionType: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/calculations/account/{accountId}/company/{companyCode}/{transactionType}'
                .replace('{' + 'accountId' + '}', String(accountId))
                .replace('{' + 'companyCode' + '}', String(companyCode))
                .replace('{' + 'transactionType' + '}', String(transactionType));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new Error('Required parameter authorization was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new Error('Required parameter accountId was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet.');
            }
            // verify required parameter 'companyCode' is not null or undefined
            if (companyCode === null || companyCode === undefined) {
                throw new Error('Required parameter companyCode was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet.');
            }
            // verify required parameter 'transactionType' is not null or undefined
            if (transactionType === null || transactionType === undefined) {
                throw new Error('Required parameter transactionType was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet.');
            }
            headerParams['Authorization'] = authorization;

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Calculation Method
         * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
         * @param authorization Bearer {auth}
         * @param body Transaction Message
         */
        public calculationsservicePaymentPost (authorization: string, body: PaymentTransactionIn, extraHttpRequestParams?: any ) : ng.IHttpPromise<PaymentTransactionOut> {
            const localVarPath = this.basePath + '/calculations?service-payment';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new Error('Required parameter authorization was null or undefined when calling calculationsservicePaymentPost.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling calculationsservicePaymentPost.');
            }
            headerParams['Authorization'] = authorization;

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: body,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Calculation Method
         * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
         * @param authorization Bearer {auth}
         * @param body Transaction Message
         */
        public calculationsservicePurchasePost (authorization: string, body: PurchaseTransactionIn, extraHttpRequestParams?: any ) : ng.IHttpPromise<PurchaseTransactionOut> {
            const localVarPath = this.basePath + '/calculations?service-purchase';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new Error('Required parameter authorization was null or undefined when calling calculationsservicePurchasePost.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling calculationsservicePurchasePost.');
            }
            headerParams['Authorization'] = authorization;

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: body,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Calculation Method
         * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
         * @param authorization Bearer {auth}
         * @param body Transaction Message
         */
        public calculationsserviceReceiptPost (authorization: string, body: ReceiptTransactionIn, extraHttpRequestParams?: any ) : ng.IHttpPromise<ReceiptTransactionOut> {
            const localVarPath = this.basePath + '/calculations?service-receipt';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new Error('Required parameter authorization was null or undefined when calling calculationsserviceReceiptPost.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling calculationsserviceReceiptPost.');
            }
            headerParams['Authorization'] = authorization;

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: body,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * Calculation Method
         * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
         * @param authorization Bearer {auth}
         * @param body Transaction Message
         */
        public calculationsserviceSalesPost (authorization: string, body: SalesTransactionIn, extraHttpRequestParams?: any ) : ng.IHttpPromise<SalesTransactionOut> {
            const localVarPath = this.basePath + '/calculations?service-sales';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new Error('Required parameter authorization was null or undefined when calling calculationsserviceSalesPost.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling calculationsserviceSalesPost.');
            }
            headerParams['Authorization'] = authorization;

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: body,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
