/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TaxConfCFOPApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TaxConfCFOPApiTests
    {
        private TaxConfCFOPApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TaxConfCFOPApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TaxConfCFOPApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TaxConfCFOPApi
            //Assert.IsInstanceOfType(typeof(TaxConfCFOPApi), instance, "instance is a TaxConfCFOPApi");
        }

        
        /// <summary>
        /// Test CreateCfop
        /// </summary>
        [Test]
        public void CreateCfopTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CfopConf body = null;
            //var response = instance.CreateCfop(body);
            //Assert.IsInstanceOf<InlineResponse201> (response, "response is InlineResponse201");
        }
        
        /// <summary>
        /// Test DeleteCfop
        /// </summary>
        [Test]
        public void DeleteCfopTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //instance.DeleteCfop(code);
            
        }
        
        /// <summary>
        /// Test GetCfop
        /// </summary>
        [Test]
        public void GetCfopTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //var response = instance.GetCfop(code);
            //Assert.IsInstanceOf<CfopConf> (response, "response is CfopConf");
        }
        
        /// <summary>
        /// Test GetCfopList
        /// </summary>
        [Test]
        public void GetCfopListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string suffixcode = null;
            //DateTime? date = null;
            //bool? inactive = null;
            //var response = instance.GetCfopList(suffixcode, date, inactive);
            //Assert.IsInstanceOf<List<CfopConf>> (response, "response is List<CfopConf>");
        }
        
        /// <summary>
        /// Test UpdateCfop
        /// </summary>
        [Test]
        public void UpdateCfopTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //CfopConf taxconfcfop = null;
            //instance.UpdateCfop(code, taxconfcfop);
            
        }
        
    }

}
