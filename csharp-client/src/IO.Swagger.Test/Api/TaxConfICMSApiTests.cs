/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TaxConfICMSApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TaxConfICMSApiTests
    {
        private TaxConfICMSApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TaxConfICMSApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TaxConfICMSApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TaxConfICMSApi
            //Assert.IsInstanceOfType(typeof(TaxConfICMSApi), instance, "instance is a TaxConfICMSApi");
        }

        
        /// <summary>
        /// Test CreateIcmsconfstate
        /// </summary>
        [Test]
        public void CreateIcmsconfstateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string state = null;
            //IcmsConfByState icmsConfState = null;
            //var response = instance.CreateIcmsconfstate(state, icmsConfState);
            //Assert.IsInstanceOf<InlineResponse201> (response, "response is InlineResponse201");
        }
        
        /// <summary>
        /// Test DeleteIcmsConf
        /// </summary>
        [Test]
        public void DeleteIcmsConfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string state = null;
            //string code = null;
            //instance.DeleteIcmsConf(state, code);
            
        }
        
        /// <summary>
        /// Test GetIcmsConfByState
        /// </summary>
        [Test]
        public void GetIcmsConfByStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string state = null;
            //string code = null;
            //var response = instance.GetIcmsConfByState(state, code);
            //Assert.IsInstanceOf<List<IcmsConfByState>> (response, "response is List<IcmsConfByState>");
        }
        
        /// <summary>
        /// Test GetIcmsList
        /// </summary>
        [Test]
        public void GetIcmsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string state = null;
            //string suffixcode = null;
            //DateTime? date = null;
            //bool? inactive = null;
            //var response = instance.GetIcmsList(state, suffixcode, date, inactive);
            //Assert.IsInstanceOf<List<IcmsConfByState>> (response, "response is List<IcmsConfByState>");
        }
        
        /// <summary>
        /// Test GetIcmsList_0
        /// </summary>
        [Test]
        public void GetIcmsList_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string text = null;
            //string state = null;
            //var response = instance.GetIcmsList_0(text, state);
            //Assert.IsInstanceOf<List<IcmsConfByState>> (response, "response is List<IcmsConfByState>");
        }
        
        /// <summary>
        /// Test UpdateIcmsconfstate
        /// </summary>
        [Test]
        public void UpdateIcmsconfstateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string state = null;
            //string code = null;
            //IcmsConfByState icmsConfState = null;
            //instance.UpdateIcmsconfstate(state, code, icmsConfState);
            
        }
        
    }

}
