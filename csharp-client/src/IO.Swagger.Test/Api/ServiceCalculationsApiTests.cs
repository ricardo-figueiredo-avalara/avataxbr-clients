/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ServiceCalculationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ServiceCalculationsApiTests
    {
        private ServiceCalculationsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ServiceCalculationsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ServiceCalculationsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ServiceCalculationsApi
            //Assert.IsInstanceOfType(typeof(ServiceCalculationsApi), instance, "instance is a ServiceCalculationsApi");
        }

        
        /// <summary>
        /// Test CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet
        /// </summary>
        [Test]
        public void CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //Guid? accountId = null;
            //string companyCode = null;
            //string transactionType = null;
            //string documentCode = null;
            //instance.CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(authorization, accountId, companyCode, transactionType, documentCode);
            
        }
        
        /// <summary>
        /// Test CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost
        /// </summary>
        [Test]
        public void CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //Guid? accountId = null;
            //string companyCode = null;
            //string transactionType = null;
            //string documentCode = null;
            //instance.CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost(authorization, accountId, companyCode, transactionType, documentCode);
            
        }
        
        /// <summary>
        /// Test CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet
        /// </summary>
        [Test]
        public void CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //Guid? accountId = null;
            //string companyCode = null;
            //string transactionType = null;
            //instance.CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(authorization, accountId, companyCode, transactionType);
            
        }
        
        /// <summary>
        /// Test CalculationsservicePaymentPost
        /// </summary>
        [Test]
        public void CalculationsservicePaymentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //PaymentTransactionIn body = null;
            //var response = instance.CalculationsservicePaymentPost(authorization, body);
            //Assert.IsInstanceOf<PaymentTransactionOut> (response, "response is PaymentTransactionOut");
        }
        
        /// <summary>
        /// Test CalculationsservicePurchasePost
        /// </summary>
        [Test]
        public void CalculationsservicePurchasePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //PurchaseTransactionIn body = null;
            //var response = instance.CalculationsservicePurchasePost(authorization, body);
            //Assert.IsInstanceOf<PurchaseTransactionOut> (response, "response is PurchaseTransactionOut");
        }
        
        /// <summary>
        /// Test CalculationsserviceReceiptPost
        /// </summary>
        [Test]
        public void CalculationsserviceReceiptPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //ReceiptTransactionIn body = null;
            //var response = instance.CalculationsserviceReceiptPost(authorization, body);
            //Assert.IsInstanceOf<ReceiptTransactionOut> (response, "response is ReceiptTransactionOut");
        }
        
        /// <summary>
        /// Test CalculationsserviceSalesPost
        /// </summary>
        [Test]
        public void CalculationsserviceSalesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //SalesTransactionIn body = null;
            //var response = instance.CalculationsserviceSalesPost(authorization, body);
            //Assert.IsInstanceOf<SalesTransactionOut> (response, "response is SalesTransactionOut");
        }
        
    }

}
