/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ServiceTransactionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ServiceTransactionsApiTests
    {
        private ServiceTransactionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ServiceTransactionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ServiceTransactionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ServiceTransactionsApi
            //Assert.IsInstanceOfType(typeof(ServiceTransactionsApi), instance, "instance is a ServiceTransactionsApi");
        }

        
        /// <summary>
        /// Test TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet
        /// </summary>
        [Test]
        public void TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //Guid? accountId = null;
            //string companyCode = null;
            //string transactionType = null;
            //string documentCode = null;
            //instance.TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(authorization, accountId, companyCode, transactionType, documentCode);
            
        }
        
        /// <summary>
        /// Test TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost
        /// </summary>
        [Test]
        public void TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //Guid? accountId = null;
            //string companyCode = null;
            //string transactionType = null;
            //string documentCode = null;
            //StateTransition body = null;
            //instance.TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost(authorization, accountId, companyCode, transactionType, documentCode, body);
            
        }
        
        /// <summary>
        /// Test TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet
        /// </summary>
        [Test]
        public void TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //Guid? accountId = null;
            //string companyCode = null;
            //string transactionType = null;
            //instance.TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(authorization, accountId, companyCode, transactionType);
            
        }
        
        /// <summary>
        /// Test TransactionsservicePaymentPost
        /// </summary>
        [Test]
        public void TransactionsservicePaymentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //PaymentTransactionIn body = null;
            //var response = instance.TransactionsservicePaymentPost(authorization, body);
            //Assert.IsInstanceOf<PaymentTransactionOut> (response, "response is PaymentTransactionOut");
        }
        
        /// <summary>
        /// Test TransactionsservicePurchasePost
        /// </summary>
        [Test]
        public void TransactionsservicePurchasePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //PurchaseTransactionIn body = null;
            //var response = instance.TransactionsservicePurchasePost(authorization, body);
            //Assert.IsInstanceOf<PurchaseTransactionOut> (response, "response is PurchaseTransactionOut");
        }
        
        /// <summary>
        /// Test TransactionsserviceReceiptPost
        /// </summary>
        [Test]
        public void TransactionsserviceReceiptPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //ReceiptTransactionIn body = null;
            //var response = instance.TransactionsserviceReceiptPost(authorization, body);
            //Assert.IsInstanceOf<ReceiptTransactionOut> (response, "response is ReceiptTransactionOut");
        }
        
        /// <summary>
        /// Test TransactionsserviceSalesPost
        /// </summary>
        [Test]
        public void TransactionsserviceSalesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //SalesTransactionIn body = null;
            //var response = instance.TransactionsserviceSalesPost(authorization, body);
            //Assert.IsInstanceOf<SalesTransactionOut> (response, "response is SalesTransactionOut");
        }
        
    }

}
