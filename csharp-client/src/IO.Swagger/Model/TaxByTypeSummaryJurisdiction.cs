/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TaxByTypeSummaryJurisdiction
    /// </summary>
    [DataContract]
    public partial class TaxByTypeSummaryJurisdiction :  IEquatable<TaxByTypeSummaryJurisdiction>, IValidatableObject
    {
        /// <summary>
        /// Type of jurisdiction - 'City' - 'State' - 'Country' 
        /// </summary>
        /// <value>Type of jurisdiction - 'City' - 'State' - 'Country' </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JurisdictionTypeEnum
        {
            
            /// <summary>
            /// Enum City for "City"
            /// </summary>
            [EnumMember(Value = "City")]
            City,
            
            /// <summary>
            /// Enum State for "State"
            /// </summary>
            [EnumMember(Value = "State")]
            State,
            
            /// <summary>
            /// Enum Country for "Country"
            /// </summary>
            [EnumMember(Value = "Country")]
            Country
        }

        /// <summary>
        /// Type of jurisdiction - 'City' - 'State' - 'Country' 
        /// </summary>
        /// <value>Type of jurisdiction - 'City' - 'State' - 'Country' </value>
        [DataMember(Name="jurisdictionType", EmitDefaultValue=false)]
        public JurisdictionTypeEnum? JurisdictionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxByTypeSummaryJurisdiction" /> class.
        /// </summary>
        /// <param name="JurisdictionName">Jurisdiction used for calctax amount.</param>
        /// <param name="JurisdictionType">Type of jurisdiction - &#39;City&#39; - &#39;State&#39; - &#39;Country&#39; .</param>
        /// <param name="Tax">sum of referenced tax value by jurisdiction.</param>
        public TaxByTypeSummaryJurisdiction(string JurisdictionName = default(string), JurisdictionTypeEnum? JurisdictionType = default(JurisdictionTypeEnum?), double? Tax = default(double?))
        {
            this.JurisdictionName = JurisdictionName;
            this.JurisdictionType = JurisdictionType;
            this.Tax = Tax;
        }
        
        /// <summary>
        /// Jurisdiction used for calctax amount
        /// </summary>
        /// <value>Jurisdiction used for calctax amount</value>
        [DataMember(Name="jurisdictionName", EmitDefaultValue=false)]
        public string JurisdictionName { get; set; }
        /// <summary>
        /// sum of referenced tax value by jurisdiction
        /// </summary>
        /// <value>sum of referenced tax value by jurisdiction</value>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public double? Tax { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxByTypeSummaryJurisdiction {\n");
            sb.Append("  JurisdictionName: ").Append(JurisdictionName).Append("\n");
            sb.Append("  JurisdictionType: ").Append(JurisdictionType).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaxByTypeSummaryJurisdiction);
        }

        /// <summary>
        /// Returns true if TaxByTypeSummaryJurisdiction instances are equal
        /// </summary>
        /// <param name="other">Instance of TaxByTypeSummaryJurisdiction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxByTypeSummaryJurisdiction other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.JurisdictionName == other.JurisdictionName ||
                    this.JurisdictionName != null &&
                    this.JurisdictionName.Equals(other.JurisdictionName)
                ) && 
                (
                    this.JurisdictionType == other.JurisdictionType ||
                    this.JurisdictionType != null &&
                    this.JurisdictionType.Equals(other.JurisdictionType)
                ) && 
                (
                    this.Tax == other.Tax ||
                    this.Tax != null &&
                    this.Tax.Equals(other.Tax)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.JurisdictionName != null)
                    hash = hash * 59 + this.JurisdictionName.GetHashCode();
                if (this.JurisdictionType != null)
                    hash = hash * 59 + this.JurisdictionType.GetHashCode();
                if (this.Tax != null)
                    hash = hash * 59 + this.Tax.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
