/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Company
    /// </summary>
    [DataContract]
    public partial class Company :  IEquatable<Company>, IValidatableObject
    {
        /// <summary>
        /// this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 
        /// </summary>
        /// <value>this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PisSubjectToEnum
        {
            
            /// <summary>
            /// Enum TAXABLE for "TAXABLE"
            /// </summary>
            [EnumMember(Value = "TAXABLE")]
            TAXABLE,
            
            /// <summary>
            /// Enum NOTTAXABLE for "NOT TAXABLE"
            /// </summary>
            [EnumMember(Value = "NOT TAXABLE")]
            NOTTAXABLE,
            
            /// <summary>
            /// Enum EXEMPT for "EXEMPT"
            /// </summary>
            [EnumMember(Value = "EXEMPT")]
            EXEMPT
        }

        /// <summary>
        /// this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 
        /// </summary>
        /// <value>this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CofinsSubjectToEnum
        {
            
            /// <summary>
            /// Enum TAXABLE for "TAXABLE"
            /// </summary>
            [EnumMember(Value = "TAXABLE")]
            TAXABLE,
            
            /// <summary>
            /// Enum NOTTAXABLE for "NOT TAXABLE"
            /// </summary>
            [EnumMember(Value = "NOT TAXABLE")]
            NOTTAXABLE,
            
            /// <summary>
            /// Enum EXEMPT for "EXEMPT"
            /// </summary>
            [EnumMember(Value = "EXEMPT")]
            EXEMPT
        }

        /// <summary>
        /// this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 
        /// </summary>
        /// <value>this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CsllSubjectToEnum
        {
            
            /// <summary>
            /// Enum TAXABLE for "TAXABLE"
            /// </summary>
            [EnumMember(Value = "TAXABLE")]
            TAXABLE,
            
            /// <summary>
            /// Enum NOTTAXABLE for "NOT TAXABLE"
            /// </summary>
            [EnumMember(Value = "NOT TAXABLE")]
            NOTTAXABLE,
            
            /// <summary>
            /// Enum EXEMPT for "EXEMPT"
            /// </summary>
            [EnumMember(Value = "EXEMPT")]
            EXEMPT
        }

        /// <summary>
        /// this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 
        /// </summary>
        /// <value>this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. </value>
        [DataMember(Name="pisSubjectTo", EmitDefaultValue=false)]
        public PisSubjectToEnum? PisSubjectTo { get; set; }
        /// <summary>
        /// this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 
        /// </summary>
        /// <value>this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. </value>
        [DataMember(Name="cofinsSubjectTo", EmitDefaultValue=false)]
        public CofinsSubjectToEnum? CofinsSubjectTo { get; set; }
        /// <summary>
        /// this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 
        /// </summary>
        /// <value>this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. </value>
        [DataMember(Name="csllSubjectTo", EmitDefaultValue=false)]
        public CsllSubjectToEnum? CsllSubjectTo { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Company" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Company() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Company" /> class.
        /// </summary>
        /// <param name="Code">string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company (required).</param>
        /// <param name="OfficialName">Official Company name (Raz√£o Social) (required).</param>
        /// <param name="Name">Company name (DBA - Nome de Fantasia),  Used to identify branches/subsidiaries with same name (required).</param>
        /// <param name="EntityType">EntityType (required).</param>
        /// <param name="SubjectToSRF1234">Company has participation of state-owned capital (it will be considerated like a government entity).</param>
        /// <param name="FederalTaxRegime">FederalTaxRegime (required).</param>
        /// <param name="PisSubjectTo">this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn&#39;t mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. .</param>
        /// <param name="CofinsSubjectTo">this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn&#39;t mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. .</param>
        /// <param name="CsllSubjectTo">this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn&#39;t mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. .</param>
        /// <param name="ReceiptsAreFullNoCumulativePisCofins">When th company is REAL PROFIT usually it operates under a Non-Cumulative PIS/COFINS regime But exist some services that are always Cumulative regime. If the company has all receipts from Non-Cumulative services this flag will be set to True. This flag informs special conditions to credit of PIS/COFINS when this company is out of Free zone and  purchases from Free Zone Company Quando uma empresa fora da Zona Franca adquire uma produto ou servi√ßo de uma empresa situada na Zona Franca de Manaus, o cr√©dito de PIS E COFINS segue estas aliquotas diferenciadas. Fundamenta√ß√£o, art. 5¬∫ da Instru√ß√£o Normativa SRF n¬∫ 546/2005; art. 3¬∫, ¬ß 12 da Lei n¬∫ 10.637/2002; art. 3¬∫, ¬ß 17 da Lei n¬∫ 10.833/2003; art. 4¬∫ da Lei n¬∫ 11.307/2006. DESTINAT√ÅRIO AL√çQUOTAS PIS COFINS a) Venda efetuada a pessoa jur√≠dica estabelecida fora da Zona Franca de Manaus, que apure a Contribui√ß√£o para o PIS/PASEP no regime de n√£o-cumulatividade d√©bito 0,65% 3% cr√©dito 1% 4,6% c) Venda efetuada a pessoa jur√≠dica estabelecida fora da Zona Franca de Manaus, que apure o imposto de renda com base no lucro real e que tenha sua receita, total ou parcialmente, exclu√≠da do regime de incid√™ncia n√£o-cumulativa da Contribui√ß√£o para o PIS/PASEP d√©bito 1,3% 6% cr√©dito 1,65% 7,6% .</param>
        /// <param name="InssWithholdSubjectTo">On purchase transaction, to force withholding INSS this Flag can be set to True.</param>
        /// <param name="IssWithholdSubjectTo">On purchase transaction, to force withhold ISS this Flag can be set to True.</param>
        /// <param name="IrrfWithholdSubjectTo">On purchase transaction, if this flag is FALSE, the system will not withhold IRRF. if this flag is TRUE the system will analise other rules to define if will have witholding .</param>
        /// <param name="IcmsRateForSimplestaxregime">Actual ICMS Rate for this company (if the company is Tax Regime Simplified). Aliquota de ICMS da companhia caso Optante do Simples .</param>
        /// <param name="IsExemptByGrossRevenueForSimplestaxregime">ICMS Exempt when Tax Regime is Simplified because total gross revenue is bellow amount defined by state (see PARAN√Å State) Isen√ß√£o do ICMS no Simples Nacional para faixa de receita bruta .</param>
        /// <param name="Configuration">Configuration.</param>
        /// <param name="MailServer">MailServer.</param>
        /// <param name="AuthorizedToDownloadNFe">Person or company authorized to downloadNFe.</param>
        public Company(string Code = default(string), string OfficialName = default(string), string Name = default(string), EntityType EntityType = default(EntityType), bool? SubjectToSRF1234 = default(bool?), FederalTaxRegime FederalTaxRegime = default(FederalTaxRegime), PisSubjectToEnum? PisSubjectTo = default(PisSubjectToEnum?), CofinsSubjectToEnum? CofinsSubjectTo = default(CofinsSubjectToEnum?), CsllSubjectToEnum? CsllSubjectTo = default(CsllSubjectToEnum?), bool? ReceiptsAreFullNoCumulativePisCofins = default(bool?), bool? InssWithholdSubjectTo = default(bool?), bool? IssWithholdSubjectTo = default(bool?), bool? IrrfWithholdSubjectTo = default(bool?), double? IcmsRateForSimplestaxregime = default(double?), bool? IsExemptByGrossRevenueForSimplestaxregime = default(bool?), CompanyConfiguration Configuration = default(CompanyConfiguration), CompanyMailServer MailServer = default(CompanyMailServer), List<CompanyAuthorizedToDownloadNFe> AuthorizedToDownloadNFe = default(List<CompanyAuthorizedToDownloadNFe>))
        {
            // to ensure "Code" is required (not null)
            if (Code == null)
            {
                throw new InvalidDataException("Code is a required property for Company and cannot be null");
            }
            else
            {
                this.Code = Code;
            }
            // to ensure "OfficialName" is required (not null)
            if (OfficialName == null)
            {
                throw new InvalidDataException("OfficialName is a required property for Company and cannot be null");
            }
            else
            {
                this.OfficialName = OfficialName;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Company and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "EntityType" is required (not null)
            if (EntityType == null)
            {
                throw new InvalidDataException("EntityType is a required property for Company and cannot be null");
            }
            else
            {
                this.EntityType = EntityType;
            }
            // to ensure "FederalTaxRegime" is required (not null)
            if (FederalTaxRegime == null)
            {
                throw new InvalidDataException("FederalTaxRegime is a required property for Company and cannot be null");
            }
            else
            {
                this.FederalTaxRegime = FederalTaxRegime;
            }
            this.SubjectToSRF1234 = SubjectToSRF1234;
            this.PisSubjectTo = PisSubjectTo;
            this.CofinsSubjectTo = CofinsSubjectTo;
            this.CsllSubjectTo = CsllSubjectTo;
            this.ReceiptsAreFullNoCumulativePisCofins = ReceiptsAreFullNoCumulativePisCofins;
            this.InssWithholdSubjectTo = InssWithholdSubjectTo;
            this.IssWithholdSubjectTo = IssWithholdSubjectTo;
            this.IrrfWithholdSubjectTo = IrrfWithholdSubjectTo;
            this.IcmsRateForSimplestaxregime = IcmsRateForSimplestaxregime;
            this.IsExemptByGrossRevenueForSimplestaxregime = IsExemptByGrossRevenueForSimplestaxregime;
            this.Configuration = Configuration;
            this.MailServer = MailServer;
            this.AuthorizedToDownloadNFe = AuthorizedToDownloadNFe;
        }
        
        /// <summary>
        /// string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company
        /// </summary>
        /// <value>string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Official Company name (Raz√£o Social)
        /// </summary>
        /// <value>Official Company name (Raz√£o Social)</value>
        [DataMember(Name="officialName", EmitDefaultValue=false)]
        public string OfficialName { get; set; }
        /// <summary>
        /// Company name (DBA - Nome de Fantasia),  Used to identify branches/subsidiaries with same name
        /// </summary>
        /// <value>Company name (DBA - Nome de Fantasia),  Used to identify branches/subsidiaries with same name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name="entityType", EmitDefaultValue=false)]
        public EntityType EntityType { get; set; }
        /// <summary>
        /// Company has participation of state-owned capital (it will be considerated like a government entity)
        /// </summary>
        /// <value>Company has participation of state-owned capital (it will be considerated like a government entity)</value>
        [DataMember(Name="subjectToSRF1234", EmitDefaultValue=false)]
        public bool? SubjectToSRF1234 { get; set; }
        /// <summary>
        /// Gets or Sets FederalTaxRegime
        /// </summary>
        [DataMember(Name="federalTaxRegime", EmitDefaultValue=false)]
        public FederalTaxRegime FederalTaxRegime { get; set; }
        /// <summary>
        /// When th company is REAL PROFIT usually it operates under a Non-Cumulative PIS/COFINS regime But exist some services that are always Cumulative regime. If the company has all receipts from Non-Cumulative services this flag will be set to True. This flag informs special conditions to credit of PIS/COFINS when this company is out of Free zone and  purchases from Free Zone Company Quando uma empresa fora da Zona Franca adquire uma produto ou servi√ßo de uma empresa situada na Zona Franca de Manaus, o cr√©dito de PIS E COFINS segue estas aliquotas diferenciadas. Fundamenta√ß√£o, art. 5¬∫ da Instru√ß√£o Normativa SRF n¬∫ 546/2005; art. 3¬∫, ¬ß 12 da Lei n¬∫ 10.637/2002; art. 3¬∫, ¬ß 17 da Lei n¬∫ 10.833/2003; art. 4¬∫ da Lei n¬∫ 11.307/2006. DESTINAT√ÅRIO AL√çQUOTAS PIS COFINS a) Venda efetuada a pessoa jur√≠dica estabelecida fora da Zona Franca de Manaus, que apure a Contribui√ß√£o para o PIS/PASEP no regime de n√£o-cumulatividade d√©bito 0,65% 3% cr√©dito 1% 4,6% c) Venda efetuada a pessoa jur√≠dica estabelecida fora da Zona Franca de Manaus, que apure o imposto de renda com base no lucro real e que tenha sua receita, total ou parcialmente, exclu√≠da do regime de incid√™ncia n√£o-cumulativa da Contribui√ß√£o para o PIS/PASEP d√©bito 1,3% 6% cr√©dito 1,65% 7,6% 
        /// </summary>
        /// <value>When th company is REAL PROFIT usually it operates under a Non-Cumulative PIS/COFINS regime But exist some services that are always Cumulative regime. If the company has all receipts from Non-Cumulative services this flag will be set to True. This flag informs special conditions to credit of PIS/COFINS when this company is out of Free zone and  purchases from Free Zone Company Quando uma empresa fora da Zona Franca adquire uma produto ou servi√ßo de uma empresa situada na Zona Franca de Manaus, o cr√©dito de PIS E COFINS segue estas aliquotas diferenciadas. Fundamenta√ß√£o, art. 5¬∫ da Instru√ß√£o Normativa SRF n¬∫ 546/2005; art. 3¬∫, ¬ß 12 da Lei n¬∫ 10.637/2002; art. 3¬∫, ¬ß 17 da Lei n¬∫ 10.833/2003; art. 4¬∫ da Lei n¬∫ 11.307/2006. DESTINAT√ÅRIO AL√çQUOTAS PIS COFINS a) Venda efetuada a pessoa jur√≠dica estabelecida fora da Zona Franca de Manaus, que apure a Contribui√ß√£o para o PIS/PASEP no regime de n√£o-cumulatividade d√©bito 0,65% 3% cr√©dito 1% 4,6% c) Venda efetuada a pessoa jur√≠dica estabelecida fora da Zona Franca de Manaus, que apure o imposto de renda com base no lucro real e que tenha sua receita, total ou parcialmente, exclu√≠da do regime de incid√™ncia n√£o-cumulativa da Contribui√ß√£o para o PIS/PASEP d√©bito 1,3% 6% cr√©dito 1,65% 7,6% </value>
        [DataMember(Name="receiptsAreFullNoCumulativePisCofins", EmitDefaultValue=false)]
        public bool? ReceiptsAreFullNoCumulativePisCofins { get; set; }
        /// <summary>
        /// On purchase transaction, to force withholding INSS this Flag can be set to True
        /// </summary>
        /// <value>On purchase transaction, to force withholding INSS this Flag can be set to True</value>
        [DataMember(Name="inssWithholdSubjectTo", EmitDefaultValue=false)]
        public bool? InssWithholdSubjectTo { get; set; }
        /// <summary>
        /// On purchase transaction, to force withhold ISS this Flag can be set to True
        /// </summary>
        /// <value>On purchase transaction, to force withhold ISS this Flag can be set to True</value>
        [DataMember(Name="issWithholdSubjectTo", EmitDefaultValue=false)]
        public bool? IssWithholdSubjectTo { get; set; }
        /// <summary>
        /// On purchase transaction, if this flag is FALSE, the system will not withhold IRRF. if this flag is TRUE the system will analise other rules to define if will have witholding 
        /// </summary>
        /// <value>On purchase transaction, if this flag is FALSE, the system will not withhold IRRF. if this flag is TRUE the system will analise other rules to define if will have witholding </value>
        [DataMember(Name="irrfWithholdSubjectTo", EmitDefaultValue=false)]
        public bool? IrrfWithholdSubjectTo { get; set; }
        /// <summary>
        /// Actual ICMS Rate for this company (if the company is Tax Regime Simplified). Aliquota de ICMS da companhia caso Optante do Simples 
        /// </summary>
        /// <value>Actual ICMS Rate for this company (if the company is Tax Regime Simplified). Aliquota de ICMS da companhia caso Optante do Simples </value>
        [DataMember(Name="icmsRateForSimplestaxregime", EmitDefaultValue=false)]
        public double? IcmsRateForSimplestaxregime { get; set; }
        /// <summary>
        /// ICMS Exempt when Tax Regime is Simplified because total gross revenue is bellow amount defined by state (see PARAN√Å State) Isen√ß√£o do ICMS no Simples Nacional para faixa de receita bruta 
        /// </summary>
        /// <value>ICMS Exempt when Tax Regime is Simplified because total gross revenue is bellow amount defined by state (see PARAN√Å State) Isen√ß√£o do ICMS no Simples Nacional para faixa de receita bruta </value>
        [DataMember(Name="isExemptByGrossRevenueForSimplestaxregime", EmitDefaultValue=false)]
        public bool? IsExemptByGrossRevenueForSimplestaxregime { get; set; }
        /// <summary>
        /// Gets or Sets Configuration
        /// </summary>
        [DataMember(Name="configuration", EmitDefaultValue=false)]
        public CompanyConfiguration Configuration { get; set; }
        /// <summary>
        /// Gets or Sets MailServer
        /// </summary>
        [DataMember(Name="mailServer", EmitDefaultValue=false)]
        public CompanyMailServer MailServer { get; set; }
        /// <summary>
        /// Person or company authorized to downloadNFe
        /// </summary>
        /// <value>Person or company authorized to downloadNFe</value>
        [DataMember(Name="authorizedToDownloadNFe", EmitDefaultValue=false)]
        public List<CompanyAuthorizedToDownloadNFe> AuthorizedToDownloadNFe { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Company {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  OfficialName: ").Append(OfficialName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  SubjectToSRF1234: ").Append(SubjectToSRF1234).Append("\n");
            sb.Append("  FederalTaxRegime: ").Append(FederalTaxRegime).Append("\n");
            sb.Append("  PisSubjectTo: ").Append(PisSubjectTo).Append("\n");
            sb.Append("  CofinsSubjectTo: ").Append(CofinsSubjectTo).Append("\n");
            sb.Append("  CsllSubjectTo: ").Append(CsllSubjectTo).Append("\n");
            sb.Append("  ReceiptsAreFullNoCumulativePisCofins: ").Append(ReceiptsAreFullNoCumulativePisCofins).Append("\n");
            sb.Append("  InssWithholdSubjectTo: ").Append(InssWithholdSubjectTo).Append("\n");
            sb.Append("  IssWithholdSubjectTo: ").Append(IssWithholdSubjectTo).Append("\n");
            sb.Append("  IrrfWithholdSubjectTo: ").Append(IrrfWithholdSubjectTo).Append("\n");
            sb.Append("  IcmsRateForSimplestaxregime: ").Append(IcmsRateForSimplestaxregime).Append("\n");
            sb.Append("  IsExemptByGrossRevenueForSimplestaxregime: ").Append(IsExemptByGrossRevenueForSimplestaxregime).Append("\n");
            sb.Append("  Configuration: ").Append(Configuration).Append("\n");
            sb.Append("  MailServer: ").Append(MailServer).Append("\n");
            sb.Append("  AuthorizedToDownloadNFe: ").Append(AuthorizedToDownloadNFe).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Company);
        }

        /// <summary>
        /// Returns true if Company instances are equal
        /// </summary>
        /// <param name="other">Instance of Company to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Company other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.OfficialName == other.OfficialName ||
                    this.OfficialName != null &&
                    this.OfficialName.Equals(other.OfficialName)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.EntityType == other.EntityType ||
                    this.EntityType != null &&
                    this.EntityType.Equals(other.EntityType)
                ) && 
                (
                    this.SubjectToSRF1234 == other.SubjectToSRF1234 ||
                    this.SubjectToSRF1234 != null &&
                    this.SubjectToSRF1234.Equals(other.SubjectToSRF1234)
                ) && 
                (
                    this.FederalTaxRegime == other.FederalTaxRegime ||
                    this.FederalTaxRegime != null &&
                    this.FederalTaxRegime.Equals(other.FederalTaxRegime)
                ) && 
                (
                    this.PisSubjectTo == other.PisSubjectTo ||
                    this.PisSubjectTo != null &&
                    this.PisSubjectTo.Equals(other.PisSubjectTo)
                ) && 
                (
                    this.CofinsSubjectTo == other.CofinsSubjectTo ||
                    this.CofinsSubjectTo != null &&
                    this.CofinsSubjectTo.Equals(other.CofinsSubjectTo)
                ) && 
                (
                    this.CsllSubjectTo == other.CsllSubjectTo ||
                    this.CsllSubjectTo != null &&
                    this.CsllSubjectTo.Equals(other.CsllSubjectTo)
                ) && 
                (
                    this.ReceiptsAreFullNoCumulativePisCofins == other.ReceiptsAreFullNoCumulativePisCofins ||
                    this.ReceiptsAreFullNoCumulativePisCofins != null &&
                    this.ReceiptsAreFullNoCumulativePisCofins.Equals(other.ReceiptsAreFullNoCumulativePisCofins)
                ) && 
                (
                    this.InssWithholdSubjectTo == other.InssWithholdSubjectTo ||
                    this.InssWithholdSubjectTo != null &&
                    this.InssWithholdSubjectTo.Equals(other.InssWithholdSubjectTo)
                ) && 
                (
                    this.IssWithholdSubjectTo == other.IssWithholdSubjectTo ||
                    this.IssWithholdSubjectTo != null &&
                    this.IssWithholdSubjectTo.Equals(other.IssWithholdSubjectTo)
                ) && 
                (
                    this.IrrfWithholdSubjectTo == other.IrrfWithholdSubjectTo ||
                    this.IrrfWithholdSubjectTo != null &&
                    this.IrrfWithholdSubjectTo.Equals(other.IrrfWithholdSubjectTo)
                ) && 
                (
                    this.IcmsRateForSimplestaxregime == other.IcmsRateForSimplestaxregime ||
                    this.IcmsRateForSimplestaxregime != null &&
                    this.IcmsRateForSimplestaxregime.Equals(other.IcmsRateForSimplestaxregime)
                ) && 
                (
                    this.IsExemptByGrossRevenueForSimplestaxregime == other.IsExemptByGrossRevenueForSimplestaxregime ||
                    this.IsExemptByGrossRevenueForSimplestaxregime != null &&
                    this.IsExemptByGrossRevenueForSimplestaxregime.Equals(other.IsExemptByGrossRevenueForSimplestaxregime)
                ) && 
                (
                    this.Configuration == other.Configuration ||
                    this.Configuration != null &&
                    this.Configuration.Equals(other.Configuration)
                ) && 
                (
                    this.MailServer == other.MailServer ||
                    this.MailServer != null &&
                    this.MailServer.Equals(other.MailServer)
                ) && 
                (
                    this.AuthorizedToDownloadNFe == other.AuthorizedToDownloadNFe ||
                    this.AuthorizedToDownloadNFe != null &&
                    this.AuthorizedToDownloadNFe.SequenceEqual(other.AuthorizedToDownloadNFe)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.OfficialName != null)
                    hash = hash * 59 + this.OfficialName.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.EntityType != null)
                    hash = hash * 59 + this.EntityType.GetHashCode();
                if (this.SubjectToSRF1234 != null)
                    hash = hash * 59 + this.SubjectToSRF1234.GetHashCode();
                if (this.FederalTaxRegime != null)
                    hash = hash * 59 + this.FederalTaxRegime.GetHashCode();
                if (this.PisSubjectTo != null)
                    hash = hash * 59 + this.PisSubjectTo.GetHashCode();
                if (this.CofinsSubjectTo != null)
                    hash = hash * 59 + this.CofinsSubjectTo.GetHashCode();
                if (this.CsllSubjectTo != null)
                    hash = hash * 59 + this.CsllSubjectTo.GetHashCode();
                if (this.ReceiptsAreFullNoCumulativePisCofins != null)
                    hash = hash * 59 + this.ReceiptsAreFullNoCumulativePisCofins.GetHashCode();
                if (this.InssWithholdSubjectTo != null)
                    hash = hash * 59 + this.InssWithholdSubjectTo.GetHashCode();
                if (this.IssWithholdSubjectTo != null)
                    hash = hash * 59 + this.IssWithholdSubjectTo.GetHashCode();
                if (this.IrrfWithholdSubjectTo != null)
                    hash = hash * 59 + this.IrrfWithholdSubjectTo.GetHashCode();
                if (this.IcmsRateForSimplestaxregime != null)
                    hash = hash * 59 + this.IcmsRateForSimplestaxregime.GetHashCode();
                if (this.IsExemptByGrossRevenueForSimplestaxregime != null)
                    hash = hash * 59 + this.IsExemptByGrossRevenueForSimplestaxregime.GetHashCode();
                if (this.Configuration != null)
                    hash = hash * 59 + this.Configuration.GetHashCode();
                if (this.MailServer != null)
                    hash = hash * 59 + this.MailServer.GetHashCode();
                if (this.AuthorizedToDownloadNFe != null)
                    hash = hash * 59 + this.AuthorizedToDownloadNFe.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Code (string) maxLength
            if(this.Code != null && this.Code.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Code, length must be less than 60.", new [] { "Code" });
            }

            // OfficialName (string) maxLength
            if(this.OfficialName != null && this.OfficialName.Length > 150)
            {
                yield return new ValidationResult("Invalid value for OfficialName, length must be less than 150.", new [] { "OfficialName" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 150)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 150.", new [] { "Name" });
            }

            yield break;
        }
    }

}
