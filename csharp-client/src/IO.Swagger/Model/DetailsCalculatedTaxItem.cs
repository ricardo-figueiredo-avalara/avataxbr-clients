/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DetailsCalculatedTaxItem
    /// </summary>
    [DataContract]
    public partial class DetailsCalculatedTaxItem :  IEquatable<DetailsCalculatedTaxItem>, IValidatableObject
    {
        /// <summary>
        /// Type of jurisdiction - 'City' - 'State' - 'Country' 
        /// </summary>
        /// <value>Type of jurisdiction - 'City' - 'State' - 'Country' </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JurisdictionTypeEnum
        {
            
            /// <summary>
            /// Enum City for "City"
            /// </summary>
            [EnumMember(Value = "City")]
            City,
            
            /// <summary>
            /// Enum State for "State"
            /// </summary>
            [EnumMember(Value = "State")]
            State,
            
            /// <summary>
            /// Enum Country for "Country"
            /// </summary>
            [EnumMember(Value = "Country")]
            Country
        }

        /// <summary>
        /// Tax identificator
        /// </summary>
        /// <value>Tax identificator</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxTypeEnum
        {
            
            /// <summary>
            /// Enum Icms for "icms"
            /// </summary>
            [EnumMember(Value = "icms")]
            Icms,
            
            /// <summary>
            /// Enum IcmsSt for "icmsSt"
            /// </summary>
            [EnumMember(Value = "icmsSt")]
            IcmsSt,
            
            /// <summary>
            /// Enum IcmsStSd for "icmsStSd"
            /// </summary>
            [EnumMember(Value = "icmsStSd")]
            IcmsStSd,
            
            /// <summary>
            /// Enum IcmsPartOwn for "icmsPartOwn"
            /// </summary>
            [EnumMember(Value = "icmsPartOwn")]
            IcmsPartOwn,
            
            /// <summary>
            /// Enum IcmsPartDest for "icmsPartDest"
            /// </summary>
            [EnumMember(Value = "icmsPartDest")]
            IcmsPartDest,
            
            /// <summary>
            /// Enum IcmsDifaFCP for "icmsDifaFCP"
            /// </summary>
            [EnumMember(Value = "icmsDifaFCP")]
            IcmsDifaFCP,
            
            /// <summary>
            /// Enum IcmsDifaDest for "icmsDifaDest"
            /// </summary>
            [EnumMember(Value = "icmsDifaDest")]
            IcmsDifaDest,
            
            /// <summary>
            /// Enum IcmsDifaRemet for "icmsDifaRemet"
            /// </summary>
            [EnumMember(Value = "icmsDifaRemet")]
            IcmsDifaRemet,
            
            /// <summary>
            /// Enum IcmsRf for "icmsRf"
            /// </summary>
            [EnumMember(Value = "icmsRf")]
            IcmsRf,
            
            /// <summary>
            /// Enum IcmsDeson for "icmsDeson"
            /// </summary>
            [EnumMember(Value = "icmsDeson")]
            IcmsDeson,
            
            /// <summary>
            /// Enum IcmsCredsn for "icmsCredsn"
            /// </summary>
            [EnumMember(Value = "icmsCredsn")]
            IcmsCredsn,
            
            /// <summary>
            /// Enum Pis for "pis"
            /// </summary>
            [EnumMember(Value = "pis")]
            Pis,
            
            /// <summary>
            /// Enum PisSt for "pisSt"
            /// </summary>
            [EnumMember(Value = "pisSt")]
            PisSt,
            
            /// <summary>
            /// Enum Cofins for "cofins"
            /// </summary>
            [EnumMember(Value = "cofins")]
            Cofins,
            
            /// <summary>
            /// Enum CofinsSt for "cofinsSt"
            /// </summary>
            [EnumMember(Value = "cofinsSt")]
            CofinsSt,
            
            /// <summary>
            /// Enum Ipi for "ipi"
            /// </summary>
            [EnumMember(Value = "ipi")]
            Ipi,
            
            /// <summary>
            /// Enum IpiReturned for "ipiReturned"
            /// </summary>
            [EnumMember(Value = "ipiReturned")]
            IpiReturned,
            
            /// <summary>
            /// Enum Ii for "ii"
            /// </summary>
            [EnumMember(Value = "ii")]
            Ii,
            
            /// <summary>
            /// Enum Iof for "iof"
            /// </summary>
            [EnumMember(Value = "iof")]
            Iof,
            
            /// <summary>
            /// Enum AproxtribState for "aproxtribState"
            /// </summary>
            [EnumMember(Value = "aproxtribState")]
            AproxtribState,
            
            /// <summary>
            /// Enum AproxtribFed for "aproxtribFed"
            /// </summary>
            [EnumMember(Value = "aproxtribFed")]
            AproxtribFed,
            
            /// <summary>
            /// Enum Aproxtrib for "aproxtrib"
            /// </summary>
            [EnumMember(Value = "aproxtrib")]
            Aproxtrib
        }

        /// <summary>
        /// This string with type of rule
        /// </summary>
        /// <value>This string with type of rule</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxRuleTypeEnum
        {
            
            /// <summary>
            /// Enum SELLER for "SELLER"
            /// </summary>
            [EnumMember(Value = "SELLER")]
            SELLER,
            
            /// <summary>
            /// Enum BUYER for "BUYER"
            /// </summary>
            [EnumMember(Value = "BUYER")]
            BUYER,
            
            /// <summary>
            /// Enum TRANSACTION for "TRANSACTION"
            /// </summary>
            [EnumMember(Value = "TRANSACTION")]
            TRANSACTION,
            
            /// <summary>
            /// Enum ITEM for "ITEM"
            /// </summary>
            [EnumMember(Value = "ITEM")]
            ITEM,
            
            /// <summary>
            /// Enum TAX for "TAX"
            /// </summary>
            [EnumMember(Value = "TAX")]
            TAX
        }

        /// <summary>
        /// Type of jurisdiction - 'City' - 'State' - 'Country' 
        /// </summary>
        /// <value>Type of jurisdiction - 'City' - 'State' - 'Country' </value>
        [DataMember(Name="jurisdictionType", EmitDefaultValue=false)]
        public JurisdictionTypeEnum? JurisdictionType { get; set; }
        /// <summary>
        /// Tax identificator
        /// </summary>
        /// <value>Tax identificator</value>
        [DataMember(Name="taxType", EmitDefaultValue=false)]
        public TaxTypeEnum? TaxType { get; set; }
        /// <summary>
        /// This string with type of rule
        /// </summary>
        /// <value>This string with type of rule</value>
        [DataMember(Name="taxRuleType", EmitDefaultValue=false)]
        public TaxRuleTypeEnum? TaxRuleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailsCalculatedTaxItem" /> class.
        /// </summary>
        /// <param name="LocationType">This string captures the applicable location type. Location used for calc. Buyer or Seller.</param>
        /// <param name="JurisdictionName">Jurisdiction used for calctax amount.</param>
        /// <param name="JurisdictionType">Type of jurisdiction - &#39;City&#39; - &#39;State&#39; - &#39;Country&#39; .</param>
        /// <param name="TaxType">Tax identificator.</param>
        /// <param name="RateType">Name of configuration rate.</param>
        /// <param name="Scenario">This string captures the transaction scenario used to calculate the tax for this tax type. Scenarios are specific to the tax type. This field provides information about how the tax engine interpreted the transaction information that was passed in..</param>
        /// <param name="SubtotalTaxable">This decimal captures how much of the lineAmount was taxable by this tax, calc base.</param>
        /// <param name="Rate">This decimal captures the tax rate for this tax.3.00 (3%).</param>
        /// <param name="Tax">This decimal captures how much of the lineAmount was taxable by this tax.</param>
        /// <param name="ExemptionCode">This string is required if is exempt.</param>
        /// <param name="SignificantLocations">This element captures the list of locations that contributed to the tax determination. for Service is Buyer and Seller Address.</param>
        /// <param name="TaxRuleType">This string with type of rule.</param>
        /// <param name="Source">Source.</param>
        /// <param name="CstB">CstB.</param>
        /// <param name="ModBC">ModBC.</param>
        /// <param name="Cst">Cst.</param>
        public DetailsCalculatedTaxItem(string LocationType = default(string), string JurisdictionName = default(string), JurisdictionTypeEnum? JurisdictionType = default(JurisdictionTypeEnum?), TaxTypeEnum? TaxType = default(TaxTypeEnum?), string RateType = default(string), string Scenario = default(string), double? SubtotalTaxable = default(double?), double? Rate = default(double?), double? Tax = default(double?), string ExemptionCode = default(string), List<string> SignificantLocations = default(List<string>), TaxRuleTypeEnum? TaxRuleType = default(TaxRuleTypeEnum?), int? Source = default(int?), string CstB = default(string), string ModBC = default(string), string Cst = default(string))
        {
            this.LocationType = LocationType;
            this.JurisdictionName = JurisdictionName;
            this.JurisdictionType = JurisdictionType;
            this.TaxType = TaxType;
            this.RateType = RateType;
            this.Scenario = Scenario;
            this.SubtotalTaxable = SubtotalTaxable;
            this.Rate = Rate;
            this.Tax = Tax;
            this.ExemptionCode = ExemptionCode;
            this.SignificantLocations = SignificantLocations;
            this.TaxRuleType = TaxRuleType;
            this.Source = Source;
            this.CstB = CstB;
            this.ModBC = ModBC;
            this.Cst = Cst;
        }
        
        /// <summary>
        /// This string captures the applicable location type. Location used for calc. Buyer or Seller
        /// </summary>
        /// <value>This string captures the applicable location type. Location used for calc. Buyer or Seller</value>
        [DataMember(Name="locationType", EmitDefaultValue=false)]
        public string LocationType { get; set; }
        /// <summary>
        /// Jurisdiction used for calctax amount
        /// </summary>
        /// <value>Jurisdiction used for calctax amount</value>
        [DataMember(Name="jurisdictionName", EmitDefaultValue=false)]
        public string JurisdictionName { get; set; }
        /// <summary>
        /// Name of configuration rate
        /// </summary>
        /// <value>Name of configuration rate</value>
        [DataMember(Name="rateType", EmitDefaultValue=false)]
        public string RateType { get; set; }
        /// <summary>
        /// This string captures the transaction scenario used to calculate the tax for this tax type. Scenarios are specific to the tax type. This field provides information about how the tax engine interpreted the transaction information that was passed in.
        /// </summary>
        /// <value>This string captures the transaction scenario used to calculate the tax for this tax type. Scenarios are specific to the tax type. This field provides information about how the tax engine interpreted the transaction information that was passed in.</value>
        [DataMember(Name="scenario", EmitDefaultValue=false)]
        public string Scenario { get; set; }
        /// <summary>
        /// This decimal captures how much of the lineAmount was taxable by this tax, calc base
        /// </summary>
        /// <value>This decimal captures how much of the lineAmount was taxable by this tax, calc base</value>
        [DataMember(Name="subtotalTaxable", EmitDefaultValue=false)]
        public double? SubtotalTaxable { get; set; }
        /// <summary>
        /// This decimal captures the tax rate for this tax.3.00 (3%)
        /// </summary>
        /// <value>This decimal captures the tax rate for this tax.3.00 (3%)</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public double? Rate { get; set; }
        /// <summary>
        /// This decimal captures how much of the lineAmount was taxable by this tax
        /// </summary>
        /// <value>This decimal captures how much of the lineAmount was taxable by this tax</value>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public double? Tax { get; set; }
        /// <summary>
        /// This string is required if is exempt
        /// </summary>
        /// <value>This string is required if is exempt</value>
        [DataMember(Name="exemptionCode", EmitDefaultValue=false)]
        public string ExemptionCode { get; set; }
        /// <summary>
        /// This element captures the list of locations that contributed to the tax determination. for Service is Buyer and Seller Address
        /// </summary>
        /// <value>This element captures the list of locations that contributed to the tax determination. for Service is Buyer and Seller Address</value>
        [DataMember(Name="significantLocations", EmitDefaultValue=false)]
        public List<string> SignificantLocations { get; set; }
        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public int? Source { get; set; }
        /// <summary>
        /// Gets or Sets CstB
        /// </summary>
        [DataMember(Name="cstB", EmitDefaultValue=false)]
        public string CstB { get; set; }
        /// <summary>
        /// Gets or Sets ModBC
        /// </summary>
        [DataMember(Name="modBC", EmitDefaultValue=false)]
        public string ModBC { get; set; }
        /// <summary>
        /// Gets or Sets Cst
        /// </summary>
        [DataMember(Name="cst", EmitDefaultValue=false)]
        public string Cst { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailsCalculatedTaxItem {\n");
            sb.Append("  LocationType: ").Append(LocationType).Append("\n");
            sb.Append("  JurisdictionName: ").Append(JurisdictionName).Append("\n");
            sb.Append("  JurisdictionType: ").Append(JurisdictionType).Append("\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("  RateType: ").Append(RateType).Append("\n");
            sb.Append("  Scenario: ").Append(Scenario).Append("\n");
            sb.Append("  SubtotalTaxable: ").Append(SubtotalTaxable).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  ExemptionCode: ").Append(ExemptionCode).Append("\n");
            sb.Append("  SignificantLocations: ").Append(SignificantLocations).Append("\n");
            sb.Append("  TaxRuleType: ").Append(TaxRuleType).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  CstB: ").Append(CstB).Append("\n");
            sb.Append("  ModBC: ").Append(ModBC).Append("\n");
            sb.Append("  Cst: ").Append(Cst).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DetailsCalculatedTaxItem);
        }

        /// <summary>
        /// Returns true if DetailsCalculatedTaxItem instances are equal
        /// </summary>
        /// <param name="other">Instance of DetailsCalculatedTaxItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailsCalculatedTaxItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.LocationType == other.LocationType ||
                    this.LocationType != null &&
                    this.LocationType.Equals(other.LocationType)
                ) && 
                (
                    this.JurisdictionName == other.JurisdictionName ||
                    this.JurisdictionName != null &&
                    this.JurisdictionName.Equals(other.JurisdictionName)
                ) && 
                (
                    this.JurisdictionType == other.JurisdictionType ||
                    this.JurisdictionType != null &&
                    this.JurisdictionType.Equals(other.JurisdictionType)
                ) && 
                (
                    this.TaxType == other.TaxType ||
                    this.TaxType != null &&
                    this.TaxType.Equals(other.TaxType)
                ) && 
                (
                    this.RateType == other.RateType ||
                    this.RateType != null &&
                    this.RateType.Equals(other.RateType)
                ) && 
                (
                    this.Scenario == other.Scenario ||
                    this.Scenario != null &&
                    this.Scenario.Equals(other.Scenario)
                ) && 
                (
                    this.SubtotalTaxable == other.SubtotalTaxable ||
                    this.SubtotalTaxable != null &&
                    this.SubtotalTaxable.Equals(other.SubtotalTaxable)
                ) && 
                (
                    this.Rate == other.Rate ||
                    this.Rate != null &&
                    this.Rate.Equals(other.Rate)
                ) && 
                (
                    this.Tax == other.Tax ||
                    this.Tax != null &&
                    this.Tax.Equals(other.Tax)
                ) && 
                (
                    this.ExemptionCode == other.ExemptionCode ||
                    this.ExemptionCode != null &&
                    this.ExemptionCode.Equals(other.ExemptionCode)
                ) && 
                (
                    this.SignificantLocations == other.SignificantLocations ||
                    this.SignificantLocations != null &&
                    this.SignificantLocations.SequenceEqual(other.SignificantLocations)
                ) && 
                (
                    this.TaxRuleType == other.TaxRuleType ||
                    this.TaxRuleType != null &&
                    this.TaxRuleType.Equals(other.TaxRuleType)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                ) && 
                (
                    this.CstB == other.CstB ||
                    this.CstB != null &&
                    this.CstB.Equals(other.CstB)
                ) && 
                (
                    this.ModBC == other.ModBC ||
                    this.ModBC != null &&
                    this.ModBC.Equals(other.ModBC)
                ) && 
                (
                    this.Cst == other.Cst ||
                    this.Cst != null &&
                    this.Cst.Equals(other.Cst)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.LocationType != null)
                    hash = hash * 59 + this.LocationType.GetHashCode();
                if (this.JurisdictionName != null)
                    hash = hash * 59 + this.JurisdictionName.GetHashCode();
                if (this.JurisdictionType != null)
                    hash = hash * 59 + this.JurisdictionType.GetHashCode();
                if (this.TaxType != null)
                    hash = hash * 59 + this.TaxType.GetHashCode();
                if (this.RateType != null)
                    hash = hash * 59 + this.RateType.GetHashCode();
                if (this.Scenario != null)
                    hash = hash * 59 + this.Scenario.GetHashCode();
                if (this.SubtotalTaxable != null)
                    hash = hash * 59 + this.SubtotalTaxable.GetHashCode();
                if (this.Rate != null)
                    hash = hash * 59 + this.Rate.GetHashCode();
                if (this.Tax != null)
                    hash = hash * 59 + this.Tax.GetHashCode();
                if (this.ExemptionCode != null)
                    hash = hash * 59 + this.ExemptionCode.GetHashCode();
                if (this.SignificantLocations != null)
                    hash = hash * 59 + this.SignificantLocations.GetHashCode();
                if (this.TaxRuleType != null)
                    hash = hash * 59 + this.TaxRuleType.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                if (this.CstB != null)
                    hash = hash * 59 + this.CstB.GetHashCode();
                if (this.ModBC != null)
                    hash = hash * 59 + this.ModBC.GetHashCode();
                if (this.Cst != null)
                    hash = hash * 59 + this.Cst.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
