/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// IssConfServiceList
    /// </summary>
    [DataContract]
    public partial class IssConfServiceList :  IEquatable<IssConfServiceList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssConfServiceList" /> class.
        /// </summary>
        /// <param name="Agast">Agast.</param>
        /// <param name="CityServiceCode">CityServiceCode.</param>
        /// <param name="TaxRate">TaxRate.</param>
        public IssConfServiceList(string Agast = default(string), string CityServiceCode = default(string), IssConfServiceListTaxRate TaxRate = default(IssConfServiceListTaxRate))
        {
            this.Agast = Agast;
            this.CityServiceCode = CityServiceCode;
            this.TaxRate = TaxRate;
        }
        
        /// <summary>
        /// Gets or Sets Agast
        /// </summary>
        [DataMember(Name="agast", EmitDefaultValue=false)]
        public string Agast { get; set; }
        /// <summary>
        /// Gets or Sets CityServiceCode
        /// </summary>
        [DataMember(Name="cityServiceCode", EmitDefaultValue=false)]
        public string CityServiceCode { get; set; }
        /// <summary>
        /// Gets or Sets TaxRate
        /// </summary>
        [DataMember(Name="taxRate", EmitDefaultValue=false)]
        public IssConfServiceListTaxRate TaxRate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssConfServiceList {\n");
            sb.Append("  Agast: ").Append(Agast).Append("\n");
            sb.Append("  CityServiceCode: ").Append(CityServiceCode).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IssConfServiceList);
        }

        /// <summary>
        /// Returns true if IssConfServiceList instances are equal
        /// </summary>
        /// <param name="other">Instance of IssConfServiceList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssConfServiceList other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Agast == other.Agast ||
                    this.Agast != null &&
                    this.Agast.Equals(other.Agast)
                ) && 
                (
                    this.CityServiceCode == other.CityServiceCode ||
                    this.CityServiceCode != null &&
                    this.CityServiceCode.Equals(other.CityServiceCode)
                ) && 
                (
                    this.TaxRate == other.TaxRate ||
                    this.TaxRate != null &&
                    this.TaxRate.Equals(other.TaxRate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Agast != null)
                    hash = hash * 59 + this.Agast.GetHashCode();
                if (this.CityServiceCode != null)
                    hash = hash * 59 + this.CityServiceCode.GetHashCode();
                if (this.TaxRate != null)
                    hash = hash * 59 + this.TaxRate.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
