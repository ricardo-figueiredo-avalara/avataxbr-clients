/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ItemCpom
    /// </summary>
    [DataContract]
    public partial class ItemCpom :  IEquatable<ItemCpom>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemCpom" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemCpom() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemCpom" /> class.
        /// </summary>
        /// <param name="CompanyId">Company ID (required).</param>
        /// <param name="CityCode">IBGE city code (required).</param>
        /// <param name="ItemCode">ERP Code (required).</param>
        /// <param name="Code">Code in City (required).</param>
        public ItemCpom(Guid? CompanyId = default(Guid?), string CityCode = default(string), string ItemCode = default(string), string Code = default(string))
        {
            // to ensure "CompanyId" is required (not null)
            if (CompanyId == null)
            {
                throw new InvalidDataException("CompanyId is a required property for ItemCpom and cannot be null");
            }
            else
            {
                this.CompanyId = CompanyId;
            }
            // to ensure "CityCode" is required (not null)
            if (CityCode == null)
            {
                throw new InvalidDataException("CityCode is a required property for ItemCpom and cannot be null");
            }
            else
            {
                this.CityCode = CityCode;
            }
            // to ensure "ItemCode" is required (not null)
            if (ItemCode == null)
            {
                throw new InvalidDataException("ItemCode is a required property for ItemCpom and cannot be null");
            }
            else
            {
                this.ItemCode = ItemCode;
            }
            // to ensure "Code" is required (not null)
            if (Code == null)
            {
                throw new InvalidDataException("Code is a required property for ItemCpom and cannot be null");
            }
            else
            {
                this.Code = Code;
            }
        }
        
        /// <summary>
        /// Company ID
        /// </summary>
        /// <value>Company ID</value>
        [DataMember(Name="companyId", EmitDefaultValue=false)]
        public Guid? CompanyId { get; set; }
        /// <summary>
        /// IBGE city code
        /// </summary>
        /// <value>IBGE city code</value>
        [DataMember(Name="cityCode", EmitDefaultValue=false)]
        public string CityCode { get; set; }
        /// <summary>
        /// ERP Code
        /// </summary>
        /// <value>ERP Code</value>
        [DataMember(Name="itemCode", EmitDefaultValue=false)]
        public string ItemCode { get; set; }
        /// <summary>
        /// Code in City
        /// </summary>
        /// <value>Code in City</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemCpom {\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  CityCode: ").Append(CityCode).Append("\n");
            sb.Append("  ItemCode: ").Append(ItemCode).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemCpom);
        }

        /// <summary>
        /// Returns true if ItemCpom instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemCpom to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemCpom other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CompanyId == other.CompanyId ||
                    this.CompanyId != null &&
                    this.CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    this.CityCode == other.CityCode ||
                    this.CityCode != null &&
                    this.CityCode.Equals(other.CityCode)
                ) && 
                (
                    this.ItemCode == other.ItemCode ||
                    this.ItemCode != null &&
                    this.ItemCode.Equals(other.ItemCode)
                ) && 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CompanyId != null)
                    hash = hash * 59 + this.CompanyId.GetHashCode();
                if (this.CityCode != null)
                    hash = hash * 59 + this.CityCode.GetHashCode();
                if (this.ItemCode != null)
                    hash = hash * 59 + this.ItemCode.GetHashCode();
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // CityCode (string) pattern
            Regex regexCityCode = new Regex(@"[0-9]{7}", RegexOptions.CultureInvariant);
            if (false == regexCityCode.Match(this.CityCode).Success)
            {
                yield return new ValidationResult("Invalid value for CityCode, must match a pattern of /[0-9]{7}/.", new [] { "CityCode" });
            }

            // ItemCode (string) maxLength
            if(this.ItemCode != null && this.ItemCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for ItemCode, length must be less than 60.", new [] { "ItemCode" });
            }

            yield break;
        }
    }

}
