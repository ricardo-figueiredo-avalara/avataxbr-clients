/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// This element contains a dictionary of locations such as the origin and destination addresses to be associated with this transaction. These locations may be overridden within each line item. The key for each location in the dictionary is the location &#39;purpose&#39;. Valid locations purposes are &#39;ShipFrom&#39;, &#39;ShipTo&#39;, &#39;POS&#39;, &#39;POM&#39;, &#39;POO&#39;, &#39;BillingLocation&#39;, &#39;CallPlaced&#39;, &#39;CallReceived&#39;, &#39;ServiceRendered&#39;, &#39;POA&#39; and &#39;FirstUse&#39;. There can only be one location of a given purpose in the dictionary.
    /// </summary>
    [DataContract]
    public partial class DefaultLocations :  IEquatable<DefaultLocations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultLocations" /> class.
        /// </summary>
        /// <param name="Entity">Entity.</param>
        /// <param name="Company">Company.</param>
        /// <param name="Transporter">Transporter.</param>
        /// <param name="DeliveryLocation">DeliveryLocation.</param>
        /// <param name="PickupLocation">PickupLocation.</param>
        public DefaultLocations(EntityLocation Entity = default(EntityLocation), EntityLocation Company = default(EntityLocation), EntityLocation Transporter = default(EntityLocation), EntityLocation DeliveryLocation = default(EntityLocation), EntityLocation PickupLocation = default(EntityLocation))
        {
            this.Entity = Entity;
            this.Company = Company;
            this.Transporter = Transporter;
            this.DeliveryLocation = DeliveryLocation;
            this.PickupLocation = PickupLocation;
        }
        
        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name="entity", EmitDefaultValue=false)]
        public EntityLocation Entity { get; set; }
        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public EntityLocation Company { get; set; }
        /// <summary>
        /// Gets or Sets Transporter
        /// </summary>
        [DataMember(Name="transporter", EmitDefaultValue=false)]
        public EntityLocation Transporter { get; set; }
        /// <summary>
        /// Gets or Sets DeliveryLocation
        /// </summary>
        [DataMember(Name="deliveryLocation", EmitDefaultValue=false)]
        public EntityLocation DeliveryLocation { get; set; }
        /// <summary>
        /// Gets or Sets PickupLocation
        /// </summary>
        [DataMember(Name="pickupLocation", EmitDefaultValue=false)]
        public EntityLocation PickupLocation { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DefaultLocations {\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Transporter: ").Append(Transporter).Append("\n");
            sb.Append("  DeliveryLocation: ").Append(DeliveryLocation).Append("\n");
            sb.Append("  PickupLocation: ").Append(PickupLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DefaultLocations);
        }

        /// <summary>
        /// Returns true if DefaultLocations instances are equal
        /// </summary>
        /// <param name="other">Instance of DefaultLocations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DefaultLocations other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Entity == other.Entity ||
                    this.Entity != null &&
                    this.Entity.Equals(other.Entity)
                ) && 
                (
                    this.Company == other.Company ||
                    this.Company != null &&
                    this.Company.Equals(other.Company)
                ) && 
                (
                    this.Transporter == other.Transporter ||
                    this.Transporter != null &&
                    this.Transporter.Equals(other.Transporter)
                ) && 
                (
                    this.DeliveryLocation == other.DeliveryLocation ||
                    this.DeliveryLocation != null &&
                    this.DeliveryLocation.Equals(other.DeliveryLocation)
                ) && 
                (
                    this.PickupLocation == other.PickupLocation ||
                    this.PickupLocation != null &&
                    this.PickupLocation.Equals(other.PickupLocation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Entity != null)
                    hash = hash * 59 + this.Entity.GetHashCode();
                if (this.Company != null)
                    hash = hash * 59 + this.Company.GetHashCode();
                if (this.Transporter != null)
                    hash = hash * 59 + this.Transporter.GetHashCode();
                if (this.DeliveryLocation != null)
                    hash = hash * 59 + this.DeliveryLocation.GetHashCode();
                if (this.PickupLocation != null)
                    hash = hash * 59 + this.PickupLocation.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
