/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NRefRefECF
    /// </summary>
    [DataContract]
    public partial class NRefRefECF :  IEquatable<NRefRefECF>, IValidatableObject
    {
        /// <summary>
        /// Fiscal document model - '2B' # coupon tax not ECF - '2C' # PDV coupon tax - '2D' # ECF coupon tax 
        /// </summary>
        /// <value>Fiscal document model - '2B' # coupon tax not ECF - '2C' # PDV coupon tax - '2D' # ECF coupon tax </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModECFEnum
        {
            
            /// <summary>
            /// Enum _2B for "2B"
            /// </summary>
            [EnumMember(Value = "2B")]
            _2B,
            
            /// <summary>
            /// Enum _2C for "2C"
            /// </summary>
            [EnumMember(Value = "2C")]
            _2C,
            
            /// <summary>
            /// Enum _2D for "2D"
            /// </summary>
            [EnumMember(Value = "2D")]
            _2D
        }

        /// <summary>
        /// Fiscal document model - '2B' # coupon tax not ECF - '2C' # PDV coupon tax - '2D' # ECF coupon tax 
        /// </summary>
        /// <value>Fiscal document model - '2B' # coupon tax not ECF - '2C' # PDV coupon tax - '2D' # ECF coupon tax </value>
        [DataMember(Name="modECF", EmitDefaultValue=false)]
        public ModECFEnum? ModECF { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NRefRefECF" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NRefRefECF() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NRefRefECF" /> class.
        /// </summary>
        /// <param name="NECF">ECF Sequential number that generated Cupom attached to NFe informar o número de ordem seqüencial do ECF que emitiu o Cupom Fiscal vinculado à NF-e  (required).</param>
        /// <param name="NCOO">Operational counter number attached to NFe Informar o Número do Contador de Ordem de Operação - COO vinculado à NF-e  (required).</param>
        /// <param name="ModECF">Fiscal document model - &#39;2B&#39; # coupon tax not ECF - &#39;2C&#39; # PDV coupon tax - &#39;2D&#39; # ECF coupon tax  (required).</param>
        public NRefRefECF(string NECF = default(string), string NCOO = default(string), ModECFEnum? ModECF = default(ModECFEnum?))
        {
            // to ensure "NECF" is required (not null)
            if (NECF == null)
            {
                throw new InvalidDataException("NECF is a required property for NRefRefECF and cannot be null");
            }
            else
            {
                this.NECF = NECF;
            }
            // to ensure "NCOO" is required (not null)
            if (NCOO == null)
            {
                throw new InvalidDataException("NCOO is a required property for NRefRefECF and cannot be null");
            }
            else
            {
                this.NCOO = NCOO;
            }
            // to ensure "ModECF" is required (not null)
            if (ModECF == null)
            {
                throw new InvalidDataException("ModECF is a required property for NRefRefECF and cannot be null");
            }
            else
            {
                this.ModECF = ModECF;
            }
        }
        
        /// <summary>
        /// ECF Sequential number that generated Cupom attached to NFe informar o número de ordem seqüencial do ECF que emitiu o Cupom Fiscal vinculado à NF-e 
        /// </summary>
        /// <value>ECF Sequential number that generated Cupom attached to NFe informar o número de ordem seqüencial do ECF que emitiu o Cupom Fiscal vinculado à NF-e </value>
        [DataMember(Name="nECF", EmitDefaultValue=false)]
        public string NECF { get; set; }
        /// <summary>
        /// Operational counter number attached to NFe Informar o Número do Contador de Ordem de Operação - COO vinculado à NF-e 
        /// </summary>
        /// <value>Operational counter number attached to NFe Informar o Número do Contador de Ordem de Operação - COO vinculado à NF-e </value>
        [DataMember(Name="nCOO", EmitDefaultValue=false)]
        public string NCOO { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NRefRefECF {\n");
            sb.Append("  NECF: ").Append(NECF).Append("\n");
            sb.Append("  NCOO: ").Append(NCOO).Append("\n");
            sb.Append("  ModECF: ").Append(ModECF).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NRefRefECF);
        }

        /// <summary>
        /// Returns true if NRefRefECF instances are equal
        /// </summary>
        /// <param name="other">Instance of NRefRefECF to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NRefRefECF other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.NECF == other.NECF ||
                    this.NECF != null &&
                    this.NECF.Equals(other.NECF)
                ) && 
                (
                    this.NCOO == other.NCOO ||
                    this.NCOO != null &&
                    this.NCOO.Equals(other.NCOO)
                ) && 
                (
                    this.ModECF == other.ModECF ||
                    this.ModECF != null &&
                    this.ModECF.Equals(other.ModECF)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.NECF != null)
                    hash = hash * 59 + this.NECF.GetHashCode();
                if (this.NCOO != null)
                    hash = hash * 59 + this.NCOO.GetHashCode();
                if (this.ModECF != null)
                    hash = hash * 59 + this.ModECF.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // NECF (string) pattern
            Regex regexNECF = new Regex(@"[0-9]{1,3}", RegexOptions.CultureInvariant);
            if (false == regexNECF.Match(this.NECF).Success)
            {
                yield return new ValidationResult("Invalid value for NECF, must match a pattern of /[0-9]{1,3}/.", new [] { "NECF" });
            }

            // NCOO (string) pattern
            Regex regexNCOO = new Regex(@"[0-9]{1,6}", RegexOptions.CultureInvariant);
            if (false == regexNCOO.Match(this.NCOO).Success)
            {
                yield return new ValidationResult("Invalid value for NCOO, must match a pattern of /[0-9]{1,6}/.", new [] { "NCOO" });
            }

            yield break;
        }
    }

}
