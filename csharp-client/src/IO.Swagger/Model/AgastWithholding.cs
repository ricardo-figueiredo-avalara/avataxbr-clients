/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// inform if this item is subject to withholding tax on service Transactions, default true
    /// </summary>
    [DataContract]
    public partial class AgastWithholding :  IEquatable<AgastWithholding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AgastWithholding" /> class.
        /// </summary>
        /// <param name="IRRF">IRRF.</param>
        /// <param name="IRRFLegalReason">reference id to TaxLegalReason.</param>
        /// <param name="INSSSubjectToDischarge">Item subjecto to payroll discharge Item sujeto à desoneraçãode folha de pagamento .</param>
        /// <param name="INSS">INSS.</param>
        /// <param name="INSSLegalReason">reference id to TaxLegalReason.</param>
        /// <param name="INSsForSimples">INSsForSimples.</param>
        /// <param name="INSSForSimplesLegalReason">reference id to TaxLegalReason.</param>
        /// <param name="PIS">PIS.</param>
        /// <param name="COFINS">COFINS.</param>
        /// <param name="CSLL">CSLL.</param>
        public AgastWithholding(bool? IRRF = default(bool?), string IRRFLegalReason = default(string), bool? INSSSubjectToDischarge = default(bool?), bool? INSS = default(bool?), string INSSLegalReason = default(string), bool? INSsForSimples = default(bool?), string INSSForSimplesLegalReason = default(string), AgastWithholdingPIS PIS = default(AgastWithholdingPIS), AgastWithholdingCOFINS COFINS = default(AgastWithholdingCOFINS), AgastWithholdingCSLL CSLL = default(AgastWithholdingCSLL))
        {
            this.IRRF = IRRF;
            this.IRRFLegalReason = IRRFLegalReason;
            this.INSSSubjectToDischarge = INSSSubjectToDischarge;
            this.INSS = INSS;
            this.INSSLegalReason = INSSLegalReason;
            this.INSsForSimples = INSsForSimples;
            this.INSSForSimplesLegalReason = INSSForSimplesLegalReason;
            this.PIS = PIS;
            this.COFINS = COFINS;
            this.CSLL = CSLL;
        }
        
        /// <summary>
        /// Gets or Sets IRRF
        /// </summary>
        [DataMember(Name="IRRF", EmitDefaultValue=false)]
        public bool? IRRF { get; set; }
        /// <summary>
        /// reference id to TaxLegalReason
        /// </summary>
        /// <value>reference id to TaxLegalReason</value>
        [DataMember(Name="IRRFLegalReason", EmitDefaultValue=false)]
        public string IRRFLegalReason { get; set; }
        /// <summary>
        /// Item subjecto to payroll discharge Item sujeto à desoneraçãode folha de pagamento 
        /// </summary>
        /// <value>Item subjecto to payroll discharge Item sujeto à desoneraçãode folha de pagamento </value>
        [DataMember(Name="INSSSubjectToDischarge", EmitDefaultValue=false)]
        public bool? INSSSubjectToDischarge { get; set; }
        /// <summary>
        /// Gets or Sets INSS
        /// </summary>
        [DataMember(Name="INSS", EmitDefaultValue=false)]
        public bool? INSS { get; set; }
        /// <summary>
        /// reference id to TaxLegalReason
        /// </summary>
        /// <value>reference id to TaxLegalReason</value>
        [DataMember(Name="INSSLegalReason", EmitDefaultValue=false)]
        public string INSSLegalReason { get; set; }
        /// <summary>
        /// Gets or Sets INSsForSimples
        /// </summary>
        [DataMember(Name="INSsForSimples", EmitDefaultValue=false)]
        public bool? INSsForSimples { get; set; }
        /// <summary>
        /// reference id to TaxLegalReason
        /// </summary>
        /// <value>reference id to TaxLegalReason</value>
        [DataMember(Name="INSSForSimplesLegalReason", EmitDefaultValue=false)]
        public string INSSForSimplesLegalReason { get; set; }
        /// <summary>
        /// Gets or Sets PIS
        /// </summary>
        [DataMember(Name="PIS", EmitDefaultValue=false)]
        public AgastWithholdingPIS PIS { get; set; }
        /// <summary>
        /// Gets or Sets COFINS
        /// </summary>
        [DataMember(Name="COFINS", EmitDefaultValue=false)]
        public AgastWithholdingCOFINS COFINS { get; set; }
        /// <summary>
        /// Gets or Sets CSLL
        /// </summary>
        [DataMember(Name="CSLL", EmitDefaultValue=false)]
        public AgastWithholdingCSLL CSLL { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AgastWithholding {\n");
            sb.Append("  IRRF: ").Append(IRRF).Append("\n");
            sb.Append("  IRRFLegalReason: ").Append(IRRFLegalReason).Append("\n");
            sb.Append("  INSSSubjectToDischarge: ").Append(INSSSubjectToDischarge).Append("\n");
            sb.Append("  INSS: ").Append(INSS).Append("\n");
            sb.Append("  INSSLegalReason: ").Append(INSSLegalReason).Append("\n");
            sb.Append("  INSsForSimples: ").Append(INSsForSimples).Append("\n");
            sb.Append("  INSSForSimplesLegalReason: ").Append(INSSForSimplesLegalReason).Append("\n");
            sb.Append("  PIS: ").Append(PIS).Append("\n");
            sb.Append("  COFINS: ").Append(COFINS).Append("\n");
            sb.Append("  CSLL: ").Append(CSLL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AgastWithholding);
        }

        /// <summary>
        /// Returns true if AgastWithholding instances are equal
        /// </summary>
        /// <param name="other">Instance of AgastWithholding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AgastWithholding other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IRRF == other.IRRF ||
                    this.IRRF != null &&
                    this.IRRF.Equals(other.IRRF)
                ) && 
                (
                    this.IRRFLegalReason == other.IRRFLegalReason ||
                    this.IRRFLegalReason != null &&
                    this.IRRFLegalReason.Equals(other.IRRFLegalReason)
                ) && 
                (
                    this.INSSSubjectToDischarge == other.INSSSubjectToDischarge ||
                    this.INSSSubjectToDischarge != null &&
                    this.INSSSubjectToDischarge.Equals(other.INSSSubjectToDischarge)
                ) && 
                (
                    this.INSS == other.INSS ||
                    this.INSS != null &&
                    this.INSS.Equals(other.INSS)
                ) && 
                (
                    this.INSSLegalReason == other.INSSLegalReason ||
                    this.INSSLegalReason != null &&
                    this.INSSLegalReason.Equals(other.INSSLegalReason)
                ) && 
                (
                    this.INSsForSimples == other.INSsForSimples ||
                    this.INSsForSimples != null &&
                    this.INSsForSimples.Equals(other.INSsForSimples)
                ) && 
                (
                    this.INSSForSimplesLegalReason == other.INSSForSimplesLegalReason ||
                    this.INSSForSimplesLegalReason != null &&
                    this.INSSForSimplesLegalReason.Equals(other.INSSForSimplesLegalReason)
                ) && 
                (
                    this.PIS == other.PIS ||
                    this.PIS != null &&
                    this.PIS.Equals(other.PIS)
                ) && 
                (
                    this.COFINS == other.COFINS ||
                    this.COFINS != null &&
                    this.COFINS.Equals(other.COFINS)
                ) && 
                (
                    this.CSLL == other.CSLL ||
                    this.CSLL != null &&
                    this.CSLL.Equals(other.CSLL)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IRRF != null)
                    hash = hash * 59 + this.IRRF.GetHashCode();
                if (this.IRRFLegalReason != null)
                    hash = hash * 59 + this.IRRFLegalReason.GetHashCode();
                if (this.INSSSubjectToDischarge != null)
                    hash = hash * 59 + this.INSSSubjectToDischarge.GetHashCode();
                if (this.INSS != null)
                    hash = hash * 59 + this.INSS.GetHashCode();
                if (this.INSSLegalReason != null)
                    hash = hash * 59 + this.INSSLegalReason.GetHashCode();
                if (this.INSsForSimples != null)
                    hash = hash * 59 + this.INSsForSimples.GetHashCode();
                if (this.INSSForSimplesLegalReason != null)
                    hash = hash * 59 + this.INSSForSimplesLegalReason.GetHashCode();
                if (this.PIS != null)
                    hash = hash * 59 + this.PIS.GetHashCode();
                if (this.COFINS != null)
                    hash = hash * 59 + this.COFINS.GetHashCode();
                if (this.CSLL != null)
                    hash = hash * 59 + this.CSLL.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // IRRFLegalReason (string) maxLength
            if(this.IRRFLegalReason != null && this.IRRFLegalReason.Length > 60)
            {
                yield return new ValidationResult("Invalid value for IRRFLegalReason, length must be less than 60.", new [] { "IRRFLegalReason" });
            }

            // INSSLegalReason (string) maxLength
            if(this.INSSLegalReason != null && this.INSSLegalReason.Length > 60)
            {
                yield return new ValidationResult("Invalid value for INSSLegalReason, length must be less than 60.", new [] { "INSSLegalReason" });
            }

            // INSSForSimplesLegalReason (string) maxLength
            if(this.INSSForSimplesLegalReason != null && this.INSSForSimplesLegalReason.Length > 60)
            {
                yield return new ValidationResult("Invalid value for INSSForSimplesLegalReason, length must be less than 60.", new [] { "INSSForSimplesLegalReason" });
            }

            yield break;
        }
    }

}
