/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ItemGoods
    /// </summary>
    [DataContract]
    public partial class ItemGoods :  IEquatable<ItemGoods>, IValidatableObject
    {
        /// <summary>
        /// - '0' # National goods - except those treated in codes 3,4, 5 and 8 - '1' # Foreign goods - Imported directly by seller, except those in code 6 - '2' # Foreign goods - Acquired in the internal market (inside Brazil), except those in code 7 - '3' # National goods - Merchandise or goods with imported content above 40% and with less than or equal to 70% - '4' # National goods from production following 'standard basic processes' as stablished by legislation (standard basic processes are devised to separate simple assembly from manufaturing processes) - '5' # National goods - Merchandise or goods with imported content equal or below 40% - '6' # Foreign goods - Directly imported by Seller, without a National Equivalent as listed by Comex and natural gas - '7' # Foreign goods - Acquired inside Brazil, without a National Equivalent  as listed by Comex and natural gas - '8' # National goods - Merchandise or goods with imported content above 70% 
        /// </summary>
        /// <value>- '0' # National goods - except those treated in codes 3,4, 5 and 8 - '1' # Foreign goods - Imported directly by seller, except those in code 6 - '2' # Foreign goods - Acquired in the internal market (inside Brazil), except those in code 7 - '3' # National goods - Merchandise or goods with imported content above 40% and with less than or equal to 70% - '4' # National goods from production following 'standard basic processes' as stablished by legislation (standard basic processes are devised to separate simple assembly from manufaturing processes) - '5' # National goods - Merchandise or goods with imported content equal or below 40% - '6' # Foreign goods - Directly imported by Seller, without a National Equivalent as listed by Comex and natural gas - '7' # Foreign goods - Acquired inside Brazil, without a National Equivalent  as listed by Comex and natural gas - '8' # National goods - Merchandise or goods with imported content above 70% </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            
            /// <summary>
            /// Enum _0 for "0"
            /// </summary>
            [EnumMember(Value = "0")]
            _0,
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1,
            
            /// <summary>
            /// Enum _2 for "2"
            /// </summary>
            [EnumMember(Value = "2")]
            _2,
            
            /// <summary>
            /// Enum _3 for "3"
            /// </summary>
            [EnumMember(Value = "3")]
            _3,
            
            /// <summary>
            /// Enum _4 for "4"
            /// </summary>
            [EnumMember(Value = "4")]
            _4,
            
            /// <summary>
            /// Enum _5 for "5"
            /// </summary>
            [EnumMember(Value = "5")]
            _5,
            
            /// <summary>
            /// Enum _6 for "6"
            /// </summary>
            [EnumMember(Value = "6")]
            _6,
            
            /// <summary>
            /// Enum _7 for "7"
            /// </summary>
            [EnumMember(Value = "7")]
            _7,
            
            /// <summary>
            /// Enum _8 for "8"
            /// </summary>
            [EnumMember(Value = "8")]
            _8
        }

        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProductTypeEnum
        {
            
            /// <summary>
            /// Enum FORPRODUCT for "FOR PRODUCT"
            /// </summary>
            [EnumMember(Value = "FOR PRODUCT")]
            FORPRODUCT,
            
            /// <summary>
            /// Enum FORMERCHANDISE for "FOR MERCHANDISE"
            /// </summary>
            [EnumMember(Value = "FOR MERCHANDISE")]
            FORMERCHANDISE,
            
            /// <summary>
            /// Enum NORESTRICTION for "NO RESTRICTION"
            /// </summary>
            [EnumMember(Value = "NO RESTRICTION")]
            NORESTRICTION,
            
            /// <summary>
            /// Enum SERVICE for "SERVICE"
            /// </summary>
            [EnumMember(Value = "SERVICE")]
            SERVICE,
            
            /// <summary>
            /// Enum FEEDSTOCK for "FEEDSTOCK"
            /// </summary>
            [EnumMember(Value = "FEEDSTOCK")]
            FEEDSTOCK,
            
            /// <summary>
            /// Enum FIXEDASSETS for "FIXED ASSETS"
            /// </summary>
            [EnumMember(Value = "FIXED ASSETS")]
            FIXEDASSETS
        }

        /// <summary>
        /// - '01' # Vinculada Exclusivamente a Receita Tributada no Mercado Interno - '02' # Exclusivamente a Receita Não Tributada no Mercado Interno - '03' # Exclusivamente a Receita de Exportação - '04' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno - '05' # Vinculada a Receitas Tributadas no Mercado Interno e de Exportação - '06' # Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação - '07' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação 
        /// </summary>
        /// <value>- '01' # Vinculada Exclusivamente a Receita Tributada no Mercado Interno - '02' # Exclusivamente a Receita Não Tributada no Mercado Interno - '03' # Exclusivamente a Receita de Exportação - '04' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno - '05' # Vinculada a Receitas Tributadas no Mercado Interno e de Exportação - '06' # Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação - '07' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PiscofinsRevenueTypeEnum
        {
            
            /// <summary>
            /// Enum _01 for "01"
            /// </summary>
            [EnumMember(Value = "01")]
            _01,
            
            /// <summary>
            /// Enum _02 for "02"
            /// </summary>
            [EnumMember(Value = "02")]
            _02,
            
            /// <summary>
            /// Enum _03 for "03"
            /// </summary>
            [EnumMember(Value = "03")]
            _03,
            
            /// <summary>
            /// Enum _04 for "04"
            /// </summary>
            [EnumMember(Value = "04")]
            _04,
            
            /// <summary>
            /// Enum _05 for "05"
            /// </summary>
            [EnumMember(Value = "05")]
            _05,
            
            /// <summary>
            /// Enum _06 for "06"
            /// </summary>
            [EnumMember(Value = "06")]
            _06,
            
            /// <summary>
            /// Enum _07 for "07"
            /// </summary>
            [EnumMember(Value = "07")]
            _07
        }

        /// <summary>
        /// - '0' # National goods - except those treated in codes 3,4, 5 and 8 - '1' # Foreign goods - Imported directly by seller, except those in code 6 - '2' # Foreign goods - Acquired in the internal market (inside Brazil), except those in code 7 - '3' # National goods - Merchandise or goods with imported content above 40% and with less than or equal to 70% - '4' # National goods from production following 'standard basic processes' as stablished by legislation (standard basic processes are devised to separate simple assembly from manufaturing processes) - '5' # National goods - Merchandise or goods with imported content equal or below 40% - '6' # Foreign goods - Directly imported by Seller, without a National Equivalent as listed by Comex and natural gas - '7' # Foreign goods - Acquired inside Brazil, without a National Equivalent  as listed by Comex and natural gas - '8' # National goods - Merchandise or goods with imported content above 70% 
        /// </summary>
        /// <value>- '0' # National goods - except those treated in codes 3,4, 5 and 8 - '1' # Foreign goods - Imported directly by seller, except those in code 6 - '2' # Foreign goods - Acquired in the internal market (inside Brazil), except those in code 7 - '3' # National goods - Merchandise or goods with imported content above 40% and with less than or equal to 70% - '4' # National goods from production following 'standard basic processes' as stablished by legislation (standard basic processes are devised to separate simple assembly from manufaturing processes) - '5' # National goods - Merchandise or goods with imported content equal or below 40% - '6' # Foreign goods - Directly imported by Seller, without a National Equivalent as listed by Comex and natural gas - '7' # Foreign goods - Acquired inside Brazil, without a National Equivalent  as listed by Comex and natural gas - '8' # National goods - Merchandise or goods with imported content above 70% </value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public SourceEnum? Source { get; set; }
        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [DataMember(Name="productType", EmitDefaultValue=false)]
        public ProductTypeEnum? ProductType { get; set; }
        /// <summary>
        /// - '01' # Vinculada Exclusivamente a Receita Tributada no Mercado Interno - '02' # Exclusivamente a Receita Não Tributada no Mercado Interno - '03' # Exclusivamente a Receita de Exportação - '04' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno - '05' # Vinculada a Receitas Tributadas no Mercado Interno e de Exportação - '06' # Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação - '07' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação 
        /// </summary>
        /// <value>- '01' # Vinculada Exclusivamente a Receita Tributada no Mercado Interno - '02' # Exclusivamente a Receita Não Tributada no Mercado Interno - '03' # Exclusivamente a Receita de Exportação - '04' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno - '05' # Vinculada a Receitas Tributadas no Mercado Interno e de Exportação - '06' # Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação - '07' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação </value>
        [DataMember(Name="piscofinsRevenueType", EmitDefaultValue=false)]
        public PiscofinsRevenueTypeEnum? PiscofinsRevenueType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemGoods" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemGoods() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemGoods" /> class.
        /// </summary>
        /// <param name="CompanyId">Company ID (required).</param>
        /// <param name="Code">ERP Code (required).</param>
        /// <param name="Agast">Agast Code (required).</param>
        /// <param name="Description">Item Description.</param>
        /// <param name="SealCode">Seal Code for ipi tax control (código do selo para controle de IPI) (required).</param>
        /// <param name="NFCI">Importation content form number (Número de controle da FCI - Ficha de Conteúdo de Importação).</param>
        /// <param name="IsIcmsStSubstitute">this field inform that this merchandise or product is ICMS Substitute Must be used when the item is for resale and the company will assume the role of ICMS Substitute (wholesaler, retailer, distributor). Example: when Importing some product the company does not pay IcmsSt at the time of customs clearance but when selling sale the item. Deverá ser utilizado quando a empresa que irá vender a mercadoria sujeita ao ICMS ST for o SUBSTITUTO TRIBUTÁRIO (Distribuidor, atacadista e varejista), como por exemplo das mercadorias IMPORTADAS, neste sentido, a empresa não irá pagar o ICMS ST no desembaraço aduaneiro e irá recolher quando for vender as mesmas. .</param>
        /// <param name="Source">- &#39;0&#39; # National goods - except those treated in codes 3,4, 5 and 8 - &#39;1&#39; # Foreign goods - Imported directly by seller, except those in code 6 - &#39;2&#39; # Foreign goods - Acquired in the internal market (inside Brazil), except those in code 7 - &#39;3&#39; # National goods - Merchandise or goods with imported content above 40% and with less than or equal to 70% - &#39;4&#39; # National goods from production following &#39;standard basic processes&#39; as stablished by legislation (standard basic processes are devised to separate simple assembly from manufaturing processes) - &#39;5&#39; # National goods - Merchandise or goods with imported content equal or below 40% - &#39;6&#39; # Foreign goods - Directly imported by Seller, without a National Equivalent as listed by Comex and natural gas - &#39;7&#39; # Foreign goods - Acquired inside Brazil, without a National Equivalent  as listed by Comex and natural gas - &#39;8&#39; # National goods - Merchandise or goods with imported content above 70% .</param>
        /// <param name="ProductType">ProductType.</param>
        /// <param name="ManufacturerEquivalent">Item is merchandise but will be considered product.</param>
        /// <param name="AppropriateIPIcreditWhenInGoing">Inform that this item will have rights to aprropriate IPI credit.</param>
        /// <param name="UsuallyAppropriatePISCOFINSCredit">Subject to appropriate PIS/COFINS credit, when NO CUMULATIVE.</param>
        /// <param name="IsPisCofinsEstimatedCredit">The credit PIS/COFINS is subject to purchase form companies, but exist some exceptions, when the credit will be a estimated amount.</param>
        /// <param name="PiscofinsRevenueType">- &#39;01&#39; # Vinculada Exclusivamente a Receita Tributada no Mercado Interno - &#39;02&#39; # Exclusivamente a Receita Não Tributada no Mercado Interno - &#39;03&#39; # Exclusivamente a Receita de Exportação - &#39;04&#39; # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno - &#39;05&#39; # Vinculada a Receitas Tributadas no Mercado Interno e de Exportação - &#39;06&#39; # Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação - &#39;07&#39; # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação .</param>
        /// <param name="IcmsBaseDiscountForMonoPhaseSocialContr">Discount allowed on icms base when PIS/COFINS are Monophase.</param>
        /// <param name="Cest">tax substitution code - Codigo especificador da Substuicao Tributaria.</param>
        /// <param name="Cean">GTIN NUMBER.</param>
        /// <param name="Nve">Nomenclatura de Valor aduaneio e Estatístico - NCM extension code.</param>
        /// <param name="SalesUnit">SalesUnit.</param>
        /// <param name="SalesUnitIPIfactor">factor to convert sales quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta).</param>
        /// <param name="SalesUnitIcmsfactor">factor to convert sales quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta).</param>
        /// <param name="SalesUnitIcmsStfactor">factor to convert sales quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta).</param>
        /// <param name="SalesUnitPisCofinsfactor">factor to convert sales quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta).</param>
        /// <param name="PurchaseUnit">PurchaseUnit.</param>
        /// <param name="PurchaseUnitIPIfactor">factor to convert purchase quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta).</param>
        /// <param name="PurchaseUnitIcmsfactor">factor to convert purchase quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta).</param>
        /// <param name="PurchaseUnitIcmsStfactor">factor to convert purchase quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta).</param>
        /// <param name="PurchaseUnitPisCofinsfactor">factor to convert purchase quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta).</param>
        /// <param name="FirstUse">When the product is new, and will be retail, firt time that it exit it is subject to IPI.</param>
        public ItemGoods(Guid? CompanyId = default(Guid?), string Code = default(string), string Agast = default(string), string Description = default(string), string SealCode = default(string), string NFCI = default(string), bool? IsIcmsStSubstitute = default(bool?), SourceEnum? Source = default(SourceEnum?), ProductTypeEnum? ProductType = default(ProductTypeEnum?), bool? ManufacturerEquivalent = default(bool?), bool? AppropriateIPIcreditWhenInGoing = default(bool?), bool? UsuallyAppropriatePISCOFINSCredit = default(bool?), bool? IsPisCofinsEstimatedCredit = default(bool?), PiscofinsRevenueTypeEnum? PiscofinsRevenueType = default(PiscofinsRevenueTypeEnum?), double? IcmsBaseDiscountForMonoPhaseSocialContr = default(double?), string Cest = default(string), string Cean = default(string), string Nve = default(string), string SalesUnit = default(string), double? SalesUnitIPIfactor = default(double?), double? SalesUnitIcmsfactor = default(double?), double? SalesUnitIcmsStfactor = default(double?), double? SalesUnitPisCofinsfactor = default(double?), string PurchaseUnit = default(string), double? PurchaseUnitIPIfactor = default(double?), double? PurchaseUnitIcmsfactor = default(double?), double? PurchaseUnitIcmsStfactor = default(double?), double? PurchaseUnitPisCofinsfactor = default(double?), bool? FirstUse = default(bool?))
        {
            // to ensure "CompanyId" is required (not null)
            if (CompanyId == null)
            {
                throw new InvalidDataException("CompanyId is a required property for ItemGoods and cannot be null");
            }
            else
            {
                this.CompanyId = CompanyId;
            }
            // to ensure "Code" is required (not null)
            if (Code == null)
            {
                throw new InvalidDataException("Code is a required property for ItemGoods and cannot be null");
            }
            else
            {
                this.Code = Code;
            }
            // to ensure "Agast" is required (not null)
            if (Agast == null)
            {
                throw new InvalidDataException("Agast is a required property for ItemGoods and cannot be null");
            }
            else
            {
                this.Agast = Agast;
            }
            // to ensure "SealCode" is required (not null)
            if (SealCode == null)
            {
                throw new InvalidDataException("SealCode is a required property for ItemGoods and cannot be null");
            }
            else
            {
                this.SealCode = SealCode;
            }
            this.Description = Description;
            this.NFCI = NFCI;
            this.IsIcmsStSubstitute = IsIcmsStSubstitute;
            this.Source = Source;
            this.ProductType = ProductType;
            this.ManufacturerEquivalent = ManufacturerEquivalent;
            this.AppropriateIPIcreditWhenInGoing = AppropriateIPIcreditWhenInGoing;
            this.UsuallyAppropriatePISCOFINSCredit = UsuallyAppropriatePISCOFINSCredit;
            this.IsPisCofinsEstimatedCredit = IsPisCofinsEstimatedCredit;
            this.PiscofinsRevenueType = PiscofinsRevenueType;
            this.IcmsBaseDiscountForMonoPhaseSocialContr = IcmsBaseDiscountForMonoPhaseSocialContr;
            this.Cest = Cest;
            this.Cean = Cean;
            this.Nve = Nve;
            this.SalesUnit = SalesUnit;
            this.SalesUnitIPIfactor = SalesUnitIPIfactor;
            this.SalesUnitIcmsfactor = SalesUnitIcmsfactor;
            this.SalesUnitIcmsStfactor = SalesUnitIcmsStfactor;
            this.SalesUnitPisCofinsfactor = SalesUnitPisCofinsfactor;
            this.PurchaseUnit = PurchaseUnit;
            this.PurchaseUnitIPIfactor = PurchaseUnitIPIfactor;
            this.PurchaseUnitIcmsfactor = PurchaseUnitIcmsfactor;
            this.PurchaseUnitIcmsStfactor = PurchaseUnitIcmsStfactor;
            this.PurchaseUnitPisCofinsfactor = PurchaseUnitPisCofinsfactor;
            this.FirstUse = FirstUse;
        }
        
        /// <summary>
        /// Company ID
        /// </summary>
        /// <value>Company ID</value>
        [DataMember(Name="companyId", EmitDefaultValue=false)]
        public Guid? CompanyId { get; set; }
        /// <summary>
        /// ERP Code
        /// </summary>
        /// <value>ERP Code</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Agast Code
        /// </summary>
        /// <value>Agast Code</value>
        [DataMember(Name="agast", EmitDefaultValue=false)]
        public string Agast { get; set; }
        /// <summary>
        /// Item Description
        /// </summary>
        /// <value>Item Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Seal Code for ipi tax control (código do selo para controle de IPI)
        /// </summary>
        /// <value>Seal Code for ipi tax control (código do selo para controle de IPI)</value>
        [DataMember(Name="sealCode", EmitDefaultValue=false)]
        public string SealCode { get; set; }
        /// <summary>
        /// Importation content form number (Número de controle da FCI - Ficha de Conteúdo de Importação)
        /// </summary>
        /// <value>Importation content form number (Número de controle da FCI - Ficha de Conteúdo de Importação)</value>
        [DataMember(Name="nFCI", EmitDefaultValue=false)]
        public string NFCI { get; set; }
        /// <summary>
        /// this field inform that this merchandise or product is ICMS Substitute Must be used when the item is for resale and the company will assume the role of ICMS Substitute (wholesaler, retailer, distributor). Example: when Importing some product the company does not pay IcmsSt at the time of customs clearance but when selling sale the item. Deverá ser utilizado quando a empresa que irá vender a mercadoria sujeita ao ICMS ST for o SUBSTITUTO TRIBUTÁRIO (Distribuidor, atacadista e varejista), como por exemplo das mercadorias IMPORTADAS, neste sentido, a empresa não irá pagar o ICMS ST no desembaraço aduaneiro e irá recolher quando for vender as mesmas. 
        /// </summary>
        /// <value>this field inform that this merchandise or product is ICMS Substitute Must be used when the item is for resale and the company will assume the role of ICMS Substitute (wholesaler, retailer, distributor). Example: when Importing some product the company does not pay IcmsSt at the time of customs clearance but when selling sale the item. Deverá ser utilizado quando a empresa que irá vender a mercadoria sujeita ao ICMS ST for o SUBSTITUTO TRIBUTÁRIO (Distribuidor, atacadista e varejista), como por exemplo das mercadorias IMPORTADAS, neste sentido, a empresa não irá pagar o ICMS ST no desembaraço aduaneiro e irá recolher quando for vender as mesmas. </value>
        [DataMember(Name="isIcmsStSubstitute", EmitDefaultValue=false)]
        public bool? IsIcmsStSubstitute { get; set; }
        /// <summary>
        /// Item is merchandise but will be considered product
        /// </summary>
        /// <value>Item is merchandise but will be considered product</value>
        [DataMember(Name="manufacturerEquivalent", EmitDefaultValue=false)]
        public bool? ManufacturerEquivalent { get; set; }
        /// <summary>
        /// Inform that this item will have rights to aprropriate IPI credit
        /// </summary>
        /// <value>Inform that this item will have rights to aprropriate IPI credit</value>
        [DataMember(Name="appropriateIPIcreditWhenInGoing", EmitDefaultValue=false)]
        public bool? AppropriateIPIcreditWhenInGoing { get; set; }
        /// <summary>
        /// Subject to appropriate PIS/COFINS credit, when NO CUMULATIVE
        /// </summary>
        /// <value>Subject to appropriate PIS/COFINS credit, when NO CUMULATIVE</value>
        [DataMember(Name="usuallyAppropriatePISCOFINSCredit", EmitDefaultValue=false)]
        public bool? UsuallyAppropriatePISCOFINSCredit { get; set; }
        /// <summary>
        /// The credit PIS/COFINS is subject to purchase form companies, but exist some exceptions, when the credit will be a estimated amount
        /// </summary>
        /// <value>The credit PIS/COFINS is subject to purchase form companies, but exist some exceptions, when the credit will be a estimated amount</value>
        [DataMember(Name="isPisCofinsEstimatedCredit", EmitDefaultValue=false)]
        public bool? IsPisCofinsEstimatedCredit { get; set; }
        /// <summary>
        /// Discount allowed on icms base when PIS/COFINS are Monophase
        /// </summary>
        /// <value>Discount allowed on icms base when PIS/COFINS are Monophase</value>
        [DataMember(Name="icmsBaseDiscountForMonoPhaseSocialContr", EmitDefaultValue=false)]
        public double? IcmsBaseDiscountForMonoPhaseSocialContr { get; set; }
        /// <summary>
        /// tax substitution code - Codigo especificador da Substuicao Tributaria
        /// </summary>
        /// <value>tax substitution code - Codigo especificador da Substuicao Tributaria</value>
        [DataMember(Name="cest", EmitDefaultValue=false)]
        public string Cest { get; set; }
        /// <summary>
        /// GTIN NUMBER
        /// </summary>
        /// <value>GTIN NUMBER</value>
        [DataMember(Name="cean", EmitDefaultValue=false)]
        public string Cean { get; set; }
        /// <summary>
        /// Nomenclatura de Valor aduaneio e Estatístico - NCM extension code
        /// </summary>
        /// <value>Nomenclatura de Valor aduaneio e Estatístico - NCM extension code</value>
        [DataMember(Name="nve", EmitDefaultValue=false)]
        public string Nve { get; set; }
        /// <summary>
        /// Gets or Sets SalesUnit
        /// </summary>
        [DataMember(Name="salesUnit", EmitDefaultValue=false)]
        public string SalesUnit { get; set; }
        /// <summary>
        /// factor to convert sales quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)
        /// </summary>
        /// <value>factor to convert sales quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)</value>
        [DataMember(Name="salesUnitIPIfactor", EmitDefaultValue=false)]
        public double? SalesUnitIPIfactor { get; set; }
        /// <summary>
        /// factor to convert sales quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
        /// </summary>
        /// <value>factor to convert sales quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)</value>
        [DataMember(Name="salesUnitIcmsfactor", EmitDefaultValue=false)]
        public double? SalesUnitIcmsfactor { get; set; }
        /// <summary>
        /// factor to convert sales quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)
        /// </summary>
        /// <value>factor to convert sales quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)</value>
        [DataMember(Name="salesUnitIcmsStfactor", EmitDefaultValue=false)]
        public double? SalesUnitIcmsStfactor { get; set; }
        /// <summary>
        /// factor to convert sales quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
        /// </summary>
        /// <value>factor to convert sales quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)</value>
        [DataMember(Name="salesUnitPisCofinsfactor", EmitDefaultValue=false)]
        public double? SalesUnitPisCofinsfactor { get; set; }
        /// <summary>
        /// Gets or Sets PurchaseUnit
        /// </summary>
        [DataMember(Name="purchaseUnit", EmitDefaultValue=false)]
        public string PurchaseUnit { get; set; }
        /// <summary>
        /// factor to convert purchase quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)
        /// </summary>
        /// <value>factor to convert purchase quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)</value>
        [DataMember(Name="purchaseUnitIPIfactor", EmitDefaultValue=false)]
        public double? PurchaseUnitIPIfactor { get; set; }
        /// <summary>
        /// factor to convert purchase quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
        /// </summary>
        /// <value>factor to convert purchase quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)</value>
        [DataMember(Name="purchaseUnitIcmsfactor", EmitDefaultValue=false)]
        public double? PurchaseUnitIcmsfactor { get; set; }
        /// <summary>
        /// factor to convert purchase quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)
        /// </summary>
        /// <value>factor to convert purchase quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)</value>
        [DataMember(Name="purchaseUnitIcmsStfactor", EmitDefaultValue=false)]
        public double? PurchaseUnitIcmsStfactor { get; set; }
        /// <summary>
        /// factor to convert purchase quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
        /// </summary>
        /// <value>factor to convert purchase quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)</value>
        [DataMember(Name="purchaseUnitPisCofinsfactor", EmitDefaultValue=false)]
        public double? PurchaseUnitPisCofinsfactor { get; set; }
        /// <summary>
        /// When the product is new, and will be retail, firt time that it exit it is subject to IPI
        /// </summary>
        /// <value>When the product is new, and will be retail, firt time that it exit it is subject to IPI</value>
        [DataMember(Name="firstUse", EmitDefaultValue=false)]
        public bool? FirstUse { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemGoods {\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Agast: ").Append(Agast).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SealCode: ").Append(SealCode).Append("\n");
            sb.Append("  NFCI: ").Append(NFCI).Append("\n");
            sb.Append("  IsIcmsStSubstitute: ").Append(IsIcmsStSubstitute).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  ManufacturerEquivalent: ").Append(ManufacturerEquivalent).Append("\n");
            sb.Append("  AppropriateIPIcreditWhenInGoing: ").Append(AppropriateIPIcreditWhenInGoing).Append("\n");
            sb.Append("  UsuallyAppropriatePISCOFINSCredit: ").Append(UsuallyAppropriatePISCOFINSCredit).Append("\n");
            sb.Append("  IsPisCofinsEstimatedCredit: ").Append(IsPisCofinsEstimatedCredit).Append("\n");
            sb.Append("  PiscofinsRevenueType: ").Append(PiscofinsRevenueType).Append("\n");
            sb.Append("  IcmsBaseDiscountForMonoPhaseSocialContr: ").Append(IcmsBaseDiscountForMonoPhaseSocialContr).Append("\n");
            sb.Append("  Cest: ").Append(Cest).Append("\n");
            sb.Append("  Cean: ").Append(Cean).Append("\n");
            sb.Append("  Nve: ").Append(Nve).Append("\n");
            sb.Append("  SalesUnit: ").Append(SalesUnit).Append("\n");
            sb.Append("  SalesUnitIPIfactor: ").Append(SalesUnitIPIfactor).Append("\n");
            sb.Append("  SalesUnitIcmsfactor: ").Append(SalesUnitIcmsfactor).Append("\n");
            sb.Append("  SalesUnitIcmsStfactor: ").Append(SalesUnitIcmsStfactor).Append("\n");
            sb.Append("  SalesUnitPisCofinsfactor: ").Append(SalesUnitPisCofinsfactor).Append("\n");
            sb.Append("  PurchaseUnit: ").Append(PurchaseUnit).Append("\n");
            sb.Append("  PurchaseUnitIPIfactor: ").Append(PurchaseUnitIPIfactor).Append("\n");
            sb.Append("  PurchaseUnitIcmsfactor: ").Append(PurchaseUnitIcmsfactor).Append("\n");
            sb.Append("  PurchaseUnitIcmsStfactor: ").Append(PurchaseUnitIcmsStfactor).Append("\n");
            sb.Append("  PurchaseUnitPisCofinsfactor: ").Append(PurchaseUnitPisCofinsfactor).Append("\n");
            sb.Append("  FirstUse: ").Append(FirstUse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemGoods);
        }

        /// <summary>
        /// Returns true if ItemGoods instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemGoods to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemGoods other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CompanyId == other.CompanyId ||
                    this.CompanyId != null &&
                    this.CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.Agast == other.Agast ||
                    this.Agast != null &&
                    this.Agast.Equals(other.Agast)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.SealCode == other.SealCode ||
                    this.SealCode != null &&
                    this.SealCode.Equals(other.SealCode)
                ) && 
                (
                    this.NFCI == other.NFCI ||
                    this.NFCI != null &&
                    this.NFCI.Equals(other.NFCI)
                ) && 
                (
                    this.IsIcmsStSubstitute == other.IsIcmsStSubstitute ||
                    this.IsIcmsStSubstitute != null &&
                    this.IsIcmsStSubstitute.Equals(other.IsIcmsStSubstitute)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                ) && 
                (
                    this.ProductType == other.ProductType ||
                    this.ProductType != null &&
                    this.ProductType.Equals(other.ProductType)
                ) && 
                (
                    this.ManufacturerEquivalent == other.ManufacturerEquivalent ||
                    this.ManufacturerEquivalent != null &&
                    this.ManufacturerEquivalent.Equals(other.ManufacturerEquivalent)
                ) && 
                (
                    this.AppropriateIPIcreditWhenInGoing == other.AppropriateIPIcreditWhenInGoing ||
                    this.AppropriateIPIcreditWhenInGoing != null &&
                    this.AppropriateIPIcreditWhenInGoing.Equals(other.AppropriateIPIcreditWhenInGoing)
                ) && 
                (
                    this.UsuallyAppropriatePISCOFINSCredit == other.UsuallyAppropriatePISCOFINSCredit ||
                    this.UsuallyAppropriatePISCOFINSCredit != null &&
                    this.UsuallyAppropriatePISCOFINSCredit.Equals(other.UsuallyAppropriatePISCOFINSCredit)
                ) && 
                (
                    this.IsPisCofinsEstimatedCredit == other.IsPisCofinsEstimatedCredit ||
                    this.IsPisCofinsEstimatedCredit != null &&
                    this.IsPisCofinsEstimatedCredit.Equals(other.IsPisCofinsEstimatedCredit)
                ) && 
                (
                    this.PiscofinsRevenueType == other.PiscofinsRevenueType ||
                    this.PiscofinsRevenueType != null &&
                    this.PiscofinsRevenueType.Equals(other.PiscofinsRevenueType)
                ) && 
                (
                    this.IcmsBaseDiscountForMonoPhaseSocialContr == other.IcmsBaseDiscountForMonoPhaseSocialContr ||
                    this.IcmsBaseDiscountForMonoPhaseSocialContr != null &&
                    this.IcmsBaseDiscountForMonoPhaseSocialContr.Equals(other.IcmsBaseDiscountForMonoPhaseSocialContr)
                ) && 
                (
                    this.Cest == other.Cest ||
                    this.Cest != null &&
                    this.Cest.Equals(other.Cest)
                ) && 
                (
                    this.Cean == other.Cean ||
                    this.Cean != null &&
                    this.Cean.Equals(other.Cean)
                ) && 
                (
                    this.Nve == other.Nve ||
                    this.Nve != null &&
                    this.Nve.Equals(other.Nve)
                ) && 
                (
                    this.SalesUnit == other.SalesUnit ||
                    this.SalesUnit != null &&
                    this.SalesUnit.Equals(other.SalesUnit)
                ) && 
                (
                    this.SalesUnitIPIfactor == other.SalesUnitIPIfactor ||
                    this.SalesUnitIPIfactor != null &&
                    this.SalesUnitIPIfactor.Equals(other.SalesUnitIPIfactor)
                ) && 
                (
                    this.SalesUnitIcmsfactor == other.SalesUnitIcmsfactor ||
                    this.SalesUnitIcmsfactor != null &&
                    this.SalesUnitIcmsfactor.Equals(other.SalesUnitIcmsfactor)
                ) && 
                (
                    this.SalesUnitIcmsStfactor == other.SalesUnitIcmsStfactor ||
                    this.SalesUnitIcmsStfactor != null &&
                    this.SalesUnitIcmsStfactor.Equals(other.SalesUnitIcmsStfactor)
                ) && 
                (
                    this.SalesUnitPisCofinsfactor == other.SalesUnitPisCofinsfactor ||
                    this.SalesUnitPisCofinsfactor != null &&
                    this.SalesUnitPisCofinsfactor.Equals(other.SalesUnitPisCofinsfactor)
                ) && 
                (
                    this.PurchaseUnit == other.PurchaseUnit ||
                    this.PurchaseUnit != null &&
                    this.PurchaseUnit.Equals(other.PurchaseUnit)
                ) && 
                (
                    this.PurchaseUnitIPIfactor == other.PurchaseUnitIPIfactor ||
                    this.PurchaseUnitIPIfactor != null &&
                    this.PurchaseUnitIPIfactor.Equals(other.PurchaseUnitIPIfactor)
                ) && 
                (
                    this.PurchaseUnitIcmsfactor == other.PurchaseUnitIcmsfactor ||
                    this.PurchaseUnitIcmsfactor != null &&
                    this.PurchaseUnitIcmsfactor.Equals(other.PurchaseUnitIcmsfactor)
                ) && 
                (
                    this.PurchaseUnitIcmsStfactor == other.PurchaseUnitIcmsStfactor ||
                    this.PurchaseUnitIcmsStfactor != null &&
                    this.PurchaseUnitIcmsStfactor.Equals(other.PurchaseUnitIcmsStfactor)
                ) && 
                (
                    this.PurchaseUnitPisCofinsfactor == other.PurchaseUnitPisCofinsfactor ||
                    this.PurchaseUnitPisCofinsfactor != null &&
                    this.PurchaseUnitPisCofinsfactor.Equals(other.PurchaseUnitPisCofinsfactor)
                ) && 
                (
                    this.FirstUse == other.FirstUse ||
                    this.FirstUse != null &&
                    this.FirstUse.Equals(other.FirstUse)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CompanyId != null)
                    hash = hash * 59 + this.CompanyId.GetHashCode();
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.Agast != null)
                    hash = hash * 59 + this.Agast.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.SealCode != null)
                    hash = hash * 59 + this.SealCode.GetHashCode();
                if (this.NFCI != null)
                    hash = hash * 59 + this.NFCI.GetHashCode();
                if (this.IsIcmsStSubstitute != null)
                    hash = hash * 59 + this.IsIcmsStSubstitute.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                if (this.ProductType != null)
                    hash = hash * 59 + this.ProductType.GetHashCode();
                if (this.ManufacturerEquivalent != null)
                    hash = hash * 59 + this.ManufacturerEquivalent.GetHashCode();
                if (this.AppropriateIPIcreditWhenInGoing != null)
                    hash = hash * 59 + this.AppropriateIPIcreditWhenInGoing.GetHashCode();
                if (this.UsuallyAppropriatePISCOFINSCredit != null)
                    hash = hash * 59 + this.UsuallyAppropriatePISCOFINSCredit.GetHashCode();
                if (this.IsPisCofinsEstimatedCredit != null)
                    hash = hash * 59 + this.IsPisCofinsEstimatedCredit.GetHashCode();
                if (this.PiscofinsRevenueType != null)
                    hash = hash * 59 + this.PiscofinsRevenueType.GetHashCode();
                if (this.IcmsBaseDiscountForMonoPhaseSocialContr != null)
                    hash = hash * 59 + this.IcmsBaseDiscountForMonoPhaseSocialContr.GetHashCode();
                if (this.Cest != null)
                    hash = hash * 59 + this.Cest.GetHashCode();
                if (this.Cean != null)
                    hash = hash * 59 + this.Cean.GetHashCode();
                if (this.Nve != null)
                    hash = hash * 59 + this.Nve.GetHashCode();
                if (this.SalesUnit != null)
                    hash = hash * 59 + this.SalesUnit.GetHashCode();
                if (this.SalesUnitIPIfactor != null)
                    hash = hash * 59 + this.SalesUnitIPIfactor.GetHashCode();
                if (this.SalesUnitIcmsfactor != null)
                    hash = hash * 59 + this.SalesUnitIcmsfactor.GetHashCode();
                if (this.SalesUnitIcmsStfactor != null)
                    hash = hash * 59 + this.SalesUnitIcmsStfactor.GetHashCode();
                if (this.SalesUnitPisCofinsfactor != null)
                    hash = hash * 59 + this.SalesUnitPisCofinsfactor.GetHashCode();
                if (this.PurchaseUnit != null)
                    hash = hash * 59 + this.PurchaseUnit.GetHashCode();
                if (this.PurchaseUnitIPIfactor != null)
                    hash = hash * 59 + this.PurchaseUnitIPIfactor.GetHashCode();
                if (this.PurchaseUnitIcmsfactor != null)
                    hash = hash * 59 + this.PurchaseUnitIcmsfactor.GetHashCode();
                if (this.PurchaseUnitIcmsStfactor != null)
                    hash = hash * 59 + this.PurchaseUnitIcmsStfactor.GetHashCode();
                if (this.PurchaseUnitPisCofinsfactor != null)
                    hash = hash * 59 + this.PurchaseUnitPisCofinsfactor.GetHashCode();
                if (this.FirstUse != null)
                    hash = hash * 59 + this.FirstUse.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Code (string) maxLength
            if(this.Code != null && this.Code.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Code, length must be less than 60.", new [] { "Code" });
            }

            // Agast (string) maxLength
            if(this.Agast != null && this.Agast.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Agast, length must be less than 60.", new [] { "Agast" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 60.", new [] { "Description" });
            }

            // SealCode (string) maxLength
            if(this.SealCode != null && this.SealCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for SealCode, length must be less than 60.", new [] { "SealCode" });
            }

            // NFCI (string) pattern
            Regex regexNFCI = new Regex(@"[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}", RegexOptions.CultureInvariant);
            if (false == regexNFCI.Match(this.NFCI).Success)
            {
                yield return new ValidationResult("Invalid value for NFCI, must match a pattern of /[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/.", new [] { "NFCI" });
            }

            // Cest (string) pattern
            Regex regexCest = new Regex(@"[0-9]{7}", RegexOptions.CultureInvariant);
            if (false == regexCest.Match(this.Cest).Success)
            {
                yield return new ValidationResult("Invalid value for Cest, must match a pattern of /[0-9]{7}/.", new [] { "Cest" });
            }

            // Cean (string) pattern
            Regex regexCean = new Regex(@"[0-9]{0}|[0-9]{8}|[0-9]{12,14}", RegexOptions.CultureInvariant);
            if (false == regexCean.Match(this.Cean).Success)
            {
                yield return new ValidationResult("Invalid value for Cean, must match a pattern of /[0-9]{0}|[0-9]{8}|[0-9]{12,14}/.", new [] { "Cean" });
            }

            // Nve (string) pattern
            Regex regexNve = new Regex(@"[A-Z]{2}[0-9]{4}", RegexOptions.CultureInvariant);
            if (false == regexNve.Match(this.Nve).Success)
            {
                yield return new ValidationResult("Invalid value for Nve, must match a pattern of /[A-Z]{2}[0-9]{4}/.", new [] { "Nve" });
            }

            // SalesUnit (string) maxLength
            if(this.SalesUnit != null && this.SalesUnit.Length > 6)
            {
                yield return new ValidationResult("Invalid value for SalesUnit, length must be less than 6.", new [] { "SalesUnit" });
            }

            // PurchaseUnit (string) maxLength
            if(this.PurchaseUnit != null && this.PurchaseUnit.Length > 6)
            {
                yield return new ValidationResult("Invalid value for PurchaseUnit, length must be less than 6.", new [] { "PurchaseUnit" });
            }

            yield break;
        }
    }

}
