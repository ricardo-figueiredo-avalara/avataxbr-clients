/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SalesEntity
    /// </summary>
    [DataContract]
    public partial class SalesEntity :  IEquatable<SalesEntity>, IValidatableObject
    {
        /// <summary>
        /// Entity Special Tax Regime  - 'MEM' # Microempresa municipal - 'EST' # Estimativa - 'SPR' # Sociedade de profissionais - 'COP' # Cooperativa - 'MEI' # Microempresário Individual (MEI) - 'MPP' # Microempresário e Empresa de Pequeno Porte (ME EPP) 
        /// </summary>
        /// <value>Entity Special Tax Regime  - 'MEM' # Microempresa municipal - 'EST' # Estimativa - 'SPR' # Sociedade de profissionais - 'COP' # Cooperativa - 'MEI' # Microempresário Individual (MEI) - 'MPP' # Microempresário e Empresa de Pequeno Porte (ME EPP) </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SpecialTaxRegimeEnum
        {
            
            /// <summary>
            /// Enum MEM for "MEM"
            /// </summary>
            [EnumMember(Value = "MEM")]
            MEM,
            
            /// <summary>
            /// Enum EST for "EST"
            /// </summary>
            [EnumMember(Value = "EST")]
            EST,
            
            /// <summary>
            /// Enum SPR for "SPR"
            /// </summary>
            [EnumMember(Value = "SPR")]
            SPR,
            
            /// <summary>
            /// Enum COP for "COP"
            /// </summary>
            [EnumMember(Value = "COP")]
            COP,
            
            /// <summary>
            /// Enum MEI for "MEI"
            /// </summary>
            [EnumMember(Value = "MEI")]
            MEI,
            
            /// <summary>
            /// Enum MPP for "MPP"
            /// </summary>
            [EnumMember(Value = "MPP")]
            MPP
        }

        /// <summary>
        /// Entity Special Tax Regime  - 'MEM' # Microempresa municipal - 'EST' # Estimativa - 'SPR' # Sociedade de profissionais - 'COP' # Cooperativa - 'MEI' # Microempresário Individual (MEI) - 'MPP' # Microempresário e Empresa de Pequeno Porte (ME EPP) 
        /// </summary>
        /// <value>Entity Special Tax Regime  - 'MEM' # Microempresa municipal - 'EST' # Estimativa - 'SPR' # Sociedade de profissionais - 'COP' # Cooperativa - 'MEI' # Microempresário Individual (MEI) - 'MPP' # Microempresário e Empresa de Pequeno Porte (ME EPP) </value>
        [DataMember(Name="specialTaxRegime", EmitDefaultValue=false)]
        public SpecialTaxRegimeEnum? SpecialTaxRegime { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesEntity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SalesEntity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesEntity" /> class.
        /// </summary>
        /// <param name="Name">SERVICE BUYER NAME OFFICIAL.</param>
        /// <param name="Type">Type (required).</param>
        /// <param name="Email">Entity Email.</param>
        /// <param name="Cnpjcpf">CNPJ/CPF of Sales Buyer, if CPF pattern is &#39;[0-9]{11}&#39; if CNPJ pattern is &#39;[0-9]{14}&#39;.</param>
        /// <param name="CityTaxId">City Tax ID.</param>
        /// <param name="StateTaxId">State Tax ID.</param>
        /// <param name="Suframa">Suframa ID.</param>
        /// <param name="Phone">Entity Phone.</param>
        /// <param name="TaxRegime">TaxRegime (required).</param>
        /// <param name="SpecialTaxRegime">Entity Special Tax Regime  - &#39;MEM&#39; # Microempresa municipal - &#39;EST&#39; # Estimativa - &#39;SPR&#39; # Sociedade de profissionais - &#39;COP&#39; # Cooperativa - &#39;MEI&#39; # Microempresário Individual (MEI) - &#39;MPP&#39; # Microempresário e Empresa de Pequeno Porte (ME EPP) .</param>
        /// <param name="SubjectToSRF1234">Companies subject to rule follow same rule of Government.</param>
        /// <param name="RequiredWithholdingISS">If Withholding ISS is required, independently the rules applied..</param>
        /// <param name="Art">technical note. Anota\\u00e7\\u00e3o de Responsabilidade T\\u00e9cnica-ART, estabelece que todos os contratos referentes à  execu\\u00e7\\u00e3o de servi\\u00e7os ou obras de Engenharia, Agronomia, Geologia, Geografia ou Meteorologia dever\\u00e3o ser objeto de anota\\u00e7\\u00e3o no Conselho Regional de Engenharia e Agronomia.</param>
        /// <param name="AdminProcess">PROCESS NUMBER TO ISS SUSPENDED FOR ADMINISTRATIVE PROCESS.</param>
        /// <param name="BuildCode">Business code. Código da obra OBRA.</param>
        public SalesEntity(string Name = default(string), EntityType Type = default(EntityType), string Email = default(string), string Cnpjcpf = default(string), string CityTaxId = default(string), string StateTaxId = default(string), string Suframa = default(string), string Phone = default(string), FederalTaxRegime TaxRegime = default(FederalTaxRegime), SpecialTaxRegimeEnum? SpecialTaxRegime = default(SpecialTaxRegimeEnum?), bool? SubjectToSRF1234 = default(bool?), bool? RequiredWithholdingISS = default(bool?), string Art = default(string), string AdminProcess = default(string), string BuildCode = default(string))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for SalesEntity and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "TaxRegime" is required (not null)
            if (TaxRegime == null)
            {
                throw new InvalidDataException("TaxRegime is a required property for SalesEntity and cannot be null");
            }
            else
            {
                this.TaxRegime = TaxRegime;
            }
            this.Name = Name;
            this.Email = Email;
            this.Cnpjcpf = Cnpjcpf;
            this.CityTaxId = CityTaxId;
            this.StateTaxId = StateTaxId;
            this.Suframa = Suframa;
            this.Phone = Phone;
            this.SpecialTaxRegime = SpecialTaxRegime;
            this.SubjectToSRF1234 = SubjectToSRF1234;
            this.RequiredWithholdingISS = RequiredWithholdingISS;
            this.Art = Art;
            this.AdminProcess = AdminProcess;
            this.BuildCode = BuildCode;
        }
        
        /// <summary>
        /// SERVICE BUYER NAME OFFICIAL
        /// </summary>
        /// <value>SERVICE BUYER NAME OFFICIAL</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public EntityType Type { get; set; }
        /// <summary>
        /// Entity Email
        /// </summary>
        /// <value>Entity Email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// CNPJ/CPF of Sales Buyer, if CPF pattern is &#39;[0-9]{11}&#39; if CNPJ pattern is &#39;[0-9]{14}&#39;
        /// </summary>
        /// <value>CNPJ/CPF of Sales Buyer, if CPF pattern is &#39;[0-9]{11}&#39; if CNPJ pattern is &#39;[0-9]{14}&#39;</value>
        [DataMember(Name="cnpjcpf", EmitDefaultValue=false)]
        public string Cnpjcpf { get; set; }
        /// <summary>
        /// City Tax ID
        /// </summary>
        /// <value>City Tax ID</value>
        [DataMember(Name="cityTaxId", EmitDefaultValue=false)]
        public string CityTaxId { get; set; }
        /// <summary>
        /// State Tax ID
        /// </summary>
        /// <value>State Tax ID</value>
        [DataMember(Name="stateTaxId", EmitDefaultValue=false)]
        public string StateTaxId { get; set; }
        /// <summary>
        /// Suframa ID
        /// </summary>
        /// <value>Suframa ID</value>
        [DataMember(Name="suframa", EmitDefaultValue=false)]
        public string Suframa { get; set; }
        /// <summary>
        /// Entity Phone
        /// </summary>
        /// <value>Entity Phone</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }
        /// <summary>
        /// Gets or Sets TaxRegime
        /// </summary>
        [DataMember(Name="taxRegime", EmitDefaultValue=false)]
        public FederalTaxRegime TaxRegime { get; set; }
        /// <summary>
        /// Companies subject to rule follow same rule of Government
        /// </summary>
        /// <value>Companies subject to rule follow same rule of Government</value>
        [DataMember(Name="subjectToSRF1234", EmitDefaultValue=false)]
        public bool? SubjectToSRF1234 { get; set; }
        /// <summary>
        /// If Withholding ISS is required, independently the rules applied.
        /// </summary>
        /// <value>If Withholding ISS is required, independently the rules applied.</value>
        [DataMember(Name="requiredWithholdingISS", EmitDefaultValue=false)]
        public bool? RequiredWithholdingISS { get; set; }
        /// <summary>
        /// technical note. Anota\\u00e7\\u00e3o de Responsabilidade T\\u00e9cnica-ART, estabelece que todos os contratos referentes à  execu\\u00e7\\u00e3o de servi\\u00e7os ou obras de Engenharia, Agronomia, Geologia, Geografia ou Meteorologia dever\\u00e3o ser objeto de anota\\u00e7\\u00e3o no Conselho Regional de Engenharia e Agronomia
        /// </summary>
        /// <value>technical note. Anota\\u00e7\\u00e3o de Responsabilidade T\\u00e9cnica-ART, estabelece que todos os contratos referentes à  execu\\u00e7\\u00e3o de servi\\u00e7os ou obras de Engenharia, Agronomia, Geologia, Geografia ou Meteorologia dever\\u00e3o ser objeto de anota\\u00e7\\u00e3o no Conselho Regional de Engenharia e Agronomia</value>
        [DataMember(Name="art", EmitDefaultValue=false)]
        public string Art { get; set; }
        /// <summary>
        /// PROCESS NUMBER TO ISS SUSPENDED FOR ADMINISTRATIVE PROCESS
        /// </summary>
        /// <value>PROCESS NUMBER TO ISS SUSPENDED FOR ADMINISTRATIVE PROCESS</value>
        [DataMember(Name="adminProcess", EmitDefaultValue=false)]
        public string AdminProcess { get; set; }
        /// <summary>
        /// Business code. Código da obra OBRA
        /// </summary>
        /// <value>Business code. Código da obra OBRA</value>
        [DataMember(Name="buildCode", EmitDefaultValue=false)]
        public string BuildCode { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesEntity {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Cnpjcpf: ").Append(Cnpjcpf).Append("\n");
            sb.Append("  CityTaxId: ").Append(CityTaxId).Append("\n");
            sb.Append("  StateTaxId: ").Append(StateTaxId).Append("\n");
            sb.Append("  Suframa: ").Append(Suframa).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  TaxRegime: ").Append(TaxRegime).Append("\n");
            sb.Append("  SpecialTaxRegime: ").Append(SpecialTaxRegime).Append("\n");
            sb.Append("  SubjectToSRF1234: ").Append(SubjectToSRF1234).Append("\n");
            sb.Append("  RequiredWithholdingISS: ").Append(RequiredWithholdingISS).Append("\n");
            sb.Append("  Art: ").Append(Art).Append("\n");
            sb.Append("  AdminProcess: ").Append(AdminProcess).Append("\n");
            sb.Append("  BuildCode: ").Append(BuildCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SalesEntity);
        }

        /// <summary>
        /// Returns true if SalesEntity instances are equal
        /// </summary>
        /// <param name="other">Instance of SalesEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesEntity other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Cnpjcpf == other.Cnpjcpf ||
                    this.Cnpjcpf != null &&
                    this.Cnpjcpf.Equals(other.Cnpjcpf)
                ) && 
                (
                    this.CityTaxId == other.CityTaxId ||
                    this.CityTaxId != null &&
                    this.CityTaxId.Equals(other.CityTaxId)
                ) && 
                (
                    this.StateTaxId == other.StateTaxId ||
                    this.StateTaxId != null &&
                    this.StateTaxId.Equals(other.StateTaxId)
                ) && 
                (
                    this.Suframa == other.Suframa ||
                    this.Suframa != null &&
                    this.Suframa.Equals(other.Suframa)
                ) && 
                (
                    this.Phone == other.Phone ||
                    this.Phone != null &&
                    this.Phone.Equals(other.Phone)
                ) && 
                (
                    this.TaxRegime == other.TaxRegime ||
                    this.TaxRegime != null &&
                    this.TaxRegime.Equals(other.TaxRegime)
                ) && 
                (
                    this.SpecialTaxRegime == other.SpecialTaxRegime ||
                    this.SpecialTaxRegime != null &&
                    this.SpecialTaxRegime.Equals(other.SpecialTaxRegime)
                ) && 
                (
                    this.SubjectToSRF1234 == other.SubjectToSRF1234 ||
                    this.SubjectToSRF1234 != null &&
                    this.SubjectToSRF1234.Equals(other.SubjectToSRF1234)
                ) && 
                (
                    this.RequiredWithholdingISS == other.RequiredWithholdingISS ||
                    this.RequiredWithholdingISS != null &&
                    this.RequiredWithholdingISS.Equals(other.RequiredWithholdingISS)
                ) && 
                (
                    this.Art == other.Art ||
                    this.Art != null &&
                    this.Art.Equals(other.Art)
                ) && 
                (
                    this.AdminProcess == other.AdminProcess ||
                    this.AdminProcess != null &&
                    this.AdminProcess.Equals(other.AdminProcess)
                ) && 
                (
                    this.BuildCode == other.BuildCode ||
                    this.BuildCode != null &&
                    this.BuildCode.Equals(other.BuildCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Cnpjcpf != null)
                    hash = hash * 59 + this.Cnpjcpf.GetHashCode();
                if (this.CityTaxId != null)
                    hash = hash * 59 + this.CityTaxId.GetHashCode();
                if (this.StateTaxId != null)
                    hash = hash * 59 + this.StateTaxId.GetHashCode();
                if (this.Suframa != null)
                    hash = hash * 59 + this.Suframa.GetHashCode();
                if (this.Phone != null)
                    hash = hash * 59 + this.Phone.GetHashCode();
                if (this.TaxRegime != null)
                    hash = hash * 59 + this.TaxRegime.GetHashCode();
                if (this.SpecialTaxRegime != null)
                    hash = hash * 59 + this.SpecialTaxRegime.GetHashCode();
                if (this.SubjectToSRF1234 != null)
                    hash = hash * 59 + this.SubjectToSRF1234.GetHashCode();
                if (this.RequiredWithholdingISS != null)
                    hash = hash * 59 + this.RequiredWithholdingISS.GetHashCode();
                if (this.Art != null)
                    hash = hash * 59 + this.Art.GetHashCode();
                if (this.AdminProcess != null)
                    hash = hash * 59 + this.AdminProcess.GetHashCode();
                if (this.BuildCode != null)
                    hash = hash * 59 + this.BuildCode.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 60.", new [] { "Name" });
            }

            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Email, length must be less than 60.", new [] { "Email" });
            }

            // Cnpjcpf (string) pattern
            Regex regexCnpjcpf = new Regex(@"([!-ÿ]{0}|[!-ÿ]{5,20})?", RegexOptions.CultureInvariant);
            if (false == regexCnpjcpf.Match(this.Cnpjcpf).Success)
            {
                yield return new ValidationResult("Invalid value for Cnpjcpf, must match a pattern of /([!-ÿ]{0}|[!-ÿ]{5,20})?/.", new [] { "Cnpjcpf" });
            }

            // CityTaxId (string) maxLength
            if(this.CityTaxId != null && this.CityTaxId.Length > 15)
            {
                yield return new ValidationResult("Invalid value for CityTaxId, length must be less than 15.", new [] { "CityTaxId" });
            }

            // StateTaxId (string) pattern
            Regex regexStateTaxId = new Regex(@"[0-9]{2,14}|ISENTO", RegexOptions.CultureInvariant);
            if (false == regexStateTaxId.Match(this.StateTaxId).Success)
            {
                yield return new ValidationResult("Invalid value for StateTaxId, must match a pattern of /[0-9]{2,14}|ISENTO/.", new [] { "StateTaxId" });
            }

            // Suframa (string) pattern
            Regex regexSuframa = new Regex(@"[0-9]{8,9}", RegexOptions.CultureInvariant);
            if (false == regexSuframa.Match(this.Suframa).Success)
            {
                yield return new ValidationResult("Invalid value for Suframa, must match a pattern of /[0-9]{8,9}/.", new [] { "Suframa" });
            }

            // Phone (string) pattern
            Regex regexPhone = new Regex(@"[0-9]{6,14}", RegexOptions.CultureInvariant);
            if (false == regexPhone.Match(this.Phone).Success)
            {
                yield return new ValidationResult("Invalid value for Phone, must match a pattern of /[0-9]{6,14}/.", new [] { "Phone" });
            }

            // Art (string) maxLength
            if(this.Art != null && this.Art.Length > 15)
            {
                yield return new ValidationResult("Invalid value for Art, length must be less than 15.", new [] { "Art" });
            }

            // AdminProcess (string) maxLength
            if(this.AdminProcess != null && this.AdminProcess.Length > 30)
            {
                yield return new ValidationResult("Invalid value for AdminProcess, length must be less than 30.", new [] { "AdminProcess" });
            }

            // BuildCode (string) maxLength
            if(this.BuildCode != null && this.BuildCode.Length > 15)
            {
                yield return new ValidationResult("Invalid value for BuildCode, length must be less than 15.", new [] { "BuildCode" });
            }

            yield break;
        }
    }

}
