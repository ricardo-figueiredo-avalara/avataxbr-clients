/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Internal Type used to references all taxes.
    /// </summary>
    [DataContract]
    public partial class InformerForGoods :  IEquatable<InformerForGoods>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InformerForGoods" /> class.
        /// </summary>
        /// <param name="Header">Header.</param>
        /// <param name="Line">Line.</param>
        /// <param name="Company">Company.</param>
        /// <param name="Entity">Entity.</param>
        /// <param name="Emitter">Emitter.</param>
        /// <param name="Receiver">Receiver.</param>
        /// <param name="Transporter">Transporter.</param>
        /// <param name="Csts">Csts.</param>
        /// <param name="Amount">Amount.</param>
        /// <param name="Discount">Discount.</param>
        /// <param name="Quantity">Quantity.</param>
        /// <param name="UnitPrice">UnitPrice.</param>
        /// <param name="FreightAmount">FreightAmount.</param>
        /// <param name="InsuranceAmount">InsuranceAmount.</param>
        /// <param name="OtherCostAmount">OtherCostAmount.</param>
        /// <param name="ExemptValue">ExemptValue.</param>
        public InformerForGoods(HeaderForGoods Header = default(HeaderForGoods), LineForGoods Line = default(LineForGoods), EntityInformerForGoods Company = default(EntityInformerForGoods), EntityInformerForGoods Entity = default(EntityInformerForGoods), EntityInformerForGoods Emitter = default(EntityInformerForGoods), EntityInformerForGoods Receiver = default(EntityInformerForGoods), EntityInformerForGoods Transporter = default(EntityInformerForGoods), InformerForGoodsCsts Csts = default(InformerForGoodsCsts), decimal? Amount = default(decimal?), decimal? Discount = default(decimal?), decimal? Quantity = default(decimal?), decimal? UnitPrice = default(decimal?), decimal? FreightAmount = default(decimal?), decimal? InsuranceAmount = default(decimal?), decimal? OtherCostAmount = default(decimal?), decimal? ExemptValue = default(decimal?))
        {
            this.Header = Header;
            this.Line = Line;
            this.Company = Company;
            this.Entity = Entity;
            this.Emitter = Emitter;
            this.Receiver = Receiver;
            this.Transporter = Transporter;
            this.Csts = Csts;
            this.Amount = Amount;
            this.Discount = Discount;
            this.Quantity = Quantity;
            this.UnitPrice = UnitPrice;
            this.FreightAmount = FreightAmount;
            this.InsuranceAmount = InsuranceAmount;
            this.OtherCostAmount = OtherCostAmount;
            this.ExemptValue = ExemptValue;
        }
        
        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [DataMember(Name="header", EmitDefaultValue=false)]
        public HeaderForGoods Header { get; set; }
        /// <summary>
        /// Gets or Sets Line
        /// </summary>
        [DataMember(Name="line", EmitDefaultValue=false)]
        public LineForGoods Line { get; set; }
        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="_company", EmitDefaultValue=false)]
        public EntityInformerForGoods Company { get; set; }
        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name="_entity", EmitDefaultValue=false)]
        public EntityInformerForGoods Entity { get; set; }
        /// <summary>
        /// Gets or Sets Emitter
        /// </summary>
        [DataMember(Name="emitter", EmitDefaultValue=false)]
        public EntityInformerForGoods Emitter { get; set; }
        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name="receiver", EmitDefaultValue=false)]
        public EntityInformerForGoods Receiver { get; set; }
        /// <summary>
        /// Gets or Sets Transporter
        /// </summary>
        [DataMember(Name="transporter", EmitDefaultValue=false)]
        public EntityInformerForGoods Transporter { get; set; }
        /// <summary>
        /// Gets or Sets Csts
        /// </summary>
        [DataMember(Name="csts", EmitDefaultValue=false)]
        public InformerForGoodsCsts Csts { get; set; }
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }
        /// <summary>
        /// Gets or Sets Discount
        /// </summary>
        [DataMember(Name="discount", EmitDefaultValue=false)]
        public decimal? Discount { get; set; }
        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal? Quantity { get; set; }
        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="unitPrice", EmitDefaultValue=false)]
        public decimal? UnitPrice { get; set; }
        /// <summary>
        /// Gets or Sets FreightAmount
        /// </summary>
        [DataMember(Name="freightAmount", EmitDefaultValue=false)]
        public decimal? FreightAmount { get; set; }
        /// <summary>
        /// Gets or Sets InsuranceAmount
        /// </summary>
        [DataMember(Name="insuranceAmount", EmitDefaultValue=false)]
        public decimal? InsuranceAmount { get; set; }
        /// <summary>
        /// Gets or Sets OtherCostAmount
        /// </summary>
        [DataMember(Name="otherCostAmount", EmitDefaultValue=false)]
        public decimal? OtherCostAmount { get; set; }
        /// <summary>
        /// Gets or Sets ExemptValue
        /// </summary>
        [DataMember(Name="exemptValue", EmitDefaultValue=false)]
        public decimal? ExemptValue { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InformerForGoods {\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Line: ").Append(Line).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Emitter: ").Append(Emitter).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  Transporter: ").Append(Transporter).Append("\n");
            sb.Append("  Csts: ").Append(Csts).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  FreightAmount: ").Append(FreightAmount).Append("\n");
            sb.Append("  InsuranceAmount: ").Append(InsuranceAmount).Append("\n");
            sb.Append("  OtherCostAmount: ").Append(OtherCostAmount).Append("\n");
            sb.Append("  ExemptValue: ").Append(ExemptValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InformerForGoods);
        }

        /// <summary>
        /// Returns true if InformerForGoods instances are equal
        /// </summary>
        /// <param name="other">Instance of InformerForGoods to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InformerForGoods other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Header == other.Header ||
                    this.Header != null &&
                    this.Header.Equals(other.Header)
                ) && 
                (
                    this.Line == other.Line ||
                    this.Line != null &&
                    this.Line.Equals(other.Line)
                ) && 
                (
                    this.Company == other.Company ||
                    this.Company != null &&
                    this.Company.Equals(other.Company)
                ) && 
                (
                    this.Entity == other.Entity ||
                    this.Entity != null &&
                    this.Entity.Equals(other.Entity)
                ) && 
                (
                    this.Emitter == other.Emitter ||
                    this.Emitter != null &&
                    this.Emitter.Equals(other.Emitter)
                ) && 
                (
                    this.Receiver == other.Receiver ||
                    this.Receiver != null &&
                    this.Receiver.Equals(other.Receiver)
                ) && 
                (
                    this.Transporter == other.Transporter ||
                    this.Transporter != null &&
                    this.Transporter.Equals(other.Transporter)
                ) && 
                (
                    this.Csts == other.Csts ||
                    this.Csts != null &&
                    this.Csts.Equals(other.Csts)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.Discount == other.Discount ||
                    this.Discount != null &&
                    this.Discount.Equals(other.Discount)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.UnitPrice == other.UnitPrice ||
                    this.UnitPrice != null &&
                    this.UnitPrice.Equals(other.UnitPrice)
                ) && 
                (
                    this.FreightAmount == other.FreightAmount ||
                    this.FreightAmount != null &&
                    this.FreightAmount.Equals(other.FreightAmount)
                ) && 
                (
                    this.InsuranceAmount == other.InsuranceAmount ||
                    this.InsuranceAmount != null &&
                    this.InsuranceAmount.Equals(other.InsuranceAmount)
                ) && 
                (
                    this.OtherCostAmount == other.OtherCostAmount ||
                    this.OtherCostAmount != null &&
                    this.OtherCostAmount.Equals(other.OtherCostAmount)
                ) && 
                (
                    this.ExemptValue == other.ExemptValue ||
                    this.ExemptValue != null &&
                    this.ExemptValue.Equals(other.ExemptValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Header != null)
                    hash = hash * 59 + this.Header.GetHashCode();
                if (this.Line != null)
                    hash = hash * 59 + this.Line.GetHashCode();
                if (this.Company != null)
                    hash = hash * 59 + this.Company.GetHashCode();
                if (this.Entity != null)
                    hash = hash * 59 + this.Entity.GetHashCode();
                if (this.Emitter != null)
                    hash = hash * 59 + this.Emitter.GetHashCode();
                if (this.Receiver != null)
                    hash = hash * 59 + this.Receiver.GetHashCode();
                if (this.Transporter != null)
                    hash = hash * 59 + this.Transporter.GetHashCode();
                if (this.Csts != null)
                    hash = hash * 59 + this.Csts.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Discount != null)
                    hash = hash * 59 + this.Discount.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.UnitPrice != null)
                    hash = hash * 59 + this.UnitPrice.GetHashCode();
                if (this.FreightAmount != null)
                    hash = hash * 59 + this.FreightAmount.GetHashCode();
                if (this.InsuranceAmount != null)
                    hash = hash * 59 + this.InsuranceAmount.GetHashCode();
                if (this.OtherCostAmount != null)
                    hash = hash * 59 + this.OtherCostAmount.GetHashCode();
                if (this.ExemptValue != null)
                    hash = hash * 59 + this.ExemptValue.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
