/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TaxTypeRate
    /// </summary>
    [DataContract]
    public partial class TaxTypeRate :  IEquatable<TaxTypeRate>, IValidatableObject
    {
        /// <summary>
        /// Tax can be calculated by rate or by quantity
        /// </summary>
        /// <value>Tax can be calculated by rate or by quantity</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxModelEnum
        {
            
            /// <summary>
            /// Enum Rate for "rate"
            /// </summary>
            [EnumMember(Value = "rate")]
            Rate,
            
            /// <summary>
            /// Enum Srf for "srf"
            /// </summary>
            [EnumMember(Value = "srf")]
            Srf
        }

        /// <summary>
        /// Gets or Sets SpecializationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SpecializationTypeEnum
        {
            
            /// <summary>
            /// Enum Basic for "basic"
            /// </summary>
            [EnumMember(Value = "basic")]
            Basic,
            
            /// <summary>
            /// Enum Monophase for "monophase"
            /// </summary>
            [EnumMember(Value = "monophase")]
            Monophase,
            
            /// <summary>
            /// Enum TaxSubstitution for "taxSubstitution"
            /// </summary>
            [EnumMember(Value = "taxSubstitution")]
            TaxSubstitution
        }

        /// <summary>
        /// Tax can be calculated by rate or by quantity
        /// </summary>
        /// <value>Tax can be calculated by rate or by quantity</value>
        [DataMember(Name="taxModel", EmitDefaultValue=false)]
        public TaxModelEnum? TaxModel { get; set; }
        /// <summary>
        /// Gets or Sets SpecializationType
        /// </summary>
        [DataMember(Name="specializationType", EmitDefaultValue=false)]
        public SpecializationTypeEnum? SpecializationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxTypeRate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaxTypeRate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxTypeRate" /> class.
        /// </summary>
        /// <param name="TaxType">TaxType (required).</param>
        /// <param name="TaxModel">Tax can be calculated by rate or by quantity (required).</param>
        /// <param name="Rate">Specific tax rate ex 3.5 (3.5%).</param>
        /// <param name="SrvAmount">Specific tax rate ex 3.5 (3.5%).</param>
        /// <param name="QuantityUnidBase">QuantityUnidBase.</param>
        /// <param name="SpecializationType">SpecializationType.</param>
        /// <param name="ExemptionReasonCode">UUID Reference to an item in the LegalReason store. .</param>
        /// <param name="CustomExemptionReasonDescription">Optional textual reason description, to be used when reason codes are generic (i.e. reason code 999 &#x3D; Other). .</param>
        /// <param name="Withholding">Withholding.</param>
        public TaxTypeRate(TaxType TaxType = default(TaxType), TaxModelEnum? TaxModel = default(TaxModelEnum?), double? Rate = default(double?), double? SrvAmount = default(double?), string QuantityUnidBase = default(string), SpecializationTypeEnum? SpecializationType = default(SpecializationTypeEnum?), string ExemptionReasonCode = default(string), string CustomExemptionReasonDescription = default(string), TaxTypeRateWithholding Withholding = default(TaxTypeRateWithholding))
        {
            // to ensure "TaxType" is required (not null)
            if (TaxType == null)
            {
                throw new InvalidDataException("TaxType is a required property for TaxTypeRate and cannot be null");
            }
            else
            {
                this.TaxType = TaxType;
            }
            // to ensure "TaxModel" is required (not null)
            if (TaxModel == null)
            {
                throw new InvalidDataException("TaxModel is a required property for TaxTypeRate and cannot be null");
            }
            else
            {
                this.TaxModel = TaxModel;
            }
            this.Rate = Rate;
            this.SrvAmount = SrvAmount;
            this.QuantityUnidBase = QuantityUnidBase;
            this.SpecializationType = SpecializationType;
            this.ExemptionReasonCode = ExemptionReasonCode;
            this.CustomExemptionReasonDescription = CustomExemptionReasonDescription;
            this.Withholding = Withholding;
        }
        
        /// <summary>
        /// Gets or Sets TaxType
        /// </summary>
        [DataMember(Name="taxType", EmitDefaultValue=false)]
        public TaxType TaxType { get; set; }
        /// <summary>
        /// Specific tax rate ex 3.5 (3.5%)
        /// </summary>
        /// <value>Specific tax rate ex 3.5 (3.5%)</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public double? Rate { get; set; }
        /// <summary>
        /// Specific tax rate ex 3.5 (3.5%)
        /// </summary>
        /// <value>Specific tax rate ex 3.5 (3.5%)</value>
        [DataMember(Name="srvAmount", EmitDefaultValue=false)]
        public double? SrvAmount { get; set; }
        /// <summary>
        /// Gets or Sets QuantityUnidBase
        /// </summary>
        [DataMember(Name="quantityUnidBase", EmitDefaultValue=false)]
        public string QuantityUnidBase { get; set; }
        /// <summary>
        /// UUID Reference to an item in the LegalReason store. 
        /// </summary>
        /// <value>UUID Reference to an item in the LegalReason store. </value>
        [DataMember(Name="exemptionReasonCode", EmitDefaultValue=false)]
        public string ExemptionReasonCode { get; set; }
        /// <summary>
        /// Optional textual reason description, to be used when reason codes are generic (i.e. reason code 999 &#x3D; Other). 
        /// </summary>
        /// <value>Optional textual reason description, to be used when reason codes are generic (i.e. reason code 999 &#x3D; Other). </value>
        [DataMember(Name="customExemptionReasonDescription", EmitDefaultValue=false)]
        public string CustomExemptionReasonDescription { get; set; }
        /// <summary>
        /// Gets or Sets Withholding
        /// </summary>
        [DataMember(Name="withholding", EmitDefaultValue=false)]
        public TaxTypeRateWithholding Withholding { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxTypeRate {\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("  TaxModel: ").Append(TaxModel).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  SrvAmount: ").Append(SrvAmount).Append("\n");
            sb.Append("  QuantityUnidBase: ").Append(QuantityUnidBase).Append("\n");
            sb.Append("  SpecializationType: ").Append(SpecializationType).Append("\n");
            sb.Append("  ExemptionReasonCode: ").Append(ExemptionReasonCode).Append("\n");
            sb.Append("  CustomExemptionReasonDescription: ").Append(CustomExemptionReasonDescription).Append("\n");
            sb.Append("  Withholding: ").Append(Withholding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaxTypeRate);
        }

        /// <summary>
        /// Returns true if TaxTypeRate instances are equal
        /// </summary>
        /// <param name="other">Instance of TaxTypeRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxTypeRate other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TaxType == other.TaxType ||
                    this.TaxType != null &&
                    this.TaxType.Equals(other.TaxType)
                ) && 
                (
                    this.TaxModel == other.TaxModel ||
                    this.TaxModel != null &&
                    this.TaxModel.Equals(other.TaxModel)
                ) && 
                (
                    this.Rate == other.Rate ||
                    this.Rate != null &&
                    this.Rate.Equals(other.Rate)
                ) && 
                (
                    this.SrvAmount == other.SrvAmount ||
                    this.SrvAmount != null &&
                    this.SrvAmount.Equals(other.SrvAmount)
                ) && 
                (
                    this.QuantityUnidBase == other.QuantityUnidBase ||
                    this.QuantityUnidBase != null &&
                    this.QuantityUnidBase.Equals(other.QuantityUnidBase)
                ) && 
                (
                    this.SpecializationType == other.SpecializationType ||
                    this.SpecializationType != null &&
                    this.SpecializationType.Equals(other.SpecializationType)
                ) && 
                (
                    this.ExemptionReasonCode == other.ExemptionReasonCode ||
                    this.ExemptionReasonCode != null &&
                    this.ExemptionReasonCode.Equals(other.ExemptionReasonCode)
                ) && 
                (
                    this.CustomExemptionReasonDescription == other.CustomExemptionReasonDescription ||
                    this.CustomExemptionReasonDescription != null &&
                    this.CustomExemptionReasonDescription.Equals(other.CustomExemptionReasonDescription)
                ) && 
                (
                    this.Withholding == other.Withholding ||
                    this.Withholding != null &&
                    this.Withholding.Equals(other.Withholding)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TaxType != null)
                    hash = hash * 59 + this.TaxType.GetHashCode();
                if (this.TaxModel != null)
                    hash = hash * 59 + this.TaxModel.GetHashCode();
                if (this.Rate != null)
                    hash = hash * 59 + this.Rate.GetHashCode();
                if (this.SrvAmount != null)
                    hash = hash * 59 + this.SrvAmount.GetHashCode();
                if (this.QuantityUnidBase != null)
                    hash = hash * 59 + this.QuantityUnidBase.GetHashCode();
                if (this.SpecializationType != null)
                    hash = hash * 59 + this.SpecializationType.GetHashCode();
                if (this.ExemptionReasonCode != null)
                    hash = hash * 59 + this.ExemptionReasonCode.GetHashCode();
                if (this.CustomExemptionReasonDescription != null)
                    hash = hash * 59 + this.CustomExemptionReasonDescription.GetHashCode();
                if (this.Withholding != null)
                    hash = hash * 59 + this.Withholding.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // QuantityUnidBase (string) maxLength
            if(this.QuantityUnidBase != null && this.QuantityUnidBase.Length > 6)
            {
                yield return new ValidationResult("Invalid value for QuantityUnidBase, length must be less than 6.", new [] { "QuantityUnidBase" });
            }

            yield break;
        }
    }

}
