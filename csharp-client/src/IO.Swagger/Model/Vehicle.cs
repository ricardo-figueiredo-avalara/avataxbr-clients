/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Vehicle
    /// </summary>
    [DataContract]
    public partial class Vehicle :  IEquatable<Vehicle>, IValidatableObject
    {
        /// <summary>
        /// - '01' # Alcohol - '02' # Gas - '03' # Diesel - '16' # Alcohol/Gas - '17' # Gas/Alcohol/GNV - '18' # Gas/Electric 
        /// </summary>
        /// <value>- '01' # Alcohol - '02' # Gas - '03' # Diesel - '16' # Alcohol/Gas - '17' # Gas/Alcohol/GNV - '18' # Gas/Electric </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FuelTypeEnum
        {
            
            /// <summary>
            /// Enum _01 for "01"
            /// </summary>
            [EnumMember(Value = "01")]
            _01,
            
            /// <summary>
            /// Enum _02 for "02"
            /// </summary>
            [EnumMember(Value = "02")]
            _02,
            
            /// <summary>
            /// Enum _03 for "03"
            /// </summary>
            [EnumMember(Value = "03")]
            _03,
            
            /// <summary>
            /// Enum _16 for "16"
            /// </summary>
            [EnumMember(Value = "16")]
            _16,
            
            /// <summary>
            /// Enum _17 for "17"
            /// </summary>
            [EnumMember(Value = "17")]
            _17,
            
            /// <summary>
            /// Enum _18 for "18"
            /// </summary>
            [EnumMember(Value = "18")]
            _18
        }

        /// <summary>
        /// - '01' # YELLOW - '02' # BLUE - '03' # BEIGE - '04' # WHITE - '05' # GRAY - '06' # GOLDEN - '07' # GRENA - '08' # ORANGE - '09' # BROWN - '10' # SILVER - '11' # BLACK - '12' # PINK - '13' # PURPLE - '14' # GREEN - '15' # RED - '16' # FANTASY 
        /// </summary>
        /// <value>- '01' # YELLOW - '02' # BLUE - '03' # BEIGE - '04' # WHITE - '05' # GRAY - '06' # GOLDEN - '07' # GRENA - '08' # ORANGE - '09' # BROWN - '10' # SILVER - '11' # BLACK - '12' # PINK - '13' # PURPLE - '14' # GREEN - '15' # RED - '16' # FANTASY </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ColorDENATRANCodeEnum
        {
            
            /// <summary>
            /// Enum _01 for "01"
            /// </summary>
            [EnumMember(Value = "01")]
            _01,
            
            /// <summary>
            /// Enum _02 for "02"
            /// </summary>
            [EnumMember(Value = "02")]
            _02,
            
            /// <summary>
            /// Enum _03 for "03"
            /// </summary>
            [EnumMember(Value = "03")]
            _03,
            
            /// <summary>
            /// Enum _04 for "04"
            /// </summary>
            [EnumMember(Value = "04")]
            _04,
            
            /// <summary>
            /// Enum _05 for "05"
            /// </summary>
            [EnumMember(Value = "05")]
            _05,
            
            /// <summary>
            /// Enum _06 for "06"
            /// </summary>
            [EnumMember(Value = "06")]
            _06,
            
            /// <summary>
            /// Enum _07 for "07"
            /// </summary>
            [EnumMember(Value = "07")]
            _07,
            
            /// <summary>
            /// Enum _08 for "08"
            /// </summary>
            [EnumMember(Value = "08")]
            _08,
            
            /// <summary>
            /// Enum _09 for "09"
            /// </summary>
            [EnumMember(Value = "09")]
            _09,
            
            /// <summary>
            /// Enum _10 for "10"
            /// </summary>
            [EnumMember(Value = "10")]
            _10,
            
            /// <summary>
            /// Enum _11 for "11"
            /// </summary>
            [EnumMember(Value = "11")]
            _11,
            
            /// <summary>
            /// Enum _12 for "12"
            /// </summary>
            [EnumMember(Value = "12")]
            _12,
            
            /// <summary>
            /// Enum _13 for "13"
            /// </summary>
            [EnumMember(Value = "13")]
            _13,
            
            /// <summary>
            /// Enum _14 for "14"
            /// </summary>
            [EnumMember(Value = "14")]
            _14,
            
            /// <summary>
            /// Enum _15 for "15"
            /// </summary>
            [EnumMember(Value = "15")]
            _15,
            
            /// <summary>
            /// Enum _16 for "16"
            /// </summary>
            [EnumMember(Value = "16")]
            _16
        }

        /// <summary>
        /// chassis condition original or modified (remarcado)
        /// </summary>
        /// <value>chassis condition original or modified (remarcado)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VinEnum
        {
            
            /// <summary>
            /// Enum R for "R"
            /// </summary>
            [EnumMember(Value = "R")]
            R,
            
            /// <summary>
            /// Enum N for "N"
            /// </summary>
            [EnumMember(Value = "N")]
            N
        }

        /// <summary>
        /// - '1' # Finished(Done) - '2' # Not finished - '3' # Semi-finished 
        /// </summary>
        /// <value>- '1' # Finished(Done) - '2' # Not finished - '3' # Semi-finished </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VehicleManufactoryStatusEnum
        {
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1,
            
            /// <summary>
            /// Enum _2 for "2"
            /// </summary>
            [EnumMember(Value = "2")]
            _2,
            
            /// <summary>
            /// Enum _3 for "3"
            /// </summary>
            [EnumMember(Value = "3")]
            _3
        }

        /// <summary>
        /// Lien/restriction type - '0' # No one; - '1' # Alienação Fiduciária; - '2' # Arrendamento Mercantil; - '3' # Reserva de Domínio; - '4' # Penhor de Veículos; - '9' # Other. 
        /// </summary>
        /// <value>Lien/restriction type - '0' # No one; - '1' # Alienação Fiduciária; - '2' # Arrendamento Mercantil; - '3' # Reserva de Domínio; - '4' # Penhor de Veículos; - '9' # Other. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RestrictionTypeEnum
        {
            
            /// <summary>
            /// Enum _0 for "0"
            /// </summary>
            [EnumMember(Value = "0")]
            _0,
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1,
            
            /// <summary>
            /// Enum _2 for "2"
            /// </summary>
            [EnumMember(Value = "2")]
            _2,
            
            /// <summary>
            /// Enum _3 for "3"
            /// </summary>
            [EnumMember(Value = "3")]
            _3,
            
            /// <summary>
            /// Enum _4 for "4"
            /// </summary>
            [EnumMember(Value = "4")]
            _4,
            
            /// <summary>
            /// Enum _9 for "9"
            /// </summary>
            [EnumMember(Value = "9")]
            _9
        }

        /// <summary>
        /// - '01' # Alcohol - '02' # Gas - '03' # Diesel - '16' # Alcohol/Gas - '17' # Gas/Alcohol/GNV - '18' # Gas/Electric 
        /// </summary>
        /// <value>- '01' # Alcohol - '02' # Gas - '03' # Diesel - '16' # Alcohol/Gas - '17' # Gas/Alcohol/GNV - '18' # Gas/Electric </value>
        [DataMember(Name="fuelType", EmitDefaultValue=false)]
        public FuelTypeEnum? FuelType { get; set; }
        /// <summary>
        /// - '01' # YELLOW - '02' # BLUE - '03' # BEIGE - '04' # WHITE - '05' # GRAY - '06' # GOLDEN - '07' # GRENA - '08' # ORANGE - '09' # BROWN - '10' # SILVER - '11' # BLACK - '12' # PINK - '13' # PURPLE - '14' # GREEN - '15' # RED - '16' # FANTASY 
        /// </summary>
        /// <value>- '01' # YELLOW - '02' # BLUE - '03' # BEIGE - '04' # WHITE - '05' # GRAY - '06' # GOLDEN - '07' # GRENA - '08' # ORANGE - '09' # BROWN - '10' # SILVER - '11' # BLACK - '12' # PINK - '13' # PURPLE - '14' # GREEN - '15' # RED - '16' # FANTASY </value>
        [DataMember(Name="colorDENATRANCode", EmitDefaultValue=false)]
        public ColorDENATRANCodeEnum? ColorDENATRANCode { get; set; }
        /// <summary>
        /// chassis condition original or modified (remarcado)
        /// </summary>
        /// <value>chassis condition original or modified (remarcado)</value>
        [DataMember(Name="vin", EmitDefaultValue=false)]
        public VinEnum? Vin { get; set; }
        /// <summary>
        /// - '1' # Finished(Done) - '2' # Not finished - '3' # Semi-finished 
        /// </summary>
        /// <value>- '1' # Finished(Done) - '2' # Not finished - '3' # Semi-finished </value>
        [DataMember(Name="vehicleManufactoryStatus", EmitDefaultValue=false)]
        public VehicleManufactoryStatusEnum? VehicleManufactoryStatus { get; set; }
        /// <summary>
        /// Lien/restriction type - '0' # No one; - '1' # Alienação Fiduciária; - '2' # Arrendamento Mercantil; - '3' # Reserva de Domínio; - '4' # Penhor de Veículos; - '9' # Other. 
        /// </summary>
        /// <value>Lien/restriction type - '0' # No one; - '1' # Alienação Fiduciária; - '2' # Arrendamento Mercantil; - '3' # Reserva de Domínio; - '4' # Penhor de Veículos; - '9' # Other. </value>
        [DataMember(Name="restrictionType", EmitDefaultValue=false)]
        public RestrictionTypeEnum? RestrictionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Vehicle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle" /> class.
        /// </summary>
        /// <param name="TpOp">- 1 # Sales by car dealership - 2 # Direct billing - 3 # Direct sales - 0 # Other  (required).</param>
        /// <param name="ChassisNumber">ChassisNumber (required).</param>
        /// <param name="ColorCode">color code used by factory (required).</param>
        /// <param name="ColorName">color name (required).</param>
        /// <param name="CvPower">Power using CV unid (required).</param>
        /// <param name="CylinderVolumCC">engine size in cubic centimeters (required).</param>
        /// <param name="NetWeight">net weight (required).</param>
        /// <param name="GrossWeight">gross weight (required).</param>
        /// <param name="SerialNumber">serie (required).</param>
        /// <param name="FuelType">- &#39;01&#39; # Alcohol - &#39;02&#39; # Gas - &#39;03&#39; # Diesel - &#39;16&#39; # Alcohol/Gas - &#39;17&#39; # Gas/Alcohol/GNV - &#39;18&#39; # Gas/Electric  (required).</param>
        /// <param name="EngineNumber">engine number (required).</param>
        /// <param name="Cmt">traction capacity, tonne (required).</param>
        /// <param name="LengthBetweenAxis">length between axis (required).</param>
        /// <param name="ModelYear">model year (required).</param>
        /// <param name="ManufactoryYear">year of factory (required).</param>
        /// <param name="PaintType">paynt type (required).</param>
        /// <param name="VehicleRENAVAMType">VehicleRENAVAMType (required).</param>
        /// <param name="SpecieRENAVAMType">SpecieRENAVAMType (required).</param>
        /// <param name="ModelRENAVAMCode">ModelRENAVAMCode (required).</param>
        /// <param name="ColorDENATRANCode">- &#39;01&#39; # YELLOW - &#39;02&#39; # BLUE - &#39;03&#39; # BEIGE - &#39;04&#39; # WHITE - &#39;05&#39; # GRAY - &#39;06&#39; # GOLDEN - &#39;07&#39; # GRENA - &#39;08&#39; # ORANGE - &#39;09&#39; # BROWN - &#39;10&#39; # SILVER - &#39;11&#39; # BLACK - &#39;12&#39; # PINK - &#39;13&#39; # PURPLE - &#39;14&#39; # GREEN - &#39;15&#39; # RED - &#39;16&#39; # FANTASY  (required).</param>
        /// <param name="Vin">chassis condition original or modified (remarcado) (required).</param>
        /// <param name="VehicleManufactoryStatus">- &#39;1&#39; # Finished(Done) - &#39;2&#39; # Not finished - &#39;3&#39; # Semi-finished  (required).</param>
        /// <param name="MaxOccupantsQuantity">max number of sit occupants (required).</param>
        /// <param name="RestrictionType">Lien/restriction type - &#39;0&#39; # No one; - &#39;1&#39; # Alienação Fiduciária; - &#39;2&#39; # Arrendamento Mercantil; - &#39;3&#39; # Reserva de Domínio; - &#39;4&#39; # Penhor de Veículos; - &#39;9&#39; # Other.  (required).</param>
        public Vehicle(int? TpOp = default(int?), string ChassisNumber = default(string), string ColorCode = default(string), string ColorName = default(string), string CvPower = default(string), string CylinderVolumCC = default(string), string NetWeight = default(string), string GrossWeight = default(string), string SerialNumber = default(string), FuelTypeEnum? FuelType = default(FuelTypeEnum?), string EngineNumber = default(string), string Cmt = default(string), string LengthBetweenAxis = default(string), string ModelYear = default(string), string ManufactoryYear = default(string), string PaintType = default(string), string VehicleRENAVAMType = default(string), string SpecieRENAVAMType = default(string), string ModelRENAVAMCode = default(string), ColorDENATRANCodeEnum? ColorDENATRANCode = default(ColorDENATRANCodeEnum?), VinEnum? Vin = default(VinEnum?), VehicleManufactoryStatusEnum? VehicleManufactoryStatus = default(VehicleManufactoryStatusEnum?), string MaxOccupantsQuantity = default(string), RestrictionTypeEnum? RestrictionType = default(RestrictionTypeEnum?))
        {
            // to ensure "TpOp" is required (not null)
            if (TpOp == null)
            {
                throw new InvalidDataException("TpOp is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.TpOp = TpOp;
            }
            // to ensure "ChassisNumber" is required (not null)
            if (ChassisNumber == null)
            {
                throw new InvalidDataException("ChassisNumber is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.ChassisNumber = ChassisNumber;
            }
            // to ensure "ColorCode" is required (not null)
            if (ColorCode == null)
            {
                throw new InvalidDataException("ColorCode is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.ColorCode = ColorCode;
            }
            // to ensure "ColorName" is required (not null)
            if (ColorName == null)
            {
                throw new InvalidDataException("ColorName is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.ColorName = ColorName;
            }
            // to ensure "CvPower" is required (not null)
            if (CvPower == null)
            {
                throw new InvalidDataException("CvPower is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.CvPower = CvPower;
            }
            // to ensure "CylinderVolumCC" is required (not null)
            if (CylinderVolumCC == null)
            {
                throw new InvalidDataException("CylinderVolumCC is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.CylinderVolumCC = CylinderVolumCC;
            }
            // to ensure "NetWeight" is required (not null)
            if (NetWeight == null)
            {
                throw new InvalidDataException("NetWeight is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.NetWeight = NetWeight;
            }
            // to ensure "GrossWeight" is required (not null)
            if (GrossWeight == null)
            {
                throw new InvalidDataException("GrossWeight is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.GrossWeight = GrossWeight;
            }
            // to ensure "SerialNumber" is required (not null)
            if (SerialNumber == null)
            {
                throw new InvalidDataException("SerialNumber is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.SerialNumber = SerialNumber;
            }
            // to ensure "FuelType" is required (not null)
            if (FuelType == null)
            {
                throw new InvalidDataException("FuelType is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.FuelType = FuelType;
            }
            // to ensure "EngineNumber" is required (not null)
            if (EngineNumber == null)
            {
                throw new InvalidDataException("EngineNumber is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.EngineNumber = EngineNumber;
            }
            // to ensure "Cmt" is required (not null)
            if (Cmt == null)
            {
                throw new InvalidDataException("Cmt is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.Cmt = Cmt;
            }
            // to ensure "LengthBetweenAxis" is required (not null)
            if (LengthBetweenAxis == null)
            {
                throw new InvalidDataException("LengthBetweenAxis is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.LengthBetweenAxis = LengthBetweenAxis;
            }
            // to ensure "ModelYear" is required (not null)
            if (ModelYear == null)
            {
                throw new InvalidDataException("ModelYear is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.ModelYear = ModelYear;
            }
            // to ensure "ManufactoryYear" is required (not null)
            if (ManufactoryYear == null)
            {
                throw new InvalidDataException("ManufactoryYear is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.ManufactoryYear = ManufactoryYear;
            }
            // to ensure "PaintType" is required (not null)
            if (PaintType == null)
            {
                throw new InvalidDataException("PaintType is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.PaintType = PaintType;
            }
            // to ensure "VehicleRENAVAMType" is required (not null)
            if (VehicleRENAVAMType == null)
            {
                throw new InvalidDataException("VehicleRENAVAMType is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.VehicleRENAVAMType = VehicleRENAVAMType;
            }
            // to ensure "SpecieRENAVAMType" is required (not null)
            if (SpecieRENAVAMType == null)
            {
                throw new InvalidDataException("SpecieRENAVAMType is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.SpecieRENAVAMType = SpecieRENAVAMType;
            }
            // to ensure "ModelRENAVAMCode" is required (not null)
            if (ModelRENAVAMCode == null)
            {
                throw new InvalidDataException("ModelRENAVAMCode is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.ModelRENAVAMCode = ModelRENAVAMCode;
            }
            // to ensure "ColorDENATRANCode" is required (not null)
            if (ColorDENATRANCode == null)
            {
                throw new InvalidDataException("ColorDENATRANCode is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.ColorDENATRANCode = ColorDENATRANCode;
            }
            // to ensure "Vin" is required (not null)
            if (Vin == null)
            {
                throw new InvalidDataException("Vin is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.Vin = Vin;
            }
            // to ensure "VehicleManufactoryStatus" is required (not null)
            if (VehicleManufactoryStatus == null)
            {
                throw new InvalidDataException("VehicleManufactoryStatus is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.VehicleManufactoryStatus = VehicleManufactoryStatus;
            }
            // to ensure "MaxOccupantsQuantity" is required (not null)
            if (MaxOccupantsQuantity == null)
            {
                throw new InvalidDataException("MaxOccupantsQuantity is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.MaxOccupantsQuantity = MaxOccupantsQuantity;
            }
            // to ensure "RestrictionType" is required (not null)
            if (RestrictionType == null)
            {
                throw new InvalidDataException("RestrictionType is a required property for Vehicle and cannot be null");
            }
            else
            {
                this.RestrictionType = RestrictionType;
            }
        }
        
        /// <summary>
        /// - 1 # Sales by car dealership - 2 # Direct billing - 3 # Direct sales - 0 # Other 
        /// </summary>
        /// <value>- 1 # Sales by car dealership - 2 # Direct billing - 3 # Direct sales - 0 # Other </value>
        [DataMember(Name="tpOp", EmitDefaultValue=false)]
        public int? TpOp { get; set; }
        /// <summary>
        /// Gets or Sets ChassisNumber
        /// </summary>
        [DataMember(Name="chassisNumber", EmitDefaultValue=false)]
        public string ChassisNumber { get; set; }
        /// <summary>
        /// color code used by factory
        /// </summary>
        /// <value>color code used by factory</value>
        [DataMember(Name="colorCode", EmitDefaultValue=false)]
        public string ColorCode { get; set; }
        /// <summary>
        /// color name
        /// </summary>
        /// <value>color name</value>
        [DataMember(Name="colorName", EmitDefaultValue=false)]
        public string ColorName { get; set; }
        /// <summary>
        /// Power using CV unid
        /// </summary>
        /// <value>Power using CV unid</value>
        [DataMember(Name="cvPower", EmitDefaultValue=false)]
        public string CvPower { get; set; }
        /// <summary>
        /// engine size in cubic centimeters
        /// </summary>
        /// <value>engine size in cubic centimeters</value>
        [DataMember(Name="cylinderVolumCC", EmitDefaultValue=false)]
        public string CylinderVolumCC { get; set; }
        /// <summary>
        /// net weight
        /// </summary>
        /// <value>net weight</value>
        [DataMember(Name="netWeight", EmitDefaultValue=false)]
        public string NetWeight { get; set; }
        /// <summary>
        /// gross weight
        /// </summary>
        /// <value>gross weight</value>
        [DataMember(Name="grossWeight", EmitDefaultValue=false)]
        public string GrossWeight { get; set; }
        /// <summary>
        /// serie
        /// </summary>
        /// <value>serie</value>
        [DataMember(Name="serialNumber", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }
        /// <summary>
        /// engine number
        /// </summary>
        /// <value>engine number</value>
        [DataMember(Name="engineNumber", EmitDefaultValue=false)]
        public string EngineNumber { get; set; }
        /// <summary>
        /// traction capacity, tonne
        /// </summary>
        /// <value>traction capacity, tonne</value>
        [DataMember(Name="cmt", EmitDefaultValue=false)]
        public string Cmt { get; set; }
        /// <summary>
        /// length between axis
        /// </summary>
        /// <value>length between axis</value>
        [DataMember(Name="lengthBetweenAxis", EmitDefaultValue=false)]
        public string LengthBetweenAxis { get; set; }
        /// <summary>
        /// model year
        /// </summary>
        /// <value>model year</value>
        [DataMember(Name="modelYear", EmitDefaultValue=false)]
        public string ModelYear { get; set; }
        /// <summary>
        /// year of factory
        /// </summary>
        /// <value>year of factory</value>
        [DataMember(Name="manufactoryYear", EmitDefaultValue=false)]
        public string ManufactoryYear { get; set; }
        /// <summary>
        /// paynt type
        /// </summary>
        /// <value>paynt type</value>
        [DataMember(Name="paintType", EmitDefaultValue=false)]
        public string PaintType { get; set; }
        /// <summary>
        /// Gets or Sets VehicleRENAVAMType
        /// </summary>
        [DataMember(Name="vehicleRENAVAMType", EmitDefaultValue=false)]
        public string VehicleRENAVAMType { get; set; }
        /// <summary>
        /// Gets or Sets SpecieRENAVAMType
        /// </summary>
        [DataMember(Name="specieRENAVAMType", EmitDefaultValue=false)]
        public string SpecieRENAVAMType { get; set; }
        /// <summary>
        /// Gets or Sets ModelRENAVAMCode
        /// </summary>
        [DataMember(Name="modelRENAVAMCode", EmitDefaultValue=false)]
        public string ModelRENAVAMCode { get; set; }
        /// <summary>
        /// max number of sit occupants
        /// </summary>
        /// <value>max number of sit occupants</value>
        [DataMember(Name="maxOccupantsQuantity", EmitDefaultValue=false)]
        public string MaxOccupantsQuantity { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Vehicle {\n");
            sb.Append("  TpOp: ").Append(TpOp).Append("\n");
            sb.Append("  ChassisNumber: ").Append(ChassisNumber).Append("\n");
            sb.Append("  ColorCode: ").Append(ColorCode).Append("\n");
            sb.Append("  ColorName: ").Append(ColorName).Append("\n");
            sb.Append("  CvPower: ").Append(CvPower).Append("\n");
            sb.Append("  CylinderVolumCC: ").Append(CylinderVolumCC).Append("\n");
            sb.Append("  NetWeight: ").Append(NetWeight).Append("\n");
            sb.Append("  GrossWeight: ").Append(GrossWeight).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  FuelType: ").Append(FuelType).Append("\n");
            sb.Append("  EngineNumber: ").Append(EngineNumber).Append("\n");
            sb.Append("  Cmt: ").Append(Cmt).Append("\n");
            sb.Append("  LengthBetweenAxis: ").Append(LengthBetweenAxis).Append("\n");
            sb.Append("  ModelYear: ").Append(ModelYear).Append("\n");
            sb.Append("  ManufactoryYear: ").Append(ManufactoryYear).Append("\n");
            sb.Append("  PaintType: ").Append(PaintType).Append("\n");
            sb.Append("  VehicleRENAVAMType: ").Append(VehicleRENAVAMType).Append("\n");
            sb.Append("  SpecieRENAVAMType: ").Append(SpecieRENAVAMType).Append("\n");
            sb.Append("  ModelRENAVAMCode: ").Append(ModelRENAVAMCode).Append("\n");
            sb.Append("  ColorDENATRANCode: ").Append(ColorDENATRANCode).Append("\n");
            sb.Append("  Vin: ").Append(Vin).Append("\n");
            sb.Append("  VehicleManufactoryStatus: ").Append(VehicleManufactoryStatus).Append("\n");
            sb.Append("  MaxOccupantsQuantity: ").Append(MaxOccupantsQuantity).Append("\n");
            sb.Append("  RestrictionType: ").Append(RestrictionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Vehicle);
        }

        /// <summary>
        /// Returns true if Vehicle instances are equal
        /// </summary>
        /// <param name="other">Instance of Vehicle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vehicle other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TpOp == other.TpOp ||
                    this.TpOp != null &&
                    this.TpOp.Equals(other.TpOp)
                ) && 
                (
                    this.ChassisNumber == other.ChassisNumber ||
                    this.ChassisNumber != null &&
                    this.ChassisNumber.Equals(other.ChassisNumber)
                ) && 
                (
                    this.ColorCode == other.ColorCode ||
                    this.ColorCode != null &&
                    this.ColorCode.Equals(other.ColorCode)
                ) && 
                (
                    this.ColorName == other.ColorName ||
                    this.ColorName != null &&
                    this.ColorName.Equals(other.ColorName)
                ) && 
                (
                    this.CvPower == other.CvPower ||
                    this.CvPower != null &&
                    this.CvPower.Equals(other.CvPower)
                ) && 
                (
                    this.CylinderVolumCC == other.CylinderVolumCC ||
                    this.CylinderVolumCC != null &&
                    this.CylinderVolumCC.Equals(other.CylinderVolumCC)
                ) && 
                (
                    this.NetWeight == other.NetWeight ||
                    this.NetWeight != null &&
                    this.NetWeight.Equals(other.NetWeight)
                ) && 
                (
                    this.GrossWeight == other.GrossWeight ||
                    this.GrossWeight != null &&
                    this.GrossWeight.Equals(other.GrossWeight)
                ) && 
                (
                    this.SerialNumber == other.SerialNumber ||
                    this.SerialNumber != null &&
                    this.SerialNumber.Equals(other.SerialNumber)
                ) && 
                (
                    this.FuelType == other.FuelType ||
                    this.FuelType != null &&
                    this.FuelType.Equals(other.FuelType)
                ) && 
                (
                    this.EngineNumber == other.EngineNumber ||
                    this.EngineNumber != null &&
                    this.EngineNumber.Equals(other.EngineNumber)
                ) && 
                (
                    this.Cmt == other.Cmt ||
                    this.Cmt != null &&
                    this.Cmt.Equals(other.Cmt)
                ) && 
                (
                    this.LengthBetweenAxis == other.LengthBetweenAxis ||
                    this.LengthBetweenAxis != null &&
                    this.LengthBetweenAxis.Equals(other.LengthBetweenAxis)
                ) && 
                (
                    this.ModelYear == other.ModelYear ||
                    this.ModelYear != null &&
                    this.ModelYear.Equals(other.ModelYear)
                ) && 
                (
                    this.ManufactoryYear == other.ManufactoryYear ||
                    this.ManufactoryYear != null &&
                    this.ManufactoryYear.Equals(other.ManufactoryYear)
                ) && 
                (
                    this.PaintType == other.PaintType ||
                    this.PaintType != null &&
                    this.PaintType.Equals(other.PaintType)
                ) && 
                (
                    this.VehicleRENAVAMType == other.VehicleRENAVAMType ||
                    this.VehicleRENAVAMType != null &&
                    this.VehicleRENAVAMType.Equals(other.VehicleRENAVAMType)
                ) && 
                (
                    this.SpecieRENAVAMType == other.SpecieRENAVAMType ||
                    this.SpecieRENAVAMType != null &&
                    this.SpecieRENAVAMType.Equals(other.SpecieRENAVAMType)
                ) && 
                (
                    this.ModelRENAVAMCode == other.ModelRENAVAMCode ||
                    this.ModelRENAVAMCode != null &&
                    this.ModelRENAVAMCode.Equals(other.ModelRENAVAMCode)
                ) && 
                (
                    this.ColorDENATRANCode == other.ColorDENATRANCode ||
                    this.ColorDENATRANCode != null &&
                    this.ColorDENATRANCode.Equals(other.ColorDENATRANCode)
                ) && 
                (
                    this.Vin == other.Vin ||
                    this.Vin != null &&
                    this.Vin.Equals(other.Vin)
                ) && 
                (
                    this.VehicleManufactoryStatus == other.VehicleManufactoryStatus ||
                    this.VehicleManufactoryStatus != null &&
                    this.VehicleManufactoryStatus.Equals(other.VehicleManufactoryStatus)
                ) && 
                (
                    this.MaxOccupantsQuantity == other.MaxOccupantsQuantity ||
                    this.MaxOccupantsQuantity != null &&
                    this.MaxOccupantsQuantity.Equals(other.MaxOccupantsQuantity)
                ) && 
                (
                    this.RestrictionType == other.RestrictionType ||
                    this.RestrictionType != null &&
                    this.RestrictionType.Equals(other.RestrictionType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TpOp != null)
                    hash = hash * 59 + this.TpOp.GetHashCode();
                if (this.ChassisNumber != null)
                    hash = hash * 59 + this.ChassisNumber.GetHashCode();
                if (this.ColorCode != null)
                    hash = hash * 59 + this.ColorCode.GetHashCode();
                if (this.ColorName != null)
                    hash = hash * 59 + this.ColorName.GetHashCode();
                if (this.CvPower != null)
                    hash = hash * 59 + this.CvPower.GetHashCode();
                if (this.CylinderVolumCC != null)
                    hash = hash * 59 + this.CylinderVolumCC.GetHashCode();
                if (this.NetWeight != null)
                    hash = hash * 59 + this.NetWeight.GetHashCode();
                if (this.GrossWeight != null)
                    hash = hash * 59 + this.GrossWeight.GetHashCode();
                if (this.SerialNumber != null)
                    hash = hash * 59 + this.SerialNumber.GetHashCode();
                if (this.FuelType != null)
                    hash = hash * 59 + this.FuelType.GetHashCode();
                if (this.EngineNumber != null)
                    hash = hash * 59 + this.EngineNumber.GetHashCode();
                if (this.Cmt != null)
                    hash = hash * 59 + this.Cmt.GetHashCode();
                if (this.LengthBetweenAxis != null)
                    hash = hash * 59 + this.LengthBetweenAxis.GetHashCode();
                if (this.ModelYear != null)
                    hash = hash * 59 + this.ModelYear.GetHashCode();
                if (this.ManufactoryYear != null)
                    hash = hash * 59 + this.ManufactoryYear.GetHashCode();
                if (this.PaintType != null)
                    hash = hash * 59 + this.PaintType.GetHashCode();
                if (this.VehicleRENAVAMType != null)
                    hash = hash * 59 + this.VehicleRENAVAMType.GetHashCode();
                if (this.SpecieRENAVAMType != null)
                    hash = hash * 59 + this.SpecieRENAVAMType.GetHashCode();
                if (this.ModelRENAVAMCode != null)
                    hash = hash * 59 + this.ModelRENAVAMCode.GetHashCode();
                if (this.ColorDENATRANCode != null)
                    hash = hash * 59 + this.ColorDENATRANCode.GetHashCode();
                if (this.Vin != null)
                    hash = hash * 59 + this.Vin.GetHashCode();
                if (this.VehicleManufactoryStatus != null)
                    hash = hash * 59 + this.VehicleManufactoryStatus.GetHashCode();
                if (this.MaxOccupantsQuantity != null)
                    hash = hash * 59 + this.MaxOccupantsQuantity.GetHashCode();
                if (this.RestrictionType != null)
                    hash = hash * 59 + this.RestrictionType.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // ChassisNumber (string) maxLength
            if(this.ChassisNumber != null && this.ChassisNumber.Length > 17)
            {
                yield return new ValidationResult("Invalid value for ChassisNumber, length must be less than 17.", new [] { "ChassisNumber" });
            }

            // ChassisNumber (string) pattern
            Regex regexChassisNumber = new Regex(@"[A-Z0-9]+", RegexOptions.CultureInvariant);
            if (false == regexChassisNumber.Match(this.ChassisNumber).Success)
            {
                yield return new ValidationResult("Invalid value for ChassisNumber, must match a pattern of /[A-Z0-9]+/.", new [] { "ChassisNumber" });
            }

            // ColorCode (string) maxLength
            if(this.ColorCode != null && this.ColorCode.Length > 17)
            {
                yield return new ValidationResult("Invalid value for ColorCode, length must be less than 17.", new [] { "ColorCode" });
            }

            // ColorName (string) maxLength
            if(this.ColorName != null && this.ColorName.Length > 40)
            {
                yield return new ValidationResult("Invalid value for ColorName, length must be less than 40.", new [] { "ColorName" });
            }

            // CvPower (string) maxLength
            if(this.CvPower != null && this.CvPower.Length > 4)
            {
                yield return new ValidationResult("Invalid value for CvPower, length must be less than 4.", new [] { "CvPower" });
            }

            // CylinderVolumCC (string) maxLength
            if(this.CylinderVolumCC != null && this.CylinderVolumCC.Length > 4)
            {
                yield return new ValidationResult("Invalid value for CylinderVolumCC, length must be less than 4.", new [] { "CylinderVolumCC" });
            }

            // NetWeight (string) maxLength
            if(this.NetWeight != null && this.NetWeight.Length > 9)
            {
                yield return new ValidationResult("Invalid value for NetWeight, length must be less than 9.", new [] { "NetWeight" });
            }

            // GrossWeight (string) maxLength
            if(this.GrossWeight != null && this.GrossWeight.Length > 9)
            {
                yield return new ValidationResult("Invalid value for GrossWeight, length must be less than 9.", new [] { "GrossWeight" });
            }

            // SerialNumber (string) maxLength
            if(this.SerialNumber != null && this.SerialNumber.Length > 9)
            {
                yield return new ValidationResult("Invalid value for SerialNumber, length must be less than 9.", new [] { "SerialNumber" });
            }

            // EngineNumber (string) maxLength
            if(this.EngineNumber != null && this.EngineNumber.Length > 21)
            {
                yield return new ValidationResult("Invalid value for EngineNumber, length must be less than 21.", new [] { "EngineNumber" });
            }

            // Cmt (string) maxLength
            if(this.Cmt != null && this.Cmt.Length > 9)
            {
                yield return new ValidationResult("Invalid value for Cmt, length must be less than 9.", new [] { "Cmt" });
            }

            // LengthBetweenAxis (string) maxLength
            if(this.LengthBetweenAxis != null && this.LengthBetweenAxis.Length > 4)
            {
                yield return new ValidationResult("Invalid value for LengthBetweenAxis, length must be less than 4.", new [] { "LengthBetweenAxis" });
            }

            // ModelYear (string) pattern
            Regex regexModelYear = new Regex(@"[0-9]{4}", RegexOptions.CultureInvariant);
            if (false == regexModelYear.Match(this.ModelYear).Success)
            {
                yield return new ValidationResult("Invalid value for ModelYear, must match a pattern of /[0-9]{4}/.", new [] { "ModelYear" });
            }

            // ManufactoryYear (string) pattern
            Regex regexManufactoryYear = new Regex(@"[0-9]{4}", RegexOptions.CultureInvariant);
            if (false == regexManufactoryYear.Match(this.ManufactoryYear).Success)
            {
                yield return new ValidationResult("Invalid value for ManufactoryYear, must match a pattern of /[0-9]{4}/.", new [] { "ManufactoryYear" });
            }

            // PaintType (string) maxLength
            if(this.PaintType != null && this.PaintType.Length > 1)
            {
                yield return new ValidationResult("Invalid value for PaintType, length must be less than 1.", new [] { "PaintType" });
            }

            // VehicleRENAVAMType (string) pattern
            Regex regexVehicleRENAVAMType = new Regex(@"[0-9]{1,2}", RegexOptions.CultureInvariant);
            if (false == regexVehicleRENAVAMType.Match(this.VehicleRENAVAMType).Success)
            {
                yield return new ValidationResult("Invalid value for VehicleRENAVAMType, must match a pattern of /[0-9]{1,2}/.", new [] { "VehicleRENAVAMType" });
            }

            // SpecieRENAVAMType (string) pattern
            Regex regexSpecieRENAVAMType = new Regex(@"[0-9]{1}", RegexOptions.CultureInvariant);
            if (false == regexSpecieRENAVAMType.Match(this.SpecieRENAVAMType).Success)
            {
                yield return new ValidationResult("Invalid value for SpecieRENAVAMType, must match a pattern of /[0-9]{1}/.", new [] { "SpecieRENAVAMType" });
            }

            // ModelRENAVAMCode (string) pattern
            Regex regexModelRENAVAMCode = new Regex(@"[0-9]{1,6}", RegexOptions.CultureInvariant);
            if (false == regexModelRENAVAMCode.Match(this.ModelRENAVAMCode).Success)
            {
                yield return new ValidationResult("Invalid value for ModelRENAVAMCode, must match a pattern of /[0-9]{1,6}/.", new [] { "ModelRENAVAMCode" });
            }

            // ColorDENATRANCode (string) pattern
            Regex regexColorDENATRANCode = new Regex(@"[0-9]{1,2}", RegexOptions.CultureInvariant);
            if (false == regexColorDENATRANCode.Match(this.ColorDENATRANCode).Success)
            {
                yield return new ValidationResult("Invalid value for ColorDENATRANCode, must match a pattern of /[0-9]{1,2}/.", new [] { "ColorDENATRANCode" });
            }

            // MaxOccupantsQuantity (string) maxLength
            if(this.MaxOccupantsQuantity != null && this.MaxOccupantsQuantity.Length > 3)
            {
                yield return new ValidationResult("Invalid value for MaxOccupantsQuantity, length must be less than 3.", new [] { "MaxOccupantsQuantity" });
            }

            yield break;
        }
    }

}
