/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PayRecLinesIn
    /// </summary>
    [DataContract]
    public partial class PayRecLinesIn :  IEquatable<PayRecLinesIn>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets LineType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LineTypeEnum
        {
            
            /// <summary>
            /// Enum Installment for "installment"
            /// </summary>
            [EnumMember(Value = "installment")]
            Installment
        }

        /// <summary>
        /// Gets or Sets LineType
        /// </summary>
        [DataMember(Name="lineType", EmitDefaultValue=false)]
        public LineTypeEnum? LineType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayRecLinesIn" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PayRecLinesIn() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayRecLinesIn" /> class.
        /// </summary>
        /// <param name="LineCode">Installment number in this document.</param>
        /// <param name="LineType">LineType.</param>
        /// <param name="ItemCode">Bill transaction code This string is a code maintained by the client application to uniquely identify a document in the client&#39;s systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc. (required).</param>
        /// <param name="ItemDescription">Free description about this payment.</param>
        /// <param name="ItemDocNumber">Installment number, when paid AS IS.</param>
        /// <param name="LineUntaxedPenality">Penalty, usually because paid after due date.</param>
        /// <param name="LineUntaxedDiscount">unconditional discounts.</param>
        public PayRecLinesIn(int? LineCode = default(int?), LineTypeEnum? LineType = default(LineTypeEnum?), string ItemCode = default(string), string ItemDescription = default(string), string ItemDocNumber = default(string), double? LineUntaxedPenality = default(double?), double? LineUntaxedDiscount = default(double?))
        {
            // to ensure "ItemCode" is required (not null)
            if (ItemCode == null)
            {
                throw new InvalidDataException("ItemCode is a required property for PayRecLinesIn and cannot be null");
            }
            else
            {
                this.ItemCode = ItemCode;
            }
            this.LineCode = LineCode;
            this.LineType = LineType;
            this.ItemDescription = ItemDescription;
            this.ItemDocNumber = ItemDocNumber;
            this.LineUntaxedPenality = LineUntaxedPenality;
            this.LineUntaxedDiscount = LineUntaxedDiscount;
        }
        
        /// <summary>
        /// Installment number in this document
        /// </summary>
        /// <value>Installment number in this document</value>
        [DataMember(Name="lineCode", EmitDefaultValue=false)]
        public int? LineCode { get; set; }
        /// <summary>
        /// Bill transaction code This string is a code maintained by the client application to uniquely identify a document in the client&#39;s systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc.
        /// </summary>
        /// <value>Bill transaction code This string is a code maintained by the client application to uniquely identify a document in the client&#39;s systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc.</value>
        [DataMember(Name="itemCode", EmitDefaultValue=false)]
        public string ItemCode { get; set; }
        /// <summary>
        /// Free description about this payment
        /// </summary>
        /// <value>Free description about this payment</value>
        [DataMember(Name="itemDescription", EmitDefaultValue=false)]
        public string ItemDescription { get; set; }
        /// <summary>
        /// Installment number, when paid AS IS
        /// </summary>
        /// <value>Installment number, when paid AS IS</value>
        [DataMember(Name="itemDocNumber", EmitDefaultValue=false)]
        public string ItemDocNumber { get; set; }
        /// <summary>
        /// Penalty, usually because paid after due date
        /// </summary>
        /// <value>Penalty, usually because paid after due date</value>
        [DataMember(Name="lineUntaxedPenality", EmitDefaultValue=false)]
        public double? LineUntaxedPenality { get; set; }
        /// <summary>
        /// unconditional discounts
        /// </summary>
        /// <value>unconditional discounts</value>
        [DataMember(Name="lineUntaxedDiscount", EmitDefaultValue=false)]
        public double? LineUntaxedDiscount { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayRecLinesIn {\n");
            sb.Append("  LineCode: ").Append(LineCode).Append("\n");
            sb.Append("  LineType: ").Append(LineType).Append("\n");
            sb.Append("  ItemCode: ").Append(ItemCode).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  ItemDocNumber: ").Append(ItemDocNumber).Append("\n");
            sb.Append("  LineUntaxedPenality: ").Append(LineUntaxedPenality).Append("\n");
            sb.Append("  LineUntaxedDiscount: ").Append(LineUntaxedDiscount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PayRecLinesIn);
        }

        /// <summary>
        /// Returns true if PayRecLinesIn instances are equal
        /// </summary>
        /// <param name="other">Instance of PayRecLinesIn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayRecLinesIn other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.LineCode == other.LineCode ||
                    this.LineCode != null &&
                    this.LineCode.Equals(other.LineCode)
                ) && 
                (
                    this.LineType == other.LineType ||
                    this.LineType != null &&
                    this.LineType.Equals(other.LineType)
                ) && 
                (
                    this.ItemCode == other.ItemCode ||
                    this.ItemCode != null &&
                    this.ItemCode.Equals(other.ItemCode)
                ) && 
                (
                    this.ItemDescription == other.ItemDescription ||
                    this.ItemDescription != null &&
                    this.ItemDescription.Equals(other.ItemDescription)
                ) && 
                (
                    this.ItemDocNumber == other.ItemDocNumber ||
                    this.ItemDocNumber != null &&
                    this.ItemDocNumber.Equals(other.ItemDocNumber)
                ) && 
                (
                    this.LineUntaxedPenality == other.LineUntaxedPenality ||
                    this.LineUntaxedPenality != null &&
                    this.LineUntaxedPenality.Equals(other.LineUntaxedPenality)
                ) && 
                (
                    this.LineUntaxedDiscount == other.LineUntaxedDiscount ||
                    this.LineUntaxedDiscount != null &&
                    this.LineUntaxedDiscount.Equals(other.LineUntaxedDiscount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.LineCode != null)
                    hash = hash * 59 + this.LineCode.GetHashCode();
                if (this.LineType != null)
                    hash = hash * 59 + this.LineType.GetHashCode();
                if (this.ItemCode != null)
                    hash = hash * 59 + this.ItemCode.GetHashCode();
                if (this.ItemDescription != null)
                    hash = hash * 59 + this.ItemDescription.GetHashCode();
                if (this.ItemDocNumber != null)
                    hash = hash * 59 + this.ItemDocNumber.GetHashCode();
                if (this.LineUntaxedPenality != null)
                    hash = hash * 59 + this.LineUntaxedPenality.GetHashCode();
                if (this.LineUntaxedDiscount != null)
                    hash = hash * 59 + this.LineUntaxedDiscount.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
