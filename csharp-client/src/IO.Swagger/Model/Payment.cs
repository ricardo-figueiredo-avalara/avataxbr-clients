/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Payment
    /// </summary>
    [DataContract]
    public partial class Payment :  IEquatable<Payment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Payment" /> class.
        /// </summary>
        /// <param name="InstallmentsTerms">Installment terms - 0 # cash - 1 # on terms - 2 # other .</param>
        /// <param name="Bill">Bill.</param>
        /// <param name="Installment">Installment.</param>
        /// <param name="PaymentMode">PaymentMode.</param>
        public Payment(int? InstallmentsTerms = default(int?), PaymentBill Bill = default(PaymentBill), List<PaymentInstallment> Installment = default(List<PaymentInstallment>), List<PaymentPaymentMode> PaymentMode = default(List<PaymentPaymentMode>))
        {
            this.InstallmentsTerms = InstallmentsTerms;
            this.Bill = Bill;
            this.Installment = Installment;
            this.PaymentMode = PaymentMode;
        }
        
        /// <summary>
        /// Installment terms - 0 # cash - 1 # on terms - 2 # other 
        /// </summary>
        /// <value>Installment terms - 0 # cash - 1 # on terms - 2 # other </value>
        [DataMember(Name="installmentsTerms", EmitDefaultValue=false)]
        public int? InstallmentsTerms { get; set; }
        /// <summary>
        /// Gets or Sets Bill
        /// </summary>
        [DataMember(Name="bill", EmitDefaultValue=false)]
        public PaymentBill Bill { get; set; }
        /// <summary>
        /// Gets or Sets Installment
        /// </summary>
        [DataMember(Name="installment", EmitDefaultValue=false)]
        public List<PaymentInstallment> Installment { get; set; }
        /// <summary>
        /// Gets or Sets PaymentMode
        /// </summary>
        [DataMember(Name="paymentMode", EmitDefaultValue=false)]
        public List<PaymentPaymentMode> PaymentMode { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  InstallmentsTerms: ").Append(InstallmentsTerms).Append("\n");
            sb.Append("  Bill: ").Append(Bill).Append("\n");
            sb.Append("  Installment: ").Append(Installment).Append("\n");
            sb.Append("  PaymentMode: ").Append(PaymentMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Payment);
        }

        /// <summary>
        /// Returns true if Payment instances are equal
        /// </summary>
        /// <param name="other">Instance of Payment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.InstallmentsTerms == other.InstallmentsTerms ||
                    this.InstallmentsTerms != null &&
                    this.InstallmentsTerms.Equals(other.InstallmentsTerms)
                ) && 
                (
                    this.Bill == other.Bill ||
                    this.Bill != null &&
                    this.Bill.Equals(other.Bill)
                ) && 
                (
                    this.Installment == other.Installment ||
                    this.Installment != null &&
                    this.Installment.SequenceEqual(other.Installment)
                ) && 
                (
                    this.PaymentMode == other.PaymentMode ||
                    this.PaymentMode != null &&
                    this.PaymentMode.SequenceEqual(other.PaymentMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.InstallmentsTerms != null)
                    hash = hash * 59 + this.InstallmentsTerms.GetHashCode();
                if (this.Bill != null)
                    hash = hash * 59 + this.Bill.GetHashCode();
                if (this.Installment != null)
                    hash = hash * 59 + this.Installment.GetHashCode();
                if (this.PaymentMode != null)
                    hash = hash * 59 + this.PaymentMode.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
