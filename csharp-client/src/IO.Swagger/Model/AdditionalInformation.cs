/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AdditionalInformation
    /// </summary>
    [DataContract]
    public partial class AdditionalInformation :  IEquatable<AdditionalInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalInformation" /> class.
        /// </summary>
        /// <param name="FiscalInfo">Additional information of fiscal interest.</param>
        /// <param name="ComplementaryInfo">Additional information of user interest.</param>
        /// <param name="ProcRef">Referenced Process.</param>
        public AdditionalInformation(string FiscalInfo = default(string), string ComplementaryInfo = default(string), List<AdditionalInformationProcRef> ProcRef = default(List<AdditionalInformationProcRef>))
        {
            this.FiscalInfo = FiscalInfo;
            this.ComplementaryInfo = ComplementaryInfo;
            this.ProcRef = ProcRef;
        }
        
        /// <summary>
        /// Additional information of fiscal interest
        /// </summary>
        /// <value>Additional information of fiscal interest</value>
        [DataMember(Name="fiscalInfo", EmitDefaultValue=false)]
        public string FiscalInfo { get; set; }
        /// <summary>
        /// Additional information of user interest
        /// </summary>
        /// <value>Additional information of user interest</value>
        [DataMember(Name="complementaryInfo", EmitDefaultValue=false)]
        public string ComplementaryInfo { get; set; }
        /// <summary>
        /// Referenced Process
        /// </summary>
        /// <value>Referenced Process</value>
        [DataMember(Name="procRef", EmitDefaultValue=false)]
        public List<AdditionalInformationProcRef> ProcRef { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdditionalInformation {\n");
            sb.Append("  FiscalInfo: ").Append(FiscalInfo).Append("\n");
            sb.Append("  ComplementaryInfo: ").Append(ComplementaryInfo).Append("\n");
            sb.Append("  ProcRef: ").Append(ProcRef).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AdditionalInformation);
        }

        /// <summary>
        /// Returns true if AdditionalInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of AdditionalInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalInformation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FiscalInfo == other.FiscalInfo ||
                    this.FiscalInfo != null &&
                    this.FiscalInfo.Equals(other.FiscalInfo)
                ) && 
                (
                    this.ComplementaryInfo == other.ComplementaryInfo ||
                    this.ComplementaryInfo != null &&
                    this.ComplementaryInfo.Equals(other.ComplementaryInfo)
                ) && 
                (
                    this.ProcRef == other.ProcRef ||
                    this.ProcRef != null &&
                    this.ProcRef.SequenceEqual(other.ProcRef)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FiscalInfo != null)
                    hash = hash * 59 + this.FiscalInfo.GetHashCode();
                if (this.ComplementaryInfo != null)
                    hash = hash * 59 + this.ComplementaryInfo.GetHashCode();
                if (this.ProcRef != null)
                    hash = hash * 59 + this.ProcRef.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // FiscalInfo (string) maxLength
            if(this.FiscalInfo != null && this.FiscalInfo.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for FiscalInfo, length must be less than 2000.", new [] { "FiscalInfo" });
            }

            // FiscalInfo (string) pattern
            Regex regexFiscalInfo = new Regex(@"[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}", RegexOptions.CultureInvariant);
            if (false == regexFiscalInfo.Match(this.FiscalInfo).Success)
            {
                yield return new ValidationResult("Invalid value for FiscalInfo, must match a pattern of /[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}/.", new [] { "FiscalInfo" });
            }

            // ComplementaryInfo (string) maxLength
            if(this.ComplementaryInfo != null && this.ComplementaryInfo.Length > 5000)
            {
                yield return new ValidationResult("Invalid value for ComplementaryInfo, length must be less than 5000.", new [] { "ComplementaryInfo" });
            }

            // ComplementaryInfo (string) pattern
            Regex regexComplementaryInfo = new Regex(@"[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}", RegexOptions.CultureInvariant);
            if (false == regexComplementaryInfo.Match(this.ComplementaryInfo).Success)
            {
                yield return new ValidationResult("Invalid value for ComplementaryInfo, must match a pattern of /[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}/.", new [] { "ComplementaryInfo" });
            }

            yield break;
        }
    }

}
