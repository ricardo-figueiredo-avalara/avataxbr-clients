/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TransportVolumes
    /// </summary>
    [DataContract]
    public partial class TransportVolumes :  IEquatable<TransportVolumes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransportVolumes" /> class.
        /// </summary>
        /// <param name="QVol">Quantity of packages transported.</param>
        /// <param name="Specie">package type.</param>
        /// <param name="Brand">brand.</param>
        /// <param name="VolumeNumeration">packages numeration.</param>
        /// <param name="NetWeight">net weight using Kg.</param>
        /// <param name="GrossWeight">gross weight using Kg.</param>
        /// <param name="Seal">Seal.</param>
        public TransportVolumes(string QVol = default(string), string Specie = default(string), string Brand = default(string), string VolumeNumeration = default(string), double? NetWeight = default(double?), double? GrossWeight = default(double?), List<string> Seal = default(List<string>))
        {
            this.QVol = QVol;
            this.Specie = Specie;
            this.Brand = Brand;
            this.VolumeNumeration = VolumeNumeration;
            this.NetWeight = NetWeight;
            this.GrossWeight = GrossWeight;
            this.Seal = Seal;
        }
        
        /// <summary>
        /// Quantity of packages transported
        /// </summary>
        /// <value>Quantity of packages transported</value>
        [DataMember(Name="qVol", EmitDefaultValue=false)]
        public string QVol { get; set; }
        /// <summary>
        /// package type
        /// </summary>
        /// <value>package type</value>
        [DataMember(Name="specie", EmitDefaultValue=false)]
        public string Specie { get; set; }
        /// <summary>
        /// brand
        /// </summary>
        /// <value>brand</value>
        [DataMember(Name="brand", EmitDefaultValue=false)]
        public string Brand { get; set; }
        /// <summary>
        /// packages numeration
        /// </summary>
        /// <value>packages numeration</value>
        [DataMember(Name="volumeNumeration", EmitDefaultValue=false)]
        public string VolumeNumeration { get; set; }
        /// <summary>
        /// net weight using Kg
        /// </summary>
        /// <value>net weight using Kg</value>
        [DataMember(Name="netWeight", EmitDefaultValue=false)]
        public double? NetWeight { get; set; }
        /// <summary>
        /// gross weight using Kg
        /// </summary>
        /// <value>gross weight using Kg</value>
        [DataMember(Name="grossWeight", EmitDefaultValue=false)]
        public double? GrossWeight { get; set; }
        /// <summary>
        /// Gets or Sets Seal
        /// </summary>
        [DataMember(Name="seal", EmitDefaultValue=false)]
        public List<string> Seal { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransportVolumes {\n");
            sb.Append("  QVol: ").Append(QVol).Append("\n");
            sb.Append("  Specie: ").Append(Specie).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  VolumeNumeration: ").Append(VolumeNumeration).Append("\n");
            sb.Append("  NetWeight: ").Append(NetWeight).Append("\n");
            sb.Append("  GrossWeight: ").Append(GrossWeight).Append("\n");
            sb.Append("  Seal: ").Append(Seal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TransportVolumes);
        }

        /// <summary>
        /// Returns true if TransportVolumes instances are equal
        /// </summary>
        /// <param name="other">Instance of TransportVolumes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransportVolumes other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.QVol == other.QVol ||
                    this.QVol != null &&
                    this.QVol.Equals(other.QVol)
                ) && 
                (
                    this.Specie == other.Specie ||
                    this.Specie != null &&
                    this.Specie.Equals(other.Specie)
                ) && 
                (
                    this.Brand == other.Brand ||
                    this.Brand != null &&
                    this.Brand.Equals(other.Brand)
                ) && 
                (
                    this.VolumeNumeration == other.VolumeNumeration ||
                    this.VolumeNumeration != null &&
                    this.VolumeNumeration.Equals(other.VolumeNumeration)
                ) && 
                (
                    this.NetWeight == other.NetWeight ||
                    this.NetWeight != null &&
                    this.NetWeight.Equals(other.NetWeight)
                ) && 
                (
                    this.GrossWeight == other.GrossWeight ||
                    this.GrossWeight != null &&
                    this.GrossWeight.Equals(other.GrossWeight)
                ) && 
                (
                    this.Seal == other.Seal ||
                    this.Seal != null &&
                    this.Seal.SequenceEqual(other.Seal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.QVol != null)
                    hash = hash * 59 + this.QVol.GetHashCode();
                if (this.Specie != null)
                    hash = hash * 59 + this.Specie.GetHashCode();
                if (this.Brand != null)
                    hash = hash * 59 + this.Brand.GetHashCode();
                if (this.VolumeNumeration != null)
                    hash = hash * 59 + this.VolumeNumeration.GetHashCode();
                if (this.NetWeight != null)
                    hash = hash * 59 + this.NetWeight.GetHashCode();
                if (this.GrossWeight != null)
                    hash = hash * 59 + this.GrossWeight.GetHashCode();
                if (this.Seal != null)
                    hash = hash * 59 + this.Seal.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // QVol (string) pattern
            Regex regexQVol = new Regex(@"[0-9]{1,15}", RegexOptions.CultureInvariant);
            if (false == regexQVol.Match(this.QVol).Success)
            {
                yield return new ValidationResult("Invalid value for QVol, must match a pattern of /[0-9]{1,15}/.", new [] { "QVol" });
            }

            // Specie (string) maxLength
            if(this.Specie != null && this.Specie.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Specie, length must be less than 60.", new [] { "Specie" });
            }

            // Specie (string) minLength
            if(this.Specie != null && this.Specie.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Specie, length must be greater than 1.", new [] { "Specie" });
            }

            // Brand (string) maxLength
            if(this.Brand != null && this.Brand.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Brand, length must be less than 60.", new [] { "Brand" });
            }

            // Brand (string) minLength
            if(this.Brand != null && this.Brand.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Brand, length must be greater than 1.", new [] { "Brand" });
            }

            // VolumeNumeration (string) maxLength
            if(this.VolumeNumeration != null && this.VolumeNumeration.Length > 60)
            {
                yield return new ValidationResult("Invalid value for VolumeNumeration, length must be less than 60.", new [] { "VolumeNumeration" });
            }

            // VolumeNumeration (string) minLength
            if(this.VolumeNumeration != null && this.VolumeNumeration.Length < 1)
            {
                yield return new ValidationResult("Invalid value for VolumeNumeration, length must be greater than 1.", new [] { "VolumeNumeration" });
            }

            yield break;
        }
    }

}
