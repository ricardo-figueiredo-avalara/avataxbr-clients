/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Legal Reason (Fundamentação Legal): - &#39;name&#39; - &#39;description&#39; - &#39;scope&#39; 
    /// </summary>
    [DataContract]
    public partial class LegalReason :  IEquatable<LegalReason>, IValidatableObject
    {
        /// <summary>
        /// Message scope. May be one of these. general - This message is not linked to any entity (agast/process/cfop) and will be applied to any item in a transacition. (Esta mensagem tem escopo geral, nao está relacionadas diretamente qualquer objeto.); linkedTo - This message is linked to an entity, and its processing will only occur when the context involves it. (Esta mensagens estão relacionadas diretamente a algum objeto como um AGAST por exemplo, um Processo ou uma CFOP.); 
        /// </summary>
        /// <value>Message scope. May be one of these. general - This message is not linked to any entity (agast/process/cfop) and will be applied to any item in a transacition. (Esta mensagem tem escopo geral, nao está relacionadas diretamente qualquer objeto.); linkedTo - This message is linked to an entity, and its processing will only occur when the context involves it. (Esta mensagens estão relacionadas diretamente a algum objeto como um AGAST por exemplo, um Processo ou uma CFOP.); </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            
            /// <summary>
            /// Enum General for "general"
            /// </summary>
            [EnumMember(Value = "general")]
            General,
            
            /// <summary>
            /// Enum LinkedTo for "linkedTo"
            /// </summary>
            [EnumMember(Value = "linkedTo")]
            LinkedTo
        }

        /// <summary>
        /// Optional. Show this message when used in Invoice (NFe, NFCe, others...). Where to show this.
        /// </summary>
        /// <value>Optional. Show this message when used in Invoice (NFe, NFCe, others...). Where to show this.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShowInInvoiceEnum
        {
            
            /// <summary>
            /// Enum ComplementaryInfoMessage for "complementaryInfoMessage"
            /// </summary>
            [EnumMember(Value = "complementaryInfoMessage")]
            ComplementaryInfoMessage,
            
            /// <summary>
            /// Enum FiscalInfoMessage for "fiscalInfoMessage"
            /// </summary>
            [EnumMember(Value = "fiscalInfoMessage")]
            FiscalInfoMessage,
            
            /// <summary>
            /// Enum ItemInfoMessage for "itemInfoMessage"
            /// </summary>
            [EnumMember(Value = "itemInfoMessage")]
            ItemInfoMessage
        }

        /// <summary>
        /// Message scope. May be one of these. general - This message is not linked to any entity (agast/process/cfop) and will be applied to any item in a transacition. (Esta mensagem tem escopo geral, nao está relacionadas diretamente qualquer objeto.); linkedTo - This message is linked to an entity, and its processing will only occur when the context involves it. (Esta mensagens estão relacionadas diretamente a algum objeto como um AGAST por exemplo, um Processo ou uma CFOP.); 
        /// </summary>
        /// <value>Message scope. May be one of these. general - This message is not linked to any entity (agast/process/cfop) and will be applied to any item in a transacition. (Esta mensagem tem escopo geral, nao está relacionadas diretamente qualquer objeto.); linkedTo - This message is linked to an entity, and its processing will only occur when the context involves it. (Esta mensagens estão relacionadas diretamente a algum objeto como um AGAST por exemplo, um Processo ou uma CFOP.); </value>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public ScopeEnum? Scope { get; set; }
        /// <summary>
        /// Optional. Show this message when used in Invoice (NFe, NFCe, others...). Where to show this.
        /// </summary>
        /// <value>Optional. Show this message when used in Invoice (NFe, NFCe, others...). Where to show this.</value>
        [DataMember(Name="showInInvoice", EmitDefaultValue=false)]
        public ShowInInvoiceEnum? ShowInInvoice { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LegalReason" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LegalReason() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LegalReason" /> class.
        /// </summary>
        /// <param name="Id">Internal ID.</param>
        /// <param name="Scope">Message scope. May be one of these. general - This message is not linked to any entity (agast/process/cfop) and will be applied to any item in a transacition. (Esta mensagem tem escopo geral, nao está relacionadas diretamente qualquer objeto.); linkedTo - This message is linked to an entity, and its processing will only occur when the context involves it. (Esta mensagens estão relacionadas diretamente a algum objeto como um AGAST por exemplo, um Processo ou uma CFOP.);  (required).</param>
        /// <param name="Disable">Set this message as no longer valid.</param>
        /// <param name="Description">Legal reason textual description; (required).</param>
        /// <param name="Name">Short name to this message (required).</param>
        /// <param name="LegalCode">this field inform the official code number.</param>
        /// <param name="ShowInInvoice">Optional. Show this message when used in Invoice (NFe, NFCe, others...). Where to show this..</param>
        /// <param name="ReferencedProcesses">Referenced Process.</param>
        /// <param name="TaxScope">TaxScope.</param>
        public LegalReason(string Id = default(string), ScopeEnum? Scope = default(ScopeEnum?), bool? Disable = default(bool?), string Description = default(string), string Name = default(string), string LegalCode = default(string), ShowInInvoiceEnum? ShowInInvoice = default(ShowInInvoiceEnum?), List<LegalReasonReferencedProcesses> ReferencedProcesses = default(List<LegalReasonReferencedProcesses>), LegalReasonTaxScope TaxScope = default(LegalReasonTaxScope))
        {
            // to ensure "Scope" is required (not null)
            if (Scope == null)
            {
                throw new InvalidDataException("Scope is a required property for LegalReason and cannot be null");
            }
            else
            {
                this.Scope = Scope;
            }
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for LegalReason and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for LegalReason and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.Id = Id;
            this.Disable = Disable;
            this.LegalCode = LegalCode;
            this.ShowInInvoice = ShowInInvoice;
            this.ReferencedProcesses = ReferencedProcesses;
            this.TaxScope = TaxScope;
        }
        
        /// <summary>
        /// Internal ID
        /// </summary>
        /// <value>Internal ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Set this message as no longer valid
        /// </summary>
        /// <value>Set this message as no longer valid</value>
        [DataMember(Name="disable", EmitDefaultValue=false)]
        public bool? Disable { get; set; }
        /// <summary>
        /// Legal reason textual description;
        /// </summary>
        /// <value>Legal reason textual description;</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Short name to this message
        /// </summary>
        /// <value>Short name to this message</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// this field inform the official code number
        /// </summary>
        /// <value>this field inform the official code number</value>
        [DataMember(Name="legalCode", EmitDefaultValue=false)]
        public string LegalCode { get; set; }
        /// <summary>
        /// Referenced Process
        /// </summary>
        /// <value>Referenced Process</value>
        [DataMember(Name="referencedProcesses", EmitDefaultValue=false)]
        public List<LegalReasonReferencedProcesses> ReferencedProcesses { get; set; }
        /// <summary>
        /// Gets or Sets TaxScope
        /// </summary>
        [DataMember(Name="taxScope", EmitDefaultValue=false)]
        public LegalReasonTaxScope TaxScope { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LegalReason {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Disable: ").Append(Disable).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LegalCode: ").Append(LegalCode).Append("\n");
            sb.Append("  ShowInInvoice: ").Append(ShowInInvoice).Append("\n");
            sb.Append("  ReferencedProcesses: ").Append(ReferencedProcesses).Append("\n");
            sb.Append("  TaxScope: ").Append(TaxScope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LegalReason);
        }

        /// <summary>
        /// Returns true if LegalReason instances are equal
        /// </summary>
        /// <param name="other">Instance of LegalReason to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LegalReason other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Scope == other.Scope ||
                    this.Scope != null &&
                    this.Scope.Equals(other.Scope)
                ) && 
                (
                    this.Disable == other.Disable ||
                    this.Disable != null &&
                    this.Disable.Equals(other.Disable)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.LegalCode == other.LegalCode ||
                    this.LegalCode != null &&
                    this.LegalCode.Equals(other.LegalCode)
                ) && 
                (
                    this.ShowInInvoice == other.ShowInInvoice ||
                    this.ShowInInvoice != null &&
                    this.ShowInInvoice.Equals(other.ShowInInvoice)
                ) && 
                (
                    this.ReferencedProcesses == other.ReferencedProcesses ||
                    this.ReferencedProcesses != null &&
                    this.ReferencedProcesses.SequenceEqual(other.ReferencedProcesses)
                ) && 
                (
                    this.TaxScope == other.TaxScope ||
                    this.TaxScope != null &&
                    this.TaxScope.Equals(other.TaxScope)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Scope != null)
                    hash = hash * 59 + this.Scope.GetHashCode();
                if (this.Disable != null)
                    hash = hash * 59 + this.Disable.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.LegalCode != null)
                    hash = hash * 59 + this.LegalCode.GetHashCode();
                if (this.ShowInInvoice != null)
                    hash = hash * 59 + this.ShowInInvoice.GetHashCode();
                if (this.ReferencedProcesses != null)
                    hash = hash * 59 + this.ReferencedProcesses.GetHashCode();
                if (this.TaxScope != null)
                    hash = hash * 59 + this.TaxScope.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
