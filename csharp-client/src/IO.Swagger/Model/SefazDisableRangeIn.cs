/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SefazDisableRangeIn
    /// </summary>
    [DataContract]
    public partial class SefazDisableRangeIn :  IEquatable<SefazDisableRangeIn>, IValidatableObject
    {
        /// <summary>
        /// This string indicates the type of transaction for which tax should be calculated. - '55' # Nota Fiscal Eletrônica (NF-e) - '65' # Nota Fiscal Eletrônica ao-Consumidor Final (NFC-e) 
        /// </summary>
        /// <value>This string indicates the type of transaction for which tax should be calculated. - '55' # Nota Fiscal Eletrônica (NF-e) - '65' # Nota Fiscal Eletrônica ao-Consumidor Final (NFC-e) </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionModelEnum
        {
            
            /// <summary>
            /// Enum _55 for "55"
            /// </summary>
            [EnumMember(Value = "55")]
            _55,
            
            /// <summary>
            /// Enum _65 for "65"
            /// </summary>
            [EnumMember(Value = "65")]
            _65
        }

        /// <summary>
        /// This string indicates the type of transaction for which tax should be calculated. - '55' # Nota Fiscal Eletrônica (NF-e) - '65' # Nota Fiscal Eletrônica ao-Consumidor Final (NFC-e) 
        /// </summary>
        /// <value>This string indicates the type of transaction for which tax should be calculated. - '55' # Nota Fiscal Eletrônica (NF-e) - '65' # Nota Fiscal Eletrônica ao-Consumidor Final (NFC-e) </value>
        [DataMember(Name="transactionModel", EmitDefaultValue=false)]
        public TransactionModelEnum? TransactionModel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SefazDisableRangeIn" /> class.
        /// </summary>
        /// <param name="CompanyLocation">This string contains a previously configured company code which may also have codes needed for tax return purposes. These codes are maintained through the customer portal. Main company address identity.</param>
        /// <param name="TransactionModel">This string indicates the type of transaction for which tax should be calculated. - &#39;55&#39; # Nota Fiscal Eletrônica (NF-e) - &#39;65&#39; # Nota Fiscal Eletrônica ao-Consumidor Final (NFC-e) .</param>
        /// <param name="InvoiceSerial">Invoice number, sequential unique by invoice serial (Número da nota fiscal) .</param>
        /// <param name="Year">Year.</param>
        /// <param name="Message">Message.</param>
        /// <param name="InvoiceNumberInit">First number of disable range..</param>
        /// <param name="InvoiceNumberEnd">Last number of disable range..</param>
        public SefazDisableRangeIn(string CompanyLocation = default(string), TransactionModelEnum? TransactionModel = default(TransactionModelEnum?), int? InvoiceSerial = default(int?), decimal? Year = default(decimal?), string Message = default(string), decimal? InvoiceNumberInit = default(decimal?), decimal? InvoiceNumberEnd = default(decimal?))
        {
            this.CompanyLocation = CompanyLocation;
            this.TransactionModel = TransactionModel;
            this.InvoiceSerial = InvoiceSerial;
            this.Year = Year;
            this.Message = Message;
            this.InvoiceNumberInit = InvoiceNumberInit;
            this.InvoiceNumberEnd = InvoiceNumberEnd;
        }
        
        /// <summary>
        /// This string contains a previously configured company code which may also have codes needed for tax return purposes. These codes are maintained through the customer portal. Main company address identity
        /// </summary>
        /// <value>This string contains a previously configured company code which may also have codes needed for tax return purposes. These codes are maintained through the customer portal. Main company address identity</value>
        [DataMember(Name="companyLocation", EmitDefaultValue=false)]
        public string CompanyLocation { get; set; }
        /// <summary>
        /// Invoice number, sequential unique by invoice serial (Número da nota fiscal) 
        /// </summary>
        /// <value>Invoice number, sequential unique by invoice serial (Número da nota fiscal) </value>
        [DataMember(Name="invoiceSerial", EmitDefaultValue=false)]
        public int? InvoiceSerial { get; set; }
        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public decimal? Year { get; set; }
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// First number of disable range.
        /// </summary>
        /// <value>First number of disable range.</value>
        [DataMember(Name="invoiceNumberInit", EmitDefaultValue=false)]
        public decimal? InvoiceNumberInit { get; set; }
        /// <summary>
        /// Last number of disable range.
        /// </summary>
        /// <value>Last number of disable range.</value>
        [DataMember(Name="invoiceNumberEnd", EmitDefaultValue=false)]
        public decimal? InvoiceNumberEnd { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SefazDisableRangeIn {\n");
            sb.Append("  CompanyLocation: ").Append(CompanyLocation).Append("\n");
            sb.Append("  TransactionModel: ").Append(TransactionModel).Append("\n");
            sb.Append("  InvoiceSerial: ").Append(InvoiceSerial).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  InvoiceNumberInit: ").Append(InvoiceNumberInit).Append("\n");
            sb.Append("  InvoiceNumberEnd: ").Append(InvoiceNumberEnd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SefazDisableRangeIn);
        }

        /// <summary>
        /// Returns true if SefazDisableRangeIn instances are equal
        /// </summary>
        /// <param name="other">Instance of SefazDisableRangeIn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SefazDisableRangeIn other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CompanyLocation == other.CompanyLocation ||
                    this.CompanyLocation != null &&
                    this.CompanyLocation.Equals(other.CompanyLocation)
                ) && 
                (
                    this.TransactionModel == other.TransactionModel ||
                    this.TransactionModel != null &&
                    this.TransactionModel.Equals(other.TransactionModel)
                ) && 
                (
                    this.InvoiceSerial == other.InvoiceSerial ||
                    this.InvoiceSerial != null &&
                    this.InvoiceSerial.Equals(other.InvoiceSerial)
                ) && 
                (
                    this.Year == other.Year ||
                    this.Year != null &&
                    this.Year.Equals(other.Year)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.InvoiceNumberInit == other.InvoiceNumberInit ||
                    this.InvoiceNumberInit != null &&
                    this.InvoiceNumberInit.Equals(other.InvoiceNumberInit)
                ) && 
                (
                    this.InvoiceNumberEnd == other.InvoiceNumberEnd ||
                    this.InvoiceNumberEnd != null &&
                    this.InvoiceNumberEnd.Equals(other.InvoiceNumberEnd)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CompanyLocation != null)
                    hash = hash * 59 + this.CompanyLocation.GetHashCode();
                if (this.TransactionModel != null)
                    hash = hash * 59 + this.TransactionModel.GetHashCode();
                if (this.InvoiceSerial != null)
                    hash = hash * 59 + this.InvoiceSerial.GetHashCode();
                if (this.Year != null)
                    hash = hash * 59 + this.Year.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.InvoiceNumberInit != null)
                    hash = hash * 59 + this.InvoiceNumberInit.GetHashCode();
                if (this.InvoiceNumberEnd != null)
                    hash = hash * 59 + this.InvoiceNumberEnd.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Message (string) maxLength
            if(this.Message != null && this.Message.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Message, length must be less than 255.", new [] { "Message" });
            }

            // Message (string) minLength
            if(this.Message != null && this.Message.Length < 15)
            {
                yield return new ValidationResult("Invalid value for Message, length must be greater than 15.", new [] { "Message" });
            }

            yield break;
        }
    }

}
