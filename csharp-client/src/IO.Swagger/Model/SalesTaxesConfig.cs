/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SalesTaxesConfig
    /// </summary>
    [DataContract]
    public partial class SalesTaxesConfig :  IEquatable<SalesTaxesConfig>, IValidatableObject
    {
        /// <summary>
        /// There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE 
        /// </summary>
        /// <value>There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccruableCOFINSTaxationEnum
        {
            
            /// <summary>
            /// Enum T for "T"
            /// </summary>
            [EnumMember(Value = "T")]
            T,
            
            /// <summary>
            /// Enum N for "N"
            /// </summary>
            [EnumMember(Value = "N")]
            N,
            
            /// <summary>
            /// Enum Z for "Z"
            /// </summary>
            [EnumMember(Value = "Z")]
            Z,
            
            /// <summary>
            /// Enum E for "E"
            /// </summary>
            [EnumMember(Value = "E")]
            E,
            
            /// <summary>
            /// Enum H for "H"
            /// </summary>
            [EnumMember(Value = "H")]
            H,
            
            /// <summary>
            /// Enum S for "S"
            /// </summary>
            [EnumMember(Value = "S")]
            S
        }

        /// <summary>
        /// There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT 
        /// </summary>
        /// <value>There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccruableCSLLTaxationEnum
        {
            
            /// <summary>
            /// Enum T for "T"
            /// </summary>
            [EnumMember(Value = "T")]
            T,
            
            /// <summary>
            /// Enum E for "E"
            /// </summary>
            [EnumMember(Value = "E")]
            E
        }

        /// <summary>
        /// There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE 
        /// </summary>
        /// <value>There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccruablePISTaxationEnum
        {
            
            /// <summary>
            /// Enum T for "T"
            /// </summary>
            [EnumMember(Value = "T")]
            T,
            
            /// <summary>
            /// Enum N for "N"
            /// </summary>
            [EnumMember(Value = "N")]
            N,
            
            /// <summary>
            /// Enum Z for "Z"
            /// </summary>
            [EnumMember(Value = "Z")]
            Z,
            
            /// <summary>
            /// Enum E for "E"
            /// </summary>
            [EnumMember(Value = "E")]
            E,
            
            /// <summary>
            /// Enum H for "H"
            /// </summary>
            [EnumMember(Value = "H")]
            H,
            
            /// <summary>
            /// Enum S for "S"
            /// </summary>
            [EnumMember(Value = "S")]
            S
        }

        /// <summary>
        /// There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE 
        /// </summary>
        /// <value>There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE </value>
        [DataMember(Name="accruableCOFINSTaxation", EmitDefaultValue=false)]
        public AccruableCOFINSTaxationEnum? AccruableCOFINSTaxation { get; set; }
        /// <summary>
        /// There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT 
        /// </summary>
        /// <value>There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT </value>
        [DataMember(Name="accruableCSLLTaxation", EmitDefaultValue=false)]
        public AccruableCSLLTaxationEnum? AccruableCSLLTaxation { get; set; }
        /// <summary>
        /// There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE 
        /// </summary>
        /// <value>There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE </value>
        [DataMember(Name="accruablePISTaxation", EmitDefaultValue=false)]
        public AccruablePISTaxationEnum? AccruablePISTaxation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesTaxesConfig" /> class.
        /// </summary>
        /// <param name="AccruableCOFINSTaxation">There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. - &#39;T&#39; # TAXABLE - &#39;N&#39; # NOT TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;S&#39; # SPECIFIC RATE .</param>
        /// <param name="AccruableCSLLTaxation">There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT .</param>
        /// <param name="AccruablePISTaxation">There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - &#39;T&#39; # TAXABLE - &#39;N&#39; # NOT TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;S&#39; # SPECIFIC RATE .</param>
        /// <param name="AccruableCOFINSExempCodeTaxation">This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption.</param>
        /// <param name="AccruablePISExempCodeTaxation">This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption.</param>
        /// <param name="WithholdingCOFINS">Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings..</param>
        /// <param name="WithholdingCSLL">Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings..</param>
        /// <param name="WithholdingIRRF">Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings..</param>
        /// <param name="WithholdingPIS">Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings..</param>
        /// <param name="WithholdIRRFExemptReasonTaxation">When property withholdingIRRF is false is mandatory inform the reason.</param>
        public SalesTaxesConfig(AccruableCOFINSTaxationEnum? AccruableCOFINSTaxation = default(AccruableCOFINSTaxationEnum?), AccruableCSLLTaxationEnum? AccruableCSLLTaxation = default(AccruableCSLLTaxationEnum?), AccruablePISTaxationEnum? AccruablePISTaxation = default(AccruablePISTaxationEnum?), string AccruableCOFINSExempCodeTaxation = default(string), string AccruablePISExempCodeTaxation = default(string), bool? WithholdingCOFINS = default(bool?), bool? WithholdingCSLL = default(bool?), bool? WithholdingIRRF = default(bool?), bool? WithholdingPIS = default(bool?), string WithholdIRRFExemptReasonTaxation = default(string))
        {
            this.AccruableCOFINSTaxation = AccruableCOFINSTaxation;
            this.AccruableCSLLTaxation = AccruableCSLLTaxation;
            this.AccruablePISTaxation = AccruablePISTaxation;
            this.AccruableCOFINSExempCodeTaxation = AccruableCOFINSExempCodeTaxation;
            this.AccruablePISExempCodeTaxation = AccruablePISExempCodeTaxation;
            this.WithholdingCOFINS = WithholdingCOFINS;
            this.WithholdingCSLL = WithholdingCSLL;
            this.WithholdingIRRF = WithholdingIRRF;
            this.WithholdingPIS = WithholdingPIS;
            this.WithholdIRRFExemptReasonTaxation = WithholdIRRFExemptReasonTaxation;
        }
        
        /// <summary>
        /// This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption
        /// </summary>
        /// <value>This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption</value>
        [DataMember(Name="accruableCOFINSExempCodeTaxation", EmitDefaultValue=false)]
        public string AccruableCOFINSExempCodeTaxation { get; set; }
        /// <summary>
        /// This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption
        /// </summary>
        /// <value>This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption</value>
        [DataMember(Name="accruablePISExempCodeTaxation", EmitDefaultValue=false)]
        public string AccruablePISExempCodeTaxation { get; set; }
        /// <summary>
        /// Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
        /// </summary>
        /// <value>Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.</value>
        [DataMember(Name="withholdingCOFINS", EmitDefaultValue=false)]
        public bool? WithholdingCOFINS { get; set; }
        /// <summary>
        /// Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
        /// </summary>
        /// <value>Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.</value>
        [DataMember(Name="withholdingCSLL", EmitDefaultValue=false)]
        public bool? WithholdingCSLL { get; set; }
        /// <summary>
        /// Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
        /// </summary>
        /// <value>Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.</value>
        [DataMember(Name="withholdingIRRF", EmitDefaultValue=false)]
        public bool? WithholdingIRRF { get; set; }
        /// <summary>
        /// Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
        /// </summary>
        /// <value>Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.</value>
        [DataMember(Name="withholdingPIS", EmitDefaultValue=false)]
        public bool? WithholdingPIS { get; set; }
        /// <summary>
        /// When property withholdingIRRF is false is mandatory inform the reason
        /// </summary>
        /// <value>When property withholdingIRRF is false is mandatory inform the reason</value>
        [DataMember(Name="withholdIRRFExemptReasonTaxation", EmitDefaultValue=false)]
        public string WithholdIRRFExemptReasonTaxation { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesTaxesConfig {\n");
            sb.Append("  AccruableCOFINSTaxation: ").Append(AccruableCOFINSTaxation).Append("\n");
            sb.Append("  AccruableCSLLTaxation: ").Append(AccruableCSLLTaxation).Append("\n");
            sb.Append("  AccruablePISTaxation: ").Append(AccruablePISTaxation).Append("\n");
            sb.Append("  AccruableCOFINSExempCodeTaxation: ").Append(AccruableCOFINSExempCodeTaxation).Append("\n");
            sb.Append("  AccruablePISExempCodeTaxation: ").Append(AccruablePISExempCodeTaxation).Append("\n");
            sb.Append("  WithholdingCOFINS: ").Append(WithholdingCOFINS).Append("\n");
            sb.Append("  WithholdingCSLL: ").Append(WithholdingCSLL).Append("\n");
            sb.Append("  WithholdingIRRF: ").Append(WithholdingIRRF).Append("\n");
            sb.Append("  WithholdingPIS: ").Append(WithholdingPIS).Append("\n");
            sb.Append("  WithholdIRRFExemptReasonTaxation: ").Append(WithholdIRRFExemptReasonTaxation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SalesTaxesConfig);
        }

        /// <summary>
        /// Returns true if SalesTaxesConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of SalesTaxesConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesTaxesConfig other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccruableCOFINSTaxation == other.AccruableCOFINSTaxation ||
                    this.AccruableCOFINSTaxation != null &&
                    this.AccruableCOFINSTaxation.Equals(other.AccruableCOFINSTaxation)
                ) && 
                (
                    this.AccruableCSLLTaxation == other.AccruableCSLLTaxation ||
                    this.AccruableCSLLTaxation != null &&
                    this.AccruableCSLLTaxation.Equals(other.AccruableCSLLTaxation)
                ) && 
                (
                    this.AccruablePISTaxation == other.AccruablePISTaxation ||
                    this.AccruablePISTaxation != null &&
                    this.AccruablePISTaxation.Equals(other.AccruablePISTaxation)
                ) && 
                (
                    this.AccruableCOFINSExempCodeTaxation == other.AccruableCOFINSExempCodeTaxation ||
                    this.AccruableCOFINSExempCodeTaxation != null &&
                    this.AccruableCOFINSExempCodeTaxation.Equals(other.AccruableCOFINSExempCodeTaxation)
                ) && 
                (
                    this.AccruablePISExempCodeTaxation == other.AccruablePISExempCodeTaxation ||
                    this.AccruablePISExempCodeTaxation != null &&
                    this.AccruablePISExempCodeTaxation.Equals(other.AccruablePISExempCodeTaxation)
                ) && 
                (
                    this.WithholdingCOFINS == other.WithholdingCOFINS ||
                    this.WithholdingCOFINS != null &&
                    this.WithholdingCOFINS.Equals(other.WithholdingCOFINS)
                ) && 
                (
                    this.WithholdingCSLL == other.WithholdingCSLL ||
                    this.WithholdingCSLL != null &&
                    this.WithholdingCSLL.Equals(other.WithholdingCSLL)
                ) && 
                (
                    this.WithholdingIRRF == other.WithholdingIRRF ||
                    this.WithholdingIRRF != null &&
                    this.WithholdingIRRF.Equals(other.WithholdingIRRF)
                ) && 
                (
                    this.WithholdingPIS == other.WithholdingPIS ||
                    this.WithholdingPIS != null &&
                    this.WithholdingPIS.Equals(other.WithholdingPIS)
                ) && 
                (
                    this.WithholdIRRFExemptReasonTaxation == other.WithholdIRRFExemptReasonTaxation ||
                    this.WithholdIRRFExemptReasonTaxation != null &&
                    this.WithholdIRRFExemptReasonTaxation.Equals(other.WithholdIRRFExemptReasonTaxation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccruableCOFINSTaxation != null)
                    hash = hash * 59 + this.AccruableCOFINSTaxation.GetHashCode();
                if (this.AccruableCSLLTaxation != null)
                    hash = hash * 59 + this.AccruableCSLLTaxation.GetHashCode();
                if (this.AccruablePISTaxation != null)
                    hash = hash * 59 + this.AccruablePISTaxation.GetHashCode();
                if (this.AccruableCOFINSExempCodeTaxation != null)
                    hash = hash * 59 + this.AccruableCOFINSExempCodeTaxation.GetHashCode();
                if (this.AccruablePISExempCodeTaxation != null)
                    hash = hash * 59 + this.AccruablePISExempCodeTaxation.GetHashCode();
                if (this.WithholdingCOFINS != null)
                    hash = hash * 59 + this.WithholdingCOFINS.GetHashCode();
                if (this.WithholdingCSLL != null)
                    hash = hash * 59 + this.WithholdingCSLL.GetHashCode();
                if (this.WithholdingIRRF != null)
                    hash = hash * 59 + this.WithholdingIRRF.GetHashCode();
                if (this.WithholdingPIS != null)
                    hash = hash * 59 + this.WithholdingPIS.GetHashCode();
                if (this.WithholdIRRFExemptReasonTaxation != null)
                    hash = hash * 59 + this.WithholdIRRFExemptReasonTaxation.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // AccruableCOFINSExempCodeTaxation (string) pattern
            Regex regexAccruableCOFINSExempCodeTaxation = new Regex(@"[0-9]{3}", RegexOptions.CultureInvariant);
            if (false == regexAccruableCOFINSExempCodeTaxation.Match(this.AccruableCOFINSExempCodeTaxation).Success)
            {
                yield return new ValidationResult("Invalid value for AccruableCOFINSExempCodeTaxation, must match a pattern of /[0-9]{3}/.", new [] { "AccruableCOFINSExempCodeTaxation" });
            }

            // AccruablePISExempCodeTaxation (string) pattern
            Regex regexAccruablePISExempCodeTaxation = new Regex(@"[0-9]{3}", RegexOptions.CultureInvariant);
            if (false == regexAccruablePISExempCodeTaxation.Match(this.AccruablePISExempCodeTaxation).Success)
            {
                yield return new ValidationResult("Invalid value for AccruablePISExempCodeTaxation, must match a pattern of /[0-9]{3}/.", new [] { "AccruablePISExempCodeTaxation" });
            }

            yield break;
        }
    }

}
