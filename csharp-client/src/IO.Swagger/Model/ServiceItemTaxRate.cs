/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ServiceItemTaxRate
    /// </summary>
    [DataContract]
    public partial class ServiceItemTaxRate :  IEquatable<ServiceItemTaxRate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceItemTaxRate" /> class.
        /// </summary>
        /// <param name="TaxType">TaxType.</param>
        /// <param name="RateType">RateType.</param>
        /// <param name="Rate">Rate.</param>
        /// <param name="IsExempt">IsExempt.</param>
        /// <param name="Discount">Discount.</param>
        /// <param name="Zone1">Zone1.</param>
        /// <param name="Zone2">Zone2.</param>
        /// <param name="Period">Period.</param>
        /// <param name="Reason">Reason.</param>
        /// <param name="Message">Message.</param>
        public ServiceItemTaxRate(string TaxType = default(string), string RateType = default(string), double? Rate = default(double?), bool? IsExempt = default(bool?), double? Discount = default(double?), int? Zone1 = default(int?), int? Zone2 = default(int?), ServiceItemTaxRatePeriod Period = default(ServiceItemTaxRatePeriod), string Reason = default(string), string Message = default(string))
        {
            this.TaxType = TaxType;
            this.RateType = RateType;
            this.Rate = Rate;
            this.IsExempt = IsExempt;
            this.Discount = Discount;
            this.Zone1 = Zone1;
            this.Zone2 = Zone2;
            this.Period = Period;
            this.Reason = Reason;
            this.Message = Message;
        }
        
        /// <summary>
        /// Gets or Sets TaxType
        /// </summary>
        [DataMember(Name="taxType", EmitDefaultValue=false)]
        public string TaxType { get; set; }
        /// <summary>
        /// Gets or Sets RateType
        /// </summary>
        [DataMember(Name="rateType", EmitDefaultValue=false)]
        public string RateType { get; set; }
        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public double? Rate { get; set; }
        /// <summary>
        /// Gets or Sets IsExempt
        /// </summary>
        [DataMember(Name="isExempt", EmitDefaultValue=false)]
        public bool? IsExempt { get; set; }
        /// <summary>
        /// Gets or Sets Discount
        /// </summary>
        [DataMember(Name="discount", EmitDefaultValue=false)]
        public double? Discount { get; set; }
        /// <summary>
        /// Gets or Sets Zone1
        /// </summary>
        [DataMember(Name="zone1", EmitDefaultValue=false)]
        public int? Zone1 { get; set; }
        /// <summary>
        /// Gets or Sets Zone2
        /// </summary>
        [DataMember(Name="zone2", EmitDefaultValue=false)]
        public int? Zone2 { get; set; }
        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public ServiceItemTaxRatePeriod Period { get; set; }
        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceItemTaxRate {\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("  RateType: ").Append(RateType).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  IsExempt: ").Append(IsExempt).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  Zone1: ").Append(Zone1).Append("\n");
            sb.Append("  Zone2: ").Append(Zone2).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ServiceItemTaxRate);
        }

        /// <summary>
        /// Returns true if ServiceItemTaxRate instances are equal
        /// </summary>
        /// <param name="other">Instance of ServiceItemTaxRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceItemTaxRate other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TaxType == other.TaxType ||
                    this.TaxType != null &&
                    this.TaxType.Equals(other.TaxType)
                ) && 
                (
                    this.RateType == other.RateType ||
                    this.RateType != null &&
                    this.RateType.Equals(other.RateType)
                ) && 
                (
                    this.Rate == other.Rate ||
                    this.Rate != null &&
                    this.Rate.Equals(other.Rate)
                ) && 
                (
                    this.IsExempt == other.IsExempt ||
                    this.IsExempt != null &&
                    this.IsExempt.Equals(other.IsExempt)
                ) && 
                (
                    this.Discount == other.Discount ||
                    this.Discount != null &&
                    this.Discount.Equals(other.Discount)
                ) && 
                (
                    this.Zone1 == other.Zone1 ||
                    this.Zone1 != null &&
                    this.Zone1.Equals(other.Zone1)
                ) && 
                (
                    this.Zone2 == other.Zone2 ||
                    this.Zone2 != null &&
                    this.Zone2.Equals(other.Zone2)
                ) && 
                (
                    this.Period == other.Period ||
                    this.Period != null &&
                    this.Period.Equals(other.Period)
                ) && 
                (
                    this.Reason == other.Reason ||
                    this.Reason != null &&
                    this.Reason.Equals(other.Reason)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TaxType != null)
                    hash = hash * 59 + this.TaxType.GetHashCode();
                if (this.RateType != null)
                    hash = hash * 59 + this.RateType.GetHashCode();
                if (this.Rate != null)
                    hash = hash * 59 + this.Rate.GetHashCode();
                if (this.IsExempt != null)
                    hash = hash * 59 + this.IsExempt.GetHashCode();
                if (this.Discount != null)
                    hash = hash * 59 + this.Discount.GetHashCode();
                if (this.Zone1 != null)
                    hash = hash * 59 + this.Zone1.GetHashCode();
                if (this.Zone2 != null)
                    hash = hash * 59 + this.Zone2.GetHashCode();
                if (this.Period != null)
                    hash = hash * 59 + this.Period.GetHashCode();
                if (this.Reason != null)
                    hash = hash * 59 + this.Reason.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
