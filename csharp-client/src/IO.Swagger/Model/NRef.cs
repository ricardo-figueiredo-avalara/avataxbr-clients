/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Referenced Invoices The invoice can be one of this types, - &#39;refNFe - Eletronic Invoice&#39; - &#39;refCTE - Transport Invoice&#39; - &#39;refECF - Reatail Cupom&#39; - &#39;refNF  - Invoice model 1 or 1A&#39; - &#39;refFarmerNF - farmer invoice&#39; 
    /// </summary>
    [DataContract]
    public partial class NRef :  IEquatable<NRef>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum RefNFe for "refNFe"
            /// </summary>
            [EnumMember(Value = "refNFe")]
            RefNFe,
            
            /// <summary>
            /// Enum RefCTE for "refCTE"
            /// </summary>
            [EnumMember(Value = "refCTE")]
            RefCTE,
            
            /// <summary>
            /// Enum RefECF for "refECF"
            /// </summary>
            [EnumMember(Value = "refECF")]
            RefECF,
            
            /// <summary>
            /// Enum RefNF for "refNF"
            /// </summary>
            [EnumMember(Value = "refNF")]
            RefNF,
            
            /// <summary>
            /// Enum RefFarmerNF for "refFarmerNF"
            /// </summary>
            [EnumMember(Value = "refFarmerNF")]
            RefFarmerNF
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NRef" /> class.
        /// </summary>
        /// <param name="Type">Type.</param>
        /// <param name="RefNFe">RefNFe.</param>
        /// <param name="RefCTe">RefCTe.</param>
        /// <param name="RefECF">RefECF.</param>
        /// <param name="RefNF">RefNF.</param>
        /// <param name="RefFarmerNF">RefFarmerNF.</param>
        public NRef(TypeEnum? Type = default(TypeEnum?), string RefNFe = default(string), string RefCTe = default(string), NRefRefECF RefECF = default(NRefRefECF), NRefRefNF RefNF = default(NRefRefNF), NRefRefFarmerNF RefFarmerNF = default(NRefRefFarmerNF))
        {
            this.Type = Type;
            this.RefNFe = RefNFe;
            this.RefCTe = RefCTe;
            this.RefECF = RefECF;
            this.RefNF = RefNF;
            this.RefFarmerNF = RefFarmerNF;
        }
        
        /// <summary>
        /// Gets or Sets RefNFe
        /// </summary>
        [DataMember(Name="refNFe", EmitDefaultValue=false)]
        public string RefNFe { get; set; }
        /// <summary>
        /// Gets or Sets RefCTe
        /// </summary>
        [DataMember(Name="refCTe", EmitDefaultValue=false)]
        public string RefCTe { get; set; }
        /// <summary>
        /// Gets or Sets RefECF
        /// </summary>
        [DataMember(Name="refECF", EmitDefaultValue=false)]
        public NRefRefECF RefECF { get; set; }
        /// <summary>
        /// Gets or Sets RefNF
        /// </summary>
        [DataMember(Name="refNF", EmitDefaultValue=false)]
        public NRefRefNF RefNF { get; set; }
        /// <summary>
        /// Gets or Sets RefFarmerNF
        /// </summary>
        [DataMember(Name="refFarmerNF", EmitDefaultValue=false)]
        public NRefRefFarmerNF RefFarmerNF { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NRef {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RefNFe: ").Append(RefNFe).Append("\n");
            sb.Append("  RefCTe: ").Append(RefCTe).Append("\n");
            sb.Append("  RefECF: ").Append(RefECF).Append("\n");
            sb.Append("  RefNF: ").Append(RefNF).Append("\n");
            sb.Append("  RefFarmerNF: ").Append(RefFarmerNF).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NRef);
        }

        /// <summary>
        /// Returns true if NRef instances are equal
        /// </summary>
        /// <param name="other">Instance of NRef to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NRef other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.RefNFe == other.RefNFe ||
                    this.RefNFe != null &&
                    this.RefNFe.Equals(other.RefNFe)
                ) && 
                (
                    this.RefCTe == other.RefCTe ||
                    this.RefCTe != null &&
                    this.RefCTe.Equals(other.RefCTe)
                ) && 
                (
                    this.RefECF == other.RefECF ||
                    this.RefECF != null &&
                    this.RefECF.Equals(other.RefECF)
                ) && 
                (
                    this.RefNF == other.RefNF ||
                    this.RefNF != null &&
                    this.RefNF.Equals(other.RefNF)
                ) && 
                (
                    this.RefFarmerNF == other.RefFarmerNF ||
                    this.RefFarmerNF != null &&
                    this.RefFarmerNF.Equals(other.RefFarmerNF)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.RefNFe != null)
                    hash = hash * 59 + this.RefNFe.GetHashCode();
                if (this.RefCTe != null)
                    hash = hash * 59 + this.RefCTe.GetHashCode();
                if (this.RefECF != null)
                    hash = hash * 59 + this.RefECF.GetHashCode();
                if (this.RefNF != null)
                    hash = hash * 59 + this.RefNF.GetHashCode();
                if (this.RefFarmerNF != null)
                    hash = hash * 59 + this.RefFarmerNF.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // RefNFe (string) maxLength
            if(this.RefNFe != null && this.RefNFe.Length > 44)
            {
                yield return new ValidationResult("Invalid value for RefNFe, length must be less than 44.", new [] { "RefNFe" });
            }

            // RefNFe (string) pattern
            Regex regexRefNFe = new Regex(@"[0-9]{44}", RegexOptions.CultureInvariant);
            if (false == regexRefNFe.Match(this.RefNFe).Success)
            {
                yield return new ValidationResult("Invalid value for RefNFe, must match a pattern of /[0-9]{44}/.", new [] { "RefNFe" });
            }

            // RefCTe (string) maxLength
            if(this.RefCTe != null && this.RefCTe.Length > 44)
            {
                yield return new ValidationResult("Invalid value for RefCTe, length must be less than 44.", new [] { "RefCTe" });
            }

            // RefCTe (string) pattern
            Regex regexRefCTe = new Regex(@"[0-9]{44}", RegexOptions.CultureInvariant);
            if (false == regexRefCTe.Match(this.RefCTe).Success)
            {
                yield return new ValidationResult("Invalid value for RefCTe, must match a pattern of /[0-9]{44}/.", new [] { "RefCTe" });
            }

            yield break;
        }
    }

}
