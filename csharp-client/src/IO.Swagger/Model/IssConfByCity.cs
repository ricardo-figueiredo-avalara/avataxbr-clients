/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// IssConfByCity
    /// </summary>
    [DataContract]
    public partial class IssConfByCity :  IEquatable<IssConfByCity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssConfByCity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IssConfByCity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IssConfByCity" /> class.
        /// </summary>
        /// <param name="CityCode">City Code (IBGE) (required).</param>
        /// <param name="Name">Name.</param>
        /// <param name="State">State.</param>
        /// <param name="IssWhDestOtherCities">IssWhDestOtherCities.</param>
        /// <param name="IssWhDestSameCity">IssWhDestSameCity.</param>
        /// <param name="IssWhOriginUnregSeller">IssWhOriginUnregSeller.</param>
        /// <param name="ServiceList">ServiceList.</param>
        public IssConfByCity(long? CityCode = default(long?), string Name = default(string), StateEnum State = default(StateEnum), bool? IssWhDestOtherCities = default(bool?), bool? IssWhDestSameCity = default(bool?), bool? IssWhOriginUnregSeller = default(bool?), List<IssConfServiceList> ServiceList = default(List<IssConfServiceList>))
        {
            // to ensure "CityCode" is required (not null)
            if (CityCode == null)
            {
                throw new InvalidDataException("CityCode is a required property for IssConfByCity and cannot be null");
            }
            else
            {
                this.CityCode = CityCode;
            }
            this.Name = Name;
            this.State = State;
            this.IssWhDestOtherCities = IssWhDestOtherCities;
            this.IssWhDestSameCity = IssWhDestSameCity;
            this.IssWhOriginUnregSeller = IssWhOriginUnregSeller;
            this.ServiceList = ServiceList;
        }
        
        /// <summary>
        /// City Code (IBGE)
        /// </summary>
        /// <value>City Code (IBGE)</value>
        [DataMember(Name="cityCode", EmitDefaultValue=false)]
        public long? CityCode { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Gets or Sets IssWhDestOtherCities
        /// </summary>
        [DataMember(Name="issWhDestOtherCities", EmitDefaultValue=false)]
        public bool? IssWhDestOtherCities { get; set; }
        /// <summary>
        /// Gets or Sets IssWhDestSameCity
        /// </summary>
        [DataMember(Name="issWhDestSameCity", EmitDefaultValue=false)]
        public bool? IssWhDestSameCity { get; set; }
        /// <summary>
        /// Gets or Sets IssWhOriginUnregSeller
        /// </summary>
        [DataMember(Name="issWhOriginUnregSeller", EmitDefaultValue=false)]
        public bool? IssWhOriginUnregSeller { get; set; }
        /// <summary>
        /// Gets or Sets ServiceList
        /// </summary>
        [DataMember(Name="serviceList", EmitDefaultValue=false)]
        public List<IssConfServiceList> ServiceList { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssConfByCity {\n");
            sb.Append("  CityCode: ").Append(CityCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  IssWhDestOtherCities: ").Append(IssWhDestOtherCities).Append("\n");
            sb.Append("  IssWhDestSameCity: ").Append(IssWhDestSameCity).Append("\n");
            sb.Append("  IssWhOriginUnregSeller: ").Append(IssWhOriginUnregSeller).Append("\n");
            sb.Append("  ServiceList: ").Append(ServiceList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IssConfByCity);
        }

        /// <summary>
        /// Returns true if IssConfByCity instances are equal
        /// </summary>
        /// <param name="other">Instance of IssConfByCity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssConfByCity other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CityCode == other.CityCode ||
                    this.CityCode != null &&
                    this.CityCode.Equals(other.CityCode)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.IssWhDestOtherCities == other.IssWhDestOtherCities ||
                    this.IssWhDestOtherCities != null &&
                    this.IssWhDestOtherCities.Equals(other.IssWhDestOtherCities)
                ) && 
                (
                    this.IssWhDestSameCity == other.IssWhDestSameCity ||
                    this.IssWhDestSameCity != null &&
                    this.IssWhDestSameCity.Equals(other.IssWhDestSameCity)
                ) && 
                (
                    this.IssWhOriginUnregSeller == other.IssWhOriginUnregSeller ||
                    this.IssWhOriginUnregSeller != null &&
                    this.IssWhOriginUnregSeller.Equals(other.IssWhOriginUnregSeller)
                ) && 
                (
                    this.ServiceList == other.ServiceList ||
                    this.ServiceList != null &&
                    this.ServiceList.SequenceEqual(other.ServiceList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CityCode != null)
                    hash = hash * 59 + this.CityCode.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.IssWhDestOtherCities != null)
                    hash = hash * 59 + this.IssWhDestOtherCities.GetHashCode();
                if (this.IssWhDestSameCity != null)
                    hash = hash * 59 + this.IssWhDestSameCity.GetHashCode();
                if (this.IssWhOriginUnregSeller != null)
                    hash = hash * 59 + this.IssWhOriginUnregSeller.GetHashCode();
                if (this.ServiceList != null)
                    hash = hash * 59 + this.ServiceList.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
