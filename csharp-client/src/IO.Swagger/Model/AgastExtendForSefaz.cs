/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AgastExtendForSefaz
    /// </summary>
    [DataContract]
    public partial class AgastExtendForSefaz :  IEquatable<AgastExtendForSefaz>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AgastExtendForSefaz" /> class.
        /// </summary>
        /// <param name="HsCode">harmonized code, NCM or LC 116.</param>
        /// <param name="Ex">hsCode Exception for IPI tax.</param>
        /// <param name="Cest">tax substitution code - Codigo especificador da Substuicao Tributaria.</param>
        /// <param name="Cean">GTIN NUMBER.</param>
        /// <param name="Nve">Nomenclatura de Valor aduaneio e Estatístico - NCM extension code.</param>
        /// <param name="Unit">Sales Unit.</param>
        /// <param name="UnitTaxable">Sales Taxable Unit.</param>
        /// <param name="NFCI">Importation content form number (Número de controle da FCI - Ficha de Conteúdo de Importação).</param>
        public AgastExtendForSefaz(string HsCode = default(string), int? Ex = default(int?), string Cest = default(string), string Cean = default(string), string Nve = default(string), string Unit = default(string), string UnitTaxable = default(string), string NFCI = default(string))
        {
            this.HsCode = HsCode;
            this.Ex = Ex;
            this.Cest = Cest;
            this.Cean = Cean;
            this.Nve = Nve;
            this.Unit = Unit;
            this.UnitTaxable = UnitTaxable;
            this.NFCI = NFCI;
        }
        
        /// <summary>
        /// harmonized code, NCM or LC 116
        /// </summary>
        /// <value>harmonized code, NCM or LC 116</value>
        [DataMember(Name="hsCode", EmitDefaultValue=false)]
        public string HsCode { get; set; }
        /// <summary>
        /// hsCode Exception for IPI tax
        /// </summary>
        /// <value>hsCode Exception for IPI tax</value>
        [DataMember(Name="ex", EmitDefaultValue=false)]
        public int? Ex { get; set; }
        /// <summary>
        /// tax substitution code - Codigo especificador da Substuicao Tributaria
        /// </summary>
        /// <value>tax substitution code - Codigo especificador da Substuicao Tributaria</value>
        [DataMember(Name="cest", EmitDefaultValue=false)]
        public string Cest { get; set; }
        /// <summary>
        /// GTIN NUMBER
        /// </summary>
        /// <value>GTIN NUMBER</value>
        [DataMember(Name="cean", EmitDefaultValue=false)]
        public string Cean { get; set; }
        /// <summary>
        /// Nomenclatura de Valor aduaneio e Estatístico - NCM extension code
        /// </summary>
        /// <value>Nomenclatura de Valor aduaneio e Estatístico - NCM extension code</value>
        [DataMember(Name="nve", EmitDefaultValue=false)]
        public string Nve { get; set; }
        /// <summary>
        /// Sales Unit
        /// </summary>
        /// <value>Sales Unit</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }
        /// <summary>
        /// Sales Taxable Unit
        /// </summary>
        /// <value>Sales Taxable Unit</value>
        [DataMember(Name="unitTaxable", EmitDefaultValue=false)]
        public string UnitTaxable { get; set; }
        /// <summary>
        /// Importation content form number (Número de controle da FCI - Ficha de Conteúdo de Importação)
        /// </summary>
        /// <value>Importation content form number (Número de controle da FCI - Ficha de Conteúdo de Importação)</value>
        [DataMember(Name="nFCI", EmitDefaultValue=false)]
        public string NFCI { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AgastExtendForSefaz {\n");
            sb.Append("  HsCode: ").Append(HsCode).Append("\n");
            sb.Append("  Ex: ").Append(Ex).Append("\n");
            sb.Append("  Cest: ").Append(Cest).Append("\n");
            sb.Append("  Cean: ").Append(Cean).Append("\n");
            sb.Append("  Nve: ").Append(Nve).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  UnitTaxable: ").Append(UnitTaxable).Append("\n");
            sb.Append("  NFCI: ").Append(NFCI).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AgastExtendForSefaz);
        }

        /// <summary>
        /// Returns true if AgastExtendForSefaz instances are equal
        /// </summary>
        /// <param name="other">Instance of AgastExtendForSefaz to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AgastExtendForSefaz other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.HsCode == other.HsCode ||
                    this.HsCode != null &&
                    this.HsCode.Equals(other.HsCode)
                ) && 
                (
                    this.Ex == other.Ex ||
                    this.Ex != null &&
                    this.Ex.Equals(other.Ex)
                ) && 
                (
                    this.Cest == other.Cest ||
                    this.Cest != null &&
                    this.Cest.Equals(other.Cest)
                ) && 
                (
                    this.Cean == other.Cean ||
                    this.Cean != null &&
                    this.Cean.Equals(other.Cean)
                ) && 
                (
                    this.Nve == other.Nve ||
                    this.Nve != null &&
                    this.Nve.Equals(other.Nve)
                ) && 
                (
                    this.Unit == other.Unit ||
                    this.Unit != null &&
                    this.Unit.Equals(other.Unit)
                ) && 
                (
                    this.UnitTaxable == other.UnitTaxable ||
                    this.UnitTaxable != null &&
                    this.UnitTaxable.Equals(other.UnitTaxable)
                ) && 
                (
                    this.NFCI == other.NFCI ||
                    this.NFCI != null &&
                    this.NFCI.Equals(other.NFCI)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.HsCode != null)
                    hash = hash * 59 + this.HsCode.GetHashCode();
                if (this.Ex != null)
                    hash = hash * 59 + this.Ex.GetHashCode();
                if (this.Cest != null)
                    hash = hash * 59 + this.Cest.GetHashCode();
                if (this.Cean != null)
                    hash = hash * 59 + this.Cean.GetHashCode();
                if (this.Nve != null)
                    hash = hash * 59 + this.Nve.GetHashCode();
                if (this.Unit != null)
                    hash = hash * 59 + this.Unit.GetHashCode();
                if (this.UnitTaxable != null)
                    hash = hash * 59 + this.UnitTaxable.GetHashCode();
                if (this.NFCI != null)
                    hash = hash * 59 + this.NFCI.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // HsCode (string) maxLength
            if(this.HsCode != null && this.HsCode.Length > 8)
            {
                yield return new ValidationResult("Invalid value for HsCode, length must be less than 8.", new [] { "HsCode" });
            }

            // Cest (string) pattern
            Regex regexCest = new Regex(@"[0-9]{7}", RegexOptions.CultureInvariant);
            if (false == regexCest.Match(this.Cest).Success)
            {
                yield return new ValidationResult("Invalid value for Cest, must match a pattern of /[0-9]{7}/.", new [] { "Cest" });
            }

            // Cean (string) pattern
            Regex regexCean = new Regex(@"[0-9]{0}|[0-9]{8}|[0-9]{12,14}", RegexOptions.CultureInvariant);
            if (false == regexCean.Match(this.Cean).Success)
            {
                yield return new ValidationResult("Invalid value for Cean, must match a pattern of /[0-9]{0}|[0-9]{8}|[0-9]{12,14}/.", new [] { "Cean" });
            }

            // Nve (string) pattern
            Regex regexNve = new Regex(@"[A-Z]{2}[0-9]{4}", RegexOptions.CultureInvariant);
            if (false == regexNve.Match(this.Nve).Success)
            {
                yield return new ValidationResult("Invalid value for Nve, must match a pattern of /[A-Z]{2}[0-9]{4}/.", new [] { "Nve" });
            }

            // Unit (string) maxLength
            if(this.Unit != null && this.Unit.Length > 6)
            {
                yield return new ValidationResult("Invalid value for Unit, length must be less than 6.", new [] { "Unit" });
            }

            // UnitTaxable (string) maxLength
            if(this.UnitTaxable != null && this.UnitTaxable.Length > 6)
            {
                yield return new ValidationResult("Invalid value for UnitTaxable, length must be less than 6.", new [] { "UnitTaxable" });
            }

            // NFCI (string) pattern
            Regex regexNFCI = new Regex(@"[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}", RegexOptions.CultureInvariant);
            if (false == regexNFCI.Match(this.NFCI).Success)
            {
                yield return new ValidationResult("Invalid value for NFCI, must match a pattern of /[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/.", new [] { "NFCI" });
            }

            yield break;
        }
    }

}
