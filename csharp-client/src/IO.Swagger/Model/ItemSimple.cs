/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ItemSimple
    /// </summary>
    [DataContract]
    public partial class ItemSimple :  IEquatable<ItemSimple>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemSimple" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemSimple() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemSimple" /> class.
        /// </summary>
        /// <param name="CompanyId">Company ID (required).</param>
        /// <param name="Code">ERP Code (required).</param>
        /// <param name="Agast">Agast Code (required).</param>
        /// <param name="Description">Item Description.</param>
        public ItemSimple(Guid? CompanyId = default(Guid?), string Code = default(string), string Agast = default(string), string Description = default(string))
        {
            // to ensure "CompanyId" is required (not null)
            if (CompanyId == null)
            {
                throw new InvalidDataException("CompanyId is a required property for ItemSimple and cannot be null");
            }
            else
            {
                this.CompanyId = CompanyId;
            }
            // to ensure "Code" is required (not null)
            if (Code == null)
            {
                throw new InvalidDataException("Code is a required property for ItemSimple and cannot be null");
            }
            else
            {
                this.Code = Code;
            }
            // to ensure "Agast" is required (not null)
            if (Agast == null)
            {
                throw new InvalidDataException("Agast is a required property for ItemSimple and cannot be null");
            }
            else
            {
                this.Agast = Agast;
            }
            this.Description = Description;
        }
        
        /// <summary>
        /// Company ID
        /// </summary>
        /// <value>Company ID</value>
        [DataMember(Name="companyId", EmitDefaultValue=false)]
        public Guid? CompanyId { get; set; }
        /// <summary>
        /// ERP Code
        /// </summary>
        /// <value>ERP Code</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Agast Code
        /// </summary>
        /// <value>Agast Code</value>
        [DataMember(Name="agast", EmitDefaultValue=false)]
        public string Agast { get; set; }
        /// <summary>
        /// Item Description
        /// </summary>
        /// <value>Item Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemSimple {\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Agast: ").Append(Agast).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemSimple);
        }

        /// <summary>
        /// Returns true if ItemSimple instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemSimple to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemSimple other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CompanyId == other.CompanyId ||
                    this.CompanyId != null &&
                    this.CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.Agast == other.Agast ||
                    this.Agast != null &&
                    this.Agast.Equals(other.Agast)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CompanyId != null)
                    hash = hash * 59 + this.CompanyId.GetHashCode();
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.Agast != null)
                    hash = hash * 59 + this.Agast.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Code (string) maxLength
            if(this.Code != null && this.Code.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Code, length must be less than 60.", new [] { "Code" });
            }

            // Agast (string) maxLength
            if(this.Agast != null && this.Agast.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Agast, length must be less than 60.", new [] { "Agast" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 60.", new [] { "Description" });
            }

            yield break;
        }
    }

}
