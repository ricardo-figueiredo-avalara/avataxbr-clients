/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// IpbtConfItem
    /// </summary>
    [DataContract]
    public partial class IpbtConfItem :  IEquatable<IpbtConfItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IpbtConfItem" /> class.
        /// </summary>
        /// <param name="State">State.</param>
        /// <param name="FederalTax">FederalTax.</param>
        /// <param name="ImportTax">ImportTax.</param>
        /// <param name="StateTax">StateTax.</param>
        /// <param name="CityTax">CityTax.</param>
        /// <param name="Source">Source.</param>
        public IpbtConfItem(StateEnum State = default(StateEnum), double? FederalTax = default(double?), double? ImportTax = default(double?), double? StateTax = default(double?), double? CityTax = default(double?), string Source = default(string))
        {
            this.State = State;
            this.FederalTax = FederalTax;
            this.ImportTax = ImportTax;
            this.StateTax = StateTax;
            this.CityTax = CityTax;
            this.Source = Source;
        }
        
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Gets or Sets FederalTax
        /// </summary>
        [DataMember(Name="federalTax", EmitDefaultValue=false)]
        public double? FederalTax { get; set; }
        /// <summary>
        /// Gets or Sets ImportTax
        /// </summary>
        [DataMember(Name="importTax", EmitDefaultValue=false)]
        public double? ImportTax { get; set; }
        /// <summary>
        /// Gets or Sets StateTax
        /// </summary>
        [DataMember(Name="stateTax", EmitDefaultValue=false)]
        public double? StateTax { get; set; }
        /// <summary>
        /// Gets or Sets CityTax
        /// </summary>
        [DataMember(Name="cityTax", EmitDefaultValue=false)]
        public double? CityTax { get; set; }
        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IpbtConfItem {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  FederalTax: ").Append(FederalTax).Append("\n");
            sb.Append("  ImportTax: ").Append(ImportTax).Append("\n");
            sb.Append("  StateTax: ").Append(StateTax).Append("\n");
            sb.Append("  CityTax: ").Append(CityTax).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IpbtConfItem);
        }

        /// <summary>
        /// Returns true if IpbtConfItem instances are equal
        /// </summary>
        /// <param name="other">Instance of IpbtConfItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IpbtConfItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.FederalTax == other.FederalTax ||
                    this.FederalTax != null &&
                    this.FederalTax.Equals(other.FederalTax)
                ) && 
                (
                    this.ImportTax == other.ImportTax ||
                    this.ImportTax != null &&
                    this.ImportTax.Equals(other.ImportTax)
                ) && 
                (
                    this.StateTax == other.StateTax ||
                    this.StateTax != null &&
                    this.StateTax.Equals(other.StateTax)
                ) && 
                (
                    this.CityTax == other.CityTax ||
                    this.CityTax != null &&
                    this.CityTax.Equals(other.CityTax)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.FederalTax != null)
                    hash = hash * 59 + this.FederalTax.GetHashCode();
                if (this.ImportTax != null)
                    hash = hash * 59 + this.ImportTax.GetHashCode();
                if (this.StateTax != null)
                    hash = hash * 59 + this.StateTax.GetHashCode();
                if (this.CityTax != null)
                    hash = hash * 59 + this.CityTax.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
