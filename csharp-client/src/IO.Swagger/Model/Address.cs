/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Address
    /// </summary>
    [DataContract]
    public partial class Address :  IEquatable<Address>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Address() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="Street">Street Name.</param>
        /// <param name="Neighborhood">Neighborhood Name.</param>
        /// <param name="Zipcode">Brazilian Zip Code (required).</param>
        /// <param name="CityCode">City Code (IBGE).</param>
        /// <param name="CityName">City Name.</param>
        /// <param name="State">State.</param>
        /// <param name="CountryCode">Country Code (default to &quot;0&quot;).</param>
        /// <param name="Country">Use ISO 3166-1 alpha-3 codes (default to &quot;BRA&quot;).</param>
        public Address(string Street = default(string), string Neighborhood = default(string), string Zipcode = default(string), string CityCode = default(string), string CityName = default(string), StateEnum State = default(StateEnum), string CountryCode = "0", string Country = "BRA")
        {
            // to ensure "Zipcode" is required (not null)
            if (Zipcode == null)
            {
                throw new InvalidDataException("Zipcode is a required property for Address and cannot be null");
            }
            else
            {
                this.Zipcode = Zipcode;
            }
            this.Street = Street;
            this.Neighborhood = Neighborhood;
            this.CityCode = CityCode;
            this.CityName = CityName;
            this.State = State;
            // use default value if no "CountryCode" provided
            if (CountryCode == null)
            {
                this.CountryCode = "0";
            }
            else
            {
                this.CountryCode = CountryCode;
            }
            // use default value if no "Country" provided
            if (Country == null)
            {
                this.Country = "BRA";
            }
            else
            {
                this.Country = Country;
            }
        }
        
        /// <summary>
        /// Street Name
        /// </summary>
        /// <value>Street Name</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }
        /// <summary>
        /// Neighborhood Name
        /// </summary>
        /// <value>Neighborhood Name</value>
        [DataMember(Name="neighborhood", EmitDefaultValue=false)]
        public string Neighborhood { get; set; }
        /// <summary>
        /// Brazilian Zip Code
        /// </summary>
        /// <value>Brazilian Zip Code</value>
        [DataMember(Name="zipcode", EmitDefaultValue=false)]
        public string Zipcode { get; set; }
        /// <summary>
        /// City Code (IBGE)
        /// </summary>
        /// <value>City Code (IBGE)</value>
        [DataMember(Name="cityCode", EmitDefaultValue=false)]
        public string CityCode { get; set; }
        /// <summary>
        /// City Name
        /// </summary>
        /// <value>City Name</value>
        [DataMember(Name="cityName", EmitDefaultValue=false)]
        public string CityName { get; set; }
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Country Code
        /// </summary>
        /// <value>Country Code</value>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }
        /// <summary>
        /// Use ISO 3166-1 alpha-3 codes
        /// </summary>
        /// <value>Use ISO 3166-1 alpha-3 codes</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Neighborhood: ").Append(Neighborhood).Append("\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("  CityCode: ").Append(CityCode).Append("\n");
            sb.Append("  CityName: ").Append(CityName).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Address);
        }

        /// <summary>
        /// Returns true if Address instances are equal
        /// </summary>
        /// <param name="other">Instance of Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Address other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Street == other.Street ||
                    this.Street != null &&
                    this.Street.Equals(other.Street)
                ) && 
                (
                    this.Neighborhood == other.Neighborhood ||
                    this.Neighborhood != null &&
                    this.Neighborhood.Equals(other.Neighborhood)
                ) && 
                (
                    this.Zipcode == other.Zipcode ||
                    this.Zipcode != null &&
                    this.Zipcode.Equals(other.Zipcode)
                ) && 
                (
                    this.CityCode == other.CityCode ||
                    this.CityCode != null &&
                    this.CityCode.Equals(other.CityCode)
                ) && 
                (
                    this.CityName == other.CityName ||
                    this.CityName != null &&
                    this.CityName.Equals(other.CityName)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.CountryCode == other.CountryCode ||
                    this.CountryCode != null &&
                    this.CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Street != null)
                    hash = hash * 59 + this.Street.GetHashCode();
                if (this.Neighborhood != null)
                    hash = hash * 59 + this.Neighborhood.GetHashCode();
                if (this.Zipcode != null)
                    hash = hash * 59 + this.Zipcode.GetHashCode();
                if (this.CityCode != null)
                    hash = hash * 59 + this.CityCode.GetHashCode();
                if (this.CityName != null)
                    hash = hash * 59 + this.CityName.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.CountryCode != null)
                    hash = hash * 59 + this.CountryCode.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Street (string) maxLength
            if(this.Street != null && this.Street.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Street, length must be less than 60.", new [] { "Street" });
            }

            // Neighborhood (string) maxLength
            if(this.Neighborhood != null && this.Neighborhood.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Neighborhood, length must be less than 60.", new [] { "Neighborhood" });
            }

            // Zipcode (string) pattern
            Regex regexZipcode = new Regex(@"^(\\d{8}|\\d{5}\\-\\d{3})$", RegexOptions.CultureInvariant);
            if (false == regexZipcode.Match(this.Zipcode).Success)
            {
                yield return new ValidationResult("Invalid value for Zipcode, must match a pattern of /^(\\d{8}|\\d{5}\\-\\d{3})$/.", new [] { "Zipcode" });
            }

            // CityCode (string) pattern
            Regex regexCityCode = new Regex(@"^(\\d{7})$", RegexOptions.CultureInvariant);
            if (false == regexCityCode.Match(this.CityCode).Success)
            {
                yield return new ValidationResult("Invalid value for CityCode, must match a pattern of /^(\\d{7})$/.", new [] { "CityCode" });
            }

            // CityName (string) maxLength
            if(this.CityName != null && this.CityName.Length > 60)
            {
                yield return new ValidationResult("Invalid value for CityName, length must be less than 60.", new [] { "CityName" });
            }

            // CountryCode (string) pattern
            Regex regexCountryCode = new Regex(@"[0-9]{1,4}", RegexOptions.CultureInvariant);
            if (false == regexCountryCode.Match(this.CountryCode).Success)
            {
                yield return new ValidationResult("Invalid value for CountryCode, must match a pattern of /[0-9]{1,4}/.", new [] { "CountryCode" });
            }

            // Country (string) maxLength
            if(this.Country != null && this.Country.Length > 3)
            {
                yield return new ValidationResult("Invalid value for Country, length must be less than 3.", new [] { "Country" });
            }

            // Country (string) pattern
            Regex regexCountry = new Regex(@"^([A-Z]{3})$", RegexOptions.CultureInvariant);
            if (false == regexCountry.Match(this.Country).Success)
            {
                yield return new ValidationResult("Invalid value for Country, must match a pattern of /^([A-Z]{3})$/.", new [] { "Country" });
            }

            yield break;
        }
    }

}
