/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LineForGoodsIcmsTaxRelief
    /// </summary>
    [DataContract]
    public partial class LineForGoodsIcmsTaxRelief :  IEquatable<LineForGoodsIcmsTaxRelief>, IValidatableObject
    {
        /// <summary>
        /// When item transaction subject to desoneration, this is the reason code - '1' # Táxi; - '3' # Produtor Agropecuário; - '4' # Frotista/Locadora; - '5' # Diplomático/Consular; - '6' # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações); - '7' # SUFRAMA; - '8' # Venda a órgão Público; - '9' # Outros - '10' # Deficiente Condutor - '11' # Deficiente não condutor - '12' # Fomento agropecuário - '16' # Olimpíadas Rio 2016 
        /// </summary>
        /// <value>When item transaction subject to desoneration, this is the reason code - '1' # Táxi; - '3' # Produtor Agropecuário; - '4' # Frotista/Locadora; - '5' # Diplomático/Consular; - '6' # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações); - '7' # SUFRAMA; - '8' # Venda a órgão Público; - '9' # Outros - '10' # Deficiente Condutor - '11' # Deficiente não condutor - '12' # Fomento agropecuário - '16' # Olimpíadas Rio 2016 </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonCodeEnum
        {
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1,
            
            /// <summary>
            /// Enum _3 for "3"
            /// </summary>
            [EnumMember(Value = "3")]
            _3,
            
            /// <summary>
            /// Enum _4 for "4"
            /// </summary>
            [EnumMember(Value = "4")]
            _4,
            
            /// <summary>
            /// Enum _5 for "5"
            /// </summary>
            [EnumMember(Value = "5")]
            _5,
            
            /// <summary>
            /// Enum _6 for "6"
            /// </summary>
            [EnumMember(Value = "6")]
            _6,
            
            /// <summary>
            /// Enum _7 for "7"
            /// </summary>
            [EnumMember(Value = "7")]
            _7,
            
            /// <summary>
            /// Enum _8 for "8"
            /// </summary>
            [EnumMember(Value = "8")]
            _8,
            
            /// <summary>
            /// Enum _9 for "9"
            /// </summary>
            [EnumMember(Value = "9")]
            _9,
            
            /// <summary>
            /// Enum _10 for "10"
            /// </summary>
            [EnumMember(Value = "10")]
            _10,
            
            /// <summary>
            /// Enum _11 for "11"
            /// </summary>
            [EnumMember(Value = "11")]
            _11,
            
            /// <summary>
            /// Enum _12 for "12"
            /// </summary>
            [EnumMember(Value = "12")]
            _12,
            
            /// <summary>
            /// Enum _16 for "16"
            /// </summary>
            [EnumMember(Value = "16")]
            _16
        }

        /// <summary>
        /// When item transaction subject to desoneration, this is the reason code - '1' # Táxi; - '3' # Produtor Agropecuário; - '4' # Frotista/Locadora; - '5' # Diplomático/Consular; - '6' # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações); - '7' # SUFRAMA; - '8' # Venda a órgão Público; - '9' # Outros - '10' # Deficiente Condutor - '11' # Deficiente não condutor - '12' # Fomento agropecuário - '16' # Olimpíadas Rio 2016 
        /// </summary>
        /// <value>When item transaction subject to desoneration, this is the reason code - '1' # Táxi; - '3' # Produtor Agropecuário; - '4' # Frotista/Locadora; - '5' # Diplomático/Consular; - '6' # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações); - '7' # SUFRAMA; - '8' # Venda a órgão Público; - '9' # Outros - '10' # Deficiente Condutor - '11' # Deficiente não condutor - '12' # Fomento agropecuário - '16' # Olimpíadas Rio 2016 </value>
        [DataMember(Name="reasonCode", EmitDefaultValue=false)]
        public ReasonCodeEnum? ReasonCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LineForGoodsIcmsTaxRelief" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LineForGoodsIcmsTaxRelief() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LineForGoodsIcmsTaxRelief" /> class.
        /// </summary>
        /// <param name="ReasonCode">When item transaction subject to desoneration, this is the reason code - &#39;1&#39; # Táxi; - &#39;3&#39; # Produtor Agropecuário; - &#39;4&#39; # Frotista/Locadora; - &#39;5&#39; # Diplomático/Consular; - &#39;6&#39; # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações); - &#39;7&#39; # SUFRAMA; - &#39;8&#39; # Venda a órgão Público; - &#39;9&#39; # Outros - &#39;10&#39; # Deficiente Condutor - &#39;11&#39; # Deficiente não condutor - &#39;12&#39; # Fomento agropecuário - &#39;16&#39; # Olimpíadas Rio 2016  (required).</param>
        /// <param name="TaxBaseDiscount">ICMS Tax base rate discount  (desconto na base do ICMS referetne a desoneração).</param>
        /// <param name="TaxAmount">Amount for Icms Relief (desoneração).</param>
        public LineForGoodsIcmsTaxRelief(ReasonCodeEnum? ReasonCode = default(ReasonCodeEnum?), double? TaxBaseDiscount = default(double?), double? TaxAmount = default(double?))
        {
            // to ensure "ReasonCode" is required (not null)
            if (ReasonCode == null)
            {
                throw new InvalidDataException("ReasonCode is a required property for LineForGoodsIcmsTaxRelief and cannot be null");
            }
            else
            {
                this.ReasonCode = ReasonCode;
            }
            this.TaxBaseDiscount = TaxBaseDiscount;
            this.TaxAmount = TaxAmount;
        }
        
        /// <summary>
        /// ICMS Tax base rate discount  (desconto na base do ICMS referetne a desoneração)
        /// </summary>
        /// <value>ICMS Tax base rate discount  (desconto na base do ICMS referetne a desoneração)</value>
        [DataMember(Name="taxBaseDiscount", EmitDefaultValue=false)]
        public double? TaxBaseDiscount { get; set; }
        /// <summary>
        /// Amount for Icms Relief (desoneração)
        /// </summary>
        /// <value>Amount for Icms Relief (desoneração)</value>
        [DataMember(Name="taxAmount", EmitDefaultValue=false)]
        public double? TaxAmount { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LineForGoodsIcmsTaxRelief {\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  TaxBaseDiscount: ").Append(TaxBaseDiscount).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LineForGoodsIcmsTaxRelief);
        }

        /// <summary>
        /// Returns true if LineForGoodsIcmsTaxRelief instances are equal
        /// </summary>
        /// <param name="other">Instance of LineForGoodsIcmsTaxRelief to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineForGoodsIcmsTaxRelief other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ReasonCode == other.ReasonCode ||
                    this.ReasonCode != null &&
                    this.ReasonCode.Equals(other.ReasonCode)
                ) && 
                (
                    this.TaxBaseDiscount == other.TaxBaseDiscount ||
                    this.TaxBaseDiscount != null &&
                    this.TaxBaseDiscount.Equals(other.TaxBaseDiscount)
                ) && 
                (
                    this.TaxAmount == other.TaxAmount ||
                    this.TaxAmount != null &&
                    this.TaxAmount.Equals(other.TaxAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ReasonCode != null)
                    hash = hash * 59 + this.ReasonCode.GetHashCode();
                if (this.TaxBaseDiscount != null)
                    hash = hash * 59 + this.TaxBaseDiscount.GetHashCode();
                if (this.TaxAmount != null)
                    hash = hash * 59 + this.TaxAmount.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
