/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LineForGoodsIcmsTaxRelief
    /// </summary>
    [DataContract]
    public partial class LineForGoodsIcmsTaxRelief :  IEquatable<LineForGoodsIcmsTaxRelief>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LineForGoodsIcmsTaxRelief" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LineForGoodsIcmsTaxRelief() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LineForGoodsIcmsTaxRelief" /> class.
        /// </summary>
        /// <param name="IcmsTaxReliefReasonCode">When item transaction subject to desoneration, this is the reason code - 1 # Táxi; - 3 # Produtor Agropecuário; - 4 # Frotista/Locadora; - 5 # Diplomático/Consular; - 6 # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações); - 7 # SUFRAMA; - 8 # Venda a órgão Público; - 9 # Outros - 10 # Deficiente Condutor - 11 # Deficiente não condutor - 12 # Fomento agropecuário - 16 # Olimpíadas Rio 2016  (required).</param>
        /// <param name="IcmsReliefTaxRate">ICMS Tax base rate discount  (desconto na base do ICMS referetne a desoneração).</param>
        /// <param name="IcmsReliefTaxAmount">Amount for Icms Relief (desoneração).</param>
        public LineForGoodsIcmsTaxRelief(int? IcmsTaxReliefReasonCode = default(int?), double? IcmsReliefTaxRate = default(double?), double? IcmsReliefTaxAmount = default(double?))
        {
            // to ensure "IcmsTaxReliefReasonCode" is required (not null)
            if (IcmsTaxReliefReasonCode == null)
            {
                throw new InvalidDataException("IcmsTaxReliefReasonCode is a required property for LineForGoodsIcmsTaxRelief and cannot be null");
            }
            else
            {
                this.IcmsTaxReliefReasonCode = IcmsTaxReliefReasonCode;
            }
            this.IcmsReliefTaxRate = IcmsReliefTaxRate;
            this.IcmsReliefTaxAmount = IcmsReliefTaxAmount;
        }
        
        /// <summary>
        /// When item transaction subject to desoneration, this is the reason code - 1 # Táxi; - 3 # Produtor Agropecuário; - 4 # Frotista/Locadora; - 5 # Diplomático/Consular; - 6 # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações); - 7 # SUFRAMA; - 8 # Venda a órgão Público; - 9 # Outros - 10 # Deficiente Condutor - 11 # Deficiente não condutor - 12 # Fomento agropecuário - 16 # Olimpíadas Rio 2016 
        /// </summary>
        /// <value>When item transaction subject to desoneration, this is the reason code - 1 # Táxi; - 3 # Produtor Agropecuário; - 4 # Frotista/Locadora; - 5 # Diplomático/Consular; - 6 # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações); - 7 # SUFRAMA; - 8 # Venda a órgão Público; - 9 # Outros - 10 # Deficiente Condutor - 11 # Deficiente não condutor - 12 # Fomento agropecuário - 16 # Olimpíadas Rio 2016 </value>
        [DataMember(Name="icmsTaxReliefReasonCode", EmitDefaultValue=false)]
        public int? IcmsTaxReliefReasonCode { get; set; }
        /// <summary>
        /// ICMS Tax base rate discount  (desconto na base do ICMS referetne a desoneração)
        /// </summary>
        /// <value>ICMS Tax base rate discount  (desconto na base do ICMS referetne a desoneração)</value>
        [DataMember(Name="icmsReliefTaxRate", EmitDefaultValue=false)]
        public double? IcmsReliefTaxRate { get; set; }
        /// <summary>
        /// Amount for Icms Relief (desoneração)
        /// </summary>
        /// <value>Amount for Icms Relief (desoneração)</value>
        [DataMember(Name="icmsReliefTaxAmount", EmitDefaultValue=false)]
        public double? IcmsReliefTaxAmount { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LineForGoodsIcmsTaxRelief {\n");
            sb.Append("  IcmsTaxReliefReasonCode: ").Append(IcmsTaxReliefReasonCode).Append("\n");
            sb.Append("  IcmsReliefTaxRate: ").Append(IcmsReliefTaxRate).Append("\n");
            sb.Append("  IcmsReliefTaxAmount: ").Append(IcmsReliefTaxAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LineForGoodsIcmsTaxRelief);
        }

        /// <summary>
        /// Returns true if LineForGoodsIcmsTaxRelief instances are equal
        /// </summary>
        /// <param name="other">Instance of LineForGoodsIcmsTaxRelief to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineForGoodsIcmsTaxRelief other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IcmsTaxReliefReasonCode == other.IcmsTaxReliefReasonCode ||
                    this.IcmsTaxReliefReasonCode != null &&
                    this.IcmsTaxReliefReasonCode.Equals(other.IcmsTaxReliefReasonCode)
                ) && 
                (
                    this.IcmsReliefTaxRate == other.IcmsReliefTaxRate ||
                    this.IcmsReliefTaxRate != null &&
                    this.IcmsReliefTaxRate.Equals(other.IcmsReliefTaxRate)
                ) && 
                (
                    this.IcmsReliefTaxAmount == other.IcmsReliefTaxAmount ||
                    this.IcmsReliefTaxAmount != null &&
                    this.IcmsReliefTaxAmount.Equals(other.IcmsReliefTaxAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IcmsTaxReliefReasonCode != null)
                    hash = hash * 59 + this.IcmsTaxReliefReasonCode.GetHashCode();
                if (this.IcmsReliefTaxRate != null)
                    hash = hash * 59 + this.IcmsReliefTaxRate.GetHashCode();
                if (this.IcmsReliefTaxAmount != null)
                    hash = hash * 59 + this.IcmsReliefTaxAmount.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
