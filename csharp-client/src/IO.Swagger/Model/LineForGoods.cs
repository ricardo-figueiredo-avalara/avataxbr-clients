/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LineForGoods
    /// </summary>
    [DataContract]
    public partial class LineForGoods :  IEquatable<LineForGoods>, IValidatableObject
    {
        /// <summary>
        /// This is a enumeration folowing table
        /// </summary>
        /// <value>This is a enumeration folowing table</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UseTypeEnum
        {
            
            /// <summary>
            /// Enum Useorconsumption for "use or consumption"
            /// </summary>
            [EnumMember(Value = "use or consumption")]
            Useorconsumption,
            
            /// <summary>
            /// Enum Resale for "resale"
            /// </summary>
            [EnumMember(Value = "resale")]
            Resale,
            
            /// <summary>
            /// Enum Agriculturalproduction for "agricultural production"
            /// </summary>
            [EnumMember(Value = "agricultural production")]
            Agriculturalproduction,
            
            /// <summary>
            /// Enum Production for "production"
            /// </summary>
            [EnumMember(Value = "production")]
            Production,
            
            /// <summary>
            /// Enum Useorconsumptiononbusinessestablishment for "use or consumption on business establishment"
            /// </summary>
            [EnumMember(Value = "use or consumption on business establishment")]
            Useorconsumptiononbusinessestablishment,
            
            /// <summary>
            /// Enum Useorconsumptionontransporterserviceestablishment for "use or consumption on transporter service establishment"
            /// </summary>
            [EnumMember(Value = "use or consumption on transporter service establishment")]
            Useorconsumptionontransporterserviceestablishment,
            
            /// <summary>
            /// Enum Useorconsumptiononcommunicationserviceestablishment for "use or consumption on communication service establishment"
            /// </summary>
            [EnumMember(Value = "use or consumption on communication service establishment")]
            Useorconsumptiononcommunicationserviceestablishment,
            
            /// <summary>
            /// Enum Useorconsumptionondemandbycontract for "use or consumption on demand by contract"
            /// </summary>
            [EnumMember(Value = "use or consumption on demand by contract")]
            Useorconsumptionondemandbycontract,
            
            /// <summary>
            /// Enum Useorconsumptiononenergysupplierestablishment for "use or consumption on energy supplier establishment"
            /// </summary>
            [EnumMember(Value = "use or consumption on energy supplier establishment")]
            Useorconsumptiononenergysupplierestablishment,
            
            /// <summary>
            /// Enum Useorconsumptionoffueltransactiontypeexportation for "use or consumption of fuel transaction type exportation"
            /// </summary>
            [EnumMember(Value = "use or consumption of fuel transaction type exportation")]
            Useorconsumptionoffueltransactiontypeexportation,
            
            /// <summary>
            /// Enum Fixedassets for "fixed assets"
            /// </summary>
            [EnumMember(Value = "fixed assets")]
            Fixedassets,
            
            /// <summary>
            /// Enum Resaleexport for "resale export"
            /// </summary>
            [EnumMember(Value = "resale export")]
            Resaleexport,
            
            /// <summary>
            /// Enum Resaleicmsexempt for "resale icms exempt"
            /// </summary>
            [EnumMember(Value = "resale icms exempt")]
            Resaleicmsexempt,
            
            /// <summary>
            /// Enum ResalebuyerunderthesameicmsSttaxrule for "resale buyer under the same icmsSt tax rule"
            /// </summary>
            [EnumMember(Value = "resale buyer under the same icmsSt tax rule")]
            ResalebuyerunderthesameicmsSttaxrule,
            
            /// <summary>
            /// Enum Transportofgoodsthatdontneedinvoicenf for "transport of goods that don't need invoice (nf)"
            /// </summary>
            [EnumMember(Value = "transport of goods that don't need invoice (nf)")]
            Transportofgoodsthatdontneedinvoicenf
        }

        /// <summary>
        /// This is a enumeration folowing table
        /// </summary>
        /// <value>This is a enumeration folowing table</value>
        [DataMember(Name="useType", EmitDefaultValue=false)]
        public UseTypeEnum? UseType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LineForGoods" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LineForGoods() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LineForGoods" /> class.
        /// </summary>
        /// <param name="LineCode">This string is a unique identifier for this line in the transaction (required).</param>
        /// <param name="ItemCode">This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states. (required).</param>
        /// <param name="AvalaraGoodsAndServicesType">AGAST CODE for itemCode.</param>
        /// <param name="NumberOfItems">This decimal 11 integers and 1 to 4 decimals captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1 (required) (default to 1.0).</param>
        /// <param name="ReturnedPercentageAmount">when is return operation this field inform the percentage of returned itens. This decimal max 3 integers and 2 decimals, v &gt;&#x3D;0.00 and v &lt;&#x3D; 100.00.</param>
        /// <param name="LineUnitPrice">This decimal 11 integers and 1 to 10 decimals captures the unit price of this line..</param>
        /// <param name="LineAmount">In its simplest form lineAmount &#x3D; (item price * numberOfItems). If taxIncluded is &#39;true&#39;, lineAmount &#x3D; (item price * numberOfItems + tax). (required).</param>
        /// <param name="ItemDescription">This string captures the description of the item represented by this line, will be used LC 116 (required).</param>
        /// <param name="LineTaxedDiscount">Discount conditional, This decimal 13 integers and 0 to 2 decimals.</param>
        /// <param name="LineUntaxedDiscount">discount unconditional, This decimal 13 integers and 0 to 2 decimals.</param>
        /// <param name="UseType">This is a enumeration folowing table (required).</param>
        /// <param name="ProcessScenario">Reference to process configurantion of this transaction, See ProcessScenario definition (required).</param>
        /// <param name="Cfop">Fiscal Operation Code of transport service.</param>
        /// <param name="HasStockImpact">return if this transaction has stock impact for this process or CFOP.</param>
        /// <param name="HasFinantialImpact">return if this transaction has finantial impact for this process or CFOP.</param>
        /// <param name="FreightAmount">This decimal 13 integers and 0 to 2 decimals.</param>
        /// <param name="InsuranceAmount">This decimal 13 integers and 0 to 2 decimals.</param>
        /// <param name="OtherCostAmount">This decimal 13 integers and 0 to 2 decimals.</param>
        /// <param name="IndTotType">The item value will compose the invoice total value. (default to true).</param>
        /// <param name="OrderNumber">order number, information used for B2B control process.</param>
        /// <param name="OrderItemNumber">number of the item from order number, information used for B2B control process.</param>
        /// <param name="FciNumber">Gloal Unique identifier (Importation form).</param>
        /// <param name="RecopiNumber">RECOPI number.</param>
        /// <param name="InfAdProd">additional information about product (referenced standard, complementary info, etc).</param>
        /// <param name="Vehicle">Vehicle.</param>
        /// <param name="Medicine">Medicine.</param>
        /// <param name="Weapon">Weapon.</param>
        /// <param name="Fuel">Fuel.</param>
        /// <param name="EntityIsIcmsSubstitute">Inform that for this item the Entity referenced is ICMS Substitute.</param>
        /// <param name="IsTransportIcmsWithheld">Inform that this item has ICMS withheld for transport value service..</param>
        /// <param name="IcmsTaxRelief">IcmsTaxRelief.</param>
        /// <param name="Export">Exportation detail.</param>
        /// <param name="Di">Import declaration.</param>
        /// <param name="CalculatedTax">CalculatedTax.</param>
        public LineForGoods(int? LineCode = default(int?), string ItemCode = default(string), string AvalaraGoodsAndServicesType = default(string), double? NumberOfItems = 1.0, double? ReturnedPercentageAmount = default(double?), double? LineUnitPrice = default(double?), double? LineAmount = default(double?), string ItemDescription = default(string), double? LineTaxedDiscount = default(double?), double? LineUntaxedDiscount = default(double?), UseTypeEnum? UseType = default(UseTypeEnum?), string ProcessScenario = default(string), int? Cfop = default(int?), bool? HasStockImpact = default(bool?), bool? HasFinantialImpact = default(bool?), double? FreightAmount = default(double?), double? InsuranceAmount = default(double?), double? OtherCostAmount = default(double?), bool? IndTotType = true, string OrderNumber = default(string), string OrderItemNumber = default(string), string FciNumber = default(string), string RecopiNumber = default(string), string InfAdProd = default(string), Vehicle Vehicle = default(Vehicle), Medicine Medicine = default(Medicine), Weapon Weapon = default(Weapon), Fuel Fuel = default(Fuel), bool? EntityIsIcmsSubstitute = default(bool?), bool? IsTransportIcmsWithheld = default(bool?), LineForGoodsIcmsTaxRelief IcmsTaxRelief = default(LineForGoodsIcmsTaxRelief), List<LineForGoodsExport> Export = default(List<LineForGoodsExport>), List<LineForGoodsDi> Di = default(List<LineForGoodsDi>), LineForGoodsCalculatedTax CalculatedTax = default(LineForGoodsCalculatedTax))
        {
            // to ensure "LineCode" is required (not null)
            if (LineCode == null)
            {
                throw new InvalidDataException("LineCode is a required property for LineForGoods and cannot be null");
            }
            else
            {
                this.LineCode = LineCode;
            }
            // to ensure "ItemCode" is required (not null)
            if (ItemCode == null)
            {
                throw new InvalidDataException("ItemCode is a required property for LineForGoods and cannot be null");
            }
            else
            {
                this.ItemCode = ItemCode;
            }
            // to ensure "NumberOfItems" is required (not null)
            if (NumberOfItems == null)
            {
                throw new InvalidDataException("NumberOfItems is a required property for LineForGoods and cannot be null");
            }
            else
            {
                this.NumberOfItems = NumberOfItems;
            }
            // to ensure "LineAmount" is required (not null)
            if (LineAmount == null)
            {
                throw new InvalidDataException("LineAmount is a required property for LineForGoods and cannot be null");
            }
            else
            {
                this.LineAmount = LineAmount;
            }
            // to ensure "ItemDescription" is required (not null)
            if (ItemDescription == null)
            {
                throw new InvalidDataException("ItemDescription is a required property for LineForGoods and cannot be null");
            }
            else
            {
                this.ItemDescription = ItemDescription;
            }
            // to ensure "UseType" is required (not null)
            if (UseType == null)
            {
                throw new InvalidDataException("UseType is a required property for LineForGoods and cannot be null");
            }
            else
            {
                this.UseType = UseType;
            }
            // to ensure "ProcessScenario" is required (not null)
            if (ProcessScenario == null)
            {
                throw new InvalidDataException("ProcessScenario is a required property for LineForGoods and cannot be null");
            }
            else
            {
                this.ProcessScenario = ProcessScenario;
            }
            this.AvalaraGoodsAndServicesType = AvalaraGoodsAndServicesType;
            this.ReturnedPercentageAmount = ReturnedPercentageAmount;
            this.LineUnitPrice = LineUnitPrice;
            this.LineTaxedDiscount = LineTaxedDiscount;
            this.LineUntaxedDiscount = LineUntaxedDiscount;
            this.Cfop = Cfop;
            this.HasStockImpact = HasStockImpact;
            this.HasFinantialImpact = HasFinantialImpact;
            this.FreightAmount = FreightAmount;
            this.InsuranceAmount = InsuranceAmount;
            this.OtherCostAmount = OtherCostAmount;
            // use default value if no "IndTotType" provided
            if (IndTotType == null)
            {
                this.IndTotType = true;
            }
            else
            {
                this.IndTotType = IndTotType;
            }
            this.OrderNumber = OrderNumber;
            this.OrderItemNumber = OrderItemNumber;
            this.FciNumber = FciNumber;
            this.RecopiNumber = RecopiNumber;
            this.InfAdProd = InfAdProd;
            this.Vehicle = Vehicle;
            this.Medicine = Medicine;
            this.Weapon = Weapon;
            this.Fuel = Fuel;
            this.EntityIsIcmsSubstitute = EntityIsIcmsSubstitute;
            this.IsTransportIcmsWithheld = IsTransportIcmsWithheld;
            this.IcmsTaxRelief = IcmsTaxRelief;
            this.Export = Export;
            this.Di = Di;
            this.CalculatedTax = CalculatedTax;
        }
        
        /// <summary>
        /// This string is a unique identifier for this line in the transaction
        /// </summary>
        /// <value>This string is a unique identifier for this line in the transaction</value>
        [DataMember(Name="lineCode", EmitDefaultValue=false)]
        public int? LineCode { get; set; }
        /// <summary>
        /// This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states.
        /// </summary>
        /// <value>This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states.</value>
        [DataMember(Name="itemCode", EmitDefaultValue=false)]
        public string ItemCode { get; set; }
        /// <summary>
        /// AGAST CODE for itemCode
        /// </summary>
        /// <value>AGAST CODE for itemCode</value>
        [DataMember(Name="avalaraGoodsAndServicesType", EmitDefaultValue=false)]
        public string AvalaraGoodsAndServicesType { get; set; }
        /// <summary>
        /// This decimal 11 integers and 1 to 4 decimals captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1
        /// </summary>
        /// <value>This decimal 11 integers and 1 to 4 decimals captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1</value>
        [DataMember(Name="numberOfItems", EmitDefaultValue=false)]
        public double? NumberOfItems { get; set; }
        /// <summary>
        /// when is return operation this field inform the percentage of returned itens. This decimal max 3 integers and 2 decimals, v &gt;&#x3D;0.00 and v &lt;&#x3D; 100.00
        /// </summary>
        /// <value>when is return operation this field inform the percentage of returned itens. This decimal max 3 integers and 2 decimals, v &gt;&#x3D;0.00 and v &lt;&#x3D; 100.00</value>
        [DataMember(Name="returnedPercentageAmount", EmitDefaultValue=false)]
        public double? ReturnedPercentageAmount { get; set; }
        /// <summary>
        /// This decimal 11 integers and 1 to 10 decimals captures the unit price of this line.
        /// </summary>
        /// <value>This decimal 11 integers and 1 to 10 decimals captures the unit price of this line.</value>
        [DataMember(Name="lineUnitPrice", EmitDefaultValue=false)]
        public double? LineUnitPrice { get; set; }
        /// <summary>
        /// In its simplest form lineAmount &#x3D; (item price * numberOfItems). If taxIncluded is &#39;true&#39;, lineAmount &#x3D; (item price * numberOfItems + tax).
        /// </summary>
        /// <value>In its simplest form lineAmount &#x3D; (item price * numberOfItems). If taxIncluded is &#39;true&#39;, lineAmount &#x3D; (item price * numberOfItems + tax).</value>
        [DataMember(Name="lineAmount", EmitDefaultValue=false)]
        public double? LineAmount { get; set; }
        /// <summary>
        /// This string captures the description of the item represented by this line, will be used LC 116
        /// </summary>
        /// <value>This string captures the description of the item represented by this line, will be used LC 116</value>
        [DataMember(Name="itemDescription", EmitDefaultValue=false)]
        public string ItemDescription { get; set; }
        /// <summary>
        /// Discount conditional, This decimal 13 integers and 0 to 2 decimals
        /// </summary>
        /// <value>Discount conditional, This decimal 13 integers and 0 to 2 decimals</value>
        [DataMember(Name="lineTaxedDiscount", EmitDefaultValue=false)]
        public double? LineTaxedDiscount { get; set; }
        /// <summary>
        /// discount unconditional, This decimal 13 integers and 0 to 2 decimals
        /// </summary>
        /// <value>discount unconditional, This decimal 13 integers and 0 to 2 decimals</value>
        [DataMember(Name="lineUntaxedDiscount", EmitDefaultValue=false)]
        public double? LineUntaxedDiscount { get; set; }
        /// <summary>
        /// Reference to process configurantion of this transaction, See ProcessScenario definition
        /// </summary>
        /// <value>Reference to process configurantion of this transaction, See ProcessScenario definition</value>
        [DataMember(Name="processScenario", EmitDefaultValue=false)]
        public string ProcessScenario { get; set; }
        /// <summary>
        /// Fiscal Operation Code of transport service
        /// </summary>
        /// <value>Fiscal Operation Code of transport service</value>
        [DataMember(Name="cfop", EmitDefaultValue=false)]
        public int? Cfop { get; set; }
        /// <summary>
        /// return if this transaction has stock impact for this process or CFOP
        /// </summary>
        /// <value>return if this transaction has stock impact for this process or CFOP</value>
        [DataMember(Name="hasStockImpact", EmitDefaultValue=false)]
        public bool? HasStockImpact { get; set; }
        /// <summary>
        /// return if this transaction has finantial impact for this process or CFOP
        /// </summary>
        /// <value>return if this transaction has finantial impact for this process or CFOP</value>
        [DataMember(Name="hasFinantialImpact", EmitDefaultValue=false)]
        public bool? HasFinantialImpact { get; set; }
        /// <summary>
        /// This decimal 13 integers and 0 to 2 decimals
        /// </summary>
        /// <value>This decimal 13 integers and 0 to 2 decimals</value>
        [DataMember(Name="freightAmount", EmitDefaultValue=false)]
        public double? FreightAmount { get; set; }
        /// <summary>
        /// This decimal 13 integers and 0 to 2 decimals
        /// </summary>
        /// <value>This decimal 13 integers and 0 to 2 decimals</value>
        [DataMember(Name="insuranceAmount", EmitDefaultValue=false)]
        public double? InsuranceAmount { get; set; }
        /// <summary>
        /// This decimal 13 integers and 0 to 2 decimals
        /// </summary>
        /// <value>This decimal 13 integers and 0 to 2 decimals</value>
        [DataMember(Name="otherCostAmount", EmitDefaultValue=false)]
        public double? OtherCostAmount { get; set; }
        /// <summary>
        /// The item value will compose the invoice total value.
        /// </summary>
        /// <value>The item value will compose the invoice total value.</value>
        [DataMember(Name="indTotType", EmitDefaultValue=false)]
        public bool? IndTotType { get; set; }
        /// <summary>
        /// order number, information used for B2B control process
        /// </summary>
        /// <value>order number, information used for B2B control process</value>
        [DataMember(Name="orderNumber", EmitDefaultValue=false)]
        public string OrderNumber { get; set; }
        /// <summary>
        /// number of the item from order number, information used for B2B control process
        /// </summary>
        /// <value>number of the item from order number, information used for B2B control process</value>
        [DataMember(Name="orderItemNumber", EmitDefaultValue=false)]
        public string OrderItemNumber { get; set; }
        /// <summary>
        /// Gloal Unique identifier (Importation form)
        /// </summary>
        /// <value>Gloal Unique identifier (Importation form)</value>
        [DataMember(Name="fciNumber", EmitDefaultValue=false)]
        public string FciNumber { get; set; }
        /// <summary>
        /// RECOPI number
        /// </summary>
        /// <value>RECOPI number</value>
        [DataMember(Name="recopiNumber", EmitDefaultValue=false)]
        public string RecopiNumber { get; set; }
        /// <summary>
        /// additional information about product (referenced standard, complementary info, etc)
        /// </summary>
        /// <value>additional information about product (referenced standard, complementary info, etc)</value>
        [DataMember(Name="infAdProd", EmitDefaultValue=false)]
        public string InfAdProd { get; set; }
        /// <summary>
        /// Gets or Sets Vehicle
        /// </summary>
        [DataMember(Name="vehicle", EmitDefaultValue=false)]
        public Vehicle Vehicle { get; set; }
        /// <summary>
        /// Gets or Sets Medicine
        /// </summary>
        [DataMember(Name="medicine", EmitDefaultValue=false)]
        public Medicine Medicine { get; set; }
        /// <summary>
        /// Gets or Sets Weapon
        /// </summary>
        [DataMember(Name="weapon", EmitDefaultValue=false)]
        public Weapon Weapon { get; set; }
        /// <summary>
        /// Gets or Sets Fuel
        /// </summary>
        [DataMember(Name="fuel", EmitDefaultValue=false)]
        public Fuel Fuel { get; set; }
        /// <summary>
        /// Inform that for this item the Entity referenced is ICMS Substitute
        /// </summary>
        /// <value>Inform that for this item the Entity referenced is ICMS Substitute</value>
        [DataMember(Name="entityIsIcmsSubstitute", EmitDefaultValue=false)]
        public bool? EntityIsIcmsSubstitute { get; set; }
        /// <summary>
        /// Inform that this item has ICMS withheld for transport value service.
        /// </summary>
        /// <value>Inform that this item has ICMS withheld for transport value service.</value>
        [DataMember(Name="isTransportIcmsWithheld", EmitDefaultValue=false)]
        public bool? IsTransportIcmsWithheld { get; set; }
        /// <summary>
        /// Gets or Sets IcmsTaxRelief
        /// </summary>
        [DataMember(Name="icmsTaxRelief", EmitDefaultValue=false)]
        public LineForGoodsIcmsTaxRelief IcmsTaxRelief { get; set; }
        /// <summary>
        /// Exportation detail
        /// </summary>
        /// <value>Exportation detail</value>
        [DataMember(Name="export", EmitDefaultValue=false)]
        public List<LineForGoodsExport> Export { get; set; }
        /// <summary>
        /// Import declaration
        /// </summary>
        /// <value>Import declaration</value>
        [DataMember(Name="di", EmitDefaultValue=false)]
        public List<LineForGoodsDi> Di { get; set; }
        /// <summary>
        /// Gets or Sets CalculatedTax
        /// </summary>
        [DataMember(Name="calculatedTax", EmitDefaultValue=false)]
        public LineForGoodsCalculatedTax CalculatedTax { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LineForGoods {\n");
            sb.Append("  LineCode: ").Append(LineCode).Append("\n");
            sb.Append("  ItemCode: ").Append(ItemCode).Append("\n");
            sb.Append("  AvalaraGoodsAndServicesType: ").Append(AvalaraGoodsAndServicesType).Append("\n");
            sb.Append("  NumberOfItems: ").Append(NumberOfItems).Append("\n");
            sb.Append("  ReturnedPercentageAmount: ").Append(ReturnedPercentageAmount).Append("\n");
            sb.Append("  LineUnitPrice: ").Append(LineUnitPrice).Append("\n");
            sb.Append("  LineAmount: ").Append(LineAmount).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  LineTaxedDiscount: ").Append(LineTaxedDiscount).Append("\n");
            sb.Append("  LineUntaxedDiscount: ").Append(LineUntaxedDiscount).Append("\n");
            sb.Append("  UseType: ").Append(UseType).Append("\n");
            sb.Append("  ProcessScenario: ").Append(ProcessScenario).Append("\n");
            sb.Append("  Cfop: ").Append(Cfop).Append("\n");
            sb.Append("  HasStockImpact: ").Append(HasStockImpact).Append("\n");
            sb.Append("  HasFinantialImpact: ").Append(HasFinantialImpact).Append("\n");
            sb.Append("  FreightAmount: ").Append(FreightAmount).Append("\n");
            sb.Append("  InsuranceAmount: ").Append(InsuranceAmount).Append("\n");
            sb.Append("  OtherCostAmount: ").Append(OtherCostAmount).Append("\n");
            sb.Append("  IndTotType: ").Append(IndTotType).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  OrderItemNumber: ").Append(OrderItemNumber).Append("\n");
            sb.Append("  FciNumber: ").Append(FciNumber).Append("\n");
            sb.Append("  RecopiNumber: ").Append(RecopiNumber).Append("\n");
            sb.Append("  InfAdProd: ").Append(InfAdProd).Append("\n");
            sb.Append("  Vehicle: ").Append(Vehicle).Append("\n");
            sb.Append("  Medicine: ").Append(Medicine).Append("\n");
            sb.Append("  Weapon: ").Append(Weapon).Append("\n");
            sb.Append("  Fuel: ").Append(Fuel).Append("\n");
            sb.Append("  EntityIsIcmsSubstitute: ").Append(EntityIsIcmsSubstitute).Append("\n");
            sb.Append("  IsTransportIcmsWithheld: ").Append(IsTransportIcmsWithheld).Append("\n");
            sb.Append("  IcmsTaxRelief: ").Append(IcmsTaxRelief).Append("\n");
            sb.Append("  Export: ").Append(Export).Append("\n");
            sb.Append("  Di: ").Append(Di).Append("\n");
            sb.Append("  CalculatedTax: ").Append(CalculatedTax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LineForGoods);
        }

        /// <summary>
        /// Returns true if LineForGoods instances are equal
        /// </summary>
        /// <param name="other">Instance of LineForGoods to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineForGoods other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.LineCode == other.LineCode ||
                    this.LineCode != null &&
                    this.LineCode.Equals(other.LineCode)
                ) && 
                (
                    this.ItemCode == other.ItemCode ||
                    this.ItemCode != null &&
                    this.ItemCode.Equals(other.ItemCode)
                ) && 
                (
                    this.AvalaraGoodsAndServicesType == other.AvalaraGoodsAndServicesType ||
                    this.AvalaraGoodsAndServicesType != null &&
                    this.AvalaraGoodsAndServicesType.Equals(other.AvalaraGoodsAndServicesType)
                ) && 
                (
                    this.NumberOfItems == other.NumberOfItems ||
                    this.NumberOfItems != null &&
                    this.NumberOfItems.Equals(other.NumberOfItems)
                ) && 
                (
                    this.ReturnedPercentageAmount == other.ReturnedPercentageAmount ||
                    this.ReturnedPercentageAmount != null &&
                    this.ReturnedPercentageAmount.Equals(other.ReturnedPercentageAmount)
                ) && 
                (
                    this.LineUnitPrice == other.LineUnitPrice ||
                    this.LineUnitPrice != null &&
                    this.LineUnitPrice.Equals(other.LineUnitPrice)
                ) && 
                (
                    this.LineAmount == other.LineAmount ||
                    this.LineAmount != null &&
                    this.LineAmount.Equals(other.LineAmount)
                ) && 
                (
                    this.ItemDescription == other.ItemDescription ||
                    this.ItemDescription != null &&
                    this.ItemDescription.Equals(other.ItemDescription)
                ) && 
                (
                    this.LineTaxedDiscount == other.LineTaxedDiscount ||
                    this.LineTaxedDiscount != null &&
                    this.LineTaxedDiscount.Equals(other.LineTaxedDiscount)
                ) && 
                (
                    this.LineUntaxedDiscount == other.LineUntaxedDiscount ||
                    this.LineUntaxedDiscount != null &&
                    this.LineUntaxedDiscount.Equals(other.LineUntaxedDiscount)
                ) && 
                (
                    this.UseType == other.UseType ||
                    this.UseType != null &&
                    this.UseType.Equals(other.UseType)
                ) && 
                (
                    this.ProcessScenario == other.ProcessScenario ||
                    this.ProcessScenario != null &&
                    this.ProcessScenario.Equals(other.ProcessScenario)
                ) && 
                (
                    this.Cfop == other.Cfop ||
                    this.Cfop != null &&
                    this.Cfop.Equals(other.Cfop)
                ) && 
                (
                    this.HasStockImpact == other.HasStockImpact ||
                    this.HasStockImpact != null &&
                    this.HasStockImpact.Equals(other.HasStockImpact)
                ) && 
                (
                    this.HasFinantialImpact == other.HasFinantialImpact ||
                    this.HasFinantialImpact != null &&
                    this.HasFinantialImpact.Equals(other.HasFinantialImpact)
                ) && 
                (
                    this.FreightAmount == other.FreightAmount ||
                    this.FreightAmount != null &&
                    this.FreightAmount.Equals(other.FreightAmount)
                ) && 
                (
                    this.InsuranceAmount == other.InsuranceAmount ||
                    this.InsuranceAmount != null &&
                    this.InsuranceAmount.Equals(other.InsuranceAmount)
                ) && 
                (
                    this.OtherCostAmount == other.OtherCostAmount ||
                    this.OtherCostAmount != null &&
                    this.OtherCostAmount.Equals(other.OtherCostAmount)
                ) && 
                (
                    this.IndTotType == other.IndTotType ||
                    this.IndTotType != null &&
                    this.IndTotType.Equals(other.IndTotType)
                ) && 
                (
                    this.OrderNumber == other.OrderNumber ||
                    this.OrderNumber != null &&
                    this.OrderNumber.Equals(other.OrderNumber)
                ) && 
                (
                    this.OrderItemNumber == other.OrderItemNumber ||
                    this.OrderItemNumber != null &&
                    this.OrderItemNumber.Equals(other.OrderItemNumber)
                ) && 
                (
                    this.FciNumber == other.FciNumber ||
                    this.FciNumber != null &&
                    this.FciNumber.Equals(other.FciNumber)
                ) && 
                (
                    this.RecopiNumber == other.RecopiNumber ||
                    this.RecopiNumber != null &&
                    this.RecopiNumber.Equals(other.RecopiNumber)
                ) && 
                (
                    this.InfAdProd == other.InfAdProd ||
                    this.InfAdProd != null &&
                    this.InfAdProd.Equals(other.InfAdProd)
                ) && 
                (
                    this.Vehicle == other.Vehicle ||
                    this.Vehicle != null &&
                    this.Vehicle.Equals(other.Vehicle)
                ) && 
                (
                    this.Medicine == other.Medicine ||
                    this.Medicine != null &&
                    this.Medicine.Equals(other.Medicine)
                ) && 
                (
                    this.Weapon == other.Weapon ||
                    this.Weapon != null &&
                    this.Weapon.Equals(other.Weapon)
                ) && 
                (
                    this.Fuel == other.Fuel ||
                    this.Fuel != null &&
                    this.Fuel.Equals(other.Fuel)
                ) && 
                (
                    this.EntityIsIcmsSubstitute == other.EntityIsIcmsSubstitute ||
                    this.EntityIsIcmsSubstitute != null &&
                    this.EntityIsIcmsSubstitute.Equals(other.EntityIsIcmsSubstitute)
                ) && 
                (
                    this.IsTransportIcmsWithheld == other.IsTransportIcmsWithheld ||
                    this.IsTransportIcmsWithheld != null &&
                    this.IsTransportIcmsWithheld.Equals(other.IsTransportIcmsWithheld)
                ) && 
                (
                    this.IcmsTaxRelief == other.IcmsTaxRelief ||
                    this.IcmsTaxRelief != null &&
                    this.IcmsTaxRelief.Equals(other.IcmsTaxRelief)
                ) && 
                (
                    this.Export == other.Export ||
                    this.Export != null &&
                    this.Export.SequenceEqual(other.Export)
                ) && 
                (
                    this.Di == other.Di ||
                    this.Di != null &&
                    this.Di.SequenceEqual(other.Di)
                ) && 
                (
                    this.CalculatedTax == other.CalculatedTax ||
                    this.CalculatedTax != null &&
                    this.CalculatedTax.Equals(other.CalculatedTax)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.LineCode != null)
                    hash = hash * 59 + this.LineCode.GetHashCode();
                if (this.ItemCode != null)
                    hash = hash * 59 + this.ItemCode.GetHashCode();
                if (this.AvalaraGoodsAndServicesType != null)
                    hash = hash * 59 + this.AvalaraGoodsAndServicesType.GetHashCode();
                if (this.NumberOfItems != null)
                    hash = hash * 59 + this.NumberOfItems.GetHashCode();
                if (this.ReturnedPercentageAmount != null)
                    hash = hash * 59 + this.ReturnedPercentageAmount.GetHashCode();
                if (this.LineUnitPrice != null)
                    hash = hash * 59 + this.LineUnitPrice.GetHashCode();
                if (this.LineAmount != null)
                    hash = hash * 59 + this.LineAmount.GetHashCode();
                if (this.ItemDescription != null)
                    hash = hash * 59 + this.ItemDescription.GetHashCode();
                if (this.LineTaxedDiscount != null)
                    hash = hash * 59 + this.LineTaxedDiscount.GetHashCode();
                if (this.LineUntaxedDiscount != null)
                    hash = hash * 59 + this.LineUntaxedDiscount.GetHashCode();
                if (this.UseType != null)
                    hash = hash * 59 + this.UseType.GetHashCode();
                if (this.ProcessScenario != null)
                    hash = hash * 59 + this.ProcessScenario.GetHashCode();
                if (this.Cfop != null)
                    hash = hash * 59 + this.Cfop.GetHashCode();
                if (this.HasStockImpact != null)
                    hash = hash * 59 + this.HasStockImpact.GetHashCode();
                if (this.HasFinantialImpact != null)
                    hash = hash * 59 + this.HasFinantialImpact.GetHashCode();
                if (this.FreightAmount != null)
                    hash = hash * 59 + this.FreightAmount.GetHashCode();
                if (this.InsuranceAmount != null)
                    hash = hash * 59 + this.InsuranceAmount.GetHashCode();
                if (this.OtherCostAmount != null)
                    hash = hash * 59 + this.OtherCostAmount.GetHashCode();
                if (this.IndTotType != null)
                    hash = hash * 59 + this.IndTotType.GetHashCode();
                if (this.OrderNumber != null)
                    hash = hash * 59 + this.OrderNumber.GetHashCode();
                if (this.OrderItemNumber != null)
                    hash = hash * 59 + this.OrderItemNumber.GetHashCode();
                if (this.FciNumber != null)
                    hash = hash * 59 + this.FciNumber.GetHashCode();
                if (this.RecopiNumber != null)
                    hash = hash * 59 + this.RecopiNumber.GetHashCode();
                if (this.InfAdProd != null)
                    hash = hash * 59 + this.InfAdProd.GetHashCode();
                if (this.Vehicle != null)
                    hash = hash * 59 + this.Vehicle.GetHashCode();
                if (this.Medicine != null)
                    hash = hash * 59 + this.Medicine.GetHashCode();
                if (this.Weapon != null)
                    hash = hash * 59 + this.Weapon.GetHashCode();
                if (this.Fuel != null)
                    hash = hash * 59 + this.Fuel.GetHashCode();
                if (this.EntityIsIcmsSubstitute != null)
                    hash = hash * 59 + this.EntityIsIcmsSubstitute.GetHashCode();
                if (this.IsTransportIcmsWithheld != null)
                    hash = hash * 59 + this.IsTransportIcmsWithheld.GetHashCode();
                if (this.IcmsTaxRelief != null)
                    hash = hash * 59 + this.IcmsTaxRelief.GetHashCode();
                if (this.Export != null)
                    hash = hash * 59 + this.Export.GetHashCode();
                if (this.Di != null)
                    hash = hash * 59 + this.Di.GetHashCode();
                if (this.CalculatedTax != null)
                    hash = hash * 59 + this.CalculatedTax.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // ItemCode (string) maxLength
            if(this.ItemCode != null && this.ItemCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for ItemCode, length must be less than 60.", new [] { "ItemCode" });
            }

            // ProcessScenario (string) maxLength
            if(this.ProcessScenario != null && this.ProcessScenario.Length > 60)
            {
                yield return new ValidationResult("Invalid value for ProcessScenario, length must be less than 60.", new [] { "ProcessScenario" });
            }

            // OrderNumber (string) maxLength
            if(this.OrderNumber != null && this.OrderNumber.Length > 15)
            {
                yield return new ValidationResult("Invalid value for OrderNumber, length must be less than 15.", new [] { "OrderNumber" });
            }

            // OrderNumber (string) minLength
            if(this.OrderNumber != null && this.OrderNumber.Length < 1)
            {
                yield return new ValidationResult("Invalid value for OrderNumber, length must be greater than 1.", new [] { "OrderNumber" });
            }

            // OrderItemNumber (string) pattern
            Regex regexOrderItemNumber = new Regex(@"[0-9]{1,6}", RegexOptions.CultureInvariant);
            if (false == regexOrderItemNumber.Match(this.OrderItemNumber).Success)
            {
                yield return new ValidationResult("Invalid value for OrderItemNumber, must match a pattern of /[0-9]{1,6}/.", new [] { "OrderItemNumber" });
            }

            // FciNumber (string) pattern
            Regex regexFciNumber = new Regex(@"[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}", RegexOptions.CultureInvariant);
            if (false == regexFciNumber.Match(this.FciNumber).Success)
            {
                yield return new ValidationResult("Invalid value for FciNumber, must match a pattern of /[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/.", new [] { "FciNumber" });
            }

            // RecopiNumber (string) maxLength
            if(this.RecopiNumber != null && this.RecopiNumber.Length > 20)
            {
                yield return new ValidationResult("Invalid value for RecopiNumber, length must be less than 20.", new [] { "RecopiNumber" });
            }

            // RecopiNumber (string) pattern
            Regex regexRecopiNumber = new Regex(@"[0-9]{20}", RegexOptions.CultureInvariant);
            if (false == regexRecopiNumber.Match(this.RecopiNumber).Success)
            {
                yield return new ValidationResult("Invalid value for RecopiNumber, must match a pattern of /[0-9]{20}/.", new [] { "RecopiNumber" });
            }

            // InfAdProd (string) maxLength
            if(this.InfAdProd != null && this.InfAdProd.Length > 500)
            {
                yield return new ValidationResult("Invalid value for InfAdProd, length must be less than 500.", new [] { "InfAdProd" });
            }

            yield break;
        }
    }

}
