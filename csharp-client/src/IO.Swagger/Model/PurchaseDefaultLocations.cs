/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// This element contains a dictionary of locations such as the origin and destination addresses to be associated with this transaction. There can only be one location of a given purpose in the dictionary.
    /// </summary>
    [DataContract]
    public partial class PurchaseDefaultLocations :  IEquatable<PurchaseDefaultLocations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseDefaultLocations" /> class.
        /// </summary>
        /// <param name="PointOfOrderOrigin">PointOfOrderOrigin.</param>
        public PurchaseDefaultLocations(PointOfOrderOrigin PointOfOrderOrigin = default(PointOfOrderOrigin))
        {
            this.PointOfOrderOrigin = PointOfOrderOrigin;
        }
        
        /// <summary>
        /// Gets or Sets PointOfOrderOrigin
        /// </summary>
        [DataMember(Name="PointOfOrderOrigin", EmitDefaultValue=false)]
        public PointOfOrderOrigin PointOfOrderOrigin { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseDefaultLocations {\n");
            sb.Append("  PointOfOrderOrigin: ").Append(PointOfOrderOrigin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PurchaseDefaultLocations);
        }

        /// <summary>
        /// Returns true if PurchaseDefaultLocations instances are equal
        /// </summary>
        /// <param name="other">Instance of PurchaseDefaultLocations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseDefaultLocations other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PointOfOrderOrigin == other.PointOfOrderOrigin ||
                    this.PointOfOrderOrigin != null &&
                    this.PointOfOrderOrigin.Equals(other.PointOfOrderOrigin)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PointOfOrderOrigin != null)
                    hash = hash * 59 + this.PointOfOrderOrigin.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
