/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Bill information
    /// </summary>
    [DataContract]
    public partial class PaymentBill :  IEquatable<PaymentBill>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentBill" /> class.
        /// </summary>
        /// <param name="NFat">Bill identifier.</param>
        /// <param name="VOrig">Orignal value.</param>
        /// <param name="VDiscount">Discount.</param>
        /// <param name="VNet">Net value.</param>
        public PaymentBill(string NFat = default(string), double? VOrig = default(double?), double? VDiscount = default(double?), double? VNet = default(double?))
        {
            this.NFat = NFat;
            this.VOrig = VOrig;
            this.VDiscount = VDiscount;
            this.VNet = VNet;
        }
        
        /// <summary>
        /// Bill identifier
        /// </summary>
        /// <value>Bill identifier</value>
        [DataMember(Name="nFat", EmitDefaultValue=false)]
        public string NFat { get; set; }
        /// <summary>
        /// Orignal value
        /// </summary>
        /// <value>Orignal value</value>
        [DataMember(Name="vOrig", EmitDefaultValue=false)]
        public double? VOrig { get; set; }
        /// <summary>
        /// Discount
        /// </summary>
        /// <value>Discount</value>
        [DataMember(Name="vDiscount", EmitDefaultValue=false)]
        public double? VDiscount { get; set; }
        /// <summary>
        /// Net value
        /// </summary>
        /// <value>Net value</value>
        [DataMember(Name="vNet", EmitDefaultValue=false)]
        public double? VNet { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentBill {\n");
            sb.Append("  NFat: ").Append(NFat).Append("\n");
            sb.Append("  VOrig: ").Append(VOrig).Append("\n");
            sb.Append("  VDiscount: ").Append(VDiscount).Append("\n");
            sb.Append("  VNet: ").Append(VNet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaymentBill);
        }

        /// <summary>
        /// Returns true if PaymentBill instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentBill to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentBill other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.NFat == other.NFat ||
                    this.NFat != null &&
                    this.NFat.Equals(other.NFat)
                ) && 
                (
                    this.VOrig == other.VOrig ||
                    this.VOrig != null &&
                    this.VOrig.Equals(other.VOrig)
                ) && 
                (
                    this.VDiscount == other.VDiscount ||
                    this.VDiscount != null &&
                    this.VDiscount.Equals(other.VDiscount)
                ) && 
                (
                    this.VNet == other.VNet ||
                    this.VNet != null &&
                    this.VNet.Equals(other.VNet)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.NFat != null)
                    hash = hash * 59 + this.NFat.GetHashCode();
                if (this.VOrig != null)
                    hash = hash * 59 + this.VOrig.GetHashCode();
                if (this.VDiscount != null)
                    hash = hash * 59 + this.VDiscount.GetHashCode();
                if (this.VNet != null)
                    hash = hash * 59 + this.VNet.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // NFat (string) maxLength
            if(this.NFat != null && this.NFat.Length > 60)
            {
                yield return new ValidationResult("Invalid value for NFat, length must be less than 60.", new [] { "NFat" });
            }

            // NFat (string) minLength
            if(this.NFat != null && this.NFat.Length < 1)
            {
                yield return new ValidationResult("Invalid value for NFat, length must be greater than 1.", new [] { "NFat" });
            }

            yield break;
        }
    }

}
