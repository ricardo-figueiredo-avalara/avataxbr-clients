/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Weapon
    /// </summary>
    [DataContract]
    public partial class Weapon :  IEquatable<Weapon>, IValidatableObject
    {
        /// <summary>
        /// - '0' # restrict use - '1' # public use 
        /// </summary>
        /// <value>- '0' # restrict use - '1' # public use </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WeaponRestrictionTypeEnum
        {
            
            /// <summary>
            /// Enum _0 for "0"
            /// </summary>
            [EnumMember(Value = "0")]
            _0,
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1
        }

        /// <summary>
        /// - '0' # restrict use - '1' # public use 
        /// </summary>
        /// <value>- '0' # restrict use - '1' # public use </value>
        [DataMember(Name="weaponRestrictionType", EmitDefaultValue=false)]
        public WeaponRestrictionTypeEnum? WeaponRestrictionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Weapon" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Weapon() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Weapon" /> class.
        /// </summary>
        /// <param name="WeaponRestrictionType">- &#39;0&#39; # restrict use - &#39;1&#39; # public use  (required).</param>
        /// <param name="SerieNumber">SerieNumber (required).</param>
        /// <param name="GunBarrelSerieNumber">Barrel&#39;s serial number. Número de série do cano  (required).</param>
        /// <param name="WeaponDescription">weapon description (required).</param>
        public Weapon(WeaponRestrictionTypeEnum? WeaponRestrictionType = default(WeaponRestrictionTypeEnum?), string SerieNumber = default(string), string GunBarrelSerieNumber = default(string), string WeaponDescription = default(string))
        {
            // to ensure "WeaponRestrictionType" is required (not null)
            if (WeaponRestrictionType == null)
            {
                throw new InvalidDataException("WeaponRestrictionType is a required property for Weapon and cannot be null");
            }
            else
            {
                this.WeaponRestrictionType = WeaponRestrictionType;
            }
            // to ensure "SerieNumber" is required (not null)
            if (SerieNumber == null)
            {
                throw new InvalidDataException("SerieNumber is a required property for Weapon and cannot be null");
            }
            else
            {
                this.SerieNumber = SerieNumber;
            }
            // to ensure "GunBarrelSerieNumber" is required (not null)
            if (GunBarrelSerieNumber == null)
            {
                throw new InvalidDataException("GunBarrelSerieNumber is a required property for Weapon and cannot be null");
            }
            else
            {
                this.GunBarrelSerieNumber = GunBarrelSerieNumber;
            }
            // to ensure "WeaponDescription" is required (not null)
            if (WeaponDescription == null)
            {
                throw new InvalidDataException("WeaponDescription is a required property for Weapon and cannot be null");
            }
            else
            {
                this.WeaponDescription = WeaponDescription;
            }
        }
        
        /// <summary>
        /// Gets or Sets SerieNumber
        /// </summary>
        [DataMember(Name="serieNumber", EmitDefaultValue=false)]
        public string SerieNumber { get; set; }
        /// <summary>
        /// Barrel&#39;s serial number. Número de série do cano 
        /// </summary>
        /// <value>Barrel&#39;s serial number. Número de série do cano </value>
        [DataMember(Name="gunBarrelSerieNumber", EmitDefaultValue=false)]
        public string GunBarrelSerieNumber { get; set; }
        /// <summary>
        /// weapon description
        /// </summary>
        /// <value>weapon description</value>
        [DataMember(Name="weaponDescription", EmitDefaultValue=false)]
        public string WeaponDescription { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Weapon {\n");
            sb.Append("  WeaponRestrictionType: ").Append(WeaponRestrictionType).Append("\n");
            sb.Append("  SerieNumber: ").Append(SerieNumber).Append("\n");
            sb.Append("  GunBarrelSerieNumber: ").Append(GunBarrelSerieNumber).Append("\n");
            sb.Append("  WeaponDescription: ").Append(WeaponDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Weapon);
        }

        /// <summary>
        /// Returns true if Weapon instances are equal
        /// </summary>
        /// <param name="other">Instance of Weapon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Weapon other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.WeaponRestrictionType == other.WeaponRestrictionType ||
                    this.WeaponRestrictionType != null &&
                    this.WeaponRestrictionType.Equals(other.WeaponRestrictionType)
                ) && 
                (
                    this.SerieNumber == other.SerieNumber ||
                    this.SerieNumber != null &&
                    this.SerieNumber.Equals(other.SerieNumber)
                ) && 
                (
                    this.GunBarrelSerieNumber == other.GunBarrelSerieNumber ||
                    this.GunBarrelSerieNumber != null &&
                    this.GunBarrelSerieNumber.Equals(other.GunBarrelSerieNumber)
                ) && 
                (
                    this.WeaponDescription == other.WeaponDescription ||
                    this.WeaponDescription != null &&
                    this.WeaponDescription.Equals(other.WeaponDescription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.WeaponRestrictionType != null)
                    hash = hash * 59 + this.WeaponRestrictionType.GetHashCode();
                if (this.SerieNumber != null)
                    hash = hash * 59 + this.SerieNumber.GetHashCode();
                if (this.GunBarrelSerieNumber != null)
                    hash = hash * 59 + this.GunBarrelSerieNumber.GetHashCode();
                if (this.WeaponDescription != null)
                    hash = hash * 59 + this.WeaponDescription.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // SerieNumber (string) maxLength
            if(this.SerieNumber != null && this.SerieNumber.Length > 15)
            {
                yield return new ValidationResult("Invalid value for SerieNumber, length must be less than 15.", new [] { "SerieNumber" });
            }

            // GunBarrelSerieNumber (string) maxLength
            if(this.GunBarrelSerieNumber != null && this.GunBarrelSerieNumber.Length > 15)
            {
                yield return new ValidationResult("Invalid value for GunBarrelSerieNumber, length must be less than 15.", new [] { "GunBarrelSerieNumber" });
            }

            // WeaponDescription (string) maxLength
            if(this.WeaponDescription != null && this.WeaponDescription.Length > 256)
            {
                yield return new ValidationResult("Invalid value for WeaponDescription, length must be less than 256.", new [] { "WeaponDescription" });
            }

            yield break;
        }
    }

}
