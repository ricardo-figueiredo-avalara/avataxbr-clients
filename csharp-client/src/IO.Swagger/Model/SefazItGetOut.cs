/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SefazItGetOut
    /// </summary>
    [DataContract]
    public partial class SefazItGetOut :  IEquatable<SefazItGetOut>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SefazItGetOut" /> class.
        /// </summary>
        /// <param name="Key">Invoice Access Key.</param>
        /// <param name="Xml">XML Signed.</param>
        /// <param name="Status">Status.</param>
        public SefazItGetOut(string Key = default(string), string Xml = default(string), SefazInvoiceStatus Status = default(SefazInvoiceStatus))
        {
            this.Key = Key;
            this.Xml = Xml;
            this.Status = Status;
        }
        
        /// <summary>
        /// Invoice Access Key
        /// </summary>
        /// <value>Invoice Access Key</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// XML Signed
        /// </summary>
        /// <value>XML Signed</value>
        [DataMember(Name="xml", EmitDefaultValue=false)]
        public string Xml { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public SefazInvoiceStatus Status { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SefazItGetOut {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Xml: ").Append(Xml).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SefazItGetOut);
        }

        /// <summary>
        /// Returns true if SefazItGetOut instances are equal
        /// </summary>
        /// <param name="other">Instance of SefazItGetOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SefazItGetOut other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.Xml == other.Xml ||
                    this.Xml != null &&
                    this.Xml.Equals(other.Xml)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.Xml != null)
                    hash = hash * 59 + this.Xml.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
