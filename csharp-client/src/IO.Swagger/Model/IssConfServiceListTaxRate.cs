/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// IssConfServiceListTaxRate
    /// </summary>
    [DataContract]
    public partial class IssConfServiceListTaxRate :  IEquatable<IssConfServiceListTaxRate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssConfServiceListTaxRate" /> class.
        /// </summary>
        /// <param name="ISS">ISS.</param>
        /// <param name="ISS_RF">ISS_RF.</param>
        /// <param name="ISS_E">ISS_E.</param>
        /// <param name="ISS_I">ISS_I.</param>
        /// <param name="Ibpt">Ibpt.</param>
        public IssConfServiceListTaxRate(ServiceItemTaxRate ISS = default(ServiceItemTaxRate), ServiceItemTaxRate ISS_RF = default(ServiceItemTaxRate), ServiceItemTaxRate ISS_E = default(ServiceItemTaxRate), ServiceItemTaxRate ISS_I = default(ServiceItemTaxRate), IssConfServiceListTaxRateIbpt Ibpt = default(IssConfServiceListTaxRateIbpt))
        {
            this.ISS = ISS;
            this.ISS_RF = ISS_RF;
            this.ISS_E = ISS_E;
            this.ISS_I = ISS_I;
            this.Ibpt = Ibpt;
        }
        
        /// <summary>
        /// Gets or Sets ISS
        /// </summary>
        [DataMember(Name="ISS", EmitDefaultValue=false)]
        public ServiceItemTaxRate ISS { get; set; }
        /// <summary>
        /// Gets or Sets ISS_RF
        /// </summary>
        [DataMember(Name="ISS_RF", EmitDefaultValue=false)]
        public ServiceItemTaxRate ISS_RF { get; set; }
        /// <summary>
        /// Gets or Sets ISS_E
        /// </summary>
        [DataMember(Name="ISS_E", EmitDefaultValue=false)]
        public ServiceItemTaxRate ISS_E { get; set; }
        /// <summary>
        /// Gets or Sets ISS_I
        /// </summary>
        [DataMember(Name="ISS_I", EmitDefaultValue=false)]
        public ServiceItemTaxRate ISS_I { get; set; }
        /// <summary>
        /// Gets or Sets Ibpt
        /// </summary>
        [DataMember(Name="ibpt", EmitDefaultValue=false)]
        public IssConfServiceListTaxRateIbpt Ibpt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssConfServiceListTaxRate {\n");
            sb.Append("  ISS: ").Append(ISS).Append("\n");
            sb.Append("  ISS_RF: ").Append(ISS_RF).Append("\n");
            sb.Append("  ISS_E: ").Append(ISS_E).Append("\n");
            sb.Append("  ISS_I: ").Append(ISS_I).Append("\n");
            sb.Append("  Ibpt: ").Append(Ibpt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IssConfServiceListTaxRate);
        }

        /// <summary>
        /// Returns true if IssConfServiceListTaxRate instances are equal
        /// </summary>
        /// <param name="other">Instance of IssConfServiceListTaxRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssConfServiceListTaxRate other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ISS == other.ISS ||
                    this.ISS != null &&
                    this.ISS.Equals(other.ISS)
                ) && 
                (
                    this.ISS_RF == other.ISS_RF ||
                    this.ISS_RF != null &&
                    this.ISS_RF.Equals(other.ISS_RF)
                ) && 
                (
                    this.ISS_E == other.ISS_E ||
                    this.ISS_E != null &&
                    this.ISS_E.Equals(other.ISS_E)
                ) && 
                (
                    this.ISS_I == other.ISS_I ||
                    this.ISS_I != null &&
                    this.ISS_I.Equals(other.ISS_I)
                ) && 
                (
                    this.Ibpt == other.Ibpt ||
                    this.Ibpt != null &&
                    this.Ibpt.Equals(other.Ibpt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ISS != null)
                    hash = hash * 59 + this.ISS.GetHashCode();
                if (this.ISS_RF != null)
                    hash = hash * 59 + this.ISS_RF.GetHashCode();
                if (this.ISS_E != null)
                    hash = hash * 59 + this.ISS_E.GetHashCode();
                if (this.ISS_I != null)
                    hash = hash * 59 + this.ISS_I.GetHashCode();
                if (this.Ibpt != null)
                    hash = hash * 59 + this.Ibpt.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
