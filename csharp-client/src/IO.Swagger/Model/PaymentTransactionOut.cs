/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PaymentTransactionOut
    /// </summary>
    [DataContract]
    public partial class PaymentTransactionOut :  IEquatable<PaymentTransactionOut>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentTransactionOut" /> class.
        /// </summary>
        /// <param name="Header">Header.</param>
        /// <param name="Lines">Lines.</param>
        /// <param name="CalculatedTaxSummary">CalculatedTaxSummary.</param>
        /// <param name="ProcessingInfo">ProcessingInfo.</param>
        public PaymentTransactionOut(PayRecHeader Header = default(PayRecHeader), List<PayRecLinesOut> Lines = default(List<PayRecLinesOut>), PayRecCalculatedTaxSummaryForService CalculatedTaxSummary = default(PayRecCalculatedTaxSummaryForService), ProcessingInfo ProcessingInfo = default(ProcessingInfo))
        {
            this.Header = Header;
            this.Lines = Lines;
            this.CalculatedTaxSummary = CalculatedTaxSummary;
            this.ProcessingInfo = ProcessingInfo;
        }
        
        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [DataMember(Name="header", EmitDefaultValue=false)]
        public PayRecHeader Header { get; set; }
        /// <summary>
        /// Gets or Sets Lines
        /// </summary>
        [DataMember(Name="lines", EmitDefaultValue=false)]
        public List<PayRecLinesOut> Lines { get; set; }
        /// <summary>
        /// Gets or Sets CalculatedTaxSummary
        /// </summary>
        [DataMember(Name="calculatedTaxSummary", EmitDefaultValue=false)]
        public PayRecCalculatedTaxSummaryForService CalculatedTaxSummary { get; set; }
        /// <summary>
        /// Gets or Sets ProcessingInfo
        /// </summary>
        [DataMember(Name="processingInfo", EmitDefaultValue=false)]
        public ProcessingInfo ProcessingInfo { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentTransactionOut {\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  CalculatedTaxSummary: ").Append(CalculatedTaxSummary).Append("\n");
            sb.Append("  ProcessingInfo: ").Append(ProcessingInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaymentTransactionOut);
        }

        /// <summary>
        /// Returns true if PaymentTransactionOut instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentTransactionOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentTransactionOut other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Header == other.Header ||
                    this.Header != null &&
                    this.Header.Equals(other.Header)
                ) && 
                (
                    this.Lines == other.Lines ||
                    this.Lines != null &&
                    this.Lines.SequenceEqual(other.Lines)
                ) && 
                (
                    this.CalculatedTaxSummary == other.CalculatedTaxSummary ||
                    this.CalculatedTaxSummary != null &&
                    this.CalculatedTaxSummary.Equals(other.CalculatedTaxSummary)
                ) && 
                (
                    this.ProcessingInfo == other.ProcessingInfo ||
                    this.ProcessingInfo != null &&
                    this.ProcessingInfo.Equals(other.ProcessingInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Header != null)
                    hash = hash * 59 + this.Header.GetHashCode();
                if (this.Lines != null)
                    hash = hash * 59 + this.Lines.GetHashCode();
                if (this.CalculatedTaxSummary != null)
                    hash = hash * 59 + this.CalculatedTaxSummary.GetHashCode();
                if (this.ProcessingInfo != null)
                    hash = hash * 59 + this.ProcessingInfo.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
