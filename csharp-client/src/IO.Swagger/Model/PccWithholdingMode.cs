/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PccWithholdingMode
    /// </summary>
    [DataContract]
    public partial class PccWithholdingMode :  IEquatable<PccWithholdingMode>, IValidatableObject
    {
        /// <summary>
        /// Inform if this group of tax are calculated considering the threashold by PCC or Individualy (each tax separately)
        /// </summary>
        /// <value>Inform if this group of tax are calculated considering the threashold by PCC or Individualy (each tax separately)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum CSRF for "CSRF"
            /// </summary>
            [EnumMember(Value = "CSRF")]
            CSRF,
            
            /// <summary>
            /// Enum Individual for "individual"
            /// </summary>
            [EnumMember(Value = "individual")]
            Individual
        }

        /// <summary>
        /// Inform if this group of tax are calculated considering the threashold by PCC or Individualy (each tax separately)
        /// </summary>
        /// <value>Inform if this group of tax are calculated considering the threashold by PCC or Individualy (each tax separately)</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PccWithholdingMode" /> class.
        /// </summary>
        /// <param name="Type">Inform if this group of tax are calculated considering the threashold by PCC or Individualy (each tax separately).</param>
        /// <param name="TotalTax">this attribute occurs only for CSRF type, When CRSF mode, this is sum of pisRf, CofinsRf and CsllRf.</param>
        /// <param name="PisRf">PisRf.</param>
        /// <param name="CofinsRf">CofinsRf.</param>
        /// <param name="CsllRf">CsllRf.</param>
        public PccWithholdingMode(TypeEnum? Type = default(TypeEnum?), double? TotalTax = default(double?), TaxByTypeTax PisRf = default(TaxByTypeTax), TaxByTypeTax CofinsRf = default(TaxByTypeTax), TaxByTypeTax CsllRf = default(TaxByTypeTax))
        {
            this.Type = Type;
            this.TotalTax = TotalTax;
            this.PisRf = PisRf;
            this.CofinsRf = CofinsRf;
            this.CsllRf = CsllRf;
        }
        
        /// <summary>
        /// this attribute occurs only for CSRF type, When CRSF mode, this is sum of pisRf, CofinsRf and CsllRf
        /// </summary>
        /// <value>this attribute occurs only for CSRF type, When CRSF mode, this is sum of pisRf, CofinsRf and CsllRf</value>
        [DataMember(Name="totalTax", EmitDefaultValue=false)]
        public double? TotalTax { get; set; }
        /// <summary>
        /// Gets or Sets PisRf
        /// </summary>
        [DataMember(Name="pisRf", EmitDefaultValue=false)]
        public TaxByTypeTax PisRf { get; set; }
        /// <summary>
        /// Gets or Sets CofinsRf
        /// </summary>
        [DataMember(Name="cofinsRf", EmitDefaultValue=false)]
        public TaxByTypeTax CofinsRf { get; set; }
        /// <summary>
        /// Gets or Sets CsllRf
        /// </summary>
        [DataMember(Name="csllRf", EmitDefaultValue=false)]
        public TaxByTypeTax CsllRf { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PccWithholdingMode {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TotalTax: ").Append(TotalTax).Append("\n");
            sb.Append("  PisRf: ").Append(PisRf).Append("\n");
            sb.Append("  CofinsRf: ").Append(CofinsRf).Append("\n");
            sb.Append("  CsllRf: ").Append(CsllRf).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PccWithholdingMode);
        }

        /// <summary>
        /// Returns true if PccWithholdingMode instances are equal
        /// </summary>
        /// <param name="other">Instance of PccWithholdingMode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PccWithholdingMode other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.TotalTax == other.TotalTax ||
                    this.TotalTax != null &&
                    this.TotalTax.Equals(other.TotalTax)
                ) && 
                (
                    this.PisRf == other.PisRf ||
                    this.PisRf != null &&
                    this.PisRf.Equals(other.PisRf)
                ) && 
                (
                    this.CofinsRf == other.CofinsRf ||
                    this.CofinsRf != null &&
                    this.CofinsRf.Equals(other.CofinsRf)
                ) && 
                (
                    this.CsllRf == other.CsllRf ||
                    this.CsllRf != null &&
                    this.CsllRf.Equals(other.CsllRf)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.TotalTax != null)
                    hash = hash * 59 + this.TotalTax.GetHashCode();
                if (this.PisRf != null)
                    hash = hash * 59 + this.PisRf.GetHashCode();
                if (this.CofinsRf != null)
                    hash = hash * 59 + this.CofinsRf.GetHashCode();
                if (this.CsllRf != null)
                    hash = hash * 59 + this.CsllRf.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
