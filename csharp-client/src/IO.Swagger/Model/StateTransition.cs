/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StateTransition
    /// </summary>
    [DataContract]
    public partial class StateTransition :  IEquatable<StateTransition>, IValidatableObject
    {
        /// <summary>
        /// - 'voided' - 'unvoided' - 'reconciled' - 'unreconciled' - 'filed' - 'unfiled' - 'filedByAvalara' 
        /// </summary>
        /// <value>- 'voided' - 'unvoided' - 'reconciled' - 'unreconciled' - 'filed' - 'unfiled' - 'filedByAvalara' </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Voided for "voided"
            /// </summary>
            [EnumMember(Value = "voided")]
            Voided,
            
            /// <summary>
            /// Enum Unvoided for "unvoided"
            /// </summary>
            [EnumMember(Value = "unvoided")]
            Unvoided,
            
            /// <summary>
            /// Enum Reconciled for "reconciled"
            /// </summary>
            [EnumMember(Value = "reconciled")]
            Reconciled,
            
            /// <summary>
            /// Enum Unreconciled for "unreconciled"
            /// </summary>
            [EnumMember(Value = "unreconciled")]
            Unreconciled,
            
            /// <summary>
            /// Enum Filed for "filed"
            /// </summary>
            [EnumMember(Value = "filed")]
            Filed,
            
            /// <summary>
            /// Enum Unfiled for "unfiled"
            /// </summary>
            [EnumMember(Value = "unfiled")]
            Unfiled,
            
            /// <summary>
            /// Enum FiledByAvalara for "filedByAvalara"
            /// </summary>
            [EnumMember(Value = "filedByAvalara")]
            FiledByAvalara
        }

        /// <summary>
        /// - 'voided' - 'unvoided' - 'reconciled' - 'unreconciled' - 'filed' - 'unfiled' - 'filedByAvalara' 
        /// </summary>
        /// <value>- 'voided' - 'unvoided' - 'reconciled' - 'unreconciled' - 'filed' - 'unfiled' - 'filedByAvalara' </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StateTransition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StateTransition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StateTransition" /> class.
        /// </summary>
        /// <param name="Type">- &#39;voided&#39; - &#39;unvoided&#39; - &#39;reconciled&#39; - &#39;unreconciled&#39; - &#39;filed&#39; - &#39;unfiled&#39; - &#39;filedByAvalara&#39;  (required).</param>
        /// <param name="Comment">Comment.</param>
        public StateTransition(TypeEnum? Type = default(TypeEnum?), string Comment = default(string))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for StateTransition and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this.Comment = Comment;
        }
        
        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StateTransition {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StateTransition);
        }

        /// <summary>
        /// Returns true if StateTransition instances are equal
        /// </summary>
        /// <param name="other">Instance of StateTransition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StateTransition other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Comment == other.Comment ||
                    this.Comment != null &&
                    this.Comment.Equals(other.Comment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Comment != null)
                    hash = hash * 59 + this.Comment.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Comment (string) maxLength
            if(this.Comment != null && this.Comment.Length > 256)
            {
                yield return new ValidationResult("Invalid value for Comment, length must be less than 256.", new [] { "Comment" });
            }

            yield break;
        }
    }

}
