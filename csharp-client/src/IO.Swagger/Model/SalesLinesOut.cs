/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SalesLinesOut
    /// </summary>
    [DataContract]
    public partial class SalesLinesOut :  IEquatable<SalesLinesOut>, IValidatableObject
    {
        /// <summary>
        /// - '01' # ORIGIN MODE - '02' # ORIGIN MODE BUT EXEMPT - '03' # ORIGIN MODE BUT IMMUNE - '04' # ORIGIN MODE BUT SUSPENDED FOR LEGAL REASON - '05' # ORIGIN MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON - '21' # DESTINATION MODE - '22' # DESTINATION MODE BUT EXEMPT - '23' # DESTINATION MODE BUT IMMUNE - '24' # DESTINATION MODE BUT SUSPENDED - '25' # DESTINATION MODE BUT SUSPENDED - '40' # FOREIGN IMMUNE MODE 
        /// </summary>
        /// <value>- '01' # ORIGIN MODE - '02' # ORIGIN MODE BUT EXEMPT - '03' # ORIGIN MODE BUT IMMUNE - '04' # ORIGIN MODE BUT SUSPENDED FOR LEGAL REASON - '05' # ORIGIN MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON - '21' # DESTINATION MODE - '22' # DESTINATION MODE BUT EXEMPT - '23' # DESTINATION MODE BUT IMMUNE - '24' # DESTINATION MODE BUT SUSPENDED - '25' # DESTINATION MODE BUT SUSPENDED - '40' # FOREIGN IMMUNE MODE </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CstEnum
        {
            
            /// <summary>
            /// Enum _01 for "01"
            /// </summary>
            [EnumMember(Value = "01")]
            _01,
            
            /// <summary>
            /// Enum _02 for "02"
            /// </summary>
            [EnumMember(Value = "02")]
            _02,
            
            /// <summary>
            /// Enum _03 for "03"
            /// </summary>
            [EnumMember(Value = "03")]
            _03,
            
            /// <summary>
            /// Enum _04 for "04"
            /// </summary>
            [EnumMember(Value = "04")]
            _04,
            
            /// <summary>
            /// Enum _05 for "05"
            /// </summary>
            [EnumMember(Value = "05")]
            _05,
            
            /// <summary>
            /// Enum _21 for "21"
            /// </summary>
            [EnumMember(Value = "21")]
            _21,
            
            /// <summary>
            /// Enum _22 for "22"
            /// </summary>
            [EnumMember(Value = "22")]
            _22,
            
            /// <summary>
            /// Enum _23 for "23"
            /// </summary>
            [EnumMember(Value = "23")]
            _23,
            
            /// <summary>
            /// Enum _24 for "24"
            /// </summary>
            [EnumMember(Value = "24")]
            _24,
            
            /// <summary>
            /// Enum _25 for "25"
            /// </summary>
            [EnumMember(Value = "25")]
            _25,
            
            /// <summary>
            /// Enum _40 for "40"
            /// </summary>
            [EnumMember(Value = "40")]
            _40
        }

        /// <summary>
        /// - '61' # WITHHOLD NORMAL MODE - '62' # WITHHOLD NORMAL MODE BUT EXEMPT - '63' # WITHHOLD NORMAL MODE BUT IMMUNE - '64' # WITHHOLD NORMAL MODE BUT SUSPENDED FOR LEGAL REASON - '65' # WITHHOLD NORMAL MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON - '66' # WITHHOLD FORCED MODE - '67' # WITHHOLD FORCED MODE BUT EXEMPT - '68' # WITHHOLD FORCED MODE BUT IMMUNE - '69' # WITHHOLD FORCED MODE BUT SUSPENDED FOR LEGAL REASON - '70' # WITHHOLD FORCED MODE BUT SUSPENDED FOR ADMINISTRATIVE PROCESS - '71' # NO WITHHOLD MODE - '72' # NO WITHHOLD FOREIGN MODE 
        /// </summary>
        /// <value>- '61' # WITHHOLD NORMAL MODE - '62' # WITHHOLD NORMAL MODE BUT EXEMPT - '63' # WITHHOLD NORMAL MODE BUT IMMUNE - '64' # WITHHOLD NORMAL MODE BUT SUSPENDED FOR LEGAL REASON - '65' # WITHHOLD NORMAL MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON - '66' # WITHHOLD FORCED MODE - '67' # WITHHOLD FORCED MODE BUT EXEMPT - '68' # WITHHOLD FORCED MODE BUT IMMUNE - '69' # WITHHOLD FORCED MODE BUT SUSPENDED FOR LEGAL REASON - '70' # WITHHOLD FORCED MODE BUT SUSPENDED FOR ADMINISTRATIVE PROCESS - '71' # NO WITHHOLD MODE - '72' # NO WITHHOLD FOREIGN MODE </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CstRfEnum
        {
            
            /// <summary>
            /// Enum _61 for "61"
            /// </summary>
            [EnumMember(Value = "61")]
            _61,
            
            /// <summary>
            /// Enum _62 for "62"
            /// </summary>
            [EnumMember(Value = "62")]
            _62,
            
            /// <summary>
            /// Enum _63 for "63"
            /// </summary>
            [EnumMember(Value = "63")]
            _63,
            
            /// <summary>
            /// Enum _64 for "64"
            /// </summary>
            [EnumMember(Value = "64")]
            _64,
            
            /// <summary>
            /// Enum _65 for "65"
            /// </summary>
            [EnumMember(Value = "65")]
            _65,
            
            /// <summary>
            /// Enum _66 for "66"
            /// </summary>
            [EnumMember(Value = "66")]
            _66,
            
            /// <summary>
            /// Enum _67 for "67"
            /// </summary>
            [EnumMember(Value = "67")]
            _67,
            
            /// <summary>
            /// Enum _68 for "68"
            /// </summary>
            [EnumMember(Value = "68")]
            _68,
            
            /// <summary>
            /// Enum _69 for "69"
            /// </summary>
            [EnumMember(Value = "69")]
            _69,
            
            /// <summary>
            /// Enum _70 for "70"
            /// </summary>
            [EnumMember(Value = "70")]
            _70,
            
            /// <summary>
            /// Enum _71 for "71"
            /// </summary>
            [EnumMember(Value = "71")]
            _71,
            
            /// <summary>
            /// Enum _72 for "72"
            /// </summary>
            [EnumMember(Value = "72")]
            _72
        }

        /// <summary>
        /// - '01' # ORIGIN MODE - '02' # ORIGIN MODE BUT EXEMPT - '03' # ORIGIN MODE BUT IMMUNE - '04' # ORIGIN MODE BUT SUSPENDED FOR LEGAL REASON - '05' # ORIGIN MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON - '21' # DESTINATION MODE - '22' # DESTINATION MODE BUT EXEMPT - '23' # DESTINATION MODE BUT IMMUNE - '24' # DESTINATION MODE BUT SUSPENDED - '25' # DESTINATION MODE BUT SUSPENDED - '40' # FOREIGN IMMUNE MODE 
        /// </summary>
        /// <value>- '01' # ORIGIN MODE - '02' # ORIGIN MODE BUT EXEMPT - '03' # ORIGIN MODE BUT IMMUNE - '04' # ORIGIN MODE BUT SUSPENDED FOR LEGAL REASON - '05' # ORIGIN MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON - '21' # DESTINATION MODE - '22' # DESTINATION MODE BUT EXEMPT - '23' # DESTINATION MODE BUT IMMUNE - '24' # DESTINATION MODE BUT SUSPENDED - '25' # DESTINATION MODE BUT SUSPENDED - '40' # FOREIGN IMMUNE MODE </value>
        [DataMember(Name="cst", EmitDefaultValue=false)]
        public CstEnum? Cst { get; set; }
        /// <summary>
        /// - '61' # WITHHOLD NORMAL MODE - '62' # WITHHOLD NORMAL MODE BUT EXEMPT - '63' # WITHHOLD NORMAL MODE BUT IMMUNE - '64' # WITHHOLD NORMAL MODE BUT SUSPENDED FOR LEGAL REASON - '65' # WITHHOLD NORMAL MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON - '66' # WITHHOLD FORCED MODE - '67' # WITHHOLD FORCED MODE BUT EXEMPT - '68' # WITHHOLD FORCED MODE BUT IMMUNE - '69' # WITHHOLD FORCED MODE BUT SUSPENDED FOR LEGAL REASON - '70' # WITHHOLD FORCED MODE BUT SUSPENDED FOR ADMINISTRATIVE PROCESS - '71' # NO WITHHOLD MODE - '72' # NO WITHHOLD FOREIGN MODE 
        /// </summary>
        /// <value>- '61' # WITHHOLD NORMAL MODE - '62' # WITHHOLD NORMAL MODE BUT EXEMPT - '63' # WITHHOLD NORMAL MODE BUT IMMUNE - '64' # WITHHOLD NORMAL MODE BUT SUSPENDED FOR LEGAL REASON - '65' # WITHHOLD NORMAL MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON - '66' # WITHHOLD FORCED MODE - '67' # WITHHOLD FORCED MODE BUT EXEMPT - '68' # WITHHOLD FORCED MODE BUT IMMUNE - '69' # WITHHOLD FORCED MODE BUT SUSPENDED FOR LEGAL REASON - '70' # WITHHOLD FORCED MODE BUT SUSPENDED FOR ADMINISTRATIVE PROCESS - '71' # NO WITHHOLD MODE - '72' # NO WITHHOLD FOREIGN MODE </value>
        [DataMember(Name="cstRf", EmitDefaultValue=false)]
        public CstRfEnum? CstRf { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesLinesOut" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SalesLinesOut() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesLinesOut" /> class.
        /// </summary>
        /// <param name="LineCode">This string is a unique identifier for this line in the transaction.</param>
        /// <param name="ItemCode">This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states. (required).</param>
        /// <param name="NumberOfItems">This decimal captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1 (default to 1.0).</param>
        /// <param name="LineAmount">This decimal captures the total cost of this line. In its simplest form lineAmount &#x3D; (item price * numberOfItems)..</param>
        /// <param name="ItemDescription">This string captures the description of the item represented by this line, will be used LC 116.</param>
        /// <param name="LineTaxedDiscount">Conditional discount.</param>
        /// <param name="LineUntaxedDiscount">Unconditional discount.</param>
        /// <param name="TaxDeductions">TaxDeductions.</param>
        /// <param name="AvalaraGoodsAndServicesType">AGAST CODE for itemCode.</param>
        /// <param name="LineNetValue">This decimal captures the total cost of this line. In its simplest form lineNetValue &#x3D; (lineAmount - discountTaxable - sum of whithholdings)..</param>
        /// <param name="Cst">- &#39;01&#39; # ORIGIN MODE - &#39;02&#39; # ORIGIN MODE BUT EXEMPT - &#39;03&#39; # ORIGIN MODE BUT IMMUNE - &#39;04&#39; # ORIGIN MODE BUT SUSPENDED FOR LEGAL REASON - &#39;05&#39; # ORIGIN MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON - &#39;21&#39; # DESTINATION MODE - &#39;22&#39; # DESTINATION MODE BUT EXEMPT - &#39;23&#39; # DESTINATION MODE BUT IMMUNE - &#39;24&#39; # DESTINATION MODE BUT SUSPENDED - &#39;25&#39; # DESTINATION MODE BUT SUSPENDED - &#39;40&#39; # FOREIGN IMMUNE MODE .</param>
        /// <param name="CstRf">- &#39;61&#39; # WITHHOLD NORMAL MODE - &#39;62&#39; # WITHHOLD NORMAL MODE BUT EXEMPT - &#39;63&#39; # WITHHOLD NORMAL MODE BUT IMMUNE - &#39;64&#39; # WITHHOLD NORMAL MODE BUT SUSPENDED FOR LEGAL REASON - &#39;65&#39; # WITHHOLD NORMAL MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON - &#39;66&#39; # WITHHOLD FORCED MODE - &#39;67&#39; # WITHHOLD FORCED MODE BUT EXEMPT - &#39;68&#39; # WITHHOLD FORCED MODE BUT IMMUNE - &#39;69&#39; # WITHHOLD FORCED MODE BUT SUSPENDED FOR LEGAL REASON - &#39;70&#39; # WITHHOLD FORCED MODE BUT SUSPENDED FOR ADMINISTRATIVE PROCESS - &#39;71&#39; # NO WITHHOLD MODE - &#39;72&#39; # NO WITHHOLD FOREIGN MODE .</param>
        /// <param name="CalculatedTax">CalculatedTax.</param>
        public SalesLinesOut(int? LineCode = default(int?), string ItemCode = default(string), double? NumberOfItems = 1.0, double? LineAmount = default(double?), string ItemDescription = default(string), double? LineTaxedDiscount = default(double?), double? LineUntaxedDiscount = default(double?), SalesLinesOutTaxDeductions TaxDeductions = default(SalesLinesOutTaxDeductions), string AvalaraGoodsAndServicesType = default(string), double? LineNetValue = default(double?), CstEnum? Cst = default(CstEnum?), CstRfEnum? CstRf = default(CstRfEnum?), SalesCalculatedTax CalculatedTax = default(SalesCalculatedTax))
        {
            // to ensure "ItemCode" is required (not null)
            if (ItemCode == null)
            {
                throw new InvalidDataException("ItemCode is a required property for SalesLinesOut and cannot be null");
            }
            else
            {
                this.ItemCode = ItemCode;
            }
            this.LineCode = LineCode;
            // use default value if no "NumberOfItems" provided
            if (NumberOfItems == null)
            {
                this.NumberOfItems = 1.0;
            }
            else
            {
                this.NumberOfItems = NumberOfItems;
            }
            this.LineAmount = LineAmount;
            this.ItemDescription = ItemDescription;
            this.LineTaxedDiscount = LineTaxedDiscount;
            this.LineUntaxedDiscount = LineUntaxedDiscount;
            this.TaxDeductions = TaxDeductions;
            this.AvalaraGoodsAndServicesType = AvalaraGoodsAndServicesType;
            this.LineNetValue = LineNetValue;
            this.Cst = Cst;
            this.CstRf = CstRf;
            this.CalculatedTax = CalculatedTax;
        }
        
        /// <summary>
        /// This string is a unique identifier for this line in the transaction
        /// </summary>
        /// <value>This string is a unique identifier for this line in the transaction</value>
        [DataMember(Name="lineCode", EmitDefaultValue=false)]
        public int? LineCode { get; set; }
        /// <summary>
        /// This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states.
        /// </summary>
        /// <value>This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states.</value>
        [DataMember(Name="itemCode", EmitDefaultValue=false)]
        public string ItemCode { get; set; }
        /// <summary>
        /// This decimal captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1
        /// </summary>
        /// <value>This decimal captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1</value>
        [DataMember(Name="numberOfItems", EmitDefaultValue=false)]
        public double? NumberOfItems { get; set; }
        /// <summary>
        /// This decimal captures the total cost of this line. In its simplest form lineAmount &#x3D; (item price * numberOfItems).
        /// </summary>
        /// <value>This decimal captures the total cost of this line. In its simplest form lineAmount &#x3D; (item price * numberOfItems).</value>
        [DataMember(Name="lineAmount", EmitDefaultValue=false)]
        public double? LineAmount { get; set; }
        /// <summary>
        /// This string captures the description of the item represented by this line, will be used LC 116
        /// </summary>
        /// <value>This string captures the description of the item represented by this line, will be used LC 116</value>
        [DataMember(Name="itemDescription", EmitDefaultValue=false)]
        public string ItemDescription { get; set; }
        /// <summary>
        /// Conditional discount
        /// </summary>
        /// <value>Conditional discount</value>
        [DataMember(Name="lineTaxedDiscount", EmitDefaultValue=false)]
        public double? LineTaxedDiscount { get; set; }
        /// <summary>
        /// Unconditional discount
        /// </summary>
        /// <value>Unconditional discount</value>
        [DataMember(Name="lineUntaxedDiscount", EmitDefaultValue=false)]
        public double? LineUntaxedDiscount { get; set; }
        /// <summary>
        /// Gets or Sets TaxDeductions
        /// </summary>
        [DataMember(Name="taxDeductions", EmitDefaultValue=false)]
        public SalesLinesOutTaxDeductions TaxDeductions { get; set; }
        /// <summary>
        /// AGAST CODE for itemCode
        /// </summary>
        /// <value>AGAST CODE for itemCode</value>
        [DataMember(Name="avalaraGoodsAndServicesType", EmitDefaultValue=false)]
        public string AvalaraGoodsAndServicesType { get; set; }
        /// <summary>
        /// This decimal captures the total cost of this line. In its simplest form lineNetValue &#x3D; (lineAmount - discountTaxable - sum of whithholdings).
        /// </summary>
        /// <value>This decimal captures the total cost of this line. In its simplest form lineNetValue &#x3D; (lineAmount - discountTaxable - sum of whithholdings).</value>
        [DataMember(Name="lineNetValue", EmitDefaultValue=false)]
        public double? LineNetValue { get; set; }
        /// <summary>
        /// Gets or Sets CalculatedTax
        /// </summary>
        [DataMember(Name="calculatedTax", EmitDefaultValue=false)]
        public SalesCalculatedTax CalculatedTax { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesLinesOut {\n");
            sb.Append("  LineCode: ").Append(LineCode).Append("\n");
            sb.Append("  ItemCode: ").Append(ItemCode).Append("\n");
            sb.Append("  NumberOfItems: ").Append(NumberOfItems).Append("\n");
            sb.Append("  LineAmount: ").Append(LineAmount).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  LineTaxedDiscount: ").Append(LineTaxedDiscount).Append("\n");
            sb.Append("  LineUntaxedDiscount: ").Append(LineUntaxedDiscount).Append("\n");
            sb.Append("  TaxDeductions: ").Append(TaxDeductions).Append("\n");
            sb.Append("  AvalaraGoodsAndServicesType: ").Append(AvalaraGoodsAndServicesType).Append("\n");
            sb.Append("  LineNetValue: ").Append(LineNetValue).Append("\n");
            sb.Append("  Cst: ").Append(Cst).Append("\n");
            sb.Append("  CstRf: ").Append(CstRf).Append("\n");
            sb.Append("  CalculatedTax: ").Append(CalculatedTax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SalesLinesOut);
        }

        /// <summary>
        /// Returns true if SalesLinesOut instances are equal
        /// </summary>
        /// <param name="other">Instance of SalesLinesOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesLinesOut other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.LineCode == other.LineCode ||
                    this.LineCode != null &&
                    this.LineCode.Equals(other.LineCode)
                ) && 
                (
                    this.ItemCode == other.ItemCode ||
                    this.ItemCode != null &&
                    this.ItemCode.Equals(other.ItemCode)
                ) && 
                (
                    this.NumberOfItems == other.NumberOfItems ||
                    this.NumberOfItems != null &&
                    this.NumberOfItems.Equals(other.NumberOfItems)
                ) && 
                (
                    this.LineAmount == other.LineAmount ||
                    this.LineAmount != null &&
                    this.LineAmount.Equals(other.LineAmount)
                ) && 
                (
                    this.ItemDescription == other.ItemDescription ||
                    this.ItemDescription != null &&
                    this.ItemDescription.Equals(other.ItemDescription)
                ) && 
                (
                    this.LineTaxedDiscount == other.LineTaxedDiscount ||
                    this.LineTaxedDiscount != null &&
                    this.LineTaxedDiscount.Equals(other.LineTaxedDiscount)
                ) && 
                (
                    this.LineUntaxedDiscount == other.LineUntaxedDiscount ||
                    this.LineUntaxedDiscount != null &&
                    this.LineUntaxedDiscount.Equals(other.LineUntaxedDiscount)
                ) && 
                (
                    this.TaxDeductions == other.TaxDeductions ||
                    this.TaxDeductions != null &&
                    this.TaxDeductions.Equals(other.TaxDeductions)
                ) && 
                (
                    this.AvalaraGoodsAndServicesType == other.AvalaraGoodsAndServicesType ||
                    this.AvalaraGoodsAndServicesType != null &&
                    this.AvalaraGoodsAndServicesType.Equals(other.AvalaraGoodsAndServicesType)
                ) && 
                (
                    this.LineNetValue == other.LineNetValue ||
                    this.LineNetValue != null &&
                    this.LineNetValue.Equals(other.LineNetValue)
                ) && 
                (
                    this.Cst == other.Cst ||
                    this.Cst != null &&
                    this.Cst.Equals(other.Cst)
                ) && 
                (
                    this.CstRf == other.CstRf ||
                    this.CstRf != null &&
                    this.CstRf.Equals(other.CstRf)
                ) && 
                (
                    this.CalculatedTax == other.CalculatedTax ||
                    this.CalculatedTax != null &&
                    this.CalculatedTax.Equals(other.CalculatedTax)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.LineCode != null)
                    hash = hash * 59 + this.LineCode.GetHashCode();
                if (this.ItemCode != null)
                    hash = hash * 59 + this.ItemCode.GetHashCode();
                if (this.NumberOfItems != null)
                    hash = hash * 59 + this.NumberOfItems.GetHashCode();
                if (this.LineAmount != null)
                    hash = hash * 59 + this.LineAmount.GetHashCode();
                if (this.ItemDescription != null)
                    hash = hash * 59 + this.ItemDescription.GetHashCode();
                if (this.LineTaxedDiscount != null)
                    hash = hash * 59 + this.LineTaxedDiscount.GetHashCode();
                if (this.LineUntaxedDiscount != null)
                    hash = hash * 59 + this.LineUntaxedDiscount.GetHashCode();
                if (this.TaxDeductions != null)
                    hash = hash * 59 + this.TaxDeductions.GetHashCode();
                if (this.AvalaraGoodsAndServicesType != null)
                    hash = hash * 59 + this.AvalaraGoodsAndServicesType.GetHashCode();
                if (this.LineNetValue != null)
                    hash = hash * 59 + this.LineNetValue.GetHashCode();
                if (this.Cst != null)
                    hash = hash * 59 + this.Cst.GetHashCode();
                if (this.CstRf != null)
                    hash = hash * 59 + this.CstRf.GetHashCode();
                if (this.CalculatedTax != null)
                    hash = hash * 59 + this.CalculatedTax.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Cst (string) maxLength
            if(this.Cst != null && this.Cst.Length > 2)
            {
                yield return new ValidationResult("Invalid value for Cst, length must be less than 2.", new [] { "Cst" });
            }

            // CstRf (string) maxLength
            if(this.CstRf != null && this.CstRf.Length > 2)
            {
                yield return new ValidationResult("Invalid value for CstRf, length must be less than 2.", new [] { "CstRf" });
            }

            yield break;
        }
    }

}
