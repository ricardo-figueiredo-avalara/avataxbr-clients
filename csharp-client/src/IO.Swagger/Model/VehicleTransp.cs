/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Identify type of vehicle used to transport the attributes, except atribute type,  follow rule allOf then only one of this atributes will be informed. 
    /// </summary>
    [DataContract]
    public partial class VehicleTransp :  IEquatable<VehicleTransp>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Automobile for "automobile"
            /// </summary>
            [EnumMember(Value = "automobile")]
            Automobile,
            
            /// <summary>
            /// Enum Wagon for "wagon"
            /// </summary>
            [EnumMember(Value = "wagon")]
            Wagon,
            
            /// <summary>
            /// Enum Ferry for "ferry"
            /// </summary>
            [EnumMember(Value = "ferry")]
            Ferry,
            
            /// <summary>
            /// Enum Trailer for "trailer"
            /// </summary>
            [EnumMember(Value = "trailer")]
            Trailer
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleTransp" /> class.
        /// </summary>
        /// <param name="Type">Type.</param>
        /// <param name="Automobile">Automobile.</param>
        /// <param name="Trailer">Trailer.</param>
        /// <param name="Wagon">Wagon.</param>
        /// <param name="Ferry">Ferry.</param>
        public VehicleTransp(TypeEnum? Type = default(TypeEnum?), VehicleID Automobile = default(VehicleID), List<VehicleID> Trailer = default(List<VehicleID>), string Wagon = default(string), string Ferry = default(string))
        {
            this.Type = Type;
            this.Automobile = Automobile;
            this.Trailer = Trailer;
            this.Wagon = Wagon;
            this.Ferry = Ferry;
        }
        
        /// <summary>
        /// Gets or Sets Automobile
        /// </summary>
        [DataMember(Name="automobile", EmitDefaultValue=false)]
        public VehicleID Automobile { get; set; }
        /// <summary>
        /// Trailer
        /// </summary>
        /// <value>Trailer</value>
        [DataMember(Name="trailer", EmitDefaultValue=false)]
        public List<VehicleID> Trailer { get; set; }
        /// <summary>
        /// Gets or Sets Wagon
        /// </summary>
        [DataMember(Name="wagon", EmitDefaultValue=false)]
        public string Wagon { get; set; }
        /// <summary>
        /// Ferry
        /// </summary>
        /// <value>Ferry</value>
        [DataMember(Name="ferry", EmitDefaultValue=false)]
        public string Ferry { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VehicleTransp {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Automobile: ").Append(Automobile).Append("\n");
            sb.Append("  Trailer: ").Append(Trailer).Append("\n");
            sb.Append("  Wagon: ").Append(Wagon).Append("\n");
            sb.Append("  Ferry: ").Append(Ferry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as VehicleTransp);
        }

        /// <summary>
        /// Returns true if VehicleTransp instances are equal
        /// </summary>
        /// <param name="other">Instance of VehicleTransp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VehicleTransp other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Automobile == other.Automobile ||
                    this.Automobile != null &&
                    this.Automobile.Equals(other.Automobile)
                ) && 
                (
                    this.Trailer == other.Trailer ||
                    this.Trailer != null &&
                    this.Trailer.SequenceEqual(other.Trailer)
                ) && 
                (
                    this.Wagon == other.Wagon ||
                    this.Wagon != null &&
                    this.Wagon.Equals(other.Wagon)
                ) && 
                (
                    this.Ferry == other.Ferry ||
                    this.Ferry != null &&
                    this.Ferry.Equals(other.Ferry)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Automobile != null)
                    hash = hash * 59 + this.Automobile.GetHashCode();
                if (this.Trailer != null)
                    hash = hash * 59 + this.Trailer.GetHashCode();
                if (this.Wagon != null)
                    hash = hash * 59 + this.Wagon.GetHashCode();
                if (this.Ferry != null)
                    hash = hash * 59 + this.Ferry.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Wagon (string) maxLength
            if(this.Wagon != null && this.Wagon.Length > 20)
            {
                yield return new ValidationResult("Invalid value for Wagon, length must be less than 20.", new [] { "Wagon" });
            }

            // Wagon (string) minLength
            if(this.Wagon != null && this.Wagon.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Wagon, length must be greater than 1.", new [] { "Wagon" });
            }

            // Ferry (string) maxLength
            if(this.Ferry != null && this.Ferry.Length > 20)
            {
                yield return new ValidationResult("Invalid value for Ferry, length must be less than 20.", new [] { "Ferry" });
            }

            // Ferry (string) minLength
            if(this.Ferry != null && this.Ferry.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Ferry, length must be greater than 1.", new [] { "Ferry" });
            }

            yield break;
        }
    }

}
