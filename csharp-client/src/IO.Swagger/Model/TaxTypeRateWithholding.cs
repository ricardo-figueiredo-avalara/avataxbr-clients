/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Assign an empty object for simple withholding, null (no key) for no withholding. Detailed behaviors for specific targets may be set by using the available optional keys. 
    /// </summary>
    [DataContract]
    public partial class TaxTypeRateWithholding :  IEquatable<TaxTypeRateWithholding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxTypeRateWithholding" /> class.
        /// </summary>
        /// <param name="All">All.</param>
        /// <param name="Business">Business.</param>
        /// <param name="FederalGovernment">FederalGovernment.</param>
        /// <param name="StateGovernment">StateGovernment.</param>
        /// <param name="CityGovernment">CityGovernment.</param>
        public TaxTypeRateWithholding(WithholdDef All = default(WithholdDef), WithholdDef Business = default(WithholdDef), WithholdDef FederalGovernment = default(WithholdDef), WithholdDef StateGovernment = default(WithholdDef), WithholdDef CityGovernment = default(WithholdDef))
        {
            this.All = All;
            this.Business = Business;
            this.FederalGovernment = FederalGovernment;
            this.StateGovernment = StateGovernment;
            this.CityGovernment = CityGovernment;
        }
        
        /// <summary>
        /// Gets or Sets All
        /// </summary>
        [DataMember(Name="all", EmitDefaultValue=false)]
        public WithholdDef All { get; set; }
        /// <summary>
        /// Gets or Sets Business
        /// </summary>
        [DataMember(Name="business", EmitDefaultValue=false)]
        public WithholdDef Business { get; set; }
        /// <summary>
        /// Gets or Sets FederalGovernment
        /// </summary>
        [DataMember(Name="federalGovernment", EmitDefaultValue=false)]
        public WithholdDef FederalGovernment { get; set; }
        /// <summary>
        /// Gets or Sets StateGovernment
        /// </summary>
        [DataMember(Name="stateGovernment", EmitDefaultValue=false)]
        public WithholdDef StateGovernment { get; set; }
        /// <summary>
        /// Gets or Sets CityGovernment
        /// </summary>
        [DataMember(Name="cityGovernment", EmitDefaultValue=false)]
        public WithholdDef CityGovernment { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxTypeRateWithholding {\n");
            sb.Append("  All: ").Append(All).Append("\n");
            sb.Append("  Business: ").Append(Business).Append("\n");
            sb.Append("  FederalGovernment: ").Append(FederalGovernment).Append("\n");
            sb.Append("  StateGovernment: ").Append(StateGovernment).Append("\n");
            sb.Append("  CityGovernment: ").Append(CityGovernment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaxTypeRateWithholding);
        }

        /// <summary>
        /// Returns true if TaxTypeRateWithholding instances are equal
        /// </summary>
        /// <param name="other">Instance of TaxTypeRateWithholding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxTypeRateWithholding other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.All == other.All ||
                    this.All != null &&
                    this.All.Equals(other.All)
                ) && 
                (
                    this.Business == other.Business ||
                    this.Business != null &&
                    this.Business.Equals(other.Business)
                ) && 
                (
                    this.FederalGovernment == other.FederalGovernment ||
                    this.FederalGovernment != null &&
                    this.FederalGovernment.Equals(other.FederalGovernment)
                ) && 
                (
                    this.StateGovernment == other.StateGovernment ||
                    this.StateGovernment != null &&
                    this.StateGovernment.Equals(other.StateGovernment)
                ) && 
                (
                    this.CityGovernment == other.CityGovernment ||
                    this.CityGovernment != null &&
                    this.CityGovernment.Equals(other.CityGovernment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.All != null)
                    hash = hash * 59 + this.All.GetHashCode();
                if (this.Business != null)
                    hash = hash * 59 + this.Business.GetHashCode();
                if (this.FederalGovernment != null)
                    hash = hash * 59 + this.FederalGovernment.GetHashCode();
                if (this.StateGovernment != null)
                    hash = hash * 59 + this.StateGovernment.GetHashCode();
                if (this.CityGovernment != null)
                    hash = hash * 59 + this.CityGovernment.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
