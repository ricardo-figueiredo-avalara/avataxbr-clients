/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// indirect exportation
    /// </summary>
    [DataContract]
    public partial class LineForGoodsIndExport :  IEquatable<LineForGoodsIndExport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LineForGoodsIndExport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LineForGoodsIndExport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LineForGoodsIndExport" /> class.
        /// </summary>
        /// <param name="RegisterNumber">Exportation register number (required).</param>
        /// <param name="AccessKey">invoice access key received to export (required).</param>
        /// <param name="Quantity">This decimal 11 integers and 0 to 4 decimals, quantity exported in real (required).</param>
        public LineForGoodsIndExport(string RegisterNumber = default(string), string AccessKey = default(string), double? Quantity = default(double?))
        {
            // to ensure "RegisterNumber" is required (not null)
            if (RegisterNumber == null)
            {
                throw new InvalidDataException("RegisterNumber is a required property for LineForGoodsIndExport and cannot be null");
            }
            else
            {
                this.RegisterNumber = RegisterNumber;
            }
            // to ensure "AccessKey" is required (not null)
            if (AccessKey == null)
            {
                throw new InvalidDataException("AccessKey is a required property for LineForGoodsIndExport and cannot be null");
            }
            else
            {
                this.AccessKey = AccessKey;
            }
            // to ensure "Quantity" is required (not null)
            if (Quantity == null)
            {
                throw new InvalidDataException("Quantity is a required property for LineForGoodsIndExport and cannot be null");
            }
            else
            {
                this.Quantity = Quantity;
            }
        }
        
        /// <summary>
        /// Exportation register number
        /// </summary>
        /// <value>Exportation register number</value>
        [DataMember(Name="registerNumber", EmitDefaultValue=false)]
        public string RegisterNumber { get; set; }
        /// <summary>
        /// invoice access key received to export
        /// </summary>
        /// <value>invoice access key received to export</value>
        [DataMember(Name="accessKey", EmitDefaultValue=false)]
        public string AccessKey { get; set; }
        /// <summary>
        /// This decimal 11 integers and 0 to 4 decimals, quantity exported in real
        /// </summary>
        /// <value>This decimal 11 integers and 0 to 4 decimals, quantity exported in real</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LineForGoodsIndExport {\n");
            sb.Append("  RegisterNumber: ").Append(RegisterNumber).Append("\n");
            sb.Append("  AccessKey: ").Append(AccessKey).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LineForGoodsIndExport);
        }

        /// <summary>
        /// Returns true if LineForGoodsIndExport instances are equal
        /// </summary>
        /// <param name="other">Instance of LineForGoodsIndExport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineForGoodsIndExport other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RegisterNumber == other.RegisterNumber ||
                    this.RegisterNumber != null &&
                    this.RegisterNumber.Equals(other.RegisterNumber)
                ) && 
                (
                    this.AccessKey == other.AccessKey ||
                    this.AccessKey != null &&
                    this.AccessKey.Equals(other.AccessKey)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RegisterNumber != null)
                    hash = hash * 59 + this.RegisterNumber.GetHashCode();
                if (this.AccessKey != null)
                    hash = hash * 59 + this.AccessKey.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // RegisterNumber (string) maxLength
            if(this.RegisterNumber != null && this.RegisterNumber.Length > 12)
            {
                yield return new ValidationResult("Invalid value for RegisterNumber, length must be less than 12.", new [] { "RegisterNumber" });
            }

            // RegisterNumber (string) pattern
            Regex regexRegisterNumber = new Regex(@"[0-9]{0,12}", RegexOptions.CultureInvariant);
            if (false == regexRegisterNumber.Match(this.RegisterNumber).Success)
            {
                yield return new ValidationResult("Invalid value for RegisterNumber, must match a pattern of /[0-9]{0,12}/.", new [] { "RegisterNumber" });
            }

            // AccessKey (string) maxLength
            if(this.AccessKey != null && this.AccessKey.Length > 44)
            {
                yield return new ValidationResult("Invalid value for AccessKey, length must be less than 44.", new [] { "AccessKey" });
            }

            // AccessKey (string) pattern
            Regex regexAccessKey = new Regex(@"[0-9]{44}", RegexOptions.CultureInvariant);
            if (false == regexAccessKey.Match(this.AccessKey).Success)
            {
                yield return new ValidationResult("Invalid value for AccessKey, must match a pattern of /[0-9]{44}/.", new [] { "AccessKey" });
            }

            yield break;
        }
    }

}
