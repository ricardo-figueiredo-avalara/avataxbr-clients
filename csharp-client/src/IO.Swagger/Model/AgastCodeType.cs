/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AgastCodeType
    /// </summary>
    [DataContract]
    public partial class AgastCodeType :  IEquatable<AgastCodeType>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NameEnum
        {
            
            /// <summary>
            /// Enum NCM for "NCM"
            /// </summary>
            [EnumMember(Value = "NCM")]
            NCM,
            
            /// <summary>
            /// Enum NBS for "NBS"
            /// </summary>
            [EnumMember(Value = "NBS")]
            NBS,
            
            /// <summary>
            /// Enum LC116 for "LC116"
            /// </summary>
            [EnumMember(Value = "LC116")]
            LC116,
            
            /// <summary>
            /// Enum SERVICEUNREGULATED for "SERVICE UNREGULATED"
            /// </summary>
            [EnumMember(Value = "SERVICE UNREGULATED")]
            SERVICEUNREGULATED
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public NameEnum? Name { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AgastCodeType" /> class.
        /// </summary>
        /// <param name="Code">- &#39;NCM&#39; - &#39;NBS&#39; - &#39;LC116&#39; - &#39;SERVICE UNREGULATED&#39; .</param>
        /// <param name="Name">Name.</param>
        public AgastCodeType(int? Code = default(int?), NameEnum? Name = default(NameEnum?))
        {
            this.Code = Code;
            this.Name = Name;
        }
        
        /// <summary>
        /// - &#39;NCM&#39; - &#39;NBS&#39; - &#39;LC116&#39; - &#39;SERVICE UNREGULATED&#39; 
        /// </summary>
        /// <value>- &#39;NCM&#39; - &#39;NBS&#39; - &#39;LC116&#39; - &#39;SERVICE UNREGULATED&#39; </value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public int? Code { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AgastCodeType {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AgastCodeType);
        }

        /// <summary>
        /// Returns true if AgastCodeType instances are equal
        /// </summary>
        /// <param name="other">Instance of AgastCodeType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AgastCodeType other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
