/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SalesHeaderOutPayment
    /// </summary>
    [DataContract]
    public partial class SalesHeaderOutPayment :  IEquatable<SalesHeaderOutPayment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesHeaderOutPayment" /> class.
        /// </summary>
        /// <param name="Terms">Terms.</param>
        /// <param name="WithholdingMode">To avoid having to verify multiple attributes from a Invoice at the time of funds collection which subject to Tax Withholding, this attribute will allow a referenced Invoice to be quickly checked for withholdings during the cash transaction. This is an SALES.Transaction attribute to be consisted in the Tax Engine that can be used during the receivable process. The values are enumeration where each letter identify if that tax has been withheld PCC,xxx, PCx, PxC ....</param>
        /// <param name="Installments">installments.</param>
        public SalesHeaderOutPayment(PaymentTerms Terms = default(PaymentTerms), WithholdingMode WithholdingMode = default(WithholdingMode), List<InstallmentComplete> Installments = default(List<InstallmentComplete>))
        {
            this.Terms = Terms;
            this.WithholdingMode = WithholdingMode;
            this.Installments = Installments;
        }
        
        /// <summary>
        /// Gets or Sets Terms
        /// </summary>
        [DataMember(Name="terms", EmitDefaultValue=false)]
        public PaymentTerms Terms { get; set; }
        /// <summary>
        /// To avoid having to verify multiple attributes from a Invoice at the time of funds collection which subject to Tax Withholding, this attribute will allow a referenced Invoice to be quickly checked for withholdings during the cash transaction. This is an SALES.Transaction attribute to be consisted in the Tax Engine that can be used during the receivable process. The values are enumeration where each letter identify if that tax has been withheld PCC,xxx, PCx, PxC ...
        /// </summary>
        /// <value>To avoid having to verify multiple attributes from a Invoice at the time of funds collection which subject to Tax Withholding, this attribute will allow a referenced Invoice to be quickly checked for withholdings during the cash transaction. This is an SALES.Transaction attribute to be consisted in the Tax Engine that can be used during the receivable process. The values are enumeration where each letter identify if that tax has been withheld PCC,xxx, PCx, PxC ...</value>
        [DataMember(Name="withholdingMode", EmitDefaultValue=false)]
        public WithholdingMode WithholdingMode { get; set; }
        /// <summary>
        /// installments
        /// </summary>
        /// <value>installments</value>
        [DataMember(Name="installments", EmitDefaultValue=false)]
        public List<InstallmentComplete> Installments { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesHeaderOutPayment {\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  WithholdingMode: ").Append(WithholdingMode).Append("\n");
            sb.Append("  Installments: ").Append(Installments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SalesHeaderOutPayment);
        }

        /// <summary>
        /// Returns true if SalesHeaderOutPayment instances are equal
        /// </summary>
        /// <param name="other">Instance of SalesHeaderOutPayment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesHeaderOutPayment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Terms == other.Terms ||
                    this.Terms != null &&
                    this.Terms.Equals(other.Terms)
                ) && 
                (
                    this.WithholdingMode == other.WithholdingMode ||
                    this.WithholdingMode != null &&
                    this.WithholdingMode.Equals(other.WithholdingMode)
                ) && 
                (
                    this.Installments == other.Installments ||
                    this.Installments != null &&
                    this.Installments.SequenceEqual(other.Installments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Terms != null)
                    hash = hash * 59 + this.Terms.GetHashCode();
                if (this.WithholdingMode != null)
                    hash = hash * 59 + this.WithholdingMode.GetHashCode();
                if (this.Installments != null)
                    hash = hash * 59 + this.Installments.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
