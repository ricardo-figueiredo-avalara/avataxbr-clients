/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CompanyConfiguration
    /// </summary>
    [DataContract]
    public partial class CompanyConfiguration :  IEquatable<CompanyConfiguration>, IValidatableObject
    {
        /// <summary>
        /// how the document will be printed - '0' # without DANFE; - '1' # DANFe Letter; - '2' # DANFe Landscape; 
        /// </summary>
        /// <value>how the document will be printed - '0' # without DANFE; - '1' # DANFe Letter; - '2' # DANFe Landscape; </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TpImpNFeEnum
        {
            
            /// <summary>
            /// Enum _0 for "0"
            /// </summary>
            [EnumMember(Value = "0")]
            _0,
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1,
            
            /// <summary>
            /// Enum _2 for "2"
            /// </summary>
            [EnumMember(Value = "2")]
            _2
        }

        /// <summary>
        /// how the document will be printed - '0' # without DANFE; - '4' # DANFe NFC-e; - '5' # DANFe NFC-e e-mail 
        /// </summary>
        /// <value>how the document will be printed - '0' # without DANFE; - '4' # DANFe NFC-e; - '5' # DANFe NFC-e e-mail </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TpImpNFCeEnum
        {
            
            /// <summary>
            /// Enum _0 for "0"
            /// </summary>
            [EnumMember(Value = "0")]
            _0,
            
            /// <summary>
            /// Enum _4 for "4"
            /// </summary>
            [EnumMember(Value = "4")]
            _4,
            
            /// <summary>
            /// Enum _5 for "5"
            /// </summary>
            [EnumMember(Value = "5")]
            _5
        }

        /// <summary>
        /// how the document will be printed - '0' # without DANFE; - '1' # DANFe Letter; - '2' # DANFe Landscape; 
        /// </summary>
        /// <value>how the document will be printed - '0' # without DANFE; - '1' # DANFe Letter; - '2' # DANFe Landscape; </value>
        [DataMember(Name="tpImpNFe", EmitDefaultValue=false)]
        public TpImpNFeEnum? TpImpNFe { get; set; }
        /// <summary>
        /// how the document will be printed - '0' # without DANFE; - '4' # DANFe NFC-e; - '5' # DANFe NFC-e e-mail 
        /// </summary>
        /// <value>how the document will be printed - '0' # without DANFE; - '4' # DANFe NFC-e; - '5' # DANFe NFC-e e-mail </value>
        [DataMember(Name="tpImpNFCe", EmitDefaultValue=false)]
        public TpImpNFCeEnum? TpImpNFCe { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyConfiguration" /> class.
        /// </summary>
        /// <param name="Certificate">digital certificate A1 model, p12, encoded by base64.</param>
        /// <param name="Certificatepwd">certificate password.</param>
        /// <param name="Certificateexpiration">expiration date of this certificate.</param>
        /// <param name="Logo">company logo image encoded by base64.</param>
        /// <param name="TpImpNFe">how the document will be printed - &#39;0&#39; # without DANFE; - &#39;1&#39; # DANFe Letter; - &#39;2&#39; # DANFe Landscape; .</param>
        /// <param name="TpImpNFCe">how the document will be printed - &#39;0&#39; # without DANFE; - &#39;4&#39; # DANFe NFC-e; - &#39;5&#39; # DANFe NFC-e e-mail .</param>
        public CompanyConfiguration(string Certificate = default(string), string Certificatepwd = default(string), DateTime? Certificateexpiration = default(DateTime?), string Logo = default(string), TpImpNFeEnum? TpImpNFe = default(TpImpNFeEnum?), TpImpNFCeEnum? TpImpNFCe = default(TpImpNFCeEnum?))
        {
            this.Certificate = Certificate;
            this.Certificatepwd = Certificatepwd;
            this.Certificateexpiration = Certificateexpiration;
            this.Logo = Logo;
            this.TpImpNFe = TpImpNFe;
            this.TpImpNFCe = TpImpNFCe;
        }
        
        /// <summary>
        /// digital certificate A1 model, p12, encoded by base64
        /// </summary>
        /// <value>digital certificate A1 model, p12, encoded by base64</value>
        [DataMember(Name="certificate", EmitDefaultValue=false)]
        public string Certificate { get; set; }
        /// <summary>
        /// certificate password
        /// </summary>
        /// <value>certificate password</value>
        [DataMember(Name="certificatepwd", EmitDefaultValue=false)]
        public string Certificatepwd { get; set; }
        /// <summary>
        /// expiration date of this certificate
        /// </summary>
        /// <value>expiration date of this certificate</value>
        [DataMember(Name="certificateexpiration", EmitDefaultValue=false)]
        public DateTime? Certificateexpiration { get; set; }
        /// <summary>
        /// company logo image encoded by base64
        /// </summary>
        /// <value>company logo image encoded by base64</value>
        [DataMember(Name="logo", EmitDefaultValue=false)]
        public string Logo { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanyConfiguration {\n");
            sb.Append("  Certificate: ").Append(Certificate).Append("\n");
            sb.Append("  Certificatepwd: ").Append(Certificatepwd).Append("\n");
            sb.Append("  Certificateexpiration: ").Append(Certificateexpiration).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  TpImpNFe: ").Append(TpImpNFe).Append("\n");
            sb.Append("  TpImpNFCe: ").Append(TpImpNFCe).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CompanyConfiguration);
        }

        /// <summary>
        /// Returns true if CompanyConfiguration instances are equal
        /// </summary>
        /// <param name="other">Instance of CompanyConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyConfiguration other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Certificate == other.Certificate ||
                    this.Certificate != null &&
                    this.Certificate.Equals(other.Certificate)
                ) && 
                (
                    this.Certificatepwd == other.Certificatepwd ||
                    this.Certificatepwd != null &&
                    this.Certificatepwd.Equals(other.Certificatepwd)
                ) && 
                (
                    this.Certificateexpiration == other.Certificateexpiration ||
                    this.Certificateexpiration != null &&
                    this.Certificateexpiration.Equals(other.Certificateexpiration)
                ) && 
                (
                    this.Logo == other.Logo ||
                    this.Logo != null &&
                    this.Logo.Equals(other.Logo)
                ) && 
                (
                    this.TpImpNFe == other.TpImpNFe ||
                    this.TpImpNFe != null &&
                    this.TpImpNFe.Equals(other.TpImpNFe)
                ) && 
                (
                    this.TpImpNFCe == other.TpImpNFCe ||
                    this.TpImpNFCe != null &&
                    this.TpImpNFCe.Equals(other.TpImpNFCe)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Certificate != null)
                    hash = hash * 59 + this.Certificate.GetHashCode();
                if (this.Certificatepwd != null)
                    hash = hash * 59 + this.Certificatepwd.GetHashCode();
                if (this.Certificateexpiration != null)
                    hash = hash * 59 + this.Certificateexpiration.GetHashCode();
                if (this.Logo != null)
                    hash = hash * 59 + this.Logo.GetHashCode();
                if (this.TpImpNFe != null)
                    hash = hash * 59 + this.TpImpNFe.GetHashCode();
                if (this.TpImpNFCe != null)
                    hash = hash * 59 + this.TpImpNFCe.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
