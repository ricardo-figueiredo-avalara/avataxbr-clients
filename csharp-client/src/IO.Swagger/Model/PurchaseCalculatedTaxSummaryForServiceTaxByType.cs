/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Object with summary of all taxes returned by engine
    /// </summary>
    [DataContract]
    public partial class PurchaseCalculatedTaxSummaryForServiceTaxByType :  IEquatable<PurchaseCalculatedTaxSummaryForServiceTaxByType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseCalculatedTaxSummaryForServiceTaxByType" /> class.
        /// </summary>
        /// <param name="IssRf">IssRf.</param>
        /// <param name="PisRf">PisRf.</param>
        /// <param name="CofinsRf">CofinsRf.</param>
        /// <param name="CsllRf">CsllRf.</param>
        /// <param name="Irrf">Irrf.</param>
        /// <param name="InssRf">InssRf.</param>
        /// <param name="InssAr">InssAr.</param>
        /// <param name="Pis">Pis.</param>
        /// <param name="Cofins">Cofins.</param>
        public PurchaseCalculatedTaxSummaryForServiceTaxByType(TaxByTypeSummaryForService IssRf = default(TaxByTypeSummaryForService), TaxByTypeSummaryForService PisRf = default(TaxByTypeSummaryForService), TaxByTypeSummaryForService CofinsRf = default(TaxByTypeSummaryForService), TaxByTypeSummaryForService CsllRf = default(TaxByTypeSummaryForService), TaxByTypeSummaryForService Irrf = default(TaxByTypeSummaryForService), TaxByTypeSummaryForService InssRf = default(TaxByTypeSummaryForService), TaxByTypeSummaryForService InssAr = default(TaxByTypeSummaryForService), TaxByTypeSummaryForService Pis = default(TaxByTypeSummaryForService), TaxByTypeSummaryForService Cofins = default(TaxByTypeSummaryForService))
        {
            this.IssRf = IssRf;
            this.PisRf = PisRf;
            this.CofinsRf = CofinsRf;
            this.CsllRf = CsllRf;
            this.Irrf = Irrf;
            this.InssRf = InssRf;
            this.InssAr = InssAr;
            this.Pis = Pis;
            this.Cofins = Cofins;
        }
        
        /// <summary>
        /// Gets or Sets IssRf
        /// </summary>
        [DataMember(Name="issRf", EmitDefaultValue=false)]
        public TaxByTypeSummaryForService IssRf { get; set; }
        /// <summary>
        /// Gets or Sets PisRf
        /// </summary>
        [DataMember(Name="pisRf", EmitDefaultValue=false)]
        public TaxByTypeSummaryForService PisRf { get; set; }
        /// <summary>
        /// Gets or Sets CofinsRf
        /// </summary>
        [DataMember(Name="cofinsRf", EmitDefaultValue=false)]
        public TaxByTypeSummaryForService CofinsRf { get; set; }
        /// <summary>
        /// Gets or Sets CsllRf
        /// </summary>
        [DataMember(Name="csllRf", EmitDefaultValue=false)]
        public TaxByTypeSummaryForService CsllRf { get; set; }
        /// <summary>
        /// Gets or Sets Irrf
        /// </summary>
        [DataMember(Name="irrf", EmitDefaultValue=false)]
        public TaxByTypeSummaryForService Irrf { get; set; }
        /// <summary>
        /// Gets or Sets InssRf
        /// </summary>
        [DataMember(Name="inssRf", EmitDefaultValue=false)]
        public TaxByTypeSummaryForService InssRf { get; set; }
        /// <summary>
        /// Gets or Sets InssAr
        /// </summary>
        [DataMember(Name="inssAr", EmitDefaultValue=false)]
        public TaxByTypeSummaryForService InssAr { get; set; }
        /// <summary>
        /// Gets or Sets Pis
        /// </summary>
        [DataMember(Name="pis", EmitDefaultValue=false)]
        public TaxByTypeSummaryForService Pis { get; set; }
        /// <summary>
        /// Gets or Sets Cofins
        /// </summary>
        [DataMember(Name="cofins", EmitDefaultValue=false)]
        public TaxByTypeSummaryForService Cofins { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseCalculatedTaxSummaryForServiceTaxByType {\n");
            sb.Append("  IssRf: ").Append(IssRf).Append("\n");
            sb.Append("  PisRf: ").Append(PisRf).Append("\n");
            sb.Append("  CofinsRf: ").Append(CofinsRf).Append("\n");
            sb.Append("  CsllRf: ").Append(CsllRf).Append("\n");
            sb.Append("  Irrf: ").Append(Irrf).Append("\n");
            sb.Append("  InssRf: ").Append(InssRf).Append("\n");
            sb.Append("  InssAr: ").Append(InssAr).Append("\n");
            sb.Append("  Pis: ").Append(Pis).Append("\n");
            sb.Append("  Cofins: ").Append(Cofins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PurchaseCalculatedTaxSummaryForServiceTaxByType);
        }

        /// <summary>
        /// Returns true if PurchaseCalculatedTaxSummaryForServiceTaxByType instances are equal
        /// </summary>
        /// <param name="other">Instance of PurchaseCalculatedTaxSummaryForServiceTaxByType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseCalculatedTaxSummaryForServiceTaxByType other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IssRf == other.IssRf ||
                    this.IssRf != null &&
                    this.IssRf.Equals(other.IssRf)
                ) && 
                (
                    this.PisRf == other.PisRf ||
                    this.PisRf != null &&
                    this.PisRf.Equals(other.PisRf)
                ) && 
                (
                    this.CofinsRf == other.CofinsRf ||
                    this.CofinsRf != null &&
                    this.CofinsRf.Equals(other.CofinsRf)
                ) && 
                (
                    this.CsllRf == other.CsllRf ||
                    this.CsllRf != null &&
                    this.CsllRf.Equals(other.CsllRf)
                ) && 
                (
                    this.Irrf == other.Irrf ||
                    this.Irrf != null &&
                    this.Irrf.Equals(other.Irrf)
                ) && 
                (
                    this.InssRf == other.InssRf ||
                    this.InssRf != null &&
                    this.InssRf.Equals(other.InssRf)
                ) && 
                (
                    this.InssAr == other.InssAr ||
                    this.InssAr != null &&
                    this.InssAr.Equals(other.InssAr)
                ) && 
                (
                    this.Pis == other.Pis ||
                    this.Pis != null &&
                    this.Pis.Equals(other.Pis)
                ) && 
                (
                    this.Cofins == other.Cofins ||
                    this.Cofins != null &&
                    this.Cofins.Equals(other.Cofins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IssRf != null)
                    hash = hash * 59 + this.IssRf.GetHashCode();
                if (this.PisRf != null)
                    hash = hash * 59 + this.PisRf.GetHashCode();
                if (this.CofinsRf != null)
                    hash = hash * 59 + this.CofinsRf.GetHashCode();
                if (this.CsllRf != null)
                    hash = hash * 59 + this.CsllRf.GetHashCode();
                if (this.Irrf != null)
                    hash = hash * 59 + this.Irrf.GetHashCode();
                if (this.InssRf != null)
                    hash = hash * 59 + this.InssRf.GetHashCode();
                if (this.InssAr != null)
                    hash = hash * 59 + this.InssAr.GetHashCode();
                if (this.Pis != null)
                    hash = hash * 59 + this.Pis.GetHashCode();
                if (this.Cofins != null)
                    hash = hash * 59 + this.Cofins.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
