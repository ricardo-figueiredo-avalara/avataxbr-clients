/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SimpleAddress
    /// </summary>
    [DataContract]
    public partial class SimpleAddress :  IEquatable<SimpleAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SimpleAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleAddress" /> class.
        /// </summary>
        /// <param name="Line1">Address (required).</param>
        /// <param name="Line2">Number (required).</param>
        /// <param name="Line3">District (required).</param>
        /// <param name="City">City.</param>
        /// <param name="Zipcode">Brazilian Zip Code (required).</param>
        /// <param name="State">State.</param>
        /// <param name="Country">Use ISO 3166-1 alpha-3 codes (required) (default to &quot;BRA&quot;).</param>
        public SimpleAddress(string Line1 = default(string), string Line2 = default(string), string Line3 = default(string), string City = default(string), string Zipcode = default(string), StateEnum State = default(StateEnum), string Country = "BRA")
        {
            // to ensure "Line1" is required (not null)
            if (Line1 == null)
            {
                throw new InvalidDataException("Line1 is a required property for SimpleAddress and cannot be null");
            }
            else
            {
                this.Line1 = Line1;
            }
            // to ensure "Line2" is required (not null)
            if (Line2 == null)
            {
                throw new InvalidDataException("Line2 is a required property for SimpleAddress and cannot be null");
            }
            else
            {
                this.Line2 = Line2;
            }
            // to ensure "Line3" is required (not null)
            if (Line3 == null)
            {
                throw new InvalidDataException("Line3 is a required property for SimpleAddress and cannot be null");
            }
            else
            {
                this.Line3 = Line3;
            }
            // to ensure "Zipcode" is required (not null)
            if (Zipcode == null)
            {
                throw new InvalidDataException("Zipcode is a required property for SimpleAddress and cannot be null");
            }
            else
            {
                this.Zipcode = Zipcode;
            }
            // to ensure "Country" is required (not null)
            if (Country == null)
            {
                throw new InvalidDataException("Country is a required property for SimpleAddress and cannot be null");
            }
            else
            {
                this.Country = Country;
            }
            this.City = City;
            this.State = State;
        }
        
        /// <summary>
        /// Address
        /// </summary>
        /// <value>Address</value>
        [DataMember(Name="line1", EmitDefaultValue=false)]
        public string Line1 { get; set; }
        /// <summary>
        /// Number
        /// </summary>
        /// <value>Number</value>
        [DataMember(Name="line2", EmitDefaultValue=false)]
        public string Line2 { get; set; }
        /// <summary>
        /// District
        /// </summary>
        /// <value>District</value>
        [DataMember(Name="line3", EmitDefaultValue=false)]
        public string Line3 { get; set; }
        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// Brazilian Zip Code
        /// </summary>
        /// <value>Brazilian Zip Code</value>
        [DataMember(Name="zipcode", EmitDefaultValue=false)]
        public string Zipcode { get; set; }
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Use ISO 3166-1 alpha-3 codes
        /// </summary>
        /// <value>Use ISO 3166-1 alpha-3 codes</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SimpleAddress {\n");
            sb.Append("  Line1: ").Append(Line1).Append("\n");
            sb.Append("  Line2: ").Append(Line2).Append("\n");
            sb.Append("  Line3: ").Append(Line3).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SimpleAddress);
        }

        /// <summary>
        /// Returns true if SimpleAddress instances are equal
        /// </summary>
        /// <param name="other">Instance of SimpleAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimpleAddress other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Line1 == other.Line1 ||
                    this.Line1 != null &&
                    this.Line1.Equals(other.Line1)
                ) && 
                (
                    this.Line2 == other.Line2 ||
                    this.Line2 != null &&
                    this.Line2.Equals(other.Line2)
                ) && 
                (
                    this.Line3 == other.Line3 ||
                    this.Line3 != null &&
                    this.Line3.Equals(other.Line3)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.Zipcode == other.Zipcode ||
                    this.Zipcode != null &&
                    this.Zipcode.Equals(other.Zipcode)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Line1 != null)
                    hash = hash * 59 + this.Line1.GetHashCode();
                if (this.Line2 != null)
                    hash = hash * 59 + this.Line2.GetHashCode();
                if (this.Line3 != null)
                    hash = hash * 59 + this.Line3.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.Zipcode != null)
                    hash = hash * 59 + this.Zipcode.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Line1 (string) maxLength
            if(this.Line1 != null && this.Line1.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Line1, length must be less than 60.", new [] { "Line1" });
            }

            // Line2 (string) maxLength
            if(this.Line2 != null && this.Line2.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Line2, length must be less than 60.", new [] { "Line2" });
            }

            // Line3 (string) maxLength
            if(this.Line3 != null && this.Line3.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Line3, length must be less than 60.", new [] { "Line3" });
            }

            // City (string) maxLength
            if(this.City != null && this.City.Length > 60)
            {
                yield return new ValidationResult("Invalid value for City, length must be less than 60.", new [] { "City" });
            }

            // Zipcode (string) pattern
            Regex regexZipcode = new Regex(@"^(\\d{8}|\\d{5}\\-\\d{3})$", RegexOptions.CultureInvariant);
            if (false == regexZipcode.Match(this.Zipcode).Success)
            {
                yield return new ValidationResult("Invalid value for Zipcode, must match a pattern of /^(\\d{8}|\\d{5}\\-\\d{3})$/.", new [] { "Zipcode" });
            }

            // Country (string) maxLength
            if(this.Country != null && this.Country.Length > 3)
            {
                yield return new ValidationResult("Invalid value for Country, length must be less than 3.", new [] { "Country" });
            }

            yield break;
        }
    }

}
