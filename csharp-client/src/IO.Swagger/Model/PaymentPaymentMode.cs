/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PaymentPaymentMode
    /// </summary>
    [DataContract]
    public partial class PaymentPaymentMode :  IEquatable<PaymentPaymentMode>, IValidatableObject
    {
        /// <summary>
        /// Payment mode - '01' # Dinheiro - '02' # Cheque - '03' # Cartão de Crédito - '04' # Cartão de Débito - '05' # Crédito Loja - '10' # Vale Alimentação - '11' # Vale Refeição - '12' # Vale Presente - '13' # Vale Combustível - '99' # Outros 
        /// </summary>
        /// <value>Payment mode - '01' # Dinheiro - '02' # Cheque - '03' # Cartão de Crédito - '04' # Cartão de Débito - '05' # Crédito Loja - '10' # Vale Alimentação - '11' # Vale Refeição - '12' # Vale Presente - '13' # Vale Combustível - '99' # Outros </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            
            /// <summary>
            /// Enum _01 for "01"
            /// </summary>
            [EnumMember(Value = "01")]
            _01,
            
            /// <summary>
            /// Enum _02 for "02"
            /// </summary>
            [EnumMember(Value = "02")]
            _02,
            
            /// <summary>
            /// Enum _03 for "03"
            /// </summary>
            [EnumMember(Value = "03")]
            _03,
            
            /// <summary>
            /// Enum _04 for "04"
            /// </summary>
            [EnumMember(Value = "04")]
            _04,
            
            /// <summary>
            /// Enum _05 for "05"
            /// </summary>
            [EnumMember(Value = "05")]
            _05,
            
            /// <summary>
            /// Enum _10 for "10"
            /// </summary>
            [EnumMember(Value = "10")]
            _10,
            
            /// <summary>
            /// Enum _11 for "11"
            /// </summary>
            [EnumMember(Value = "11")]
            _11,
            
            /// <summary>
            /// Enum _12 for "12"
            /// </summary>
            [EnumMember(Value = "12")]
            _12,
            
            /// <summary>
            /// Enum _13 for "13"
            /// </summary>
            [EnumMember(Value = "13")]
            _13,
            
            /// <summary>
            /// Enum _99 for "99"
            /// </summary>
            [EnumMember(Value = "99")]
            _99
        }

        /// <summary>
        /// - '1' # Payment integrated with system, - '2' # Payment not integrated with system 
        /// </summary>
        /// <value>- '1' # Payment integrated with system, - '2' # Payment not integrated with system </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CardTpIntegrationEnum
        {
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1,
            
            /// <summary>
            /// Enum _2 for "2"
            /// </summary>
            [EnumMember(Value = "2")]
            _2
        }

        /// <summary>
        /// card brand - '01' # Visa - '02' # Mastercard - '03' # American Express - '04' # Sorocred - '99' # Other 
        /// </summary>
        /// <value>card brand - '01' # Visa - '02' # Mastercard - '03' # American Express - '04' # Sorocred - '99' # Other </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CardBrandEnum
        {
            
            /// <summary>
            /// Enum _01 for "01"
            /// </summary>
            [EnumMember(Value = "01")]
            _01,
            
            /// <summary>
            /// Enum _02 for "02"
            /// </summary>
            [EnumMember(Value = "02")]
            _02,
            
            /// <summary>
            /// Enum _03 for "03"
            /// </summary>
            [EnumMember(Value = "03")]
            _03,
            
            /// <summary>
            /// Enum _04 for "04"
            /// </summary>
            [EnumMember(Value = "04")]
            _04,
            
            /// <summary>
            /// Enum _99 for "99"
            /// </summary>
            [EnumMember(Value = "99")]
            _99
        }

        /// <summary>
        /// Payment mode - '01' # Dinheiro - '02' # Cheque - '03' # Cartão de Crédito - '04' # Cartão de Débito - '05' # Crédito Loja - '10' # Vale Alimentação - '11' # Vale Refeição - '12' # Vale Presente - '13' # Vale Combustível - '99' # Outros 
        /// </summary>
        /// <value>Payment mode - '01' # Dinheiro - '02' # Cheque - '03' # Cartão de Crédito - '04' # Cartão de Débito - '05' # Crédito Loja - '10' # Vale Alimentação - '11' # Vale Refeição - '12' # Vale Presente - '13' # Vale Combustível - '99' # Outros </value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// - '1' # Payment integrated with system, - '2' # Payment not integrated with system 
        /// </summary>
        /// <value>- '1' # Payment integrated with system, - '2' # Payment not integrated with system </value>
        [DataMember(Name="cardTpIntegration", EmitDefaultValue=false)]
        public CardTpIntegrationEnum? CardTpIntegration { get; set; }
        /// <summary>
        /// card brand - '01' # Visa - '02' # Mastercard - '03' # American Express - '04' # Sorocred - '99' # Other 
        /// </summary>
        /// <value>card brand - '01' # Visa - '02' # Mastercard - '03' # American Express - '04' # Sorocred - '99' # Other </value>
        [DataMember(Name="cardBrand", EmitDefaultValue=false)]
        public CardBrandEnum? CardBrand { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentPaymentMode" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentPaymentMode() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentPaymentMode" /> class.
        /// </summary>
        /// <param name="Mode">Payment mode - &#39;01&#39; # Dinheiro - &#39;02&#39; # Cheque - &#39;03&#39; # Cartão de Crédito - &#39;04&#39; # Cartão de Débito - &#39;05&#39; # Crédito Loja - &#39;10&#39; # Vale Alimentação - &#39;11&#39; # Vale Refeição - &#39;12&#39; # Vale Presente - &#39;13&#39; # Vale Combustível - &#39;99&#39; # Outros  (required).</param>
        /// <param name="Value">payment value (required).</param>
        /// <param name="CardTpIntegration">- &#39;1&#39; # Payment integrated with system, - &#39;2&#39; # Payment not integrated with system .</param>
        /// <param name="CardCNPJ">Federal tax id of accrediting card (credenciadora do cartão).</param>
        /// <param name="CardBrand">card brand - &#39;01&#39; # Visa - &#39;02&#39; # Mastercard - &#39;03&#39; # American Express - &#39;04&#39; # Sorocred - &#39;99&#39; # Other .</param>
        /// <param name="CardAuthorization">transaction authorization number.</param>
        public PaymentPaymentMode(ModeEnum? Mode = default(ModeEnum?), double? Value = default(double?), CardTpIntegrationEnum? CardTpIntegration = default(CardTpIntegrationEnum?), string CardCNPJ = default(string), CardBrandEnum? CardBrand = default(CardBrandEnum?), string CardAuthorization = default(string))
        {
            // to ensure "Mode" is required (not null)
            if (Mode == null)
            {
                throw new InvalidDataException("Mode is a required property for PaymentPaymentMode and cannot be null");
            }
            else
            {
                this.Mode = Mode;
            }
            // to ensure "Value" is required (not null)
            if (Value == null)
            {
                throw new InvalidDataException("Value is a required property for PaymentPaymentMode and cannot be null");
            }
            else
            {
                this.Value = Value;
            }
            this.CardTpIntegration = CardTpIntegration;
            this.CardCNPJ = CardCNPJ;
            this.CardBrand = CardBrand;
            this.CardAuthorization = CardAuthorization;
        }
        
        /// <summary>
        /// payment value
        /// </summary>
        /// <value>payment value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public double? Value { get; set; }
        /// <summary>
        /// Federal tax id of accrediting card (credenciadora do cartão)
        /// </summary>
        /// <value>Federal tax id of accrediting card (credenciadora do cartão)</value>
        [DataMember(Name="cardCNPJ", EmitDefaultValue=false)]
        public string CardCNPJ { get; set; }
        /// <summary>
        /// transaction authorization number
        /// </summary>
        /// <value>transaction authorization number</value>
        [DataMember(Name="cardAuthorization", EmitDefaultValue=false)]
        public string CardAuthorization { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentPaymentMode {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  CardTpIntegration: ").Append(CardTpIntegration).Append("\n");
            sb.Append("  CardCNPJ: ").Append(CardCNPJ).Append("\n");
            sb.Append("  CardBrand: ").Append(CardBrand).Append("\n");
            sb.Append("  CardAuthorization: ").Append(CardAuthorization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaymentPaymentMode);
        }

        /// <summary>
        /// Returns true if PaymentPaymentMode instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentPaymentMode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentPaymentMode other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Mode == other.Mode ||
                    this.Mode != null &&
                    this.Mode.Equals(other.Mode)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.CardTpIntegration == other.CardTpIntegration ||
                    this.CardTpIntegration != null &&
                    this.CardTpIntegration.Equals(other.CardTpIntegration)
                ) && 
                (
                    this.CardCNPJ == other.CardCNPJ ||
                    this.CardCNPJ != null &&
                    this.CardCNPJ.Equals(other.CardCNPJ)
                ) && 
                (
                    this.CardBrand == other.CardBrand ||
                    this.CardBrand != null &&
                    this.CardBrand.Equals(other.CardBrand)
                ) && 
                (
                    this.CardAuthorization == other.CardAuthorization ||
                    this.CardAuthorization != null &&
                    this.CardAuthorization.Equals(other.CardAuthorization)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Mode != null)
                    hash = hash * 59 + this.Mode.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.CardTpIntegration != null)
                    hash = hash * 59 + this.CardTpIntegration.GetHashCode();
                if (this.CardCNPJ != null)
                    hash = hash * 59 + this.CardCNPJ.GetHashCode();
                if (this.CardBrand != null)
                    hash = hash * 59 + this.CardBrand.GetHashCode();
                if (this.CardAuthorization != null)
                    hash = hash * 59 + this.CardAuthorization.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // CardCNPJ (string) pattern
            Regex regexCardCNPJ = new Regex(@"[0-9]{14}", RegexOptions.CultureInvariant);
            if (false == regexCardCNPJ.Match(this.CardCNPJ).Success)
            {
                yield return new ValidationResult("Invalid value for CardCNPJ, must match a pattern of /[0-9]{14}/.", new [] { "CardCNPJ" });
            }

            // CardAuthorization (string) maxLength
            if(this.CardAuthorization != null && this.CardAuthorization.Length > 20)
            {
                yield return new ValidationResult("Invalid value for CardAuthorization, length must be less than 20.", new [] { "CardAuthorization" });
            }

            // CardAuthorization (string) minLength
            if(this.CardAuthorization != null && this.CardAuthorization.Length < 1)
            {
                yield return new ValidationResult("Invalid value for CardAuthorization, length must be greater than 1.", new [] { "CardAuthorization" });
            }

            yield break;
        }
    }

}
