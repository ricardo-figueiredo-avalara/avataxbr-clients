/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Transport
    /// </summary>
    [DataContract]
    public partial class Transport :  IEquatable<Transport>, IValidatableObject
    {
        /// <summary>
        /// Freight model  - 0 - CIF,  - 1 - FOB,  - 2 - Thrid party, - 9 - Free shipping when 9 - Free shipping, the fields below will be ignored if present - 'transporter' - 'withholdICMSTransport' - 'volumes' - 'vehicle' 
        /// </summary>
        /// <value>Freight model  - 0 - CIF,  - 1 - FOB,  - 2 - Thrid party, - 9 - Free shipping when 9 - Free shipping, the fields below will be ignored if present - 'transporter' - 'withholdICMSTransport' - 'volumes' - 'vehicle' </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModFreightEnum
        {
            
            /// <summary>
            /// Enum CIF for "CIF"
            /// </summary>
            [EnumMember(Value = "CIF")]
            CIF,
            
            /// <summary>
            /// Enum FOB for "FOB"
            /// </summary>
            [EnumMember(Value = "FOB")]
            FOB,
            
            /// <summary>
            /// Enum Thridparty for "Thridparty"
            /// </summary>
            [EnumMember(Value = "Thridparty")]
            Thridparty,
            
            /// <summary>
            /// Enum FreeShipping for "FreeShipping"
            /// </summary>
            [EnumMember(Value = "FreeShipping")]
            FreeShipping
        }

        /// <summary>
        /// Freight model  - 0 - CIF,  - 1 - FOB,  - 2 - Thrid party, - 9 - Free shipping when 9 - Free shipping, the fields below will be ignored if present - 'transporter' - 'withholdICMSTransport' - 'volumes' - 'vehicle' 
        /// </summary>
        /// <value>Freight model  - 0 - CIF,  - 1 - FOB,  - 2 - Thrid party, - 9 - Free shipping when 9 - Free shipping, the fields below will be ignored if present - 'transporter' - 'withholdICMSTransport' - 'volumes' - 'vehicle' </value>
        [DataMember(Name="modFreight", EmitDefaultValue=false)]
        public ModFreightEnum? ModFreight { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Transport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Transport" /> class.
        /// </summary>
        /// <param name="ModFreight">Freight model  - 0 - CIF,  - 1 - FOB,  - 2 - Thrid party, - 9 - Free shipping when 9 - Free shipping, the fields below will be ignored if present - &#39;transporter&#39; - &#39;withholdICMSTransport&#39; - &#39;volumes&#39; - &#39;vehicle&#39;  (required).</param>
        /// <param name="WithholdICMSTransport">Forces witholding of ICMS on transport amount (freight).</param>
        /// <param name="Volumes">Packages.</param>
        /// <param name="Vehicle">Vehicle.</param>
        public Transport(ModFreightEnum? ModFreight = default(ModFreightEnum?), bool? WithholdICMSTransport = default(bool?), List<TransportVolumes> Volumes = default(List<TransportVolumes>), VehicleTransp Vehicle = default(VehicleTransp))
        {
            // to ensure "ModFreight" is required (not null)
            if (ModFreight == null)
            {
                throw new InvalidDataException("ModFreight is a required property for Transport and cannot be null");
            }
            else
            {
                this.ModFreight = ModFreight;
            }
            this.WithholdICMSTransport = WithholdICMSTransport;
            this.Volumes = Volumes;
            this.Vehicle = Vehicle;
        }
        
        /// <summary>
        /// Forces witholding of ICMS on transport amount (freight)
        /// </summary>
        /// <value>Forces witholding of ICMS on transport amount (freight)</value>
        [DataMember(Name="withholdICMSTransport", EmitDefaultValue=false)]
        public bool? WithholdICMSTransport { get; set; }
        /// <summary>
        /// Packages
        /// </summary>
        /// <value>Packages</value>
        [DataMember(Name="volumes", EmitDefaultValue=false)]
        public List<TransportVolumes> Volumes { get; set; }
        /// <summary>
        /// Gets or Sets Vehicle
        /// </summary>
        [DataMember(Name="vehicle", EmitDefaultValue=false)]
        public VehicleTransp Vehicle { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transport {\n");
            sb.Append("  ModFreight: ").Append(ModFreight).Append("\n");
            sb.Append("  WithholdICMSTransport: ").Append(WithholdICMSTransport).Append("\n");
            sb.Append("  Volumes: ").Append(Volumes).Append("\n");
            sb.Append("  Vehicle: ").Append(Vehicle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Transport);
        }

        /// <summary>
        /// Returns true if Transport instances are equal
        /// </summary>
        /// <param name="other">Instance of Transport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transport other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ModFreight == other.ModFreight ||
                    this.ModFreight != null &&
                    this.ModFreight.Equals(other.ModFreight)
                ) && 
                (
                    this.WithholdICMSTransport == other.WithholdICMSTransport ||
                    this.WithholdICMSTransport != null &&
                    this.WithholdICMSTransport.Equals(other.WithholdICMSTransport)
                ) && 
                (
                    this.Volumes == other.Volumes ||
                    this.Volumes != null &&
                    this.Volumes.SequenceEqual(other.Volumes)
                ) && 
                (
                    this.Vehicle == other.Vehicle ||
                    this.Vehicle != null &&
                    this.Vehicle.Equals(other.Vehicle)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ModFreight != null)
                    hash = hash * 59 + this.ModFreight.GetHashCode();
                if (this.WithholdICMSTransport != null)
                    hash = hash * 59 + this.WithholdICMSTransport.GetHashCode();
                if (this.Volumes != null)
                    hash = hash * 59 + this.Volumes.GetHashCode();
                if (this.Vehicle != null)
                    hash = hash * 59 + this.Vehicle.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
