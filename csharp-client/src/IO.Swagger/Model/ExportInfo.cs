/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Export information
    /// </summary>
    [DataContract]
    public partial class ExportInfo :  IEquatable<ExportInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExportInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportInfo" /> class.
        /// </summary>
        /// <param name="ShippingState">shipping state (required).</param>
        /// <param name="Place">shipping place (required).</param>
        /// <param name="PlaceDescription">description of shipping place.</param>
        public ExportInfo(StateEnum ShippingState = default(StateEnum), string Place = default(string), string PlaceDescription = default(string))
        {
            // to ensure "ShippingState" is required (not null)
            if (ShippingState == null)
            {
                throw new InvalidDataException("ShippingState is a required property for ExportInfo and cannot be null");
            }
            else
            {
                this.ShippingState = ShippingState;
            }
            // to ensure "Place" is required (not null)
            if (Place == null)
            {
                throw new InvalidDataException("Place is a required property for ExportInfo and cannot be null");
            }
            else
            {
                this.Place = Place;
            }
            this.PlaceDescription = PlaceDescription;
        }
        
        /// <summary>
        /// shipping state
        /// </summary>
        /// <value>shipping state</value>
        [DataMember(Name="shippingState", EmitDefaultValue=false)]
        public StateEnum ShippingState { get; set; }
        /// <summary>
        /// shipping place
        /// </summary>
        /// <value>shipping place</value>
        [DataMember(Name="place", EmitDefaultValue=false)]
        public string Place { get; set; }
        /// <summary>
        /// description of shipping place
        /// </summary>
        /// <value>description of shipping place</value>
        [DataMember(Name="placeDescription", EmitDefaultValue=false)]
        public string PlaceDescription { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExportInfo {\n");
            sb.Append("  ShippingState: ").Append(ShippingState).Append("\n");
            sb.Append("  Place: ").Append(Place).Append("\n");
            sb.Append("  PlaceDescription: ").Append(PlaceDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ExportInfo);
        }

        /// <summary>
        /// Returns true if ExportInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ExportInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ShippingState == other.ShippingState ||
                    this.ShippingState != null &&
                    this.ShippingState.Equals(other.ShippingState)
                ) && 
                (
                    this.Place == other.Place ||
                    this.Place != null &&
                    this.Place.Equals(other.Place)
                ) && 
                (
                    this.PlaceDescription == other.PlaceDescription ||
                    this.PlaceDescription != null &&
                    this.PlaceDescription.Equals(other.PlaceDescription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ShippingState != null)
                    hash = hash * 59 + this.ShippingState.GetHashCode();
                if (this.Place != null)
                    hash = hash * 59 + this.Place.GetHashCode();
                if (this.PlaceDescription != null)
                    hash = hash * 59 + this.PlaceDescription.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Place (string) maxLength
            if(this.Place != null && this.Place.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Place, length must be less than 60.", new [] { "Place" });
            }

            // Place (string) minLength
            if(this.Place != null && this.Place.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Place, length must be greater than 1.", new [] { "Place" });
            }

            // PlaceDescription (string) maxLength
            if(this.PlaceDescription != null && this.PlaceDescription.Length > 60)
            {
                yield return new ValidationResult("Invalid value for PlaceDescription, length must be less than 60.", new [] { "PlaceDescription" });
            }

            // PlaceDescription (string) minLength
            if(this.PlaceDescription != null && this.PlaceDescription.Length < 1)
            {
                yield return new ValidationResult("Invalid value for PlaceDescription, length must be greater than 1.", new [] { "PlaceDescription" });
            }

            yield break;
        }
    }

}
