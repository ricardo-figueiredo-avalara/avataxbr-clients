/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CfopConf
    /// </summary>
    [DataContract]
    public partial class CfopConf :  IEquatable<CfopConf>, IValidatableObject
    {
        /// <summary>
        /// Inform if this process is subject to IPI taxation on output process - 'T'  # TAXABLE - 'Z'  # TAXABLE WITH RATE=0.00 - 'E'  # EXEMPT - 'H'  # SUSPENDED - 'N'  # NO TAXABLE     - 'I'  # IMMUNE - 'O'  # OTHER - 'OZ' # OTHER AND ZERO VALUES 
        /// </summary>
        /// <value>Inform if this process is subject to IPI taxation on output process - 'T'  # TAXABLE - 'Z'  # TAXABLE WITH RATE=0.00 - 'E'  # EXEMPT - 'H'  # SUSPENDED - 'N'  # NO TAXABLE     - 'I'  # IMMUNE - 'O'  # OTHER - 'OZ' # OTHER AND ZERO VALUES </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CstIPIEnum
        {
            
            /// <summary>
            /// Enum T for "T"
            /// </summary>
            [EnumMember(Value = "T")]
            T,
            
            /// <summary>
            /// Enum Z for "Z"
            /// </summary>
            [EnumMember(Value = "Z")]
            Z,
            
            /// <summary>
            /// Enum E for "E"
            /// </summary>
            [EnumMember(Value = "E")]
            E,
            
            /// <summary>
            /// Enum H for "H"
            /// </summary>
            [EnumMember(Value = "H")]
            H,
            
            /// <summary>
            /// Enum N for "N"
            /// </summary>
            [EnumMember(Value = "N")]
            N,
            
            /// <summary>
            /// Enum I for "I"
            /// </summary>
            [EnumMember(Value = "I")]
            I,
            
            /// <summary>
            /// Enum O for "O"
            /// </summary>
            [EnumMember(Value = "O")]
            O,
            
            /// <summary>
            /// Enum OZ for "OZ"
            /// </summary>
            [EnumMember(Value = "OZ")]
            OZ
        }

        /// <summary>
        /// Inform if this item by nature is subject to PIS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE - 'O' # OTHER - 'OZ'# OTHER AND ZERO VALUES 
        /// </summary>
        /// <value>Inform if this item by nature is subject to PIS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE - 'O' # OTHER - 'OZ'# OTHER AND ZERO VALUES </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccruablePISTaxationEnum
        {
            
            /// <summary>
            /// Enum T for "T"
            /// </summary>
            [EnumMember(Value = "T")]
            T,
            
            /// <summary>
            /// Enum Z for "Z"
            /// </summary>
            [EnumMember(Value = "Z")]
            Z,
            
            /// <summary>
            /// Enum E for "E"
            /// </summary>
            [EnumMember(Value = "E")]
            E,
            
            /// <summary>
            /// Enum H for "H"
            /// </summary>
            [EnumMember(Value = "H")]
            H,
            
            /// <summary>
            /// Enum N for "N"
            /// </summary>
            [EnumMember(Value = "N")]
            N,
            
            /// <summary>
            /// Enum O for "O"
            /// </summary>
            [EnumMember(Value = "O")]
            O,
            
            /// <summary>
            /// Enum OZ for "OZ"
            /// </summary>
            [EnumMember(Value = "OZ")]
            OZ
        }

        /// <summary>
        /// Inform if this item by nature is subject to COFINS taxation or exempt - 'T'  # TAXABLE - 'Z'  # TAXABLE WITH RATE=0.00 - 'E'  # EXEMPT - 'H'  # SUSPENDED - 'N'  # NO TAXABLE     - 'O'  # OTHER - 'OZ' # OTHER AND ZERO VALUES 
        /// </summary>
        /// <value>Inform if this item by nature is subject to COFINS taxation or exempt - 'T'  # TAXABLE - 'Z'  # TAXABLE WITH RATE=0.00 - 'E'  # EXEMPT - 'H'  # SUSPENDED - 'N'  # NO TAXABLE     - 'O'  # OTHER - 'OZ' # OTHER AND ZERO VALUES </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccruableCOFINSTaxationEnum
        {
            
            /// <summary>
            /// Enum T for "T"
            /// </summary>
            [EnumMember(Value = "T")]
            T,
            
            /// <summary>
            /// Enum Z for "Z"
            /// </summary>
            [EnumMember(Value = "Z")]
            Z,
            
            /// <summary>
            /// Enum E for "E"
            /// </summary>
            [EnumMember(Value = "E")]
            E,
            
            /// <summary>
            /// Enum H for "H"
            /// </summary>
            [EnumMember(Value = "H")]
            H,
            
            /// <summary>
            /// Enum N for "N"
            /// </summary>
            [EnumMember(Value = "N")]
            N,
            
            /// <summary>
            /// Enum O for "O"
            /// </summary>
            [EnumMember(Value = "O")]
            O,
            
            /// <summary>
            /// Enum OZ for "OZ"
            /// </summary>
            [EnumMember(Value = "OZ")]
            OZ
        }

        /// <summary>
        /// inform if the transaction is an operation to internalizing item or value
        /// </summary>
        /// <value>inform if the transaction is an operation to internalizing item or value</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WayTypeEnum
        {
            
            /// <summary>
            /// Enum In for "in"
            /// </summary>
            [EnumMember(Value = "in")]
            In,
            
            /// <summary>
            /// Enum Out for "out"
            /// </summary>
            [EnumMember(Value = "out")]
            Out
        }

        /// <summary>
        /// this field is used to define right CFOP, one operation type can be specialized to item product, item merchandise or generic
        /// </summary>
        /// <value>this field is used to define right CFOP, one operation type can be specialized to item product, item merchandise or generic</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProductTypeEnum
        {
            
            /// <summary>
            /// Enum FORPRODUCT for "FOR PRODUCT"
            /// </summary>
            [EnumMember(Value = "FOR PRODUCT")]
            FORPRODUCT,
            
            /// <summary>
            /// Enum FORMERCHANDISE for "FOR MERCHANDISE"
            /// </summary>
            [EnumMember(Value = "FOR MERCHANDISE")]
            FORMERCHANDISE,
            
            /// <summary>
            /// Enum NORESTRICTION for "NO RESTRICTION"
            /// </summary>
            [EnumMember(Value = "NO RESTRICTION")]
            NORESTRICTION
        }

        /// <summary>
        /// field used to indicate an operation to some product class specifically
        /// </summary>
        /// <value>field used to indicate an operation to some product class specifically</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SpecificForProductClassEnum
        {
            
            /// <summary>
            /// Enum OTHERS for "OTHERS"
            /// </summary>
            [EnumMember(Value = "OTHERS")]
            OTHERS,
            
            /// <summary>
            /// Enum COMMUNICATION for "COMMUNICATION"
            /// </summary>
            [EnumMember(Value = "COMMUNICATION")]
            COMMUNICATION,
            
            /// <summary>
            /// Enum ENERGY for "ENERGY"
            /// </summary>
            [EnumMember(Value = "ENERGY")]
            ENERGY,
            
            /// <summary>
            /// Enum TRANSPORT for "TRANSPORT"
            /// </summary>
            [EnumMember(Value = "TRANSPORT")]
            TRANSPORT,
            
            /// <summary>
            /// Enum FUELANDLUBRIFICANT for "FUEL AND LUBRIFICANT"
            /// </summary>
            [EnumMember(Value = "FUEL AND LUBRIFICANT")]
            FUELANDLUBRIFICANT,
            
            /// <summary>
            /// Enum VEHICLE for "VEHICLE"
            /// </summary>
            [EnumMember(Value = "VEHICLE")]
            VEHICLE,
            
            /// <summary>
            /// Enum ALCOHOLICBEVERAGES for "ALCOHOLIC BEVERAGES"
            /// </summary>
            [EnumMember(Value = "ALCOHOLIC BEVERAGES")]
            ALCOHOLICBEVERAGES,
            
            /// <summary>
            /// Enum WEAPONS for "WEAPONS"
            /// </summary>
            [EnumMember(Value = "WEAPONS")]
            WEAPONS,
            
            /// <summary>
            /// Enum AMMO for "AMMO"
            /// </summary>
            [EnumMember(Value = "AMMO")]
            AMMO,
            
            /// <summary>
            /// Enum PERFUM for "PERFUM"
            /// </summary>
            [EnumMember(Value = "PERFUM")]
            PERFUM,
            
            /// <summary>
            /// Enum TOBACCO for "TOBACCO"
            /// </summary>
            [EnumMember(Value = "TOBACCO")]
            TOBACCO
        }

        /// <summary>
        /// Inform if this process is subject to IPI taxation on output process - 'T'  # TAXABLE - 'Z'  # TAXABLE WITH RATE=0.00 - 'E'  # EXEMPT - 'H'  # SUSPENDED - 'N'  # NO TAXABLE     - 'I'  # IMMUNE - 'O'  # OTHER - 'OZ' # OTHER AND ZERO VALUES 
        /// </summary>
        /// <value>Inform if this process is subject to IPI taxation on output process - 'T'  # TAXABLE - 'Z'  # TAXABLE WITH RATE=0.00 - 'E'  # EXEMPT - 'H'  # SUSPENDED - 'N'  # NO TAXABLE     - 'I'  # IMMUNE - 'O'  # OTHER - 'OZ' # OTHER AND ZERO VALUES </value>
        [DataMember(Name="cstIPI", EmitDefaultValue=false)]
        public CstIPIEnum? CstIPI { get; set; }
        /// <summary>
        /// Inform if this item by nature is subject to PIS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE - 'O' # OTHER - 'OZ'# OTHER AND ZERO VALUES 
        /// </summary>
        /// <value>Inform if this item by nature is subject to PIS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE - 'O' # OTHER - 'OZ'# OTHER AND ZERO VALUES </value>
        [DataMember(Name="accruablePISTaxation", EmitDefaultValue=false)]
        public AccruablePISTaxationEnum? AccruablePISTaxation { get; set; }
        /// <summary>
        /// Inform if this item by nature is subject to COFINS taxation or exempt - 'T'  # TAXABLE - 'Z'  # TAXABLE WITH RATE=0.00 - 'E'  # EXEMPT - 'H'  # SUSPENDED - 'N'  # NO TAXABLE     - 'O'  # OTHER - 'OZ' # OTHER AND ZERO VALUES 
        /// </summary>
        /// <value>Inform if this item by nature is subject to COFINS taxation or exempt - 'T'  # TAXABLE - 'Z'  # TAXABLE WITH RATE=0.00 - 'E'  # EXEMPT - 'H'  # SUSPENDED - 'N'  # NO TAXABLE     - 'O'  # OTHER - 'OZ' # OTHER AND ZERO VALUES </value>
        [DataMember(Name="accruableCOFINSTaxation", EmitDefaultValue=false)]
        public AccruableCOFINSTaxationEnum? AccruableCOFINSTaxation { get; set; }
        /// <summary>
        /// inform if the transaction is an operation to internalizing item or value
        /// </summary>
        /// <value>inform if the transaction is an operation to internalizing item or value</value>
        [DataMember(Name="wayType", EmitDefaultValue=false)]
        public WayTypeEnum? WayType { get; set; }
        /// <summary>
        /// this field is used to define right CFOP, one operation type can be specialized to item product, item merchandise or generic
        /// </summary>
        /// <value>this field is used to define right CFOP, one operation type can be specialized to item product, item merchandise or generic</value>
        [DataMember(Name="productType", EmitDefaultValue=false)]
        public ProductTypeEnum? ProductType { get; set; }
        /// <summary>
        /// field used to indicate an operation to some product class specifically
        /// </summary>
        /// <value>field used to indicate an operation to some product class specifically</value>
        [DataMember(Name="specificForProductClass", EmitDefaultValue=false)]
        public SpecificForProductClassEnum? SpecificForProductClass { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CfopConf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CfopConf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CfopConf" /> class.
        /// </summary>
        /// <param name="Code">main unique identificator (required).</param>
        /// <param name="StockImpact">Inform that the process has inventory impact..</param>
        /// <param name="FinancialImpact">Inform that the process has financial impact..</param>
        /// <param name="CstIPI">Inform if this process is subject to IPI taxation on output process - &#39;T&#39;  # TAXABLE - &#39;Z&#39;  # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39;  # EXEMPT - &#39;H&#39;  # SUSPENDED - &#39;N&#39;  # NO TAXABLE     - &#39;I&#39;  # IMMUNE - &#39;O&#39;  # OTHER - &#39;OZ&#39; # OTHER AND ZERO VALUES .</param>
        /// <param name="IpiLegalTaxClass">Legal tax classificação for IPI (enquadramento) When the processo has CST IPI 52 or 54, is mandatory inform Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo&#x3D;mCnJajU4BKU&#x3D; .</param>
        /// <param name="AccruablePISTaxation">Inform if this item by nature is subject to PIS taxation or exempt - &#39;T&#39; # TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;N&#39; # NO TAXABLE - &#39;O&#39; # OTHER - &#39;OZ&#39;# OTHER AND ZERO VALUES .</param>
        /// <param name="PisExemptLegalReasonCode">When exempt, taxable with zero, suspended, not taxable, this field holds the official code number.</param>
        /// <param name="PisExemptLegalReason">When specifi reason, this field has the description.</param>
        /// <param name="AccruableCOFINSTaxation">Inform if this item by nature is subject to COFINS taxation or exempt - &#39;T&#39;  # TAXABLE - &#39;Z&#39;  # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39;  # EXEMPT - &#39;H&#39;  # SUSPENDED - &#39;N&#39;  # NO TAXABLE     - &#39;O&#39;  # OTHER - &#39;OZ&#39; # OTHER AND ZERO VALUES .</param>
        /// <param name="CofinsExemptLegalReasonCode">When exempt, taxable with zero, suspended, not taxable, this field holds the official code number.</param>
        /// <param name="CofinsExemptLegalReason">When specifi reason, this field has the description.</param>
        /// <param name="AllowIPIcreditWhenInGoing">Inform that the process allow IPI credit to Input process.</param>
        /// <param name="IcmsConf">the map key is state code.</param>
        /// <param name="Name">Name (required).</param>
        /// <param name="Description">Description.</param>
        /// <param name="WayType">inform if the transaction is an operation to internalizing item or value.</param>
        /// <param name="CodInState">CFOP code (tax code operation) when the transactions are within the same state..</param>
        /// <param name="CodOtherState">CFOP code (tax code operation) when the transactions are to another state..</param>
        /// <param name="CodOtherCountry">CFOP code (tax code operation) when the transactions are to another country..</param>
        /// <param name="CstICMSSameState">CstICMSSameState.</param>
        /// <param name="CstICMSOtherState">CstICMSOtherState.</param>
        /// <param name="CstICMSOtherCountry">CstICMSOtherCountry.</param>
        /// <param name="ProductType">this field is used to define right CFOP, one operation type can be specialized to item product, item merchandise or generic.</param>
        /// <param name="OperationToTaxPayerOtherState">field used to indicate an operation to ICMS tax payer.</param>
        /// <param name="OperationWithST">field used to indicate an operation to items sibject to ICMS-ST.</param>
        /// <param name="OperationToFreeZone">field used to indicate an operation to free zone.</param>
        /// <param name="SpecificForProductClass">field used to indicate an operation to some product class specifically.</param>
        public CfopConf(string Code = default(string), bool? StockImpact = default(bool?), bool? FinancialImpact = default(bool?), CstIPIEnum? CstIPI = default(CstIPIEnum?), string IpiLegalTaxClass = default(string), AccruablePISTaxationEnum? AccruablePISTaxation = default(AccruablePISTaxationEnum?), string PisExemptLegalReasonCode = default(string), string PisExemptLegalReason = default(string), AccruableCOFINSTaxationEnum? AccruableCOFINSTaxation = default(AccruableCOFINSTaxationEnum?), string CofinsExemptLegalReasonCode = default(string), string CofinsExemptLegalReason = default(string), bool? AllowIPIcreditWhenInGoing = default(bool?), List<IcmsTaxConf> IcmsConf = default(List<IcmsTaxConf>), string Name = default(string), string Description = default(string), WayTypeEnum? WayType = default(WayTypeEnum?), int? CodInState = default(int?), int? CodOtherState = default(int?), int? CodOtherCountry = default(int?), CstIcmsEnum CstICMSSameState = default(CstIcmsEnum), CstIcmsEnum CstICMSOtherState = default(CstIcmsEnum), CstIcmsEnum CstICMSOtherCountry = default(CstIcmsEnum), ProductTypeEnum? ProductType = default(ProductTypeEnum?), bool? OperationToTaxPayerOtherState = default(bool?), bool? OperationWithST = default(bool?), bool? OperationToFreeZone = default(bool?), SpecificForProductClassEnum? SpecificForProductClass = default(SpecificForProductClassEnum?))
        {
            // to ensure "Code" is required (not null)
            if (Code == null)
            {
                throw new InvalidDataException("Code is a required property for CfopConf and cannot be null");
            }
            else
            {
                this.Code = Code;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CfopConf and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.StockImpact = StockImpact;
            this.FinancialImpact = FinancialImpact;
            this.CstIPI = CstIPI;
            this.IpiLegalTaxClass = IpiLegalTaxClass;
            this.AccruablePISTaxation = AccruablePISTaxation;
            this.PisExemptLegalReasonCode = PisExemptLegalReasonCode;
            this.PisExemptLegalReason = PisExemptLegalReason;
            this.AccruableCOFINSTaxation = AccruableCOFINSTaxation;
            this.CofinsExemptLegalReasonCode = CofinsExemptLegalReasonCode;
            this.CofinsExemptLegalReason = CofinsExemptLegalReason;
            this.AllowIPIcreditWhenInGoing = AllowIPIcreditWhenInGoing;
            this.IcmsConf = IcmsConf;
            this.Description = Description;
            this.WayType = WayType;
            this.CodInState = CodInState;
            this.CodOtherState = CodOtherState;
            this.CodOtherCountry = CodOtherCountry;
            this.CstICMSSameState = CstICMSSameState;
            this.CstICMSOtherState = CstICMSOtherState;
            this.CstICMSOtherCountry = CstICMSOtherCountry;
            this.ProductType = ProductType;
            this.OperationToTaxPayerOtherState = OperationToTaxPayerOtherState;
            this.OperationWithST = OperationWithST;
            this.OperationToFreeZone = OperationToFreeZone;
            this.SpecificForProductClass = SpecificForProductClass;
        }
        
        /// <summary>
        /// main unique identificator
        /// </summary>
        /// <value>main unique identificator</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Inform that the process has inventory impact.
        /// </summary>
        /// <value>Inform that the process has inventory impact.</value>
        [DataMember(Name="stockImpact", EmitDefaultValue=false)]
        public bool? StockImpact { get; set; }
        /// <summary>
        /// Inform that the process has financial impact.
        /// </summary>
        /// <value>Inform that the process has financial impact.</value>
        [DataMember(Name="financialImpact", EmitDefaultValue=false)]
        public bool? FinancialImpact { get; set; }
        /// <summary>
        /// Legal tax classificação for IPI (enquadramento) When the processo has CST IPI 52 or 54, is mandatory inform Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo&#x3D;mCnJajU4BKU&#x3D; 
        /// </summary>
        /// <value>Legal tax classificação for IPI (enquadramento) When the processo has CST IPI 52 or 54, is mandatory inform Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo&#x3D;mCnJajU4BKU&#x3D; </value>
        [DataMember(Name="ipiLegalTaxClass", EmitDefaultValue=false)]
        public string IpiLegalTaxClass { get; set; }
        /// <summary>
        /// When exempt, taxable with zero, suspended, not taxable, this field holds the official code number
        /// </summary>
        /// <value>When exempt, taxable with zero, suspended, not taxable, this field holds the official code number</value>
        [DataMember(Name="pisExemptLegalReasonCode", EmitDefaultValue=false)]
        public string PisExemptLegalReasonCode { get; set; }
        /// <summary>
        /// When specifi reason, this field has the description
        /// </summary>
        /// <value>When specifi reason, this field has the description</value>
        [DataMember(Name="pisExemptLegalReason", EmitDefaultValue=false)]
        public string PisExemptLegalReason { get; set; }
        /// <summary>
        /// When exempt, taxable with zero, suspended, not taxable, this field holds the official code number
        /// </summary>
        /// <value>When exempt, taxable with zero, suspended, not taxable, this field holds the official code number</value>
        [DataMember(Name="cofinsExemptLegalReasonCode", EmitDefaultValue=false)]
        public string CofinsExemptLegalReasonCode { get; set; }
        /// <summary>
        /// When specifi reason, this field has the description
        /// </summary>
        /// <value>When specifi reason, this field has the description</value>
        [DataMember(Name="cofinsExemptLegalReason", EmitDefaultValue=false)]
        public string CofinsExemptLegalReason { get; set; }
        /// <summary>
        /// Inform that the process allow IPI credit to Input process
        /// </summary>
        /// <value>Inform that the process allow IPI credit to Input process</value>
        [DataMember(Name="allowIPIcreditWhenInGoing", EmitDefaultValue=false)]
        public bool? AllowIPIcreditWhenInGoing { get; set; }
        /// <summary>
        /// the map key is state code
        /// </summary>
        /// <value>the map key is state code</value>
        [DataMember(Name="icmsConf", EmitDefaultValue=false)]
        public List<IcmsTaxConf> IcmsConf { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// CFOP code (tax code operation) when the transactions are within the same state.
        /// </summary>
        /// <value>CFOP code (tax code operation) when the transactions are within the same state.</value>
        [DataMember(Name="codInState", EmitDefaultValue=false)]
        public int? CodInState { get; set; }
        /// <summary>
        /// CFOP code (tax code operation) when the transactions are to another state.
        /// </summary>
        /// <value>CFOP code (tax code operation) when the transactions are to another state.</value>
        [DataMember(Name="codOtherState", EmitDefaultValue=false)]
        public int? CodOtherState { get; set; }
        /// <summary>
        /// CFOP code (tax code operation) when the transactions are to another country.
        /// </summary>
        /// <value>CFOP code (tax code operation) when the transactions are to another country.</value>
        [DataMember(Name="codOtherCountry", EmitDefaultValue=false)]
        public int? CodOtherCountry { get; set; }
        /// <summary>
        /// Gets or Sets CstICMSSameState
        /// </summary>
        [DataMember(Name="cstICMSSameState", EmitDefaultValue=false)]
        public CstIcmsEnum CstICMSSameState { get; set; }
        /// <summary>
        /// Gets or Sets CstICMSOtherState
        /// </summary>
        [DataMember(Name="cstICMSOtherState", EmitDefaultValue=false)]
        public CstIcmsEnum CstICMSOtherState { get; set; }
        /// <summary>
        /// Gets or Sets CstICMSOtherCountry
        /// </summary>
        [DataMember(Name="cstICMSOtherCountry", EmitDefaultValue=false)]
        public CstIcmsEnum CstICMSOtherCountry { get; set; }
        /// <summary>
        /// field used to indicate an operation to ICMS tax payer
        /// </summary>
        /// <value>field used to indicate an operation to ICMS tax payer</value>
        [DataMember(Name="operationToTaxPayerOtherState", EmitDefaultValue=false)]
        public bool? OperationToTaxPayerOtherState { get; set; }
        /// <summary>
        /// field used to indicate an operation to items sibject to ICMS-ST
        /// </summary>
        /// <value>field used to indicate an operation to items sibject to ICMS-ST</value>
        [DataMember(Name="operationWithST", EmitDefaultValue=false)]
        public bool? OperationWithST { get; set; }
        /// <summary>
        /// field used to indicate an operation to free zone
        /// </summary>
        /// <value>field used to indicate an operation to free zone</value>
        [DataMember(Name="operationToFreeZone", EmitDefaultValue=false)]
        public bool? OperationToFreeZone { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CfopConf {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  StockImpact: ").Append(StockImpact).Append("\n");
            sb.Append("  FinancialImpact: ").Append(FinancialImpact).Append("\n");
            sb.Append("  CstIPI: ").Append(CstIPI).Append("\n");
            sb.Append("  IpiLegalTaxClass: ").Append(IpiLegalTaxClass).Append("\n");
            sb.Append("  AccruablePISTaxation: ").Append(AccruablePISTaxation).Append("\n");
            sb.Append("  PisExemptLegalReasonCode: ").Append(PisExemptLegalReasonCode).Append("\n");
            sb.Append("  PisExemptLegalReason: ").Append(PisExemptLegalReason).Append("\n");
            sb.Append("  AccruableCOFINSTaxation: ").Append(AccruableCOFINSTaxation).Append("\n");
            sb.Append("  CofinsExemptLegalReasonCode: ").Append(CofinsExemptLegalReasonCode).Append("\n");
            sb.Append("  CofinsExemptLegalReason: ").Append(CofinsExemptLegalReason).Append("\n");
            sb.Append("  AllowIPIcreditWhenInGoing: ").Append(AllowIPIcreditWhenInGoing).Append("\n");
            sb.Append("  IcmsConf: ").Append(IcmsConf).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  WayType: ").Append(WayType).Append("\n");
            sb.Append("  CodInState: ").Append(CodInState).Append("\n");
            sb.Append("  CodOtherState: ").Append(CodOtherState).Append("\n");
            sb.Append("  CodOtherCountry: ").Append(CodOtherCountry).Append("\n");
            sb.Append("  CstICMSSameState: ").Append(CstICMSSameState).Append("\n");
            sb.Append("  CstICMSOtherState: ").Append(CstICMSOtherState).Append("\n");
            sb.Append("  CstICMSOtherCountry: ").Append(CstICMSOtherCountry).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  OperationToTaxPayerOtherState: ").Append(OperationToTaxPayerOtherState).Append("\n");
            sb.Append("  OperationWithST: ").Append(OperationWithST).Append("\n");
            sb.Append("  OperationToFreeZone: ").Append(OperationToFreeZone).Append("\n");
            sb.Append("  SpecificForProductClass: ").Append(SpecificForProductClass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CfopConf);
        }

        /// <summary>
        /// Returns true if CfopConf instances are equal
        /// </summary>
        /// <param name="other">Instance of CfopConf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CfopConf other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.StockImpact == other.StockImpact ||
                    this.StockImpact != null &&
                    this.StockImpact.Equals(other.StockImpact)
                ) && 
                (
                    this.FinancialImpact == other.FinancialImpact ||
                    this.FinancialImpact != null &&
                    this.FinancialImpact.Equals(other.FinancialImpact)
                ) && 
                (
                    this.CstIPI == other.CstIPI ||
                    this.CstIPI != null &&
                    this.CstIPI.Equals(other.CstIPI)
                ) && 
                (
                    this.IpiLegalTaxClass == other.IpiLegalTaxClass ||
                    this.IpiLegalTaxClass != null &&
                    this.IpiLegalTaxClass.Equals(other.IpiLegalTaxClass)
                ) && 
                (
                    this.AccruablePISTaxation == other.AccruablePISTaxation ||
                    this.AccruablePISTaxation != null &&
                    this.AccruablePISTaxation.Equals(other.AccruablePISTaxation)
                ) && 
                (
                    this.PisExemptLegalReasonCode == other.PisExemptLegalReasonCode ||
                    this.PisExemptLegalReasonCode != null &&
                    this.PisExemptLegalReasonCode.Equals(other.PisExemptLegalReasonCode)
                ) && 
                (
                    this.PisExemptLegalReason == other.PisExemptLegalReason ||
                    this.PisExemptLegalReason != null &&
                    this.PisExemptLegalReason.Equals(other.PisExemptLegalReason)
                ) && 
                (
                    this.AccruableCOFINSTaxation == other.AccruableCOFINSTaxation ||
                    this.AccruableCOFINSTaxation != null &&
                    this.AccruableCOFINSTaxation.Equals(other.AccruableCOFINSTaxation)
                ) && 
                (
                    this.CofinsExemptLegalReasonCode == other.CofinsExemptLegalReasonCode ||
                    this.CofinsExemptLegalReasonCode != null &&
                    this.CofinsExemptLegalReasonCode.Equals(other.CofinsExemptLegalReasonCode)
                ) && 
                (
                    this.CofinsExemptLegalReason == other.CofinsExemptLegalReason ||
                    this.CofinsExemptLegalReason != null &&
                    this.CofinsExemptLegalReason.Equals(other.CofinsExemptLegalReason)
                ) && 
                (
                    this.AllowIPIcreditWhenInGoing == other.AllowIPIcreditWhenInGoing ||
                    this.AllowIPIcreditWhenInGoing != null &&
                    this.AllowIPIcreditWhenInGoing.Equals(other.AllowIPIcreditWhenInGoing)
                ) && 
                (
                    this.IcmsConf == other.IcmsConf ||
                    this.IcmsConf != null &&
                    this.IcmsConf.SequenceEqual(other.IcmsConf)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.WayType == other.WayType ||
                    this.WayType != null &&
                    this.WayType.Equals(other.WayType)
                ) && 
                (
                    this.CodInState == other.CodInState ||
                    this.CodInState != null &&
                    this.CodInState.Equals(other.CodInState)
                ) && 
                (
                    this.CodOtherState == other.CodOtherState ||
                    this.CodOtherState != null &&
                    this.CodOtherState.Equals(other.CodOtherState)
                ) && 
                (
                    this.CodOtherCountry == other.CodOtherCountry ||
                    this.CodOtherCountry != null &&
                    this.CodOtherCountry.Equals(other.CodOtherCountry)
                ) && 
                (
                    this.CstICMSSameState == other.CstICMSSameState ||
                    this.CstICMSSameState != null &&
                    this.CstICMSSameState.Equals(other.CstICMSSameState)
                ) && 
                (
                    this.CstICMSOtherState == other.CstICMSOtherState ||
                    this.CstICMSOtherState != null &&
                    this.CstICMSOtherState.Equals(other.CstICMSOtherState)
                ) && 
                (
                    this.CstICMSOtherCountry == other.CstICMSOtherCountry ||
                    this.CstICMSOtherCountry != null &&
                    this.CstICMSOtherCountry.Equals(other.CstICMSOtherCountry)
                ) && 
                (
                    this.ProductType == other.ProductType ||
                    this.ProductType != null &&
                    this.ProductType.Equals(other.ProductType)
                ) && 
                (
                    this.OperationToTaxPayerOtherState == other.OperationToTaxPayerOtherState ||
                    this.OperationToTaxPayerOtherState != null &&
                    this.OperationToTaxPayerOtherState.Equals(other.OperationToTaxPayerOtherState)
                ) && 
                (
                    this.OperationWithST == other.OperationWithST ||
                    this.OperationWithST != null &&
                    this.OperationWithST.Equals(other.OperationWithST)
                ) && 
                (
                    this.OperationToFreeZone == other.OperationToFreeZone ||
                    this.OperationToFreeZone != null &&
                    this.OperationToFreeZone.Equals(other.OperationToFreeZone)
                ) && 
                (
                    this.SpecificForProductClass == other.SpecificForProductClass ||
                    this.SpecificForProductClass != null &&
                    this.SpecificForProductClass.Equals(other.SpecificForProductClass)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.StockImpact != null)
                    hash = hash * 59 + this.StockImpact.GetHashCode();
                if (this.FinancialImpact != null)
                    hash = hash * 59 + this.FinancialImpact.GetHashCode();
                if (this.CstIPI != null)
                    hash = hash * 59 + this.CstIPI.GetHashCode();
                if (this.IpiLegalTaxClass != null)
                    hash = hash * 59 + this.IpiLegalTaxClass.GetHashCode();
                if (this.AccruablePISTaxation != null)
                    hash = hash * 59 + this.AccruablePISTaxation.GetHashCode();
                if (this.PisExemptLegalReasonCode != null)
                    hash = hash * 59 + this.PisExemptLegalReasonCode.GetHashCode();
                if (this.PisExemptLegalReason != null)
                    hash = hash * 59 + this.PisExemptLegalReason.GetHashCode();
                if (this.AccruableCOFINSTaxation != null)
                    hash = hash * 59 + this.AccruableCOFINSTaxation.GetHashCode();
                if (this.CofinsExemptLegalReasonCode != null)
                    hash = hash * 59 + this.CofinsExemptLegalReasonCode.GetHashCode();
                if (this.CofinsExemptLegalReason != null)
                    hash = hash * 59 + this.CofinsExemptLegalReason.GetHashCode();
                if (this.AllowIPIcreditWhenInGoing != null)
                    hash = hash * 59 + this.AllowIPIcreditWhenInGoing.GetHashCode();
                if (this.IcmsConf != null)
                    hash = hash * 59 + this.IcmsConf.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.WayType != null)
                    hash = hash * 59 + this.WayType.GetHashCode();
                if (this.CodInState != null)
                    hash = hash * 59 + this.CodInState.GetHashCode();
                if (this.CodOtherState != null)
                    hash = hash * 59 + this.CodOtherState.GetHashCode();
                if (this.CodOtherCountry != null)
                    hash = hash * 59 + this.CodOtherCountry.GetHashCode();
                if (this.CstICMSSameState != null)
                    hash = hash * 59 + this.CstICMSSameState.GetHashCode();
                if (this.CstICMSOtherState != null)
                    hash = hash * 59 + this.CstICMSOtherState.GetHashCode();
                if (this.CstICMSOtherCountry != null)
                    hash = hash * 59 + this.CstICMSOtherCountry.GetHashCode();
                if (this.ProductType != null)
                    hash = hash * 59 + this.ProductType.GetHashCode();
                if (this.OperationToTaxPayerOtherState != null)
                    hash = hash * 59 + this.OperationToTaxPayerOtherState.GetHashCode();
                if (this.OperationWithST != null)
                    hash = hash * 59 + this.OperationWithST.GetHashCode();
                if (this.OperationToFreeZone != null)
                    hash = hash * 59 + this.OperationToFreeZone.GetHashCode();
                if (this.SpecificForProductClass != null)
                    hash = hash * 59 + this.SpecificForProductClass.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Code (string) maxLength
            if(this.Code != null && this.Code.Length > 40)
            {
                yield return new ValidationResult("Invalid value for Code, length must be less than 40.", new [] { "Code" });
            }

            // PisExemptLegalReasonCode (string) maxLength
            if(this.PisExemptLegalReasonCode != null && this.PisExemptLegalReasonCode.Length > 3)
            {
                yield return new ValidationResult("Invalid value for PisExemptLegalReasonCode, length must be less than 3.", new [] { "PisExemptLegalReasonCode" });
            }

            // PisExemptLegalReason (string) maxLength
            if(this.PisExemptLegalReason != null && this.PisExemptLegalReason.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for PisExemptLegalReason, length must be less than 1024.", new [] { "PisExemptLegalReason" });
            }

            // CofinsExemptLegalReasonCode (string) maxLength
            if(this.CofinsExemptLegalReasonCode != null && this.CofinsExemptLegalReasonCode.Length > 3)
            {
                yield return new ValidationResult("Invalid value for CofinsExemptLegalReasonCode, length must be less than 3.", new [] { "CofinsExemptLegalReasonCode" });
            }

            // CofinsExemptLegalReason (string) maxLength
            if(this.CofinsExemptLegalReason != null && this.CofinsExemptLegalReason.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for CofinsExemptLegalReason, length must be less than 1024.", new [] { "CofinsExemptLegalReason" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 60.", new [] { "Name" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 512)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 512.", new [] { "Description" });
            }

            yield break;
        }
    }

}
