/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PurchaseTaxByTypeDetail
    /// </summary>
    [DataContract]
    public partial class PurchaseTaxByTypeDetail :  IEquatable<PurchaseTaxByTypeDetail>, IValidatableObject
    {
        /// <summary>
        /// Type of jurisdiction - 'city' - 'state' - 'country' 
        /// </summary>
        /// <value>Type of jurisdiction - 'city' - 'state' - 'country' </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JurisdictionTypeEnum
        {
            
            /// <summary>
            /// Enum City for "city"
            /// </summary>
            [EnumMember(Value = "city")]
            City,
            
            /// <summary>
            /// Enum State for "state"
            /// </summary>
            [EnumMember(Value = "state")]
            State,
            
            /// <summary>
            /// Enum Country for "country"
            /// </summary>
            [EnumMember(Value = "country")]
            Country
        }

        /// <summary>
        /// Tax identificator - 'pis' - 'pisRf' - 'cofins' - 'cofinsRf' - 'csll' - 'csllRf' - 'irrf' - 'inssAr' - 'inssRf' - 'issRf' 
        /// </summary>
        /// <value>Tax identificator - 'pis' - 'pisRf' - 'cofins' - 'cofinsRf' - 'csll' - 'csllRf' - 'irrf' - 'inssAr' - 'inssRf' - 'issRf' </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxTypeEnum
        {
            
            /// <summary>
            /// Enum Pis for "pis"
            /// </summary>
            [EnumMember(Value = "pis")]
            Pis,
            
            /// <summary>
            /// Enum PisRf for "pisRf"
            /// </summary>
            [EnumMember(Value = "pisRf")]
            PisRf,
            
            /// <summary>
            /// Enum Cofins for "cofins"
            /// </summary>
            [EnumMember(Value = "cofins")]
            Cofins,
            
            /// <summary>
            /// Enum CofinsRf for "cofinsRf"
            /// </summary>
            [EnumMember(Value = "cofinsRf")]
            CofinsRf,
            
            /// <summary>
            /// Enum Csll for "csll"
            /// </summary>
            [EnumMember(Value = "csll")]
            Csll,
            
            /// <summary>
            /// Enum CsllRf for "csllRf"
            /// </summary>
            [EnumMember(Value = "csllRf")]
            CsllRf,
            
            /// <summary>
            /// Enum Irrf for "irrf"
            /// </summary>
            [EnumMember(Value = "irrf")]
            Irrf,
            
            /// <summary>
            /// Enum InssAr for "inssAr"
            /// </summary>
            [EnumMember(Value = "inssAr")]
            InssAr,
            
            /// <summary>
            /// Enum InssRf for "inssRf"
            /// </summary>
            [EnumMember(Value = "inssRf")]
            InssRf,
            
            /// <summary>
            /// Enum IssRf for "issRf"
            /// </summary>
            [EnumMember(Value = "issRf")]
            IssRf
        }

        /// <summary>
        /// This string with type of rule - 'SELLER' - 'BUYER' - 'TRANSACTION' - 'ITEM' - 'TAX' 
        /// </summary>
        /// <value>This string with type of rule - 'SELLER' - 'BUYER' - 'TRANSACTION' - 'ITEM' - 'TAX' </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxRuleTypeEnum
        {
            
            /// <summary>
            /// Enum SELLER for "SELLER"
            /// </summary>
            [EnumMember(Value = "SELLER")]
            SELLER,
            
            /// <summary>
            /// Enum BUYER for "BUYER"
            /// </summary>
            [EnumMember(Value = "BUYER")]
            BUYER,
            
            /// <summary>
            /// Enum TRANSACTION for "TRANSACTION"
            /// </summary>
            [EnumMember(Value = "TRANSACTION")]
            TRANSACTION,
            
            /// <summary>
            /// Enum ITEM for "ITEM"
            /// </summary>
            [EnumMember(Value = "ITEM")]
            ITEM,
            
            /// <summary>
            /// Enum TAX for "TAX"
            /// </summary>
            [EnumMember(Value = "TAX")]
            TAX
        }

        /// <summary>
        /// Type of jurisdiction - 'city' - 'state' - 'country' 
        /// </summary>
        /// <value>Type of jurisdiction - 'city' - 'state' - 'country' </value>
        [DataMember(Name="jurisdictionType", EmitDefaultValue=false)]
        public JurisdictionTypeEnum? JurisdictionType { get; set; }
        /// <summary>
        /// Tax identificator - 'pis' - 'pisRf' - 'cofins' - 'cofinsRf' - 'csll' - 'csllRf' - 'irrf' - 'inssAr' - 'inssRf' - 'issRf' 
        /// </summary>
        /// <value>Tax identificator - 'pis' - 'pisRf' - 'cofins' - 'cofinsRf' - 'csll' - 'csllRf' - 'irrf' - 'inssAr' - 'inssRf' - 'issRf' </value>
        [DataMember(Name="taxType", EmitDefaultValue=false)]
        public TaxTypeEnum? TaxType { get; set; }
        /// <summary>
        /// This string with type of rule - 'SELLER' - 'BUYER' - 'TRANSACTION' - 'ITEM' - 'TAX' 
        /// </summary>
        /// <value>This string with type of rule - 'SELLER' - 'BUYER' - 'TRANSACTION' - 'ITEM' - 'TAX' </value>
        [DataMember(Name="taxRuleType", EmitDefaultValue=false)]
        public TaxRuleTypeEnum? TaxRuleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseTaxByTypeDetail" /> class.
        /// </summary>
        /// <param name="LocationType">This string captures the applicable location type. Location used for calc. Buyer or Seller.</param>
        /// <param name="JurisdictionName">Jurisdiction used for calctax amount.</param>
        /// <param name="JurisdictionType">Type of jurisdiction - &#39;city&#39; - &#39;state&#39; - &#39;country&#39; .</param>
        /// <param name="TaxType">Tax identificator - &#39;pis&#39; - &#39;pisRf&#39; - &#39;cofins&#39; - &#39;cofinsRf&#39; - &#39;csll&#39; - &#39;csllRf&#39; - &#39;irrf&#39; - &#39;inssAr&#39; - &#39;inssRf&#39; - &#39;issRf&#39; .</param>
        /// <param name="RateType">Name of configuration rate.</param>
        /// <param name="Scenario">This string captures the transaction scenario used to calculate the tax for this tax type. Scenarios are specific to the tax type. This field provides information about how the tax engine interpreted the transaction information that was passed in..</param>
        /// <param name="SubtotalTaxable">This decimal captures how much of the lineAmount was taxable by this tax, calc base.</param>
        /// <param name="SubtotalExempt">This decimal captures how much of the lineAmount was non-taxed. This is simply the line amount minus the taxable..</param>
        /// <param name="Rate">This decimal captures the tax rate for this tax.3.00 (3%).</param>
        /// <param name="Tax">This decimal captures how much of the lineAmount was taxable by this tax.</param>
        /// <param name="ExemptionCode">This string is required if is exempt.</param>
        /// <param name="SignificantLocations">This element captures the list of locations that contributed to the tax determination. for BR16 Service is Buyer and Seller Address.</param>
        /// <param name="TaxRuleType">This string with type of rule - &#39;SELLER&#39; - &#39;BUYER&#39; - &#39;TRANSACTION&#39; - &#39;ITEM&#39; - &#39;TAX&#39; .</param>
        public PurchaseTaxByTypeDetail(string LocationType = default(string), string JurisdictionName = default(string), JurisdictionTypeEnum? JurisdictionType = default(JurisdictionTypeEnum?), TaxTypeEnum? TaxType = default(TaxTypeEnum?), string RateType = default(string), string Scenario = default(string), double? SubtotalTaxable = default(double?), double? SubtotalExempt = default(double?), double? Rate = default(double?), double? Tax = default(double?), string ExemptionCode = default(string), List<string> SignificantLocations = default(List<string>), TaxRuleTypeEnum? TaxRuleType = default(TaxRuleTypeEnum?))
        {
            this.LocationType = LocationType;
            this.JurisdictionName = JurisdictionName;
            this.JurisdictionType = JurisdictionType;
            this.TaxType = TaxType;
            this.RateType = RateType;
            this.Scenario = Scenario;
            this.SubtotalTaxable = SubtotalTaxable;
            this.SubtotalExempt = SubtotalExempt;
            this.Rate = Rate;
            this.Tax = Tax;
            this.ExemptionCode = ExemptionCode;
            this.SignificantLocations = SignificantLocations;
            this.TaxRuleType = TaxRuleType;
        }
        
        /// <summary>
        /// This string captures the applicable location type. Location used for calc. Buyer or Seller
        /// </summary>
        /// <value>This string captures the applicable location type. Location used for calc. Buyer or Seller</value>
        [DataMember(Name="locationType", EmitDefaultValue=false)]
        public string LocationType { get; set; }
        /// <summary>
        /// Jurisdiction used for calctax amount
        /// </summary>
        /// <value>Jurisdiction used for calctax amount</value>
        [DataMember(Name="jurisdictionName", EmitDefaultValue=false)]
        public string JurisdictionName { get; set; }
        /// <summary>
        /// Name of configuration rate
        /// </summary>
        /// <value>Name of configuration rate</value>
        [DataMember(Name="rateType", EmitDefaultValue=false)]
        public string RateType { get; set; }
        /// <summary>
        /// This string captures the transaction scenario used to calculate the tax for this tax type. Scenarios are specific to the tax type. This field provides information about how the tax engine interpreted the transaction information that was passed in.
        /// </summary>
        /// <value>This string captures the transaction scenario used to calculate the tax for this tax type. Scenarios are specific to the tax type. This field provides information about how the tax engine interpreted the transaction information that was passed in.</value>
        [DataMember(Name="scenario", EmitDefaultValue=false)]
        public string Scenario { get; set; }
        /// <summary>
        /// This decimal captures how much of the lineAmount was taxable by this tax, calc base
        /// </summary>
        /// <value>This decimal captures how much of the lineAmount was taxable by this tax, calc base</value>
        [DataMember(Name="subtotalTaxable", EmitDefaultValue=false)]
        public double? SubtotalTaxable { get; set; }
        /// <summary>
        /// This decimal captures how much of the lineAmount was non-taxed. This is simply the line amount minus the taxable.
        /// </summary>
        /// <value>This decimal captures how much of the lineAmount was non-taxed. This is simply the line amount minus the taxable.</value>
        [DataMember(Name="subtotalExempt", EmitDefaultValue=false)]
        public double? SubtotalExempt { get; set; }
        /// <summary>
        /// This decimal captures the tax rate for this tax.3.00 (3%)
        /// </summary>
        /// <value>This decimal captures the tax rate for this tax.3.00 (3%)</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public double? Rate { get; set; }
        /// <summary>
        /// This decimal captures how much of the lineAmount was taxable by this tax
        /// </summary>
        /// <value>This decimal captures how much of the lineAmount was taxable by this tax</value>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public double? Tax { get; set; }
        /// <summary>
        /// This string is required if is exempt
        /// </summary>
        /// <value>This string is required if is exempt</value>
        [DataMember(Name="exemptionCode", EmitDefaultValue=false)]
        public string ExemptionCode { get; set; }
        /// <summary>
        /// This element captures the list of locations that contributed to the tax determination. for BR16 Service is Buyer and Seller Address
        /// </summary>
        /// <value>This element captures the list of locations that contributed to the tax determination. for BR16 Service is Buyer and Seller Address</value>
        [DataMember(Name="significantLocations", EmitDefaultValue=false)]
        public List<string> SignificantLocations { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseTaxByTypeDetail {\n");
            sb.Append("  LocationType: ").Append(LocationType).Append("\n");
            sb.Append("  JurisdictionName: ").Append(JurisdictionName).Append("\n");
            sb.Append("  JurisdictionType: ").Append(JurisdictionType).Append("\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("  RateType: ").Append(RateType).Append("\n");
            sb.Append("  Scenario: ").Append(Scenario).Append("\n");
            sb.Append("  SubtotalTaxable: ").Append(SubtotalTaxable).Append("\n");
            sb.Append("  SubtotalExempt: ").Append(SubtotalExempt).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  ExemptionCode: ").Append(ExemptionCode).Append("\n");
            sb.Append("  SignificantLocations: ").Append(SignificantLocations).Append("\n");
            sb.Append("  TaxRuleType: ").Append(TaxRuleType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PurchaseTaxByTypeDetail);
        }

        /// <summary>
        /// Returns true if PurchaseTaxByTypeDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of PurchaseTaxByTypeDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseTaxByTypeDetail other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.LocationType == other.LocationType ||
                    this.LocationType != null &&
                    this.LocationType.Equals(other.LocationType)
                ) && 
                (
                    this.JurisdictionName == other.JurisdictionName ||
                    this.JurisdictionName != null &&
                    this.JurisdictionName.Equals(other.JurisdictionName)
                ) && 
                (
                    this.JurisdictionType == other.JurisdictionType ||
                    this.JurisdictionType != null &&
                    this.JurisdictionType.Equals(other.JurisdictionType)
                ) && 
                (
                    this.TaxType == other.TaxType ||
                    this.TaxType != null &&
                    this.TaxType.Equals(other.TaxType)
                ) && 
                (
                    this.RateType == other.RateType ||
                    this.RateType != null &&
                    this.RateType.Equals(other.RateType)
                ) && 
                (
                    this.Scenario == other.Scenario ||
                    this.Scenario != null &&
                    this.Scenario.Equals(other.Scenario)
                ) && 
                (
                    this.SubtotalTaxable == other.SubtotalTaxable ||
                    this.SubtotalTaxable != null &&
                    this.SubtotalTaxable.Equals(other.SubtotalTaxable)
                ) && 
                (
                    this.SubtotalExempt == other.SubtotalExempt ||
                    this.SubtotalExempt != null &&
                    this.SubtotalExempt.Equals(other.SubtotalExempt)
                ) && 
                (
                    this.Rate == other.Rate ||
                    this.Rate != null &&
                    this.Rate.Equals(other.Rate)
                ) && 
                (
                    this.Tax == other.Tax ||
                    this.Tax != null &&
                    this.Tax.Equals(other.Tax)
                ) && 
                (
                    this.ExemptionCode == other.ExemptionCode ||
                    this.ExemptionCode != null &&
                    this.ExemptionCode.Equals(other.ExemptionCode)
                ) && 
                (
                    this.SignificantLocations == other.SignificantLocations ||
                    this.SignificantLocations != null &&
                    this.SignificantLocations.SequenceEqual(other.SignificantLocations)
                ) && 
                (
                    this.TaxRuleType == other.TaxRuleType ||
                    this.TaxRuleType != null &&
                    this.TaxRuleType.Equals(other.TaxRuleType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.LocationType != null)
                    hash = hash * 59 + this.LocationType.GetHashCode();
                if (this.JurisdictionName != null)
                    hash = hash * 59 + this.JurisdictionName.GetHashCode();
                if (this.JurisdictionType != null)
                    hash = hash * 59 + this.JurisdictionType.GetHashCode();
                if (this.TaxType != null)
                    hash = hash * 59 + this.TaxType.GetHashCode();
                if (this.RateType != null)
                    hash = hash * 59 + this.RateType.GetHashCode();
                if (this.Scenario != null)
                    hash = hash * 59 + this.Scenario.GetHashCode();
                if (this.SubtotalTaxable != null)
                    hash = hash * 59 + this.SubtotalTaxable.GetHashCode();
                if (this.SubtotalExempt != null)
                    hash = hash * 59 + this.SubtotalExempt.GetHashCode();
                if (this.Rate != null)
                    hash = hash * 59 + this.Rate.GetHashCode();
                if (this.Tax != null)
                    hash = hash * 59 + this.Tax.GetHashCode();
                if (this.ExemptionCode != null)
                    hash = hash * 59 + this.ExemptionCode.GetHashCode();
                if (this.SignificantLocations != null)
                    hash = hash * 59 + this.SignificantLocations.GetHashCode();
                if (this.TaxRuleType != null)
                    hash = hash * 59 + this.TaxRuleType.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
