/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FuelPumpNumber
    /// </summary>
    [DataContract]
    public partial class FuelPumpNumber :  IEquatable<FuelPumpNumber>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FuelPumpNumber" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FuelPumpNumber() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FuelPumpNumber" /> class.
        /// </summary>
        /// <param name="NozzleNumberFuelSupply">Identification number of nozzle used in the dispensing process.   Numero de identificação do Bico utilizado no abastecimento  (required).</param>
        /// <param name="FuelPumpNumber">Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado  (required).</param>
        /// <param name="FuelTankNumber">Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado  (required).</param>
        /// <param name="StartValueOfPumpNumber">Valor do Encerrante no ínicio do abastecimento.  Reading of auto-counter (encerrante) at the start of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$  (required).</param>
        /// <param name="EndValueOfPumpNumber">Valor do Encerrante no final do abastecimento.  Reading of auto-counter (encerrante) at the end of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$  (required).</param>
        public FuelPumpNumber(string NozzleNumberFuelSupply = default(string), string FuelPumpNumber = default(string), string FuelTankNumber = default(string), double? StartValueOfPumpNumber = default(double?), double? EndValueOfPumpNumber = default(double?))
        {
            // to ensure "NozzleNumberFuelSupply" is required (not null)
            if (NozzleNumberFuelSupply == null)
            {
                throw new InvalidDataException("NozzleNumberFuelSupply is a required property for FuelPumpNumber and cannot be null");
            }
            else
            {
                this.NozzleNumberFuelSupply = NozzleNumberFuelSupply;
            }
            // to ensure "FuelPumpNumber" is required (not null)
            if (FuelPumpNumber == null)
            {
                throw new InvalidDataException("FuelPumpNumber is a required property for FuelPumpNumber and cannot be null");
            }
            else
            {
                this.FuelPumpNumber = FuelPumpNumber;
            }
            // to ensure "FuelTankNumber" is required (not null)
            if (FuelTankNumber == null)
            {
                throw new InvalidDataException("FuelTankNumber is a required property for FuelPumpNumber and cannot be null");
            }
            else
            {
                this.FuelTankNumber = FuelTankNumber;
            }
            // to ensure "StartValueOfPumpNumber" is required (not null)
            if (StartValueOfPumpNumber == null)
            {
                throw new InvalidDataException("StartValueOfPumpNumber is a required property for FuelPumpNumber and cannot be null");
            }
            else
            {
                this.StartValueOfPumpNumber = StartValueOfPumpNumber;
            }
            // to ensure "EndValueOfPumpNumber" is required (not null)
            if (EndValueOfPumpNumber == null)
            {
                throw new InvalidDataException("EndValueOfPumpNumber is a required property for FuelPumpNumber and cannot be null");
            }
            else
            {
                this.EndValueOfPumpNumber = EndValueOfPumpNumber;
            }
        }
        
        /// <summary>
        /// Identification number of nozzle used in the dispensing process.   Numero de identificação do Bico utilizado no abastecimento 
        /// </summary>
        /// <value>Identification number of nozzle used in the dispensing process.   Numero de identificação do Bico utilizado no abastecimento </value>
        [DataMember(Name="nozzleNumberFuelSupply", EmitDefaultValue=false)]
        public string NozzleNumberFuelSupply { get; set; }
        /// <summary>
        /// Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado 
        /// </summary>
        /// <value>Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado </value>
        [DataMember(Name="fuelPumpNumber", EmitDefaultValue=false)]
        public string FuelPumpNumber { get; set; }
        /// <summary>
        /// Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado 
        /// </summary>
        /// <value>Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado </value>
        [DataMember(Name="fuelTankNumber", EmitDefaultValue=false)]
        public string FuelTankNumber { get; set; }
        /// <summary>
        /// Valor do Encerrante no ínicio do abastecimento.  Reading of auto-counter (encerrante) at the start of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$ 
        /// </summary>
        /// <value>Valor do Encerrante no ínicio do abastecimento.  Reading of auto-counter (encerrante) at the start of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$ </value>
        [DataMember(Name="startValueOfPumpNumber", EmitDefaultValue=false)]
        public double? StartValueOfPumpNumber { get; set; }
        /// <summary>
        /// Valor do Encerrante no final do abastecimento.  Reading of auto-counter (encerrante) at the end of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$ 
        /// </summary>
        /// <value>Valor do Encerrante no final do abastecimento.  Reading of auto-counter (encerrante) at the end of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$ </value>
        [DataMember(Name="endValueOfPumpNumber", EmitDefaultValue=false)]
        public double? EndValueOfPumpNumber { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FuelPumpNumber {\n");
            sb.Append("  NozzleNumberFuelSupply: ").Append(NozzleNumberFuelSupply).Append("\n");
            sb.Append("  FuelPumpNumber: ").Append(FuelPumpNumber).Append("\n");
            sb.Append("  FuelTankNumber: ").Append(FuelTankNumber).Append("\n");
            sb.Append("  StartValueOfPumpNumber: ").Append(StartValueOfPumpNumber).Append("\n");
            sb.Append("  EndValueOfPumpNumber: ").Append(EndValueOfPumpNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FuelPumpNumber);
        }

        /// <summary>
        /// Returns true if FuelPumpNumber instances are equal
        /// </summary>
        /// <param name="other">Instance of FuelPumpNumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FuelPumpNumber other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.NozzleNumberFuelSupply == other.NozzleNumberFuelSupply ||
                    this.NozzleNumberFuelSupply != null &&
                    this.NozzleNumberFuelSupply.Equals(other.NozzleNumberFuelSupply)
                ) && 
                (
                    this.FuelPumpNumber == other.FuelPumpNumber ||
                    this.FuelPumpNumber != null &&
                    this.FuelPumpNumber.Equals(other.FuelPumpNumber)
                ) && 
                (
                    this.FuelTankNumber == other.FuelTankNumber ||
                    this.FuelTankNumber != null &&
                    this.FuelTankNumber.Equals(other.FuelTankNumber)
                ) && 
                (
                    this.StartValueOfPumpNumber == other.StartValueOfPumpNumber ||
                    this.StartValueOfPumpNumber != null &&
                    this.StartValueOfPumpNumber.Equals(other.StartValueOfPumpNumber)
                ) && 
                (
                    this.EndValueOfPumpNumber == other.EndValueOfPumpNumber ||
                    this.EndValueOfPumpNumber != null &&
                    this.EndValueOfPumpNumber.Equals(other.EndValueOfPumpNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.NozzleNumberFuelSupply != null)
                    hash = hash * 59 + this.NozzleNumberFuelSupply.GetHashCode();
                if (this.FuelPumpNumber != null)
                    hash = hash * 59 + this.FuelPumpNumber.GetHashCode();
                if (this.FuelTankNumber != null)
                    hash = hash * 59 + this.FuelTankNumber.GetHashCode();
                if (this.StartValueOfPumpNumber != null)
                    hash = hash * 59 + this.StartValueOfPumpNumber.GetHashCode();
                if (this.EndValueOfPumpNumber != null)
                    hash = hash * 59 + this.EndValueOfPumpNumber.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // NozzleNumberFuelSupply (string) pattern
            Regex regexNozzleNumberFuelSupply = new Regex(@"[0-9]{1,3}", RegexOptions.CultureInvariant);
            if (false == regexNozzleNumberFuelSupply.Match(this.NozzleNumberFuelSupply).Success)
            {
                yield return new ValidationResult("Invalid value for NozzleNumberFuelSupply, must match a pattern of /[0-9]{1,3}/.", new [] { "NozzleNumberFuelSupply" });
            }

            // FuelPumpNumber (string) pattern
            Regex regexFuelPumpNumber = new Regex(@"[0-9]{1,3}", RegexOptions.CultureInvariant);
            if (false == regexFuelPumpNumber.Match(this.FuelPumpNumber).Success)
            {
                yield return new ValidationResult("Invalid value for FuelPumpNumber, must match a pattern of /[0-9]{1,3}/.", new [] { "FuelPumpNumber" });
            }

            // FuelTankNumber (string) pattern
            Regex regexFuelTankNumber = new Regex(@"[0-9]{1,3}", RegexOptions.CultureInvariant);
            if (false == regexFuelTankNumber.Match(this.FuelTankNumber).Success)
            {
                yield return new ValidationResult("Invalid value for FuelTankNumber, must match a pattern of /[0-9]{1,3}/.", new [] { "FuelTankNumber" });
            }

            yield break;
        }
    }

}
