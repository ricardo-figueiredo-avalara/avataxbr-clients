/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InstallmentComplete
    /// </summary>
    [DataContract]
    public partial class InstallmentComplete :  IEquatable<InstallmentComplete>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentComplete" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InstallmentComplete() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentComplete" /> class.
        /// </summary>
        /// <param name="DocumentNumber">DOCNUMBER, ID OF THIS DOCUMENT FOR THIS transaction (required).</param>
        /// <param name="Date">installment Due Date (required).</param>
        /// <param name="GrossValue">Intallment amount, fraction of  ∑(lineAmount - lineTaxedDiscount) (required).</param>
        /// <param name="NetValue">net amount due for this installment, grossValue - ∑ (withhold amounts).</param>
        /// <param name="WithholdingMode">Inform if this payment is subject to Pis, Cofins or CSLL.</param>
        /// <param name="WithholdingPIS">calculated PIS-RF tax for this payment.</param>
        /// <param name="WithholdingCOFINS">calculated COFINS-RF tax for this payment.</param>
        /// <param name="WithholdingCSLL">calculated CSLL-RF tax for this payment.</param>
        public InstallmentComplete(string DocumentNumber = default(string), DateTime? Date = default(DateTime?), double? GrossValue = default(double?), double? NetValue = default(double?), WithholdingMode WithholdingMode = default(WithholdingMode), double? WithholdingPIS = default(double?), double? WithholdingCOFINS = default(double?), double? WithholdingCSLL = default(double?))
        {
            // to ensure "DocumentNumber" is required (not null)
            if (DocumentNumber == null)
            {
                throw new InvalidDataException("DocumentNumber is a required property for InstallmentComplete and cannot be null");
            }
            else
            {
                this.DocumentNumber = DocumentNumber;
            }
            // to ensure "Date" is required (not null)
            if (Date == null)
            {
                throw new InvalidDataException("Date is a required property for InstallmentComplete and cannot be null");
            }
            else
            {
                this.Date = Date;
            }
            // to ensure "GrossValue" is required (not null)
            if (GrossValue == null)
            {
                throw new InvalidDataException("GrossValue is a required property for InstallmentComplete and cannot be null");
            }
            else
            {
                this.GrossValue = GrossValue;
            }
            this.NetValue = NetValue;
            this.WithholdingMode = WithholdingMode;
            this.WithholdingPIS = WithholdingPIS;
            this.WithholdingCOFINS = WithholdingCOFINS;
            this.WithholdingCSLL = WithholdingCSLL;
        }
        
        /// <summary>
        /// DOCNUMBER, ID OF THIS DOCUMENT FOR THIS transaction
        /// </summary>
        /// <value>DOCNUMBER, ID OF THIS DOCUMENT FOR THIS transaction</value>
        [DataMember(Name="documentNumber", EmitDefaultValue=false)]
        public string DocumentNumber { get; set; }
        /// <summary>
        /// installment Due Date
        /// </summary>
        /// <value>installment Due Date</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }
        /// <summary>
        /// Intallment amount, fraction of  ∑(lineAmount - lineTaxedDiscount)
        /// </summary>
        /// <value>Intallment amount, fraction of  ∑(lineAmount - lineTaxedDiscount)</value>
        [DataMember(Name="grossValue", EmitDefaultValue=false)]
        public double? GrossValue { get; set; }
        /// <summary>
        /// net amount due for this installment, grossValue - ∑ (withhold amounts)
        /// </summary>
        /// <value>net amount due for this installment, grossValue - ∑ (withhold amounts)</value>
        [DataMember(Name="netValue", EmitDefaultValue=false)]
        public double? NetValue { get; set; }
        /// <summary>
        /// Inform if this payment is subject to Pis, Cofins or CSLL
        /// </summary>
        /// <value>Inform if this payment is subject to Pis, Cofins or CSLL</value>
        [DataMember(Name="withholdingMode", EmitDefaultValue=false)]
        public WithholdingMode WithholdingMode { get; set; }
        /// <summary>
        /// calculated PIS-RF tax for this payment
        /// </summary>
        /// <value>calculated PIS-RF tax for this payment</value>
        [DataMember(Name="withholdingPIS", EmitDefaultValue=false)]
        public double? WithholdingPIS { get; set; }
        /// <summary>
        /// calculated COFINS-RF tax for this payment
        /// </summary>
        /// <value>calculated COFINS-RF tax for this payment</value>
        [DataMember(Name="withholdingCOFINS", EmitDefaultValue=false)]
        public double? WithholdingCOFINS { get; set; }
        /// <summary>
        /// calculated CSLL-RF tax for this payment
        /// </summary>
        /// <value>calculated CSLL-RF tax for this payment</value>
        [DataMember(Name="withholdingCSLL", EmitDefaultValue=false)]
        public double? WithholdingCSLL { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstallmentComplete {\n");
            sb.Append("  DocumentNumber: ").Append(DocumentNumber).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  GrossValue: ").Append(GrossValue).Append("\n");
            sb.Append("  NetValue: ").Append(NetValue).Append("\n");
            sb.Append("  WithholdingMode: ").Append(WithholdingMode).Append("\n");
            sb.Append("  WithholdingPIS: ").Append(WithholdingPIS).Append("\n");
            sb.Append("  WithholdingCOFINS: ").Append(WithholdingCOFINS).Append("\n");
            sb.Append("  WithholdingCSLL: ").Append(WithholdingCSLL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InstallmentComplete);
        }

        /// <summary>
        /// Returns true if InstallmentComplete instances are equal
        /// </summary>
        /// <param name="other">Instance of InstallmentComplete to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstallmentComplete other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DocumentNumber == other.DocumentNumber ||
                    this.DocumentNumber != null &&
                    this.DocumentNumber.Equals(other.DocumentNumber)
                ) && 
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.Equals(other.Date)
                ) && 
                (
                    this.GrossValue == other.GrossValue ||
                    this.GrossValue != null &&
                    this.GrossValue.Equals(other.GrossValue)
                ) && 
                (
                    this.NetValue == other.NetValue ||
                    this.NetValue != null &&
                    this.NetValue.Equals(other.NetValue)
                ) && 
                (
                    this.WithholdingMode == other.WithholdingMode ||
                    this.WithholdingMode != null &&
                    this.WithholdingMode.Equals(other.WithholdingMode)
                ) && 
                (
                    this.WithholdingPIS == other.WithholdingPIS ||
                    this.WithholdingPIS != null &&
                    this.WithholdingPIS.Equals(other.WithholdingPIS)
                ) && 
                (
                    this.WithholdingCOFINS == other.WithholdingCOFINS ||
                    this.WithholdingCOFINS != null &&
                    this.WithholdingCOFINS.Equals(other.WithholdingCOFINS)
                ) && 
                (
                    this.WithholdingCSLL == other.WithholdingCSLL ||
                    this.WithholdingCSLL != null &&
                    this.WithholdingCSLL.Equals(other.WithholdingCSLL)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DocumentNumber != null)
                    hash = hash * 59 + this.DocumentNumber.GetHashCode();
                if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                if (this.GrossValue != null)
                    hash = hash * 59 + this.GrossValue.GetHashCode();
                if (this.NetValue != null)
                    hash = hash * 59 + this.NetValue.GetHashCode();
                if (this.WithholdingMode != null)
                    hash = hash * 59 + this.WithholdingMode.GetHashCode();
                if (this.WithholdingPIS != null)
                    hash = hash * 59 + this.WithholdingPIS.GetHashCode();
                if (this.WithholdingCOFINS != null)
                    hash = hash * 59 + this.WithholdingCOFINS.GetHashCode();
                if (this.WithholdingCSLL != null)
                    hash = hash * 59 + this.WithholdingCSLL.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
