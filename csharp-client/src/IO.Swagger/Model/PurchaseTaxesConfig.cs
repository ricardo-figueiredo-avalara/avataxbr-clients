/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PurchaseTaxesConfig
    /// </summary>
    [DataContract]
    public partial class PurchaseTaxesConfig :  IEquatable<PurchaseTaxesConfig>, IValidatableObject
    {
        /// <summary>
        /// ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE=0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE 
        /// </summary>
        /// <value>ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE=0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntityAccruableCOFINSTaxationEnum
        {
            
            /// <summary>
            /// Enum T for "T"
            /// </summary>
            [EnumMember(Value = "T")]
            T,
            
            /// <summary>
            /// Enum N for "N"
            /// </summary>
            [EnumMember(Value = "N")]
            N,
            
            /// <summary>
            /// Enum Z for "Z"
            /// </summary>
            [EnumMember(Value = "Z")]
            Z,
            
            /// <summary>
            /// Enum E for "E"
            /// </summary>
            [EnumMember(Value = "E")]
            E,
            
            /// <summary>
            /// Enum H for "H"
            /// </summary>
            [EnumMember(Value = "H")]
            H,
            
            /// <summary>
            /// Enum S for "S"
            /// </summary>
            [EnumMember(Value = "S")]
            S
        }

        /// <summary>
        /// ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.   This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT 
        /// </summary>
        /// <value>ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.   This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntityAccruableCSLLTaxationEnum
        {
            
            /// <summary>
            /// Enum T for "T"
            /// </summary>
            [EnumMember(Value = "T")]
            T,
            
            /// <summary>
            /// Enum E for "E"
            /// </summary>
            [EnumMember(Value = "E")]
            E
        }

        /// <summary>
        /// ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE=0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE 
        /// </summary>
        /// <value>ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE=0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntityAccruablePISTaxationEnum
        {
            
            /// <summary>
            /// Enum T for "T"
            /// </summary>
            [EnumMember(Value = "T")]
            T,
            
            /// <summary>
            /// Enum N for "N"
            /// </summary>
            [EnumMember(Value = "N")]
            N,
            
            /// <summary>
            /// Enum Z for "Z"
            /// </summary>
            [EnumMember(Value = "Z")]
            Z,
            
            /// <summary>
            /// Enum E for "E"
            /// </summary>
            [EnumMember(Value = "E")]
            E,
            
            /// <summary>
            /// Enum H for "H"
            /// </summary>
            [EnumMember(Value = "H")]
            H,
            
            /// <summary>
            /// Enum S for "S"
            /// </summary>
            [EnumMember(Value = "S")]
            S
        }

        /// <summary>
        /// ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE=0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE 
        /// </summary>
        /// <value>ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE=0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE </value>
        [DataMember(Name="entityAccruableCOFINSTaxation", EmitDefaultValue=false)]
        public EntityAccruableCOFINSTaxationEnum? EntityAccruableCOFINSTaxation { get; set; }
        /// <summary>
        /// ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.   This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT 
        /// </summary>
        /// <value>ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.   This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT </value>
        [DataMember(Name="entityAccruableCSLLTaxation", EmitDefaultValue=false)]
        public EntityAccruableCSLLTaxationEnum? EntityAccruableCSLLTaxation { get; set; }
        /// <summary>
        /// ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE=0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE 
        /// </summary>
        /// <value>ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE=0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE </value>
        [DataMember(Name="entityAccruablePISTaxation", EmitDefaultValue=false)]
        public EntityAccruablePISTaxationEnum? EntityAccruablePISTaxation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseTaxesConfig" /> class.
        /// </summary>
        /// <param name="EntityAccruableCOFINSTaxation">ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE&#x3D;0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - &#39;T&#39; # TAXABLE - &#39;N&#39; # NOT TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;S&#39; # SPECIFIC RATE  (default to &quot;T&quot;).</param>
        /// <param name="EntityAccruableCSLLTaxation">ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.   This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT  (default to &quot;T&quot;).</param>
        /// <param name="EntityAccruablePISTaxation">ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE&#x3D;0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - &#39;T&#39; # TAXABLE - &#39;N&#39; # NOT TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;S&#39; # SPECIFIC RATE  (default to &quot;T&quot;).</param>
        /// <param name="AccruableCOFINSExempCodeTaxation">This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption. When not Taxable of Seller point of view this field has the reason code..</param>
        /// <param name="AccruablePISExempCodeTaxation">This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption. When not Taxable of Seller point of view this field has the reason code..</param>
        /// <param name="AccruablePISExemptReasonTaxation">When Code is 999 the user system need send the custom reason to Exemption.</param>
        /// <param name="AccruableCOFINSExemptReasonTaxation">When Code is 999 the user system need send the custom reason to Exemption.</param>
        /// <param name="AccruableCSLLExemptReasonTaxation">CSLL no withholding Custom Reason.</param>
        /// <param name="WithholdingPIS">Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings. (default to true).</param>
        /// <param name="WithholdingCOFINS">Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings. (default to true).</param>
        /// <param name="WithholdingCSLL">Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings. (default to true).</param>
        /// <param name="WithholdingIRRF">Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings. (default to true).</param>
        /// <param name="WithholdCOFINSExemptReasonTaxation">COFINS no withholding Custom Reason.</param>
        /// <param name="WithholdCSLLExemptReasonTaxation">CSLL no withholding Custom Reason.</param>
        /// <param name="WithholdPISExemptReasonTaxation">PIS no withholding Custom Reason.</param>
        public PurchaseTaxesConfig(EntityAccruableCOFINSTaxationEnum? EntityAccruableCOFINSTaxation = "T", EntityAccruableCSLLTaxationEnum? EntityAccruableCSLLTaxation = "T", EntityAccruablePISTaxationEnum? EntityAccruablePISTaxation = "T", string AccruableCOFINSExempCodeTaxation = default(string), string AccruablePISExempCodeTaxation = default(string), string AccruablePISExemptReasonTaxation = default(string), string AccruableCOFINSExemptReasonTaxation = default(string), string AccruableCSLLExemptReasonTaxation = default(string), bool? WithholdingPIS = true, bool? WithholdingCOFINS = true, bool? WithholdingCSLL = true, bool? WithholdingIRRF = true, string WithholdCOFINSExemptReasonTaxation = default(string), string WithholdCSLLExemptReasonTaxation = default(string), string WithholdPISExemptReasonTaxation = default(string))
        {
            // use default value if no "EntityAccruableCOFINSTaxation" provided
            if (EntityAccruableCOFINSTaxation == null)
            {
                this.EntityAccruableCOFINSTaxation = "T";
            }
            else
            {
                this.EntityAccruableCOFINSTaxation = EntityAccruableCOFINSTaxation;
            }
            // use default value if no "EntityAccruableCSLLTaxation" provided
            if (EntityAccruableCSLLTaxation == null)
            {
                this.EntityAccruableCSLLTaxation = "T";
            }
            else
            {
                this.EntityAccruableCSLLTaxation = EntityAccruableCSLLTaxation;
            }
            // use default value if no "EntityAccruablePISTaxation" provided
            if (EntityAccruablePISTaxation == null)
            {
                this.EntityAccruablePISTaxation = "T";
            }
            else
            {
                this.EntityAccruablePISTaxation = EntityAccruablePISTaxation;
            }
            this.AccruableCOFINSExempCodeTaxation = AccruableCOFINSExempCodeTaxation;
            this.AccruablePISExempCodeTaxation = AccruablePISExempCodeTaxation;
            this.AccruablePISExemptReasonTaxation = AccruablePISExemptReasonTaxation;
            this.AccruableCOFINSExemptReasonTaxation = AccruableCOFINSExemptReasonTaxation;
            this.AccruableCSLLExemptReasonTaxation = AccruableCSLLExemptReasonTaxation;
            // use default value if no "WithholdingPIS" provided
            if (WithholdingPIS == null)
            {
                this.WithholdingPIS = true;
            }
            else
            {
                this.WithholdingPIS = WithholdingPIS;
            }
            // use default value if no "WithholdingCOFINS" provided
            if (WithholdingCOFINS == null)
            {
                this.WithholdingCOFINS = true;
            }
            else
            {
                this.WithholdingCOFINS = WithholdingCOFINS;
            }
            // use default value if no "WithholdingCSLL" provided
            if (WithholdingCSLL == null)
            {
                this.WithholdingCSLL = true;
            }
            else
            {
                this.WithholdingCSLL = WithholdingCSLL;
            }
            // use default value if no "WithholdingIRRF" provided
            if (WithholdingIRRF == null)
            {
                this.WithholdingIRRF = true;
            }
            else
            {
                this.WithholdingIRRF = WithholdingIRRF;
            }
            this.WithholdCOFINSExemptReasonTaxation = WithholdCOFINSExemptReasonTaxation;
            this.WithholdCSLLExemptReasonTaxation = WithholdCSLLExemptReasonTaxation;
            this.WithholdPISExemptReasonTaxation = WithholdPISExemptReasonTaxation;
        }
        
        /// <summary>
        /// This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption. When not Taxable of Seller point of view this field has the reason code.
        /// </summary>
        /// <value>This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption. When not Taxable of Seller point of view this field has the reason code.</value>
        [DataMember(Name="accruableCOFINSExempCodeTaxation", EmitDefaultValue=false)]
        public string AccruableCOFINSExempCodeTaxation { get; set; }
        /// <summary>
        /// This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption. When not Taxable of Seller point of view this field has the reason code.
        /// </summary>
        /// <value>This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption. When not Taxable of Seller point of view this field has the reason code.</value>
        [DataMember(Name="accruablePISExempCodeTaxation", EmitDefaultValue=false)]
        public string AccruablePISExempCodeTaxation { get; set; }
        /// <summary>
        /// When Code is 999 the user system need send the custom reason to Exemption
        /// </summary>
        /// <value>When Code is 999 the user system need send the custom reason to Exemption</value>
        [DataMember(Name="accruablePISExemptReasonTaxation", EmitDefaultValue=false)]
        public string AccruablePISExemptReasonTaxation { get; set; }
        /// <summary>
        /// When Code is 999 the user system need send the custom reason to Exemption
        /// </summary>
        /// <value>When Code is 999 the user system need send the custom reason to Exemption</value>
        [DataMember(Name="accruableCOFINSExemptReasonTaxation", EmitDefaultValue=false)]
        public string AccruableCOFINSExemptReasonTaxation { get; set; }
        /// <summary>
        /// CSLL no withholding Custom Reason
        /// </summary>
        /// <value>CSLL no withholding Custom Reason</value>
        [DataMember(Name="accruableCSLLExemptReasonTaxation", EmitDefaultValue=false)]
        public string AccruableCSLLExemptReasonTaxation { get; set; }
        /// <summary>
        /// Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
        /// </summary>
        /// <value>Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.</value>
        [DataMember(Name="withholdingPIS", EmitDefaultValue=false)]
        public bool? WithholdingPIS { get; set; }
        /// <summary>
        /// Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
        /// </summary>
        /// <value>Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.</value>
        [DataMember(Name="withholdingCOFINS", EmitDefaultValue=false)]
        public bool? WithholdingCOFINS { get; set; }
        /// <summary>
        /// Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
        /// </summary>
        /// <value>Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.</value>
        [DataMember(Name="withholdingCSLL", EmitDefaultValue=false)]
        public bool? WithholdingCSLL { get; set; }
        /// <summary>
        /// Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
        /// </summary>
        /// <value>Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.</value>
        [DataMember(Name="withholdingIRRF", EmitDefaultValue=false)]
        public bool? WithholdingIRRF { get; set; }
        /// <summary>
        /// COFINS no withholding Custom Reason
        /// </summary>
        /// <value>COFINS no withholding Custom Reason</value>
        [DataMember(Name="withholdCOFINSExemptReasonTaxation", EmitDefaultValue=false)]
        public string WithholdCOFINSExemptReasonTaxation { get; set; }
        /// <summary>
        /// CSLL no withholding Custom Reason
        /// </summary>
        /// <value>CSLL no withholding Custom Reason</value>
        [DataMember(Name="withholdCSLLExemptReasonTaxation", EmitDefaultValue=false)]
        public string WithholdCSLLExemptReasonTaxation { get; set; }
        /// <summary>
        /// PIS no withholding Custom Reason
        /// </summary>
        /// <value>PIS no withholding Custom Reason</value>
        [DataMember(Name="withholdPISExemptReasonTaxation", EmitDefaultValue=false)]
        public string WithholdPISExemptReasonTaxation { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseTaxesConfig {\n");
            sb.Append("  EntityAccruableCOFINSTaxation: ").Append(EntityAccruableCOFINSTaxation).Append("\n");
            sb.Append("  EntityAccruableCSLLTaxation: ").Append(EntityAccruableCSLLTaxation).Append("\n");
            sb.Append("  EntityAccruablePISTaxation: ").Append(EntityAccruablePISTaxation).Append("\n");
            sb.Append("  AccruableCOFINSExempCodeTaxation: ").Append(AccruableCOFINSExempCodeTaxation).Append("\n");
            sb.Append("  AccruablePISExempCodeTaxation: ").Append(AccruablePISExempCodeTaxation).Append("\n");
            sb.Append("  AccruablePISExemptReasonTaxation: ").Append(AccruablePISExemptReasonTaxation).Append("\n");
            sb.Append("  AccruableCOFINSExemptReasonTaxation: ").Append(AccruableCOFINSExemptReasonTaxation).Append("\n");
            sb.Append("  AccruableCSLLExemptReasonTaxation: ").Append(AccruableCSLLExemptReasonTaxation).Append("\n");
            sb.Append("  WithholdingPIS: ").Append(WithholdingPIS).Append("\n");
            sb.Append("  WithholdingCOFINS: ").Append(WithholdingCOFINS).Append("\n");
            sb.Append("  WithholdingCSLL: ").Append(WithholdingCSLL).Append("\n");
            sb.Append("  WithholdingIRRF: ").Append(WithholdingIRRF).Append("\n");
            sb.Append("  WithholdCOFINSExemptReasonTaxation: ").Append(WithholdCOFINSExemptReasonTaxation).Append("\n");
            sb.Append("  WithholdCSLLExemptReasonTaxation: ").Append(WithholdCSLLExemptReasonTaxation).Append("\n");
            sb.Append("  WithholdPISExemptReasonTaxation: ").Append(WithholdPISExemptReasonTaxation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PurchaseTaxesConfig);
        }

        /// <summary>
        /// Returns true if PurchaseTaxesConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of PurchaseTaxesConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseTaxesConfig other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EntityAccruableCOFINSTaxation == other.EntityAccruableCOFINSTaxation ||
                    this.EntityAccruableCOFINSTaxation != null &&
                    this.EntityAccruableCOFINSTaxation.Equals(other.EntityAccruableCOFINSTaxation)
                ) && 
                (
                    this.EntityAccruableCSLLTaxation == other.EntityAccruableCSLLTaxation ||
                    this.EntityAccruableCSLLTaxation != null &&
                    this.EntityAccruableCSLLTaxation.Equals(other.EntityAccruableCSLLTaxation)
                ) && 
                (
                    this.EntityAccruablePISTaxation == other.EntityAccruablePISTaxation ||
                    this.EntityAccruablePISTaxation != null &&
                    this.EntityAccruablePISTaxation.Equals(other.EntityAccruablePISTaxation)
                ) && 
                (
                    this.AccruableCOFINSExempCodeTaxation == other.AccruableCOFINSExempCodeTaxation ||
                    this.AccruableCOFINSExempCodeTaxation != null &&
                    this.AccruableCOFINSExempCodeTaxation.Equals(other.AccruableCOFINSExempCodeTaxation)
                ) && 
                (
                    this.AccruablePISExempCodeTaxation == other.AccruablePISExempCodeTaxation ||
                    this.AccruablePISExempCodeTaxation != null &&
                    this.AccruablePISExempCodeTaxation.Equals(other.AccruablePISExempCodeTaxation)
                ) && 
                (
                    this.AccruablePISExemptReasonTaxation == other.AccruablePISExemptReasonTaxation ||
                    this.AccruablePISExemptReasonTaxation != null &&
                    this.AccruablePISExemptReasonTaxation.Equals(other.AccruablePISExemptReasonTaxation)
                ) && 
                (
                    this.AccruableCOFINSExemptReasonTaxation == other.AccruableCOFINSExemptReasonTaxation ||
                    this.AccruableCOFINSExemptReasonTaxation != null &&
                    this.AccruableCOFINSExemptReasonTaxation.Equals(other.AccruableCOFINSExemptReasonTaxation)
                ) && 
                (
                    this.AccruableCSLLExemptReasonTaxation == other.AccruableCSLLExemptReasonTaxation ||
                    this.AccruableCSLLExemptReasonTaxation != null &&
                    this.AccruableCSLLExemptReasonTaxation.Equals(other.AccruableCSLLExemptReasonTaxation)
                ) && 
                (
                    this.WithholdingPIS == other.WithholdingPIS ||
                    this.WithholdingPIS != null &&
                    this.WithholdingPIS.Equals(other.WithholdingPIS)
                ) && 
                (
                    this.WithholdingCOFINS == other.WithholdingCOFINS ||
                    this.WithholdingCOFINS != null &&
                    this.WithholdingCOFINS.Equals(other.WithholdingCOFINS)
                ) && 
                (
                    this.WithholdingCSLL == other.WithholdingCSLL ||
                    this.WithholdingCSLL != null &&
                    this.WithholdingCSLL.Equals(other.WithholdingCSLL)
                ) && 
                (
                    this.WithholdingIRRF == other.WithholdingIRRF ||
                    this.WithholdingIRRF != null &&
                    this.WithholdingIRRF.Equals(other.WithholdingIRRF)
                ) && 
                (
                    this.WithholdCOFINSExemptReasonTaxation == other.WithholdCOFINSExemptReasonTaxation ||
                    this.WithholdCOFINSExemptReasonTaxation != null &&
                    this.WithholdCOFINSExemptReasonTaxation.Equals(other.WithholdCOFINSExemptReasonTaxation)
                ) && 
                (
                    this.WithholdCSLLExemptReasonTaxation == other.WithholdCSLLExemptReasonTaxation ||
                    this.WithholdCSLLExemptReasonTaxation != null &&
                    this.WithholdCSLLExemptReasonTaxation.Equals(other.WithholdCSLLExemptReasonTaxation)
                ) && 
                (
                    this.WithholdPISExemptReasonTaxation == other.WithholdPISExemptReasonTaxation ||
                    this.WithholdPISExemptReasonTaxation != null &&
                    this.WithholdPISExemptReasonTaxation.Equals(other.WithholdPISExemptReasonTaxation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EntityAccruableCOFINSTaxation != null)
                    hash = hash * 59 + this.EntityAccruableCOFINSTaxation.GetHashCode();
                if (this.EntityAccruableCSLLTaxation != null)
                    hash = hash * 59 + this.EntityAccruableCSLLTaxation.GetHashCode();
                if (this.EntityAccruablePISTaxation != null)
                    hash = hash * 59 + this.EntityAccruablePISTaxation.GetHashCode();
                if (this.AccruableCOFINSExempCodeTaxation != null)
                    hash = hash * 59 + this.AccruableCOFINSExempCodeTaxation.GetHashCode();
                if (this.AccruablePISExempCodeTaxation != null)
                    hash = hash * 59 + this.AccruablePISExempCodeTaxation.GetHashCode();
                if (this.AccruablePISExemptReasonTaxation != null)
                    hash = hash * 59 + this.AccruablePISExemptReasonTaxation.GetHashCode();
                if (this.AccruableCOFINSExemptReasonTaxation != null)
                    hash = hash * 59 + this.AccruableCOFINSExemptReasonTaxation.GetHashCode();
                if (this.AccruableCSLLExemptReasonTaxation != null)
                    hash = hash * 59 + this.AccruableCSLLExemptReasonTaxation.GetHashCode();
                if (this.WithholdingPIS != null)
                    hash = hash * 59 + this.WithholdingPIS.GetHashCode();
                if (this.WithholdingCOFINS != null)
                    hash = hash * 59 + this.WithholdingCOFINS.GetHashCode();
                if (this.WithholdingCSLL != null)
                    hash = hash * 59 + this.WithholdingCSLL.GetHashCode();
                if (this.WithholdingIRRF != null)
                    hash = hash * 59 + this.WithholdingIRRF.GetHashCode();
                if (this.WithholdCOFINSExemptReasonTaxation != null)
                    hash = hash * 59 + this.WithholdCOFINSExemptReasonTaxation.GetHashCode();
                if (this.WithholdCSLLExemptReasonTaxation != null)
                    hash = hash * 59 + this.WithholdCSLLExemptReasonTaxation.GetHashCode();
                if (this.WithholdPISExemptReasonTaxation != null)
                    hash = hash * 59 + this.WithholdPISExemptReasonTaxation.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // AccruableCOFINSExempCodeTaxation (string) pattern
            Regex regexAccruableCOFINSExempCodeTaxation = new Regex(@"([0-9]{3})?", RegexOptions.CultureInvariant);
            if (false == regexAccruableCOFINSExempCodeTaxation.Match(this.AccruableCOFINSExempCodeTaxation).Success)
            {
                yield return new ValidationResult("Invalid value for AccruableCOFINSExempCodeTaxation, must match a pattern of /([0-9]{3})?/.", new [] { "AccruableCOFINSExempCodeTaxation" });
            }

            // AccruablePISExempCodeTaxation (string) pattern
            Regex regexAccruablePISExempCodeTaxation = new Regex(@"([0-9]{3})?", RegexOptions.CultureInvariant);
            if (false == regexAccruablePISExempCodeTaxation.Match(this.AccruablePISExempCodeTaxation).Success)
            {
                yield return new ValidationResult("Invalid value for AccruablePISExempCodeTaxation, must match a pattern of /([0-9]{3})?/.", new [] { "AccruablePISExempCodeTaxation" });
            }

            yield break;
        }
    }

}
