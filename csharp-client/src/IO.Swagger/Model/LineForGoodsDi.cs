/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LineForGoodsDi
    /// </summary>
    [DataContract]
    public partial class LineForGoodsDi :  IEquatable<LineForGoodsDi>, IValidatableObject
    {
        /// <summary>
        /// - '1' # Maritima - '2' # Fluvial - '3' # Lacustre - '4' # Aerea - '5' # Postal - '6' # Ferroviaria - '7' # Rodoviaria - '8' # Conduto - '9' # Meios Proprios - '10' # Entrada/Saida Ficta 
        /// </summary>
        /// <value>- '1' # Maritima - '2' # Fluvial - '3' # Lacustre - '4' # Aerea - '5' # Postal - '6' # Ferroviaria - '7' # Rodoviaria - '8' # Conduto - '9' # Meios Proprios - '10' # Entrada/Saida Ficta </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransportDITypeEnum
        {
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1,
            
            /// <summary>
            /// Enum _2 for "2"
            /// </summary>
            [EnumMember(Value = "2")]
            _2,
            
            /// <summary>
            /// Enum _3 for "3"
            /// </summary>
            [EnumMember(Value = "3")]
            _3,
            
            /// <summary>
            /// Enum _4 for "4"
            /// </summary>
            [EnumMember(Value = "4")]
            _4,
            
            /// <summary>
            /// Enum _5 for "5"
            /// </summary>
            [EnumMember(Value = "5")]
            _5,
            
            /// <summary>
            /// Enum _6 for "6"
            /// </summary>
            [EnumMember(Value = "6")]
            _6,
            
            /// <summary>
            /// Enum _7 for "7"
            /// </summary>
            [EnumMember(Value = "7")]
            _7,
            
            /// <summary>
            /// Enum _8 for "8"
            /// </summary>
            [EnumMember(Value = "8")]
            _8,
            
            /// <summary>
            /// Enum _9 for "9"
            /// </summary>
            [EnumMember(Value = "9")]
            _9,
            
            /// <summary>
            /// Enum _10 for "10"
            /// </summary>
            [EnumMember(Value = "10")]
            _10
        }

        /// <summary>
        /// - '1' # On One's Own [1-por conta propria] - '2' # On Behalf And Order [2-por conta e ordem] - '3' # Order [3-encomenda] 
        /// </summary>
        /// <value>- '1' # On One's Own [1-por conta propria] - '2' # On Behalf And Order [2-por conta e ordem] - '3' # Order [3-encomenda] </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IntermediateTypeEnum
        {
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1,
            
            /// <summary>
            /// Enum _2 for "2"
            /// </summary>
            [EnumMember(Value = "2")]
            _2,
            
            /// <summary>
            /// Enum _3 for "3"
            /// </summary>
            [EnumMember(Value = "3")]
            _3
        }

        /// <summary>
        /// - '1' # Maritima - '2' # Fluvial - '3' # Lacustre - '4' # Aerea - '5' # Postal - '6' # Ferroviaria - '7' # Rodoviaria - '8' # Conduto - '9' # Meios Proprios - '10' # Entrada/Saida Ficta 
        /// </summary>
        /// <value>- '1' # Maritima - '2' # Fluvial - '3' # Lacustre - '4' # Aerea - '5' # Postal - '6' # Ferroviaria - '7' # Rodoviaria - '8' # Conduto - '9' # Meios Proprios - '10' # Entrada/Saida Ficta </value>
        [DataMember(Name="transportDIType", EmitDefaultValue=false)]
        public TransportDITypeEnum? TransportDIType { get; set; }
        /// <summary>
        /// - '1' # On One's Own [1-por conta propria] - '2' # On Behalf And Order [2-por conta e ordem] - '3' # Order [3-encomenda] 
        /// </summary>
        /// <value>- '1' # On One's Own [1-por conta propria] - '2' # On Behalf And Order [2-por conta e ordem] - '3' # Order [3-encomenda] </value>
        [DataMember(Name="intermediateType", EmitDefaultValue=false)]
        public IntermediateTypeEnum? IntermediateType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LineForGoodsDi" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LineForGoodsDi() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LineForGoodsDi" /> class.
        /// </summary>
        /// <param name="CustomsValue">customs value, valor aduaneiro (II Block of NFe).</param>
        /// <param name="DiNumber">Import declaration number, DI/DSI/DA/DRI-E (DI/DSI/DA/DRI-E) (required).</param>
        /// <param name="RegisterDateDI">Register date of import declaration number, DI/DSI/DA/DRI-E (DI/DSI/DA/DRI-E) (required).</param>
        /// <param name="ClearanceSite">Clerance Site Local do desembaraço aduaneiro  (required).</param>
        /// <param name="ClearanceState">Clerance Site State Estado onde ocorrreu o desembaraço aduaneiro  (required).</param>
        /// <param name="ClearanceDate">Clerance date.</param>
        /// <param name="TransportDIType">- &#39;1&#39; # Maritima - &#39;2&#39; # Fluvial - &#39;3&#39; # Lacustre - &#39;4&#39; # Aerea - &#39;5&#39; # Postal - &#39;6&#39; # Ferroviaria - &#39;7&#39; # Rodoviaria - &#39;8&#39; # Conduto - &#39;9&#39; # Meios Proprios - &#39;10&#39; # Entrada/Saida Ficta  (required).</param>
        /// <param name="AfrmmValue">Aditional amount to freight to renew merchant marine, This decimal 13 integers and 2 decimals [Valor Adicional ao frete para renovação de marinha mercante] .</param>
        /// <param name="IntermediateType">- &#39;1&#39; # On One&#39;s Own [1-por conta propria] - &#39;2&#39; # On Behalf And Order [2-por conta e ordem] - &#39;3&#39; # Order [3-encomenda]  (required).</param>
        /// <param name="BuyerFederalTaxID">Buyer federal tax id CNPJ do comprador ou encomendante .</param>
        /// <param name="BuyerState">Buyer sate Estado do comprador ou encomendante .</param>
        /// <param name="ExporterCode">Exporter code.</param>
        /// <param name="Adi">aditional import declaration (required).</param>
        public LineForGoodsDi(double? CustomsValue = default(double?), string DiNumber = default(string), DateTime? RegisterDateDI = default(DateTime?), string ClearanceSite = default(string), StateEnum ClearanceState = default(StateEnum), DateTime? ClearanceDate = default(DateTime?), TransportDITypeEnum? TransportDIType = default(TransportDITypeEnum?), double? AfrmmValue = default(double?), IntermediateTypeEnum? IntermediateType = default(IntermediateTypeEnum?), string BuyerFederalTaxID = default(string), StateEnum BuyerState = default(StateEnum), string ExporterCode = default(string), List<LineForGoodsAdi> Adi = default(List<LineForGoodsAdi>))
        {
            // to ensure "DiNumber" is required (not null)
            if (DiNumber == null)
            {
                throw new InvalidDataException("DiNumber is a required property for LineForGoodsDi and cannot be null");
            }
            else
            {
                this.DiNumber = DiNumber;
            }
            // to ensure "RegisterDateDI" is required (not null)
            if (RegisterDateDI == null)
            {
                throw new InvalidDataException("RegisterDateDI is a required property for LineForGoodsDi and cannot be null");
            }
            else
            {
                this.RegisterDateDI = RegisterDateDI;
            }
            // to ensure "ClearanceSite" is required (not null)
            if (ClearanceSite == null)
            {
                throw new InvalidDataException("ClearanceSite is a required property for LineForGoodsDi and cannot be null");
            }
            else
            {
                this.ClearanceSite = ClearanceSite;
            }
            // to ensure "ClearanceState" is required (not null)
            if (ClearanceState == null)
            {
                throw new InvalidDataException("ClearanceState is a required property for LineForGoodsDi and cannot be null");
            }
            else
            {
                this.ClearanceState = ClearanceState;
            }
            // to ensure "TransportDIType" is required (not null)
            if (TransportDIType == null)
            {
                throw new InvalidDataException("TransportDIType is a required property for LineForGoodsDi and cannot be null");
            }
            else
            {
                this.TransportDIType = TransportDIType;
            }
            // to ensure "IntermediateType" is required (not null)
            if (IntermediateType == null)
            {
                throw new InvalidDataException("IntermediateType is a required property for LineForGoodsDi and cannot be null");
            }
            else
            {
                this.IntermediateType = IntermediateType;
            }
            // to ensure "Adi" is required (not null)
            if (Adi == null)
            {
                throw new InvalidDataException("Adi is a required property for LineForGoodsDi and cannot be null");
            }
            else
            {
                this.Adi = Adi;
            }
            this.CustomsValue = CustomsValue;
            this.ClearanceDate = ClearanceDate;
            this.AfrmmValue = AfrmmValue;
            this.BuyerFederalTaxID = BuyerFederalTaxID;
            this.BuyerState = BuyerState;
            this.ExporterCode = ExporterCode;
        }
        
        /// <summary>
        /// customs value, valor aduaneiro (II Block of NFe)
        /// </summary>
        /// <value>customs value, valor aduaneiro (II Block of NFe)</value>
        [DataMember(Name="customsValue", EmitDefaultValue=false)]
        public double? CustomsValue { get; set; }
        /// <summary>
        /// Import declaration number, DI/DSI/DA/DRI-E (DI/DSI/DA/DRI-E)
        /// </summary>
        /// <value>Import declaration number, DI/DSI/DA/DRI-E (DI/DSI/DA/DRI-E)</value>
        [DataMember(Name="diNumber", EmitDefaultValue=false)]
        public string DiNumber { get; set; }
        /// <summary>
        /// Register date of import declaration number, DI/DSI/DA/DRI-E (DI/DSI/DA/DRI-E)
        /// </summary>
        /// <value>Register date of import declaration number, DI/DSI/DA/DRI-E (DI/DSI/DA/DRI-E)</value>
        [DataMember(Name="registerDateDI", EmitDefaultValue=false)]
        public DateTime? RegisterDateDI { get; set; }
        /// <summary>
        /// Clerance Site Local do desembaraço aduaneiro 
        /// </summary>
        /// <value>Clerance Site Local do desembaraço aduaneiro </value>
        [DataMember(Name="clearanceSite", EmitDefaultValue=false)]
        public string ClearanceSite { get; set; }
        /// <summary>
        /// Clerance Site State Estado onde ocorrreu o desembaraço aduaneiro 
        /// </summary>
        /// <value>Clerance Site State Estado onde ocorrreu o desembaraço aduaneiro </value>
        [DataMember(Name="clearanceState", EmitDefaultValue=false)]
        public StateEnum ClearanceState { get; set; }
        /// <summary>
        /// Clerance date
        /// </summary>
        /// <value>Clerance date</value>
        [DataMember(Name="clearanceDate", EmitDefaultValue=false)]
        public DateTime? ClearanceDate { get; set; }
        /// <summary>
        /// Aditional amount to freight to renew merchant marine, This decimal 13 integers and 2 decimals [Valor Adicional ao frete para renovação de marinha mercante] 
        /// </summary>
        /// <value>Aditional amount to freight to renew merchant marine, This decimal 13 integers and 2 decimals [Valor Adicional ao frete para renovação de marinha mercante] </value>
        [DataMember(Name="afrmmValue", EmitDefaultValue=false)]
        public double? AfrmmValue { get; set; }
        /// <summary>
        /// Buyer federal tax id CNPJ do comprador ou encomendante 
        /// </summary>
        /// <value>Buyer federal tax id CNPJ do comprador ou encomendante </value>
        [DataMember(Name="buyerFederalTaxID", EmitDefaultValue=false)]
        public string BuyerFederalTaxID { get; set; }
        /// <summary>
        /// Buyer sate Estado do comprador ou encomendante 
        /// </summary>
        /// <value>Buyer sate Estado do comprador ou encomendante </value>
        [DataMember(Name="buyerState", EmitDefaultValue=false)]
        public StateEnum BuyerState { get; set; }
        /// <summary>
        /// Exporter code
        /// </summary>
        /// <value>Exporter code</value>
        [DataMember(Name="exporterCode", EmitDefaultValue=false)]
        public string ExporterCode { get; set; }
        /// <summary>
        /// aditional import declaration
        /// </summary>
        /// <value>aditional import declaration</value>
        [DataMember(Name="adi", EmitDefaultValue=false)]
        public List<LineForGoodsAdi> Adi { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LineForGoodsDi {\n");
            sb.Append("  CustomsValue: ").Append(CustomsValue).Append("\n");
            sb.Append("  DiNumber: ").Append(DiNumber).Append("\n");
            sb.Append("  RegisterDateDI: ").Append(RegisterDateDI).Append("\n");
            sb.Append("  ClearanceSite: ").Append(ClearanceSite).Append("\n");
            sb.Append("  ClearanceState: ").Append(ClearanceState).Append("\n");
            sb.Append("  ClearanceDate: ").Append(ClearanceDate).Append("\n");
            sb.Append("  TransportDIType: ").Append(TransportDIType).Append("\n");
            sb.Append("  AfrmmValue: ").Append(AfrmmValue).Append("\n");
            sb.Append("  IntermediateType: ").Append(IntermediateType).Append("\n");
            sb.Append("  BuyerFederalTaxID: ").Append(BuyerFederalTaxID).Append("\n");
            sb.Append("  BuyerState: ").Append(BuyerState).Append("\n");
            sb.Append("  ExporterCode: ").Append(ExporterCode).Append("\n");
            sb.Append("  Adi: ").Append(Adi).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LineForGoodsDi);
        }

        /// <summary>
        /// Returns true if LineForGoodsDi instances are equal
        /// </summary>
        /// <param name="other">Instance of LineForGoodsDi to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineForGoodsDi other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CustomsValue == other.CustomsValue ||
                    this.CustomsValue != null &&
                    this.CustomsValue.Equals(other.CustomsValue)
                ) && 
                (
                    this.DiNumber == other.DiNumber ||
                    this.DiNumber != null &&
                    this.DiNumber.Equals(other.DiNumber)
                ) && 
                (
                    this.RegisterDateDI == other.RegisterDateDI ||
                    this.RegisterDateDI != null &&
                    this.RegisterDateDI.Equals(other.RegisterDateDI)
                ) && 
                (
                    this.ClearanceSite == other.ClearanceSite ||
                    this.ClearanceSite != null &&
                    this.ClearanceSite.Equals(other.ClearanceSite)
                ) && 
                (
                    this.ClearanceState == other.ClearanceState ||
                    this.ClearanceState != null &&
                    this.ClearanceState.Equals(other.ClearanceState)
                ) && 
                (
                    this.ClearanceDate == other.ClearanceDate ||
                    this.ClearanceDate != null &&
                    this.ClearanceDate.Equals(other.ClearanceDate)
                ) && 
                (
                    this.TransportDIType == other.TransportDIType ||
                    this.TransportDIType != null &&
                    this.TransportDIType.Equals(other.TransportDIType)
                ) && 
                (
                    this.AfrmmValue == other.AfrmmValue ||
                    this.AfrmmValue != null &&
                    this.AfrmmValue.Equals(other.AfrmmValue)
                ) && 
                (
                    this.IntermediateType == other.IntermediateType ||
                    this.IntermediateType != null &&
                    this.IntermediateType.Equals(other.IntermediateType)
                ) && 
                (
                    this.BuyerFederalTaxID == other.BuyerFederalTaxID ||
                    this.BuyerFederalTaxID != null &&
                    this.BuyerFederalTaxID.Equals(other.BuyerFederalTaxID)
                ) && 
                (
                    this.BuyerState == other.BuyerState ||
                    this.BuyerState != null &&
                    this.BuyerState.Equals(other.BuyerState)
                ) && 
                (
                    this.ExporterCode == other.ExporterCode ||
                    this.ExporterCode != null &&
                    this.ExporterCode.Equals(other.ExporterCode)
                ) && 
                (
                    this.Adi == other.Adi ||
                    this.Adi != null &&
                    this.Adi.SequenceEqual(other.Adi)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CustomsValue != null)
                    hash = hash * 59 + this.CustomsValue.GetHashCode();
                if (this.DiNumber != null)
                    hash = hash * 59 + this.DiNumber.GetHashCode();
                if (this.RegisterDateDI != null)
                    hash = hash * 59 + this.RegisterDateDI.GetHashCode();
                if (this.ClearanceSite != null)
                    hash = hash * 59 + this.ClearanceSite.GetHashCode();
                if (this.ClearanceState != null)
                    hash = hash * 59 + this.ClearanceState.GetHashCode();
                if (this.ClearanceDate != null)
                    hash = hash * 59 + this.ClearanceDate.GetHashCode();
                if (this.TransportDIType != null)
                    hash = hash * 59 + this.TransportDIType.GetHashCode();
                if (this.AfrmmValue != null)
                    hash = hash * 59 + this.AfrmmValue.GetHashCode();
                if (this.IntermediateType != null)
                    hash = hash * 59 + this.IntermediateType.GetHashCode();
                if (this.BuyerFederalTaxID != null)
                    hash = hash * 59 + this.BuyerFederalTaxID.GetHashCode();
                if (this.BuyerState != null)
                    hash = hash * 59 + this.BuyerState.GetHashCode();
                if (this.ExporterCode != null)
                    hash = hash * 59 + this.ExporterCode.GetHashCode();
                if (this.Adi != null)
                    hash = hash * 59 + this.Adi.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // DiNumber (string) maxLength
            if(this.DiNumber != null && this.DiNumber.Length > 12)
            {
                yield return new ValidationResult("Invalid value for DiNumber, length must be less than 12.", new [] { "DiNumber" });
            }

            // DiNumber (string) minLength
            if(this.DiNumber != null && this.DiNumber.Length < 1)
            {
                yield return new ValidationResult("Invalid value for DiNumber, length must be greater than 1.", new [] { "DiNumber" });
            }

            // ClearanceSite (string) maxLength
            if(this.ClearanceSite != null && this.ClearanceSite.Length > 60)
            {
                yield return new ValidationResult("Invalid value for ClearanceSite, length must be less than 60.", new [] { "ClearanceSite" });
            }

            // ClearanceSite (string) minLength
            if(this.ClearanceSite != null && this.ClearanceSite.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ClearanceSite, length must be greater than 1.", new [] { "ClearanceSite" });
            }

            // BuyerFederalTaxID (string) pattern
            Regex regexBuyerFederalTaxID = new Regex(@"[0-9]{14}", RegexOptions.CultureInvariant);
            if (false == regexBuyerFederalTaxID.Match(this.BuyerFederalTaxID).Success)
            {
                yield return new ValidationResult("Invalid value for BuyerFederalTaxID, must match a pattern of /[0-9]{14}/.", new [] { "BuyerFederalTaxID" });
            }

            // ExporterCode (string) maxLength
            if(this.ExporterCode != null && this.ExporterCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for ExporterCode, length must be less than 60.", new [] { "ExporterCode" });
            }

            // ExporterCode (string) minLength
            if(this.ExporterCode != null && this.ExporterCode.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ExporterCode, length must be greater than 1.", new [] { "ExporterCode" });
            }

            yield break;
        }
    }

}
