/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InformerForGoodsCsts
    /// </summary>
    [DataContract]
    public partial class InformerForGoodsCsts :  IEquatable<InformerForGoodsCsts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InformerForGoodsCsts" /> class.
        /// </summary>
        /// <param name="Icms">CST-B.</param>
        /// <param name="Ipi">CST-IPI.</param>
        /// <param name="PisCofins">CST PIS/COFINS.</param>
        public InformerForGoodsCsts(string Icms = default(string), string Ipi = default(string), string PisCofins = default(string))
        {
            this.Icms = Icms;
            this.Ipi = Ipi;
            this.PisCofins = PisCofins;
        }
        
        /// <summary>
        /// CST-B
        /// </summary>
        /// <value>CST-B</value>
        [DataMember(Name="icms", EmitDefaultValue=false)]
        public string Icms { get; set; }
        /// <summary>
        /// CST-IPI
        /// </summary>
        /// <value>CST-IPI</value>
        [DataMember(Name="ipi", EmitDefaultValue=false)]
        public string Ipi { get; set; }
        /// <summary>
        /// CST PIS/COFINS
        /// </summary>
        /// <value>CST PIS/COFINS</value>
        [DataMember(Name="pisCofins", EmitDefaultValue=false)]
        public string PisCofins { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InformerForGoodsCsts {\n");
            sb.Append("  Icms: ").Append(Icms).Append("\n");
            sb.Append("  Ipi: ").Append(Ipi).Append("\n");
            sb.Append("  PisCofins: ").Append(PisCofins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InformerForGoodsCsts);
        }

        /// <summary>
        /// Returns true if InformerForGoodsCsts instances are equal
        /// </summary>
        /// <param name="other">Instance of InformerForGoodsCsts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InformerForGoodsCsts other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Icms == other.Icms ||
                    this.Icms != null &&
                    this.Icms.Equals(other.Icms)
                ) && 
                (
                    this.Ipi == other.Ipi ||
                    this.Ipi != null &&
                    this.Ipi.Equals(other.Ipi)
                ) && 
                (
                    this.PisCofins == other.PisCofins ||
                    this.PisCofins != null &&
                    this.PisCofins.Equals(other.PisCofins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Icms != null)
                    hash = hash * 59 + this.Icms.GetHashCode();
                if (this.Ipi != null)
                    hash = hash * 59 + this.Ipi.GetHashCode();
                if (this.PisCofins != null)
                    hash = hash * 59 + this.PisCofins.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
