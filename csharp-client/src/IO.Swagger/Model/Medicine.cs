/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Medicine
    /// </summary>
    [DataContract]
    public partial class Medicine :  IEquatable<Medicine>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Medicine" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Medicine() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Medicine" /> class.
        /// </summary>
        /// <param name="LoteNumber">LoteNumber (required).</param>
        /// <param name="LoteQuantity">This is a decimal type with 11 digits including 3 decimal positions. (required).</param>
        /// <param name="ManufactotyDate">ManufactotyDate (required).</param>
        /// <param name="ExpirationDate">ExpirationDate (required).</param>
        /// <param name="MaxValueToEndUser">This is a decimal type with 15 digits including 2 decimal positions.  Max value to end user. (required).</param>
        public Medicine(string LoteNumber = default(string), double? LoteQuantity = default(double?), DateTime? ManufactotyDate = default(DateTime?), DateTime? ExpirationDate = default(DateTime?), double? MaxValueToEndUser = default(double?))
        {
            // to ensure "LoteNumber" is required (not null)
            if (LoteNumber == null)
            {
                throw new InvalidDataException("LoteNumber is a required property for Medicine and cannot be null");
            }
            else
            {
                this.LoteNumber = LoteNumber;
            }
            // to ensure "LoteQuantity" is required (not null)
            if (LoteQuantity == null)
            {
                throw new InvalidDataException("LoteQuantity is a required property for Medicine and cannot be null");
            }
            else
            {
                this.LoteQuantity = LoteQuantity;
            }
            // to ensure "ManufactotyDate" is required (not null)
            if (ManufactotyDate == null)
            {
                throw new InvalidDataException("ManufactotyDate is a required property for Medicine and cannot be null");
            }
            else
            {
                this.ManufactotyDate = ManufactotyDate;
            }
            // to ensure "ExpirationDate" is required (not null)
            if (ExpirationDate == null)
            {
                throw new InvalidDataException("ExpirationDate is a required property for Medicine and cannot be null");
            }
            else
            {
                this.ExpirationDate = ExpirationDate;
            }
            // to ensure "MaxValueToEndUser" is required (not null)
            if (MaxValueToEndUser == null)
            {
                throw new InvalidDataException("MaxValueToEndUser is a required property for Medicine and cannot be null");
            }
            else
            {
                this.MaxValueToEndUser = MaxValueToEndUser;
            }
        }
        
        /// <summary>
        /// Gets or Sets LoteNumber
        /// </summary>
        [DataMember(Name="loteNumber", EmitDefaultValue=false)]
        public string LoteNumber { get; set; }
        /// <summary>
        /// This is a decimal type with 11 digits including 3 decimal positions.
        /// </summary>
        /// <value>This is a decimal type with 11 digits including 3 decimal positions.</value>
        [DataMember(Name="loteQuantity", EmitDefaultValue=false)]
        public double? LoteQuantity { get; set; }
        /// <summary>
        /// Gets or Sets ManufactotyDate
        /// </summary>
        [DataMember(Name="manufactotyDate", EmitDefaultValue=false)]
        public DateTime? ManufactotyDate { get; set; }
        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }
        /// <summary>
        /// This is a decimal type with 15 digits including 2 decimal positions.  Max value to end user.
        /// </summary>
        /// <value>This is a decimal type with 15 digits including 2 decimal positions.  Max value to end user.</value>
        [DataMember(Name="maxValueToEndUser", EmitDefaultValue=false)]
        public double? MaxValueToEndUser { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Medicine {\n");
            sb.Append("  LoteNumber: ").Append(LoteNumber).Append("\n");
            sb.Append("  LoteQuantity: ").Append(LoteQuantity).Append("\n");
            sb.Append("  ManufactotyDate: ").Append(ManufactotyDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  MaxValueToEndUser: ").Append(MaxValueToEndUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Medicine);
        }

        /// <summary>
        /// Returns true if Medicine instances are equal
        /// </summary>
        /// <param name="other">Instance of Medicine to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Medicine other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.LoteNumber == other.LoteNumber ||
                    this.LoteNumber != null &&
                    this.LoteNumber.Equals(other.LoteNumber)
                ) && 
                (
                    this.LoteQuantity == other.LoteQuantity ||
                    this.LoteQuantity != null &&
                    this.LoteQuantity.Equals(other.LoteQuantity)
                ) && 
                (
                    this.ManufactotyDate == other.ManufactotyDate ||
                    this.ManufactotyDate != null &&
                    this.ManufactotyDate.Equals(other.ManufactotyDate)
                ) && 
                (
                    this.ExpirationDate == other.ExpirationDate ||
                    this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    this.MaxValueToEndUser == other.MaxValueToEndUser ||
                    this.MaxValueToEndUser != null &&
                    this.MaxValueToEndUser.Equals(other.MaxValueToEndUser)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.LoteNumber != null)
                    hash = hash * 59 + this.LoteNumber.GetHashCode();
                if (this.LoteQuantity != null)
                    hash = hash * 59 + this.LoteQuantity.GetHashCode();
                if (this.ManufactotyDate != null)
                    hash = hash * 59 + this.ManufactotyDate.GetHashCode();
                if (this.ExpirationDate != null)
                    hash = hash * 59 + this.ExpirationDate.GetHashCode();
                if (this.MaxValueToEndUser != null)
                    hash = hash * 59 + this.MaxValueToEndUser.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // LoteNumber (string) maxLength
            if(this.LoteNumber != null && this.LoteNumber.Length > 20)
            {
                yield return new ValidationResult("Invalid value for LoteNumber, length must be less than 20.", new [] { "LoteNumber" });
            }

            yield break;
        }
    }

}
