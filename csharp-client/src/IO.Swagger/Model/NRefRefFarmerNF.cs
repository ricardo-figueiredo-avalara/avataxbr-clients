/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NRefRefFarmerNF
    /// </summary>
    [DataContract]
    public partial class NRefRefFarmerNF :  IEquatable<NRefRefFarmerNF>, IValidatableObject
    {
        /// <summary>
        /// Document Fiscal model - '04' # FARMER DOCUMENT - '01' # DETACHED DOCUMENT - AVULSO 
        /// </summary>
        /// <value>Document Fiscal model - '04' # FARMER DOCUMENT - '01' # DETACHED DOCUMENT - AVULSO </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModelEnum
        {
            
            /// <summary>
            /// Enum _04 for "04"
            /// </summary>
            [EnumMember(Value = "04")]
            _04,
            
            /// <summary>
            /// Enum _01 for "01"
            /// </summary>
            [EnumMember(Value = "01")]
            _01
        }

        /// <summary>
        /// Document Fiscal model - '04' # FARMER DOCUMENT - '01' # DETACHED DOCUMENT - AVULSO 
        /// </summary>
        /// <value>Document Fiscal model - '04' # FARMER DOCUMENT - '01' # DETACHED DOCUMENT - AVULSO </value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public ModelEnum? Model { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NRefRefFarmerNF" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NRefRefFarmerNF() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NRefRefFarmerNF" /> class.
        /// </summary>
        /// <param name="StateCd">State code of fiscal Document creator, farmer (required).</param>
        /// <param name="Yymm">year and month of fiscal document creation (required).</param>
        /// <param name="FederalTaxId">fiscal document creator farmer federalTaxId (required).</param>
        /// <param name="StateTaxId">fiscal document creator, farmer stateTaxId (required).</param>
        /// <param name="Model">Document Fiscal model - &#39;04&#39; # FARMER DOCUMENT - &#39;01&#39; # DETACHED DOCUMENT - AVULSO  (required).</param>
        /// <param name="Serie">fiscal document serie (required).</param>
        /// <param name="Number">fiscal document number (required).</param>
        public NRefRefFarmerNF(StateEnum StateCd = default(StateEnum), string Yymm = default(string), string FederalTaxId = default(string), string StateTaxId = default(string), ModelEnum? Model = default(ModelEnum?), string Serie = default(string), string Number = default(string))
        {
            // to ensure "StateCd" is required (not null)
            if (StateCd == null)
            {
                throw new InvalidDataException("StateCd is a required property for NRefRefFarmerNF and cannot be null");
            }
            else
            {
                this.StateCd = StateCd;
            }
            // to ensure "Yymm" is required (not null)
            if (Yymm == null)
            {
                throw new InvalidDataException("Yymm is a required property for NRefRefFarmerNF and cannot be null");
            }
            else
            {
                this.Yymm = Yymm;
            }
            // to ensure "FederalTaxId" is required (not null)
            if (FederalTaxId == null)
            {
                throw new InvalidDataException("FederalTaxId is a required property for NRefRefFarmerNF and cannot be null");
            }
            else
            {
                this.FederalTaxId = FederalTaxId;
            }
            // to ensure "StateTaxId" is required (not null)
            if (StateTaxId == null)
            {
                throw new InvalidDataException("StateTaxId is a required property for NRefRefFarmerNF and cannot be null");
            }
            else
            {
                this.StateTaxId = StateTaxId;
            }
            // to ensure "Model" is required (not null)
            if (Model == null)
            {
                throw new InvalidDataException("Model is a required property for NRefRefFarmerNF and cannot be null");
            }
            else
            {
                this.Model = Model;
            }
            // to ensure "Serie" is required (not null)
            if (Serie == null)
            {
                throw new InvalidDataException("Serie is a required property for NRefRefFarmerNF and cannot be null");
            }
            else
            {
                this.Serie = Serie;
            }
            // to ensure "Number" is required (not null)
            if (Number == null)
            {
                throw new InvalidDataException("Number is a required property for NRefRefFarmerNF and cannot be null");
            }
            else
            {
                this.Number = Number;
            }
        }
        
        /// <summary>
        /// State code of fiscal Document creator, farmer
        /// </summary>
        /// <value>State code of fiscal Document creator, farmer</value>
        [DataMember(Name="stateCd", EmitDefaultValue=false)]
        public StateEnum StateCd { get; set; }
        /// <summary>
        /// year and month of fiscal document creation
        /// </summary>
        /// <value>year and month of fiscal document creation</value>
        [DataMember(Name="yymm", EmitDefaultValue=false)]
        public string Yymm { get; set; }
        /// <summary>
        /// fiscal document creator farmer federalTaxId
        /// </summary>
        /// <value>fiscal document creator farmer federalTaxId</value>
        [DataMember(Name="federalTaxId", EmitDefaultValue=false)]
        public string FederalTaxId { get; set; }
        /// <summary>
        /// fiscal document creator, farmer stateTaxId
        /// </summary>
        /// <value>fiscal document creator, farmer stateTaxId</value>
        [DataMember(Name="stateTaxId", EmitDefaultValue=false)]
        public string StateTaxId { get; set; }
        /// <summary>
        /// fiscal document serie
        /// </summary>
        /// <value>fiscal document serie</value>
        [DataMember(Name="serie", EmitDefaultValue=false)]
        public string Serie { get; set; }
        /// <summary>
        /// fiscal document number
        /// </summary>
        /// <value>fiscal document number</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NRefRefFarmerNF {\n");
            sb.Append("  StateCd: ").Append(StateCd).Append("\n");
            sb.Append("  Yymm: ").Append(Yymm).Append("\n");
            sb.Append("  FederalTaxId: ").Append(FederalTaxId).Append("\n");
            sb.Append("  StateTaxId: ").Append(StateTaxId).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Serie: ").Append(Serie).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NRefRefFarmerNF);
        }

        /// <summary>
        /// Returns true if NRefRefFarmerNF instances are equal
        /// </summary>
        /// <param name="other">Instance of NRefRefFarmerNF to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NRefRefFarmerNF other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StateCd == other.StateCd ||
                    this.StateCd != null &&
                    this.StateCd.Equals(other.StateCd)
                ) && 
                (
                    this.Yymm == other.Yymm ||
                    this.Yymm != null &&
                    this.Yymm.Equals(other.Yymm)
                ) && 
                (
                    this.FederalTaxId == other.FederalTaxId ||
                    this.FederalTaxId != null &&
                    this.FederalTaxId.Equals(other.FederalTaxId)
                ) && 
                (
                    this.StateTaxId == other.StateTaxId ||
                    this.StateTaxId != null &&
                    this.StateTaxId.Equals(other.StateTaxId)
                ) && 
                (
                    this.Model == other.Model ||
                    this.Model != null &&
                    this.Model.Equals(other.Model)
                ) && 
                (
                    this.Serie == other.Serie ||
                    this.Serie != null &&
                    this.Serie.Equals(other.Serie)
                ) && 
                (
                    this.Number == other.Number ||
                    this.Number != null &&
                    this.Number.Equals(other.Number)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StateCd != null)
                    hash = hash * 59 + this.StateCd.GetHashCode();
                if (this.Yymm != null)
                    hash = hash * 59 + this.Yymm.GetHashCode();
                if (this.FederalTaxId != null)
                    hash = hash * 59 + this.FederalTaxId.GetHashCode();
                if (this.StateTaxId != null)
                    hash = hash * 59 + this.StateTaxId.GetHashCode();
                if (this.Model != null)
                    hash = hash * 59 + this.Model.GetHashCode();
                if (this.Serie != null)
                    hash = hash * 59 + this.Serie.GetHashCode();
                if (this.Number != null)
                    hash = hash * 59 + this.Number.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Yymm (string) pattern
            Regex regexYymm = new Regex(@"[0-9]{2}[0]{1}[1-9]{1}|[0-9]{2}[1]{1}[0-2]{1}", RegexOptions.CultureInvariant);
            if (false == regexYymm.Match(this.Yymm).Success)
            {
                yield return new ValidationResult("Invalid value for Yymm, must match a pattern of /[0-9]{2}[0]{1}[1-9]{1}|[0-9]{2}[1]{1}[0-2]{1}/.", new [] { "Yymm" });
            }

            // FederalTaxId (string) pattern
            Regex regexFederalTaxId = new Regex(@"[0-9]{14}", RegexOptions.CultureInvariant);
            if (false == regexFederalTaxId.Match(this.FederalTaxId).Success)
            {
                yield return new ValidationResult("Invalid value for FederalTaxId, must match a pattern of /[0-9]{14}/.", new [] { "FederalTaxId" });
            }

            // StateTaxId (string) pattern
            Regex regexStateTaxId = new Regex(@"[0-9]{14}", RegexOptions.CultureInvariant);
            if (false == regexStateTaxId.Match(this.StateTaxId).Success)
            {
                yield return new ValidationResult("Invalid value for StateTaxId, must match a pattern of /[0-9]{14}/.", new [] { "StateTaxId" });
            }

            // Serie (string) pattern
            Regex regexSerie = new Regex(@"0|[1-9]{1}[0-9]{0,2}", RegexOptions.CultureInvariant);
            if (false == regexSerie.Match(this.Serie).Success)
            {
                yield return new ValidationResult("Invalid value for Serie, must match a pattern of /0|[1-9]{1}[0-9]{0,2}/.", new [] { "Serie" });
            }

            // Number (string) pattern
            Regex regexNumber = new Regex(@"[1-9]{1}[0-9]{0,8}", RegexOptions.CultureInvariant);
            if (false == regexNumber.Match(this.Number).Success)
            {
                yield return new ValidationResult("Invalid value for Number, must match a pattern of /[1-9]{1}[0-9]{0,8}/.", new [] { "Number" });
            }

            yield break;
        }
    }

}
