/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CompanyMailServer
    /// </summary>
    [DataContract]
    public partial class CompanyMailServer :  IEquatable<CompanyMailServer>, IValidatableObject
    {
        /// <summary>
        /// protocol SSL or TLS
        /// </summary>
        /// <value>protocol SSL or TLS</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProtocolEnum
        {
            
            /// <summary>
            /// Enum Ssl for "ssl"
            /// </summary>
            [EnumMember(Value = "ssl")]
            Ssl,
            
            /// <summary>
            /// Enum Tls for "tls"
            /// </summary>
            [EnumMember(Value = "tls")]
            Tls
        }

        /// <summary>
        /// protocol SSL or TLS
        /// </summary>
        /// <value>protocol SSL or TLS</value>
        [DataMember(Name="protocol", EmitDefaultValue=false)]
        public ProtocolEnum? Protocol { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyMailServer" /> class.
        /// </summary>
        /// <param name="User">User for login on email server.</param>
        /// <param name="Password">Password to login on email server.</param>
        /// <param name="SmtpAddress">smtp address to email server.</param>
        /// <param name="Port">port.</param>
        /// <param name="EmailFrom">email address to identify the sender e-mail, to send a XML and DANFE.</param>
        /// <param name="Protocol">protocol SSL or TLS.</param>
        /// <param name="TemplatemessageToEmail">Message to add to email body.</param>
        public CompanyMailServer(string User = default(string), string Password = default(string), string SmtpAddress = default(string), int? Port = default(int?), string EmailFrom = default(string), ProtocolEnum? Protocol = default(ProtocolEnum?), string TemplatemessageToEmail = default(string))
        {
            this.User = User;
            this.Password = Password;
            this.SmtpAddress = SmtpAddress;
            this.Port = Port;
            this.EmailFrom = EmailFrom;
            this.Protocol = Protocol;
            this.TemplatemessageToEmail = TemplatemessageToEmail;
        }
        
        /// <summary>
        /// User for login on email server
        /// </summary>
        /// <value>User for login on email server</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }
        /// <summary>
        /// Password to login on email server
        /// </summary>
        /// <value>Password to login on email server</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }
        /// <summary>
        /// smtp address to email server
        /// </summary>
        /// <value>smtp address to email server</value>
        [DataMember(Name="smtpAddress", EmitDefaultValue=false)]
        public string SmtpAddress { get; set; }
        /// <summary>
        /// port
        /// </summary>
        /// <value>port</value>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int? Port { get; set; }
        /// <summary>
        /// email address to identify the sender e-mail, to send a XML and DANFE
        /// </summary>
        /// <value>email address to identify the sender e-mail, to send a XML and DANFE</value>
        [DataMember(Name="emailFrom", EmitDefaultValue=false)]
        public string EmailFrom { get; set; }
        /// <summary>
        /// Message to add to email body
        /// </summary>
        /// <value>Message to add to email body</value>
        [DataMember(Name="templatemessageToEmail", EmitDefaultValue=false)]
        public string TemplatemessageToEmail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanyMailServer {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  SmtpAddress: ").Append(SmtpAddress).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  EmailFrom: ").Append(EmailFrom).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  TemplatemessageToEmail: ").Append(TemplatemessageToEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CompanyMailServer);
        }

        /// <summary>
        /// Returns true if CompanyMailServer instances are equal
        /// </summary>
        /// <param name="other">Instance of CompanyMailServer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyMailServer other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.SmtpAddress == other.SmtpAddress ||
                    this.SmtpAddress != null &&
                    this.SmtpAddress.Equals(other.SmtpAddress)
                ) && 
                (
                    this.Port == other.Port ||
                    this.Port != null &&
                    this.Port.Equals(other.Port)
                ) && 
                (
                    this.EmailFrom == other.EmailFrom ||
                    this.EmailFrom != null &&
                    this.EmailFrom.Equals(other.EmailFrom)
                ) && 
                (
                    this.Protocol == other.Protocol ||
                    this.Protocol != null &&
                    this.Protocol.Equals(other.Protocol)
                ) && 
                (
                    this.TemplatemessageToEmail == other.TemplatemessageToEmail ||
                    this.TemplatemessageToEmail != null &&
                    this.TemplatemessageToEmail.Equals(other.TemplatemessageToEmail)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.SmtpAddress != null)
                    hash = hash * 59 + this.SmtpAddress.GetHashCode();
                if (this.Port != null)
                    hash = hash * 59 + this.Port.GetHashCode();
                if (this.EmailFrom != null)
                    hash = hash * 59 + this.EmailFrom.GetHashCode();
                if (this.Protocol != null)
                    hash = hash * 59 + this.Protocol.GetHashCode();
                if (this.TemplatemessageToEmail != null)
                    hash = hash * 59 + this.TemplatemessageToEmail.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
