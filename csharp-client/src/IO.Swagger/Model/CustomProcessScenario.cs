/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CustomProcessScenario
    /// </summary>
    [DataContract]
    public partial class CustomProcessScenario :  IEquatable<CustomProcessScenario>, IValidatableObject
    {
        /// <summary>
        /// Inform if this process is subject to IPI taxation on output process - '50' # Saída Tributada - '51' # Saída Tributável com Alíquota Zero - '52' # Saída Isenta - '53' # Saída Não-Tributada - '54' # Saída Imune 
        /// </summary>
        /// <value>Inform if this process is subject to IPI taxation on output process - '50' # Saída Tributada - '51' # Saída Tributável com Alíquota Zero - '52' # Saída Isenta - '53' # Saída Não-Tributada - '54' # Saída Imune </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CstIPIEnum
        {
            
            /// <summary>
            /// Enum _50 for "50"
            /// </summary>
            [EnumMember(Value = "50")]
            _50,
            
            /// <summary>
            /// Enum _51 for "51"
            /// </summary>
            [EnumMember(Value = "51")]
            _51,
            
            /// <summary>
            /// Enum _52 for "52"
            /// </summary>
            [EnumMember(Value = "52")]
            _52,
            
            /// <summary>
            /// Enum _53 for "53"
            /// </summary>
            [EnumMember(Value = "53")]
            _53,
            
            /// <summary>
            /// Enum _54 for "54"
            /// </summary>
            [EnumMember(Value = "54")]
            _54
        }

        /// <summary>
        /// Inform if this item by nature is subject to PIS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE 
        /// </summary>
        /// <value>Inform if this item by nature is subject to PIS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccruablePISTaxationEnum
        {
            
            /// <summary>
            /// Enum T for "T"
            /// </summary>
            [EnumMember(Value = "T")]
            T,
            
            /// <summary>
            /// Enum Z for "Z"
            /// </summary>
            [EnumMember(Value = "Z")]
            Z,
            
            /// <summary>
            /// Enum E for "E"
            /// </summary>
            [EnumMember(Value = "E")]
            E,
            
            /// <summary>
            /// Enum H for "H"
            /// </summary>
            [EnumMember(Value = "H")]
            H,
            
            /// <summary>
            /// Enum N for "N"
            /// </summary>
            [EnumMember(Value = "N")]
            N
        }

        /// <summary>
        /// Inform if this item by nature is subject to COFINS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE 
        /// </summary>
        /// <value>Inform if this item by nature is subject to COFINS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccruableCOFINSTaxationEnum
        {
            
            /// <summary>
            /// Enum T for "T"
            /// </summary>
            [EnumMember(Value = "T")]
            T,
            
            /// <summary>
            /// Enum Z for "Z"
            /// </summary>
            [EnumMember(Value = "Z")]
            Z,
            
            /// <summary>
            /// Enum E for "E"
            /// </summary>
            [EnumMember(Value = "E")]
            E,
            
            /// <summary>
            /// Enum H for "H"
            /// </summary>
            [EnumMember(Value = "H")]
            H,
            
            /// <summary>
            /// Enum N for "N"
            /// </summary>
            [EnumMember(Value = "N")]
            N
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum SALES for "SALES"
            /// </summary>
            [EnumMember(Value = "SALES")]
            SALES,
            
            /// <summary>
            /// Enum PURCHASE for "PURCHASE"
            /// </summary>
            [EnumMember(Value = "PURCHASE")]
            PURCHASE,
            
            /// <summary>
            /// Enum SALESRETURN for "SALES_RETURN"
            /// </summary>
            [EnumMember(Value = "SALES_RETURN")]
            SALESRETURN,
            
            /// <summary>
            /// Enum PURCHASERETURN for "PURCHASE_RETURN"
            /// </summary>
            [EnumMember(Value = "PURCHASE_RETURN")]
            PURCHASERETURN,
            
            /// <summary>
            /// Enum TRANSFERRETURN for "TRANSFER_RETURN"
            /// </summary>
            [EnumMember(Value = "TRANSFER_RETURN")]
            TRANSFERRETURN,
            
            /// <summary>
            /// Enum SHIPPING for "SHIPPING"
            /// </summary>
            [EnumMember(Value = "SHIPPING")]
            SHIPPING,
            
            /// <summary>
            /// Enum SHIPPINGRETURN for "SHIPPING_RETURN"
            /// </summary>
            [EnumMember(Value = "SHIPPING_RETURN")]
            SHIPPINGRETURN,
            
            /// <summary>
            /// Enum TRANSFER for "TRANSFER"
            /// </summary>
            [EnumMember(Value = "TRANSFER")]
            TRANSFER,
            
            /// <summary>
            /// Enum RECEIPTAJUSTE for "RECEIPT_AJUSTE"
            /// </summary>
            [EnumMember(Value = "RECEIPT_AJUSTE")]
            RECEIPTAJUSTE,
            
            /// <summary>
            /// Enum TRANSFERAJUSTE for "TRANSFER_AJUSTE"
            /// </summary>
            [EnumMember(Value = "TRANSFER_AJUSTE")]
            TRANSFERAJUSTE
        }

        /// <summary>
        /// inform if the transaction is an operation to internalizing (receive) item or value
        /// </summary>
        /// <value>inform if the transaction is an operation to internalizing (receive) item or value</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WayTypeEnum
        {
            
            /// <summary>
            /// Enum In for "in"
            /// </summary>
            [EnumMember(Value = "in")]
            In,
            
            /// <summary>
            /// Enum Out for "out"
            /// </summary>
            [EnumMember(Value = "out")]
            Out
        }

        /// <summary>
        /// Gets or Sets Goal
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GoalEnum
        {
            
            /// <summary>
            /// Enum Normal for "Normal"
            /// </summary>
            [EnumMember(Value = "Normal")]
            Normal,
            
            /// <summary>
            /// Enum Complementary for "Complementary"
            /// </summary>
            [EnumMember(Value = "Complementary")]
            Complementary,
            
            /// <summary>
            /// Enum Voided for "Voided"
            /// </summary>
            [EnumMember(Value = "Voided")]
            Voided,
            
            /// <summary>
            /// Enum Replacement for "Replacement"
            /// </summary>
            [EnumMember(Value = "Replacement")]
            Replacement,
            
            /// <summary>
            /// Enum Return for "Return"
            /// </summary>
            [EnumMember(Value = "Return")]
            Return,
            
            /// <summary>
            /// Enum Adjustment for "Adjustment"
            /// </summary>
            [EnumMember(Value = "Adjustment")]
            Adjustment
        }

        /// <summary>
        /// Inform if this process is subject to IPI taxation on output process - '50' # Saída Tributada - '51' # Saída Tributável com Alíquota Zero - '52' # Saída Isenta - '53' # Saída Não-Tributada - '54' # Saída Imune 
        /// </summary>
        /// <value>Inform if this process is subject to IPI taxation on output process - '50' # Saída Tributada - '51' # Saída Tributável com Alíquota Zero - '52' # Saída Isenta - '53' # Saída Não-Tributada - '54' # Saída Imune </value>
        [DataMember(Name="cstIPI", EmitDefaultValue=false)]
        public CstIPIEnum? CstIPI { get; set; }
        /// <summary>
        /// Inform if this item by nature is subject to PIS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE 
        /// </summary>
        /// <value>Inform if this item by nature is subject to PIS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE </value>
        [DataMember(Name="accruablePISTaxation", EmitDefaultValue=false)]
        public AccruablePISTaxationEnum? AccruablePISTaxation { get; set; }
        /// <summary>
        /// Inform if this item by nature is subject to COFINS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE 
        /// </summary>
        /// <value>Inform if this item by nature is subject to COFINS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE </value>
        [DataMember(Name="accruableCOFINSTaxation", EmitDefaultValue=false)]
        public AccruableCOFINSTaxationEnum? AccruableCOFINSTaxation { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// inform if the transaction is an operation to internalizing (receive) item or value
        /// </summary>
        /// <value>inform if the transaction is an operation to internalizing (receive) item or value</value>
        [DataMember(Name="wayType", EmitDefaultValue=false)]
        public WayTypeEnum? WayType { get; set; }
        /// <summary>
        /// Gets or Sets Goal
        /// </summary>
        [DataMember(Name="goal", EmitDefaultValue=false)]
        public GoalEnum? Goal { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomProcessScenario" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomProcessScenario() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomProcessScenario" /> class.
        /// </summary>
        /// <param name="Code">Process code to Identify this configuration, its is unique by Accounty Id or when standard, its has priority when the code match with the standard code. (required).</param>
        /// <param name="StockImpact">Inform that the process has inventory impact..</param>
        /// <param name="FinancialImpact">Inform that the process has financial impact..</param>
        /// <param name="CstIPI">Inform if this process is subject to IPI taxation on output process - &#39;50&#39; # Saída Tributada - &#39;51&#39; # Saída Tributável com Alíquota Zero - &#39;52&#39; # Saída Isenta - &#39;53&#39; # Saída Não-Tributada - &#39;54&#39; # Saída Imune .</param>
        /// <param name="IpiLegalTaxClass">Legal tax classificação for IPI (enquadramento) When the processo has CST IPI 52 or 54, is mandatory inform Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo&#x3D;mCnJajU4BKU&#x3D; .</param>
        /// <param name="AccruablePISTaxation">Inform if this item by nature is subject to PIS taxation or exempt - &#39;T&#39; # TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;N&#39; # NO TAXABLE .</param>
        /// <param name="PisExemptLegalReasonCode">When exempt, taxable with zero, suspended, not taxable, this field holds the official code number.</param>
        /// <param name="PisExemptLegalReason">When specifi reason, this field has the description.</param>
        /// <param name="AccruableCOFINSTaxation">Inform if this item by nature is subject to COFINS taxation or exempt - &#39;T&#39; # TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;N&#39; # NO TAXABLE .</param>
        /// <param name="CofinsExemptLegalReasonCode">When exempt, taxable with zero, suspended, not taxable, this field holds the official code number.</param>
        /// <param name="CofinsExemptLegalReason">When specifi reason, this field has the description.</param>
        /// <param name="AllowIPIcreditWhenInGoing">Inform that the process allow IPI credit to Input process.</param>
        /// <param name="IcmsConf">the map key is state code.</param>
        /// <param name="Name">Process name to Identify this configuration (required).</param>
        /// <param name="Type">Type.</param>
        /// <param name="WayType">inform if the transaction is an operation to internalizing (receive) item or value.</param>
        /// <param name="Goal">Goal.</param>
        /// <param name="OverWriteCFOP">inform that the configuration process overwrites the cfop configuration..</param>
        /// <param name="Cfops">Cfops.</param>
        /// <param name="CompanyId">Company ID (required).</param>
        public CustomProcessScenario(string Code = default(string), bool? StockImpact = default(bool?), bool? FinancialImpact = default(bool?), CstIPIEnum? CstIPI = default(CstIPIEnum?), string IpiLegalTaxClass = default(string), AccruablePISTaxationEnum? AccruablePISTaxation = default(AccruablePISTaxationEnum?), string PisExemptLegalReasonCode = default(string), string PisExemptLegalReason = default(string), AccruableCOFINSTaxationEnum? AccruableCOFINSTaxation = default(AccruableCOFINSTaxationEnum?), string CofinsExemptLegalReasonCode = default(string), string CofinsExemptLegalReason = default(string), bool? AllowIPIcreditWhenInGoing = default(bool?), List<IcmsTaxConf> IcmsConf = default(List<IcmsTaxConf>), string Name = default(string), TypeEnum? Type = default(TypeEnum?), WayTypeEnum? WayType = default(WayTypeEnum?), GoalEnum? Goal = default(GoalEnum?), bool? OverWriteCFOP = default(bool?), List<CfopConf> Cfops = default(List<CfopConf>), Guid? CompanyId = default(Guid?))
        {
            // to ensure "Code" is required (not null)
            if (Code == null)
            {
                throw new InvalidDataException("Code is a required property for CustomProcessScenario and cannot be null");
            }
            else
            {
                this.Code = Code;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CustomProcessScenario and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "CompanyId" is required (not null)
            if (CompanyId == null)
            {
                throw new InvalidDataException("CompanyId is a required property for CustomProcessScenario and cannot be null");
            }
            else
            {
                this.CompanyId = CompanyId;
            }
            this.StockImpact = StockImpact;
            this.FinancialImpact = FinancialImpact;
            this.CstIPI = CstIPI;
            this.IpiLegalTaxClass = IpiLegalTaxClass;
            this.AccruablePISTaxation = AccruablePISTaxation;
            this.PisExemptLegalReasonCode = PisExemptLegalReasonCode;
            this.PisExemptLegalReason = PisExemptLegalReason;
            this.AccruableCOFINSTaxation = AccruableCOFINSTaxation;
            this.CofinsExemptLegalReasonCode = CofinsExemptLegalReasonCode;
            this.CofinsExemptLegalReason = CofinsExemptLegalReason;
            this.AllowIPIcreditWhenInGoing = AllowIPIcreditWhenInGoing;
            this.IcmsConf = IcmsConf;
            this.Type = Type;
            this.WayType = WayType;
            this.Goal = Goal;
            this.OverWriteCFOP = OverWriteCFOP;
            this.Cfops = Cfops;
        }
        
        /// <summary>
        /// Process code to Identify this configuration, its is unique by Accounty Id or when standard, its has priority when the code match with the standard code.
        /// </summary>
        /// <value>Process code to Identify this configuration, its is unique by Accounty Id or when standard, its has priority when the code match with the standard code.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Inform that the process has inventory impact.
        /// </summary>
        /// <value>Inform that the process has inventory impact.</value>
        [DataMember(Name="stockImpact", EmitDefaultValue=false)]
        public bool? StockImpact { get; set; }
        /// <summary>
        /// Inform that the process has financial impact.
        /// </summary>
        /// <value>Inform that the process has financial impact.</value>
        [DataMember(Name="financialImpact", EmitDefaultValue=false)]
        public bool? FinancialImpact { get; set; }
        /// <summary>
        /// Legal tax classificação for IPI (enquadramento) When the processo has CST IPI 52 or 54, is mandatory inform Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo&#x3D;mCnJajU4BKU&#x3D; 
        /// </summary>
        /// <value>Legal tax classificação for IPI (enquadramento) When the processo has CST IPI 52 or 54, is mandatory inform Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo&#x3D;mCnJajU4BKU&#x3D; </value>
        [DataMember(Name="ipiLegalTaxClass", EmitDefaultValue=false)]
        public string IpiLegalTaxClass { get; set; }
        /// <summary>
        /// When exempt, taxable with zero, suspended, not taxable, this field holds the official code number
        /// </summary>
        /// <value>When exempt, taxable with zero, suspended, not taxable, this field holds the official code number</value>
        [DataMember(Name="pisExemptLegalReasonCode", EmitDefaultValue=false)]
        public string PisExemptLegalReasonCode { get; set; }
        /// <summary>
        /// When specifi reason, this field has the description
        /// </summary>
        /// <value>When specifi reason, this field has the description</value>
        [DataMember(Name="pisExemptLegalReason", EmitDefaultValue=false)]
        public string PisExemptLegalReason { get; set; }
        /// <summary>
        /// When exempt, taxable with zero, suspended, not taxable, this field holds the official code number
        /// </summary>
        /// <value>When exempt, taxable with zero, suspended, not taxable, this field holds the official code number</value>
        [DataMember(Name="cofinsExemptLegalReasonCode", EmitDefaultValue=false)]
        public string CofinsExemptLegalReasonCode { get; set; }
        /// <summary>
        /// When specifi reason, this field has the description
        /// </summary>
        /// <value>When specifi reason, this field has the description</value>
        [DataMember(Name="cofinsExemptLegalReason", EmitDefaultValue=false)]
        public string CofinsExemptLegalReason { get; set; }
        /// <summary>
        /// Inform that the process allow IPI credit to Input process
        /// </summary>
        /// <value>Inform that the process allow IPI credit to Input process</value>
        [DataMember(Name="allowIPIcreditWhenInGoing", EmitDefaultValue=false)]
        public bool? AllowIPIcreditWhenInGoing { get; set; }
        /// <summary>
        /// the map key is state code
        /// </summary>
        /// <value>the map key is state code</value>
        [DataMember(Name="icmsConf", EmitDefaultValue=false)]
        public List<IcmsTaxConf> IcmsConf { get; set; }
        /// <summary>
        /// Process name to Identify this configuration
        /// </summary>
        /// <value>Process name to Identify this configuration</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// inform that the configuration process overwrites the cfop configuration.
        /// </summary>
        /// <value>inform that the configuration process overwrites the cfop configuration.</value>
        [DataMember(Name="overWriteCFOP", EmitDefaultValue=false)]
        public bool? OverWriteCFOP { get; set; }
        /// <summary>
        /// Gets or Sets Cfops
        /// </summary>
        [DataMember(Name="cfops", EmitDefaultValue=false)]
        public List<CfopConf> Cfops { get; set; }
        /// <summary>
        /// Company ID
        /// </summary>
        /// <value>Company ID</value>
        [DataMember(Name="companyId", EmitDefaultValue=false)]
        public Guid? CompanyId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomProcessScenario {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  StockImpact: ").Append(StockImpact).Append("\n");
            sb.Append("  FinancialImpact: ").Append(FinancialImpact).Append("\n");
            sb.Append("  CstIPI: ").Append(CstIPI).Append("\n");
            sb.Append("  IpiLegalTaxClass: ").Append(IpiLegalTaxClass).Append("\n");
            sb.Append("  AccruablePISTaxation: ").Append(AccruablePISTaxation).Append("\n");
            sb.Append("  PisExemptLegalReasonCode: ").Append(PisExemptLegalReasonCode).Append("\n");
            sb.Append("  PisExemptLegalReason: ").Append(PisExemptLegalReason).Append("\n");
            sb.Append("  AccruableCOFINSTaxation: ").Append(AccruableCOFINSTaxation).Append("\n");
            sb.Append("  CofinsExemptLegalReasonCode: ").Append(CofinsExemptLegalReasonCode).Append("\n");
            sb.Append("  CofinsExemptLegalReason: ").Append(CofinsExemptLegalReason).Append("\n");
            sb.Append("  AllowIPIcreditWhenInGoing: ").Append(AllowIPIcreditWhenInGoing).Append("\n");
            sb.Append("  IcmsConf: ").Append(IcmsConf).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  WayType: ").Append(WayType).Append("\n");
            sb.Append("  Goal: ").Append(Goal).Append("\n");
            sb.Append("  OverWriteCFOP: ").Append(OverWriteCFOP).Append("\n");
            sb.Append("  Cfops: ").Append(Cfops).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CustomProcessScenario);
        }

        /// <summary>
        /// Returns true if CustomProcessScenario instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomProcessScenario to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomProcessScenario other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.StockImpact == other.StockImpact ||
                    this.StockImpact != null &&
                    this.StockImpact.Equals(other.StockImpact)
                ) && 
                (
                    this.FinancialImpact == other.FinancialImpact ||
                    this.FinancialImpact != null &&
                    this.FinancialImpact.Equals(other.FinancialImpact)
                ) && 
                (
                    this.CstIPI == other.CstIPI ||
                    this.CstIPI != null &&
                    this.CstIPI.Equals(other.CstIPI)
                ) && 
                (
                    this.IpiLegalTaxClass == other.IpiLegalTaxClass ||
                    this.IpiLegalTaxClass != null &&
                    this.IpiLegalTaxClass.Equals(other.IpiLegalTaxClass)
                ) && 
                (
                    this.AccruablePISTaxation == other.AccruablePISTaxation ||
                    this.AccruablePISTaxation != null &&
                    this.AccruablePISTaxation.Equals(other.AccruablePISTaxation)
                ) && 
                (
                    this.PisExemptLegalReasonCode == other.PisExemptLegalReasonCode ||
                    this.PisExemptLegalReasonCode != null &&
                    this.PisExemptLegalReasonCode.Equals(other.PisExemptLegalReasonCode)
                ) && 
                (
                    this.PisExemptLegalReason == other.PisExemptLegalReason ||
                    this.PisExemptLegalReason != null &&
                    this.PisExemptLegalReason.Equals(other.PisExemptLegalReason)
                ) && 
                (
                    this.AccruableCOFINSTaxation == other.AccruableCOFINSTaxation ||
                    this.AccruableCOFINSTaxation != null &&
                    this.AccruableCOFINSTaxation.Equals(other.AccruableCOFINSTaxation)
                ) && 
                (
                    this.CofinsExemptLegalReasonCode == other.CofinsExemptLegalReasonCode ||
                    this.CofinsExemptLegalReasonCode != null &&
                    this.CofinsExemptLegalReasonCode.Equals(other.CofinsExemptLegalReasonCode)
                ) && 
                (
                    this.CofinsExemptLegalReason == other.CofinsExemptLegalReason ||
                    this.CofinsExemptLegalReason != null &&
                    this.CofinsExemptLegalReason.Equals(other.CofinsExemptLegalReason)
                ) && 
                (
                    this.AllowIPIcreditWhenInGoing == other.AllowIPIcreditWhenInGoing ||
                    this.AllowIPIcreditWhenInGoing != null &&
                    this.AllowIPIcreditWhenInGoing.Equals(other.AllowIPIcreditWhenInGoing)
                ) && 
                (
                    this.IcmsConf == other.IcmsConf ||
                    this.IcmsConf != null &&
                    this.IcmsConf.SequenceEqual(other.IcmsConf)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.WayType == other.WayType ||
                    this.WayType != null &&
                    this.WayType.Equals(other.WayType)
                ) && 
                (
                    this.Goal == other.Goal ||
                    this.Goal != null &&
                    this.Goal.Equals(other.Goal)
                ) && 
                (
                    this.OverWriteCFOP == other.OverWriteCFOP ||
                    this.OverWriteCFOP != null &&
                    this.OverWriteCFOP.Equals(other.OverWriteCFOP)
                ) && 
                (
                    this.Cfops == other.Cfops ||
                    this.Cfops != null &&
                    this.Cfops.SequenceEqual(other.Cfops)
                ) && 
                (
                    this.CompanyId == other.CompanyId ||
                    this.CompanyId != null &&
                    this.CompanyId.Equals(other.CompanyId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.StockImpact != null)
                    hash = hash * 59 + this.StockImpact.GetHashCode();
                if (this.FinancialImpact != null)
                    hash = hash * 59 + this.FinancialImpact.GetHashCode();
                if (this.CstIPI != null)
                    hash = hash * 59 + this.CstIPI.GetHashCode();
                if (this.IpiLegalTaxClass != null)
                    hash = hash * 59 + this.IpiLegalTaxClass.GetHashCode();
                if (this.AccruablePISTaxation != null)
                    hash = hash * 59 + this.AccruablePISTaxation.GetHashCode();
                if (this.PisExemptLegalReasonCode != null)
                    hash = hash * 59 + this.PisExemptLegalReasonCode.GetHashCode();
                if (this.PisExemptLegalReason != null)
                    hash = hash * 59 + this.PisExemptLegalReason.GetHashCode();
                if (this.AccruableCOFINSTaxation != null)
                    hash = hash * 59 + this.AccruableCOFINSTaxation.GetHashCode();
                if (this.CofinsExemptLegalReasonCode != null)
                    hash = hash * 59 + this.CofinsExemptLegalReasonCode.GetHashCode();
                if (this.CofinsExemptLegalReason != null)
                    hash = hash * 59 + this.CofinsExemptLegalReason.GetHashCode();
                if (this.AllowIPIcreditWhenInGoing != null)
                    hash = hash * 59 + this.AllowIPIcreditWhenInGoing.GetHashCode();
                if (this.IcmsConf != null)
                    hash = hash * 59 + this.IcmsConf.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.WayType != null)
                    hash = hash * 59 + this.WayType.GetHashCode();
                if (this.Goal != null)
                    hash = hash * 59 + this.Goal.GetHashCode();
                if (this.OverWriteCFOP != null)
                    hash = hash * 59 + this.OverWriteCFOP.GetHashCode();
                if (this.Cfops != null)
                    hash = hash * 59 + this.Cfops.GetHashCode();
                if (this.CompanyId != null)
                    hash = hash * 59 + this.CompanyId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Code (string) maxLength
            if(this.Code != null && this.Code.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Code, length must be less than 60.", new [] { "Code" });
            }

            // PisExemptLegalReasonCode (string) maxLength
            if(this.PisExemptLegalReasonCode != null && this.PisExemptLegalReasonCode.Length > 3)
            {
                yield return new ValidationResult("Invalid value for PisExemptLegalReasonCode, length must be less than 3.", new [] { "PisExemptLegalReasonCode" });
            }

            // PisExemptLegalReason (string) maxLength
            if(this.PisExemptLegalReason != null && this.PisExemptLegalReason.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for PisExemptLegalReason, length must be less than 1024.", new [] { "PisExemptLegalReason" });
            }

            // CofinsExemptLegalReasonCode (string) maxLength
            if(this.CofinsExemptLegalReasonCode != null && this.CofinsExemptLegalReasonCode.Length > 3)
            {
                yield return new ValidationResult("Invalid value for CofinsExemptLegalReasonCode, length must be less than 3.", new [] { "CofinsExemptLegalReasonCode" });
            }

            // CofinsExemptLegalReason (string) maxLength
            if(this.CofinsExemptLegalReason != null && this.CofinsExemptLegalReason.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for CofinsExemptLegalReason, length must be less than 1024.", new [] { "CofinsExemptLegalReason" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 60.", new [] { "Name" });
            }

            yield break;
        }
    }

}
