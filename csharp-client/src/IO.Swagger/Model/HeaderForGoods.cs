/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HeaderForGoods
    /// </summary>
    [DataContract]
    public partial class HeaderForGoods :  IEquatable<HeaderForGoods>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageTypeEnum
        {
            
            /// <summary>
            /// Enum Goods for "goods"
            /// </summary>
            [EnumMember(Value = "goods")]
            Goods
        }

        /// <summary>
        /// This string indicates the type of transaction for which tax should be calculated.
        /// </summary>
        /// <value>This string indicates the type of transaction for which tax should be calculated.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionTypeEnum
        {
            
            /// <summary>
            /// Enum Sales for "Sales"
            /// </summary>
            [EnumMember(Value = "Sales")]
            Sales,
            
            /// <summary>
            /// Enum Purchase for "Purchase"
            /// </summary>
            [EnumMember(Value = "Purchase")]
            Purchase,
            
            /// <summary>
            /// Enum SalesReturn for "SalesReturn"
            /// </summary>
            [EnumMember(Value = "SalesReturn")]
            SalesReturn,
            
            /// <summary>
            /// Enum PurchaseReturn for "PurchaseReturn"
            /// </summary>
            [EnumMember(Value = "PurchaseReturn")]
            PurchaseReturn,
            
            /// <summary>
            /// Enum TransferReturn for "TransferReturn"
            /// </summary>
            [EnumMember(Value = "TransferReturn")]
            TransferReturn,
            
            /// <summary>
            /// Enum Shipping for "Shipping"
            /// </summary>
            [EnumMember(Value = "Shipping")]
            Shipping,
            
            /// <summary>
            /// Enum ShippingReturn for "ShippingReturn"
            /// </summary>
            [EnumMember(Value = "ShippingReturn")]
            ShippingReturn,
            
            /// <summary>
            /// Enum Transfer for "Transfer"
            /// </summary>
            [EnumMember(Value = "Transfer")]
            Transfer,
            
            /// <summary>
            /// Enum ReceiptAdjustment for "ReceiptAdjustment"
            /// </summary>
            [EnumMember(Value = "ReceiptAdjustment")]
            ReceiptAdjustment,
            
            /// <summary>
            /// Enum TransferAdjustment for "TransferAdjustment"
            /// </summary>
            [EnumMember(Value = "TransferAdjustment")]
            TransferAdjustment
        }

        /// <summary>
        /// This string indicates the type of transaction for which tax should be calculated. - '01' # Nota Fiscal 1/1A - '1B' # Nota Fiscal Avulsa - '02' # Nota Fiscal de Venda a-Consumidor - '2D' # Cupom Fiscal - '2E' # Cupom Fiscal-Bilhete de Passagem - '04' # Nota Fiscal de Produtor - '06' # Nota Fiscal/Conta de Energia Elétrica - '07' # Nota Fiscal de Serviço de Transporte - '08' # Conhecimento de Transporte Rodoviário de-Cargas - '8B' # Conhecimento de Transporte de-Cargas Avulso - '09' # Conhecimento de Transporte Aquaviário de-Cargas - '10' # Conhecimento Aéreo - '11' # Conhecimento de Transporte Ferroviário de-Cargas - '13' # Bilhete de Passagem Rodoviário - '14' # Bilhete de Passagem Aquaviário - '15' # Bilhete de Passagem e-Nota de-Bagagem - '16' # Bilhete de Passagem Ferroviário - '18' # Resumo de Movimento Diário - '21' # Nota Fiscal de Serviço de-Comunicação - '22' # Nota Fiscal de Serviço de Telecomunicação - '26' # Conhecimento de Transporte Multimodal de-Cargas - '27' # Nota Fiscal De Transporte Ferroviário De-Carga - '28' # Nota Fiscal/Conta de Fornecimento de Gás-Canalizado - '29' # Nota Fiscal/Conta de Fornecimento de Água-Canalizada - '55' # Nota Fiscal Eletrônica (NF-e) - '57' # Conhecimento de Transporte Eletrônico (CT-e) - '59' # Cupom Fiscal Eletrônico (CF-e-SAT) - '60' # Cupom Fiscal Eletrônico (CF-e-ECF) - '65' # Nota Fiscal Eletrônica ao-Consumidor Final (NFC-e) 
        /// </summary>
        /// <value>This string indicates the type of transaction for which tax should be calculated. - '01' # Nota Fiscal 1/1A - '1B' # Nota Fiscal Avulsa - '02' # Nota Fiscal de Venda a-Consumidor - '2D' # Cupom Fiscal - '2E' # Cupom Fiscal-Bilhete de Passagem - '04' # Nota Fiscal de Produtor - '06' # Nota Fiscal/Conta de Energia Elétrica - '07' # Nota Fiscal de Serviço de Transporte - '08' # Conhecimento de Transporte Rodoviário de-Cargas - '8B' # Conhecimento de Transporte de-Cargas Avulso - '09' # Conhecimento de Transporte Aquaviário de-Cargas - '10' # Conhecimento Aéreo - '11' # Conhecimento de Transporte Ferroviário de-Cargas - '13' # Bilhete de Passagem Rodoviário - '14' # Bilhete de Passagem Aquaviário - '15' # Bilhete de Passagem e-Nota de-Bagagem - '16' # Bilhete de Passagem Ferroviário - '18' # Resumo de Movimento Diário - '21' # Nota Fiscal de Serviço de-Comunicação - '22' # Nota Fiscal de Serviço de Telecomunicação - '26' # Conhecimento de Transporte Multimodal de-Cargas - '27' # Nota Fiscal De Transporte Ferroviário De-Carga - '28' # Nota Fiscal/Conta de Fornecimento de Gás-Canalizado - '29' # Nota Fiscal/Conta de Fornecimento de Água-Canalizada - '55' # Nota Fiscal Eletrônica (NF-e) - '57' # Conhecimento de Transporte Eletrônico (CT-e) - '59' # Cupom Fiscal Eletrônico (CF-e-SAT) - '60' # Cupom Fiscal Eletrônico (CF-e-ECF) - '65' # Nota Fiscal Eletrônica ao-Consumidor Final (NFC-e) </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionModelEnum
        {
            
            /// <summary>
            /// Enum _01 for "01"
            /// </summary>
            [EnumMember(Value = "01")]
            _01,
            
            /// <summary>
            /// Enum _1B for "1B"
            /// </summary>
            [EnumMember(Value = "1B")]
            _1B,
            
            /// <summary>
            /// Enum _02 for "02"
            /// </summary>
            [EnumMember(Value = "02")]
            _02,
            
            /// <summary>
            /// Enum _2D for "2D"
            /// </summary>
            [EnumMember(Value = "2D")]
            _2D,
            
            /// <summary>
            /// Enum _2E for "2E"
            /// </summary>
            [EnumMember(Value = "2E")]
            _2E,
            
            /// <summary>
            /// Enum _04 for "04"
            /// </summary>
            [EnumMember(Value = "04")]
            _04,
            
            /// <summary>
            /// Enum _06 for "06"
            /// </summary>
            [EnumMember(Value = "06")]
            _06,
            
            /// <summary>
            /// Enum _07 for "07"
            /// </summary>
            [EnumMember(Value = "07")]
            _07,
            
            /// <summary>
            /// Enum _08 for "08"
            /// </summary>
            [EnumMember(Value = "08")]
            _08,
            
            /// <summary>
            /// Enum _8B for "8B"
            /// </summary>
            [EnumMember(Value = "8B")]
            _8B,
            
            /// <summary>
            /// Enum _09 for "09"
            /// </summary>
            [EnumMember(Value = "09")]
            _09,
            
            /// <summary>
            /// Enum _10 for "10"
            /// </summary>
            [EnumMember(Value = "10")]
            _10,
            
            /// <summary>
            /// Enum _11 for "11"
            /// </summary>
            [EnumMember(Value = "11")]
            _11,
            
            /// <summary>
            /// Enum _13 for "13"
            /// </summary>
            [EnumMember(Value = "13")]
            _13,
            
            /// <summary>
            /// Enum _14 for "14"
            /// </summary>
            [EnumMember(Value = "14")]
            _14,
            
            /// <summary>
            /// Enum _15 for "15"
            /// </summary>
            [EnumMember(Value = "15")]
            _15,
            
            /// <summary>
            /// Enum _16 for "16"
            /// </summary>
            [EnumMember(Value = "16")]
            _16,
            
            /// <summary>
            /// Enum _18 for "18"
            /// </summary>
            [EnumMember(Value = "18")]
            _18,
            
            /// <summary>
            /// Enum _21 for "21"
            /// </summary>
            [EnumMember(Value = "21")]
            _21,
            
            /// <summary>
            /// Enum _22 for "22"
            /// </summary>
            [EnumMember(Value = "22")]
            _22,
            
            /// <summary>
            /// Enum _26 for "26"
            /// </summary>
            [EnumMember(Value = "26")]
            _26,
            
            /// <summary>
            /// Enum _27 for "27"
            /// </summary>
            [EnumMember(Value = "27")]
            _27,
            
            /// <summary>
            /// Enum _28 for "28"
            /// </summary>
            [EnumMember(Value = "28")]
            _28,
            
            /// <summary>
            /// Enum _29 for "29"
            /// </summary>
            [EnumMember(Value = "29")]
            _29,
            
            /// <summary>
            /// Enum _55 for "55"
            /// </summary>
            [EnumMember(Value = "55")]
            _55,
            
            /// <summary>
            /// Enum _57 for "57"
            /// </summary>
            [EnumMember(Value = "57")]
            _57,
            
            /// <summary>
            /// Enum _59 for "59"
            /// </summary>
            [EnumMember(Value = "59")]
            _59,
            
            /// <summary>
            /// Enum _60 for "60"
            /// </summary>
            [EnumMember(Value = "60")]
            _60,
            
            /// <summary>
            /// Enum _65 for "65"
            /// </summary>
            [EnumMember(Value = "65")]
            _65
        }

        /// <summary>
        /// Gets or Sets EDocCreatorType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EDocCreatorTypeEnum
        {
            
            /// <summary>
            /// Enum Self for "self"
            /// </summary>
            [EnumMember(Value = "self")]
            Self,
            
            /// <summary>
            /// Enum Other for "other"
            /// </summary>
            [EnumMember(Value = "other")]
            Other
        }

        /// <summary>
        /// currency code
        /// </summary>
        /// <value>currency code</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            
            /// <summary>
            /// Enum BRL for "BRL"
            /// </summary>
            [EnumMember(Value = "BRL")]
            BRL
        }

        /// <summary>
        /// how the document will be printed - '0' # without DANFE; - '1' # DANFe Letter; - '2' # DANFe Landscape; - '3' # DANFe Simplified; - '4' # DANFe NFC-e; - '5' # DANFe NFC-e e-mail 
        /// </summary>
        /// <value>how the document will be printed - '0' # without DANFE; - '1' # DANFe Letter; - '2' # DANFe Landscape; - '3' # DANFe Simplified; - '4' # DANFe NFC-e; - '5' # DANFe NFC-e e-mail </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TpImpEnum
        {
            
            /// <summary>
            /// Enum _0 for "0"
            /// </summary>
            [EnumMember(Value = "0")]
            _0,
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1,
            
            /// <summary>
            /// Enum _2 for "2"
            /// </summary>
            [EnumMember(Value = "2")]
            _2,
            
            /// <summary>
            /// Enum _3 for "3"
            /// </summary>
            [EnumMember(Value = "3")]
            _3,
            
            /// <summary>
            /// Enum _4 for "4"
            /// </summary>
            [EnumMember(Value = "4")]
            _4,
            
            /// <summary>
            /// Enum _5 for "5"
            /// </summary>
            [EnumMember(Value = "5")]
            _5
        }

        /// <summary>
        /// Presence indicator - '0' # Not applicable - '1' # Presential; - '2' # Remote, internet; - '3' # Remote, phone; - '4' # NFC-e home delivery; - '9' # Remote, others 
        /// </summary>
        /// <value>Presence indicator - '0' # Not applicable - '1' # Presential; - '2' # Remote, internet; - '3' # Remote, phone; - '4' # NFC-e home delivery; - '9' # Remote, others </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IndPresEnum
        {
            
            /// <summary>
            /// Enum _0 for "0"
            /// </summary>
            [EnumMember(Value = "0")]
            _0,
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1,
            
            /// <summary>
            /// Enum _2 for "2"
            /// </summary>
            [EnumMember(Value = "2")]
            _2,
            
            /// <summary>
            /// Enum _3 for "3"
            /// </summary>
            [EnumMember(Value = "3")]
            _3,
            
            /// <summary>
            /// Enum _4 for "4"
            /// </summary>
            [EnumMember(Value = "4")]
            _4,
            
            /// <summary>
            /// Enum _9 for "9"
            /// </summary>
            [EnumMember(Value = "9")]
            _9
        }

        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [DataMember(Name="messageType", EmitDefaultValue=false)]
        public MessageTypeEnum? MessageType { get; set; }
        /// <summary>
        /// This string indicates the type of transaction for which tax should be calculated.
        /// </summary>
        /// <value>This string indicates the type of transaction for which tax should be calculated.</value>
        [DataMember(Name="transactionType", EmitDefaultValue=false)]
        public TransactionTypeEnum? TransactionType { get; set; }
        /// <summary>
        /// This string indicates the type of transaction for which tax should be calculated. - '01' # Nota Fiscal 1/1A - '1B' # Nota Fiscal Avulsa - '02' # Nota Fiscal de Venda a-Consumidor - '2D' # Cupom Fiscal - '2E' # Cupom Fiscal-Bilhete de Passagem - '04' # Nota Fiscal de Produtor - '06' # Nota Fiscal/Conta de Energia Elétrica - '07' # Nota Fiscal de Serviço de Transporte - '08' # Conhecimento de Transporte Rodoviário de-Cargas - '8B' # Conhecimento de Transporte de-Cargas Avulso - '09' # Conhecimento de Transporte Aquaviário de-Cargas - '10' # Conhecimento Aéreo - '11' # Conhecimento de Transporte Ferroviário de-Cargas - '13' # Bilhete de Passagem Rodoviário - '14' # Bilhete de Passagem Aquaviário - '15' # Bilhete de Passagem e-Nota de-Bagagem - '16' # Bilhete de Passagem Ferroviário - '18' # Resumo de Movimento Diário - '21' # Nota Fiscal de Serviço de-Comunicação - '22' # Nota Fiscal de Serviço de Telecomunicação - '26' # Conhecimento de Transporte Multimodal de-Cargas - '27' # Nota Fiscal De Transporte Ferroviário De-Carga - '28' # Nota Fiscal/Conta de Fornecimento de Gás-Canalizado - '29' # Nota Fiscal/Conta de Fornecimento de Água-Canalizada - '55' # Nota Fiscal Eletrônica (NF-e) - '57' # Conhecimento de Transporte Eletrônico (CT-e) - '59' # Cupom Fiscal Eletrônico (CF-e-SAT) - '60' # Cupom Fiscal Eletrônico (CF-e-ECF) - '65' # Nota Fiscal Eletrônica ao-Consumidor Final (NFC-e) 
        /// </summary>
        /// <value>This string indicates the type of transaction for which tax should be calculated. - '01' # Nota Fiscal 1/1A - '1B' # Nota Fiscal Avulsa - '02' # Nota Fiscal de Venda a-Consumidor - '2D' # Cupom Fiscal - '2E' # Cupom Fiscal-Bilhete de Passagem - '04' # Nota Fiscal de Produtor - '06' # Nota Fiscal/Conta de Energia Elétrica - '07' # Nota Fiscal de Serviço de Transporte - '08' # Conhecimento de Transporte Rodoviário de-Cargas - '8B' # Conhecimento de Transporte de-Cargas Avulso - '09' # Conhecimento de Transporte Aquaviário de-Cargas - '10' # Conhecimento Aéreo - '11' # Conhecimento de Transporte Ferroviário de-Cargas - '13' # Bilhete de Passagem Rodoviário - '14' # Bilhete de Passagem Aquaviário - '15' # Bilhete de Passagem e-Nota de-Bagagem - '16' # Bilhete de Passagem Ferroviário - '18' # Resumo de Movimento Diário - '21' # Nota Fiscal de Serviço de-Comunicação - '22' # Nota Fiscal de Serviço de Telecomunicação - '26' # Conhecimento de Transporte Multimodal de-Cargas - '27' # Nota Fiscal De Transporte Ferroviário De-Carga - '28' # Nota Fiscal/Conta de Fornecimento de Gás-Canalizado - '29' # Nota Fiscal/Conta de Fornecimento de Água-Canalizada - '55' # Nota Fiscal Eletrônica (NF-e) - '57' # Conhecimento de Transporte Eletrônico (CT-e) - '59' # Cupom Fiscal Eletrônico (CF-e-SAT) - '60' # Cupom Fiscal Eletrônico (CF-e-ECF) - '65' # Nota Fiscal Eletrônica ao-Consumidor Final (NFC-e) </value>
        [DataMember(Name="transactionModel", EmitDefaultValue=false)]
        public TransactionModelEnum? TransactionModel { get; set; }
        /// <summary>
        /// Gets or Sets EDocCreatorType
        /// </summary>
        [DataMember(Name="eDocCreatorType", EmitDefaultValue=false)]
        public EDocCreatorTypeEnum? EDocCreatorType { get; set; }
        /// <summary>
        /// currency code
        /// </summary>
        /// <value>currency code</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// how the document will be printed - '0' # without DANFE; - '1' # DANFe Letter; - '2' # DANFe Landscape; - '3' # DANFe Simplified; - '4' # DANFe NFC-e; - '5' # DANFe NFC-e e-mail 
        /// </summary>
        /// <value>how the document will be printed - '0' # without DANFE; - '1' # DANFe Letter; - '2' # DANFe Landscape; - '3' # DANFe Simplified; - '4' # DANFe NFC-e; - '5' # DANFe NFC-e e-mail </value>
        [DataMember(Name="tpImp", EmitDefaultValue=false)]
        public TpImpEnum? TpImp { get; set; }
        /// <summary>
        /// Presence indicator - '0' # Not applicable - '1' # Presential; - '2' # Remote, internet; - '3' # Remote, phone; - '4' # NFC-e home delivery; - '9' # Remote, others 
        /// </summary>
        /// <value>Presence indicator - '0' # Not applicable - '1' # Presential; - '2' # Remote, internet; - '3' # Remote, phone; - '4' # NFC-e home delivery; - '9' # Remote, others </value>
        [DataMember(Name="indPres", EmitDefaultValue=false)]
        public IndPresEnum? IndPres { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HeaderForGoods" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HeaderForGoods() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HeaderForGoods" /> class.
        /// </summary>
        /// <param name="MessageType">MessageType (default to &quot;goods&quot;).</param>
        /// <param name="AccountId">This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode on the next line. (required).</param>
        /// <param name="CompanyCode">string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company (required).</param>
        /// <param name="DocumentCode">This string is a code maintained by the client application to uniquely identify a document in the client&#39;s systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc. When has this field, the transaction will be stored.</param>
        /// <param name="Participants">Participants.</param>
        /// <param name="NfAccessKey">This is the public NF id. With this number is possible get invoice information directly from government..</param>
        /// <param name="NfceQrCode">qr code printed on DANFE;.</param>
        /// <param name="TransactionType">This string indicates the type of transaction for which tax should be calculated. (required).</param>
        /// <param name="TransactionModel">This string indicates the type of transaction for which tax should be calculated. - &#39;01&#39; # Nota Fiscal 1/1A - &#39;1B&#39; # Nota Fiscal Avulsa - &#39;02&#39; # Nota Fiscal de Venda a-Consumidor - &#39;2D&#39; # Cupom Fiscal - &#39;2E&#39; # Cupom Fiscal-Bilhete de Passagem - &#39;04&#39; # Nota Fiscal de Produtor - &#39;06&#39; # Nota Fiscal/Conta de Energia Elétrica - &#39;07&#39; # Nota Fiscal de Serviço de Transporte - &#39;08&#39; # Conhecimento de Transporte Rodoviário de-Cargas - &#39;8B&#39; # Conhecimento de Transporte de-Cargas Avulso - &#39;09&#39; # Conhecimento de Transporte Aquaviário de-Cargas - &#39;10&#39; # Conhecimento Aéreo - &#39;11&#39; # Conhecimento de Transporte Ferroviário de-Cargas - &#39;13&#39; # Bilhete de Passagem Rodoviário - &#39;14&#39; # Bilhete de Passagem Aquaviário - &#39;15&#39; # Bilhete de Passagem e-Nota de-Bagagem - &#39;16&#39; # Bilhete de Passagem Ferroviário - &#39;18&#39; # Resumo de Movimento Diário - &#39;21&#39; # Nota Fiscal de Serviço de-Comunicação - &#39;22&#39; # Nota Fiscal de Serviço de Telecomunicação - &#39;26&#39; # Conhecimento de Transporte Multimodal de-Cargas - &#39;27&#39; # Nota Fiscal De Transporte Ferroviário De-Carga - &#39;28&#39; # Nota Fiscal/Conta de Fornecimento de Gás-Canalizado - &#39;29&#39; # Nota Fiscal/Conta de Fornecimento de Água-Canalizada - &#39;55&#39; # Nota Fiscal Eletrônica (NF-e) - &#39;57&#39; # Conhecimento de Transporte Eletrônico (CT-e) - &#39;59&#39; # Cupom Fiscal Eletrônico (CF-e-SAT) - &#39;60&#39; # Cupom Fiscal Eletrônico (CF-e-ECF) - &#39;65&#39; # Nota Fiscal Eletrônica ao-Consumidor Final (NFC-e) .</param>
        /// <param name="TransactionClass">Natureza da Opreração - &#39;Describe kind of this transaction, summary.</param>
        /// <param name="EDocCreatorType">EDocCreatorType (required).</param>
        /// <param name="EDocCreatorPerspective">This Flag is used only when eDocCreatorType is other and the return show Taxes using eDocCreator perspective or self perspective. (default to true).</param>
        /// <param name="EntityCode">This string is a code maintained by the client application and recorded in CUP to uniquely identify the party with whom the company (identified by companyCode) is transacting. It is unique within the context of a Company..</param>
        /// <param name="Currency">currency code.</param>
        /// <param name="CompanyLocation">This string contains a previously configured company code which may also have codes needed for tax return purposes. These codes are maintained through the customer portal. Main company address identity (required).</param>
        /// <param name="TransactionDate">This string is the transaction date in ISO 8601 format, create transaction date.</param>
        /// <param name="ShippingDate">This string is the transaction date in ISO 8601 format, when products were shipped, can be empty or absent.</param>
        /// <param name="AdditionalInfo">AdditionalInfo.</param>
        /// <param name="TpImp">how the document will be printed - &#39;0&#39; # without DANFE; - &#39;1&#39; # DANFe Letter; - &#39;2&#39; # DANFe Landscape; - &#39;3&#39; # DANFe Simplified; - &#39;4&#39; # DANFe NFC-e; - &#39;5&#39; # DANFe NFC-e e-mail .</param>
        /// <param name="IdDest">This indicator inform transaction target place, when is AUTOMATIC the company address and entity address are analyzed to identify type of transaction target place 1- same state; 2 - interstate; 3-with exterior. Exist some cases where is necessary force this situation like when buyer from another state buy something in loco, the address are from different states, but transaction no.  Identificador de Local de destino da operação, na opção AUTOMATIC endereços da Companhia e da entidade destino são analisados para saber se é uma operação dentro do mesmo estado, interestadual ou com o exterior. Há situações onde é necessário forçar este indicador como por exemplo  Quando uma pessoa com endereço em outro estado, compra uma mercadoria de forma presencial, é uma operação interna apesar dos endereços dos envolvidos estarem em estados distintos. - 0 # AUTOMATIC - DEFAULT - 1 # Interna; - 2 # Interestadual; - 3 # Exterior) .</param>
        /// <param name="IndPres">Presence indicator - &#39;0&#39; # Not applicable - &#39;1&#39; # Presential; - &#39;2&#39; # Remote, internet; - &#39;3&#39; # Remote, phone; - &#39;4&#39; # NFC-e home delivery; - &#39;9&#39; # Remote, others .</param>
        /// <param name="InvoiceNumber">Invoice number, sequential unique by invoice serial (Número da nota fiscal).</param>
        /// <param name="InvoiceSerial">Invoice number, sequential unique by invoice serial (Número da nota fiscal) .</param>
        /// <param name="DefaultLocations">DefaultLocations.</param>
        /// <param name="Transport">Shipment.</param>
        /// <param name="NfRef">Transactions or other invoices referenced.</param>
        /// <param name="Payment">Payment.</param>
        /// <param name="PurchaseInfo">PurchaseInfo.</param>
        /// <param name="Export">Export.</param>
        public HeaderForGoods(MessageTypeEnum? MessageType = "goods", string AccountId = default(string), string CompanyCode = default(string), string DocumentCode = default(string), HeaderForGoodsParticipants Participants = default(HeaderForGoodsParticipants), string NfAccessKey = default(string), string NfceQrCode = default(string), TransactionTypeEnum? TransactionType = default(TransactionTypeEnum?), TransactionModelEnum? TransactionModel = default(TransactionModelEnum?), string TransactionClass = default(string), EDocCreatorTypeEnum? EDocCreatorType = default(EDocCreatorTypeEnum?), bool? EDocCreatorPerspective = true, string EntityCode = default(string), CurrencyEnum? Currency = default(CurrencyEnum?), string CompanyLocation = default(string), string TransactionDate = default(string), string ShippingDate = default(string), AdditionalInformation AdditionalInfo = default(AdditionalInformation), TpImpEnum? TpImp = default(TpImpEnum?), int? IdDest = default(int?), IndPresEnum? IndPres = default(IndPresEnum?), int? InvoiceNumber = default(int?), int? InvoiceSerial = default(int?), DefaultLocations DefaultLocations = default(DefaultLocations), Transport Transport = default(Transport), List<NRef> NfRef = default(List<NRef>), Payment Payment = default(Payment), PurchaseInfo PurchaseInfo = default(PurchaseInfo), ExportInfo Export = default(ExportInfo))
        {
            // to ensure "AccountId" is required (not null)
            if (AccountId == null)
            {
                throw new InvalidDataException("AccountId is a required property for HeaderForGoods and cannot be null");
            }
            else
            {
                this.AccountId = AccountId;
            }
            // to ensure "CompanyCode" is required (not null)
            if (CompanyCode == null)
            {
                throw new InvalidDataException("CompanyCode is a required property for HeaderForGoods and cannot be null");
            }
            else
            {
                this.CompanyCode = CompanyCode;
            }
            // to ensure "TransactionType" is required (not null)
            if (TransactionType == null)
            {
                throw new InvalidDataException("TransactionType is a required property for HeaderForGoods and cannot be null");
            }
            else
            {
                this.TransactionType = TransactionType;
            }
            // to ensure "EDocCreatorType" is required (not null)
            if (EDocCreatorType == null)
            {
                throw new InvalidDataException("EDocCreatorType is a required property for HeaderForGoods and cannot be null");
            }
            else
            {
                this.EDocCreatorType = EDocCreatorType;
            }
            // to ensure "CompanyLocation" is required (not null)
            if (CompanyLocation == null)
            {
                throw new InvalidDataException("CompanyLocation is a required property for HeaderForGoods and cannot be null");
            }
            else
            {
                this.CompanyLocation = CompanyLocation;
            }
            // use default value if no "MessageType" provided
            if (MessageType == null)
            {
                this.MessageType = "goods";
            }
            else
            {
                this.MessageType = MessageType;
            }
            this.DocumentCode = DocumentCode;
            this.Participants = Participants;
            this.NfAccessKey = NfAccessKey;
            this.NfceQrCode = NfceQrCode;
            this.TransactionModel = TransactionModel;
            this.TransactionClass = TransactionClass;
            // use default value if no "EDocCreatorPerspective" provided
            if (EDocCreatorPerspective == null)
            {
                this.EDocCreatorPerspective = true;
            }
            else
            {
                this.EDocCreatorPerspective = EDocCreatorPerspective;
            }
            this.EntityCode = EntityCode;
            this.Currency = Currency;
            this.TransactionDate = TransactionDate;
            this.ShippingDate = ShippingDate;
            this.AdditionalInfo = AdditionalInfo;
            this.TpImp = TpImp;
            this.IdDest = IdDest;
            this.IndPres = IndPres;
            this.InvoiceNumber = InvoiceNumber;
            this.InvoiceSerial = InvoiceSerial;
            this.DefaultLocations = DefaultLocations;
            this.Transport = Transport;
            this.NfRef = NfRef;
            this.Payment = Payment;
            this.PurchaseInfo = PurchaseInfo;
            this.Export = Export;
        }
        
        /// <summary>
        /// This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode on the next line.
        /// </summary>
        /// <value>This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode on the next line.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }
        /// <summary>
        /// string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company
        /// </summary>
        /// <value>string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company</value>
        [DataMember(Name="companyCode", EmitDefaultValue=false)]
        public string CompanyCode { get; set; }
        /// <summary>
        /// This string is a code maintained by the client application to uniquely identify a document in the client&#39;s systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc. When has this field, the transaction will be stored
        /// </summary>
        /// <value>This string is a code maintained by the client application to uniquely identify a document in the client&#39;s systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc. When has this field, the transaction will be stored</value>
        [DataMember(Name="documentCode", EmitDefaultValue=false)]
        public string DocumentCode { get; set; }
        /// <summary>
        /// Gets or Sets Participants
        /// </summary>
        [DataMember(Name="participants", EmitDefaultValue=false)]
        public HeaderForGoodsParticipants Participants { get; set; }
        /// <summary>
        /// This is the public NF id. With this number is possible get invoice information directly from government.
        /// </summary>
        /// <value>This is the public NF id. With this number is possible get invoice information directly from government.</value>
        [DataMember(Name="nfAccessKey", EmitDefaultValue=false)]
        public string NfAccessKey { get; set; }
        /// <summary>
        /// qr code printed on DANFE;
        /// </summary>
        /// <value>qr code printed on DANFE;</value>
        [DataMember(Name="nfceQrCode", EmitDefaultValue=false)]
        public string NfceQrCode { get; set; }
        /// <summary>
        /// Natureza da Opreração - &#39;Describe kind of this transaction, summary
        /// </summary>
        /// <value>Natureza da Opreração - &#39;Describe kind of this transaction, summary</value>
        [DataMember(Name="transactionClass", EmitDefaultValue=false)]
        public string TransactionClass { get; set; }
        /// <summary>
        /// This Flag is used only when eDocCreatorType is other and the return show Taxes using eDocCreator perspective or self perspective.
        /// </summary>
        /// <value>This Flag is used only when eDocCreatorType is other and the return show Taxes using eDocCreator perspective or self perspective.</value>
        [DataMember(Name="eDocCreatorPerspective", EmitDefaultValue=false)]
        public bool? EDocCreatorPerspective { get; set; }
        /// <summary>
        /// This string is a code maintained by the client application and recorded in CUP to uniquely identify the party with whom the company (identified by companyCode) is transacting. It is unique within the context of a Company.
        /// </summary>
        /// <value>This string is a code maintained by the client application and recorded in CUP to uniquely identify the party with whom the company (identified by companyCode) is transacting. It is unique within the context of a Company.</value>
        [DataMember(Name="entityCode", EmitDefaultValue=false)]
        public string EntityCode { get; set; }
        /// <summary>
        /// This string contains a previously configured company code which may also have codes needed for tax return purposes. These codes are maintained through the customer portal. Main company address identity
        /// </summary>
        /// <value>This string contains a previously configured company code which may also have codes needed for tax return purposes. These codes are maintained through the customer portal. Main company address identity</value>
        [DataMember(Name="companyLocation", EmitDefaultValue=false)]
        public string CompanyLocation { get; set; }
        /// <summary>
        /// This string is the transaction date in ISO 8601 format, create transaction date
        /// </summary>
        /// <value>This string is the transaction date in ISO 8601 format, create transaction date</value>
        [DataMember(Name="transactionDate", EmitDefaultValue=false)]
        public string TransactionDate { get; set; }
        /// <summary>
        /// This string is the transaction date in ISO 8601 format, when products were shipped, can be empty or absent
        /// </summary>
        /// <value>This string is the transaction date in ISO 8601 format, when products were shipped, can be empty or absent</value>
        [DataMember(Name="shippingDate", EmitDefaultValue=false)]
        public string ShippingDate { get; set; }
        /// <summary>
        /// Gets or Sets AdditionalInfo
        /// </summary>
        [DataMember(Name="additionalInfo", EmitDefaultValue=false)]
        public AdditionalInformation AdditionalInfo { get; set; }
        /// <summary>
        /// This indicator inform transaction target place, when is AUTOMATIC the company address and entity address are analyzed to identify type of transaction target place 1- same state; 2 - interstate; 3-with exterior. Exist some cases where is necessary force this situation like when buyer from another state buy something in loco, the address are from different states, but transaction no.  Identificador de Local de destino da operação, na opção AUTOMATIC endereços da Companhia e da entidade destino são analisados para saber se é uma operação dentro do mesmo estado, interestadual ou com o exterior. Há situações onde é necessário forçar este indicador como por exemplo  Quando uma pessoa com endereço em outro estado, compra uma mercadoria de forma presencial, é uma operação interna apesar dos endereços dos envolvidos estarem em estados distintos. - 0 # AUTOMATIC - DEFAULT - 1 # Interna; - 2 # Interestadual; - 3 # Exterior) 
        /// </summary>
        /// <value>This indicator inform transaction target place, when is AUTOMATIC the company address and entity address are analyzed to identify type of transaction target place 1- same state; 2 - interstate; 3-with exterior. Exist some cases where is necessary force this situation like when buyer from another state buy something in loco, the address are from different states, but transaction no.  Identificador de Local de destino da operação, na opção AUTOMATIC endereços da Companhia e da entidade destino são analisados para saber se é uma operação dentro do mesmo estado, interestadual ou com o exterior. Há situações onde é necessário forçar este indicador como por exemplo  Quando uma pessoa com endereço em outro estado, compra uma mercadoria de forma presencial, é uma operação interna apesar dos endereços dos envolvidos estarem em estados distintos. - 0 # AUTOMATIC - DEFAULT - 1 # Interna; - 2 # Interestadual; - 3 # Exterior) </value>
        [DataMember(Name="idDest", EmitDefaultValue=false)]
        public int? IdDest { get; set; }
        /// <summary>
        /// Invoice number, sequential unique by invoice serial (Número da nota fiscal)
        /// </summary>
        /// <value>Invoice number, sequential unique by invoice serial (Número da nota fiscal)</value>
        [DataMember(Name="invoiceNumber", EmitDefaultValue=false)]
        public int? InvoiceNumber { get; set; }
        /// <summary>
        /// Invoice number, sequential unique by invoice serial (Número da nota fiscal) 
        /// </summary>
        /// <value>Invoice number, sequential unique by invoice serial (Número da nota fiscal) </value>
        [DataMember(Name="invoiceSerial", EmitDefaultValue=false)]
        public int? InvoiceSerial { get; set; }
        /// <summary>
        /// Gets or Sets DefaultLocations
        /// </summary>
        [DataMember(Name="defaultLocations", EmitDefaultValue=false)]
        public DefaultLocations DefaultLocations { get; set; }
        /// <summary>
        /// Shipment
        /// </summary>
        /// <value>Shipment</value>
        [DataMember(Name="transport", EmitDefaultValue=false)]
        public Transport Transport { get; set; }
        /// <summary>
        /// Transactions or other invoices referenced
        /// </summary>
        /// <value>Transactions or other invoices referenced</value>
        [DataMember(Name="nfRef", EmitDefaultValue=false)]
        public List<NRef> NfRef { get; set; }
        /// <summary>
        /// Gets or Sets Payment
        /// </summary>
        [DataMember(Name="payment", EmitDefaultValue=false)]
        public Payment Payment { get; set; }
        /// <summary>
        /// Gets or Sets PurchaseInfo
        /// </summary>
        [DataMember(Name="purchaseInfo", EmitDefaultValue=false)]
        public PurchaseInfo PurchaseInfo { get; set; }
        /// <summary>
        /// Gets or Sets Export
        /// </summary>
        [DataMember(Name="export", EmitDefaultValue=false)]
        public ExportInfo Export { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HeaderForGoods {\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CompanyCode: ").Append(CompanyCode).Append("\n");
            sb.Append("  DocumentCode: ").Append(DocumentCode).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("  NfAccessKey: ").Append(NfAccessKey).Append("\n");
            sb.Append("  NfceQrCode: ").Append(NfceQrCode).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  TransactionModel: ").Append(TransactionModel).Append("\n");
            sb.Append("  TransactionClass: ").Append(TransactionClass).Append("\n");
            sb.Append("  EDocCreatorType: ").Append(EDocCreatorType).Append("\n");
            sb.Append("  EDocCreatorPerspective: ").Append(EDocCreatorPerspective).Append("\n");
            sb.Append("  EntityCode: ").Append(EntityCode).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CompanyLocation: ").Append(CompanyLocation).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  ShippingDate: ").Append(ShippingDate).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  TpImp: ").Append(TpImp).Append("\n");
            sb.Append("  IdDest: ").Append(IdDest).Append("\n");
            sb.Append("  IndPres: ").Append(IndPres).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  InvoiceSerial: ").Append(InvoiceSerial).Append("\n");
            sb.Append("  DefaultLocations: ").Append(DefaultLocations).Append("\n");
            sb.Append("  Transport: ").Append(Transport).Append("\n");
            sb.Append("  NfRef: ").Append(NfRef).Append("\n");
            sb.Append("  Payment: ").Append(Payment).Append("\n");
            sb.Append("  PurchaseInfo: ").Append(PurchaseInfo).Append("\n");
            sb.Append("  Export: ").Append(Export).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HeaderForGoods);
        }

        /// <summary>
        /// Returns true if HeaderForGoods instances are equal
        /// </summary>
        /// <param name="other">Instance of HeaderForGoods to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HeaderForGoods other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MessageType == other.MessageType ||
                    this.MessageType != null &&
                    this.MessageType.Equals(other.MessageType)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.CompanyCode == other.CompanyCode ||
                    this.CompanyCode != null &&
                    this.CompanyCode.Equals(other.CompanyCode)
                ) && 
                (
                    this.DocumentCode == other.DocumentCode ||
                    this.DocumentCode != null &&
                    this.DocumentCode.Equals(other.DocumentCode)
                ) && 
                (
                    this.Participants == other.Participants ||
                    this.Participants != null &&
                    this.Participants.Equals(other.Participants)
                ) && 
                (
                    this.NfAccessKey == other.NfAccessKey ||
                    this.NfAccessKey != null &&
                    this.NfAccessKey.Equals(other.NfAccessKey)
                ) && 
                (
                    this.NfceQrCode == other.NfceQrCode ||
                    this.NfceQrCode != null &&
                    this.NfceQrCode.Equals(other.NfceQrCode)
                ) && 
                (
                    this.TransactionType == other.TransactionType ||
                    this.TransactionType != null &&
                    this.TransactionType.Equals(other.TransactionType)
                ) && 
                (
                    this.TransactionModel == other.TransactionModel ||
                    this.TransactionModel != null &&
                    this.TransactionModel.Equals(other.TransactionModel)
                ) && 
                (
                    this.TransactionClass == other.TransactionClass ||
                    this.TransactionClass != null &&
                    this.TransactionClass.Equals(other.TransactionClass)
                ) && 
                (
                    this.EDocCreatorType == other.EDocCreatorType ||
                    this.EDocCreatorType != null &&
                    this.EDocCreatorType.Equals(other.EDocCreatorType)
                ) && 
                (
                    this.EDocCreatorPerspective == other.EDocCreatorPerspective ||
                    this.EDocCreatorPerspective != null &&
                    this.EDocCreatorPerspective.Equals(other.EDocCreatorPerspective)
                ) && 
                (
                    this.EntityCode == other.EntityCode ||
                    this.EntityCode != null &&
                    this.EntityCode.Equals(other.EntityCode)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.CompanyLocation == other.CompanyLocation ||
                    this.CompanyLocation != null &&
                    this.CompanyLocation.Equals(other.CompanyLocation)
                ) && 
                (
                    this.TransactionDate == other.TransactionDate ||
                    this.TransactionDate != null &&
                    this.TransactionDate.Equals(other.TransactionDate)
                ) && 
                (
                    this.ShippingDate == other.ShippingDate ||
                    this.ShippingDate != null &&
                    this.ShippingDate.Equals(other.ShippingDate)
                ) && 
                (
                    this.AdditionalInfo == other.AdditionalInfo ||
                    this.AdditionalInfo != null &&
                    this.AdditionalInfo.Equals(other.AdditionalInfo)
                ) && 
                (
                    this.TpImp == other.TpImp ||
                    this.TpImp != null &&
                    this.TpImp.Equals(other.TpImp)
                ) && 
                (
                    this.IdDest == other.IdDest ||
                    this.IdDest != null &&
                    this.IdDest.Equals(other.IdDest)
                ) && 
                (
                    this.IndPres == other.IndPres ||
                    this.IndPres != null &&
                    this.IndPres.Equals(other.IndPres)
                ) && 
                (
                    this.InvoiceNumber == other.InvoiceNumber ||
                    this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(other.InvoiceNumber)
                ) && 
                (
                    this.InvoiceSerial == other.InvoiceSerial ||
                    this.InvoiceSerial != null &&
                    this.InvoiceSerial.Equals(other.InvoiceSerial)
                ) && 
                (
                    this.DefaultLocations == other.DefaultLocations ||
                    this.DefaultLocations != null &&
                    this.DefaultLocations.Equals(other.DefaultLocations)
                ) && 
                (
                    this.Transport == other.Transport ||
                    this.Transport != null &&
                    this.Transport.Equals(other.Transport)
                ) && 
                (
                    this.NfRef == other.NfRef ||
                    this.NfRef != null &&
                    this.NfRef.SequenceEqual(other.NfRef)
                ) && 
                (
                    this.Payment == other.Payment ||
                    this.Payment != null &&
                    this.Payment.Equals(other.Payment)
                ) && 
                (
                    this.PurchaseInfo == other.PurchaseInfo ||
                    this.PurchaseInfo != null &&
                    this.PurchaseInfo.Equals(other.PurchaseInfo)
                ) && 
                (
                    this.Export == other.Export ||
                    this.Export != null &&
                    this.Export.Equals(other.Export)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MessageType != null)
                    hash = hash * 59 + this.MessageType.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.CompanyCode != null)
                    hash = hash * 59 + this.CompanyCode.GetHashCode();
                if (this.DocumentCode != null)
                    hash = hash * 59 + this.DocumentCode.GetHashCode();
                if (this.Participants != null)
                    hash = hash * 59 + this.Participants.GetHashCode();
                if (this.NfAccessKey != null)
                    hash = hash * 59 + this.NfAccessKey.GetHashCode();
                if (this.NfceQrCode != null)
                    hash = hash * 59 + this.NfceQrCode.GetHashCode();
                if (this.TransactionType != null)
                    hash = hash * 59 + this.TransactionType.GetHashCode();
                if (this.TransactionModel != null)
                    hash = hash * 59 + this.TransactionModel.GetHashCode();
                if (this.TransactionClass != null)
                    hash = hash * 59 + this.TransactionClass.GetHashCode();
                if (this.EDocCreatorType != null)
                    hash = hash * 59 + this.EDocCreatorType.GetHashCode();
                if (this.EDocCreatorPerspective != null)
                    hash = hash * 59 + this.EDocCreatorPerspective.GetHashCode();
                if (this.EntityCode != null)
                    hash = hash * 59 + this.EntityCode.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                if (this.CompanyLocation != null)
                    hash = hash * 59 + this.CompanyLocation.GetHashCode();
                if (this.TransactionDate != null)
                    hash = hash * 59 + this.TransactionDate.GetHashCode();
                if (this.ShippingDate != null)
                    hash = hash * 59 + this.ShippingDate.GetHashCode();
                if (this.AdditionalInfo != null)
                    hash = hash * 59 + this.AdditionalInfo.GetHashCode();
                if (this.TpImp != null)
                    hash = hash * 59 + this.TpImp.GetHashCode();
                if (this.IdDest != null)
                    hash = hash * 59 + this.IdDest.GetHashCode();
                if (this.IndPres != null)
                    hash = hash * 59 + this.IndPres.GetHashCode();
                if (this.InvoiceNumber != null)
                    hash = hash * 59 + this.InvoiceNumber.GetHashCode();
                if (this.InvoiceSerial != null)
                    hash = hash * 59 + this.InvoiceSerial.GetHashCode();
                if (this.DefaultLocations != null)
                    hash = hash * 59 + this.DefaultLocations.GetHashCode();
                if (this.Transport != null)
                    hash = hash * 59 + this.Transport.GetHashCode();
                if (this.NfRef != null)
                    hash = hash * 59 + this.NfRef.GetHashCode();
                if (this.Payment != null)
                    hash = hash * 59 + this.Payment.GetHashCode();
                if (this.PurchaseInfo != null)
                    hash = hash * 59 + this.PurchaseInfo.GetHashCode();
                if (this.Export != null)
                    hash = hash * 59 + this.Export.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // CompanyCode (string) maxLength
            if(this.CompanyCode != null && this.CompanyCode.Length > 60)
            {
                yield return new ValidationResult("Invalid value for CompanyCode, length must be less than 60.", new [] { "CompanyCode" });
            }

            // NfceQrCode (string) maxLength
            if(this.NfceQrCode != null && this.NfceQrCode.Length > 600)
            {
                yield return new ValidationResult("Invalid value for NfceQrCode, length must be less than 600.", new [] { "NfceQrCode" });
            }

            // NfceQrCode (string) minLength
            if(this.NfceQrCode != null && this.NfceQrCode.Length < 100)
            {
                yield return new ValidationResult("Invalid value for NfceQrCode, length must be greater than 100.", new [] { "NfceQrCode" });
            }

            yield break;
        }
    }

}
