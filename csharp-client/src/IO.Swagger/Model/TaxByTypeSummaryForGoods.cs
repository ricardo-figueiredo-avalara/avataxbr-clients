/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// summary of all taxes
    /// </summary>
    [DataContract]
    public partial class TaxByTypeSummaryForGoods :  IEquatable<TaxByTypeSummaryForGoods>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxByTypeSummaryForGoods" /> class.
        /// </summary>
        /// <param name="Calcbase">sum of all lines calcbase.</param>
        /// <param name="Tax">sum of referenced tax value.</param>
        /// <param name="Jurisdictions">Jurisdictions.</param>
        public TaxByTypeSummaryForGoods(double? Calcbase = default(double?), double? Tax = default(double?), List<TaxByTypeSummaryJurisdictionForGoods> Jurisdictions = default(List<TaxByTypeSummaryJurisdictionForGoods>))
        {
            this.Calcbase = Calcbase;
            this.Tax = Tax;
            this.Jurisdictions = Jurisdictions;
        }
        
        /// <summary>
        /// sum of all lines calcbase
        /// </summary>
        /// <value>sum of all lines calcbase</value>
        [DataMember(Name="calcbase", EmitDefaultValue=false)]
        public double? Calcbase { get; set; }
        /// <summary>
        /// sum of referenced tax value
        /// </summary>
        /// <value>sum of referenced tax value</value>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public double? Tax { get; set; }
        /// <summary>
        /// Gets or Sets Jurisdictions
        /// </summary>
        [DataMember(Name="jurisdictions", EmitDefaultValue=false)]
        public List<TaxByTypeSummaryJurisdictionForGoods> Jurisdictions { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxByTypeSummaryForGoods {\n");
            sb.Append("  Calcbase: ").Append(Calcbase).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Jurisdictions: ").Append(Jurisdictions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaxByTypeSummaryForGoods);
        }

        /// <summary>
        /// Returns true if TaxByTypeSummaryForGoods instances are equal
        /// </summary>
        /// <param name="other">Instance of TaxByTypeSummaryForGoods to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxByTypeSummaryForGoods other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Calcbase == other.Calcbase ||
                    this.Calcbase != null &&
                    this.Calcbase.Equals(other.Calcbase)
                ) && 
                (
                    this.Tax == other.Tax ||
                    this.Tax != null &&
                    this.Tax.Equals(other.Tax)
                ) && 
                (
                    this.Jurisdictions == other.Jurisdictions ||
                    this.Jurisdictions != null &&
                    this.Jurisdictions.SequenceEqual(other.Jurisdictions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Calcbase != null)
                    hash = hash * 59 + this.Calcbase.GetHashCode();
                if (this.Tax != null)
                    hash = hash * 59 + this.Tax.GetHashCode();
                if (this.Jurisdictions != null)
                    hash = hash * 59 + this.Jurisdictions.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
