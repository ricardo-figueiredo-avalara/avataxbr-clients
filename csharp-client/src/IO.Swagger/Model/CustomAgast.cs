/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CustomAgast
    /// </summary>
    [DataContract]
    public partial class CustomAgast :  IEquatable<CustomAgast>, IValidatableObject
    {
        /// <summary>
        /// Inform if this process is subject to IPI taxation on output process - 'T'  # TAXABLE - 'Z'  # TAXABLE WITH RATE=0.00 - 'E'  # EXEMPT - 'N'  # NO TAXABLE     - 'I'  # IMMUNE 
        /// </summary>
        /// <value>Inform if this process is subject to IPI taxation on output process - 'T'  # TAXABLE - 'Z'  # TAXABLE WITH RATE=0.00 - 'E'  # EXEMPT - 'N'  # NO TAXABLE     - 'I'  # IMMUNE </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CstIPIEnum
        {
            
            /// <summary>
            /// Enum T for "T"
            /// </summary>
            [EnumMember(Value = "T")]
            T,
            
            /// <summary>
            /// Enum Z for "Z"
            /// </summary>
            [EnumMember(Value = "Z")]
            Z,
            
            /// <summary>
            /// Enum E for "E"
            /// </summary>
            [EnumMember(Value = "E")]
            E,
            
            /// <summary>
            /// Enum N for "N"
            /// </summary>
            [EnumMember(Value = "N")]
            N,
            
            /// <summary>
            /// Enum I for "I"
            /// </summary>
            [EnumMember(Value = "I")]
            I
        }

        /// <summary>
        /// when the company is Real Profit inform if this item is cumulative or no cumulative by default
        /// </summary>
        /// <value>when the company is Real Profit inform if this item is cumulative or no cumulative by default</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PisCofinsTaxReportingEnum
        {
            
            /// <summary>
            /// Enum Cumulative for "cumulative"
            /// </summary>
            [EnumMember(Value = "cumulative")]
            Cumulative,
            
            /// <summary>
            /// Enum NoCumulative for "noCumulative"
            /// </summary>
            [EnumMember(Value = "noCumulative")]
            NoCumulative
        }

        /// <summary>
        /// Inform if this item by nature is subject to PIS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE 
        /// </summary>
        /// <value>Inform if this item by nature is subject to PIS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccruablePISTaxationEnum
        {
            
            /// <summary>
            /// Enum T for "T"
            /// </summary>
            [EnumMember(Value = "T")]
            T,
            
            /// <summary>
            /// Enum Z for "Z"
            /// </summary>
            [EnumMember(Value = "Z")]
            Z,
            
            /// <summary>
            /// Enum E for "E"
            /// </summary>
            [EnumMember(Value = "E")]
            E,
            
            /// <summary>
            /// Enum H for "H"
            /// </summary>
            [EnumMember(Value = "H")]
            H,
            
            /// <summary>
            /// Enum N for "N"
            /// </summary>
            [EnumMember(Value = "N")]
            N
        }

        /// <summary>
        /// Inform if this item by nature is subject to COFINS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE 
        /// </summary>
        /// <value>Inform if this item by nature is subject to COFINS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccruableCOFINSTaxationEnum
        {
            
            /// <summary>
            /// Enum T for "T"
            /// </summary>
            [EnumMember(Value = "T")]
            T,
            
            /// <summary>
            /// Enum Z for "Z"
            /// </summary>
            [EnumMember(Value = "Z")]
            Z,
            
            /// <summary>
            /// Enum E for "E"
            /// </summary>
            [EnumMember(Value = "E")]
            E,
            
            /// <summary>
            /// Enum H for "H"
            /// </summary>
            [EnumMember(Value = "H")]
            H,
            
            /// <summary>
            /// Enum N for "N"
            /// </summary>
            [EnumMember(Value = "N")]
            N
        }

        /// <summary>
        /// Inform if this item by nature is subject to CSLL taxation or exempt - 'T' # TAXABLE - 'E' # EXEMPT 
        /// </summary>
        /// <value>Inform if this item by nature is subject to CSLL taxation or exempt - 'T' # TAXABLE - 'E' # EXEMPT </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccruableCSLLTaxationEnum
        {
            
            /// <summary>
            /// Enum T for "T"
            /// </summary>
            [EnumMember(Value = "T")]
            T,
            
            /// <summary>
            /// Enum E for "E"
            /// </summary>
            [EnumMember(Value = "E")]
            E
        }

        /// <summary>
        /// - 'T' # TAXABLE - TRIBUTÁVEL INCLUSIVE PARA EXPORTAÇÃO' - 'E' # TAXABLE WITH EXEMPTION FOR EXPORTS - ISENTO PARA SERVIÇOS PRESTADOS AO EXTERIOR (DEFAULT) - 'F' # EXEMPT - 'A' # SUSPENDED FOR ADMINISTRATIVE REASON - 'L' # SUSPENDED FOR LEGAL DECISION - 'I' # IMMUNE 
        /// </summary>
        /// <value>- 'T' # TAXABLE - TRIBUTÁVEL INCLUSIVE PARA EXPORTAÇÃO' - 'E' # TAXABLE WITH EXEMPTION FOR EXPORTS - ISENTO PARA SERVIÇOS PRESTADOS AO EXTERIOR (DEFAULT) - 'F' # EXEMPT - 'A' # SUSPENDED FOR ADMINISTRATIVE REASON - 'L' # SUSPENDED FOR LEGAL DECISION - 'I' # IMMUNE </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IssTaxationEnum
        {
            
            /// <summary>
            /// Enum T for "T"
            /// </summary>
            [EnumMember(Value = "T")]
            T,
            
            /// <summary>
            /// Enum E for "E"
            /// </summary>
            [EnumMember(Value = "E")]
            E,
            
            /// <summary>
            /// Enum F for "F"
            /// </summary>
            [EnumMember(Value = "F")]
            F,
            
            /// <summary>
            /// Enum A for "A"
            /// </summary>
            [EnumMember(Value = "A")]
            A,
            
            /// <summary>
            /// Enum L for "L"
            /// </summary>
            [EnumMember(Value = "L")]
            L,
            
            /// <summary>
            /// Enum I for "I"
            /// </summary>
            [EnumMember(Value = "I")]
            I
        }

        /// <summary>
        /// Gets or Sets SpecialProductClass
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SpecialProductClassEnum
        {
            
            /// <summary>
            /// Enum OTHERS for "OTHERS"
            /// </summary>
            [EnumMember(Value = "OTHERS")]
            OTHERS,
            
            /// <summary>
            /// Enum COMMUNICATION for "COMMUNICATION"
            /// </summary>
            [EnumMember(Value = "COMMUNICATION")]
            COMMUNICATION,
            
            /// <summary>
            /// Enum ENERGY for "ENERGY"
            /// </summary>
            [EnumMember(Value = "ENERGY")]
            ENERGY,
            
            /// <summary>
            /// Enum TRANSPORT for "TRANSPORT"
            /// </summary>
            [EnumMember(Value = "TRANSPORT")]
            TRANSPORT,
            
            /// <summary>
            /// Enum FUELANDLUBRIFICANT for "FUEL AND LUBRIFICANT"
            /// </summary>
            [EnumMember(Value = "FUEL AND LUBRIFICANT")]
            FUELANDLUBRIFICANT,
            
            /// <summary>
            /// Enum VEHICLE for "VEHICLE"
            /// </summary>
            [EnumMember(Value = "VEHICLE")]
            VEHICLE,
            
            /// <summary>
            /// Enum ALCOHOLICBEVERAGES for "ALCOHOLIC BEVERAGES"
            /// </summary>
            [EnumMember(Value = "ALCOHOLIC BEVERAGES")]
            ALCOHOLICBEVERAGES,
            
            /// <summary>
            /// Enum WEAPONS for "WEAPONS"
            /// </summary>
            [EnumMember(Value = "WEAPONS")]
            WEAPONS,
            
            /// <summary>
            /// Enum AMMO for "AMMO"
            /// </summary>
            [EnumMember(Value = "AMMO")]
            AMMO,
            
            /// <summary>
            /// Enum PERFUME for "PERFUME"
            /// </summary>
            [EnumMember(Value = "PERFUME")]
            PERFUME,
            
            /// <summary>
            /// Enum TOBACCO for "TOBACCO"
            /// </summary>
            [EnumMember(Value = "TOBACCO")]
            TOBACCO
        }

        /// <summary>
        /// Inform if this process is subject to IPI taxation on output process - 'T'  # TAXABLE - 'Z'  # TAXABLE WITH RATE=0.00 - 'E'  # EXEMPT - 'N'  # NO TAXABLE     - 'I'  # IMMUNE 
        /// </summary>
        /// <value>Inform if this process is subject to IPI taxation on output process - 'T'  # TAXABLE - 'Z'  # TAXABLE WITH RATE=0.00 - 'E'  # EXEMPT - 'N'  # NO TAXABLE     - 'I'  # IMMUNE </value>
        [DataMember(Name="cstIPI", EmitDefaultValue=false)]
        public CstIPIEnum? CstIPI { get; set; }
        /// <summary>
        /// when the company is Real Profit inform if this item is cumulative or no cumulative by default
        /// </summary>
        /// <value>when the company is Real Profit inform if this item is cumulative or no cumulative by default</value>
        [DataMember(Name="pisCofinsTaxReporting", EmitDefaultValue=false)]
        public PisCofinsTaxReportingEnum? PisCofinsTaxReporting { get; set; }
        /// <summary>
        /// Inform if this item by nature is subject to PIS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE 
        /// </summary>
        /// <value>Inform if this item by nature is subject to PIS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE </value>
        [DataMember(Name="accruablePISTaxation", EmitDefaultValue=false)]
        public AccruablePISTaxationEnum? AccruablePISTaxation { get; set; }
        /// <summary>
        /// Inform if this item by nature is subject to COFINS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE 
        /// </summary>
        /// <value>Inform if this item by nature is subject to COFINS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE </value>
        [DataMember(Name="accruableCOFINSTaxation", EmitDefaultValue=false)]
        public AccruableCOFINSTaxationEnum? AccruableCOFINSTaxation { get; set; }
        /// <summary>
        /// Inform if this item by nature is subject to CSLL taxation or exempt - 'T' # TAXABLE - 'E' # EXEMPT 
        /// </summary>
        /// <value>Inform if this item by nature is subject to CSLL taxation or exempt - 'T' # TAXABLE - 'E' # EXEMPT </value>
        [DataMember(Name="accruableCSLLTaxation", EmitDefaultValue=false)]
        public AccruableCSLLTaxationEnum? AccruableCSLLTaxation { get; set; }
        /// <summary>
        /// - 'T' # TAXABLE - TRIBUTÁVEL INCLUSIVE PARA EXPORTAÇÃO' - 'E' # TAXABLE WITH EXEMPTION FOR EXPORTS - ISENTO PARA SERVIÇOS PRESTADOS AO EXTERIOR (DEFAULT) - 'F' # EXEMPT - 'A' # SUSPENDED FOR ADMINISTRATIVE REASON - 'L' # SUSPENDED FOR LEGAL DECISION - 'I' # IMMUNE 
        /// </summary>
        /// <value>- 'T' # TAXABLE - TRIBUTÁVEL INCLUSIVE PARA EXPORTAÇÃO' - 'E' # TAXABLE WITH EXEMPTION FOR EXPORTS - ISENTO PARA SERVIÇOS PRESTADOS AO EXTERIOR (DEFAULT) - 'F' # EXEMPT - 'A' # SUSPENDED FOR ADMINISTRATIVE REASON - 'L' # SUSPENDED FOR LEGAL DECISION - 'I' # IMMUNE </value>
        [DataMember(Name="issTaxation", EmitDefaultValue=false)]
        public IssTaxationEnum? IssTaxation { get; set; }
        /// <summary>
        /// Gets or Sets SpecialProductClass
        /// </summary>
        [DataMember(Name="specialProductClass", EmitDefaultValue=false)]
        public SpecialProductClassEnum? SpecialProductClass { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAgast" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomAgast() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAgast" /> class.
        /// </summary>
        /// <param name="Code">Agast Code. AGAST (Avalara Goods and Services Types) are preset products with default tax definitions available to be used as provided or copied to create an specific comapany item. (required).</param>
        /// <param name="Description">Agast Description.</param>
        /// <param name="HsCode">harmonized code, NCM or LC 116.</param>
        /// <param name="Ex">hsCode Exception for IPI tax.</param>
        /// <param name="Cest">tax substitution code - Codigo especificador da Substuicao Tributaria.</param>
        /// <param name="Cean">GTIN NUMBER.</param>
        /// <param name="CodeType">CodeType.</param>
        /// <param name="CstIPI">Inform if this process is subject to IPI taxation on output process - &#39;T&#39;  # TAXABLE - &#39;Z&#39;  # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39;  # EXEMPT - &#39;N&#39;  # NO TAXABLE     - &#39;I&#39;  # IMMUNE .</param>
        /// <param name="IpiLegalTaxClass">Legal tax classificação for IPI (enquadramento tributário) When the process has CST IPI 52 or 54, it is mandatory to inform a Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo&#x3D;mCnJajU4BKU&#x3D; .</param>
        /// <param name="PisCofinsTaxReporting">when the company is Real Profit inform if this item is cumulative or no cumulative by default.</param>
        /// <param name="AccruablePISTaxation">Inform if this item by nature is subject to PIS taxation or exempt - &#39;T&#39; # TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;N&#39; # NO TAXABLE .</param>
        /// <param name="PisExemptLegalReasonCode">When exempt, taxable with zero rate, suspended, not taxable, this field informs the official code number for the exemption.</param>
        /// <param name="PisExemptLegalReason">When specified a reason, this field holds the reason&#39;s description.</param>
        /// <param name="AccruableCOFINSTaxation">Inform if this item by nature is subject to COFINS taxation or exempt - &#39;T&#39; # TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;N&#39; # NO TAXABLE .</param>
        /// <param name="CofinsExemptLegalReasonCode">When exempt, taxable with zero rate, suspended, not taxable, this field informs the official code number for the exemption.</param>
        /// <param name="CofinsExemptLegalReason">When specified a reason, this field holds the reason&#39;s description.</param>
        /// <param name="AccruableCSLLTaxation">Inform if this item by nature is subject to CSLL taxation or exempt - &#39;T&#39; # TAXABLE - &#39;E&#39; # EXEMPT .</param>
        /// <param name="CsllExemptLegalReason">CsllExemptLegalReason.</param>
        /// <param name="CsllExemptLegalReasonCode">CsllExemptLegalReasonCode.</param>
        /// <param name="Withholding">Withholding.</param>
        /// <param name="IssDueatDestination">for service items with City Jurisdiction, inform where the ISS tax is due.</param>
        /// <param name="PisCofinsCreditNotAllowed">on Real Profit Purchase transaction, inform if this item allows tax credits when it is non-cumulative.</param>
        /// <param name="IssTaxation">- &#39;T&#39; # TAXABLE - TRIBUTÁVEL INCLUSIVE PARA EXPORTAÇÃO&#39; - &#39;E&#39; # TAXABLE WITH EXEMPTION FOR EXPORTS - ISENTO PARA SERVIÇOS PRESTADOS AO EXTERIOR (DEFAULT) - &#39;F&#39; # EXEMPT - &#39;A&#39; # SUSPENDED FOR ADMINISTRATIVE REASON - &#39;L&#39; # SUSPENDED FOR LEGAL DECISION - &#39;I&#39; # IMMUNE .</param>
        /// <param name="FederalTaxRate">This is an array of tax object related to an agast..</param>
        /// <param name="SpecialProductClass">SpecialProductClass.</param>
        /// <param name="IcmsConf">One per State.</param>
        /// <param name="CompanyId">Company ID (required).</param>
        public CustomAgast(string Code = default(string), string Description = default(string), string HsCode = default(string), int? Ex = default(int?), string Cest = default(string), string Cean = default(string), AgastCodeType CodeType = default(AgastCodeType), CstIPIEnum? CstIPI = default(CstIPIEnum?), string IpiLegalTaxClass = default(string), PisCofinsTaxReportingEnum? PisCofinsTaxReporting = default(PisCofinsTaxReportingEnum?), AccruablePISTaxationEnum? AccruablePISTaxation = default(AccruablePISTaxationEnum?), string PisExemptLegalReasonCode = default(string), string PisExemptLegalReason = default(string), AccruableCOFINSTaxationEnum? AccruableCOFINSTaxation = default(AccruableCOFINSTaxationEnum?), string CofinsExemptLegalReasonCode = default(string), string CofinsExemptLegalReason = default(string), AccruableCSLLTaxationEnum? AccruableCSLLTaxation = default(AccruableCSLLTaxationEnum?), string CsllExemptLegalReason = default(string), string CsllExemptLegalReasonCode = default(string), AgastWithholding Withholding = default(AgastWithholding), bool? IssDueatDestination = default(bool?), bool? PisCofinsCreditNotAllowed = default(bool?), IssTaxationEnum? IssTaxation = default(IssTaxationEnum?), List<TaxTypeRate> FederalTaxRate = default(List<TaxTypeRate>), SpecialProductClassEnum? SpecialProductClass = default(SpecialProductClassEnum?), List<AgastIcmsConf> IcmsConf = default(List<AgastIcmsConf>), Guid? CompanyId = default(Guid?))
        {
            // to ensure "Code" is required (not null)
            if (Code == null)
            {
                throw new InvalidDataException("Code is a required property for CustomAgast and cannot be null");
            }
            else
            {
                this.Code = Code;
            }
            // to ensure "CompanyId" is required (not null)
            if (CompanyId == null)
            {
                throw new InvalidDataException("CompanyId is a required property for CustomAgast and cannot be null");
            }
            else
            {
                this.CompanyId = CompanyId;
            }
            this.Description = Description;
            this.HsCode = HsCode;
            this.Ex = Ex;
            this.Cest = Cest;
            this.Cean = Cean;
            this.CodeType = CodeType;
            this.CstIPI = CstIPI;
            this.IpiLegalTaxClass = IpiLegalTaxClass;
            this.PisCofinsTaxReporting = PisCofinsTaxReporting;
            this.AccruablePISTaxation = AccruablePISTaxation;
            this.PisExemptLegalReasonCode = PisExemptLegalReasonCode;
            this.PisExemptLegalReason = PisExemptLegalReason;
            this.AccruableCOFINSTaxation = AccruableCOFINSTaxation;
            this.CofinsExemptLegalReasonCode = CofinsExemptLegalReasonCode;
            this.CofinsExemptLegalReason = CofinsExemptLegalReason;
            this.AccruableCSLLTaxation = AccruableCSLLTaxation;
            this.CsllExemptLegalReason = CsllExemptLegalReason;
            this.CsllExemptLegalReasonCode = CsllExemptLegalReasonCode;
            this.Withholding = Withholding;
            this.IssDueatDestination = IssDueatDestination;
            this.PisCofinsCreditNotAllowed = PisCofinsCreditNotAllowed;
            this.IssTaxation = IssTaxation;
            this.FederalTaxRate = FederalTaxRate;
            this.SpecialProductClass = SpecialProductClass;
            this.IcmsConf = IcmsConf;
        }
        
        /// <summary>
        /// Agast Code. AGAST (Avalara Goods and Services Types) are preset products with default tax definitions available to be used as provided or copied to create an specific comapany item.
        /// </summary>
        /// <value>Agast Code. AGAST (Avalara Goods and Services Types) are preset products with default tax definitions available to be used as provided or copied to create an specific comapany item.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Agast Description
        /// </summary>
        /// <value>Agast Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// harmonized code, NCM or LC 116
        /// </summary>
        /// <value>harmonized code, NCM or LC 116</value>
        [DataMember(Name="hsCode", EmitDefaultValue=false)]
        public string HsCode { get; set; }
        /// <summary>
        /// hsCode Exception for IPI tax
        /// </summary>
        /// <value>hsCode Exception for IPI tax</value>
        [DataMember(Name="ex", EmitDefaultValue=false)]
        public int? Ex { get; set; }
        /// <summary>
        /// tax substitution code - Codigo especificador da Substuicao Tributaria
        /// </summary>
        /// <value>tax substitution code - Codigo especificador da Substuicao Tributaria</value>
        [DataMember(Name="cest", EmitDefaultValue=false)]
        public string Cest { get; set; }
        /// <summary>
        /// GTIN NUMBER
        /// </summary>
        /// <value>GTIN NUMBER</value>
        [DataMember(Name="cean", EmitDefaultValue=false)]
        public string Cean { get; set; }
        /// <summary>
        /// Gets or Sets CodeType
        /// </summary>
        [DataMember(Name="codeType", EmitDefaultValue=false)]
        public AgastCodeType CodeType { get; set; }
        /// <summary>
        /// Legal tax classificação for IPI (enquadramento tributário) When the process has CST IPI 52 or 54, it is mandatory to inform a Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo&#x3D;mCnJajU4BKU&#x3D; 
        /// </summary>
        /// <value>Legal tax classificação for IPI (enquadramento tributário) When the process has CST IPI 52 or 54, it is mandatory to inform a Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo&#x3D;mCnJajU4BKU&#x3D; </value>
        [DataMember(Name="ipiLegalTaxClass", EmitDefaultValue=false)]
        public string IpiLegalTaxClass { get; set; }
        /// <summary>
        /// When exempt, taxable with zero rate, suspended, not taxable, this field informs the official code number for the exemption
        /// </summary>
        /// <value>When exempt, taxable with zero rate, suspended, not taxable, this field informs the official code number for the exemption</value>
        [DataMember(Name="pisExemptLegalReasonCode", EmitDefaultValue=false)]
        public string PisExemptLegalReasonCode { get; set; }
        /// <summary>
        /// When specified a reason, this field holds the reason&#39;s description
        /// </summary>
        /// <value>When specified a reason, this field holds the reason&#39;s description</value>
        [DataMember(Name="pisExemptLegalReason", EmitDefaultValue=false)]
        public string PisExemptLegalReason { get; set; }
        /// <summary>
        /// When exempt, taxable with zero rate, suspended, not taxable, this field informs the official code number for the exemption
        /// </summary>
        /// <value>When exempt, taxable with zero rate, suspended, not taxable, this field informs the official code number for the exemption</value>
        [DataMember(Name="cofinsExemptLegalReasonCode", EmitDefaultValue=false)]
        public string CofinsExemptLegalReasonCode { get; set; }
        /// <summary>
        /// When specified a reason, this field holds the reason&#39;s description
        /// </summary>
        /// <value>When specified a reason, this field holds the reason&#39;s description</value>
        [DataMember(Name="cofinsExemptLegalReason", EmitDefaultValue=false)]
        public string CofinsExemptLegalReason { get; set; }
        /// <summary>
        /// Gets or Sets CsllExemptLegalReason
        /// </summary>
        [DataMember(Name="csllExemptLegalReason", EmitDefaultValue=false)]
        public string CsllExemptLegalReason { get; set; }
        /// <summary>
        /// Gets or Sets CsllExemptLegalReasonCode
        /// </summary>
        [DataMember(Name="csllExemptLegalReasonCode", EmitDefaultValue=false)]
        public string CsllExemptLegalReasonCode { get; set; }
        /// <summary>
        /// Gets or Sets Withholding
        /// </summary>
        [DataMember(Name="withholding", EmitDefaultValue=false)]
        public AgastWithholding Withholding { get; set; }
        /// <summary>
        /// for service items with City Jurisdiction, inform where the ISS tax is due
        /// </summary>
        /// <value>for service items with City Jurisdiction, inform where the ISS tax is due</value>
        [DataMember(Name="issDueatDestination", EmitDefaultValue=false)]
        public bool? IssDueatDestination { get; set; }
        /// <summary>
        /// on Real Profit Purchase transaction, inform if this item allows tax credits when it is non-cumulative
        /// </summary>
        /// <value>on Real Profit Purchase transaction, inform if this item allows tax credits when it is non-cumulative</value>
        [DataMember(Name="pisCofinsCreditNotAllowed", EmitDefaultValue=false)]
        public bool? PisCofinsCreditNotAllowed { get; set; }
        /// <summary>
        /// This is an array of tax object related to an agast.
        /// </summary>
        /// <value>This is an array of tax object related to an agast.</value>
        [DataMember(Name="federalTaxRate", EmitDefaultValue=false)]
        public List<TaxTypeRate> FederalTaxRate { get; set; }
        /// <summary>
        /// One per State
        /// </summary>
        /// <value>One per State</value>
        [DataMember(Name="icmsConf", EmitDefaultValue=false)]
        public List<AgastIcmsConf> IcmsConf { get; set; }
        /// <summary>
        /// Company ID
        /// </summary>
        /// <value>Company ID</value>
        [DataMember(Name="companyId", EmitDefaultValue=false)]
        public Guid? CompanyId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomAgast {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HsCode: ").Append(HsCode).Append("\n");
            sb.Append("  Ex: ").Append(Ex).Append("\n");
            sb.Append("  Cest: ").Append(Cest).Append("\n");
            sb.Append("  Cean: ").Append(Cean).Append("\n");
            sb.Append("  CodeType: ").Append(CodeType).Append("\n");
            sb.Append("  CstIPI: ").Append(CstIPI).Append("\n");
            sb.Append("  IpiLegalTaxClass: ").Append(IpiLegalTaxClass).Append("\n");
            sb.Append("  PisCofinsTaxReporting: ").Append(PisCofinsTaxReporting).Append("\n");
            sb.Append("  AccruablePISTaxation: ").Append(AccruablePISTaxation).Append("\n");
            sb.Append("  PisExemptLegalReasonCode: ").Append(PisExemptLegalReasonCode).Append("\n");
            sb.Append("  PisExemptLegalReason: ").Append(PisExemptLegalReason).Append("\n");
            sb.Append("  AccruableCOFINSTaxation: ").Append(AccruableCOFINSTaxation).Append("\n");
            sb.Append("  CofinsExemptLegalReasonCode: ").Append(CofinsExemptLegalReasonCode).Append("\n");
            sb.Append("  CofinsExemptLegalReason: ").Append(CofinsExemptLegalReason).Append("\n");
            sb.Append("  AccruableCSLLTaxation: ").Append(AccruableCSLLTaxation).Append("\n");
            sb.Append("  CsllExemptLegalReason: ").Append(CsllExemptLegalReason).Append("\n");
            sb.Append("  CsllExemptLegalReasonCode: ").Append(CsllExemptLegalReasonCode).Append("\n");
            sb.Append("  Withholding: ").Append(Withholding).Append("\n");
            sb.Append("  IssDueatDestination: ").Append(IssDueatDestination).Append("\n");
            sb.Append("  PisCofinsCreditNotAllowed: ").Append(PisCofinsCreditNotAllowed).Append("\n");
            sb.Append("  IssTaxation: ").Append(IssTaxation).Append("\n");
            sb.Append("  FederalTaxRate: ").Append(FederalTaxRate).Append("\n");
            sb.Append("  SpecialProductClass: ").Append(SpecialProductClass).Append("\n");
            sb.Append("  IcmsConf: ").Append(IcmsConf).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CustomAgast);
        }

        /// <summary>
        /// Returns true if CustomAgast instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomAgast to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomAgast other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.HsCode == other.HsCode ||
                    this.HsCode != null &&
                    this.HsCode.Equals(other.HsCode)
                ) && 
                (
                    this.Ex == other.Ex ||
                    this.Ex != null &&
                    this.Ex.Equals(other.Ex)
                ) && 
                (
                    this.Cest == other.Cest ||
                    this.Cest != null &&
                    this.Cest.Equals(other.Cest)
                ) && 
                (
                    this.Cean == other.Cean ||
                    this.Cean != null &&
                    this.Cean.Equals(other.Cean)
                ) && 
                (
                    this.CodeType == other.CodeType ||
                    this.CodeType != null &&
                    this.CodeType.Equals(other.CodeType)
                ) && 
                (
                    this.CstIPI == other.CstIPI ||
                    this.CstIPI != null &&
                    this.CstIPI.Equals(other.CstIPI)
                ) && 
                (
                    this.IpiLegalTaxClass == other.IpiLegalTaxClass ||
                    this.IpiLegalTaxClass != null &&
                    this.IpiLegalTaxClass.Equals(other.IpiLegalTaxClass)
                ) && 
                (
                    this.PisCofinsTaxReporting == other.PisCofinsTaxReporting ||
                    this.PisCofinsTaxReporting != null &&
                    this.PisCofinsTaxReporting.Equals(other.PisCofinsTaxReporting)
                ) && 
                (
                    this.AccruablePISTaxation == other.AccruablePISTaxation ||
                    this.AccruablePISTaxation != null &&
                    this.AccruablePISTaxation.Equals(other.AccruablePISTaxation)
                ) && 
                (
                    this.PisExemptLegalReasonCode == other.PisExemptLegalReasonCode ||
                    this.PisExemptLegalReasonCode != null &&
                    this.PisExemptLegalReasonCode.Equals(other.PisExemptLegalReasonCode)
                ) && 
                (
                    this.PisExemptLegalReason == other.PisExemptLegalReason ||
                    this.PisExemptLegalReason != null &&
                    this.PisExemptLegalReason.Equals(other.PisExemptLegalReason)
                ) && 
                (
                    this.AccruableCOFINSTaxation == other.AccruableCOFINSTaxation ||
                    this.AccruableCOFINSTaxation != null &&
                    this.AccruableCOFINSTaxation.Equals(other.AccruableCOFINSTaxation)
                ) && 
                (
                    this.CofinsExemptLegalReasonCode == other.CofinsExemptLegalReasonCode ||
                    this.CofinsExemptLegalReasonCode != null &&
                    this.CofinsExemptLegalReasonCode.Equals(other.CofinsExemptLegalReasonCode)
                ) && 
                (
                    this.CofinsExemptLegalReason == other.CofinsExemptLegalReason ||
                    this.CofinsExemptLegalReason != null &&
                    this.CofinsExemptLegalReason.Equals(other.CofinsExemptLegalReason)
                ) && 
                (
                    this.AccruableCSLLTaxation == other.AccruableCSLLTaxation ||
                    this.AccruableCSLLTaxation != null &&
                    this.AccruableCSLLTaxation.Equals(other.AccruableCSLLTaxation)
                ) && 
                (
                    this.CsllExemptLegalReason == other.CsllExemptLegalReason ||
                    this.CsllExemptLegalReason != null &&
                    this.CsllExemptLegalReason.Equals(other.CsllExemptLegalReason)
                ) && 
                (
                    this.CsllExemptLegalReasonCode == other.CsllExemptLegalReasonCode ||
                    this.CsllExemptLegalReasonCode != null &&
                    this.CsllExemptLegalReasonCode.Equals(other.CsllExemptLegalReasonCode)
                ) && 
                (
                    this.Withholding == other.Withholding ||
                    this.Withholding != null &&
                    this.Withholding.Equals(other.Withholding)
                ) && 
                (
                    this.IssDueatDestination == other.IssDueatDestination ||
                    this.IssDueatDestination != null &&
                    this.IssDueatDestination.Equals(other.IssDueatDestination)
                ) && 
                (
                    this.PisCofinsCreditNotAllowed == other.PisCofinsCreditNotAllowed ||
                    this.PisCofinsCreditNotAllowed != null &&
                    this.PisCofinsCreditNotAllowed.Equals(other.PisCofinsCreditNotAllowed)
                ) && 
                (
                    this.IssTaxation == other.IssTaxation ||
                    this.IssTaxation != null &&
                    this.IssTaxation.Equals(other.IssTaxation)
                ) && 
                (
                    this.FederalTaxRate == other.FederalTaxRate ||
                    this.FederalTaxRate != null &&
                    this.FederalTaxRate.SequenceEqual(other.FederalTaxRate)
                ) && 
                (
                    this.SpecialProductClass == other.SpecialProductClass ||
                    this.SpecialProductClass != null &&
                    this.SpecialProductClass.Equals(other.SpecialProductClass)
                ) && 
                (
                    this.IcmsConf == other.IcmsConf ||
                    this.IcmsConf != null &&
                    this.IcmsConf.SequenceEqual(other.IcmsConf)
                ) && 
                (
                    this.CompanyId == other.CompanyId ||
                    this.CompanyId != null &&
                    this.CompanyId.Equals(other.CompanyId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.HsCode != null)
                    hash = hash * 59 + this.HsCode.GetHashCode();
                if (this.Ex != null)
                    hash = hash * 59 + this.Ex.GetHashCode();
                if (this.Cest != null)
                    hash = hash * 59 + this.Cest.GetHashCode();
                if (this.Cean != null)
                    hash = hash * 59 + this.Cean.GetHashCode();
                if (this.CodeType != null)
                    hash = hash * 59 + this.CodeType.GetHashCode();
                if (this.CstIPI != null)
                    hash = hash * 59 + this.CstIPI.GetHashCode();
                if (this.IpiLegalTaxClass != null)
                    hash = hash * 59 + this.IpiLegalTaxClass.GetHashCode();
                if (this.PisCofinsTaxReporting != null)
                    hash = hash * 59 + this.PisCofinsTaxReporting.GetHashCode();
                if (this.AccruablePISTaxation != null)
                    hash = hash * 59 + this.AccruablePISTaxation.GetHashCode();
                if (this.PisExemptLegalReasonCode != null)
                    hash = hash * 59 + this.PisExemptLegalReasonCode.GetHashCode();
                if (this.PisExemptLegalReason != null)
                    hash = hash * 59 + this.PisExemptLegalReason.GetHashCode();
                if (this.AccruableCOFINSTaxation != null)
                    hash = hash * 59 + this.AccruableCOFINSTaxation.GetHashCode();
                if (this.CofinsExemptLegalReasonCode != null)
                    hash = hash * 59 + this.CofinsExemptLegalReasonCode.GetHashCode();
                if (this.CofinsExemptLegalReason != null)
                    hash = hash * 59 + this.CofinsExemptLegalReason.GetHashCode();
                if (this.AccruableCSLLTaxation != null)
                    hash = hash * 59 + this.AccruableCSLLTaxation.GetHashCode();
                if (this.CsllExemptLegalReason != null)
                    hash = hash * 59 + this.CsllExemptLegalReason.GetHashCode();
                if (this.CsllExemptLegalReasonCode != null)
                    hash = hash * 59 + this.CsllExemptLegalReasonCode.GetHashCode();
                if (this.Withholding != null)
                    hash = hash * 59 + this.Withholding.GetHashCode();
                if (this.IssDueatDestination != null)
                    hash = hash * 59 + this.IssDueatDestination.GetHashCode();
                if (this.PisCofinsCreditNotAllowed != null)
                    hash = hash * 59 + this.PisCofinsCreditNotAllowed.GetHashCode();
                if (this.IssTaxation != null)
                    hash = hash * 59 + this.IssTaxation.GetHashCode();
                if (this.FederalTaxRate != null)
                    hash = hash * 59 + this.FederalTaxRate.GetHashCode();
                if (this.SpecialProductClass != null)
                    hash = hash * 59 + this.SpecialProductClass.GetHashCode();
                if (this.IcmsConf != null)
                    hash = hash * 59 + this.IcmsConf.GetHashCode();
                if (this.CompanyId != null)
                    hash = hash * 59 + this.CompanyId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 200)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 200.", new [] { "Description" });
            }

            // HsCode (string) maxLength
            if(this.HsCode != null && this.HsCode.Length > 8)
            {
                yield return new ValidationResult("Invalid value for HsCode, length must be less than 8.", new [] { "HsCode" });
            }

            // Cest (string) pattern
            Regex regexCest = new Regex(@"[0-9]{7}", RegexOptions.CultureInvariant);
            if (false == regexCest.Match(this.Cest).Success)
            {
                yield return new ValidationResult("Invalid value for Cest, must match a pattern of /[0-9]{7}/.", new [] { "Cest" });
            }

            // Cean (string) pattern
            Regex regexCean = new Regex(@"[0-9]{0}|[0-9]{8}|[0-9]{12,14}", RegexOptions.CultureInvariant);
            if (false == regexCean.Match(this.Cean).Success)
            {
                yield return new ValidationResult("Invalid value for Cean, must match a pattern of /[0-9]{0}|[0-9]{8}|[0-9]{12,14}/.", new [] { "Cean" });
            }

            // PisExemptLegalReason (string) maxLength
            if(this.PisExemptLegalReason != null && this.PisExemptLegalReason.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for PisExemptLegalReason, length must be less than 1024.", new [] { "PisExemptLegalReason" });
            }

            // CofinsExemptLegalReason (string) maxLength
            if(this.CofinsExemptLegalReason != null && this.CofinsExemptLegalReason.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for CofinsExemptLegalReason, length must be less than 1024.", new [] { "CofinsExemptLegalReason" });
            }

            // CsllExemptLegalReason (string) maxLength
            if(this.CsllExemptLegalReason != null && this.CsllExemptLegalReason.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for CsllExemptLegalReason, length must be less than 1024.", new [] { "CsllExemptLegalReason" });
            }

            yield break;
        }
    }

}
