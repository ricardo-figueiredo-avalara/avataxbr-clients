/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaxConfProcessApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// create a new Process Type configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxconfprocess">The pet JSON you want to post</param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 CreateProcess (ProcessScenario taxconfprocess);

        /// <summary>
        /// create a new Process Type configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxconfprocess">The pet JSON you want to post</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> CreateProcessWithHttpInfo (ProcessScenario taxconfprocess);
        /// <summary>
        /// disable a Process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <returns></returns>
        void DeleteProcess (string code);

        /// <summary>
        /// disable a Process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProcessWithHttpInfo (string code);
        /// <summary>
        /// get Process information.
        /// </summary>
        /// <remarks>
        /// This operation return Process Type configuration 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <returns>ProcessScenario</returns>
        ProcessScenario GetProcess (string code);

        /// <summary>
        /// get Process information.
        /// </summary>
        /// <remarks>
        /// This operation return Process Type configuration 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <returns>ApiResponse of ProcessScenario</returns>
        ApiResponse<ProcessScenario> GetProcessWithHttpInfo (string code);
        /// <summary>
        /// retrive list of Process.
        /// </summary>
        /// <remarks>
        /// This operation return Process Type configurations that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">filter the configuration by accountID, if not informed, only the standard configuration will be returned  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inactive versions too  (optional)</param>
        /// <returns>List&lt;ProcessScenario&gt;</returns>
        List<ProcessScenario> GetProcessList (string accountId = null, DateTime? date = null, bool? inactive = null);

        /// <summary>
        /// retrive list of Process.
        /// </summary>
        /// <remarks>
        /// This operation return Process Type configurations that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">filter the configuration by accountID, if not informed, only the standard configuration will be returned  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inactive versions too  (optional)</param>
        /// <returns>ApiResponse of List&lt;ProcessScenario&gt;</returns>
        ApiResponse<List<ProcessScenario>> GetProcessListWithHttpInfo (string accountId = null, DateTime? date = null, bool? inactive = null);
        /// <summary>
        /// update a Process Type configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <param name="taxconfprocess">The pet JSON you want to post</param>
        /// <returns></returns>
        void UpdateProcess (string code, ProcessScenario taxconfprocess);

        /// <summary>
        /// update a Process Type configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <param name="taxconfprocess">The pet JSON you want to post</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProcessWithHttpInfo (string code, ProcessScenario taxconfprocess);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// create a new Process Type configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxconfprocess">The pet JSON you want to post</param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> CreateProcessAsync (ProcessScenario taxconfprocess);

        /// <summary>
        /// create a new Process Type configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxconfprocess">The pet JSON you want to post</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> CreateProcessAsyncWithHttpInfo (ProcessScenario taxconfprocess);
        /// <summary>
        /// disable a Process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProcessAsync (string code);

        /// <summary>
        /// disable a Process.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProcessAsyncWithHttpInfo (string code);
        /// <summary>
        /// get Process information.
        /// </summary>
        /// <remarks>
        /// This operation return Process Type configuration 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <returns>Task of ProcessScenario</returns>
        System.Threading.Tasks.Task<ProcessScenario> GetProcessAsync (string code);

        /// <summary>
        /// get Process information.
        /// </summary>
        /// <remarks>
        /// This operation return Process Type configuration 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <returns>Task of ApiResponse (ProcessScenario)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessScenario>> GetProcessAsyncWithHttpInfo (string code);
        /// <summary>
        /// retrive list of Process.
        /// </summary>
        /// <remarks>
        /// This operation return Process Type configurations that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">filter the configuration by accountID, if not informed, only the standard configuration will be returned  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inactive versions too  (optional)</param>
        /// <returns>Task of List&lt;ProcessScenario&gt;</returns>
        System.Threading.Tasks.Task<List<ProcessScenario>> GetProcessListAsync (string accountId = null, DateTime? date = null, bool? inactive = null);

        /// <summary>
        /// retrive list of Process.
        /// </summary>
        /// <remarks>
        /// This operation return Process Type configurations that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">filter the configuration by accountID, if not informed, only the standard configuration will be returned  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inactive versions too  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProcessScenario&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProcessScenario>>> GetProcessListAsyncWithHttpInfo (string accountId = null, DateTime? date = null, bool? inactive = null);
        /// <summary>
        /// update a Process Type configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <param name="taxconfprocess">The pet JSON you want to post</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProcessAsync (string code, ProcessScenario taxconfprocess);

        /// <summary>
        /// update a Process Type configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <param name="taxconfprocess">The pet JSON you want to post</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProcessAsyncWithHttpInfo (string code, ProcessScenario taxconfprocess);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaxConfProcessApi : ITaxConfProcessApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxConfProcessApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaxConfProcessApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxConfProcessApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaxConfProcessApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// create a new Process Type configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxconfprocess">The pet JSON you want to post</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 CreateProcess (ProcessScenario taxconfprocess)
        {
             ApiResponse<InlineResponse201> localVarResponse = CreateProcessWithHttpInfo(taxconfprocess);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create a new Process Type configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxconfprocess">The pet JSON you want to post</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse< InlineResponse201 > CreateProcessWithHttpInfo (ProcessScenario taxconfprocess)
        {
            // verify the required parameter 'taxconfprocess' is set
            if (taxconfprocess == null)
                throw new ApiException(400, "Missing required parameter 'taxconfprocess' when calling TaxConfProcessApi->CreateProcess");

            var localVarPath = "/taxconf/process";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taxconfprocess != null && taxconfprocess.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taxconfprocess); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxconfprocess; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse201) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
            
        }

        /// <summary>
        /// create a new Process Type configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxconfprocess">The pet JSON you want to post</param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201> CreateProcessAsync (ProcessScenario taxconfprocess)
        {
             ApiResponse<InlineResponse201> localVarResponse = await CreateProcessAsyncWithHttpInfo(taxconfprocess);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create a new Process Type configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxconfprocess">The pet JSON you want to post</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> CreateProcessAsyncWithHttpInfo (ProcessScenario taxconfprocess)
        {
            // verify the required parameter 'taxconfprocess' is set
            if (taxconfprocess == null)
                throw new ApiException(400, "Missing required parameter 'taxconfprocess' when calling TaxConfProcessApi->CreateProcess");

            var localVarPath = "/taxconf/process";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taxconfprocess != null && taxconfprocess.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taxconfprocess); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxconfprocess; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse201) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
            
        }

        /// <summary>
        /// disable a Process. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <returns></returns>
        public void DeleteProcess (string code)
        {
             DeleteProcessWithHttpInfo(code);
        }

        /// <summary>
        /// disable a Process. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProcessWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling TaxConfProcessApi->DeleteProcess");

            var localVarPath = "/taxconf/process/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// disable a Process. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProcessAsync (string code)
        {
             await DeleteProcessAsyncWithHttpInfo(code);

        }

        /// <summary>
        /// disable a Process. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProcessAsyncWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling TaxConfProcessApi->DeleteProcess");

            var localVarPath = "/taxconf/process/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// get Process information. This operation return Process Type configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <returns>ProcessScenario</returns>
        public ProcessScenario GetProcess (string code)
        {
             ApiResponse<ProcessScenario> localVarResponse = GetProcessWithHttpInfo(code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get Process information. This operation return Process Type configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <returns>ApiResponse of ProcessScenario</returns>
        public ApiResponse< ProcessScenario > GetProcessWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling TaxConfProcessApi->GetProcess");

            var localVarPath = "/taxconf/process/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessScenario>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessScenario) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessScenario)));
            
        }

        /// <summary>
        /// get Process information. This operation return Process Type configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <returns>Task of ProcessScenario</returns>
        public async System.Threading.Tasks.Task<ProcessScenario> GetProcessAsync (string code)
        {
             ApiResponse<ProcessScenario> localVarResponse = await GetProcessAsyncWithHttpInfo(code);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get Process information. This operation return Process Type configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <returns>Task of ApiResponse (ProcessScenario)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessScenario>> GetProcessAsyncWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling TaxConfProcessApi->GetProcess");

            var localVarPath = "/taxconf/process/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessScenario>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessScenario) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessScenario)));
            
        }

        /// <summary>
        /// retrive list of Process. This operation return Process Type configurations that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">filter the configuration by accountID, if not informed, only the standard configuration will be returned  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inactive versions too  (optional)</param>
        /// <returns>List&lt;ProcessScenario&gt;</returns>
        public List<ProcessScenario> GetProcessList (string accountId = null, DateTime? date = null, bool? inactive = null)
        {
             ApiResponse<List<ProcessScenario>> localVarResponse = GetProcessListWithHttpInfo(accountId, date, inactive);
             return localVarResponse.Data;
        }

        /// <summary>
        /// retrive list of Process. This operation return Process Type configurations that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">filter the configuration by accountID, if not informed, only the standard configuration will be returned  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inactive versions too  (optional)</param>
        /// <returns>ApiResponse of List&lt;ProcessScenario&gt;</returns>
        public ApiResponse< List<ProcessScenario> > GetProcessListWithHttpInfo (string accountId = null, DateTime? date = null, bool? inactive = null)
        {

            var localVarPath = "/taxconf/process";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarQueryParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // query parameter
            if (date != null) localVarQueryParams.Add("date", Configuration.ApiClient.ParameterToString(date)); // query parameter
            if (inactive != null) localVarQueryParams.Add("inactive", Configuration.ApiClient.ParameterToString(inactive)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProcessScenario>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProcessScenario>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProcessScenario>)));
            
        }

        /// <summary>
        /// retrive list of Process. This operation return Process Type configurations that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">filter the configuration by accountID, if not informed, only the standard configuration will be returned  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inactive versions too  (optional)</param>
        /// <returns>Task of List&lt;ProcessScenario&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProcessScenario>> GetProcessListAsync (string accountId = null, DateTime? date = null, bool? inactive = null)
        {
             ApiResponse<List<ProcessScenario>> localVarResponse = await GetProcessListAsyncWithHttpInfo(accountId, date, inactive);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrive list of Process. This operation return Process Type configurations that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">filter the configuration by accountID, if not informed, only the standard configuration will be returned  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inactive versions too  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProcessScenario&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProcessScenario>>> GetProcessListAsyncWithHttpInfo (string accountId = null, DateTime? date = null, bool? inactive = null)
        {

            var localVarPath = "/taxconf/process";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarQueryParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // query parameter
            if (date != null) localVarQueryParams.Add("date", Configuration.ApiClient.ParameterToString(date)); // query parameter
            if (inactive != null) localVarQueryParams.Add("inactive", Configuration.ApiClient.ParameterToString(inactive)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProcessList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProcessScenario>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProcessScenario>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProcessScenario>)));
            
        }

        /// <summary>
        /// update a Process Type configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <param name="taxconfprocess">The pet JSON you want to post</param>
        /// <returns></returns>
        public void UpdateProcess (string code, ProcessScenario taxconfprocess)
        {
             UpdateProcessWithHttpInfo(code, taxconfprocess);
        }

        /// <summary>
        /// update a Process Type configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <param name="taxconfprocess">The pet JSON you want to post</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateProcessWithHttpInfo (string code, ProcessScenario taxconfprocess)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling TaxConfProcessApi->UpdateProcess");
            // verify the required parameter 'taxconfprocess' is set
            if (taxconfprocess == null)
                throw new ApiException(400, "Missing required parameter 'taxconfprocess' when calling TaxConfProcessApi->UpdateProcess");

            var localVarPath = "/taxconf/process/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (taxconfprocess != null && taxconfprocess.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taxconfprocess); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxconfprocess; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// update a Process Type configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <param name="taxconfprocess">The pet JSON you want to post</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProcessAsync (string code, ProcessScenario taxconfprocess)
        {
             await UpdateProcessAsyncWithHttpInfo(code, taxconfprocess);

        }

        /// <summary>
        /// update a Process Type configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Process Code</param>
        /// <param name="taxconfprocess">The pet JSON you want to post</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProcessAsyncWithHttpInfo (string code, ProcessScenario taxconfprocess)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling TaxConfProcessApi->UpdateProcess");
            // verify the required parameter 'taxconfprocess' is set
            if (taxconfprocess == null)
                throw new ApiException(400, "Missing required parameter 'taxconfprocess' when calling TaxConfProcessApi->UpdateProcess");

            var localVarPath = "/taxconf/process/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (taxconfprocess != null && taxconfprocess.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taxconfprocess); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taxconfprocess; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProcess", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
