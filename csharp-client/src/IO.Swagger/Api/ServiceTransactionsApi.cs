/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceTransactionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve a single transaction
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns></returns>
        void TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode);

        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve a single transaction
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode);
        /// <summary>
        /// Transaction State Transition
        /// </summary>
        /// <remarks>
        /// Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <param name="body">Transaction Message</param>
        /// <returns></returns>
        void TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode, StateTransition body);

        /// <summary>
        /// Transaction State Transition
        /// </summary>
        /// <remarks>
        /// Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode, StateTransition body);
        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <returns></returns>
        void TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet (string authorization, Guid? accountId, string companyCode, string transactionType);

        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType);
        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>PaymentTransactionOut</returns>
        PaymentTransactionOut TransactionsservicePaymentPost (string authorization, PaymentTransactionIn body);

        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of PaymentTransactionOut</returns>
        ApiResponse<PaymentTransactionOut> TransactionsservicePaymentPostWithHttpInfo (string authorization, PaymentTransactionIn body);
        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>PurchaseTransactionOut</returns>
        PurchaseTransactionOut TransactionsservicePurchasePost (string authorization, PurchaseTransactionIn body);

        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of PurchaseTransactionOut</returns>
        ApiResponse<PurchaseTransactionOut> TransactionsservicePurchasePostWithHttpInfo (string authorization, PurchaseTransactionIn body);
        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ReceiptTransactionOut</returns>
        ReceiptTransactionOut TransactionsserviceReceiptPost (string authorization, ReceiptTransactionIn body);

        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of ReceiptTransactionOut</returns>
        ApiResponse<ReceiptTransactionOut> TransactionsserviceReceiptPostWithHttpInfo (string authorization, ReceiptTransactionIn body);
        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>SalesTransactionOut</returns>
        SalesTransactionOut TransactionsserviceSalesPost (string authorization, SalesTransactionIn body);

        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of SalesTransactionOut</returns>
        ApiResponse<SalesTransactionOut> TransactionsserviceSalesPostWithHttpInfo (string authorization, SalesTransactionIn body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve a single transaction
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetAsync (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode);

        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve a single transaction
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetAsyncWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode);
        /// <summary>
        /// Transaction State Transition
        /// </summary>
        /// <remarks>
        /// Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostAsync (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode, StateTransition body);

        /// <summary>
        /// Transaction State Transition
        /// </summary>
        /// <remarks>
        /// Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostAsyncWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode, StateTransition body);
        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetAsync (string authorization, Guid? accountId, string companyCode, string transactionType);

        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetAsyncWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType);
        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of PaymentTransactionOut</returns>
        System.Threading.Tasks.Task<PaymentTransactionOut> TransactionsservicePaymentPostAsync (string authorization, PaymentTransactionIn body);

        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse (PaymentTransactionOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentTransactionOut>> TransactionsservicePaymentPostAsyncWithHttpInfo (string authorization, PaymentTransactionIn body);
        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of PurchaseTransactionOut</returns>
        System.Threading.Tasks.Task<PurchaseTransactionOut> TransactionsservicePurchasePostAsync (string authorization, PurchaseTransactionIn body);

        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse (PurchaseTransactionOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseTransactionOut>> TransactionsservicePurchasePostAsyncWithHttpInfo (string authorization, PurchaseTransactionIn body);
        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ReceiptTransactionOut</returns>
        System.Threading.Tasks.Task<ReceiptTransactionOut> TransactionsserviceReceiptPostAsync (string authorization, ReceiptTransactionIn body);

        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse (ReceiptTransactionOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReceiptTransactionOut>> TransactionsserviceReceiptPostAsyncWithHttpInfo (string authorization, ReceiptTransactionIn body);
        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of SalesTransactionOut</returns>
        System.Threading.Tasks.Task<SalesTransactionOut> TransactionsserviceSalesPostAsync (string authorization, SalesTransactionIn body);

        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse (SalesTransactionOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalesTransactionOut>> TransactionsserviceSalesPostAsyncWithHttpInfo (string authorization, SalesTransactionIn body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ServiceTransactionsApi : IServiceTransactionsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceTransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServiceTransactionsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceTransactionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServiceTransactionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve transactions Retrieve a single transaction
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns></returns>
        public void TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode)
        {
             TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithHttpInfo(authorization, accountId, companyCode, transactionType, documentCode);
        }

        /// <summary>
        /// Retrieve transactions Retrieve a single transaction
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
            // verify the required parameter 'companyCode' is set
            if (companyCode == null)
                throw new ApiException(400, "Missing required parameter 'companyCode' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
            // verify the required parameter 'transactionType' is set
            if (transactionType == null)
                throw new ApiException(400, "Missing required parameter 'transactionType' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
            // verify the required parameter 'documentCode' is set
            if (documentCode == null)
                throw new ApiException(400, "Missing required parameter 'documentCode' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");

            var localVarPath = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (companyCode != null) localVarPathParams.Add("companyCode", Configuration.ApiClient.ParameterToString(companyCode)); // path parameter
            if (transactionType != null) localVarPathParams.Add("transactionType", Configuration.ApiClient.ParameterToString(transactionType)); // path parameter
            if (documentCode != null) localVarPathParams.Add("documentCode", Configuration.ApiClient.ParameterToString(documentCode)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve transactions Retrieve a single transaction
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetAsync (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode)
        {
             await TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetAsyncWithHttpInfo(authorization, accountId, companyCode, transactionType, documentCode);

        }

        /// <summary>
        /// Retrieve transactions Retrieve a single transaction
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetAsyncWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
            // verify the required parameter 'companyCode' is set
            if (companyCode == null)
                throw new ApiException(400, "Missing required parameter 'companyCode' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
            // verify the required parameter 'transactionType' is set
            if (transactionType == null)
                throw new ApiException(400, "Missing required parameter 'transactionType' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
            // verify the required parameter 'documentCode' is set
            if (documentCode == null)
                throw new ApiException(400, "Missing required parameter 'documentCode' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");

            var localVarPath = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (companyCode != null) localVarPathParams.Add("companyCode", Configuration.ApiClient.ParameterToString(companyCode)); // path parameter
            if (transactionType != null) localVarPathParams.Add("transactionType", Configuration.ApiClient.ParameterToString(transactionType)); // path parameter
            if (documentCode != null) localVarPathParams.Add("documentCode", Configuration.ApiClient.ParameterToString(documentCode)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Transaction State Transition Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <param name="body">Transaction Message</param>
        /// <returns></returns>
        public void TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode, StateTransition body)
        {
             TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostWithHttpInfo(authorization, accountId, companyCode, transactionType, documentCode, body);
        }

        /// <summary>
        /// Transaction State Transition Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode, StateTransition body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost");
            // verify the required parameter 'companyCode' is set
            if (companyCode == null)
                throw new ApiException(400, "Missing required parameter 'companyCode' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost");
            // verify the required parameter 'transactionType' is set
            if (transactionType == null)
                throw new ApiException(400, "Missing required parameter 'transactionType' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost");
            // verify the required parameter 'documentCode' is set
            if (documentCode == null)
                throw new ApiException(400, "Missing required parameter 'documentCode' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost");

            var localVarPath = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/stateTransitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (companyCode != null) localVarPathParams.Add("companyCode", Configuration.ApiClient.ParameterToString(companyCode)); // path parameter
            if (transactionType != null) localVarPathParams.Add("transactionType", Configuration.ApiClient.ParameterToString(transactionType)); // path parameter
            if (documentCode != null) localVarPathParams.Add("documentCode", Configuration.ApiClient.ParameterToString(documentCode)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Transaction State Transition Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostAsync (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode, StateTransition body)
        {
             await TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostAsyncWithHttpInfo(authorization, accountId, companyCode, transactionType, documentCode, body);

        }

        /// <summary>
        /// Transaction State Transition Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostAsyncWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode, StateTransition body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost");
            // verify the required parameter 'companyCode' is set
            if (companyCode == null)
                throw new ApiException(400, "Missing required parameter 'companyCode' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost");
            // verify the required parameter 'transactionType' is set
            if (transactionType == null)
                throw new ApiException(400, "Missing required parameter 'transactionType' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost");
            // verify the required parameter 'documentCode' is set
            if (documentCode == null)
                throw new ApiException(400, "Missing required parameter 'documentCode' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost");

            var localVarPath = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/stateTransitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (companyCode != null) localVarPathParams.Add("companyCode", Configuration.ApiClient.ParameterToString(companyCode)); // path parameter
            if (transactionType != null) localVarPathParams.Add("transactionType", Configuration.ApiClient.ParameterToString(transactionType)); // path parameter
            if (documentCode != null) localVarPathParams.Add("documentCode", Configuration.ApiClient.ParameterToString(documentCode)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve transactions Retrieve a list of transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <returns></returns>
        public void TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet (string authorization, Guid? accountId, string companyCode, string transactionType)
        {
             TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithHttpInfo(authorization, accountId, companyCode, transactionType);
        }

        /// <summary>
        /// Retrieve transactions Retrieve a list of transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");
            // verify the required parameter 'companyCode' is set
            if (companyCode == null)
                throw new ApiException(400, "Missing required parameter 'companyCode' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");
            // verify the required parameter 'transactionType' is set
            if (transactionType == null)
                throw new ApiException(400, "Missing required parameter 'transactionType' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");

            var localVarPath = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (companyCode != null) localVarPathParams.Add("companyCode", Configuration.ApiClient.ParameterToString(companyCode)); // path parameter
            if (transactionType != null) localVarPathParams.Add("transactionType", Configuration.ApiClient.ParameterToString(transactionType)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve transactions Retrieve a list of transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetAsync (string authorization, Guid? accountId, string companyCode, string transactionType)
        {
             await TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetAsyncWithHttpInfo(authorization, accountId, companyCode, transactionType);

        }

        /// <summary>
        /// Retrieve transactions Retrieve a list of transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetAsyncWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");
            // verify the required parameter 'companyCode' is set
            if (companyCode == null)
                throw new ApiException(400, "Missing required parameter 'companyCode' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");
            // verify the required parameter 'transactionType' is set
            if (transactionType == null)
                throw new ApiException(400, "Missing required parameter 'transactionType' when calling ServiceTransactionsApi->TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");

            var localVarPath = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (companyCode != null) localVarPathParams.Add("companyCode", Configuration.ApiClient.ParameterToString(companyCode)); // path parameter
            if (transactionType != null) localVarPathParams.Add("transactionType", Configuration.ApiClient.ParameterToString(transactionType)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>PaymentTransactionOut</returns>
        public PaymentTransactionOut TransactionsservicePaymentPost (string authorization, PaymentTransactionIn body)
        {
             ApiResponse<PaymentTransactionOut> localVarResponse = TransactionsservicePaymentPostWithHttpInfo(authorization, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of PaymentTransactionOut</returns>
        public ApiResponse< PaymentTransactionOut > TransactionsservicePaymentPostWithHttpInfo (string authorization, PaymentTransactionIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceTransactionsApi->TransactionsservicePaymentPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceTransactionsApi->TransactionsservicePaymentPost");

            var localVarPath = "/transactions?service-payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsservicePaymentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentTransactionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentTransactionOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentTransactionOut)));
            
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of PaymentTransactionOut</returns>
        public async System.Threading.Tasks.Task<PaymentTransactionOut> TransactionsservicePaymentPostAsync (string authorization, PaymentTransactionIn body)
        {
             ApiResponse<PaymentTransactionOut> localVarResponse = await TransactionsservicePaymentPostAsyncWithHttpInfo(authorization, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse (PaymentTransactionOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentTransactionOut>> TransactionsservicePaymentPostAsyncWithHttpInfo (string authorization, PaymentTransactionIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceTransactionsApi->TransactionsservicePaymentPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceTransactionsApi->TransactionsservicePaymentPost");

            var localVarPath = "/transactions?service-payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsservicePaymentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentTransactionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentTransactionOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentTransactionOut)));
            
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>PurchaseTransactionOut</returns>
        public PurchaseTransactionOut TransactionsservicePurchasePost (string authorization, PurchaseTransactionIn body)
        {
             ApiResponse<PurchaseTransactionOut> localVarResponse = TransactionsservicePurchasePostWithHttpInfo(authorization, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of PurchaseTransactionOut</returns>
        public ApiResponse< PurchaseTransactionOut > TransactionsservicePurchasePostWithHttpInfo (string authorization, PurchaseTransactionIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceTransactionsApi->TransactionsservicePurchasePost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceTransactionsApi->TransactionsservicePurchasePost");

            var localVarPath = "/transactions?service-purchase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsservicePurchasePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PurchaseTransactionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PurchaseTransactionOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PurchaseTransactionOut)));
            
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of PurchaseTransactionOut</returns>
        public async System.Threading.Tasks.Task<PurchaseTransactionOut> TransactionsservicePurchasePostAsync (string authorization, PurchaseTransactionIn body)
        {
             ApiResponse<PurchaseTransactionOut> localVarResponse = await TransactionsservicePurchasePostAsyncWithHttpInfo(authorization, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse (PurchaseTransactionOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PurchaseTransactionOut>> TransactionsservicePurchasePostAsyncWithHttpInfo (string authorization, PurchaseTransactionIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceTransactionsApi->TransactionsservicePurchasePost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceTransactionsApi->TransactionsservicePurchasePost");

            var localVarPath = "/transactions?service-purchase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsservicePurchasePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PurchaseTransactionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PurchaseTransactionOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PurchaseTransactionOut)));
            
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ReceiptTransactionOut</returns>
        public ReceiptTransactionOut TransactionsserviceReceiptPost (string authorization, ReceiptTransactionIn body)
        {
             ApiResponse<ReceiptTransactionOut> localVarResponse = TransactionsserviceReceiptPostWithHttpInfo(authorization, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of ReceiptTransactionOut</returns>
        public ApiResponse< ReceiptTransactionOut > TransactionsserviceReceiptPostWithHttpInfo (string authorization, ReceiptTransactionIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceTransactionsApi->TransactionsserviceReceiptPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceTransactionsApi->TransactionsserviceReceiptPost");

            var localVarPath = "/transactions?service-receipt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsserviceReceiptPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReceiptTransactionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReceiptTransactionOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReceiptTransactionOut)));
            
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ReceiptTransactionOut</returns>
        public async System.Threading.Tasks.Task<ReceiptTransactionOut> TransactionsserviceReceiptPostAsync (string authorization, ReceiptTransactionIn body)
        {
             ApiResponse<ReceiptTransactionOut> localVarResponse = await TransactionsserviceReceiptPostAsyncWithHttpInfo(authorization, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse (ReceiptTransactionOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReceiptTransactionOut>> TransactionsserviceReceiptPostAsyncWithHttpInfo (string authorization, ReceiptTransactionIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceTransactionsApi->TransactionsserviceReceiptPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceTransactionsApi->TransactionsserviceReceiptPost");

            var localVarPath = "/transactions?service-receipt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsserviceReceiptPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReceiptTransactionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReceiptTransactionOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReceiptTransactionOut)));
            
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>SalesTransactionOut</returns>
        public SalesTransactionOut TransactionsserviceSalesPost (string authorization, SalesTransactionIn body)
        {
             ApiResponse<SalesTransactionOut> localVarResponse = TransactionsserviceSalesPostWithHttpInfo(authorization, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of SalesTransactionOut</returns>
        public ApiResponse< SalesTransactionOut > TransactionsserviceSalesPostWithHttpInfo (string authorization, SalesTransactionIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceTransactionsApi->TransactionsserviceSalesPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceTransactionsApi->TransactionsserviceSalesPost");

            var localVarPath = "/transactions?service-sales";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsserviceSalesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SalesTransactionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SalesTransactionOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SalesTransactionOut)));
            
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of SalesTransactionOut</returns>
        public async System.Threading.Tasks.Task<SalesTransactionOut> TransactionsserviceSalesPostAsync (string authorization, SalesTransactionIn body)
        {
             ApiResponse<SalesTransactionOut> localVarResponse = await TransactionsserviceSalesPostAsyncWithHttpInfo(authorization, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse (SalesTransactionOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SalesTransactionOut>> TransactionsserviceSalesPostAsyncWithHttpInfo (string authorization, SalesTransactionIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceTransactionsApi->TransactionsserviceSalesPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceTransactionsApi->TransactionsserviceSalesPost");

            var localVarPath = "/transactions?service-sales";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsserviceSalesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SalesTransactionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SalesTransactionOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SalesTransactionOut)));
            
        }

    }
}
