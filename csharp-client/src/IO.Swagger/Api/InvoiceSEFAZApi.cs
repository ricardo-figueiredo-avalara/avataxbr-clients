/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvoiceSEFAZApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Disable Range e-Invoice
        /// </summary>
        /// <remarks>
        /// Send disable range of NFes to SEFAZ 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Disable Range e-Invoice</param>
        /// <returns>SefazInvoiceBasicStatus</returns>
        SefazInvoiceBasicStatus InvoicesSefazDelete (string authorization, SefazDisableRangeIn body);

        /// <summary>
        /// Disable Range e-Invoice
        /// </summary>
        /// <remarks>
        /// Send disable range of NFes to SEFAZ 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Disable Range e-Invoice</param>
        /// <returns>ApiResponse of SefazInvoiceBasicStatus</returns>
        ApiResponse<SefazInvoiceBasicStatus> InvoicesSefazDeleteWithHttpInfo (string authorization, SefazDisableRangeIn body);
        /// <summary>
        /// Cancel invoice
        /// </summary>
        /// <remarks>
        /// Cancel the invoice
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <param name="body">Cancel Message</param>
        /// <returns>SefazInvoiceBasicStatus</returns>
        SefazInvoiceBasicStatus InvoicesSefazKeyDelete (string authorization, string key, SefazItDeleteIn body);

        /// <summary>
        /// Cancel invoice
        /// </summary>
        /// <remarks>
        /// Cancel the invoice
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <param name="body">Cancel Message</param>
        /// <returns>ApiResponse of SefazInvoiceBasicStatus</returns>
        ApiResponse<SefazInvoiceBasicStatus> InvoicesSefazKeyDeleteWithHttpInfo (string authorization, string key, SefazItDeleteIn body);
        /// <summary>
        /// Retrieve invoice
        /// </summary>
        /// <remarks>
        /// Retrieve the invoice
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <returns>SefazItGetOut</returns>
        SefazItGetOut InvoicesSefazKeyGet (string authorization, string key);

        /// <summary>
        /// Retrieve invoice
        /// </summary>
        /// <remarks>
        /// Retrieve the invoice
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <returns>ApiResponse of SefazItGetOut</returns>
        ApiResponse<SefazItGetOut> InvoicesSefazKeyGetWithHttpInfo (string authorization, string key);
        /// <summary>
        /// Retrieve invoice
        /// </summary>
        /// <remarks>
        /// Retrieve the invoice
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <returns>TransactionForSefazGoodsList</returns>
        TransactionForSefazGoodsList InvoicesSefazKeyLookupGet (string authorization, string key);

        /// <summary>
        /// Retrieve invoice
        /// </summary>
        /// <remarks>
        /// Retrieve the invoice
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <returns>ApiResponse of TransactionForSefazGoodsList</returns>
        ApiResponse<TransactionForSefazGoodsList> InvoicesSefazKeyLookupGetWithHttpInfo (string authorization, string key);
        /// <summary>
        /// Fix Letter
        /// </summary>
        /// <remarks>
        /// Fix Letter
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <param name="body">Fix Message</param>
        /// <returns>SefazInvoiceBasicStatus</returns>
        SefazInvoiceBasicStatus InvoicesSefazKeyPut (string authorization, string key, SefazItPutIn body);

        /// <summary>
        /// Fix Letter
        /// </summary>
        /// <remarks>
        /// Fix Letter
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <param name="body">Fix Message</param>
        /// <returns>ApiResponse of SefazInvoiceBasicStatus</returns>
        ApiResponse<SefazInvoiceBasicStatus> InvoicesSefazKeyPutWithHttpInfo (string authorization, string key, SefazItPutIn body);
        /// <summary>
        /// Send an e-Invoice
        /// </summary>
        /// <remarks>
        /// Send a invoice to SEFAZ 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Invoices</param>
        /// <returns>SefazPostOut</returns>
        SefazPostOut InvoicesSefazPost (string authorization, List<TransactionForSefazGoods> body);

        /// <summary>
        /// Send an e-Invoice
        /// </summary>
        /// <remarks>
        /// Send a invoice to SEFAZ 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Invoices</param>
        /// <returns>ApiResponse of SefazPostOut</returns>
        ApiResponse<SefazPostOut> InvoicesSefazPostWithHttpInfo (string authorization, List<TransactionForSefazGoods> body);
        /// <summary>
        /// Retrieve Status of SEFAZ Server
        /// </summary>
        /// <remarks>
        /// Retrieve Status of SEFAZ Server
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <returns>string</returns>
        string InvoicesSefazStatusGet (string authorization);

        /// <summary>
        /// Retrieve Status of SEFAZ Server
        /// </summary>
        /// <remarks>
        /// Retrieve Status of SEFAZ Server
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> InvoicesSefazStatusGetWithHttpInfo (string authorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Disable Range e-Invoice
        /// </summary>
        /// <remarks>
        /// Send disable range of NFes to SEFAZ 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Disable Range e-Invoice</param>
        /// <returns>Task of SefazInvoiceBasicStatus</returns>
        System.Threading.Tasks.Task<SefazInvoiceBasicStatus> InvoicesSefazDeleteAsync (string authorization, SefazDisableRangeIn body);

        /// <summary>
        /// Disable Range e-Invoice
        /// </summary>
        /// <remarks>
        /// Send disable range of NFes to SEFAZ 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Disable Range e-Invoice</param>
        /// <returns>Task of ApiResponse (SefazInvoiceBasicStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SefazInvoiceBasicStatus>> InvoicesSefazDeleteAsyncWithHttpInfo (string authorization, SefazDisableRangeIn body);
        /// <summary>
        /// Cancel invoice
        /// </summary>
        /// <remarks>
        /// Cancel the invoice
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <param name="body">Cancel Message</param>
        /// <returns>Task of SefazInvoiceBasicStatus</returns>
        System.Threading.Tasks.Task<SefazInvoiceBasicStatus> InvoicesSefazKeyDeleteAsync (string authorization, string key, SefazItDeleteIn body);

        /// <summary>
        /// Cancel invoice
        /// </summary>
        /// <remarks>
        /// Cancel the invoice
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <param name="body">Cancel Message</param>
        /// <returns>Task of ApiResponse (SefazInvoiceBasicStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SefazInvoiceBasicStatus>> InvoicesSefazKeyDeleteAsyncWithHttpInfo (string authorization, string key, SefazItDeleteIn body);
        /// <summary>
        /// Retrieve invoice
        /// </summary>
        /// <remarks>
        /// Retrieve the invoice
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <returns>Task of SefazItGetOut</returns>
        System.Threading.Tasks.Task<SefazItGetOut> InvoicesSefazKeyGetAsync (string authorization, string key);

        /// <summary>
        /// Retrieve invoice
        /// </summary>
        /// <remarks>
        /// Retrieve the invoice
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <returns>Task of ApiResponse (SefazItGetOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<SefazItGetOut>> InvoicesSefazKeyGetAsyncWithHttpInfo (string authorization, string key);
        /// <summary>
        /// Retrieve invoice
        /// </summary>
        /// <remarks>
        /// Retrieve the invoice
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <returns>Task of TransactionForSefazGoodsList</returns>
        System.Threading.Tasks.Task<TransactionForSefazGoodsList> InvoicesSefazKeyLookupGetAsync (string authorization, string key);

        /// <summary>
        /// Retrieve invoice
        /// </summary>
        /// <remarks>
        /// Retrieve the invoice
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <returns>Task of ApiResponse (TransactionForSefazGoodsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionForSefazGoodsList>> InvoicesSefazKeyLookupGetAsyncWithHttpInfo (string authorization, string key);
        /// <summary>
        /// Fix Letter
        /// </summary>
        /// <remarks>
        /// Fix Letter
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <param name="body">Fix Message</param>
        /// <returns>Task of SefazInvoiceBasicStatus</returns>
        System.Threading.Tasks.Task<SefazInvoiceBasicStatus> InvoicesSefazKeyPutAsync (string authorization, string key, SefazItPutIn body);

        /// <summary>
        /// Fix Letter
        /// </summary>
        /// <remarks>
        /// Fix Letter
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <param name="body">Fix Message</param>
        /// <returns>Task of ApiResponse (SefazInvoiceBasicStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SefazInvoiceBasicStatus>> InvoicesSefazKeyPutAsyncWithHttpInfo (string authorization, string key, SefazItPutIn body);
        /// <summary>
        /// Send an e-Invoice
        /// </summary>
        /// <remarks>
        /// Send a invoice to SEFAZ 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Invoices</param>
        /// <returns>Task of SefazPostOut</returns>
        System.Threading.Tasks.Task<SefazPostOut> InvoicesSefazPostAsync (string authorization, List<TransactionForSefazGoods> body);

        /// <summary>
        /// Send an e-Invoice
        /// </summary>
        /// <remarks>
        /// Send a invoice to SEFAZ 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Invoices</param>
        /// <returns>Task of ApiResponse (SefazPostOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<SefazPostOut>> InvoicesSefazPostAsyncWithHttpInfo (string authorization, List<TransactionForSefazGoods> body);
        /// <summary>
        /// Retrieve Status of SEFAZ Server
        /// </summary>
        /// <remarks>
        /// Retrieve Status of SEFAZ Server
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> InvoicesSefazStatusGetAsync (string authorization);

        /// <summary>
        /// Retrieve Status of SEFAZ Server
        /// </summary>
        /// <remarks>
        /// Retrieve Status of SEFAZ Server
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> InvoicesSefazStatusGetAsyncWithHttpInfo (string authorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InvoiceSEFAZApi : IInvoiceSEFAZApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceSEFAZApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvoiceSEFAZApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceSEFAZApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InvoiceSEFAZApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Disable Range e-Invoice Send disable range of NFes to SEFAZ 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Disable Range e-Invoice</param>
        /// <returns>SefazInvoiceBasicStatus</returns>
        public SefazInvoiceBasicStatus InvoicesSefazDelete (string authorization, SefazDisableRangeIn body)
        {
             ApiResponse<SefazInvoiceBasicStatus> localVarResponse = InvoicesSefazDeleteWithHttpInfo(authorization, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Disable Range e-Invoice Send disable range of NFes to SEFAZ 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Disable Range e-Invoice</param>
        /// <returns>ApiResponse of SefazInvoiceBasicStatus</returns>
        public ApiResponse< SefazInvoiceBasicStatus > InvoicesSefazDeleteWithHttpInfo (string authorization, SefazDisableRangeIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InvoiceSEFAZApi->InvoicesSefazDelete");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceSEFAZApi->InvoicesSefazDelete");

            var localVarPath = "/invoices/sefaz";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicesSefazDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SefazInvoiceBasicStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SefazInvoiceBasicStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SefazInvoiceBasicStatus)));
            
        }

        /// <summary>
        /// Disable Range e-Invoice Send disable range of NFes to SEFAZ 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Disable Range e-Invoice</param>
        /// <returns>Task of SefazInvoiceBasicStatus</returns>
        public async System.Threading.Tasks.Task<SefazInvoiceBasicStatus> InvoicesSefazDeleteAsync (string authorization, SefazDisableRangeIn body)
        {
             ApiResponse<SefazInvoiceBasicStatus> localVarResponse = await InvoicesSefazDeleteAsyncWithHttpInfo(authorization, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Disable Range e-Invoice Send disable range of NFes to SEFAZ 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Disable Range e-Invoice</param>
        /// <returns>Task of ApiResponse (SefazInvoiceBasicStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SefazInvoiceBasicStatus>> InvoicesSefazDeleteAsyncWithHttpInfo (string authorization, SefazDisableRangeIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InvoiceSEFAZApi->InvoicesSefazDelete");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceSEFAZApi->InvoicesSefazDelete");

            var localVarPath = "/invoices/sefaz";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicesSefazDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SefazInvoiceBasicStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SefazInvoiceBasicStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SefazInvoiceBasicStatus)));
            
        }

        /// <summary>
        /// Cancel invoice Cancel the invoice
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <param name="body">Cancel Message</param>
        /// <returns>SefazInvoiceBasicStatus</returns>
        public SefazInvoiceBasicStatus InvoicesSefazKeyDelete (string authorization, string key, SefazItDeleteIn body)
        {
             ApiResponse<SefazInvoiceBasicStatus> localVarResponse = InvoicesSefazKeyDeleteWithHttpInfo(authorization, key, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel invoice Cancel the invoice
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <param name="body">Cancel Message</param>
        /// <returns>ApiResponse of SefazInvoiceBasicStatus</returns>
        public ApiResponse< SefazInvoiceBasicStatus > InvoicesSefazKeyDeleteWithHttpInfo (string authorization, string key, SefazItDeleteIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InvoiceSEFAZApi->InvoicesSefazKeyDelete");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling InvoiceSEFAZApi->InvoicesSefazKeyDelete");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceSEFAZApi->InvoicesSefazKeyDelete");

            var localVarPath = "/invoices/sefaz/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicesSefazKeyDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SefazInvoiceBasicStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SefazInvoiceBasicStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SefazInvoiceBasicStatus)));
            
        }

        /// <summary>
        /// Cancel invoice Cancel the invoice
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <param name="body">Cancel Message</param>
        /// <returns>Task of SefazInvoiceBasicStatus</returns>
        public async System.Threading.Tasks.Task<SefazInvoiceBasicStatus> InvoicesSefazKeyDeleteAsync (string authorization, string key, SefazItDeleteIn body)
        {
             ApiResponse<SefazInvoiceBasicStatus> localVarResponse = await InvoicesSefazKeyDeleteAsyncWithHttpInfo(authorization, key, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel invoice Cancel the invoice
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <param name="body">Cancel Message</param>
        /// <returns>Task of ApiResponse (SefazInvoiceBasicStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SefazInvoiceBasicStatus>> InvoicesSefazKeyDeleteAsyncWithHttpInfo (string authorization, string key, SefazItDeleteIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InvoiceSEFAZApi->InvoicesSefazKeyDelete");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling InvoiceSEFAZApi->InvoicesSefazKeyDelete");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceSEFAZApi->InvoicesSefazKeyDelete");

            var localVarPath = "/invoices/sefaz/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicesSefazKeyDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SefazInvoiceBasicStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SefazInvoiceBasicStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SefazInvoiceBasicStatus)));
            
        }

        /// <summary>
        /// Retrieve invoice Retrieve the invoice
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <returns>SefazItGetOut</returns>
        public SefazItGetOut InvoicesSefazKeyGet (string authorization, string key)
        {
             ApiResponse<SefazItGetOut> localVarResponse = InvoicesSefazKeyGetWithHttpInfo(authorization, key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve invoice Retrieve the invoice
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <returns>ApiResponse of SefazItGetOut</returns>
        public ApiResponse< SefazItGetOut > InvoicesSefazKeyGetWithHttpInfo (string authorization, string key)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InvoiceSEFAZApi->InvoicesSefazKeyGet");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling InvoiceSEFAZApi->InvoicesSefazKeyGet");

            var localVarPath = "/invoices/sefaz/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicesSefazKeyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SefazItGetOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SefazItGetOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SefazItGetOut)));
            
        }

        /// <summary>
        /// Retrieve invoice Retrieve the invoice
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <returns>Task of SefazItGetOut</returns>
        public async System.Threading.Tasks.Task<SefazItGetOut> InvoicesSefazKeyGetAsync (string authorization, string key)
        {
             ApiResponse<SefazItGetOut> localVarResponse = await InvoicesSefazKeyGetAsyncWithHttpInfo(authorization, key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve invoice Retrieve the invoice
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <returns>Task of ApiResponse (SefazItGetOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SefazItGetOut>> InvoicesSefazKeyGetAsyncWithHttpInfo (string authorization, string key)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InvoiceSEFAZApi->InvoicesSefazKeyGet");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling InvoiceSEFAZApi->InvoicesSefazKeyGet");

            var localVarPath = "/invoices/sefaz/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicesSefazKeyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SefazItGetOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SefazItGetOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SefazItGetOut)));
            
        }

        /// <summary>
        /// Retrieve invoice Retrieve the invoice
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <returns>TransactionForSefazGoodsList</returns>
        public TransactionForSefazGoodsList InvoicesSefazKeyLookupGet (string authorization, string key)
        {
             ApiResponse<TransactionForSefazGoodsList> localVarResponse = InvoicesSefazKeyLookupGetWithHttpInfo(authorization, key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve invoice Retrieve the invoice
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <returns>ApiResponse of TransactionForSefazGoodsList</returns>
        public ApiResponse< TransactionForSefazGoodsList > InvoicesSefazKeyLookupGetWithHttpInfo (string authorization, string key)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InvoiceSEFAZApi->InvoicesSefazKeyLookupGet");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling InvoiceSEFAZApi->InvoicesSefazKeyLookupGet");

            var localVarPath = "/invoices/sefaz/{key}/lookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicesSefazKeyLookupGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionForSefazGoodsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionForSefazGoodsList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionForSefazGoodsList)));
            
        }

        /// <summary>
        /// Retrieve invoice Retrieve the invoice
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <returns>Task of TransactionForSefazGoodsList</returns>
        public async System.Threading.Tasks.Task<TransactionForSefazGoodsList> InvoicesSefazKeyLookupGetAsync (string authorization, string key)
        {
             ApiResponse<TransactionForSefazGoodsList> localVarResponse = await InvoicesSefazKeyLookupGetAsyncWithHttpInfo(authorization, key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve invoice Retrieve the invoice
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <returns>Task of ApiResponse (TransactionForSefazGoodsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionForSefazGoodsList>> InvoicesSefazKeyLookupGetAsyncWithHttpInfo (string authorization, string key)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InvoiceSEFAZApi->InvoicesSefazKeyLookupGet");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling InvoiceSEFAZApi->InvoicesSefazKeyLookupGet");

            var localVarPath = "/invoices/sefaz/{key}/lookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicesSefazKeyLookupGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionForSefazGoodsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionForSefazGoodsList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionForSefazGoodsList)));
            
        }

        /// <summary>
        /// Fix Letter Fix Letter
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <param name="body">Fix Message</param>
        /// <returns>SefazInvoiceBasicStatus</returns>
        public SefazInvoiceBasicStatus InvoicesSefazKeyPut (string authorization, string key, SefazItPutIn body)
        {
             ApiResponse<SefazInvoiceBasicStatus> localVarResponse = InvoicesSefazKeyPutWithHttpInfo(authorization, key, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fix Letter Fix Letter
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <param name="body">Fix Message</param>
        /// <returns>ApiResponse of SefazInvoiceBasicStatus</returns>
        public ApiResponse< SefazInvoiceBasicStatus > InvoicesSefazKeyPutWithHttpInfo (string authorization, string key, SefazItPutIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InvoiceSEFAZApi->InvoicesSefazKeyPut");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling InvoiceSEFAZApi->InvoicesSefazKeyPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceSEFAZApi->InvoicesSefazKeyPut");

            var localVarPath = "/invoices/sefaz/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicesSefazKeyPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SefazInvoiceBasicStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SefazInvoiceBasicStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SefazInvoiceBasicStatus)));
            
        }

        /// <summary>
        /// Fix Letter Fix Letter
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <param name="body">Fix Message</param>
        /// <returns>Task of SefazInvoiceBasicStatus</returns>
        public async System.Threading.Tasks.Task<SefazInvoiceBasicStatus> InvoicesSefazKeyPutAsync (string authorization, string key, SefazItPutIn body)
        {
             ApiResponse<SefazInvoiceBasicStatus> localVarResponse = await InvoicesSefazKeyPutAsyncWithHttpInfo(authorization, key, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fix Letter Fix Letter
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="key">Invoice Key</param>
        /// <param name="body">Fix Message</param>
        /// <returns>Task of ApiResponse (SefazInvoiceBasicStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SefazInvoiceBasicStatus>> InvoicesSefazKeyPutAsyncWithHttpInfo (string authorization, string key, SefazItPutIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InvoiceSEFAZApi->InvoicesSefazKeyPut");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling InvoiceSEFAZApi->InvoicesSefazKeyPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceSEFAZApi->InvoicesSefazKeyPut");

            var localVarPath = "/invoices/sefaz/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarPathParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicesSefazKeyPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SefazInvoiceBasicStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SefazInvoiceBasicStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SefazInvoiceBasicStatus)));
            
        }

        /// <summary>
        /// Send an e-Invoice Send a invoice to SEFAZ 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Invoices</param>
        /// <returns>SefazPostOut</returns>
        public SefazPostOut InvoicesSefazPost (string authorization, List<TransactionForSefazGoods> body)
        {
             ApiResponse<SefazPostOut> localVarResponse = InvoicesSefazPostWithHttpInfo(authorization, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send an e-Invoice Send a invoice to SEFAZ 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Invoices</param>
        /// <returns>ApiResponse of SefazPostOut</returns>
        public ApiResponse< SefazPostOut > InvoicesSefazPostWithHttpInfo (string authorization, List<TransactionForSefazGoods> body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InvoiceSEFAZApi->InvoicesSefazPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceSEFAZApi->InvoicesSefazPost");

            var localVarPath = "/invoices/sefaz";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicesSefazPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SefazPostOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SefazPostOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SefazPostOut)));
            
        }

        /// <summary>
        /// Send an e-Invoice Send a invoice to SEFAZ 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Invoices</param>
        /// <returns>Task of SefazPostOut</returns>
        public async System.Threading.Tasks.Task<SefazPostOut> InvoicesSefazPostAsync (string authorization, List<TransactionForSefazGoods> body)
        {
             ApiResponse<SefazPostOut> localVarResponse = await InvoicesSefazPostAsyncWithHttpInfo(authorization, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send an e-Invoice Send a invoice to SEFAZ 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Invoices</param>
        /// <returns>Task of ApiResponse (SefazPostOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SefazPostOut>> InvoicesSefazPostAsyncWithHttpInfo (string authorization, List<TransactionForSefazGoods> body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InvoiceSEFAZApi->InvoicesSefazPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InvoiceSEFAZApi->InvoicesSefazPost");

            var localVarPath = "/invoices/sefaz";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicesSefazPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SefazPostOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SefazPostOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SefazPostOut)));
            
        }

        /// <summary>
        /// Retrieve Status of SEFAZ Server Retrieve Status of SEFAZ Server
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <returns>string</returns>
        public string InvoicesSefazStatusGet (string authorization)
        {
             ApiResponse<string> localVarResponse = InvoicesSefazStatusGetWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Status of SEFAZ Server Retrieve Status of SEFAZ Server
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > InvoicesSefazStatusGetWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InvoiceSEFAZApi->InvoicesSefazStatusGet");

            var localVarPath = "/invoices/sefaz/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicesSefazStatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Retrieve Status of SEFAZ Server Retrieve Status of SEFAZ Server
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> InvoicesSefazStatusGetAsync (string authorization)
        {
             ApiResponse<string> localVarResponse = await InvoicesSefazStatusGetAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Status of SEFAZ Server Retrieve Status of SEFAZ Server
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> InvoicesSefazStatusGetAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InvoiceSEFAZApi->InvoicesSefazStatusGet");

            var localVarPath = "/invoices/sefaz/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoicesSefazStatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

    }
}
