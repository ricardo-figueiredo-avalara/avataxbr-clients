/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaxConfISSApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// create a new ISS Configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issConfByCity">The pet JSON you want to post</param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 CreateIssConfByCity (IssConfByCity issConfByCity);

        /// <summary>
        /// create a new ISS Configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issConfByCity">The pet JSON you want to post</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> CreateIssConfByCityWithHttpInfo (IssConfByCity issConfByCity);
        /// <summary>
        /// disable a ISS by City Code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <returns></returns>
        void DeleteIssConf (decimal? cityCode);

        /// <summary>
        /// disable a ISS by City Code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIssConfWithHttpInfo (decimal? cityCode);
        /// <summary>
        /// get ISS information by City Code.
        /// </summary>
        /// <remarks>
        /// This operation return configurations of ISS that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <param name="code">Identificator of this configuration, it is unique for account or standard namedspace  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inctives versions too  (optional)</param>
        /// <returns>List&lt;IssConfByCity&gt;</returns>
        List<IssConfByCity> GetIssConfByCity (decimal? cityCode, string code = null, DateTime? date = null, bool? inactive = null);

        /// <summary>
        /// get ISS information by City Code.
        /// </summary>
        /// <remarks>
        /// This operation return configurations of ISS that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <param name="code">Identificator of this configuration, it is unique for account or standard namedspace  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inctives versions too  (optional)</param>
        /// <returns>ApiResponse of List&lt;IssConfByCity&gt;</returns>
        ApiResponse<List<IssConfByCity>> GetIssConfByCityWithHttpInfo (decimal? cityCode, string code = null, DateTime? date = null, bool? inactive = null);
        /// <summary>
        /// retrive list of ISS
        /// </summary>
        /// <remarks>
        /// This operation return ISS configurations that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suffixcode">Identify this ISS  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inactive versions too  (optional)</param>
        /// <returns>List&lt;IssConfByCity&gt;</returns>
        List<IssConfByCity> GetIssList (string suffixcode = null, DateTime? date = null, bool? inactive = null);

        /// <summary>
        /// retrive list of ISS
        /// </summary>
        /// <remarks>
        /// This operation return ISS configurations that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suffixcode">Identify this ISS  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inactive versions too  (optional)</param>
        /// <returns>ApiResponse of List&lt;IssConfByCity&gt;</returns>
        ApiResponse<List<IssConfByCity>> GetIssListWithHttpInfo (string suffixcode = null, DateTime? date = null, bool? inactive = null);
        /// <summary>
        /// update a ISS by City Code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <param name="issConfByCity">The pet JSON you want to post</param>
        /// <returns></returns>
        void UpdateIssConfByCity (decimal? cityCode, IssConfByCity issConfByCity);

        /// <summary>
        /// update a ISS by City Code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <param name="issConfByCity">The pet JSON you want to post</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateIssConfByCityWithHttpInfo (decimal? cityCode, IssConfByCity issConfByCity);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// create a new ISS Configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issConfByCity">The pet JSON you want to post</param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> CreateIssConfByCityAsync (IssConfByCity issConfByCity);

        /// <summary>
        /// create a new ISS Configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issConfByCity">The pet JSON you want to post</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> CreateIssConfByCityAsyncWithHttpInfo (IssConfByCity issConfByCity);
        /// <summary>
        /// disable a ISS by City Code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteIssConfAsync (decimal? cityCode);

        /// <summary>
        /// disable a ISS by City Code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIssConfAsyncWithHttpInfo (decimal? cityCode);
        /// <summary>
        /// get ISS information by City Code.
        /// </summary>
        /// <remarks>
        /// This operation return configurations of ISS that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <param name="code">Identificator of this configuration, it is unique for account or standard namedspace  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inctives versions too  (optional)</param>
        /// <returns>Task of List&lt;IssConfByCity&gt;</returns>
        System.Threading.Tasks.Task<List<IssConfByCity>> GetIssConfByCityAsync (decimal? cityCode, string code = null, DateTime? date = null, bool? inactive = null);

        /// <summary>
        /// get ISS information by City Code.
        /// </summary>
        /// <remarks>
        /// This operation return configurations of ISS that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <param name="code">Identificator of this configuration, it is unique for account or standard namedspace  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inctives versions too  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IssConfByCity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IssConfByCity>>> GetIssConfByCityAsyncWithHttpInfo (decimal? cityCode, string code = null, DateTime? date = null, bool? inactive = null);
        /// <summary>
        /// retrive list of ISS
        /// </summary>
        /// <remarks>
        /// This operation return ISS configurations that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suffixcode">Identify this ISS  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inactive versions too  (optional)</param>
        /// <returns>Task of List&lt;IssConfByCity&gt;</returns>
        System.Threading.Tasks.Task<List<IssConfByCity>> GetIssListAsync (string suffixcode = null, DateTime? date = null, bool? inactive = null);

        /// <summary>
        /// retrive list of ISS
        /// </summary>
        /// <remarks>
        /// This operation return ISS configurations that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suffixcode">Identify this ISS  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inactive versions too  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IssConfByCity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IssConfByCity>>> GetIssListAsyncWithHttpInfo (string suffixcode = null, DateTime? date = null, bool? inactive = null);
        /// <summary>
        /// update a ISS by City Code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <param name="issConfByCity">The pet JSON you want to post</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateIssConfByCityAsync (decimal? cityCode, IssConfByCity issConfByCity);

        /// <summary>
        /// update a ISS by City Code.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <param name="issConfByCity">The pet JSON you want to post</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateIssConfByCityAsyncWithHttpInfo (decimal? cityCode, IssConfByCity issConfByCity);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaxConfISSApi : ITaxConfISSApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxConfISSApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaxConfISSApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxConfISSApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaxConfISSApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// create a new ISS Configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issConfByCity">The pet JSON you want to post</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 CreateIssConfByCity (IssConfByCity issConfByCity)
        {
             ApiResponse<InlineResponse201> localVarResponse = CreateIssConfByCityWithHttpInfo(issConfByCity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create a new ISS Configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issConfByCity">The pet JSON you want to post</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse< InlineResponse201 > CreateIssConfByCityWithHttpInfo (IssConfByCity issConfByCity)
        {
            // verify the required parameter 'issConfByCity' is set
            if (issConfByCity == null)
                throw new ApiException(400, "Missing required parameter 'issConfByCity' when calling TaxConfISSApi->CreateIssConfByCity");

            var localVarPath = "/taxconf/iss";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (issConfByCity != null && issConfByCity.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(issConfByCity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = issConfByCity; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIssConfByCity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse201) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
            
        }

        /// <summary>
        /// create a new ISS Configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issConfByCity">The pet JSON you want to post</param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201> CreateIssConfByCityAsync (IssConfByCity issConfByCity)
        {
             ApiResponse<InlineResponse201> localVarResponse = await CreateIssConfByCityAsyncWithHttpInfo(issConfByCity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create a new ISS Configuration 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issConfByCity">The pet JSON you want to post</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> CreateIssConfByCityAsyncWithHttpInfo (IssConfByCity issConfByCity)
        {
            // verify the required parameter 'issConfByCity' is set
            if (issConfByCity == null)
                throw new ApiException(400, "Missing required parameter 'issConfByCity' when calling TaxConfISSApi->CreateIssConfByCity");

            var localVarPath = "/taxconf/iss";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (issConfByCity != null && issConfByCity.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(issConfByCity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = issConfByCity; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateIssConfByCity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse201) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
            
        }

        /// <summary>
        /// disable a ISS by City Code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <returns></returns>
        public void DeleteIssConf (decimal? cityCode)
        {
             DeleteIssConfWithHttpInfo(cityCode);
        }

        /// <summary>
        /// disable a ISS by City Code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteIssConfWithHttpInfo (decimal? cityCode)
        {
            // verify the required parameter 'cityCode' is set
            if (cityCode == null)
                throw new ApiException(400, "Missing required parameter 'cityCode' when calling TaxConfISSApi->DeleteIssConf");

            var localVarPath = "/taxconf/iss/{cityCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (cityCode != null) localVarPathParams.Add("cityCode", Configuration.ApiClient.ParameterToString(cityCode)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIssConf", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// disable a ISS by City Code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteIssConfAsync (decimal? cityCode)
        {
             await DeleteIssConfAsyncWithHttpInfo(cityCode);

        }

        /// <summary>
        /// disable a ISS by City Code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIssConfAsyncWithHttpInfo (decimal? cityCode)
        {
            // verify the required parameter 'cityCode' is set
            if (cityCode == null)
                throw new ApiException(400, "Missing required parameter 'cityCode' when calling TaxConfISSApi->DeleteIssConf");

            var localVarPath = "/taxconf/iss/{cityCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (cityCode != null) localVarPathParams.Add("cityCode", Configuration.ApiClient.ParameterToString(cityCode)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteIssConf", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// get ISS information by City Code. This operation return configurations of ISS that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <param name="code">Identificator of this configuration, it is unique for account or standard namedspace  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inctives versions too  (optional)</param>
        /// <returns>List&lt;IssConfByCity&gt;</returns>
        public List<IssConfByCity> GetIssConfByCity (decimal? cityCode, string code = null, DateTime? date = null, bool? inactive = null)
        {
             ApiResponse<List<IssConfByCity>> localVarResponse = GetIssConfByCityWithHttpInfo(cityCode, code, date, inactive);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get ISS information by City Code. This operation return configurations of ISS that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <param name="code">Identificator of this configuration, it is unique for account or standard namedspace  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inctives versions too  (optional)</param>
        /// <returns>ApiResponse of List&lt;IssConfByCity&gt;</returns>
        public ApiResponse< List<IssConfByCity> > GetIssConfByCityWithHttpInfo (decimal? cityCode, string code = null, DateTime? date = null, bool? inactive = null)
        {
            // verify the required parameter 'cityCode' is set
            if (cityCode == null)
                throw new ApiException(400, "Missing required parameter 'cityCode' when calling TaxConfISSApi->GetIssConfByCity");

            var localVarPath = "/taxconf/iss/{cityCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (cityCode != null) localVarPathParams.Add("cityCode", Configuration.ApiClient.ParameterToString(cityCode)); // path parameter
            if (code != null) localVarQueryParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // query parameter
            if (date != null) localVarQueryParams.Add("date", Configuration.ApiClient.ParameterToString(date)); // query parameter
            if (inactive != null) localVarQueryParams.Add("inactive", Configuration.ApiClient.ParameterToString(inactive)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIssConfByCity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IssConfByCity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IssConfByCity>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IssConfByCity>)));
            
        }

        /// <summary>
        /// get ISS information by City Code. This operation return configurations of ISS that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <param name="code">Identificator of this configuration, it is unique for account or standard namedspace  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inctives versions too  (optional)</param>
        /// <returns>Task of List&lt;IssConfByCity&gt;</returns>
        public async System.Threading.Tasks.Task<List<IssConfByCity>> GetIssConfByCityAsync (decimal? cityCode, string code = null, DateTime? date = null, bool? inactive = null)
        {
             ApiResponse<List<IssConfByCity>> localVarResponse = await GetIssConfByCityAsyncWithHttpInfo(cityCode, code, date, inactive);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get ISS information by City Code. This operation return configurations of ISS that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <param name="code">Identificator of this configuration, it is unique for account or standard namedspace  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inctives versions too  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IssConfByCity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IssConfByCity>>> GetIssConfByCityAsyncWithHttpInfo (decimal? cityCode, string code = null, DateTime? date = null, bool? inactive = null)
        {
            // verify the required parameter 'cityCode' is set
            if (cityCode == null)
                throw new ApiException(400, "Missing required parameter 'cityCode' when calling TaxConfISSApi->GetIssConfByCity");

            var localVarPath = "/taxconf/iss/{cityCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (cityCode != null) localVarPathParams.Add("cityCode", Configuration.ApiClient.ParameterToString(cityCode)); // path parameter
            if (code != null) localVarQueryParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // query parameter
            if (date != null) localVarQueryParams.Add("date", Configuration.ApiClient.ParameterToString(date)); // query parameter
            if (inactive != null) localVarQueryParams.Add("inactive", Configuration.ApiClient.ParameterToString(inactive)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIssConfByCity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IssConfByCity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IssConfByCity>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IssConfByCity>)));
            
        }

        /// <summary>
        /// retrive list of ISS This operation return ISS configurations that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suffixcode">Identify this ISS  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inactive versions too  (optional)</param>
        /// <returns>List&lt;IssConfByCity&gt;</returns>
        public List<IssConfByCity> GetIssList (string suffixcode = null, DateTime? date = null, bool? inactive = null)
        {
             ApiResponse<List<IssConfByCity>> localVarResponse = GetIssListWithHttpInfo(suffixcode, date, inactive);
             return localVarResponse.Data;
        }

        /// <summary>
        /// retrive list of ISS This operation return ISS configurations that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suffixcode">Identify this ISS  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inactive versions too  (optional)</param>
        /// <returns>ApiResponse of List&lt;IssConfByCity&gt;</returns>
        public ApiResponse< List<IssConfByCity> > GetIssListWithHttpInfo (string suffixcode = null, DateTime? date = null, bool? inactive = null)
        {

            var localVarPath = "/taxconf/iss";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (suffixcode != null) localVarQueryParams.Add("suffixcode", Configuration.ApiClient.ParameterToString(suffixcode)); // query parameter
            if (date != null) localVarQueryParams.Add("date", Configuration.ApiClient.ParameterToString(date)); // query parameter
            if (inactive != null) localVarQueryParams.Add("inactive", Configuration.ApiClient.ParameterToString(inactive)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIssList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IssConfByCity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IssConfByCity>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IssConfByCity>)));
            
        }

        /// <summary>
        /// retrive list of ISS This operation return ISS configurations that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suffixcode">Identify this ISS  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inactive versions too  (optional)</param>
        /// <returns>Task of List&lt;IssConfByCity&gt;</returns>
        public async System.Threading.Tasks.Task<List<IssConfByCity>> GetIssListAsync (string suffixcode = null, DateTime? date = null, bool? inactive = null)
        {
             ApiResponse<List<IssConfByCity>> localVarResponse = await GetIssListAsyncWithHttpInfo(suffixcode, date, inactive);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retrive list of ISS This operation return ISS configurations that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suffixcode">Identify this ISS  (optional)</param>
        /// <param name="date">When informed return valid version configuration for this date  (optional)</param>
        /// <param name="inactive">return the inactive versions too  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IssConfByCity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IssConfByCity>>> GetIssListAsyncWithHttpInfo (string suffixcode = null, DateTime? date = null, bool? inactive = null)
        {

            var localVarPath = "/taxconf/iss";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (suffixcode != null) localVarQueryParams.Add("suffixcode", Configuration.ApiClient.ParameterToString(suffixcode)); // query parameter
            if (date != null) localVarQueryParams.Add("date", Configuration.ApiClient.ParameterToString(date)); // query parameter
            if (inactive != null) localVarQueryParams.Add("inactive", Configuration.ApiClient.ParameterToString(inactive)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIssList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IssConfByCity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IssConfByCity>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IssConfByCity>)));
            
        }

        /// <summary>
        /// update a ISS by City Code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <param name="issConfByCity">The pet JSON you want to post</param>
        /// <returns></returns>
        public void UpdateIssConfByCity (decimal? cityCode, IssConfByCity issConfByCity)
        {
             UpdateIssConfByCityWithHttpInfo(cityCode, issConfByCity);
        }

        /// <summary>
        /// update a ISS by City Code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <param name="issConfByCity">The pet JSON you want to post</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateIssConfByCityWithHttpInfo (decimal? cityCode, IssConfByCity issConfByCity)
        {
            // verify the required parameter 'cityCode' is set
            if (cityCode == null)
                throw new ApiException(400, "Missing required parameter 'cityCode' when calling TaxConfISSApi->UpdateIssConfByCity");
            // verify the required parameter 'issConfByCity' is set
            if (issConfByCity == null)
                throw new ApiException(400, "Missing required parameter 'issConfByCity' when calling TaxConfISSApi->UpdateIssConfByCity");

            var localVarPath = "/taxconf/iss/{cityCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (cityCode != null) localVarPathParams.Add("cityCode", Configuration.ApiClient.ParameterToString(cityCode)); // path parameter
            if (issConfByCity != null && issConfByCity.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(issConfByCity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = issConfByCity; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIssConfByCity", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// update a ISS by City Code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <param name="issConfByCity">The pet JSON you want to post</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateIssConfByCityAsync (decimal? cityCode, IssConfByCity issConfByCity)
        {
             await UpdateIssConfByCityAsyncWithHttpInfo(cityCode, issConfByCity);

        }

        /// <summary>
        /// update a ISS by City Code. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cityCode">City Code</param>
        /// <param name="issConfByCity">The pet JSON you want to post</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateIssConfByCityAsyncWithHttpInfo (decimal? cityCode, IssConfByCity issConfByCity)
        {
            // verify the required parameter 'cityCode' is set
            if (cityCode == null)
                throw new ApiException(400, "Missing required parameter 'cityCode' when calling TaxConfISSApi->UpdateIssConfByCity");
            // verify the required parameter 'issConfByCity' is set
            if (issConfByCity == null)
                throw new ApiException(400, "Missing required parameter 'issConfByCity' when calling TaxConfISSApi->UpdateIssConfByCity");

            var localVarPath = "/taxconf/iss/{cityCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (cityCode != null) localVarPathParams.Add("cityCode", Configuration.ApiClient.ParameterToString(cityCode)); // path parameter
            if (issConfByCity != null && issConfByCity.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(issConfByCity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = issConfByCity; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateIssConfByCity", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
