/* 
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompanyItemGoodsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change the code of a given item. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="body">Requisition</param>
        /// <param name="goods">Provide to apply to goods items. (optional)</param>
        /// <param name="service">Provide to apply to service items. (optional)</param>
        /// <returns></returns>
        void CompaniesCompanyIdItemsCodeChangeCodePut (Guid? companyId, string code, Body1 body, string goods = null, string service = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change the code of a given item. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="body">Requisition</param>
        /// <param name="goods">Provide to apply to goods items. (optional)</param>
        /// <param name="service">Provide to apply to service items. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CompaniesCompanyIdItemsCodeChangeCodePutWithHttpInfo (Guid? companyId, string code, Body1 body, string goods = null, string service = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This operation return custom agast configurations that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="agast">Custom Agast Code (optional)</param>
        /// <returns>ItemGoods</returns>
        ItemGoods CompaniesCompanyIdItemsCodegoodsGet (Guid? companyId, string code, string avalaraProductType, string agast = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This operation return custom agast configurations that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="agast">Custom Agast Code (optional)</param>
        /// <returns>ApiResponse of ItemGoods</returns>
        ApiResponse<ItemGoods> CompaniesCompanyIdItemsCodegoodsGetWithHttpInfo (Guid? companyId, string code, string avalaraProductType, string agast = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This operation return custom agast configurations that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="xPaginationLimit">The per page limit. Currently set to 10 but subject to change at any time (max 100). (optional, default to 10)</param>
        /// <param name="xPaginationCurrentPage">The current page. Defaults to 1. (optional, default to 1)</param>
        /// <param name="xPaginationSort"> (optional)</param>
        /// <param name="code">Item Code (optional)</param>
        /// <param name="agast">Custom Agast Code (optional)</param>
        /// <returns>List&lt;ItemGoods&gt;</returns>
        List<ItemGoods> CompaniesCompanyIdItemsgoodsGet (Guid? companyId, string avalaraProductType, int? xPaginationLimit = null, int? xPaginationCurrentPage = null, string xPaginationSort = null, string code = null, string agast = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This operation return custom agast configurations that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="xPaginationLimit">The per page limit. Currently set to 10 but subject to change at any time (max 100). (optional, default to 10)</param>
        /// <param name="xPaginationCurrentPage">The current page. Defaults to 1. (optional, default to 1)</param>
        /// <param name="xPaginationSort"> (optional)</param>
        /// <param name="code">Item Code (optional)</param>
        /// <param name="agast">Custom Agast Code (optional)</param>
        /// <returns>ApiResponse of List&lt;ItemGoods&gt;</returns>
        ApiResponse<List<ItemGoods>> CompaniesCompanyIdItemsgoodsGetWithHttpInfo (Guid? companyId, string avalaraProductType, int? xPaginationLimit = null, int? xPaginationCurrentPage = null, string xPaginationSort = null, string code = null, string agast = null);
        /// <summary>
        /// Create custom agast for one company
        /// </summary>
        /// <remarks>
        /// This method operation create a custom agast for one company 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 CreateItem (Guid? companyId, string avalaraProductType, ItemGoods body);

        /// <summary>
        /// Create custom agast for one company
        /// </summary>
        /// <remarks>
        /// This method operation create a custom agast for one company 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> CreateItemWithHttpInfo (Guid? companyId, string avalaraProductType, ItemGoods body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <returns></returns>
        void DeleteItem (Guid? companyId, string code, string avalaraProductType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemWithHttpInfo (Guid? companyId, string code, string avalaraProductType);
        /// <summary>
        /// Update custom agast for one company
        /// </summary>
        /// <remarks>
        /// This method operation create a custom agast for one company 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="body">Transaction Message</param>
        /// <returns></returns>
        void UpdateItem (Guid? companyId, string code, string avalaraProductType, ItemGoods body);

        /// <summary>
        /// Update custom agast for one company
        /// </summary>
        /// <remarks>
        /// This method operation create a custom agast for one company 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateItemWithHttpInfo (Guid? companyId, string code, string avalaraProductType, ItemGoods body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change the code of a given item. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="body">Requisition</param>
        /// <param name="goods">Provide to apply to goods items. (optional)</param>
        /// <param name="service">Provide to apply to service items. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CompaniesCompanyIdItemsCodeChangeCodePutAsync (Guid? companyId, string code, Body1 body, string goods = null, string service = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Change the code of a given item. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="body">Requisition</param>
        /// <param name="goods">Provide to apply to goods items. (optional)</param>
        /// <param name="service">Provide to apply to service items. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CompaniesCompanyIdItemsCodeChangeCodePutAsyncWithHttpInfo (Guid? companyId, string code, Body1 body, string goods = null, string service = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This operation return custom agast configurations that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="agast">Custom Agast Code (optional)</param>
        /// <returns>Task of ItemGoods</returns>
        System.Threading.Tasks.Task<ItemGoods> CompaniesCompanyIdItemsCodegoodsGetAsync (Guid? companyId, string code, string avalaraProductType, string agast = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This operation return custom agast configurations that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="agast">Custom Agast Code (optional)</param>
        /// <returns>Task of ApiResponse (ItemGoods)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemGoods>> CompaniesCompanyIdItemsCodegoodsGetAsyncWithHttpInfo (Guid? companyId, string code, string avalaraProductType, string agast = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This operation return custom agast configurations that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="xPaginationLimit">The per page limit. Currently set to 10 but subject to change at any time (max 100). (optional, default to 10)</param>
        /// <param name="xPaginationCurrentPage">The current page. Defaults to 1. (optional, default to 1)</param>
        /// <param name="xPaginationSort"> (optional)</param>
        /// <param name="code">Item Code (optional)</param>
        /// <param name="agast">Custom Agast Code (optional)</param>
        /// <returns>Task of List&lt;ItemGoods&gt;</returns>
        System.Threading.Tasks.Task<List<ItemGoods>> CompaniesCompanyIdItemsgoodsGetAsync (Guid? companyId, string avalaraProductType, int? xPaginationLimit = null, int? xPaginationCurrentPage = null, string xPaginationSort = null, string code = null, string agast = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This operation return custom agast configurations that match with parameters queries 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="xPaginationLimit">The per page limit. Currently set to 10 but subject to change at any time (max 100). (optional, default to 10)</param>
        /// <param name="xPaginationCurrentPage">The current page. Defaults to 1. (optional, default to 1)</param>
        /// <param name="xPaginationSort"> (optional)</param>
        /// <param name="code">Item Code (optional)</param>
        /// <param name="agast">Custom Agast Code (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ItemGoods&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ItemGoods>>> CompaniesCompanyIdItemsgoodsGetAsyncWithHttpInfo (Guid? companyId, string avalaraProductType, int? xPaginationLimit = null, int? xPaginationCurrentPage = null, string xPaginationSort = null, string code = null, string agast = null);
        /// <summary>
        /// Create custom agast for one company
        /// </summary>
        /// <remarks>
        /// This method operation create a custom agast for one company 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> CreateItemAsync (Guid? companyId, string avalaraProductType, ItemGoods body);

        /// <summary>
        /// Create custom agast for one company
        /// </summary>
        /// <remarks>
        /// This method operation create a custom agast for one company 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> CreateItemAsyncWithHttpInfo (Guid? companyId, string avalaraProductType, ItemGoods body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemAsync (Guid? companyId, string code, string avalaraProductType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemAsyncWithHttpInfo (Guid? companyId, string code, string avalaraProductType);
        /// <summary>
        /// Update custom agast for one company
        /// </summary>
        /// <remarks>
        /// This method operation create a custom agast for one company 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateItemAsync (Guid? companyId, string code, string avalaraProductType, ItemGoods body);

        /// <summary>
        /// Update custom agast for one company
        /// </summary>
        /// <remarks>
        /// This method operation create a custom agast for one company 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateItemAsyncWithHttpInfo (Guid? companyId, string code, string avalaraProductType, ItemGoods body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CompanyItemGoodsApi : ICompanyItemGoodsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyItemGoodsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CompanyItemGoodsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyItemGoodsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CompanyItemGoodsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Change the code of a given item. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="body">Requisition</param>
        /// <param name="goods">Provide to apply to goods items. (optional)</param>
        /// <param name="service">Provide to apply to service items. (optional)</param>
        /// <returns></returns>
        public void CompaniesCompanyIdItemsCodeChangeCodePut (Guid? companyId, string code, Body1 body, string goods = null, string service = null)
        {
             CompaniesCompanyIdItemsCodeChangeCodePutWithHttpInfo(companyId, code, body, goods, service);
        }

        /// <summary>
        ///  Change the code of a given item. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="body">Requisition</param>
        /// <param name="goods">Provide to apply to goods items. (optional)</param>
        /// <param name="service">Provide to apply to service items. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CompaniesCompanyIdItemsCodeChangeCodePutWithHttpInfo (Guid? companyId, string code, Body1 body, string goods = null, string service = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling CompanyItemGoodsApi->CompaniesCompanyIdItemsCodeChangeCodePut");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CompanyItemGoodsApi->CompaniesCompanyIdItemsCodeChangeCodePut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CompanyItemGoodsApi->CompaniesCompanyIdItemsCodeChangeCodePut");

            var localVarPath = "/companies/{companyId}/items/{code}/change-code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyId != null) localVarPathParams.Add("companyId", Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (goods != null) localVarQueryParams.Add("goods", Configuration.ApiClient.ParameterToString(goods)); // query parameter
            if (service != null) localVarQueryParams.Add("service", Configuration.ApiClient.ParameterToString(service)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyIdItemsCodeChangeCodePut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Change the code of a given item. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="body">Requisition</param>
        /// <param name="goods">Provide to apply to goods items. (optional)</param>
        /// <param name="service">Provide to apply to service items. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CompaniesCompanyIdItemsCodeChangeCodePutAsync (Guid? companyId, string code, Body1 body, string goods = null, string service = null)
        {
             await CompaniesCompanyIdItemsCodeChangeCodePutAsyncWithHttpInfo(companyId, code, body, goods, service);

        }

        /// <summary>
        ///  Change the code of a given item. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="body">Requisition</param>
        /// <param name="goods">Provide to apply to goods items. (optional)</param>
        /// <param name="service">Provide to apply to service items. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CompaniesCompanyIdItemsCodeChangeCodePutAsyncWithHttpInfo (Guid? companyId, string code, Body1 body, string goods = null, string service = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling CompanyItemGoodsApi->CompaniesCompanyIdItemsCodeChangeCodePut");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CompanyItemGoodsApi->CompaniesCompanyIdItemsCodeChangeCodePut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CompanyItemGoodsApi->CompaniesCompanyIdItemsCodeChangeCodePut");

            var localVarPath = "/companies/{companyId}/items/{code}/change-code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyId != null) localVarPathParams.Add("companyId", Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (goods != null) localVarQueryParams.Add("goods", Configuration.ApiClient.ParameterToString(goods)); // query parameter
            if (service != null) localVarQueryParams.Add("service", Configuration.ApiClient.ParameterToString(service)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyIdItemsCodeChangeCodePut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This operation return custom agast configurations that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="agast">Custom Agast Code (optional)</param>
        /// <returns>ItemGoods</returns>
        public ItemGoods CompaniesCompanyIdItemsCodegoodsGet (Guid? companyId, string code, string avalaraProductType, string agast = null)
        {
             ApiResponse<ItemGoods> localVarResponse = CompaniesCompanyIdItemsCodegoodsGetWithHttpInfo(companyId, code, avalaraProductType, agast);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This operation return custom agast configurations that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="agast">Custom Agast Code (optional)</param>
        /// <returns>ApiResponse of ItemGoods</returns>
        public ApiResponse< ItemGoods > CompaniesCompanyIdItemsCodegoodsGetWithHttpInfo (Guid? companyId, string code, string avalaraProductType, string agast = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling CompanyItemGoodsApi->CompaniesCompanyIdItemsCodegoodsGet");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CompanyItemGoodsApi->CompaniesCompanyIdItemsCodegoodsGet");
            // verify the required parameter 'avalaraProductType' is set
            if (avalaraProductType == null)
                throw new ApiException(400, "Missing required parameter 'avalaraProductType' when calling CompanyItemGoodsApi->CompaniesCompanyIdItemsCodegoodsGet");

            var localVarPath = "/companies/{companyId}/items/{code}?goods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyId != null) localVarPathParams.Add("companyId", Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (agast != null) localVarQueryParams.Add("agast", Configuration.ApiClient.ParameterToString(agast)); // query parameter
            if (avalaraProductType != null) localVarHeaderParams.Add("Avalara-Product-Type", Configuration.ApiClient.ParameterToString(avalaraProductType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyIdItemsCodegoodsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemGoods>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemGoods) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemGoods)));
            
        }

        /// <summary>
        ///  This operation return custom agast configurations that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="agast">Custom Agast Code (optional)</param>
        /// <returns>Task of ItemGoods</returns>
        public async System.Threading.Tasks.Task<ItemGoods> CompaniesCompanyIdItemsCodegoodsGetAsync (Guid? companyId, string code, string avalaraProductType, string agast = null)
        {
             ApiResponse<ItemGoods> localVarResponse = await CompaniesCompanyIdItemsCodegoodsGetAsyncWithHttpInfo(companyId, code, avalaraProductType, agast);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This operation return custom agast configurations that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="agast">Custom Agast Code (optional)</param>
        /// <returns>Task of ApiResponse (ItemGoods)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemGoods>> CompaniesCompanyIdItemsCodegoodsGetAsyncWithHttpInfo (Guid? companyId, string code, string avalaraProductType, string agast = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling CompanyItemGoodsApi->CompaniesCompanyIdItemsCodegoodsGet");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CompanyItemGoodsApi->CompaniesCompanyIdItemsCodegoodsGet");
            // verify the required parameter 'avalaraProductType' is set
            if (avalaraProductType == null)
                throw new ApiException(400, "Missing required parameter 'avalaraProductType' when calling CompanyItemGoodsApi->CompaniesCompanyIdItemsCodegoodsGet");

            var localVarPath = "/companies/{companyId}/items/{code}?goods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyId != null) localVarPathParams.Add("companyId", Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (agast != null) localVarQueryParams.Add("agast", Configuration.ApiClient.ParameterToString(agast)); // query parameter
            if (avalaraProductType != null) localVarHeaderParams.Add("Avalara-Product-Type", Configuration.ApiClient.ParameterToString(avalaraProductType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyIdItemsCodegoodsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemGoods>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemGoods) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemGoods)));
            
        }

        /// <summary>
        ///  This operation return custom agast configurations that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="xPaginationLimit">The per page limit. Currently set to 10 but subject to change at any time (max 100). (optional, default to 10)</param>
        /// <param name="xPaginationCurrentPage">The current page. Defaults to 1. (optional, default to 1)</param>
        /// <param name="xPaginationSort"> (optional)</param>
        /// <param name="code">Item Code (optional)</param>
        /// <param name="agast">Custom Agast Code (optional)</param>
        /// <returns>List&lt;ItemGoods&gt;</returns>
        public List<ItemGoods> CompaniesCompanyIdItemsgoodsGet (Guid? companyId, string avalaraProductType, int? xPaginationLimit = null, int? xPaginationCurrentPage = null, string xPaginationSort = null, string code = null, string agast = null)
        {
             ApiResponse<List<ItemGoods>> localVarResponse = CompaniesCompanyIdItemsgoodsGetWithHttpInfo(companyId, avalaraProductType, xPaginationLimit, xPaginationCurrentPage, xPaginationSort, code, agast);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This operation return custom agast configurations that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="xPaginationLimit">The per page limit. Currently set to 10 but subject to change at any time (max 100). (optional, default to 10)</param>
        /// <param name="xPaginationCurrentPage">The current page. Defaults to 1. (optional, default to 1)</param>
        /// <param name="xPaginationSort"> (optional)</param>
        /// <param name="code">Item Code (optional)</param>
        /// <param name="agast">Custom Agast Code (optional)</param>
        /// <returns>ApiResponse of List&lt;ItemGoods&gt;</returns>
        public ApiResponse< List<ItemGoods> > CompaniesCompanyIdItemsgoodsGetWithHttpInfo (Guid? companyId, string avalaraProductType, int? xPaginationLimit = null, int? xPaginationCurrentPage = null, string xPaginationSort = null, string code = null, string agast = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling CompanyItemGoodsApi->CompaniesCompanyIdItemsgoodsGet");
            // verify the required parameter 'avalaraProductType' is set
            if (avalaraProductType == null)
                throw new ApiException(400, "Missing required parameter 'avalaraProductType' when calling CompanyItemGoodsApi->CompaniesCompanyIdItemsgoodsGet");

            var localVarPath = "/companies/{companyId}/items?goods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyId != null) localVarPathParams.Add("companyId", Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (code != null) localVarQueryParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // query parameter
            if (agast != null) localVarQueryParams.Add("agast", Configuration.ApiClient.ParameterToString(agast)); // query parameter
            if (avalaraProductType != null) localVarHeaderParams.Add("Avalara-Product-Type", Configuration.ApiClient.ParameterToString(avalaraProductType)); // header parameter
            if (xPaginationLimit != null) localVarHeaderParams.Add("X-Pagination-Limit", Configuration.ApiClient.ParameterToString(xPaginationLimit)); // header parameter
            if (xPaginationCurrentPage != null) localVarHeaderParams.Add("X-Pagination-Current-Page", Configuration.ApiClient.ParameterToString(xPaginationCurrentPage)); // header parameter
            if (xPaginationSort != null) localVarHeaderParams.Add("X-Pagination-Sort", Configuration.ApiClient.ParameterToString(xPaginationSort)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyIdItemsgoodsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ItemGoods>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ItemGoods>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ItemGoods>)));
            
        }

        /// <summary>
        ///  This operation return custom agast configurations that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="xPaginationLimit">The per page limit. Currently set to 10 but subject to change at any time (max 100). (optional, default to 10)</param>
        /// <param name="xPaginationCurrentPage">The current page. Defaults to 1. (optional, default to 1)</param>
        /// <param name="xPaginationSort"> (optional)</param>
        /// <param name="code">Item Code (optional)</param>
        /// <param name="agast">Custom Agast Code (optional)</param>
        /// <returns>Task of List&lt;ItemGoods&gt;</returns>
        public async System.Threading.Tasks.Task<List<ItemGoods>> CompaniesCompanyIdItemsgoodsGetAsync (Guid? companyId, string avalaraProductType, int? xPaginationLimit = null, int? xPaginationCurrentPage = null, string xPaginationSort = null, string code = null, string agast = null)
        {
             ApiResponse<List<ItemGoods>> localVarResponse = await CompaniesCompanyIdItemsgoodsGetAsyncWithHttpInfo(companyId, avalaraProductType, xPaginationLimit, xPaginationCurrentPage, xPaginationSort, code, agast);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This operation return custom agast configurations that match with parameters queries 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="xPaginationLimit">The per page limit. Currently set to 10 but subject to change at any time (max 100). (optional, default to 10)</param>
        /// <param name="xPaginationCurrentPage">The current page. Defaults to 1. (optional, default to 1)</param>
        /// <param name="xPaginationSort"> (optional)</param>
        /// <param name="code">Item Code (optional)</param>
        /// <param name="agast">Custom Agast Code (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ItemGoods&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ItemGoods>>> CompaniesCompanyIdItemsgoodsGetAsyncWithHttpInfo (Guid? companyId, string avalaraProductType, int? xPaginationLimit = null, int? xPaginationCurrentPage = null, string xPaginationSort = null, string code = null, string agast = null)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling CompanyItemGoodsApi->CompaniesCompanyIdItemsgoodsGet");
            // verify the required parameter 'avalaraProductType' is set
            if (avalaraProductType == null)
                throw new ApiException(400, "Missing required parameter 'avalaraProductType' when calling CompanyItemGoodsApi->CompaniesCompanyIdItemsgoodsGet");

            var localVarPath = "/companies/{companyId}/items?goods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyId != null) localVarPathParams.Add("companyId", Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (code != null) localVarQueryParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // query parameter
            if (agast != null) localVarQueryParams.Add("agast", Configuration.ApiClient.ParameterToString(agast)); // query parameter
            if (avalaraProductType != null) localVarHeaderParams.Add("Avalara-Product-Type", Configuration.ApiClient.ParameterToString(avalaraProductType)); // header parameter
            if (xPaginationLimit != null) localVarHeaderParams.Add("X-Pagination-Limit", Configuration.ApiClient.ParameterToString(xPaginationLimit)); // header parameter
            if (xPaginationCurrentPage != null) localVarHeaderParams.Add("X-Pagination-Current-Page", Configuration.ApiClient.ParameterToString(xPaginationCurrentPage)); // header parameter
            if (xPaginationSort != null) localVarHeaderParams.Add("X-Pagination-Sort", Configuration.ApiClient.ParameterToString(xPaginationSort)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCompanyIdItemsgoodsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ItemGoods>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ItemGoods>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ItemGoods>)));
            
        }

        /// <summary>
        /// Create custom agast for one company This method operation create a custom agast for one company 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 CreateItem (Guid? companyId, string avalaraProductType, ItemGoods body)
        {
             ApiResponse<InlineResponse201> localVarResponse = CreateItemWithHttpInfo(companyId, avalaraProductType, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create custom agast for one company This method operation create a custom agast for one company 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse< InlineResponse201 > CreateItemWithHttpInfo (Guid? companyId, string avalaraProductType, ItemGoods body)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling CompanyItemGoodsApi->CreateItem");
            // verify the required parameter 'avalaraProductType' is set
            if (avalaraProductType == null)
                throw new ApiException(400, "Missing required parameter 'avalaraProductType' when calling CompanyItemGoodsApi->CreateItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CompanyItemGoodsApi->CreateItem");

            var localVarPath = "/companies/{companyId}/items?goods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyId != null) localVarPathParams.Add("companyId", Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (avalaraProductType != null) localVarHeaderParams.Add("Avalara-Product-Type", Configuration.ApiClient.ParameterToString(avalaraProductType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse201) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
            
        }

        /// <summary>
        /// Create custom agast for one company This method operation create a custom agast for one company 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201> CreateItemAsync (Guid? companyId, string avalaraProductType, ItemGoods body)
        {
             ApiResponse<InlineResponse201> localVarResponse = await CreateItemAsyncWithHttpInfo(companyId, avalaraProductType, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create custom agast for one company This method operation create a custom agast for one company 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> CreateItemAsyncWithHttpInfo (Guid? companyId, string avalaraProductType, ItemGoods body)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling CompanyItemGoodsApi->CreateItem");
            // verify the required parameter 'avalaraProductType' is set
            if (avalaraProductType == null)
                throw new ApiException(400, "Missing required parameter 'avalaraProductType' when calling CompanyItemGoodsApi->CreateItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CompanyItemGoodsApi->CreateItem");

            var localVarPath = "/companies/{companyId}/items?goods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyId != null) localVarPathParams.Add("companyId", Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (avalaraProductType != null) localVarHeaderParams.Add("Avalara-Product-Type", Configuration.ApiClient.ParameterToString(avalaraProductType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse201) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <returns></returns>
        public void DeleteItem (Guid? companyId, string code, string avalaraProductType)
        {
             DeleteItemWithHttpInfo(companyId, code, avalaraProductType);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemWithHttpInfo (Guid? companyId, string code, string avalaraProductType)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling CompanyItemGoodsApi->DeleteItem");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CompanyItemGoodsApi->DeleteItem");
            // verify the required parameter 'avalaraProductType' is set
            if (avalaraProductType == null)
                throw new ApiException(400, "Missing required parameter 'avalaraProductType' when calling CompanyItemGoodsApi->DeleteItem");

            var localVarPath = "/companies/{companyId}/items/{code}?goods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyId != null) localVarPathParams.Add("companyId", Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (avalaraProductType != null) localVarHeaderParams.Add("Avalara-Product-Type", Configuration.ApiClient.ParameterToString(avalaraProductType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItem", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemAsync (Guid? companyId, string code, string avalaraProductType)
        {
             await DeleteItemAsyncWithHttpInfo(companyId, code, avalaraProductType);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemAsyncWithHttpInfo (Guid? companyId, string code, string avalaraProductType)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling CompanyItemGoodsApi->DeleteItem");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CompanyItemGoodsApi->DeleteItem");
            // verify the required parameter 'avalaraProductType' is set
            if (avalaraProductType == null)
                throw new ApiException(400, "Missing required parameter 'avalaraProductType' when calling CompanyItemGoodsApi->DeleteItem");

            var localVarPath = "/companies/{companyId}/items/{code}?goods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyId != null) localVarPathParams.Add("companyId", Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (avalaraProductType != null) localVarHeaderParams.Add("Avalara-Product-Type", Configuration.ApiClient.ParameterToString(avalaraProductType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItem", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update custom agast for one company This method operation create a custom agast for one company 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="body">Transaction Message</param>
        /// <returns></returns>
        public void UpdateItem (Guid? companyId, string code, string avalaraProductType, ItemGoods body)
        {
             UpdateItemWithHttpInfo(companyId, code, avalaraProductType, body);
        }

        /// <summary>
        /// Update custom agast for one company This method operation create a custom agast for one company 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateItemWithHttpInfo (Guid? companyId, string code, string avalaraProductType, ItemGoods body)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling CompanyItemGoodsApi->UpdateItem");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CompanyItemGoodsApi->UpdateItem");
            // verify the required parameter 'avalaraProductType' is set
            if (avalaraProductType == null)
                throw new ApiException(400, "Missing required parameter 'avalaraProductType' when calling CompanyItemGoodsApi->UpdateItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CompanyItemGoodsApi->UpdateItem");

            var localVarPath = "/companies/{companyId}/items/{code}?goods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyId != null) localVarPathParams.Add("companyId", Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (avalaraProductType != null) localVarHeaderParams.Add("Avalara-Product-Type", Configuration.ApiClient.ParameterToString(avalaraProductType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update custom agast for one company This method operation create a custom agast for one company 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateItemAsync (Guid? companyId, string code, string avalaraProductType, ItemGoods body)
        {
             await UpdateItemAsyncWithHttpInfo(companyId, code, avalaraProductType, body);

        }

        /// <summary>
        /// Update custom agast for one company This method operation create a custom agast for one company 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Company ID</param>
        /// <param name="code">Item Code</param>
        /// <param name="avalaraProductType">Avalara Product Type</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateItemAsyncWithHttpInfo (Guid? companyId, string code, string avalaraProductType, ItemGoods body)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling CompanyItemGoodsApi->UpdateItem");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CompanyItemGoodsApi->UpdateItem");
            // verify the required parameter 'avalaraProductType' is set
            if (avalaraProductType == null)
                throw new ApiException(400, "Missing required parameter 'avalaraProductType' when calling CompanyItemGoodsApi->UpdateItem");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CompanyItemGoodsApi->UpdateItem");

            var localVarPath = "/companies/{companyId}/items/{code}?goods";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyId != null) localVarPathParams.Add("companyId", Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (code != null) localVarPathParams.Add("code", Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (avalaraProductType != null) localVarHeaderParams.Add("Avalara-Product-Type", Configuration.ApiClient.ParameterToString(avalaraProductType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
