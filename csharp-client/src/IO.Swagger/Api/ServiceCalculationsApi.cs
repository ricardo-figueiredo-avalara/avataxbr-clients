/* 
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceCalculationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve a single transaction
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns></returns>
        void CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode);

        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve a single transaction
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode);
        /// <summary>
        /// Promote a calculation to transaction
        /// </summary>
        /// <remarks>
        /// Promote a calculation to transaction
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns></returns>
        void CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode);

        /// <summary>
        /// Promote a calculation to transaction
        /// </summary>
        /// <remarks>
        /// Promote a calculation to transaction
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode);
        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <returns></returns>
        void CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet (string authorization, Guid? accountId, string companyCode, string transactionType);

        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType);
        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>PaymentTransactionOut</returns>
        PaymentTransactionOut CalculationsservicePaymentPost (string authorization, PaymentTransactionIn body);

        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of PaymentTransactionOut</returns>
        ApiResponse<PaymentTransactionOut> CalculationsservicePaymentPostWithHttpInfo (string authorization, PaymentTransactionIn body);
        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>PurchaseTransactionOut</returns>
        PurchaseTransactionOut CalculationsservicePurchasePost (string authorization, PurchaseTransactionIn body);

        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of PurchaseTransactionOut</returns>
        ApiResponse<PurchaseTransactionOut> CalculationsservicePurchasePostWithHttpInfo (string authorization, PurchaseTransactionIn body);
        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ReceiptTransactionOut</returns>
        ReceiptTransactionOut CalculationsserviceReceiptPost (string authorization, ReceiptTransactionIn body);

        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of ReceiptTransactionOut</returns>
        ApiResponse<ReceiptTransactionOut> CalculationsserviceReceiptPostWithHttpInfo (string authorization, ReceiptTransactionIn body);
        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>SalesTransactionOut</returns>
        SalesTransactionOut CalculationsserviceSalesPost (string authorization, SalesTransactionIn body);

        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of SalesTransactionOut</returns>
        ApiResponse<SalesTransactionOut> CalculationsserviceSalesPostWithHttpInfo (string authorization, SalesTransactionIn body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve a single transaction
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetAsync (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode);

        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve a single transaction
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetAsyncWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode);
        /// <summary>
        /// Promote a calculation to transaction
        /// </summary>
        /// <remarks>
        /// Promote a calculation to transaction
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostAsync (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode);

        /// <summary>
        /// Promote a calculation to transaction
        /// </summary>
        /// <remarks>
        /// Promote a calculation to transaction
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostAsyncWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode);
        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetAsync (string authorization, Guid? accountId, string companyCode, string transactionType);

        /// <summary>
        /// Retrieve transactions
        /// </summary>
        /// <remarks>
        /// Retrieve a list of transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetAsyncWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType);
        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of PaymentTransactionOut</returns>
        System.Threading.Tasks.Task<PaymentTransactionOut> CalculationsservicePaymentPostAsync (string authorization, PaymentTransactionIn body);

        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse (PaymentTransactionOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentTransactionOut>> CalculationsservicePaymentPostAsyncWithHttpInfo (string authorization, PaymentTransactionIn body);
        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of PurchaseTransactionOut</returns>
        System.Threading.Tasks.Task<PurchaseTransactionOut> CalculationsservicePurchasePostAsync (string authorization, PurchaseTransactionIn body);

        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse (PurchaseTransactionOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseTransactionOut>> CalculationsservicePurchasePostAsyncWithHttpInfo (string authorization, PurchaseTransactionIn body);
        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ReceiptTransactionOut</returns>
        System.Threading.Tasks.Task<ReceiptTransactionOut> CalculationsserviceReceiptPostAsync (string authorization, ReceiptTransactionIn body);

        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse (ReceiptTransactionOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReceiptTransactionOut>> CalculationsserviceReceiptPostAsyncWithHttpInfo (string authorization, ReceiptTransactionIn body);
        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of SalesTransactionOut</returns>
        System.Threading.Tasks.Task<SalesTransactionOut> CalculationsserviceSalesPostAsync (string authorization, SalesTransactionIn body);

        /// <summary>
        /// Calculation Method
        /// </summary>
        /// <remarks>
        /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse (SalesTransactionOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<SalesTransactionOut>> CalculationsserviceSalesPostAsyncWithHttpInfo (string authorization, SalesTransactionIn body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ServiceCalculationsApi : IServiceCalculationsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceCalculationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServiceCalculationsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceCalculationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServiceCalculationsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve transactions Retrieve a single transaction
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns></returns>
        public void CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode)
        {
             CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithHttpInfo(authorization, accountId, companyCode, transactionType, documentCode);
        }

        /// <summary>
        /// Retrieve transactions Retrieve a single transaction
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
            // verify the required parameter 'companyCode' is set
            if (companyCode == null)
                throw new ApiException(400, "Missing required parameter 'companyCode' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
            // verify the required parameter 'transactionType' is set
            if (transactionType == null)
                throw new ApiException(400, "Missing required parameter 'transactionType' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
            // verify the required parameter 'documentCode' is set
            if (documentCode == null)
                throw new ApiException(400, "Missing required parameter 'documentCode' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");

            var localVarPath = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (companyCode != null) localVarPathParams.Add("companyCode", Configuration.ApiClient.ParameterToString(companyCode)); // path parameter
            if (transactionType != null) localVarPathParams.Add("transactionType", Configuration.ApiClient.ParameterToString(transactionType)); // path parameter
            if (documentCode != null) localVarPathParams.Add("documentCode", Configuration.ApiClient.ParameterToString(documentCode)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve transactions Retrieve a single transaction
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetAsync (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode)
        {
             await CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetAsyncWithHttpInfo(authorization, accountId, companyCode, transactionType, documentCode);

        }

        /// <summary>
        /// Retrieve transactions Retrieve a single transaction
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetAsyncWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
            // verify the required parameter 'companyCode' is set
            if (companyCode == null)
                throw new ApiException(400, "Missing required parameter 'companyCode' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
            // verify the required parameter 'transactionType' is set
            if (transactionType == null)
                throw new ApiException(400, "Missing required parameter 'transactionType' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
            // verify the required parameter 'documentCode' is set
            if (documentCode == null)
                throw new ApiException(400, "Missing required parameter 'documentCode' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");

            var localVarPath = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (companyCode != null) localVarPathParams.Add("companyCode", Configuration.ApiClient.ParameterToString(companyCode)); // path parameter
            if (transactionType != null) localVarPathParams.Add("transactionType", Configuration.ApiClient.ParameterToString(transactionType)); // path parameter
            if (documentCode != null) localVarPathParams.Add("documentCode", Configuration.ApiClient.ParameterToString(documentCode)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Promote a calculation to transaction Promote a calculation to transaction
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns></returns>
        public void CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode)
        {
             CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostWithHttpInfo(authorization, accountId, companyCode, transactionType, documentCode);
        }

        /// <summary>
        /// Promote a calculation to transaction Promote a calculation to transaction
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost");
            // verify the required parameter 'companyCode' is set
            if (companyCode == null)
                throw new ApiException(400, "Missing required parameter 'companyCode' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost");
            // verify the required parameter 'transactionType' is set
            if (transactionType == null)
                throw new ApiException(400, "Missing required parameter 'transactionType' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost");
            // verify the required parameter 'documentCode' is set
            if (documentCode == null)
                throw new ApiException(400, "Missing required parameter 'documentCode' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost");

            var localVarPath = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (companyCode != null) localVarPathParams.Add("companyCode", Configuration.ApiClient.ParameterToString(companyCode)); // path parameter
            if (transactionType != null) localVarPathParams.Add("transactionType", Configuration.ApiClient.ParameterToString(transactionType)); // path parameter
            if (documentCode != null) localVarPathParams.Add("documentCode", Configuration.ApiClient.ParameterToString(documentCode)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Promote a calculation to transaction Promote a calculation to transaction
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostAsync (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode)
        {
             await CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostAsyncWithHttpInfo(authorization, accountId, companyCode, transactionType, documentCode);

        }

        /// <summary>
        /// Promote a calculation to transaction Promote a calculation to transaction
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <param name="documentCode">Document Code</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostAsyncWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType, string documentCode)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost");
            // verify the required parameter 'companyCode' is set
            if (companyCode == null)
                throw new ApiException(400, "Missing required parameter 'companyCode' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost");
            // verify the required parameter 'transactionType' is set
            if (transactionType == null)
                throw new ApiException(400, "Missing required parameter 'transactionType' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost");
            // verify the required parameter 'documentCode' is set
            if (documentCode == null)
                throw new ApiException(400, "Missing required parameter 'documentCode' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost");

            var localVarPath = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (companyCode != null) localVarPathParams.Add("companyCode", Configuration.ApiClient.ParameterToString(companyCode)); // path parameter
            if (transactionType != null) localVarPathParams.Add("transactionType", Configuration.ApiClient.ParameterToString(transactionType)); // path parameter
            if (documentCode != null) localVarPathParams.Add("documentCode", Configuration.ApiClient.ParameterToString(documentCode)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve transactions Retrieve a list of transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <returns></returns>
        public void CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet (string authorization, Guid? accountId, string companyCode, string transactionType)
        {
             CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithHttpInfo(authorization, accountId, companyCode, transactionType);
        }

        /// <summary>
        /// Retrieve transactions Retrieve a list of transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");
            // verify the required parameter 'companyCode' is set
            if (companyCode == null)
                throw new ApiException(400, "Missing required parameter 'companyCode' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");
            // verify the required parameter 'transactionType' is set
            if (transactionType == null)
                throw new ApiException(400, "Missing required parameter 'transactionType' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");

            var localVarPath = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (companyCode != null) localVarPathParams.Add("companyCode", Configuration.ApiClient.ParameterToString(companyCode)); // path parameter
            if (transactionType != null) localVarPathParams.Add("transactionType", Configuration.ApiClient.ParameterToString(transactionType)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve transactions Retrieve a list of transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetAsync (string authorization, Guid? accountId, string companyCode, string transactionType)
        {
             await CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetAsyncWithHttpInfo(authorization, accountId, companyCode, transactionType);

        }

        /// <summary>
        /// Retrieve transactions Retrieve a list of transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="accountId">Account ID</param>
        /// <param name="companyCode">Company Code</param>
        /// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetAsyncWithHttpInfo (string authorization, Guid? accountId, string companyCode, string transactionType)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");
            // verify the required parameter 'companyCode' is set
            if (companyCode == null)
                throw new ApiException(400, "Missing required parameter 'companyCode' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");
            // verify the required parameter 'transactionType' is set
            if (transactionType == null)
                throw new ApiException(400, "Missing required parameter 'transactionType' when calling ServiceCalculationsApi->CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");

            var localVarPath = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (companyCode != null) localVarPathParams.Add("companyCode", Configuration.ApiClient.ParameterToString(companyCode)); // path parameter
            if (transactionType != null) localVarPathParams.Add("transactionType", Configuration.ApiClient.ParameterToString(transactionType)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>PaymentTransactionOut</returns>
        public PaymentTransactionOut CalculationsservicePaymentPost (string authorization, PaymentTransactionIn body)
        {
             ApiResponse<PaymentTransactionOut> localVarResponse = CalculationsservicePaymentPostWithHttpInfo(authorization, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of PaymentTransactionOut</returns>
        public ApiResponse< PaymentTransactionOut > CalculationsservicePaymentPostWithHttpInfo (string authorization, PaymentTransactionIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceCalculationsApi->CalculationsservicePaymentPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceCalculationsApi->CalculationsservicePaymentPost");

            var localVarPath = "/calculations?service-payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculationsservicePaymentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentTransactionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentTransactionOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentTransactionOut)));
            
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of PaymentTransactionOut</returns>
        public async System.Threading.Tasks.Task<PaymentTransactionOut> CalculationsservicePaymentPostAsync (string authorization, PaymentTransactionIn body)
        {
             ApiResponse<PaymentTransactionOut> localVarResponse = await CalculationsservicePaymentPostAsyncWithHttpInfo(authorization, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse (PaymentTransactionOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentTransactionOut>> CalculationsservicePaymentPostAsyncWithHttpInfo (string authorization, PaymentTransactionIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceCalculationsApi->CalculationsservicePaymentPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceCalculationsApi->CalculationsservicePaymentPost");

            var localVarPath = "/calculations?service-payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculationsservicePaymentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentTransactionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentTransactionOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentTransactionOut)));
            
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>PurchaseTransactionOut</returns>
        public PurchaseTransactionOut CalculationsservicePurchasePost (string authorization, PurchaseTransactionIn body)
        {
             ApiResponse<PurchaseTransactionOut> localVarResponse = CalculationsservicePurchasePostWithHttpInfo(authorization, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of PurchaseTransactionOut</returns>
        public ApiResponse< PurchaseTransactionOut > CalculationsservicePurchasePostWithHttpInfo (string authorization, PurchaseTransactionIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceCalculationsApi->CalculationsservicePurchasePost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceCalculationsApi->CalculationsservicePurchasePost");

            var localVarPath = "/calculations?service-purchase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculationsservicePurchasePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PurchaseTransactionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PurchaseTransactionOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PurchaseTransactionOut)));
            
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of PurchaseTransactionOut</returns>
        public async System.Threading.Tasks.Task<PurchaseTransactionOut> CalculationsservicePurchasePostAsync (string authorization, PurchaseTransactionIn body)
        {
             ApiResponse<PurchaseTransactionOut> localVarResponse = await CalculationsservicePurchasePostAsyncWithHttpInfo(authorization, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse (PurchaseTransactionOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PurchaseTransactionOut>> CalculationsservicePurchasePostAsyncWithHttpInfo (string authorization, PurchaseTransactionIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceCalculationsApi->CalculationsservicePurchasePost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceCalculationsApi->CalculationsservicePurchasePost");

            var localVarPath = "/calculations?service-purchase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculationsservicePurchasePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PurchaseTransactionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PurchaseTransactionOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PurchaseTransactionOut)));
            
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ReceiptTransactionOut</returns>
        public ReceiptTransactionOut CalculationsserviceReceiptPost (string authorization, ReceiptTransactionIn body)
        {
             ApiResponse<ReceiptTransactionOut> localVarResponse = CalculationsserviceReceiptPostWithHttpInfo(authorization, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of ReceiptTransactionOut</returns>
        public ApiResponse< ReceiptTransactionOut > CalculationsserviceReceiptPostWithHttpInfo (string authorization, ReceiptTransactionIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceCalculationsApi->CalculationsserviceReceiptPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceCalculationsApi->CalculationsserviceReceiptPost");

            var localVarPath = "/calculations?service-receipt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculationsserviceReceiptPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReceiptTransactionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReceiptTransactionOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReceiptTransactionOut)));
            
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ReceiptTransactionOut</returns>
        public async System.Threading.Tasks.Task<ReceiptTransactionOut> CalculationsserviceReceiptPostAsync (string authorization, ReceiptTransactionIn body)
        {
             ApiResponse<ReceiptTransactionOut> localVarResponse = await CalculationsserviceReceiptPostAsyncWithHttpInfo(authorization, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse (ReceiptTransactionOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReceiptTransactionOut>> CalculationsserviceReceiptPostAsyncWithHttpInfo (string authorization, ReceiptTransactionIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceCalculationsApi->CalculationsserviceReceiptPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceCalculationsApi->CalculationsserviceReceiptPost");

            var localVarPath = "/calculations?service-receipt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculationsserviceReceiptPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReceiptTransactionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReceiptTransactionOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReceiptTransactionOut)));
            
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>SalesTransactionOut</returns>
        public SalesTransactionOut CalculationsserviceSalesPost (string authorization, SalesTransactionIn body)
        {
             ApiResponse<SalesTransactionOut> localVarResponse = CalculationsserviceSalesPostWithHttpInfo(authorization, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>ApiResponse of SalesTransactionOut</returns>
        public ApiResponse< SalesTransactionOut > CalculationsserviceSalesPostWithHttpInfo (string authorization, SalesTransactionIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceCalculationsApi->CalculationsserviceSalesPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceCalculationsApi->CalculationsserviceSalesPost");

            var localVarPath = "/calculations?service-sales";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculationsserviceSalesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SalesTransactionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SalesTransactionOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SalesTransactionOut)));
            
        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of SalesTransactionOut</returns>
        public async System.Threading.Tasks.Task<SalesTransactionOut> CalculationsserviceSalesPostAsync (string authorization, SalesTransactionIn body)
        {
             ApiResponse<SalesTransactionOut> localVarResponse = await CalculationsserviceSalesPostAsyncWithHttpInfo(authorization, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculation Method Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {auth}</param>
        /// <param name="body">Transaction Message</param>
        /// <returns>Task of ApiResponse (SalesTransactionOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SalesTransactionOut>> CalculationsserviceSalesPostAsyncWithHttpInfo (string authorization, SalesTransactionIn body)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServiceCalculationsApi->CalculationsserviceSalesPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServiceCalculationsApi->CalculationsserviceSalesPost");

            var localVarPath = "/calculations?service-sales";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculationsserviceSalesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SalesTransactionOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SalesTransactionOut) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SalesTransactionOut)));
            
        }

    }
}
