=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for SwaggerClient::SalesTaxesConfig
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'SalesTaxesConfig' do
  before do
    # run before each test
    @instance = SwaggerClient::SalesTaxesConfig.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SalesTaxesConfig' do
    it 'should create an instact of SalesTaxesConfig' do
      expect(@instance).to be_instance_of(SwaggerClient::SalesTaxesConfig)
    end
  end
  describe 'test attribute "accruable_cofins_taxation"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["T", "N", "Z", "E", "H", "S"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.accruable_cofins_taxation = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "accruable_csll_taxation"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["T", "E"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.accruable_csll_taxation = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "accruable_pis_taxation"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["T", "N", "Z", "E", "H", "S"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.accruable_pis_taxation = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "accruable_cofins_exemp_code_taxation"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "accruable_pis_exemp_code_taxation"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "withholding_cofins"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "withholding_csll"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "withholding_irrf"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "withholding_pis"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "withhold_irrf_exempt_reason_taxation"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end

