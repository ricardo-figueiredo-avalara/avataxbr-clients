=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ServiceTransactionsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ServiceTransactionsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ServiceTransactionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ServiceTransactionsApi' do
    it 'should create an instact of ServiceTransactionsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::ServiceTransactionsApi)
    end
  end

  # unit tests for transactions_account_account_id_company_company_code_transaction_type_document_code_get
  # Retrieve transactions
  # Retrieve a single transaction
  # @param authorization Bearer {auth}
  # @param account_id Account ID
  # @param company_code Company Code
  # @param transaction_type Transaction Type (sale, purchase, receipts or payment)
  # @param document_code Document Code
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'transactions_account_account_id_company_company_code_transaction_type_document_code_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transactions_account_account_id_company_company_code_transaction_type_document_code_state_transitions_post
  # Transaction State Transition
  # Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
  # @param authorization Bearer {auth}
  # @param account_id Account ID
  # @param company_code Company Code
  # @param transaction_type Transaction Type (sale, purchase, receipts or payment)
  # @param document_code Document Code
  # @param body Transaction Message
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'transactions_account_account_id_company_company_code_transaction_type_document_code_state_transitions_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transactions_account_account_id_company_company_code_transaction_type_get
  # Retrieve transactions
  # Retrieve a list of transactions
  # @param authorization Bearer {auth}
  # @param account_id Account ID
  # @param company_code Company Code
  # @param transaction_type Transaction Type (sale, purchase, receipts or payment)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'transactions_account_account_id_company_company_code_transaction_type_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transactionsservice_payment_post
  # Calculation Method
  # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
  # @param authorization Bearer {auth}
  # @param body Transaction Message
  # @param [Hash] opts the optional parameters
  # @return [PaymentTransactionOut]
  describe 'transactionsservice_payment_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transactionsservice_purchase_post
  # Calculation Method
  # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
  # @param authorization Bearer {auth}
  # @param body Transaction Message
  # @param [Hash] opts the optional parameters
  # @return [PurchaseTransactionOut]
  describe 'transactionsservice_purchase_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transactionsservice_receipt_post
  # Calculation Method
  # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
  # @param authorization Bearer {auth}
  # @param body Transaction Message
  # @param [Hash] opts the optional parameters
  # @return [ReceiptTransactionOut]
  describe 'transactionsservice_receipt_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transactionsservice_sales_post
  # Calculation Method
  # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
  # @param authorization Bearer {auth}
  # @param body Transaction Message
  # @param [Hash] opts the optional parameters
  # @return [SalesTransactionOut]
  describe 'transactionsservice_sales_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
