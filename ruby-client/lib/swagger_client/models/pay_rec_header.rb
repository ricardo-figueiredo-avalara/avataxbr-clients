=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class PayRecHeader
    # This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode on the next line.
    attr_accessor :account_id

    # This string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company
    attr_accessor :company_code

    # This string indicates the type of transaction for which tax should be calculated. - 'Sale' - 'Purchase' - 'Payment' - 'Receipt' 
    attr_accessor :transaction_type

    # This string is a code maintained by the client application to uniquely identify a document in the client's systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc. When has this field, the transaction will be stored
    attr_accessor :document_code

    # currency code. 'BRL' for Brazilian Reais.
    attr_accessor :currency

    # This string is the transaction date in ISO 8601 format (which may be different from the date the tax calculation is performed)
    attr_accessor :transaction_date

    # accrual date, This string is the date, in ISO 8601 format, on which tax is to be calculated for this transaction (normally tax is calculated on the date the transaction is performed as captured in the transactionDate field). This is useful for layaways and other deferred transactions.
    attr_accessor :tax_calculation_date

    # This string is a code maintained by the client application to uniquely identify the party with whom the company (identified by companyCode) is transacting. It is unique within the context of an Account.
    attr_accessor :vendor_code

    # - 'CALCULATE' - 'ASIS' When ASIS, the transaction is stored without executing tax determination (no Calculation). 
    attr_accessor :payment_mode

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_id' => :'accountId',
        :'company_code' => :'companyCode',
        :'transaction_type' => :'transactionType',
        :'document_code' => :'documentCode',
        :'currency' => :'currency',
        :'transaction_date' => :'transactionDate',
        :'tax_calculation_date' => :'taxCalculationDate',
        :'vendor_code' => :'vendorCode',
        :'payment_mode' => :'paymentMode'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'account_id' => :'String',
        :'company_code' => :'String',
        :'transaction_type' => :'String',
        :'document_code' => :'String',
        :'currency' => :'String',
        :'transaction_date' => :'Date',
        :'tax_calculation_date' => :'Date',
        :'vendor_code' => :'String',
        :'payment_mode' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'accountId')
        self.account_id = attributes[:'accountId']
      end

      if attributes.has_key?(:'companyCode')
        self.company_code = attributes[:'companyCode']
      end

      if attributes.has_key?(:'transactionType')
        self.transaction_type = attributes[:'transactionType']
      end

      if attributes.has_key?(:'documentCode')
        self.document_code = attributes[:'documentCode']
      end

      if attributes.has_key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.has_key?(:'transactionDate')
        self.transaction_date = attributes[:'transactionDate']
      end

      if attributes.has_key?(:'taxCalculationDate')
        self.tax_calculation_date = attributes[:'taxCalculationDate']
      end

      if attributes.has_key?(:'vendorCode')
        self.vendor_code = attributes[:'vendorCode']
      end

      if attributes.has_key?(:'paymentMode')
        self.payment_mode = attributes[:'paymentMode']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @account_id.nil?
        invalid_properties.push("invalid value for 'account_id', account_id cannot be nil.")
      end

      if @company_code.nil?
        invalid_properties.push("invalid value for 'company_code', company_code cannot be nil.")
      end

      if @company_code.to_s.length > 60
        invalid_properties.push("invalid value for 'company_code', the character length must be smaller than or equal to 60.")
      end

      if @transaction_type.nil?
        invalid_properties.push("invalid value for 'transaction_type', transaction_type cannot be nil.")
      end

      if @currency.nil?
        invalid_properties.push("invalid value for 'currency', currency cannot be nil.")
      end

      if @transaction_date.nil?
        invalid_properties.push("invalid value for 'transaction_date', transaction_date cannot be nil.")
      end

      if @vendor_code.nil?
        invalid_properties.push("invalid value for 'vendor_code', vendor_code cannot be nil.")
      end

      if @payment_mode.nil?
        invalid_properties.push("invalid value for 'payment_mode', payment_mode cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @account_id.nil?
      return false if @company_code.nil?
      return false if @company_code.to_s.length > 60
      return false if @transaction_type.nil?
      transaction_type_validator = EnumAttributeValidator.new('String', ["Sale", "Purchase", "Payment", "Receipt"])
      return false unless transaction_type_validator.valid?(@transaction_type)
      return false if @currency.nil?
      currency_validator = EnumAttributeValidator.new('String', ["BRL"])
      return false unless currency_validator.valid?(@currency)
      return false if @transaction_date.nil?
      return false if @vendor_code.nil?
      return false if @payment_mode.nil?
      payment_mode_validator = EnumAttributeValidator.new('String', ["CALCULATE", "ASIS"])
      return false unless payment_mode_validator.valid?(@payment_mode)
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] company_code Value to be assigned
    def company_code=(company_code)
      if company_code.nil?
        fail ArgumentError, "company_code cannot be nil"
      end

      if company_code.to_s.length > 60
        fail ArgumentError, "invalid value for 'company_code', the character length must be smaller than or equal to 60."
      end

      @company_code = company_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_type Object to be assigned
    def transaction_type=(transaction_type)
      validator = EnumAttributeValidator.new('String', ["Sale", "Purchase", "Payment", "Receipt"])
      unless validator.valid?(transaction_type)
        fail ArgumentError, "invalid value for 'transaction_type', must be one of #{validator.allowable_values}."
      end
      @transaction_type = transaction_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency Object to be assigned
    def currency=(currency)
      validator = EnumAttributeValidator.new('String', ["BRL"])
      unless validator.valid?(currency)
        fail ArgumentError, "invalid value for 'currency', must be one of #{validator.allowable_values}."
      end
      @currency = currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_mode Object to be assigned
    def payment_mode=(payment_mode)
      validator = EnumAttributeValidator.new('String', ["CALCULATE", "ASIS"])
      unless validator.valid?(payment_mode)
        fail ArgumentError, "invalid value for 'payment_mode', must be one of #{validator.allowable_values}."
      end
      @payment_mode = payment_mode
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_id == o.account_id &&
          company_code == o.company_code &&
          transaction_type == o.transaction_type &&
          document_code == o.document_code &&
          currency == o.currency &&
          transaction_date == o.transaction_date &&
          tax_calculation_date == o.tax_calculation_date &&
          vendor_code == o.vendor_code &&
          payment_mode == o.payment_mode
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [account_id, company_code, transaction_type, document_code, currency, transaction_date, tax_calculation_date, vendor_code, payment_mode].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
