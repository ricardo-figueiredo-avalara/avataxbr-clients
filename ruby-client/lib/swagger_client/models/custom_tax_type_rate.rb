=begin
#BR16 - API

#This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class CustomTaxTypeRate
    attr_accessor :tax_type

    # Tax can be calculated by rate or by quantity
    attr_accessor :tax_model

    # Specific tax rate ex 3.5 (3.5%)
    attr_accessor :rate

    # Specific tax rate ex 3.5 (3.5%)
    attr_accessor :srv_amount

    attr_accessor :quantity_unid_base

    attr_accessor :specialization_type

    # UUID Reference to an item in the LegalReason store. 
    attr_accessor :exemption_reason_code

    # Optional textual reason description, to be used when reason codes are generic (i.e. reason code 999 = Other). 
    attr_accessor :custom_exemption_reason_description

    attr_accessor :withholding

    # Company ID
    attr_accessor :company_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tax_type' => :'taxType',
        :'tax_model' => :'taxModel',
        :'rate' => :'rate',
        :'srv_amount' => :'srvAmount',
        :'quantity_unid_base' => :'quantityUnidBase',
        :'specialization_type' => :'specializationType',
        :'exemption_reason_code' => :'exemptionReasonCode',
        :'custom_exemption_reason_description' => :'customExemptionReasonDescription',
        :'withholding' => :'withholding',
        :'company_id' => :'companyId'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'tax_type' => :'TaxType',
        :'tax_model' => :'String',
        :'rate' => :'Float',
        :'srv_amount' => :'Float',
        :'quantity_unid_base' => :'String',
        :'specialization_type' => :'String',
        :'exemption_reason_code' => :'String',
        :'custom_exemption_reason_description' => :'String',
        :'withholding' => :'TaxTypeRateWithholding',
        :'company_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'taxType')
        self.tax_type = attributes[:'taxType']
      end

      if attributes.has_key?(:'taxModel')
        self.tax_model = attributes[:'taxModel']
      end

      if attributes.has_key?(:'rate')
        self.rate = attributes[:'rate']
      end

      if attributes.has_key?(:'srvAmount')
        self.srv_amount = attributes[:'srvAmount']
      end

      if attributes.has_key?(:'quantityUnidBase')
        self.quantity_unid_base = attributes[:'quantityUnidBase']
      end

      if attributes.has_key?(:'specializationType')
        self.specialization_type = attributes[:'specializationType']
      end

      if attributes.has_key?(:'exemptionReasonCode')
        self.exemption_reason_code = attributes[:'exemptionReasonCode']
      end

      if attributes.has_key?(:'customExemptionReasonDescription')
        self.custom_exemption_reason_description = attributes[:'customExemptionReasonDescription']
      end

      if attributes.has_key?(:'withholding')
        self.withholding = attributes[:'withholding']
      end

      if attributes.has_key?(:'companyId')
        self.company_id = attributes[:'companyId']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @tax_type.nil?
        invalid_properties.push("invalid value for 'tax_type', tax_type cannot be nil.")
      end

      if @tax_model.nil?
        invalid_properties.push("invalid value for 'tax_model', tax_model cannot be nil.")
      end

      if !@quantity_unid_base.nil? && @quantity_unid_base.to_s.length > 6
        invalid_properties.push("invalid value for 'quantity_unid_base', the character length must be smaller than or equal to 6.")
      end

      if @company_id.nil?
        invalid_properties.push("invalid value for 'company_id', company_id cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @tax_type.nil?
      return false if @tax_model.nil?
      tax_model_validator = EnumAttributeValidator.new('String', ["rate", "srf"])
      return false unless tax_model_validator.valid?(@tax_model)
      return false if !@quantity_unid_base.nil? && @quantity_unid_base.to_s.length > 6
      specialization_type_validator = EnumAttributeValidator.new('String', ["basic", "monophase", "taxSubstitution"])
      return false unless specialization_type_validator.valid?(@specialization_type)
      return false if @company_id.nil?
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_model Object to be assigned
    def tax_model=(tax_model)
      validator = EnumAttributeValidator.new('String', ["rate", "srf"])
      unless validator.valid?(tax_model)
        fail ArgumentError, "invalid value for 'tax_model', must be one of #{validator.allowable_values}."
      end
      @tax_model = tax_model
    end

    # Custom attribute writer method with validation
    # @param [Object] quantity_unid_base Value to be assigned
    def quantity_unid_base=(quantity_unid_base)

      if !quantity_unid_base.nil? && quantity_unid_base.to_s.length > 6
        fail ArgumentError, "invalid value for 'quantity_unid_base', the character length must be smaller than or equal to 6."
      end

      @quantity_unid_base = quantity_unid_base
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] specialization_type Object to be assigned
    def specialization_type=(specialization_type)
      validator = EnumAttributeValidator.new('String', ["basic", "monophase", "taxSubstitution"])
      unless validator.valid?(specialization_type)
        fail ArgumentError, "invalid value for 'specialization_type', must be one of #{validator.allowable_values}."
      end
      @specialization_type = specialization_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tax_type == o.tax_type &&
          tax_model == o.tax_model &&
          rate == o.rate &&
          srv_amount == o.srv_amount &&
          quantity_unid_base == o.quantity_unid_base &&
          specialization_type == o.specialization_type &&
          exemption_reason_code == o.exemption_reason_code &&
          custom_exemption_reason_description == o.custom_exemption_reason_description &&
          withholding == o.withholding &&
          company_id == o.company_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [tax_type, tax_model, rate, srv_amount, quantity_unid_base, specialization_type, exemption_reason_code, custom_exemption_reason_description, withholding, company_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
