=begin
#BR16 - API

#This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class TransportVolumes
    # Quantity of packages transported
    attr_accessor :q_vol

    # package type
    attr_accessor :specie

    # brand
    attr_accessor :brand

    # packages numeration
    attr_accessor :volume_numeration

    # net weight using Kg
    attr_accessor :net_weight

    # gross weight using Kg
    attr_accessor :gross_weight

    attr_accessor :seal


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'q_vol' => :'qVol',
        :'specie' => :'specie',
        :'brand' => :'brand',
        :'volume_numeration' => :'volumeNumeration',
        :'net_weight' => :'netWeight',
        :'gross_weight' => :'grossWeight',
        :'seal' => :'seal'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'q_vol' => :'String',
        :'specie' => :'String',
        :'brand' => :'String',
        :'volume_numeration' => :'String',
        :'net_weight' => :'Float',
        :'gross_weight' => :'Float',
        :'seal' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'qVol')
        self.q_vol = attributes[:'qVol']
      end

      if attributes.has_key?(:'specie')
        self.specie = attributes[:'specie']
      end

      if attributes.has_key?(:'brand')
        self.brand = attributes[:'brand']
      end

      if attributes.has_key?(:'volumeNumeration')
        self.volume_numeration = attributes[:'volumeNumeration']
      end

      if attributes.has_key?(:'netWeight')
        self.net_weight = attributes[:'netWeight']
      end

      if attributes.has_key?(:'grossWeight')
        self.gross_weight = attributes[:'grossWeight']
      end

      if attributes.has_key?(:'seal')
        if (value = attributes[:'seal']).is_a?(Array)
          self.seal = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@q_vol.nil? && @q_vol !~ Regexp.new(/[0-9]{1,15}/)
        invalid_properties.push("invalid value for 'q_vol', must conform to the pattern /[0-9]{1,15}/.")
      end

      if !@specie.nil? && @specie.to_s.length > 60
        invalid_properties.push("invalid value for 'specie', the character length must be smaller than or equal to 60.")
      end

      if !@specie.nil? && @specie.to_s.length < 1
        invalid_properties.push("invalid value for 'specie', the character length must be great than or equal to 1.")
      end

      if !@brand.nil? && @brand.to_s.length > 60
        invalid_properties.push("invalid value for 'brand', the character length must be smaller than or equal to 60.")
      end

      if !@brand.nil? && @brand.to_s.length < 1
        invalid_properties.push("invalid value for 'brand', the character length must be great than or equal to 1.")
      end

      if !@volume_numeration.nil? && @volume_numeration.to_s.length > 60
        invalid_properties.push("invalid value for 'volume_numeration', the character length must be smaller than or equal to 60.")
      end

      if !@volume_numeration.nil? && @volume_numeration.to_s.length < 1
        invalid_properties.push("invalid value for 'volume_numeration', the character length must be great than or equal to 1.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@q_vol.nil? && @q_vol !~ Regexp.new(/[0-9]{1,15}/)
      return false if !@specie.nil? && @specie.to_s.length > 60
      return false if !@specie.nil? && @specie.to_s.length < 1
      return false if !@brand.nil? && @brand.to_s.length > 60
      return false if !@brand.nil? && @brand.to_s.length < 1
      return false if !@volume_numeration.nil? && @volume_numeration.to_s.length > 60
      return false if !@volume_numeration.nil? && @volume_numeration.to_s.length < 1
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] q_vol Value to be assigned
    def q_vol=(q_vol)

      if !q_vol.nil? && q_vol !~ Regexp.new(/[0-9]{1,15}/)
        fail ArgumentError, "invalid value for 'q_vol', must conform to the pattern /[0-9]{1,15}/."
      end

      @q_vol = q_vol
    end

    # Custom attribute writer method with validation
    # @param [Object] specie Value to be assigned
    def specie=(specie)

      if !specie.nil? && specie.to_s.length > 60
        fail ArgumentError, "invalid value for 'specie', the character length must be smaller than or equal to 60."
      end

      if !specie.nil? && specie.to_s.length < 1
        fail ArgumentError, "invalid value for 'specie', the character length must be great than or equal to 1."
      end

      @specie = specie
    end

    # Custom attribute writer method with validation
    # @param [Object] brand Value to be assigned
    def brand=(brand)

      if !brand.nil? && brand.to_s.length > 60
        fail ArgumentError, "invalid value for 'brand', the character length must be smaller than or equal to 60."
      end

      if !brand.nil? && brand.to_s.length < 1
        fail ArgumentError, "invalid value for 'brand', the character length must be great than or equal to 1."
      end

      @brand = brand
    end

    # Custom attribute writer method with validation
    # @param [Object] volume_numeration Value to be assigned
    def volume_numeration=(volume_numeration)

      if !volume_numeration.nil? && volume_numeration.to_s.length > 60
        fail ArgumentError, "invalid value for 'volume_numeration', the character length must be smaller than or equal to 60."
      end

      if !volume_numeration.nil? && volume_numeration.to_s.length < 1
        fail ArgumentError, "invalid value for 'volume_numeration', the character length must be great than or equal to 1."
      end

      @volume_numeration = volume_numeration
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          q_vol == o.q_vol &&
          specie == o.specie &&
          brand == o.brand &&
          volume_numeration == o.volume_numeration &&
          net_weight == o.net_weight &&
          gross_weight == o.gross_weight &&
          seal == o.seal
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [q_vol, specie, brand, volume_numeration, net_weight, gross_weight, seal].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
