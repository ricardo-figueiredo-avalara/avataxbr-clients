=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class PurchaseEntity
    # Legal Name of Service buyer.
    attr_accessor :name

    attr_accessor :type

    # Entity Email
    attr_accessor :email

    # CNPJ/CPF of Sales Buyer. If CPF, pattern is '[0-9]{11}' if CNPJ, pattern is '[0-9]{14}'
    attr_accessor :cnpjcpf

    # City Tax ID
    attr_accessor :city_tax_id

    # State Tax ID
    attr_accessor :state_tax_id

    # Suframa ID
    attr_accessor :suframa

    # Entity Phone
    attr_accessor :phone

    attr_accessor :tax_regime

    # Some cities require PURCHASE.Buyers to withhold ISS (City Tax) from PURCHASE.Sellers stablished in different cities. In case the PURCHASE.Seller has acquired a Tax Registration in this destination city, by providing this information in the service invoice, this withholding obligation is lifted.
    attr_accessor :has_cpom

    # These are the federal taxes attributes that determine whether withholding of taxes should take place. In special cases where the PURCHASE.Seller is exempt of one or more of these taxes the withholding follows the same rules. The Business type may also dictate these rules as well.
    attr_accessor :subject_withholding_irrf

    # The INSS contribution is capped at a maximum limit (amount of actual retired payment available in the country).  Individuals sellers subject to INSS withholding can provide the amount already tax by other transactions (with the same buyer or different ones) to deduct to the tax basis. This amount is to be provided to the Seller in a form of a signed document.
    attr_accessor :inss_previous_contrib

    # The INSS contribution is applicable only to the labor amount in a service contract.  There are several items that may be deducted from the service invoice total to arrive at the INSS taxable amount. This amount is to be provided to the Seller in the body of the Invoice or calculated during the transaction input.
    attr_accessor :inss_basis_discount

    # When Seller is Simples regime, the seller needs send RF rate.
    attr_accessor :iss_rf_rate


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'type' => :'type',
        :'email' => :'email',
        :'cnpjcpf' => :'cnpjcpf',
        :'city_tax_id' => :'cityTaxId',
        :'state_tax_id' => :'stateTaxId',
        :'suframa' => :'suframa',
        :'phone' => :'phone',
        :'tax_regime' => :'taxRegime',
        :'has_cpom' => :'hasCpom',
        :'subject_withholding_irrf' => :'subjectWithholdingIrrf',
        :'inss_previous_contrib' => :'inssPreviousContrib',
        :'inss_basis_discount' => :'inssBasisDiscount',
        :'iss_rf_rate' => :'issRfRate'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'type' => :'EntityType',
        :'email' => :'String',
        :'cnpjcpf' => :'String',
        :'city_tax_id' => :'String',
        :'state_tax_id' => :'String',
        :'suframa' => :'String',
        :'phone' => :'String',
        :'tax_regime' => :'FederalTaxRegime',
        :'has_cpom' => :'BOOLEAN',
        :'subject_withholding_irrf' => :'BOOLEAN',
        :'inss_previous_contrib' => :'Float',
        :'inss_basis_discount' => :'Float',
        :'iss_rf_rate' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'cnpjcpf')
        self.cnpjcpf = attributes[:'cnpjcpf']
      end

      if attributes.has_key?(:'cityTaxId')
        self.city_tax_id = attributes[:'cityTaxId']
      end

      if attributes.has_key?(:'stateTaxId')
        self.state_tax_id = attributes[:'stateTaxId']
      end

      if attributes.has_key?(:'suframa')
        self.suframa = attributes[:'suframa']
      end

      if attributes.has_key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.has_key?(:'taxRegime')
        self.tax_regime = attributes[:'taxRegime']
      end

      if attributes.has_key?(:'hasCpom')
        self.has_cpom = attributes[:'hasCpom']
      end

      if attributes.has_key?(:'subjectWithholdingIrrf')
        self.subject_withholding_irrf = attributes[:'subjectWithholdingIrrf']
      end

      if attributes.has_key?(:'inssPreviousContrib')
        self.inss_previous_contrib = attributes[:'inssPreviousContrib']
      end

      if attributes.has_key?(:'inssBasisDiscount')
        self.inss_basis_discount = attributes[:'inssBasisDiscount']
      end

      if attributes.has_key?(:'issRfRate')
        self.iss_rf_rate = attributes[:'issRfRate']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@name.nil? && @name.to_s.length > 60
        invalid_properties.push("invalid value for 'name', the character length must be smaller than or equal to 60.")
      end

      if !@email.nil? && @email.to_s.length > 60
        invalid_properties.push("invalid value for 'email', the character length must be smaller than or equal to 60.")
      end

      if !@cnpjcpf.nil? && @cnpjcpf !~ Regexp.new(/([!-ÿ]{0}|[!-ÿ]{5,20})?/)
        invalid_properties.push("invalid value for 'cnpjcpf', must conform to the pattern /([!-ÿ]{0}|[!-ÿ]{5,20})?/.")
      end

      if !@city_tax_id.nil? && @city_tax_id.to_s.length > 15
        invalid_properties.push("invalid value for 'city_tax_id', the character length must be smaller than or equal to 15.")
      end

      if !@state_tax_id.nil? && @state_tax_id !~ Regexp.new(/[0-9]{2,14}|ISENTO/)
        invalid_properties.push("invalid value for 'state_tax_id', must conform to the pattern /[0-9]{2,14}|ISENTO/.")
      end

      if !@suframa.nil? && @suframa !~ Regexp.new(/[0-9]{8,9}/)
        invalid_properties.push("invalid value for 'suframa', must conform to the pattern /[0-9]{8,9}/.")
      end

      if !@phone.nil? && @phone !~ Regexp.new(/[0-9]{6,14}/)
        invalid_properties.push("invalid value for 'phone', must conform to the pattern /[0-9]{6,14}/.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@name.nil? && @name.to_s.length > 60
      return false if !@email.nil? && @email.to_s.length > 60
      return false if !@cnpjcpf.nil? && @cnpjcpf !~ Regexp.new(/([!-ÿ]{0}|[!-ÿ]{5,20})?/)
      return false if !@city_tax_id.nil? && @city_tax_id.to_s.length > 15
      return false if !@state_tax_id.nil? && @state_tax_id !~ Regexp.new(/[0-9]{2,14}|ISENTO/)
      return false if !@suframa.nil? && @suframa !~ Regexp.new(/[0-9]{8,9}/)
      return false if !@phone.nil? && @phone !~ Regexp.new(/[0-9]{6,14}/)
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)

      if !name.nil? && name.to_s.length > 60
        fail ArgumentError, "invalid value for 'name', the character length must be smaller than or equal to 60."
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)

      if !email.nil? && email.to_s.length > 60
        fail ArgumentError, "invalid value for 'email', the character length must be smaller than or equal to 60."
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] cnpjcpf Value to be assigned
    def cnpjcpf=(cnpjcpf)

      if !cnpjcpf.nil? && cnpjcpf !~ Regexp.new(/([!-ÿ]{0}|[!-ÿ]{5,20})?/)
        fail ArgumentError, "invalid value for 'cnpjcpf', must conform to the pattern /([!-ÿ]{0}|[!-ÿ]{5,20})?/."
      end

      @cnpjcpf = cnpjcpf
    end

    # Custom attribute writer method with validation
    # @param [Object] city_tax_id Value to be assigned
    def city_tax_id=(city_tax_id)

      if !city_tax_id.nil? && city_tax_id.to_s.length > 15
        fail ArgumentError, "invalid value for 'city_tax_id', the character length must be smaller than or equal to 15."
      end

      @city_tax_id = city_tax_id
    end

    # Custom attribute writer method with validation
    # @param [Object] state_tax_id Value to be assigned
    def state_tax_id=(state_tax_id)

      if !state_tax_id.nil? && state_tax_id !~ Regexp.new(/[0-9]{2,14}|ISENTO/)
        fail ArgumentError, "invalid value for 'state_tax_id', must conform to the pattern /[0-9]{2,14}|ISENTO/."
      end

      @state_tax_id = state_tax_id
    end

    # Custom attribute writer method with validation
    # @param [Object] suframa Value to be assigned
    def suframa=(suframa)

      if !suframa.nil? && suframa !~ Regexp.new(/[0-9]{8,9}/)
        fail ArgumentError, "invalid value for 'suframa', must conform to the pattern /[0-9]{8,9}/."
      end

      @suframa = suframa
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)

      if !phone.nil? && phone !~ Regexp.new(/[0-9]{6,14}/)
        fail ArgumentError, "invalid value for 'phone', must conform to the pattern /[0-9]{6,14}/."
      end

      @phone = phone
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          type == o.type &&
          email == o.email &&
          cnpjcpf == o.cnpjcpf &&
          city_tax_id == o.city_tax_id &&
          state_tax_id == o.state_tax_id &&
          suframa == o.suframa &&
          phone == o.phone &&
          tax_regime == o.tax_regime &&
          has_cpom == o.has_cpom &&
          subject_withholding_irrf == o.subject_withholding_irrf &&
          inss_previous_contrib == o.inss_previous_contrib &&
          inss_basis_discount == o.inss_basis_discount &&
          iss_rf_rate == o.iss_rf_rate
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, type, email, cnpjcpf, city_tax_id, state_tax_id, suframa, phone, tax_regime, has_cpom, subject_withholding_irrf, inss_previous_contrib, inss_basis_discount, iss_rf_rate].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
