=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient
  # Legal Reason (Fundamentação Legal): - 'name' - 'description' - 'scope' 
  class LegalReason
    # Internal ID
    attr_accessor :id

    # Message scope. May be one of these. general - This message is not linked to any entity (agast/process/cfop) and will be applied to any item in a transacition. (Esta mensagem tem escopo geral, nao está relacionadas diretamente qualquer objeto.); linkedTo - This message is linked to an entity, and its processing will only occur when the context involves it. (Esta mensagens estão relacionadas diretamente a algum objeto como um AGAST por exemplo, um Processo ou uma CFOP.); 
    attr_accessor :scope

    # Set this message as no longer valid
    attr_accessor :disable

    # Legal reason textual description;
    attr_accessor :description

    # Short name to this message
    attr_accessor :name

    # this field inform the official code number
    attr_accessor :legal_code

    # Optional. Show this message when used in Invoice (NFe, NFCe, others...). Where to show this.
    attr_accessor :show_in_invoice

    # Referenced Process
    attr_accessor :referenced_processes

    attr_accessor :tax_scope

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'scope' => :'scope',
        :'disable' => :'disable',
        :'description' => :'description',
        :'name' => :'name',
        :'legal_code' => :'legalCode',
        :'show_in_invoice' => :'showInInvoice',
        :'referenced_processes' => :'referencedProcesses',
        :'tax_scope' => :'taxScope'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'scope' => :'String',
        :'disable' => :'BOOLEAN',
        :'description' => :'String',
        :'name' => :'String',
        :'legal_code' => :'String',
        :'show_in_invoice' => :'String',
        :'referenced_processes' => :'Array<LegalReasonReferencedProcesses>',
        :'tax_scope' => :'LegalReasonTaxScope'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'scope')
        self.scope = attributes[:'scope']
      end

      if attributes.has_key?(:'disable')
        self.disable = attributes[:'disable']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'legalCode')
        self.legal_code = attributes[:'legalCode']
      end

      if attributes.has_key?(:'showInInvoice')
        self.show_in_invoice = attributes[:'showInInvoice']
      end

      if attributes.has_key?(:'referencedProcesses')
        if (value = attributes[:'referencedProcesses']).is_a?(Array)
          self.referenced_processes = value
        end
      end

      if attributes.has_key?(:'taxScope')
        self.tax_scope = attributes[:'taxScope']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @scope.nil?
        invalid_properties.push("invalid value for 'scope', scope cannot be nil.")
      end

      if @description.nil?
        invalid_properties.push("invalid value for 'description', description cannot be nil.")
      end

      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @scope.nil?
      scope_validator = EnumAttributeValidator.new('String', ["general", "linkedTo"])
      return false unless scope_validator.valid?(@scope)
      return false if @description.nil?
      return false if @name.nil?
      show_in_invoice_validator = EnumAttributeValidator.new('String', ["complementaryInfoMessage", "fiscalInfoMessage", "itemInfoMessage"])
      return false unless show_in_invoice_validator.valid?(@show_in_invoice)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scope Object to be assigned
    def scope=(scope)
      validator = EnumAttributeValidator.new('String', ["general", "linkedTo"])
      unless validator.valid?(scope)
        fail ArgumentError, "invalid value for 'scope', must be one of #{validator.allowable_values}."
      end
      @scope = scope
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] show_in_invoice Object to be assigned
    def show_in_invoice=(show_in_invoice)
      validator = EnumAttributeValidator.new('String', ["complementaryInfoMessage", "fiscalInfoMessage", "itemInfoMessage"])
      unless validator.valid?(show_in_invoice)
        fail ArgumentError, "invalid value for 'show_in_invoice', must be one of #{validator.allowable_values}."
      end
      @show_in_invoice = show_in_invoice
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          scope == o.scope &&
          disable == o.disable &&
          description == o.description &&
          name == o.name &&
          legal_code == o.legal_code &&
          show_in_invoice == o.show_in_invoice &&
          referenced_processes == o.referenced_processes &&
          tax_scope == o.tax_scope
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, scope, disable, description, name, legal_code, show_in_invoice, referenced_processes, tax_scope].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
