=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class ItemGoods
    # Company ID
    attr_accessor :company_id

    # ERP Code
    attr_accessor :code

    # Agast Code
    attr_accessor :agast

    # Item Description
    attr_accessor :description

    # Seal Code for ipi tax control (código do selo para controle de IPI)
    attr_accessor :seal_code

    # Importation content form number (Número de controle da FCI - Ficha de Conteúdo de Importação)
    attr_accessor :n_fci

    # this field inform that this merchandise or product is ICMS Substitute Must be used when the item is for resale and the company will assume the role of ICMS Substitute (wholesaler, retailer, distributor). Example: when Importing some product the company does not pay IcmsSt at the time of customs clearance but when selling sale the item. Deverá ser utilizado quando a empresa que irá vender a mercadoria sujeita ao ICMS ST for o SUBSTITUTO TRIBUTÁRIO (Distribuidor, atacadista e varejista), como por exemplo das mercadorias IMPORTADAS, neste sentido, a empresa não irá pagar o ICMS ST no desembaraço aduaneiro e irá recolher quando for vender as mesmas. 
    attr_accessor :is_icms_st_substitute

    # - '0' # National goods - except those treated in codes 3,4, 5 and 8 - '1' # Foreign goods - Imported directly by seller, except those in code 6 - '2' # Foreign goods - Acquired in the internal market (inside Brazil), except those in code 7 - '3' # National goods - Merchandise or goods with imported content above 40% and with less than or equal to 70% - '4' # National goods from production following 'standard basic processes' as stablished by legislation (standard basic processes are devised to separate simple assembly from manufaturing processes) - '5' # National goods - Merchandise or goods with imported content equal or below 40% - '6' # Foreign goods - Directly imported by Seller, without a National Equivalent as listed by Comex and natural gas - '7' # Foreign goods - Acquired inside Brazil, without a National Equivalent  as listed by Comex and natural gas - '8' # National goods - Merchandise or goods with imported content above 70% 
    attr_accessor :source

    attr_accessor :product_type

    # Item is merchandise but will be considered product
    attr_accessor :manufacturer_equivalent

    # Inform that this item will have rights to aprropriate IPI credit
    attr_accessor :appropriate_ip_icredit_when_in_going

    # Subject to appropriate PIS/COFINS credit, when NO CUMULATIVE
    attr_accessor :usually_appropriate_piscofins_credit

    # The credit PIS/COFINS is subject to purchase form companies, but exist some exceptions, when the credit will be a estimated amount
    attr_accessor :is_pis_cofins_estimated_credit

    # - '01' # Vinculada Exclusivamente a Receita Tributada no Mercado Interno - '02' # Exclusivamente a Receita Não Tributada no Mercado Interno - '03' # Exclusivamente a Receita de Exportação - '04' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno - '05' # Vinculada a Receitas Tributadas no Mercado Interno e de Exportação - '06' # Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação - '07' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação 
    attr_accessor :piscofins_revenue_type

    # Discount allowed on icms base when PIS/COFINS are Monophase
    attr_accessor :icms_base_discount_for_mono_phase_social_contr

    # GTIN NUMBER
    attr_accessor :cean

    # Nomenclatura de Valor aduaneio e Estatístico - NCM extension code
    attr_accessor :nve

    attr_accessor :sales_unit

    # factor to convert sales quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)
    attr_accessor :sales_unit_ip_ifactor

    # factor to convert sales quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
    attr_accessor :sales_unit_icmsfactor

    # factor to convert sales quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)
    attr_accessor :sales_unit_icms_stfactor

    # factor to convert sales quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
    attr_accessor :sales_unit_pis_cofinsfactor

    attr_accessor :purchase_unit

    # factor to convert purchase quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)
    attr_accessor :purchase_unit_ip_ifactor

    # factor to convert purchase quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
    attr_accessor :purchase_unit_icmsfactor

    # factor to convert purchase quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)
    attr_accessor :purchase_unit_icms_stfactor

    # factor to convert purchase quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
    attr_accessor :purchase_unit_pis_cofinsfactor

    # When the product is new, and will be retail, firt time that it exit it is subject to IPI
    attr_accessor :first_use

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'company_id' => :'companyId',
        :'code' => :'code',
        :'agast' => :'agast',
        :'description' => :'description',
        :'seal_code' => :'sealCode',
        :'n_fci' => :'nFCI',
        :'is_icms_st_substitute' => :'isIcmsStSubstitute',
        :'source' => :'source',
        :'product_type' => :'productType',
        :'manufacturer_equivalent' => :'manufacturerEquivalent',
        :'appropriate_ip_icredit_when_in_going' => :'appropriateIPIcreditWhenInGoing',
        :'usually_appropriate_piscofins_credit' => :'usuallyAppropriatePISCOFINSCredit',
        :'is_pis_cofins_estimated_credit' => :'isPisCofinsEstimatedCredit',
        :'piscofins_revenue_type' => :'piscofinsRevenueType',
        :'icms_base_discount_for_mono_phase_social_contr' => :'icmsBaseDiscountForMonoPhaseSocialContr',
        :'cean' => :'cean',
        :'nve' => :'nve',
        :'sales_unit' => :'salesUnit',
        :'sales_unit_ip_ifactor' => :'salesUnitIPIfactor',
        :'sales_unit_icmsfactor' => :'salesUnitIcmsfactor',
        :'sales_unit_icms_stfactor' => :'salesUnitIcmsStfactor',
        :'sales_unit_pis_cofinsfactor' => :'salesUnitPisCofinsfactor',
        :'purchase_unit' => :'purchaseUnit',
        :'purchase_unit_ip_ifactor' => :'purchaseUnitIPIfactor',
        :'purchase_unit_icmsfactor' => :'purchaseUnitIcmsfactor',
        :'purchase_unit_icms_stfactor' => :'purchaseUnitIcmsStfactor',
        :'purchase_unit_pis_cofinsfactor' => :'purchaseUnitPisCofinsfactor',
        :'first_use' => :'firstUse'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'company_id' => :'String',
        :'code' => :'String',
        :'agast' => :'String',
        :'description' => :'String',
        :'seal_code' => :'String',
        :'n_fci' => :'String',
        :'is_icms_st_substitute' => :'BOOLEAN',
        :'source' => :'String',
        :'product_type' => :'String',
        :'manufacturer_equivalent' => :'BOOLEAN',
        :'appropriate_ip_icredit_when_in_going' => :'BOOLEAN',
        :'usually_appropriate_piscofins_credit' => :'BOOLEAN',
        :'is_pis_cofins_estimated_credit' => :'BOOLEAN',
        :'piscofins_revenue_type' => :'String',
        :'icms_base_discount_for_mono_phase_social_contr' => :'Float',
        :'cean' => :'String',
        :'nve' => :'String',
        :'sales_unit' => :'String',
        :'sales_unit_ip_ifactor' => :'Float',
        :'sales_unit_icmsfactor' => :'Float',
        :'sales_unit_icms_stfactor' => :'Float',
        :'sales_unit_pis_cofinsfactor' => :'Float',
        :'purchase_unit' => :'String',
        :'purchase_unit_ip_ifactor' => :'Float',
        :'purchase_unit_icmsfactor' => :'Float',
        :'purchase_unit_icms_stfactor' => :'Float',
        :'purchase_unit_pis_cofinsfactor' => :'Float',
        :'first_use' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'companyId')
        self.company_id = attributes[:'companyId']
      end

      if attributes.has_key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.has_key?(:'agast')
        self.agast = attributes[:'agast']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'sealCode')
        self.seal_code = attributes[:'sealCode']
      end

      if attributes.has_key?(:'nFCI')
        self.n_fci = attributes[:'nFCI']
      end

      if attributes.has_key?(:'isIcmsStSubstitute')
        self.is_icms_st_substitute = attributes[:'isIcmsStSubstitute']
      end

      if attributes.has_key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.has_key?(:'productType')
        self.product_type = attributes[:'productType']
      end

      if attributes.has_key?(:'manufacturerEquivalent')
        self.manufacturer_equivalent = attributes[:'manufacturerEquivalent']
      end

      if attributes.has_key?(:'appropriateIPIcreditWhenInGoing')
        self.appropriate_ip_icredit_when_in_going = attributes[:'appropriateIPIcreditWhenInGoing']
      end

      if attributes.has_key?(:'usuallyAppropriatePISCOFINSCredit')
        self.usually_appropriate_piscofins_credit = attributes[:'usuallyAppropriatePISCOFINSCredit']
      end

      if attributes.has_key?(:'isPisCofinsEstimatedCredit')
        self.is_pis_cofins_estimated_credit = attributes[:'isPisCofinsEstimatedCredit']
      end

      if attributes.has_key?(:'piscofinsRevenueType')
        self.piscofins_revenue_type = attributes[:'piscofinsRevenueType']
      end

      if attributes.has_key?(:'icmsBaseDiscountForMonoPhaseSocialContr')
        self.icms_base_discount_for_mono_phase_social_contr = attributes[:'icmsBaseDiscountForMonoPhaseSocialContr']
      end

      if attributes.has_key?(:'cean')
        self.cean = attributes[:'cean']
      end

      if attributes.has_key?(:'nve')
        self.nve = attributes[:'nve']
      end

      if attributes.has_key?(:'salesUnit')
        self.sales_unit = attributes[:'salesUnit']
      end

      if attributes.has_key?(:'salesUnitIPIfactor')
        self.sales_unit_ip_ifactor = attributes[:'salesUnitIPIfactor']
      end

      if attributes.has_key?(:'salesUnitIcmsfactor')
        self.sales_unit_icmsfactor = attributes[:'salesUnitIcmsfactor']
      end

      if attributes.has_key?(:'salesUnitIcmsStfactor')
        self.sales_unit_icms_stfactor = attributes[:'salesUnitIcmsStfactor']
      end

      if attributes.has_key?(:'salesUnitPisCofinsfactor')
        self.sales_unit_pis_cofinsfactor = attributes[:'salesUnitPisCofinsfactor']
      end

      if attributes.has_key?(:'purchaseUnit')
        self.purchase_unit = attributes[:'purchaseUnit']
      end

      if attributes.has_key?(:'purchaseUnitIPIfactor')
        self.purchase_unit_ip_ifactor = attributes[:'purchaseUnitIPIfactor']
      end

      if attributes.has_key?(:'purchaseUnitIcmsfactor')
        self.purchase_unit_icmsfactor = attributes[:'purchaseUnitIcmsfactor']
      end

      if attributes.has_key?(:'purchaseUnitIcmsStfactor')
        self.purchase_unit_icms_stfactor = attributes[:'purchaseUnitIcmsStfactor']
      end

      if attributes.has_key?(:'purchaseUnitPisCofinsfactor')
        self.purchase_unit_pis_cofinsfactor = attributes[:'purchaseUnitPisCofinsfactor']
      end

      if attributes.has_key?(:'firstUse')
        self.first_use = attributes[:'firstUse']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @company_id.nil?
        invalid_properties.push("invalid value for 'company_id', company_id cannot be nil.")
      end

      if @code.nil?
        invalid_properties.push("invalid value for 'code', code cannot be nil.")
      end

      if @code.to_s.length > 60
        invalid_properties.push("invalid value for 'code', the character length must be smaller than or equal to 60.")
      end

      if @agast.nil?
        invalid_properties.push("invalid value for 'agast', agast cannot be nil.")
      end

      if @agast.to_s.length > 60
        invalid_properties.push("invalid value for 'agast', the character length must be smaller than or equal to 60.")
      end

      if !@description.nil? && @description.to_s.length > 60
        invalid_properties.push("invalid value for 'description', the character length must be smaller than or equal to 60.")
      end

      if @seal_code.nil?
        invalid_properties.push("invalid value for 'seal_code', seal_code cannot be nil.")
      end

      if @seal_code.to_s.length > 60
        invalid_properties.push("invalid value for 'seal_code', the character length must be smaller than or equal to 60.")
      end

      if !@n_fci.nil? && @n_fci !~ Regexp.new(/[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/)
        invalid_properties.push("invalid value for 'n_fci', must conform to the pattern /[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/.")
      end

      if !@cean.nil? && @cean !~ Regexp.new(/[0-9]{0}|[0-9]{8}|[0-9]{12,14}/)
        invalid_properties.push("invalid value for 'cean', must conform to the pattern /[0-9]{0}|[0-9]{8}|[0-9]{12,14}/.")
      end

      if !@nve.nil? && @nve !~ Regexp.new(/[A-Z]{2}[0-9]{4}/)
        invalid_properties.push("invalid value for 'nve', must conform to the pattern /[A-Z]{2}[0-9]{4}/.")
      end

      if !@sales_unit.nil? && @sales_unit.to_s.length > 6
        invalid_properties.push("invalid value for 'sales_unit', the character length must be smaller than or equal to 6.")
      end

      if !@purchase_unit.nil? && @purchase_unit.to_s.length > 6
        invalid_properties.push("invalid value for 'purchase_unit', the character length must be smaller than or equal to 6.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @company_id.nil?
      return false if @code.nil?
      return false if @code.to_s.length > 60
      return false if @agast.nil?
      return false if @agast.to_s.length > 60
      return false if !@description.nil? && @description.to_s.length > 60
      return false if @seal_code.nil?
      return false if @seal_code.to_s.length > 60
      return false if !@n_fci.nil? && @n_fci !~ Regexp.new(/[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/)
      source_validator = EnumAttributeValidator.new('String', ["0", "1", "2", "3", "4", "5", "6", "7", "8"])
      return false unless source_validator.valid?(@source)
      product_type_validator = EnumAttributeValidator.new('String', ["FOR PRODUCT", "FOR MERCHANDISE", "NO RESTRICTION", "SERVICE", "FEEDSTOCK", "FIXED ASSETS"])
      return false unless product_type_validator.valid?(@product_type)
      piscofins_revenue_type_validator = EnumAttributeValidator.new('String', ["01", "02", "03", "04", "05", "06", "07"])
      return false unless piscofins_revenue_type_validator.valid?(@piscofins_revenue_type)
      return false if !@cean.nil? && @cean !~ Regexp.new(/[0-9]{0}|[0-9]{8}|[0-9]{12,14}/)
      return false if !@nve.nil? && @nve !~ Regexp.new(/[A-Z]{2}[0-9]{4}/)
      return false if !@sales_unit.nil? && @sales_unit.to_s.length > 6
      return false if !@purchase_unit.nil? && @purchase_unit.to_s.length > 6
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] code Value to be assigned
    def code=(code)
      if code.nil?
        fail ArgumentError, "code cannot be nil"
      end

      if code.to_s.length > 60
        fail ArgumentError, "invalid value for 'code', the character length must be smaller than or equal to 60."
      end

      @code = code
    end

    # Custom attribute writer method with validation
    # @param [Object] agast Value to be assigned
    def agast=(agast)
      if agast.nil?
        fail ArgumentError, "agast cannot be nil"
      end

      if agast.to_s.length > 60
        fail ArgumentError, "invalid value for 'agast', the character length must be smaller than or equal to 60."
      end

      @agast = agast
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)

      if !description.nil? && description.to_s.length > 60
        fail ArgumentError, "invalid value for 'description', the character length must be smaller than or equal to 60."
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] seal_code Value to be assigned
    def seal_code=(seal_code)
      if seal_code.nil?
        fail ArgumentError, "seal_code cannot be nil"
      end

      if seal_code.to_s.length > 60
        fail ArgumentError, "invalid value for 'seal_code', the character length must be smaller than or equal to 60."
      end

      @seal_code = seal_code
    end

    # Custom attribute writer method with validation
    # @param [Object] n_fci Value to be assigned
    def n_fci=(n_fci)

      if !n_fci.nil? && n_fci !~ Regexp.new(/[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/)
        fail ArgumentError, "invalid value for 'n_fci', must conform to the pattern /[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/."
      end

      @n_fci = n_fci
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source Object to be assigned
    def source=(source)
      validator = EnumAttributeValidator.new('String', ["0", "1", "2", "3", "4", "5", "6", "7", "8"])
      unless validator.valid?(source)
        fail ArgumentError, "invalid value for 'source', must be one of #{validator.allowable_values}."
      end
      @source = source
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] product_type Object to be assigned
    def product_type=(product_type)
      validator = EnumAttributeValidator.new('String', ["FOR PRODUCT", "FOR MERCHANDISE", "NO RESTRICTION", "SERVICE", "FEEDSTOCK", "FIXED ASSETS"])
      unless validator.valid?(product_type)
        fail ArgumentError, "invalid value for 'product_type', must be one of #{validator.allowable_values}."
      end
      @product_type = product_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] piscofins_revenue_type Object to be assigned
    def piscofins_revenue_type=(piscofins_revenue_type)
      validator = EnumAttributeValidator.new('String', ["01", "02", "03", "04", "05", "06", "07"])
      unless validator.valid?(piscofins_revenue_type)
        fail ArgumentError, "invalid value for 'piscofins_revenue_type', must be one of #{validator.allowable_values}."
      end
      @piscofins_revenue_type = piscofins_revenue_type
    end

    # Custom attribute writer method with validation
    # @param [Object] cean Value to be assigned
    def cean=(cean)

      if !cean.nil? && cean !~ Regexp.new(/[0-9]{0}|[0-9]{8}|[0-9]{12,14}/)
        fail ArgumentError, "invalid value for 'cean', must conform to the pattern /[0-9]{0}|[0-9]{8}|[0-9]{12,14}/."
      end

      @cean = cean
    end

    # Custom attribute writer method with validation
    # @param [Object] nve Value to be assigned
    def nve=(nve)

      if !nve.nil? && nve !~ Regexp.new(/[A-Z]{2}[0-9]{4}/)
        fail ArgumentError, "invalid value for 'nve', must conform to the pattern /[A-Z]{2}[0-9]{4}/."
      end

      @nve = nve
    end

    # Custom attribute writer method with validation
    # @param [Object] sales_unit Value to be assigned
    def sales_unit=(sales_unit)

      if !sales_unit.nil? && sales_unit.to_s.length > 6
        fail ArgumentError, "invalid value for 'sales_unit', the character length must be smaller than or equal to 6."
      end

      @sales_unit = sales_unit
    end

    # Custom attribute writer method with validation
    # @param [Object] purchase_unit Value to be assigned
    def purchase_unit=(purchase_unit)

      if !purchase_unit.nil? && purchase_unit.to_s.length > 6
        fail ArgumentError, "invalid value for 'purchase_unit', the character length must be smaller than or equal to 6."
      end

      @purchase_unit = purchase_unit
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          company_id == o.company_id &&
          code == o.code &&
          agast == o.agast &&
          description == o.description &&
          seal_code == o.seal_code &&
          n_fci == o.n_fci &&
          is_icms_st_substitute == o.is_icms_st_substitute &&
          source == o.source &&
          product_type == o.product_type &&
          manufacturer_equivalent == o.manufacturer_equivalent &&
          appropriate_ip_icredit_when_in_going == o.appropriate_ip_icredit_when_in_going &&
          usually_appropriate_piscofins_credit == o.usually_appropriate_piscofins_credit &&
          is_pis_cofins_estimated_credit == o.is_pis_cofins_estimated_credit &&
          piscofins_revenue_type == o.piscofins_revenue_type &&
          icms_base_discount_for_mono_phase_social_contr == o.icms_base_discount_for_mono_phase_social_contr &&
          cean == o.cean &&
          nve == o.nve &&
          sales_unit == o.sales_unit &&
          sales_unit_ip_ifactor == o.sales_unit_ip_ifactor &&
          sales_unit_icmsfactor == o.sales_unit_icmsfactor &&
          sales_unit_icms_stfactor == o.sales_unit_icms_stfactor &&
          sales_unit_pis_cofinsfactor == o.sales_unit_pis_cofinsfactor &&
          purchase_unit == o.purchase_unit &&
          purchase_unit_ip_ifactor == o.purchase_unit_ip_ifactor &&
          purchase_unit_icmsfactor == o.purchase_unit_icmsfactor &&
          purchase_unit_icms_stfactor == o.purchase_unit_icms_stfactor &&
          purchase_unit_pis_cofinsfactor == o.purchase_unit_pis_cofinsfactor &&
          first_use == o.first_use
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [company_id, code, agast, description, seal_code, n_fci, is_icms_st_substitute, source, product_type, manufacturer_equivalent, appropriate_ip_icredit_when_in_going, usually_appropriate_piscofins_credit, is_pis_cofins_estimated_credit, piscofins_revenue_type, icms_base_discount_for_mono_phase_social_contr, cean, nve, sales_unit, sales_unit_ip_ifactor, sales_unit_icmsfactor, sales_unit_icms_stfactor, sales_unit_pis_cofinsfactor, purchase_unit, purchase_unit_ip_ifactor, purchase_unit_icmsfactor, purchase_unit_icms_stfactor, purchase_unit_pis_cofinsfactor, first_use].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
