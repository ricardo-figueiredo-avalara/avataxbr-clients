=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class LineForGoodsDi
    # customs value, valor aduaneiro (II Block of NFe)
    attr_accessor :customs_value

    # Import declaration number, DI/DSI/DA/DRI-E (DI/DSI/DA/DRI-E)
    attr_accessor :di_number

    # Register date of import declaration number, DI/DSI/DA/DRI-E (DI/DSI/DA/DRI-E)
    attr_accessor :register_date_di

    # Clerance Site Local do desembaraço aduaneiro 
    attr_accessor :clearance_site

    # Clerance Site State Estado onde ocorrreu o desembaraço aduaneiro 
    attr_accessor :clearance_state

    # Clerance date
    attr_accessor :clearance_date

    # - '1' # Maritima - '2' # Fluvial - '3' # Lacustre - '4' # Aerea - '5' # Postal - '6' # Ferroviaria - '7' # Rodoviaria - '8' # Conduto - '9' # Meios Proprios - '10' # Entrada/Saida Ficta 
    attr_accessor :transport_di_type

    # Aditional amount to freight to renew merchant marine, This decimal 13 integers and 2 decimals [Valor Adicional ao frete para renovação de marinha mercante] 
    attr_accessor :afrmm_value

    # - '1' # On One's Own [1-por conta propria] - '2' # On Behalf And Order [2-por conta e ordem] - '3' # Order [3-encomenda] 
    attr_accessor :intermediate_type

    # Buyer federal tax id CNPJ do comprador ou encomendante 
    attr_accessor :buyer_federal_tax_id

    # Buyer sate Estado do comprador ou encomendante 
    attr_accessor :buyer_state

    # Exporter code
    attr_accessor :exporter_code

    # aditional import declaration
    attr_accessor :adi

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'customs_value' => :'customsValue',
        :'di_number' => :'diNumber',
        :'register_date_di' => :'registerDateDI',
        :'clearance_site' => :'clearanceSite',
        :'clearance_state' => :'clearanceState',
        :'clearance_date' => :'clearanceDate',
        :'transport_di_type' => :'transportDIType',
        :'afrmm_value' => :'afrmmValue',
        :'intermediate_type' => :'intermediateType',
        :'buyer_federal_tax_id' => :'buyerFederalTaxID',
        :'buyer_state' => :'buyerState',
        :'exporter_code' => :'exporterCode',
        :'adi' => :'adi'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'customs_value' => :'Float',
        :'di_number' => :'String',
        :'register_date_di' => :'Date',
        :'clearance_site' => :'String',
        :'clearance_state' => :'StateEnum',
        :'clearance_date' => :'Date',
        :'transport_di_type' => :'String',
        :'afrmm_value' => :'Float',
        :'intermediate_type' => :'String',
        :'buyer_federal_tax_id' => :'String',
        :'buyer_state' => :'StateEnum',
        :'exporter_code' => :'String',
        :'adi' => :'Array<LineForGoodsAdi>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'customsValue')
        self.customs_value = attributes[:'customsValue']
      end

      if attributes.has_key?(:'diNumber')
        self.di_number = attributes[:'diNumber']
      end

      if attributes.has_key?(:'registerDateDI')
        self.register_date_di = attributes[:'registerDateDI']
      end

      if attributes.has_key?(:'clearanceSite')
        self.clearance_site = attributes[:'clearanceSite']
      end

      if attributes.has_key?(:'clearanceState')
        self.clearance_state = attributes[:'clearanceState']
      end

      if attributes.has_key?(:'clearanceDate')
        self.clearance_date = attributes[:'clearanceDate']
      end

      if attributes.has_key?(:'transportDIType')
        self.transport_di_type = attributes[:'transportDIType']
      end

      if attributes.has_key?(:'afrmmValue')
        self.afrmm_value = attributes[:'afrmmValue']
      end

      if attributes.has_key?(:'intermediateType')
        self.intermediate_type = attributes[:'intermediateType']
      end

      if attributes.has_key?(:'buyerFederalTaxID')
        self.buyer_federal_tax_id = attributes[:'buyerFederalTaxID']
      end

      if attributes.has_key?(:'buyerState')
        self.buyer_state = attributes[:'buyerState']
      end

      if attributes.has_key?(:'exporterCode')
        self.exporter_code = attributes[:'exporterCode']
      end

      if attributes.has_key?(:'adi')
        if (value = attributes[:'adi']).is_a?(Array)
          self.adi = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @di_number.nil?
        invalid_properties.push("invalid value for 'di_number', di_number cannot be nil.")
      end

      if @di_number.to_s.length > 12
        invalid_properties.push("invalid value for 'di_number', the character length must be smaller than or equal to 12.")
      end

      if @di_number.to_s.length < 1
        invalid_properties.push("invalid value for 'di_number', the character length must be great than or equal to 1.")
      end

      if @register_date_di.nil?
        invalid_properties.push("invalid value for 'register_date_di', register_date_di cannot be nil.")
      end

      if @clearance_site.nil?
        invalid_properties.push("invalid value for 'clearance_site', clearance_site cannot be nil.")
      end

      if @clearance_site.to_s.length > 60
        invalid_properties.push("invalid value for 'clearance_site', the character length must be smaller than or equal to 60.")
      end

      if @clearance_site.to_s.length < 1
        invalid_properties.push("invalid value for 'clearance_site', the character length must be great than or equal to 1.")
      end

      if @clearance_state.nil?
        invalid_properties.push("invalid value for 'clearance_state', clearance_state cannot be nil.")
      end

      if @transport_di_type.nil?
        invalid_properties.push("invalid value for 'transport_di_type', transport_di_type cannot be nil.")
      end

      if @intermediate_type.nil?
        invalid_properties.push("invalid value for 'intermediate_type', intermediate_type cannot be nil.")
      end

      if !@buyer_federal_tax_id.nil? && @buyer_federal_tax_id !~ Regexp.new(/[0-9]{14}/)
        invalid_properties.push("invalid value for 'buyer_federal_tax_id', must conform to the pattern /[0-9]{14}/.")
      end

      if !@exporter_code.nil? && @exporter_code.to_s.length > 60
        invalid_properties.push("invalid value for 'exporter_code', the character length must be smaller than or equal to 60.")
      end

      if !@exporter_code.nil? && @exporter_code.to_s.length < 1
        invalid_properties.push("invalid value for 'exporter_code', the character length must be great than or equal to 1.")
      end

      if @adi.nil?
        invalid_properties.push("invalid value for 'adi', adi cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @di_number.nil?
      return false if @di_number.to_s.length > 12
      return false if @di_number.to_s.length < 1
      return false if @register_date_di.nil?
      return false if @clearance_site.nil?
      return false if @clearance_site.to_s.length > 60
      return false if @clearance_site.to_s.length < 1
      return false if @clearance_state.nil?
      return false if @transport_di_type.nil?
      transport_di_type_validator = EnumAttributeValidator.new('String', ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"])
      return false unless transport_di_type_validator.valid?(@transport_di_type)
      return false if @intermediate_type.nil?
      intermediate_type_validator = EnumAttributeValidator.new('String', ["1", "2", "3"])
      return false unless intermediate_type_validator.valid?(@intermediate_type)
      return false if !@buyer_federal_tax_id.nil? && @buyer_federal_tax_id !~ Regexp.new(/[0-9]{14}/)
      return false if !@exporter_code.nil? && @exporter_code.to_s.length > 60
      return false if !@exporter_code.nil? && @exporter_code.to_s.length < 1
      return false if @adi.nil?
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] di_number Value to be assigned
    def di_number=(di_number)
      if di_number.nil?
        fail ArgumentError, "di_number cannot be nil"
      end

      if di_number.to_s.length > 12
        fail ArgumentError, "invalid value for 'di_number', the character length must be smaller than or equal to 12."
      end

      if di_number.to_s.length < 1
        fail ArgumentError, "invalid value for 'di_number', the character length must be great than or equal to 1."
      end

      @di_number = di_number
    end

    # Custom attribute writer method with validation
    # @param [Object] clearance_site Value to be assigned
    def clearance_site=(clearance_site)
      if clearance_site.nil?
        fail ArgumentError, "clearance_site cannot be nil"
      end

      if clearance_site.to_s.length > 60
        fail ArgumentError, "invalid value for 'clearance_site', the character length must be smaller than or equal to 60."
      end

      if clearance_site.to_s.length < 1
        fail ArgumentError, "invalid value for 'clearance_site', the character length must be great than or equal to 1."
      end

      @clearance_site = clearance_site
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transport_di_type Object to be assigned
    def transport_di_type=(transport_di_type)
      validator = EnumAttributeValidator.new('String', ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"])
      unless validator.valid?(transport_di_type)
        fail ArgumentError, "invalid value for 'transport_di_type', must be one of #{validator.allowable_values}."
      end
      @transport_di_type = transport_di_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] intermediate_type Object to be assigned
    def intermediate_type=(intermediate_type)
      validator = EnumAttributeValidator.new('String', ["1", "2", "3"])
      unless validator.valid?(intermediate_type)
        fail ArgumentError, "invalid value for 'intermediate_type', must be one of #{validator.allowable_values}."
      end
      @intermediate_type = intermediate_type
    end

    # Custom attribute writer method with validation
    # @param [Object] buyer_federal_tax_id Value to be assigned
    def buyer_federal_tax_id=(buyer_federal_tax_id)

      if !buyer_federal_tax_id.nil? && buyer_federal_tax_id !~ Regexp.new(/[0-9]{14}/)
        fail ArgumentError, "invalid value for 'buyer_federal_tax_id', must conform to the pattern /[0-9]{14}/."
      end

      @buyer_federal_tax_id = buyer_federal_tax_id
    end

    # Custom attribute writer method with validation
    # @param [Object] exporter_code Value to be assigned
    def exporter_code=(exporter_code)

      if !exporter_code.nil? && exporter_code.to_s.length > 60
        fail ArgumentError, "invalid value for 'exporter_code', the character length must be smaller than or equal to 60."
      end

      if !exporter_code.nil? && exporter_code.to_s.length < 1
        fail ArgumentError, "invalid value for 'exporter_code', the character length must be great than or equal to 1."
      end

      @exporter_code = exporter_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          customs_value == o.customs_value &&
          di_number == o.di_number &&
          register_date_di == o.register_date_di &&
          clearance_site == o.clearance_site &&
          clearance_state == o.clearance_state &&
          clearance_date == o.clearance_date &&
          transport_di_type == o.transport_di_type &&
          afrmm_value == o.afrmm_value &&
          intermediate_type == o.intermediate_type &&
          buyer_federal_tax_id == o.buyer_federal_tax_id &&
          buyer_state == o.buyer_state &&
          exporter_code == o.exporter_code &&
          adi == o.adi
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [customs_value, di_number, register_date_di, clearance_site, clearance_state, clearance_date, transport_di_type, afrmm_value, intermediate_type, buyer_federal_tax_id, buyer_state, exporter_code, adi].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
