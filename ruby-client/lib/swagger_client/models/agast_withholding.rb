=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient
  # inform if this item is subject to withholding tax on service Transactions, default true
  class AgastWithholding
    attr_accessor :irrf

    # reference id to TaxLegalReason
    attr_accessor :irrf_legal_reason

    # Item subjecto to payroll discharge Item sujeto à desoneraçãode folha de pagamento 
    attr_accessor :inss_subject_to_discharge

    attr_accessor :inss

    # reference id to TaxLegalReason
    attr_accessor :inss_legal_reason

    attr_accessor :in_ss_for_simples

    # reference id to TaxLegalReason
    attr_accessor :inss_for_simples_legal_reason

    attr_accessor :pis

    attr_accessor :cofins

    attr_accessor :csll


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'irrf' => :'IRRF',
        :'irrf_legal_reason' => :'IRRFLegalReason',
        :'inss_subject_to_discharge' => :'INSSSubjectToDischarge',
        :'inss' => :'INSS',
        :'inss_legal_reason' => :'INSSLegalReason',
        :'in_ss_for_simples' => :'INSsForSimples',
        :'inss_for_simples_legal_reason' => :'INSSForSimplesLegalReason',
        :'pis' => :'PIS',
        :'cofins' => :'COFINS',
        :'csll' => :'CSLL'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'irrf' => :'BOOLEAN',
        :'irrf_legal_reason' => :'String',
        :'inss_subject_to_discharge' => :'BOOLEAN',
        :'inss' => :'BOOLEAN',
        :'inss_legal_reason' => :'String',
        :'in_ss_for_simples' => :'BOOLEAN',
        :'inss_for_simples_legal_reason' => :'String',
        :'pis' => :'AgastWithholdingPIS',
        :'cofins' => :'AgastWithholdingCOFINS',
        :'csll' => :'AgastWithholdingCSLL'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'IRRF')
        self.irrf = attributes[:'IRRF']
      end

      if attributes.has_key?(:'IRRFLegalReason')
        self.irrf_legal_reason = attributes[:'IRRFLegalReason']
      end

      if attributes.has_key?(:'INSSSubjectToDischarge')
        self.inss_subject_to_discharge = attributes[:'INSSSubjectToDischarge']
      end

      if attributes.has_key?(:'INSS')
        self.inss = attributes[:'INSS']
      end

      if attributes.has_key?(:'INSSLegalReason')
        self.inss_legal_reason = attributes[:'INSSLegalReason']
      end

      if attributes.has_key?(:'INSsForSimples')
        self.in_ss_for_simples = attributes[:'INSsForSimples']
      end

      if attributes.has_key?(:'INSSForSimplesLegalReason')
        self.inss_for_simples_legal_reason = attributes[:'INSSForSimplesLegalReason']
      end

      if attributes.has_key?(:'PIS')
        self.pis = attributes[:'PIS']
      end

      if attributes.has_key?(:'COFINS')
        self.cofins = attributes[:'COFINS']
      end

      if attributes.has_key?(:'CSLL')
        self.csll = attributes[:'CSLL']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@irrf_legal_reason.nil? && @irrf_legal_reason.to_s.length > 60
        invalid_properties.push("invalid value for 'irrf_legal_reason', the character length must be smaller than or equal to 60.")
      end

      if !@inss_legal_reason.nil? && @inss_legal_reason.to_s.length > 60
        invalid_properties.push("invalid value for 'inss_legal_reason', the character length must be smaller than or equal to 60.")
      end

      if !@inss_for_simples_legal_reason.nil? && @inss_for_simples_legal_reason.to_s.length > 60
        invalid_properties.push("invalid value for 'inss_for_simples_legal_reason', the character length must be smaller than or equal to 60.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@irrf_legal_reason.nil? && @irrf_legal_reason.to_s.length > 60
      return false if !@inss_legal_reason.nil? && @inss_legal_reason.to_s.length > 60
      return false if !@inss_for_simples_legal_reason.nil? && @inss_for_simples_legal_reason.to_s.length > 60
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] irrf_legal_reason Value to be assigned
    def irrf_legal_reason=(irrf_legal_reason)

      if !irrf_legal_reason.nil? && irrf_legal_reason.to_s.length > 60
        fail ArgumentError, "invalid value for 'irrf_legal_reason', the character length must be smaller than or equal to 60."
      end

      @irrf_legal_reason = irrf_legal_reason
    end

    # Custom attribute writer method with validation
    # @param [Object] inss_legal_reason Value to be assigned
    def inss_legal_reason=(inss_legal_reason)

      if !inss_legal_reason.nil? && inss_legal_reason.to_s.length > 60
        fail ArgumentError, "invalid value for 'inss_legal_reason', the character length must be smaller than or equal to 60."
      end

      @inss_legal_reason = inss_legal_reason
    end

    # Custom attribute writer method with validation
    # @param [Object] inss_for_simples_legal_reason Value to be assigned
    def inss_for_simples_legal_reason=(inss_for_simples_legal_reason)

      if !inss_for_simples_legal_reason.nil? && inss_for_simples_legal_reason.to_s.length > 60
        fail ArgumentError, "invalid value for 'inss_for_simples_legal_reason', the character length must be smaller than or equal to 60."
      end

      @inss_for_simples_legal_reason = inss_for_simples_legal_reason
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          irrf == o.irrf &&
          irrf_legal_reason == o.irrf_legal_reason &&
          inss_subject_to_discharge == o.inss_subject_to_discharge &&
          inss == o.inss &&
          inss_legal_reason == o.inss_legal_reason &&
          in_ss_for_simples == o.in_ss_for_simples &&
          inss_for_simples_legal_reason == o.inss_for_simples_legal_reason &&
          pis == o.pis &&
          cofins == o.cofins &&
          csll == o.csll
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [irrf, irrf_legal_reason, inss_subject_to_discharge, inss, inss_legal_reason, in_ss_for_simples, inss_for_simples_legal_reason, pis, cofins, csll].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
