=begin
#BR16 - API

#This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class FuelPumpNumber
    # Identification number of nozzle used in the dispensing process.   Numero de identificação do Bico utilizado no abastecimento 
    attr_accessor :nozzle_number_fuel_supply

    # Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado 
    attr_accessor :fuel_pump_number

    # Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado 
    attr_accessor :fuel_tank_number

    # Valor do Encerrante no ínicio do abastecimento.  Reading of auto-counter (encerrante) at the start of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$ 
    attr_accessor :start_value_of_pump_number

    # Valor do Encerrante no final do abastecimento.  Reading of auto-counter (encerrante) at the end of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$ 
    attr_accessor :end_value_of_pump_number


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'nozzle_number_fuel_supply' => :'nozzleNumberFuelSupply',
        :'fuel_pump_number' => :'fuelPumpNumber',
        :'fuel_tank_number' => :'fuelTankNumber',
        :'start_value_of_pump_number' => :'startValueOfPumpNumber',
        :'end_value_of_pump_number' => :'endValueOfPumpNumber'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'nozzle_number_fuel_supply' => :'String',
        :'fuel_pump_number' => :'String',
        :'fuel_tank_number' => :'String',
        :'start_value_of_pump_number' => :'Float',
        :'end_value_of_pump_number' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'nozzleNumberFuelSupply')
        self.nozzle_number_fuel_supply = attributes[:'nozzleNumberFuelSupply']
      end

      if attributes.has_key?(:'fuelPumpNumber')
        self.fuel_pump_number = attributes[:'fuelPumpNumber']
      end

      if attributes.has_key?(:'fuelTankNumber')
        self.fuel_tank_number = attributes[:'fuelTankNumber']
      end

      if attributes.has_key?(:'startValueOfPumpNumber')
        self.start_value_of_pump_number = attributes[:'startValueOfPumpNumber']
      end

      if attributes.has_key?(:'endValueOfPumpNumber')
        self.end_value_of_pump_number = attributes[:'endValueOfPumpNumber']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @nozzle_number_fuel_supply.nil?
        invalid_properties.push("invalid value for 'nozzle_number_fuel_supply', nozzle_number_fuel_supply cannot be nil.")
      end

      if @nozzle_number_fuel_supply !~ Regexp.new(/[0-9]{1,3}/)
        invalid_properties.push("invalid value for 'nozzle_number_fuel_supply', must conform to the pattern /[0-9]{1,3}/.")
      end

      if @fuel_pump_number.nil?
        invalid_properties.push("invalid value for 'fuel_pump_number', fuel_pump_number cannot be nil.")
      end

      if @fuel_pump_number !~ Regexp.new(/[0-9]{1,3}/)
        invalid_properties.push("invalid value for 'fuel_pump_number', must conform to the pattern /[0-9]{1,3}/.")
      end

      if @fuel_tank_number.nil?
        invalid_properties.push("invalid value for 'fuel_tank_number', fuel_tank_number cannot be nil.")
      end

      if @fuel_tank_number !~ Regexp.new(/[0-9]{1,3}/)
        invalid_properties.push("invalid value for 'fuel_tank_number', must conform to the pattern /[0-9]{1,3}/.")
      end

      if @start_value_of_pump_number.nil?
        invalid_properties.push("invalid value for 'start_value_of_pump_number', start_value_of_pump_number cannot be nil.")
      end

      if @end_value_of_pump_number.nil?
        invalid_properties.push("invalid value for 'end_value_of_pump_number', end_value_of_pump_number cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @nozzle_number_fuel_supply.nil?
      return false if @nozzle_number_fuel_supply !~ Regexp.new(/[0-9]{1,3}/)
      return false if @fuel_pump_number.nil?
      return false if @fuel_pump_number !~ Regexp.new(/[0-9]{1,3}/)
      return false if @fuel_tank_number.nil?
      return false if @fuel_tank_number !~ Regexp.new(/[0-9]{1,3}/)
      return false if @start_value_of_pump_number.nil?
      return false if @end_value_of_pump_number.nil?
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] nozzle_number_fuel_supply Value to be assigned
    def nozzle_number_fuel_supply=(nozzle_number_fuel_supply)
      if nozzle_number_fuel_supply.nil?
        fail ArgumentError, "nozzle_number_fuel_supply cannot be nil"
      end

      if nozzle_number_fuel_supply !~ Regexp.new(/[0-9]{1,3}/)
        fail ArgumentError, "invalid value for 'nozzle_number_fuel_supply', must conform to the pattern /[0-9]{1,3}/."
      end

      @nozzle_number_fuel_supply = nozzle_number_fuel_supply
    end

    # Custom attribute writer method with validation
    # @param [Object] fuel_pump_number Value to be assigned
    def fuel_pump_number=(fuel_pump_number)
      if fuel_pump_number.nil?
        fail ArgumentError, "fuel_pump_number cannot be nil"
      end

      if fuel_pump_number !~ Regexp.new(/[0-9]{1,3}/)
        fail ArgumentError, "invalid value for 'fuel_pump_number', must conform to the pattern /[0-9]{1,3}/."
      end

      @fuel_pump_number = fuel_pump_number
    end

    # Custom attribute writer method with validation
    # @param [Object] fuel_tank_number Value to be assigned
    def fuel_tank_number=(fuel_tank_number)
      if fuel_tank_number.nil?
        fail ArgumentError, "fuel_tank_number cannot be nil"
      end

      if fuel_tank_number !~ Regexp.new(/[0-9]{1,3}/)
        fail ArgumentError, "invalid value for 'fuel_tank_number', must conform to the pattern /[0-9]{1,3}/."
      end

      @fuel_tank_number = fuel_tank_number
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          nozzle_number_fuel_supply == o.nozzle_number_fuel_supply &&
          fuel_pump_number == o.fuel_pump_number &&
          fuel_tank_number == o.fuel_tank_number &&
          start_value_of_pump_number == o.start_value_of_pump_number &&
          end_value_of_pump_number == o.end_value_of_pump_number
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [nozzle_number_fuel_supply, fuel_pump_number, fuel_tank_number, start_value_of_pump_number, end_value_of_pump_number].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
