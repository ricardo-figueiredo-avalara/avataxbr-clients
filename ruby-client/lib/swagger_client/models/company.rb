=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class Company
    # string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company
    attr_accessor :code

    # Official Company name (Razão Social)
    attr_accessor :official_name

    # Company name (DBA - Nome de Fantasia),  Used to identify branches/subsidiaries with same name
    attr_accessor :name

    attr_accessor :entity_type

    # Company has participation of state-owned capital (it will be considerated like a government entity)
    attr_accessor :subject_to_srf1234

    attr_accessor :federal_tax_regime

    # this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 
    attr_accessor :pis_subject_to

    # this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 
    attr_accessor :cofins_subject_to

    # this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 
    attr_accessor :csll_subject_to

    # When th company is REAL PROFIT usually it operates under a Non-Cumulative PIS/COFINS regime But exist some services that are always Cumulative regime. If the company has all receipts from Non-Cumulative services this flag will be set to True. This flag informs special conditions to credit of PIS/COFINS when this company is out of Free zone and  purchases from Free Zone Company Quando uma empresa fora da Zona Franca adquire uma produto ou serviço de uma empresa situada na Zona Franca de Manaus, o crédito de PIS E COFINS segue estas aliquotas diferenciadas. Fundamentação, art. 5º da Instrução Normativa SRF nº 546/2005; art. 3º, § 12 da Lei nº 10.637/2002; art. 3º, § 17 da Lei nº 10.833/2003; art. 4º da Lei nº 11.307/2006. DESTINATÁRIO ALÍQUOTAS PIS COFINS a) Venda efetuada a pessoa jurídica estabelecida fora da Zona Franca de Manaus, que apure a Contribuição para o PIS/PASEP no regime de não-cumulatividade débito 0,65% 3% crédito 1% 4,6% c) Venda efetuada a pessoa jurídica estabelecida fora da Zona Franca de Manaus, que apure o imposto de renda com base no lucro real e que tenha sua receita, total ou parcialmente, excluída do regime de incidência não-cumulativa da Contribuição para o PIS/PASEP débito 1,3% 6% crédito 1,65% 7,6% 
    attr_accessor :receipts_are_full_no_cumulative_pis_cofins

    # On purchase transaction, to force withholding INSS this Flag can be set to True
    attr_accessor :inss_withhold_subject_to

    # On purchase transaction, to force withhold ISS this Flag can be set to True
    attr_accessor :iss_withhold_subject_to

    # On purchase transaction, if this flag is FALSE, the system will not withhold IRRF. if this flag is TRUE the system will analise other rules to define if will have witholding 
    attr_accessor :irrf_withhold_subject_to

    # Actual ICMS Rate for this company (if the company is Tax Regime Simplified). Aliquota de ICMS da companhia caso Optante do Simples 
    attr_accessor :icms_rate_for_simplestaxregime

    # ICMS Exempt when Tax Regime is Simplified because total gross revenue is bellow amount defined by state (see PARANÁ State) Isenção do ICMS no Simples Nacional para faixa de receita bruta 
    attr_accessor :is_exempt_by_gross_revenue_for_simplestaxregime

    attr_accessor :configuration

    attr_accessor :mail_server

    # Person or company authorized to downloadNFe
    attr_accessor :authorized_to_download_n_fe

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'code' => :'code',
        :'official_name' => :'officialName',
        :'name' => :'name',
        :'entity_type' => :'entityType',
        :'subject_to_srf1234' => :'subjectToSRF1234',
        :'federal_tax_regime' => :'federalTaxRegime',
        :'pis_subject_to' => :'pisSubjectTo',
        :'cofins_subject_to' => :'cofinsSubjectTo',
        :'csll_subject_to' => :'csllSubjectTo',
        :'receipts_are_full_no_cumulative_pis_cofins' => :'receiptsAreFullNoCumulativePisCofins',
        :'inss_withhold_subject_to' => :'inssWithholdSubjectTo',
        :'iss_withhold_subject_to' => :'issWithholdSubjectTo',
        :'irrf_withhold_subject_to' => :'irrfWithholdSubjectTo',
        :'icms_rate_for_simplestaxregime' => :'icmsRateForSimplestaxregime',
        :'is_exempt_by_gross_revenue_for_simplestaxregime' => :'isExemptByGrossRevenueForSimplestaxregime',
        :'configuration' => :'configuration',
        :'mail_server' => :'mailServer',
        :'authorized_to_download_n_fe' => :'authorizedToDownloadNFe'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'code' => :'String',
        :'official_name' => :'String',
        :'name' => :'String',
        :'entity_type' => :'EntityType',
        :'subject_to_srf1234' => :'BOOLEAN',
        :'federal_tax_regime' => :'FederalTaxRegime',
        :'pis_subject_to' => :'String',
        :'cofins_subject_to' => :'String',
        :'csll_subject_to' => :'String',
        :'receipts_are_full_no_cumulative_pis_cofins' => :'BOOLEAN',
        :'inss_withhold_subject_to' => :'BOOLEAN',
        :'iss_withhold_subject_to' => :'BOOLEAN',
        :'irrf_withhold_subject_to' => :'BOOLEAN',
        :'icms_rate_for_simplestaxregime' => :'Float',
        :'is_exempt_by_gross_revenue_for_simplestaxregime' => :'BOOLEAN',
        :'configuration' => :'CompanyConfiguration',
        :'mail_server' => :'CompanyMailServer',
        :'authorized_to_download_n_fe' => :'Array<CompanyAuthorizedToDownloadNFe>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.has_key?(:'officialName')
        self.official_name = attributes[:'officialName']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'entityType')
        self.entity_type = attributes[:'entityType']
      end

      if attributes.has_key?(:'subjectToSRF1234')
        self.subject_to_srf1234 = attributes[:'subjectToSRF1234']
      end

      if attributes.has_key?(:'federalTaxRegime')
        self.federal_tax_regime = attributes[:'federalTaxRegime']
      end

      if attributes.has_key?(:'pisSubjectTo')
        self.pis_subject_to = attributes[:'pisSubjectTo']
      end

      if attributes.has_key?(:'cofinsSubjectTo')
        self.cofins_subject_to = attributes[:'cofinsSubjectTo']
      end

      if attributes.has_key?(:'csllSubjectTo')
        self.csll_subject_to = attributes[:'csllSubjectTo']
      end

      if attributes.has_key?(:'receiptsAreFullNoCumulativePisCofins')
        self.receipts_are_full_no_cumulative_pis_cofins = attributes[:'receiptsAreFullNoCumulativePisCofins']
      end

      if attributes.has_key?(:'inssWithholdSubjectTo')
        self.inss_withhold_subject_to = attributes[:'inssWithholdSubjectTo']
      end

      if attributes.has_key?(:'issWithholdSubjectTo')
        self.iss_withhold_subject_to = attributes[:'issWithholdSubjectTo']
      end

      if attributes.has_key?(:'irrfWithholdSubjectTo')
        self.irrf_withhold_subject_to = attributes[:'irrfWithholdSubjectTo']
      end

      if attributes.has_key?(:'icmsRateForSimplestaxregime')
        self.icms_rate_for_simplestaxregime = attributes[:'icmsRateForSimplestaxregime']
      end

      if attributes.has_key?(:'isExemptByGrossRevenueForSimplestaxregime')
        self.is_exempt_by_gross_revenue_for_simplestaxregime = attributes[:'isExemptByGrossRevenueForSimplestaxregime']
      end

      if attributes.has_key?(:'configuration')
        self.configuration = attributes[:'configuration']
      end

      if attributes.has_key?(:'mailServer')
        self.mail_server = attributes[:'mailServer']
      end

      if attributes.has_key?(:'authorizedToDownloadNFe')
        if (value = attributes[:'authorizedToDownloadNFe']).is_a?(Array)
          self.authorized_to_download_n_fe = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @code.nil?
        invalid_properties.push("invalid value for 'code', code cannot be nil.")
      end

      if @code.to_s.length > 60
        invalid_properties.push("invalid value for 'code', the character length must be smaller than or equal to 60.")
      end

      if @official_name.nil?
        invalid_properties.push("invalid value for 'official_name', official_name cannot be nil.")
      end

      if @official_name.to_s.length > 150
        invalid_properties.push("invalid value for 'official_name', the character length must be smaller than or equal to 150.")
      end

      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      if @name.to_s.length > 150
        invalid_properties.push("invalid value for 'name', the character length must be smaller than or equal to 150.")
      end

      if @entity_type.nil?
        invalid_properties.push("invalid value for 'entity_type', entity_type cannot be nil.")
      end

      if @federal_tax_regime.nil?
        invalid_properties.push("invalid value for 'federal_tax_regime', federal_tax_regime cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @code.nil?
      return false if @code.to_s.length > 60
      return false if @official_name.nil?
      return false if @official_name.to_s.length > 150
      return false if @name.nil?
      return false if @name.to_s.length > 150
      return false if @entity_type.nil?
      return false if @federal_tax_regime.nil?
      pis_subject_to_validator = EnumAttributeValidator.new('String', ["TAXABLE", "NOT TAXABLE", "EXEMPT"])
      return false unless pis_subject_to_validator.valid?(@pis_subject_to)
      cofins_subject_to_validator = EnumAttributeValidator.new('String', ["TAXABLE", "NOT TAXABLE", "EXEMPT"])
      return false unless cofins_subject_to_validator.valid?(@cofins_subject_to)
      csll_subject_to_validator = EnumAttributeValidator.new('String', ["TAXABLE", "NOT TAXABLE", "EXEMPT"])
      return false unless csll_subject_to_validator.valid?(@csll_subject_to)
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] code Value to be assigned
    def code=(code)
      if code.nil?
        fail ArgumentError, "code cannot be nil"
      end

      if code.to_s.length > 60
        fail ArgumentError, "invalid value for 'code', the character length must be smaller than or equal to 60."
      end

      @code = code
    end

    # Custom attribute writer method with validation
    # @param [Object] official_name Value to be assigned
    def official_name=(official_name)
      if official_name.nil?
        fail ArgumentError, "official_name cannot be nil"
      end

      if official_name.to_s.length > 150
        fail ArgumentError, "invalid value for 'official_name', the character length must be smaller than or equal to 150."
      end

      @official_name = official_name
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, "name cannot be nil"
      end

      if name.to_s.length > 150
        fail ArgumentError, "invalid value for 'name', the character length must be smaller than or equal to 150."
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pis_subject_to Object to be assigned
    def pis_subject_to=(pis_subject_to)
      validator = EnumAttributeValidator.new('String', ["TAXABLE", "NOT TAXABLE", "EXEMPT"])
      unless validator.valid?(pis_subject_to)
        fail ArgumentError, "invalid value for 'pis_subject_to', must be one of #{validator.allowable_values}."
      end
      @pis_subject_to = pis_subject_to
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cofins_subject_to Object to be assigned
    def cofins_subject_to=(cofins_subject_to)
      validator = EnumAttributeValidator.new('String', ["TAXABLE", "NOT TAXABLE", "EXEMPT"])
      unless validator.valid?(cofins_subject_to)
        fail ArgumentError, "invalid value for 'cofins_subject_to', must be one of #{validator.allowable_values}."
      end
      @cofins_subject_to = cofins_subject_to
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] csll_subject_to Object to be assigned
    def csll_subject_to=(csll_subject_to)
      validator = EnumAttributeValidator.new('String', ["TAXABLE", "NOT TAXABLE", "EXEMPT"])
      unless validator.valid?(csll_subject_to)
        fail ArgumentError, "invalid value for 'csll_subject_to', must be one of #{validator.allowable_values}."
      end
      @csll_subject_to = csll_subject_to
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          code == o.code &&
          official_name == o.official_name &&
          name == o.name &&
          entity_type == o.entity_type &&
          subject_to_srf1234 == o.subject_to_srf1234 &&
          federal_tax_regime == o.federal_tax_regime &&
          pis_subject_to == o.pis_subject_to &&
          cofins_subject_to == o.cofins_subject_to &&
          csll_subject_to == o.csll_subject_to &&
          receipts_are_full_no_cumulative_pis_cofins == o.receipts_are_full_no_cumulative_pis_cofins &&
          inss_withhold_subject_to == o.inss_withhold_subject_to &&
          iss_withhold_subject_to == o.iss_withhold_subject_to &&
          irrf_withhold_subject_to == o.irrf_withhold_subject_to &&
          icms_rate_for_simplestaxregime == o.icms_rate_for_simplestaxregime &&
          is_exempt_by_gross_revenue_for_simplestaxregime == o.is_exempt_by_gross_revenue_for_simplestaxregime &&
          configuration == o.configuration &&
          mail_server == o.mail_server &&
          authorized_to_download_n_fe == o.authorized_to_download_n_fe
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [code, official_name, name, entity_type, subject_to_srf1234, federal_tax_regime, pis_subject_to, cofins_subject_to, csll_subject_to, receipts_are_full_no_cumulative_pis_cofins, inss_withhold_subject_to, iss_withhold_subject_to, irrf_withhold_subject_to, icms_rate_for_simplestaxregime, is_exempt_by_gross_revenue_for_simplestaxregime, configuration, mail_server, authorized_to_download_n_fe].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
