=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class NRefRefECF
    # ECF Sequential number that generated Cupom attached to NFe informar o número de ordem seqüencial do ECF que emitiu o Cupom Fiscal vinculado à NF-e 
    attr_accessor :n_ecf

    # Operational counter number attached to NFe Informar o Número do Contador de Ordem de Operação - COO vinculado à NF-e 
    attr_accessor :n_coo

    # Fiscal document model - '2B' # coupon tax not ECF - '2C' # PDV coupon tax - '2D' # ECF coupon tax 
    attr_accessor :mod_ecf

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'n_ecf' => :'nECF',
        :'n_coo' => :'nCOO',
        :'mod_ecf' => :'modECF'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'n_ecf' => :'String',
        :'n_coo' => :'String',
        :'mod_ecf' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'nECF')
        self.n_ecf = attributes[:'nECF']
      end

      if attributes.has_key?(:'nCOO')
        self.n_coo = attributes[:'nCOO']
      end

      if attributes.has_key?(:'modECF')
        self.mod_ecf = attributes[:'modECF']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @n_ecf.nil?
        invalid_properties.push("invalid value for 'n_ecf', n_ecf cannot be nil.")
      end

      if @n_ecf !~ Regexp.new(/[0-9]{1,3}/)
        invalid_properties.push("invalid value for 'n_ecf', must conform to the pattern /[0-9]{1,3}/.")
      end

      if @n_coo.nil?
        invalid_properties.push("invalid value for 'n_coo', n_coo cannot be nil.")
      end

      if @n_coo !~ Regexp.new(/[0-9]{1,6}/)
        invalid_properties.push("invalid value for 'n_coo', must conform to the pattern /[0-9]{1,6}/.")
      end

      if @mod_ecf.nil?
        invalid_properties.push("invalid value for 'mod_ecf', mod_ecf cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @n_ecf.nil?
      return false if @n_ecf !~ Regexp.new(/[0-9]{1,3}/)
      return false if @n_coo.nil?
      return false if @n_coo !~ Regexp.new(/[0-9]{1,6}/)
      return false if @mod_ecf.nil?
      mod_ecf_validator = EnumAttributeValidator.new('String', ["2B", "2C", "2D"])
      return false unless mod_ecf_validator.valid?(@mod_ecf)
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] n_ecf Value to be assigned
    def n_ecf=(n_ecf)
      if n_ecf.nil?
        fail ArgumentError, "n_ecf cannot be nil"
      end

      if n_ecf !~ Regexp.new(/[0-9]{1,3}/)
        fail ArgumentError, "invalid value for 'n_ecf', must conform to the pattern /[0-9]{1,3}/."
      end

      @n_ecf = n_ecf
    end

    # Custom attribute writer method with validation
    # @param [Object] n_coo Value to be assigned
    def n_coo=(n_coo)
      if n_coo.nil?
        fail ArgumentError, "n_coo cannot be nil"
      end

      if n_coo !~ Regexp.new(/[0-9]{1,6}/)
        fail ArgumentError, "invalid value for 'n_coo', must conform to the pattern /[0-9]{1,6}/."
      end

      @n_coo = n_coo
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mod_ecf Object to be assigned
    def mod_ecf=(mod_ecf)
      validator = EnumAttributeValidator.new('String', ["2B", "2C", "2D"])
      unless validator.valid?(mod_ecf)
        fail ArgumentError, "invalid value for 'mod_ecf', must be one of #{validator.allowable_values}."
      end
      @mod_ecf = mod_ecf
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          n_ecf == o.n_ecf &&
          n_coo == o.n_coo &&
          mod_ecf == o.mod_ecf
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [n_ecf, n_coo, mod_ecf].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
