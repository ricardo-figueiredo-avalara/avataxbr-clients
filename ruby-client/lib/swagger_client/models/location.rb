=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class Location
    # Street Name
    attr_accessor :street

    # Neighborhood Name
    attr_accessor :neighborhood

    # Brazilian Zip Code
    attr_accessor :zipcode

    # City Code (IBGE)
    attr_accessor :city_code

    # City Name
    attr_accessor :city_name

    attr_accessor :state

    # Country Code
    attr_accessor :country_code

    # Use ISO 3166-1 alpha-3 codes
    attr_accessor :country

    # House number
    attr_accessor :number

    # Any other information about the address (Room, Suite, Floor, etc)).
    attr_accessor :complement

    # Phone number
    attr_accessor :phone

    # Company ID
    attr_accessor :company_id

    # this property identify the location, it is unique for this company
    attr_accessor :code

    # this property identify the location, it is unique for this company
    attr_accessor :type

    # Email
    attr_accessor :email

    # Federal tax id, CNPJ or CPF
    attr_accessor :federal_tax_id

    # state tax id for this location
    attr_accessor :state_tax_id

    attr_accessor :secondary_state_tax_id

    # City Tax ID
    attr_accessor :city_tax_id

    attr_accessor :suframa

    # Main location activity
    attr_accessor :main_activity

    # - 'edi' # City hall has web service and the integration is automatic - 'xml' # Create RPS specific to City, bat does not have webservice integration - 'rps' # Create a generic RPS, NF is by hands 
    attr_accessor :nfse_process_model

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'street' => :'street',
        :'neighborhood' => :'neighborhood',
        :'zipcode' => :'zipcode',
        :'city_code' => :'cityCode',
        :'city_name' => :'cityName',
        :'state' => :'state',
        :'country_code' => :'countryCode',
        :'country' => :'country',
        :'number' => :'number',
        :'complement' => :'complement',
        :'phone' => :'phone',
        :'company_id' => :'companyId',
        :'code' => :'code',
        :'type' => :'type',
        :'email' => :'email',
        :'federal_tax_id' => :'federalTaxId',
        :'state_tax_id' => :'stateTaxId',
        :'secondary_state_tax_id' => :'secondaryStateTaxId',
        :'city_tax_id' => :'cityTaxId',
        :'suframa' => :'suframa',
        :'main_activity' => :'mainActivity',
        :'nfse_process_model' => :'nfseProcessModel'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'street' => :'String',
        :'neighborhood' => :'String',
        :'zipcode' => :'String',
        :'city_code' => :'String',
        :'city_name' => :'String',
        :'state' => :'StateEnum',
        :'country_code' => :'String',
        :'country' => :'String',
        :'number' => :'String',
        :'complement' => :'String',
        :'phone' => :'String',
        :'company_id' => :'String',
        :'code' => :'String',
        :'type' => :'String',
        :'email' => :'String',
        :'federal_tax_id' => :'String',
        :'state_tax_id' => :'String',
        :'secondary_state_tax_id' => :'Array<LocationSecondaryStateTaxId>',
        :'city_tax_id' => :'String',
        :'suframa' => :'String',
        :'main_activity' => :'String',
        :'nfse_process_model' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'street')
        self.street = attributes[:'street']
      end

      if attributes.has_key?(:'neighborhood')
        self.neighborhood = attributes[:'neighborhood']
      end

      if attributes.has_key?(:'zipcode')
        self.zipcode = attributes[:'zipcode']
      end

      if attributes.has_key?(:'cityCode')
        self.city_code = attributes[:'cityCode']
      end

      if attributes.has_key?(:'cityName')
        self.city_name = attributes[:'cityName']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'countryCode')
        self.country_code = attributes[:'countryCode']
      else
        self.country_code = "0"
      end

      if attributes.has_key?(:'country')
        self.country = attributes[:'country']
      else
        self.country = "BRA"
      end

      if attributes.has_key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.has_key?(:'complement')
        self.complement = attributes[:'complement']
      end

      if attributes.has_key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.has_key?(:'companyId')
        self.company_id = attributes[:'companyId']
      end

      if attributes.has_key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'federalTaxId')
        self.federal_tax_id = attributes[:'federalTaxId']
      end

      if attributes.has_key?(:'stateTaxId')
        self.state_tax_id = attributes[:'stateTaxId']
      end

      if attributes.has_key?(:'secondaryStateTaxId')
        if (value = attributes[:'secondaryStateTaxId']).is_a?(Array)
          self.secondary_state_tax_id = value
        end
      end

      if attributes.has_key?(:'cityTaxId')
        self.city_tax_id = attributes[:'cityTaxId']
      end

      if attributes.has_key?(:'suframa')
        self.suframa = attributes[:'suframa']
      end

      if attributes.has_key?(:'mainActivity')
        self.main_activity = attributes[:'mainActivity']
      end

      if attributes.has_key?(:'nfseProcessModel')
        self.nfse_process_model = attributes[:'nfseProcessModel']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@street.nil? && @street.to_s.length > 60
        invalid_properties.push("invalid value for 'street', the character length must be smaller than or equal to 60.")
      end

      if !@neighborhood.nil? && @neighborhood.to_s.length > 60
        invalid_properties.push("invalid value for 'neighborhood', the character length must be smaller than or equal to 60.")
      end

      if @zipcode.nil?
        invalid_properties.push("invalid value for 'zipcode', zipcode cannot be nil.")
      end

      if @zipcode !~ Regexp.new(/^(\\d{8}|\\d{5}\\-\\d{3})$/)
        invalid_properties.push("invalid value for 'zipcode', must conform to the pattern /^(\\d{8}|\\d{5}\\-\\d{3})$/.")
      end

      if !@city_code.nil? && @city_code !~ Regexp.new(/^(\\d{7})$/)
        invalid_properties.push("invalid value for 'city_code', must conform to the pattern /^(\\d{7})$/.")
      end

      if !@city_name.nil? && @city_name.to_s.length > 60
        invalid_properties.push("invalid value for 'city_name', the character length must be smaller than or equal to 60.")
      end

      if !@country_code.nil? && @country_code !~ Regexp.new(/[0-9]{1,4}/)
        invalid_properties.push("invalid value for 'country_code', must conform to the pattern /[0-9]{1,4}/.")
      end

      if !@country.nil? && @country.to_s.length > 3
        invalid_properties.push("invalid value for 'country', the character length must be smaller than or equal to 3.")
      end

      if !@country.nil? && @country !~ Regexp.new(/^([A-Z]{3})$/)
        invalid_properties.push("invalid value for 'country', must conform to the pattern /^([A-Z]{3})$/.")
      end

      if !@number.nil? && @number.to_s.length > 60
        invalid_properties.push("invalid value for 'number', the character length must be smaller than or equal to 60.")
      end

      if !@complement.nil? && @complement.to_s.length > 60
        invalid_properties.push("invalid value for 'complement', the character length must be smaller than or equal to 60.")
      end

      if !@phone.nil? && @phone !~ Regexp.new(/^(\\d{6,14}|\\(\\d{2}\\)\\s*\\d{4,5}-*\\d{4})$/)
        invalid_properties.push("invalid value for 'phone', must conform to the pattern /^(\\d{6,14}|\\(\\d{2}\\)\\s*\\d{4,5}-*\\d{4})$/.")
      end

      if @company_id.nil?
        invalid_properties.push("invalid value for 'company_id', company_id cannot be nil.")
      end

      if @code.nil?
        invalid_properties.push("invalid value for 'code', code cannot be nil.")
      end

      if @code.to_s.length > 60
        invalid_properties.push("invalid value for 'code', the character length must be smaller than or equal to 60.")
      end

      if @type.nil?
        invalid_properties.push("invalid value for 'type', type cannot be nil.")
      end

      if !@email.nil? && @email.to_s.length > 60
        invalid_properties.push("invalid value for 'email', the character length must be smaller than or equal to 60.")
      end

      if !@federal_tax_id.nil? && @federal_tax_id !~ Regexp.new(/^(\\d{14}|\\d{2}\\.\\d{3}.\\d{3}/\\d{4}-\\d{2}|\\d{11}|\\d{3}\\.\\d{3}.\\d{3}-\\d{2})$/)
        invalid_properties.push("invalid value for 'federal_tax_id', must conform to the pattern /^(\\d{14}|\\d{2}\\.\\d{3}.\\d{3}/\\d{4}-\\d{2}|\\d{11}|\\d{3}\\.\\d{3}.\\d{3}-\\d{2})$/.")
      end

      if !@state_tax_id.nil? && @state_tax_id !~ Regexp.new(/^(\\d{9,14}|ISENTO)$/)
        invalid_properties.push("invalid value for 'state_tax_id', must conform to the pattern /^(\\d{9,14}|ISENTO)$/.")
      end

      if !@city_tax_id.nil? && @city_tax_id.to_s.length > 15
        invalid_properties.push("invalid value for 'city_tax_id', the character length must be smaller than or equal to 15.")
      end

      if !@suframa.nil? && @suframa !~ Regexp.new(/[0-9]{8,9}/)
        invalid_properties.push("invalid value for 'suframa', must conform to the pattern /[0-9]{8,9}/.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@street.nil? && @street.to_s.length > 60
      return false if !@neighborhood.nil? && @neighborhood.to_s.length > 60
      return false if @zipcode.nil?
      return false if @zipcode !~ Regexp.new(/^(\\d{8}|\\d{5}\\-\\d{3})$/)
      return false if !@city_code.nil? && @city_code !~ Regexp.new(/^(\\d{7})$/)
      return false if !@city_name.nil? && @city_name.to_s.length > 60
      return false if !@country_code.nil? && @country_code !~ Regexp.new(/[0-9]{1,4}/)
      return false if !@country.nil? && @country.to_s.length > 3
      return false if !@country.nil? && @country !~ Regexp.new(/^([A-Z]{3})$/)
      return false if !@number.nil? && @number.to_s.length > 60
      return false if !@complement.nil? && @complement.to_s.length > 60
      return false if !@phone.nil? && @phone !~ Regexp.new(/^(\\d{6,14}|\\(\\d{2}\\)\\s*\\d{4,5}-*\\d{4})$/)
      return false if @company_id.nil?
      return false if @code.nil?
      return false if @code.to_s.length > 60
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["ShipFrom", "ShipTo", "ServiceRendered"])
      return false unless type_validator.valid?(@type)
      return false if !@email.nil? && @email.to_s.length > 60
      return false if !@federal_tax_id.nil? && @federal_tax_id !~ Regexp.new(/^(\\d{14}|\\d{2}\\.\\d{3}.\\d{3}/\\d{4}-\\d{2}|\\d{11}|\\d{3}\\.\\d{3}.\\d{3}-\\d{2})$/)
      return false if !@state_tax_id.nil? && @state_tax_id !~ Regexp.new(/^(\\d{9,14}|ISENTO)$/)
      return false if !@city_tax_id.nil? && @city_tax_id.to_s.length > 15
      return false if !@suframa.nil? && @suframa !~ Regexp.new(/[0-9]{8,9}/)
      main_activity_validator = EnumAttributeValidator.new('String', ["commerce", "industry", "service"])
      return false unless main_activity_validator.valid?(@main_activity)
      nfse_process_model_validator = EnumAttributeValidator.new('String', ["edi", "xml", "rps"])
      return false unless nfse_process_model_validator.valid?(@nfse_process_model)
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] street Value to be assigned
    def street=(street)

      if !street.nil? && street.to_s.length > 60
        fail ArgumentError, "invalid value for 'street', the character length must be smaller than or equal to 60."
      end

      @street = street
    end

    # Custom attribute writer method with validation
    # @param [Object] neighborhood Value to be assigned
    def neighborhood=(neighborhood)

      if !neighborhood.nil? && neighborhood.to_s.length > 60
        fail ArgumentError, "invalid value for 'neighborhood', the character length must be smaller than or equal to 60."
      end

      @neighborhood = neighborhood
    end

    # Custom attribute writer method with validation
    # @param [Object] zipcode Value to be assigned
    def zipcode=(zipcode)
      if zipcode.nil?
        fail ArgumentError, "zipcode cannot be nil"
      end

      if zipcode !~ Regexp.new(/^(\\d{8}|\\d{5}\\-\\d{3})$/)
        fail ArgumentError, "invalid value for 'zipcode', must conform to the pattern /^(\\d{8}|\\d{5}\\-\\d{3})$/."
      end

      @zipcode = zipcode
    end

    # Custom attribute writer method with validation
    # @param [Object] city_code Value to be assigned
    def city_code=(city_code)

      if !city_code.nil? && city_code !~ Regexp.new(/^(\\d{7})$/)
        fail ArgumentError, "invalid value for 'city_code', must conform to the pattern /^(\\d{7})$/."
      end

      @city_code = city_code
    end

    # Custom attribute writer method with validation
    # @param [Object] city_name Value to be assigned
    def city_name=(city_name)

      if !city_name.nil? && city_name.to_s.length > 60
        fail ArgumentError, "invalid value for 'city_name', the character length must be smaller than or equal to 60."
      end

      @city_name = city_name
    end

    # Custom attribute writer method with validation
    # @param [Object] country_code Value to be assigned
    def country_code=(country_code)

      if !country_code.nil? && country_code !~ Regexp.new(/[0-9]{1,4}/)
        fail ArgumentError, "invalid value for 'country_code', must conform to the pattern /[0-9]{1,4}/."
      end

      @country_code = country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)

      if !country.nil? && country.to_s.length > 3
        fail ArgumentError, "invalid value for 'country', the character length must be smaller than or equal to 3."
      end

      if !country.nil? && country !~ Regexp.new(/^([A-Z]{3})$/)
        fail ArgumentError, "invalid value for 'country', must conform to the pattern /^([A-Z]{3})$/."
      end

      @country = country
    end

    # Custom attribute writer method with validation
    # @param [Object] number Value to be assigned
    def number=(number)

      if !number.nil? && number.to_s.length > 60
        fail ArgumentError, "invalid value for 'number', the character length must be smaller than or equal to 60."
      end

      @number = number
    end

    # Custom attribute writer method with validation
    # @param [Object] complement Value to be assigned
    def complement=(complement)

      if !complement.nil? && complement.to_s.length > 60
        fail ArgumentError, "invalid value for 'complement', the character length must be smaller than or equal to 60."
      end

      @complement = complement
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)

      if !phone.nil? && phone !~ Regexp.new(/^(\\d{6,14}|\\(\\d{2}\\)\\s*\\d{4,5}-*\\d{4})$/)
        fail ArgumentError, "invalid value for 'phone', must conform to the pattern /^(\\d{6,14}|\\(\\d{2}\\)\\s*\\d{4,5}-*\\d{4})$/."
      end

      @phone = phone
    end

    # Custom attribute writer method with validation
    # @param [Object] code Value to be assigned
    def code=(code)
      if code.nil?
        fail ArgumentError, "code cannot be nil"
      end

      if code.to_s.length > 60
        fail ArgumentError, "invalid value for 'code', the character length must be smaller than or equal to 60."
      end

      @code = code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["ShipFrom", "ShipTo", "ServiceRendered"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for 'type', must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)

      if !email.nil? && email.to_s.length > 60
        fail ArgumentError, "invalid value for 'email', the character length must be smaller than or equal to 60."
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] federal_tax_id Value to be assigned
    def federal_tax_id=(federal_tax_id)

      if !federal_tax_id.nil? && federal_tax_id !~ Regexp.new(/^(\\d{14}|\\d{2}\\.\\d{3}.\\d{3}/\\d{4}-\\d{2}|\\d{11}|\\d{3}\\.\\d{3}.\\d{3}-\\d{2})$/)
        fail ArgumentError, "invalid value for 'federal_tax_id', must conform to the pattern /^(\\d{14}|\\d{2}\\.\\d{3}.\\d{3}/\\d{4}-\\d{2}|\\d{11}|\\d{3}\\.\\d{3}.\\d{3}-\\d{2})$/."
      end

      @federal_tax_id = federal_tax_id
    end

    # Custom attribute writer method with validation
    # @param [Object] state_tax_id Value to be assigned
    def state_tax_id=(state_tax_id)

      if !state_tax_id.nil? && state_tax_id !~ Regexp.new(/^(\\d{9,14}|ISENTO)$/)
        fail ArgumentError, "invalid value for 'state_tax_id', must conform to the pattern /^(\\d{9,14}|ISENTO)$/."
      end

      @state_tax_id = state_tax_id
    end

    # Custom attribute writer method with validation
    # @param [Object] city_tax_id Value to be assigned
    def city_tax_id=(city_tax_id)

      if !city_tax_id.nil? && city_tax_id.to_s.length > 15
        fail ArgumentError, "invalid value for 'city_tax_id', the character length must be smaller than or equal to 15."
      end

      @city_tax_id = city_tax_id
    end

    # Custom attribute writer method with validation
    # @param [Object] suframa Value to be assigned
    def suframa=(suframa)

      if !suframa.nil? && suframa !~ Regexp.new(/[0-9]{8,9}/)
        fail ArgumentError, "invalid value for 'suframa', must conform to the pattern /[0-9]{8,9}/."
      end

      @suframa = suframa
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] main_activity Object to be assigned
    def main_activity=(main_activity)
      validator = EnumAttributeValidator.new('String', ["commerce", "industry", "service"])
      unless validator.valid?(main_activity)
        fail ArgumentError, "invalid value for 'main_activity', must be one of #{validator.allowable_values}."
      end
      @main_activity = main_activity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] nfse_process_model Object to be assigned
    def nfse_process_model=(nfse_process_model)
      validator = EnumAttributeValidator.new('String', ["edi", "xml", "rps"])
      unless validator.valid?(nfse_process_model)
        fail ArgumentError, "invalid value for 'nfse_process_model', must be one of #{validator.allowable_values}."
      end
      @nfse_process_model = nfse_process_model
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          street == o.street &&
          neighborhood == o.neighborhood &&
          zipcode == o.zipcode &&
          city_code == o.city_code &&
          city_name == o.city_name &&
          state == o.state &&
          country_code == o.country_code &&
          country == o.country &&
          number == o.number &&
          complement == o.complement &&
          phone == o.phone &&
          company_id == o.company_id &&
          code == o.code &&
          type == o.type &&
          email == o.email &&
          federal_tax_id == o.federal_tax_id &&
          state_tax_id == o.state_tax_id &&
          secondary_state_tax_id == o.secondary_state_tax_id &&
          city_tax_id == o.city_tax_id &&
          suframa == o.suframa &&
          main_activity == o.main_activity &&
          nfse_process_model == o.nfse_process_model
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [street, neighborhood, zipcode, city_code, city_name, state, country_code, country, number, complement, phone, company_id, code, type, email, federal_tax_id, state_tax_id, secondary_state_tax_id, city_tax_id, suframa, main_activity, nfse_process_model].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
