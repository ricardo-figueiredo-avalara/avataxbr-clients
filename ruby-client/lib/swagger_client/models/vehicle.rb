=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class Vehicle
    # - 1 # Sales by car dealership - 2 # Direct billing - 3 # Direct sales - 0 # Other 
    attr_accessor :tp_op

    attr_accessor :chassis_number

    # color code used by factory
    attr_accessor :color_code

    # color name
    attr_accessor :color_name

    # Power using CV unid
    attr_accessor :cv_power

    # engine size in cubic centimeters
    attr_accessor :cylinder_volum_cc

    # net weight
    attr_accessor :net_weight

    # gross weight
    attr_accessor :gross_weight

    # serie
    attr_accessor :serial_number

    # - '01' # Alcohol - '02' # Gas - '03' # Diesel - '16' # Alcohol/Gas - '17' # Gas/Alcohol/GNV - '18' # Gas/Electric 
    attr_accessor :fuel_type

    # engine number
    attr_accessor :engine_number

    # traction capacity, tonne
    attr_accessor :cmt

    # length between axis
    attr_accessor :length_between_axis

    # model year
    attr_accessor :model_year

    # year of factory
    attr_accessor :manufactory_year

    # paynt type
    attr_accessor :paint_type

    attr_accessor :vehicle_renavam_type

    attr_accessor :specie_renavam_type

    attr_accessor :model_renavam_code

    # - '01' # YELLOW - '02' # BLUE - '03' # BEIGE - '04' # WHITE - '05' # GRAY - '06' # GOLDEN - '07' # GRENA - '08' # ORANGE - '09' # BROWN - '10' # SILVER - '11' # BLACK - '12' # PINK - '13' # PURPLE - '14' # GREEN - '15' # RED - '16' # FANTASY 
    attr_accessor :color_denatran_code

    # chassis condition original or modified (remarcado)
    attr_accessor :vin

    # - '1' # Finished(Done) - '2' # Not finished - '3' # Semi-finished 
    attr_accessor :vehicle_manufactory_status

    # max number of sit occupants
    attr_accessor :max_occupants_quantity

    # Lien/restriction type - '0' # No one; - '1' # Alienação Fiduciária; - '2' # Arrendamento Mercantil; - '3' # Reserva de Domínio; - '4' # Penhor de Veículos; - '9' # Other. 
    attr_accessor :restriction_type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tp_op' => :'tpOp',
        :'chassis_number' => :'chassisNumber',
        :'color_code' => :'colorCode',
        :'color_name' => :'colorName',
        :'cv_power' => :'cvPower',
        :'cylinder_volum_cc' => :'cylinderVolumCC',
        :'net_weight' => :'netWeight',
        :'gross_weight' => :'grossWeight',
        :'serial_number' => :'serialNumber',
        :'fuel_type' => :'fuelType',
        :'engine_number' => :'engineNumber',
        :'cmt' => :'cmt',
        :'length_between_axis' => :'lengthBetweenAxis',
        :'model_year' => :'modelYear',
        :'manufactory_year' => :'manufactoryYear',
        :'paint_type' => :'paintType',
        :'vehicle_renavam_type' => :'vehicleRENAVAMType',
        :'specie_renavam_type' => :'specieRENAVAMType',
        :'model_renavam_code' => :'modelRENAVAMCode',
        :'color_denatran_code' => :'colorDENATRANCode',
        :'vin' => :'vin',
        :'vehicle_manufactory_status' => :'vehicleManufactoryStatus',
        :'max_occupants_quantity' => :'maxOccupantsQuantity',
        :'restriction_type' => :'restrictionType'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'tp_op' => :'Integer',
        :'chassis_number' => :'String',
        :'color_code' => :'String',
        :'color_name' => :'String',
        :'cv_power' => :'String',
        :'cylinder_volum_cc' => :'String',
        :'net_weight' => :'String',
        :'gross_weight' => :'String',
        :'serial_number' => :'String',
        :'fuel_type' => :'String',
        :'engine_number' => :'String',
        :'cmt' => :'String',
        :'length_between_axis' => :'String',
        :'model_year' => :'String',
        :'manufactory_year' => :'String',
        :'paint_type' => :'String',
        :'vehicle_renavam_type' => :'String',
        :'specie_renavam_type' => :'String',
        :'model_renavam_code' => :'String',
        :'color_denatran_code' => :'String',
        :'vin' => :'String',
        :'vehicle_manufactory_status' => :'String',
        :'max_occupants_quantity' => :'String',
        :'restriction_type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'tpOp')
        self.tp_op = attributes[:'tpOp']
      end

      if attributes.has_key?(:'chassisNumber')
        self.chassis_number = attributes[:'chassisNumber']
      end

      if attributes.has_key?(:'colorCode')
        self.color_code = attributes[:'colorCode']
      end

      if attributes.has_key?(:'colorName')
        self.color_name = attributes[:'colorName']
      end

      if attributes.has_key?(:'cvPower')
        self.cv_power = attributes[:'cvPower']
      end

      if attributes.has_key?(:'cylinderVolumCC')
        self.cylinder_volum_cc = attributes[:'cylinderVolumCC']
      end

      if attributes.has_key?(:'netWeight')
        self.net_weight = attributes[:'netWeight']
      end

      if attributes.has_key?(:'grossWeight')
        self.gross_weight = attributes[:'grossWeight']
      end

      if attributes.has_key?(:'serialNumber')
        self.serial_number = attributes[:'serialNumber']
      end

      if attributes.has_key?(:'fuelType')
        self.fuel_type = attributes[:'fuelType']
      end

      if attributes.has_key?(:'engineNumber')
        self.engine_number = attributes[:'engineNumber']
      end

      if attributes.has_key?(:'cmt')
        self.cmt = attributes[:'cmt']
      end

      if attributes.has_key?(:'lengthBetweenAxis')
        self.length_between_axis = attributes[:'lengthBetweenAxis']
      end

      if attributes.has_key?(:'modelYear')
        self.model_year = attributes[:'modelYear']
      end

      if attributes.has_key?(:'manufactoryYear')
        self.manufactory_year = attributes[:'manufactoryYear']
      end

      if attributes.has_key?(:'paintType')
        self.paint_type = attributes[:'paintType']
      end

      if attributes.has_key?(:'vehicleRENAVAMType')
        self.vehicle_renavam_type = attributes[:'vehicleRENAVAMType']
      end

      if attributes.has_key?(:'specieRENAVAMType')
        self.specie_renavam_type = attributes[:'specieRENAVAMType']
      end

      if attributes.has_key?(:'modelRENAVAMCode')
        self.model_renavam_code = attributes[:'modelRENAVAMCode']
      end

      if attributes.has_key?(:'colorDENATRANCode')
        self.color_denatran_code = attributes[:'colorDENATRANCode']
      end

      if attributes.has_key?(:'vin')
        self.vin = attributes[:'vin']
      end

      if attributes.has_key?(:'vehicleManufactoryStatus')
        self.vehicle_manufactory_status = attributes[:'vehicleManufactoryStatus']
      end

      if attributes.has_key?(:'maxOccupantsQuantity')
        self.max_occupants_quantity = attributes[:'maxOccupantsQuantity']
      end

      if attributes.has_key?(:'restrictionType')
        self.restriction_type = attributes[:'restrictionType']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @tp_op.nil?
        invalid_properties.push("invalid value for 'tp_op', tp_op cannot be nil.")
      end

      if @chassis_number.nil?
        invalid_properties.push("invalid value for 'chassis_number', chassis_number cannot be nil.")
      end

      if @chassis_number.to_s.length > 17
        invalid_properties.push("invalid value for 'chassis_number', the character length must be smaller than or equal to 17.")
      end

      if @chassis_number !~ Regexp.new(/[A-Z0-9]+/)
        invalid_properties.push("invalid value for 'chassis_number', must conform to the pattern /[A-Z0-9]+/.")
      end

      if @color_code.nil?
        invalid_properties.push("invalid value for 'color_code', color_code cannot be nil.")
      end

      if @color_code.to_s.length > 17
        invalid_properties.push("invalid value for 'color_code', the character length must be smaller than or equal to 17.")
      end

      if @color_name.nil?
        invalid_properties.push("invalid value for 'color_name', color_name cannot be nil.")
      end

      if @color_name.to_s.length > 40
        invalid_properties.push("invalid value for 'color_name', the character length must be smaller than or equal to 40.")
      end

      if @cv_power.nil?
        invalid_properties.push("invalid value for 'cv_power', cv_power cannot be nil.")
      end

      if @cv_power.to_s.length > 4
        invalid_properties.push("invalid value for 'cv_power', the character length must be smaller than or equal to 4.")
      end

      if @cylinder_volum_cc.nil?
        invalid_properties.push("invalid value for 'cylinder_volum_cc', cylinder_volum_cc cannot be nil.")
      end

      if @cylinder_volum_cc.to_s.length > 4
        invalid_properties.push("invalid value for 'cylinder_volum_cc', the character length must be smaller than or equal to 4.")
      end

      if @net_weight.nil?
        invalid_properties.push("invalid value for 'net_weight', net_weight cannot be nil.")
      end

      if @net_weight.to_s.length > 9
        invalid_properties.push("invalid value for 'net_weight', the character length must be smaller than or equal to 9.")
      end

      if @gross_weight.nil?
        invalid_properties.push("invalid value for 'gross_weight', gross_weight cannot be nil.")
      end

      if @gross_weight.to_s.length > 9
        invalid_properties.push("invalid value for 'gross_weight', the character length must be smaller than or equal to 9.")
      end

      if @serial_number.nil?
        invalid_properties.push("invalid value for 'serial_number', serial_number cannot be nil.")
      end

      if @serial_number.to_s.length > 9
        invalid_properties.push("invalid value for 'serial_number', the character length must be smaller than or equal to 9.")
      end

      if @fuel_type.nil?
        invalid_properties.push("invalid value for 'fuel_type', fuel_type cannot be nil.")
      end

      if @engine_number.nil?
        invalid_properties.push("invalid value for 'engine_number', engine_number cannot be nil.")
      end

      if @engine_number.to_s.length > 21
        invalid_properties.push("invalid value for 'engine_number', the character length must be smaller than or equal to 21.")
      end

      if @cmt.nil?
        invalid_properties.push("invalid value for 'cmt', cmt cannot be nil.")
      end

      if @cmt.to_s.length > 9
        invalid_properties.push("invalid value for 'cmt', the character length must be smaller than or equal to 9.")
      end

      if @length_between_axis.nil?
        invalid_properties.push("invalid value for 'length_between_axis', length_between_axis cannot be nil.")
      end

      if @length_between_axis.to_s.length > 4
        invalid_properties.push("invalid value for 'length_between_axis', the character length must be smaller than or equal to 4.")
      end

      if @model_year.nil?
        invalid_properties.push("invalid value for 'model_year', model_year cannot be nil.")
      end

      if @model_year !~ Regexp.new(/[0-9]{4}/)
        invalid_properties.push("invalid value for 'model_year', must conform to the pattern /[0-9]{4}/.")
      end

      if @manufactory_year.nil?
        invalid_properties.push("invalid value for 'manufactory_year', manufactory_year cannot be nil.")
      end

      if @manufactory_year !~ Regexp.new(/[0-9]{4}/)
        invalid_properties.push("invalid value for 'manufactory_year', must conform to the pattern /[0-9]{4}/.")
      end

      if @paint_type.nil?
        invalid_properties.push("invalid value for 'paint_type', paint_type cannot be nil.")
      end

      if @paint_type.to_s.length > 1
        invalid_properties.push("invalid value for 'paint_type', the character length must be smaller than or equal to 1.")
      end

      if @vehicle_renavam_type.nil?
        invalid_properties.push("invalid value for 'vehicle_renavam_type', vehicle_renavam_type cannot be nil.")
      end

      if @vehicle_renavam_type !~ Regexp.new(/[0-9]{1,2}/)
        invalid_properties.push("invalid value for 'vehicle_renavam_type', must conform to the pattern /[0-9]{1,2}/.")
      end

      if @specie_renavam_type.nil?
        invalid_properties.push("invalid value for 'specie_renavam_type', specie_renavam_type cannot be nil.")
      end

      if @specie_renavam_type !~ Regexp.new(/[0-9]{1}/)
        invalid_properties.push("invalid value for 'specie_renavam_type', must conform to the pattern /[0-9]{1}/.")
      end

      if @model_renavam_code.nil?
        invalid_properties.push("invalid value for 'model_renavam_code', model_renavam_code cannot be nil.")
      end

      if @model_renavam_code !~ Regexp.new(/[0-9]{1,6}/)
        invalid_properties.push("invalid value for 'model_renavam_code', must conform to the pattern /[0-9]{1,6}/.")
      end

      if @color_denatran_code.nil?
        invalid_properties.push("invalid value for 'color_denatran_code', color_denatran_code cannot be nil.")
      end

      if @color_denatran_code !~ Regexp.new(/[0-9]{1,2}/)
        invalid_properties.push("invalid value for 'color_denatran_code', must conform to the pattern /[0-9]{1,2}/.")
      end

      if @vin.nil?
        invalid_properties.push("invalid value for 'vin', vin cannot be nil.")
      end

      if @vehicle_manufactory_status.nil?
        invalid_properties.push("invalid value for 'vehicle_manufactory_status', vehicle_manufactory_status cannot be nil.")
      end

      if @max_occupants_quantity.nil?
        invalid_properties.push("invalid value for 'max_occupants_quantity', max_occupants_quantity cannot be nil.")
      end

      if @max_occupants_quantity.to_s.length > 3
        invalid_properties.push("invalid value for 'max_occupants_quantity', the character length must be smaller than or equal to 3.")
      end

      if @restriction_type.nil?
        invalid_properties.push("invalid value for 'restriction_type', restriction_type cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @tp_op.nil?
      return false if @chassis_number.nil?
      return false if @chassis_number.to_s.length > 17
      return false if @chassis_number !~ Regexp.new(/[A-Z0-9]+/)
      return false if @color_code.nil?
      return false if @color_code.to_s.length > 17
      return false if @color_name.nil?
      return false if @color_name.to_s.length > 40
      return false if @cv_power.nil?
      return false if @cv_power.to_s.length > 4
      return false if @cylinder_volum_cc.nil?
      return false if @cylinder_volum_cc.to_s.length > 4
      return false if @net_weight.nil?
      return false if @net_weight.to_s.length > 9
      return false if @gross_weight.nil?
      return false if @gross_weight.to_s.length > 9
      return false if @serial_number.nil?
      return false if @serial_number.to_s.length > 9
      return false if @fuel_type.nil?
      fuel_type_validator = EnumAttributeValidator.new('String', ["01", "02", "03", "16", "17", "18"])
      return false unless fuel_type_validator.valid?(@fuel_type)
      return false if @engine_number.nil?
      return false if @engine_number.to_s.length > 21
      return false if @cmt.nil?
      return false if @cmt.to_s.length > 9
      return false if @length_between_axis.nil?
      return false if @length_between_axis.to_s.length > 4
      return false if @model_year.nil?
      return false if @model_year !~ Regexp.new(/[0-9]{4}/)
      return false if @manufactory_year.nil?
      return false if @manufactory_year !~ Regexp.new(/[0-9]{4}/)
      return false if @paint_type.nil?
      return false if @paint_type.to_s.length > 1
      return false if @vehicle_renavam_type.nil?
      return false if @vehicle_renavam_type !~ Regexp.new(/[0-9]{1,2}/)
      return false if @specie_renavam_type.nil?
      return false if @specie_renavam_type !~ Regexp.new(/[0-9]{1}/)
      return false if @model_renavam_code.nil?
      return false if @model_renavam_code !~ Regexp.new(/[0-9]{1,6}/)
      return false if @color_denatran_code.nil?
      color_denatran_code_validator = EnumAttributeValidator.new('String', ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16"])
      return false unless color_denatran_code_validator.valid?(@color_denatran_code)
      return false if @color_denatran_code !~ Regexp.new(/[0-9]{1,2}/)
      return false if @vin.nil?
      vin_validator = EnumAttributeValidator.new('String', ["R", "N"])
      return false unless vin_validator.valid?(@vin)
      return false if @vehicle_manufactory_status.nil?
      vehicle_manufactory_status_validator = EnumAttributeValidator.new('String', ["1", "2", "3"])
      return false unless vehicle_manufactory_status_validator.valid?(@vehicle_manufactory_status)
      return false if @max_occupants_quantity.nil?
      return false if @max_occupants_quantity.to_s.length > 3
      return false if @restriction_type.nil?
      restriction_type_validator = EnumAttributeValidator.new('String', ["0", "1", "2", "3", "4", "9"])
      return false unless restriction_type_validator.valid?(@restriction_type)
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] chassis_number Value to be assigned
    def chassis_number=(chassis_number)
      if chassis_number.nil?
        fail ArgumentError, "chassis_number cannot be nil"
      end

      if chassis_number.to_s.length > 17
        fail ArgumentError, "invalid value for 'chassis_number', the character length must be smaller than or equal to 17."
      end

      if chassis_number !~ Regexp.new(/[A-Z0-9]+/)
        fail ArgumentError, "invalid value for 'chassis_number', must conform to the pattern /[A-Z0-9]+/."
      end

      @chassis_number = chassis_number
    end

    # Custom attribute writer method with validation
    # @param [Object] color_code Value to be assigned
    def color_code=(color_code)
      if color_code.nil?
        fail ArgumentError, "color_code cannot be nil"
      end

      if color_code.to_s.length > 17
        fail ArgumentError, "invalid value for 'color_code', the character length must be smaller than or equal to 17."
      end

      @color_code = color_code
    end

    # Custom attribute writer method with validation
    # @param [Object] color_name Value to be assigned
    def color_name=(color_name)
      if color_name.nil?
        fail ArgumentError, "color_name cannot be nil"
      end

      if color_name.to_s.length > 40
        fail ArgumentError, "invalid value for 'color_name', the character length must be smaller than or equal to 40."
      end

      @color_name = color_name
    end

    # Custom attribute writer method with validation
    # @param [Object] cv_power Value to be assigned
    def cv_power=(cv_power)
      if cv_power.nil?
        fail ArgumentError, "cv_power cannot be nil"
      end

      if cv_power.to_s.length > 4
        fail ArgumentError, "invalid value for 'cv_power', the character length must be smaller than or equal to 4."
      end

      @cv_power = cv_power
    end

    # Custom attribute writer method with validation
    # @param [Object] cylinder_volum_cc Value to be assigned
    def cylinder_volum_cc=(cylinder_volum_cc)
      if cylinder_volum_cc.nil?
        fail ArgumentError, "cylinder_volum_cc cannot be nil"
      end

      if cylinder_volum_cc.to_s.length > 4
        fail ArgumentError, "invalid value for 'cylinder_volum_cc', the character length must be smaller than or equal to 4."
      end

      @cylinder_volum_cc = cylinder_volum_cc
    end

    # Custom attribute writer method with validation
    # @param [Object] net_weight Value to be assigned
    def net_weight=(net_weight)
      if net_weight.nil?
        fail ArgumentError, "net_weight cannot be nil"
      end

      if net_weight.to_s.length > 9
        fail ArgumentError, "invalid value for 'net_weight', the character length must be smaller than or equal to 9."
      end

      @net_weight = net_weight
    end

    # Custom attribute writer method with validation
    # @param [Object] gross_weight Value to be assigned
    def gross_weight=(gross_weight)
      if gross_weight.nil?
        fail ArgumentError, "gross_weight cannot be nil"
      end

      if gross_weight.to_s.length > 9
        fail ArgumentError, "invalid value for 'gross_weight', the character length must be smaller than or equal to 9."
      end

      @gross_weight = gross_weight
    end

    # Custom attribute writer method with validation
    # @param [Object] serial_number Value to be assigned
    def serial_number=(serial_number)
      if serial_number.nil?
        fail ArgumentError, "serial_number cannot be nil"
      end

      if serial_number.to_s.length > 9
        fail ArgumentError, "invalid value for 'serial_number', the character length must be smaller than or equal to 9."
      end

      @serial_number = serial_number
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fuel_type Object to be assigned
    def fuel_type=(fuel_type)
      validator = EnumAttributeValidator.new('String', ["01", "02", "03", "16", "17", "18"])
      unless validator.valid?(fuel_type)
        fail ArgumentError, "invalid value for 'fuel_type', must be one of #{validator.allowable_values}."
      end
      @fuel_type = fuel_type
    end

    # Custom attribute writer method with validation
    # @param [Object] engine_number Value to be assigned
    def engine_number=(engine_number)
      if engine_number.nil?
        fail ArgumentError, "engine_number cannot be nil"
      end

      if engine_number.to_s.length > 21
        fail ArgumentError, "invalid value for 'engine_number', the character length must be smaller than or equal to 21."
      end

      @engine_number = engine_number
    end

    # Custom attribute writer method with validation
    # @param [Object] cmt Value to be assigned
    def cmt=(cmt)
      if cmt.nil?
        fail ArgumentError, "cmt cannot be nil"
      end

      if cmt.to_s.length > 9
        fail ArgumentError, "invalid value for 'cmt', the character length must be smaller than or equal to 9."
      end

      @cmt = cmt
    end

    # Custom attribute writer method with validation
    # @param [Object] length_between_axis Value to be assigned
    def length_between_axis=(length_between_axis)
      if length_between_axis.nil?
        fail ArgumentError, "length_between_axis cannot be nil"
      end

      if length_between_axis.to_s.length > 4
        fail ArgumentError, "invalid value for 'length_between_axis', the character length must be smaller than or equal to 4."
      end

      @length_between_axis = length_between_axis
    end

    # Custom attribute writer method with validation
    # @param [Object] model_year Value to be assigned
    def model_year=(model_year)
      if model_year.nil?
        fail ArgumentError, "model_year cannot be nil"
      end

      if model_year !~ Regexp.new(/[0-9]{4}/)
        fail ArgumentError, "invalid value for 'model_year', must conform to the pattern /[0-9]{4}/."
      end

      @model_year = model_year
    end

    # Custom attribute writer method with validation
    # @param [Object] manufactory_year Value to be assigned
    def manufactory_year=(manufactory_year)
      if manufactory_year.nil?
        fail ArgumentError, "manufactory_year cannot be nil"
      end

      if manufactory_year !~ Regexp.new(/[0-9]{4}/)
        fail ArgumentError, "invalid value for 'manufactory_year', must conform to the pattern /[0-9]{4}/."
      end

      @manufactory_year = manufactory_year
    end

    # Custom attribute writer method with validation
    # @param [Object] paint_type Value to be assigned
    def paint_type=(paint_type)
      if paint_type.nil?
        fail ArgumentError, "paint_type cannot be nil"
      end

      if paint_type.to_s.length > 1
        fail ArgumentError, "invalid value for 'paint_type', the character length must be smaller than or equal to 1."
      end

      @paint_type = paint_type
    end

    # Custom attribute writer method with validation
    # @param [Object] vehicle_renavam_type Value to be assigned
    def vehicle_renavam_type=(vehicle_renavam_type)
      if vehicle_renavam_type.nil?
        fail ArgumentError, "vehicle_renavam_type cannot be nil"
      end

      if vehicle_renavam_type !~ Regexp.new(/[0-9]{1,2}/)
        fail ArgumentError, "invalid value for 'vehicle_renavam_type', must conform to the pattern /[0-9]{1,2}/."
      end

      @vehicle_renavam_type = vehicle_renavam_type
    end

    # Custom attribute writer method with validation
    # @param [Object] specie_renavam_type Value to be assigned
    def specie_renavam_type=(specie_renavam_type)
      if specie_renavam_type.nil?
        fail ArgumentError, "specie_renavam_type cannot be nil"
      end

      if specie_renavam_type !~ Regexp.new(/[0-9]{1}/)
        fail ArgumentError, "invalid value for 'specie_renavam_type', must conform to the pattern /[0-9]{1}/."
      end

      @specie_renavam_type = specie_renavam_type
    end

    # Custom attribute writer method with validation
    # @param [Object] model_renavam_code Value to be assigned
    def model_renavam_code=(model_renavam_code)
      if model_renavam_code.nil?
        fail ArgumentError, "model_renavam_code cannot be nil"
      end

      if model_renavam_code !~ Regexp.new(/[0-9]{1,6}/)
        fail ArgumentError, "invalid value for 'model_renavam_code', must conform to the pattern /[0-9]{1,6}/."
      end

      @model_renavam_code = model_renavam_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] color_denatran_code Object to be assigned
    def color_denatran_code=(color_denatran_code)
      validator = EnumAttributeValidator.new('String', ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16"])
      unless validator.valid?(color_denatran_code)
        fail ArgumentError, "invalid value for 'color_denatran_code', must be one of #{validator.allowable_values}."
      end
      @color_denatran_code = color_denatran_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] vin Object to be assigned
    def vin=(vin)
      validator = EnumAttributeValidator.new('String', ["R", "N"])
      unless validator.valid?(vin)
        fail ArgumentError, "invalid value for 'vin', must be one of #{validator.allowable_values}."
      end
      @vin = vin
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] vehicle_manufactory_status Object to be assigned
    def vehicle_manufactory_status=(vehicle_manufactory_status)
      validator = EnumAttributeValidator.new('String', ["1", "2", "3"])
      unless validator.valid?(vehicle_manufactory_status)
        fail ArgumentError, "invalid value for 'vehicle_manufactory_status', must be one of #{validator.allowable_values}."
      end
      @vehicle_manufactory_status = vehicle_manufactory_status
    end

    # Custom attribute writer method with validation
    # @param [Object] max_occupants_quantity Value to be assigned
    def max_occupants_quantity=(max_occupants_quantity)
      if max_occupants_quantity.nil?
        fail ArgumentError, "max_occupants_quantity cannot be nil"
      end

      if max_occupants_quantity.to_s.length > 3
        fail ArgumentError, "invalid value for 'max_occupants_quantity', the character length must be smaller than or equal to 3."
      end

      @max_occupants_quantity = max_occupants_quantity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] restriction_type Object to be assigned
    def restriction_type=(restriction_type)
      validator = EnumAttributeValidator.new('String', ["0", "1", "2", "3", "4", "9"])
      unless validator.valid?(restriction_type)
        fail ArgumentError, "invalid value for 'restriction_type', must be one of #{validator.allowable_values}."
      end
      @restriction_type = restriction_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tp_op == o.tp_op &&
          chassis_number == o.chassis_number &&
          color_code == o.color_code &&
          color_name == o.color_name &&
          cv_power == o.cv_power &&
          cylinder_volum_cc == o.cylinder_volum_cc &&
          net_weight == o.net_weight &&
          gross_weight == o.gross_weight &&
          serial_number == o.serial_number &&
          fuel_type == o.fuel_type &&
          engine_number == o.engine_number &&
          cmt == o.cmt &&
          length_between_axis == o.length_between_axis &&
          model_year == o.model_year &&
          manufactory_year == o.manufactory_year &&
          paint_type == o.paint_type &&
          vehicle_renavam_type == o.vehicle_renavam_type &&
          specie_renavam_type == o.specie_renavam_type &&
          model_renavam_code == o.model_renavam_code &&
          color_denatran_code == o.color_denatran_code &&
          vin == o.vin &&
          vehicle_manufactory_status == o.vehicle_manufactory_status &&
          max_occupants_quantity == o.max_occupants_quantity &&
          restriction_type == o.restriction_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [tp_op, chassis_number, color_code, color_name, cv_power, cylinder_volum_cc, net_weight, gross_weight, serial_number, fuel_type, engine_number, cmt, length_between_axis, model_year, manufactory_year, paint_type, vehicle_renavam_type, specie_renavam_type, model_renavam_code, color_denatran_code, vin, vehicle_manufactory_status, max_occupants_quantity, restriction_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
