=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class NRefRefFarmerNF
    # State code of fiscal Document creator, farmer
    attr_accessor :state_cd

    # year and month of fiscal document creation
    attr_accessor :yymm

    # fiscal document creator farmer federalTaxId
    attr_accessor :federal_tax_id

    # fiscal document creator, farmer stateTaxId
    attr_accessor :state_tax_id

    # Document Fiscal model - '04' # FARMER DOCUMENT - '01' # DETACHED DOCUMENT - AVULSO 
    attr_accessor :model

    # fiscal document serie
    attr_accessor :serie

    # fiscal document number
    attr_accessor :number

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'state_cd' => :'stateCd',
        :'yymm' => :'yymm',
        :'federal_tax_id' => :'federalTaxId',
        :'state_tax_id' => :'stateTaxId',
        :'model' => :'model',
        :'serie' => :'serie',
        :'number' => :'number'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'state_cd' => :'StateEnum',
        :'yymm' => :'String',
        :'federal_tax_id' => :'String',
        :'state_tax_id' => :'String',
        :'model' => :'String',
        :'serie' => :'String',
        :'number' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'stateCd')
        self.state_cd = attributes[:'stateCd']
      end

      if attributes.has_key?(:'yymm')
        self.yymm = attributes[:'yymm']
      end

      if attributes.has_key?(:'federalTaxId')
        self.federal_tax_id = attributes[:'federalTaxId']
      end

      if attributes.has_key?(:'stateTaxId')
        self.state_tax_id = attributes[:'stateTaxId']
      end

      if attributes.has_key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.has_key?(:'serie')
        self.serie = attributes[:'serie']
      end

      if attributes.has_key?(:'number')
        self.number = attributes[:'number']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @state_cd.nil?
        invalid_properties.push("invalid value for 'state_cd', state_cd cannot be nil.")
      end

      if @yymm.nil?
        invalid_properties.push("invalid value for 'yymm', yymm cannot be nil.")
      end

      if @yymm !~ Regexp.new(/[0-9]{2}[0]{1}[1-9]{1}|[0-9]{2}[1]{1}[0-2]{1}/)
        invalid_properties.push("invalid value for 'yymm', must conform to the pattern /[0-9]{2}[0]{1}[1-9]{1}|[0-9]{2}[1]{1}[0-2]{1}/.")
      end

      if @federal_tax_id.nil?
        invalid_properties.push("invalid value for 'federal_tax_id', federal_tax_id cannot be nil.")
      end

      if @federal_tax_id !~ Regexp.new(/[0-9]{14}/)
        invalid_properties.push("invalid value for 'federal_tax_id', must conform to the pattern /[0-9]{14}/.")
      end

      if @state_tax_id.nil?
        invalid_properties.push("invalid value for 'state_tax_id', state_tax_id cannot be nil.")
      end

      if @state_tax_id !~ Regexp.new(/[0-9]{14}/)
        invalid_properties.push("invalid value for 'state_tax_id', must conform to the pattern /[0-9]{14}/.")
      end

      if @model.nil?
        invalid_properties.push("invalid value for 'model', model cannot be nil.")
      end

      if @serie.nil?
        invalid_properties.push("invalid value for 'serie', serie cannot be nil.")
      end

      if @serie !~ Regexp.new(/0|[1-9]{1}[0-9]{0,2}/)
        invalid_properties.push("invalid value for 'serie', must conform to the pattern /0|[1-9]{1}[0-9]{0,2}/.")
      end

      if @number.nil?
        invalid_properties.push("invalid value for 'number', number cannot be nil.")
      end

      if @number !~ Regexp.new(/[1-9]{1}[0-9]{0,8}/)
        invalid_properties.push("invalid value for 'number', must conform to the pattern /[1-9]{1}[0-9]{0,8}/.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @state_cd.nil?
      return false if @yymm.nil?
      return false if @yymm !~ Regexp.new(/[0-9]{2}[0]{1}[1-9]{1}|[0-9]{2}[1]{1}[0-2]{1}/)
      return false if @federal_tax_id.nil?
      return false if @federal_tax_id !~ Regexp.new(/[0-9]{14}/)
      return false if @state_tax_id.nil?
      return false if @state_tax_id !~ Regexp.new(/[0-9]{14}/)
      return false if @model.nil?
      model_validator = EnumAttributeValidator.new('String', ["04", "01"])
      return false unless model_validator.valid?(@model)
      return false if @serie.nil?
      return false if @serie !~ Regexp.new(/0|[1-9]{1}[0-9]{0,2}/)
      return false if @number.nil?
      return false if @number !~ Regexp.new(/[1-9]{1}[0-9]{0,8}/)
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] yymm Value to be assigned
    def yymm=(yymm)
      if yymm.nil?
        fail ArgumentError, "yymm cannot be nil"
      end

      if yymm !~ Regexp.new(/[0-9]{2}[0]{1}[1-9]{1}|[0-9]{2}[1]{1}[0-2]{1}/)
        fail ArgumentError, "invalid value for 'yymm', must conform to the pattern /[0-9]{2}[0]{1}[1-9]{1}|[0-9]{2}[1]{1}[0-2]{1}/."
      end

      @yymm = yymm
    end

    # Custom attribute writer method with validation
    # @param [Object] federal_tax_id Value to be assigned
    def federal_tax_id=(federal_tax_id)
      if federal_tax_id.nil?
        fail ArgumentError, "federal_tax_id cannot be nil"
      end

      if federal_tax_id !~ Regexp.new(/[0-9]{14}/)
        fail ArgumentError, "invalid value for 'federal_tax_id', must conform to the pattern /[0-9]{14}/."
      end

      @federal_tax_id = federal_tax_id
    end

    # Custom attribute writer method with validation
    # @param [Object] state_tax_id Value to be assigned
    def state_tax_id=(state_tax_id)
      if state_tax_id.nil?
        fail ArgumentError, "state_tax_id cannot be nil"
      end

      if state_tax_id !~ Regexp.new(/[0-9]{14}/)
        fail ArgumentError, "invalid value for 'state_tax_id', must conform to the pattern /[0-9]{14}/."
      end

      @state_tax_id = state_tax_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] model Object to be assigned
    def model=(model)
      validator = EnumAttributeValidator.new('String', ["04", "01"])
      unless validator.valid?(model)
        fail ArgumentError, "invalid value for 'model', must be one of #{validator.allowable_values}."
      end
      @model = model
    end

    # Custom attribute writer method with validation
    # @param [Object] serie Value to be assigned
    def serie=(serie)
      if serie.nil?
        fail ArgumentError, "serie cannot be nil"
      end

      if serie !~ Regexp.new(/0|[1-9]{1}[0-9]{0,2}/)
        fail ArgumentError, "invalid value for 'serie', must conform to the pattern /0|[1-9]{1}[0-9]{0,2}/."
      end

      @serie = serie
    end

    # Custom attribute writer method with validation
    # @param [Object] number Value to be assigned
    def number=(number)
      if number.nil?
        fail ArgumentError, "number cannot be nil"
      end

      if number !~ Regexp.new(/[1-9]{1}[0-9]{0,8}/)
        fail ArgumentError, "invalid value for 'number', must conform to the pattern /[1-9]{1}[0-9]{0,8}/."
      end

      @number = number
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          state_cd == o.state_cd &&
          yymm == o.yymm &&
          federal_tax_id == o.federal_tax_id &&
          state_tax_id == o.state_tax_id &&
          model == o.model &&
          serie == o.serie &&
          number == o.number
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [state_cd, yymm, federal_tax_id, state_tax_id, model, serie, number].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
