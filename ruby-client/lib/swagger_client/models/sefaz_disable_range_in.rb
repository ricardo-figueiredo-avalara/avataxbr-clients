=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class SefazDisableRangeIn
    # This string contains a previously configured company code which may also have codes needed for tax return purposes. These codes are maintained through the customer portal. Main company address identity
    attr_accessor :company_location

    # This string indicates the type of transaction for which tax should be calculated. - '55' # Nota Fiscal Eletrônica (NF-e) - '65' # Nota Fiscal Eletrônica ao-Consumidor Final (NFC-e) 
    attr_accessor :transaction_model

    # Invoice number, sequential unique by invoice serial (Número da nota fiscal) 
    attr_accessor :invoice_serial

    attr_accessor :year

    attr_accessor :message

    # First number of disable range.
    attr_accessor :invoice_number_init

    # Last number of disable range.
    attr_accessor :invoice_number_end

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'company_location' => :'companyLocation',
        :'transaction_model' => :'transactionModel',
        :'invoice_serial' => :'invoiceSerial',
        :'year' => :'year',
        :'message' => :'message',
        :'invoice_number_init' => :'invoiceNumberInit',
        :'invoice_number_end' => :'invoiceNumberEnd'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'company_location' => :'String',
        :'transaction_model' => :'String',
        :'invoice_serial' => :'Integer',
        :'year' => :'Float',
        :'message' => :'String',
        :'invoice_number_init' => :'Float',
        :'invoice_number_end' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'companyLocation')
        self.company_location = attributes[:'companyLocation']
      end

      if attributes.has_key?(:'transactionModel')
        self.transaction_model = attributes[:'transactionModel']
      end

      if attributes.has_key?(:'invoiceSerial')
        self.invoice_serial = attributes[:'invoiceSerial']
      end

      if attributes.has_key?(:'year')
        self.year = attributes[:'year']
      end

      if attributes.has_key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.has_key?(:'invoiceNumberInit')
        self.invoice_number_init = attributes[:'invoiceNumberInit']
      end

      if attributes.has_key?(:'invoiceNumberEnd')
        self.invoice_number_end = attributes[:'invoiceNumberEnd']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@message.nil? && @message.to_s.length > 255
        invalid_properties.push("invalid value for 'message', the character length must be smaller than or equal to 255.")
      end

      if !@message.nil? && @message.to_s.length < 15
        invalid_properties.push("invalid value for 'message', the character length must be great than or equal to 15.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      transaction_model_validator = EnumAttributeValidator.new('String', ["55", "65"])
      return false unless transaction_model_validator.valid?(@transaction_model)
      return false if !@message.nil? && @message.to_s.length > 255
      return false if !@message.nil? && @message.to_s.length < 15
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_model Object to be assigned
    def transaction_model=(transaction_model)
      validator = EnumAttributeValidator.new('String', ["55", "65"])
      unless validator.valid?(transaction_model)
        fail ArgumentError, "invalid value for 'transaction_model', must be one of #{validator.allowable_values}."
      end
      @transaction_model = transaction_model
    end

    # Custom attribute writer method with validation
    # @param [Object] message Value to be assigned
    def message=(message)

      if !message.nil? && message.to_s.length > 255
        fail ArgumentError, "invalid value for 'message', the character length must be smaller than or equal to 255."
      end

      if !message.nil? && message.to_s.length < 15
        fail ArgumentError, "invalid value for 'message', the character length must be great than or equal to 15."
      end

      @message = message
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          company_location == o.company_location &&
          transaction_model == o.transaction_model &&
          invoice_serial == o.invoice_serial &&
          year == o.year &&
          message == o.message &&
          invoice_number_init == o.invoice_number_init &&
          invoice_number_end == o.invoice_number_end
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [company_location, transaction_model, invoice_serial, year, message, invoice_number_init, invoice_number_end].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
