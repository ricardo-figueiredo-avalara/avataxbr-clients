=begin
#BR16 - API

#This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class CustomIcmsConfByState
    # Identify the IcmsConfState in namespace
    attr_accessor :code

    attr_accessor :state

    # name for this configuration
    attr_accessor :name

    # date when this configuration values starts
    attr_accessor :start_date

    # date when this configuration values expire
    attr_accessor :expiration_date

    # set this configuration to Inactive
    attr_accessor :inactive

    # inform that the item linked to this configuration is subject to ICMS ST on this state
    attr_accessor :subject_to_st

    # On sales process inform the CST hat the item linked to this configuration is subject to for the own ICMS - '00' # TAXABLE - '20' # TAXABLE WITH BASE DISCOUNT - '40' # EXEMPT - '41' # NOT TAXABLE - '50' # SUSPENDED 
    attr_accessor :icms_cst

    # how this ICMS will be calculed for itens linked to this configuration
    attr_accessor :calc_mode

    # discount if the item is subject to monophase PIS/COFINS for transactions inside state
    attr_accessor :discount_rate_for_mono_phase

    # ICMS rate
    attr_accessor :rate

    # ICMS rate
    attr_accessor :icms_base_discount

    # SRP or MMSRP amount base for this icms configuration
    attr_accessor :msrp

    # ICMS mva rate to define calc base
    attr_accessor :mva_rate

    # unit used to SRP amount value
    attr_accessor :msrp_unit

    # Code for the ICM legal reason, this message will be placed on invoice.
    attr_accessor :icms_legal_reason

    # Fundo de Combate Ã  pobreza / Fund Against Poverty
    attr_accessor :fcp_rate

    attr_accessor :icms_st_conf

    # the map key is state code
    attr_accessor :icms_inter_state_conf

    # Company ID
    attr_accessor :company_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'code' => :'code',
        :'state' => :'state',
        :'name' => :'name',
        :'start_date' => :'startDate',
        :'expiration_date' => :'expirationDate',
        :'inactive' => :'inactive',
        :'subject_to_st' => :'subjectToST',
        :'icms_cst' => :'icmsCST',
        :'calc_mode' => :'calcMode',
        :'discount_rate_for_mono_phase' => :'discountRateForMonoPhase',
        :'rate' => :'rate',
        :'icms_base_discount' => :'icmsBaseDiscount',
        :'msrp' => :'msrp',
        :'mva_rate' => :'mvaRate',
        :'msrp_unit' => :'msrpUnit',
        :'icms_legal_reason' => :'icmsLegalReason',
        :'fcp_rate' => :'fcpRate',
        :'icms_st_conf' => :'icmsSTConf',
        :'icms_inter_state_conf' => :'icmsInterStateConf',
        :'company_id' => :'companyId'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'code' => :'String',
        :'state' => :'StateEnum',
        :'name' => :'String',
        :'start_date' => :'DateTime',
        :'expiration_date' => :'DateTime',
        :'inactive' => :'BOOLEAN',
        :'subject_to_st' => :'BOOLEAN',
        :'icms_cst' => :'String',
        :'calc_mode' => :'String',
        :'discount_rate_for_mono_phase' => :'Float',
        :'rate' => :'Float',
        :'icms_base_discount' => :'Float',
        :'msrp' => :'Float',
        :'mva_rate' => :'Float',
        :'msrp_unit' => :'String',
        :'icms_legal_reason' => :'String',
        :'fcp_rate' => :'Float',
        :'icms_st_conf' => :'IcmsConfByStateIcmsSTConf',
        :'icms_inter_state_conf' => :'Array<IcmsConfInterState>',
        :'company_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'startDate')
        self.start_date = attributes[:'startDate']
      end

      if attributes.has_key?(:'expirationDate')
        self.expiration_date = attributes[:'expirationDate']
      end

      if attributes.has_key?(:'inactive')
        self.inactive = attributes[:'inactive']
      end

      if attributes.has_key?(:'subjectToST')
        self.subject_to_st = attributes[:'subjectToST']
      end

      if attributes.has_key?(:'icmsCST')
        self.icms_cst = attributes[:'icmsCST']
      end

      if attributes.has_key?(:'calcMode')
        self.calc_mode = attributes[:'calcMode']
      end

      if attributes.has_key?(:'discountRateForMonoPhase')
        self.discount_rate_for_mono_phase = attributes[:'discountRateForMonoPhase']
      end

      if attributes.has_key?(:'rate')
        self.rate = attributes[:'rate']
      end

      if attributes.has_key?(:'icmsBaseDiscount')
        self.icms_base_discount = attributes[:'icmsBaseDiscount']
      end

      if attributes.has_key?(:'msrp')
        self.msrp = attributes[:'msrp']
      end

      if attributes.has_key?(:'mvaRate')
        self.mva_rate = attributes[:'mvaRate']
      end

      if attributes.has_key?(:'msrpUnit')
        self.msrp_unit = attributes[:'msrpUnit']
      end

      if attributes.has_key?(:'icmsLegalReason')
        self.icms_legal_reason = attributes[:'icmsLegalReason']
      end

      if attributes.has_key?(:'fcpRate')
        self.fcp_rate = attributes[:'fcpRate']
      end

      if attributes.has_key?(:'icmsSTConf')
        self.icms_st_conf = attributes[:'icmsSTConf']
      end

      if attributes.has_key?(:'icmsInterStateConf')
        if (value = attributes[:'icmsInterStateConf']).is_a?(Array)
          self.icms_inter_state_conf = value
        end
      end

      if attributes.has_key?(:'companyId')
        self.company_id = attributes[:'companyId']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @code.nil?
        invalid_properties.push("invalid value for 'code', code cannot be nil.")
      end

      if @code.to_s.length > 60
        invalid_properties.push("invalid value for 'code', the character length must be smaller than or equal to 60.")
      end

      if @state.nil?
        invalid_properties.push("invalid value for 'state', state cannot be nil.")
      end

      if !@name.nil? && @name.to_s.length > 60
        invalid_properties.push("invalid value for 'name', the character length must be smaller than or equal to 60.")
      end

      if !@msrp_unit.nil? && @msrp_unit.to_s.length > 6
        invalid_properties.push("invalid value for 'msrp_unit', the character length must be smaller than or equal to 6.")
      end

      if !@icms_legal_reason.nil? && @icms_legal_reason.to_s.length > 60
        invalid_properties.push("invalid value for 'icms_legal_reason', the character length must be smaller than or equal to 60.")
      end

      if @company_id.nil?
        invalid_properties.push("invalid value for 'company_id', company_id cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @code.nil?
      return false if @code.to_s.length > 60
      return false if @state.nil?
      return false if !@name.nil? && @name.to_s.length > 60
      icms_cst_validator = EnumAttributeValidator.new('String', ["00", "20", "40", "41", "50"])
      return false unless icms_cst_validator.valid?(@icms_cst)
      calc_mode_validator = EnumAttributeValidator.new('String', ["BYMVARATE", "SRP", "MMSRP", "OPERATIONAMOUNT"])
      return false unless calc_mode_validator.valid?(@calc_mode)
      return false if !@msrp_unit.nil? && @msrp_unit.to_s.length > 6
      return false if !@icms_legal_reason.nil? && @icms_legal_reason.to_s.length > 60
      return false if @company_id.nil?
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] code Value to be assigned
    def code=(code)
      if code.nil?
        fail ArgumentError, "code cannot be nil"
      end

      if code.to_s.length > 60
        fail ArgumentError, "invalid value for 'code', the character length must be smaller than or equal to 60."
      end

      @code = code
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)

      if !name.nil? && name.to_s.length > 60
        fail ArgumentError, "invalid value for 'name', the character length must be smaller than or equal to 60."
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] icms_cst Object to be assigned
    def icms_cst=(icms_cst)
      validator = EnumAttributeValidator.new('String', ["00", "20", "40", "41", "50"])
      unless validator.valid?(icms_cst)
        fail ArgumentError, "invalid value for 'icms_cst', must be one of #{validator.allowable_values}."
      end
      @icms_cst = icms_cst
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] calc_mode Object to be assigned
    def calc_mode=(calc_mode)
      validator = EnumAttributeValidator.new('String', ["BYMVARATE", "SRP", "MMSRP", "OPERATIONAMOUNT"])
      unless validator.valid?(calc_mode)
        fail ArgumentError, "invalid value for 'calc_mode', must be one of #{validator.allowable_values}."
      end
      @calc_mode = calc_mode
    end

    # Custom attribute writer method with validation
    # @param [Object] msrp_unit Value to be assigned
    def msrp_unit=(msrp_unit)

      if !msrp_unit.nil? && msrp_unit.to_s.length > 6
        fail ArgumentError, "invalid value for 'msrp_unit', the character length must be smaller than or equal to 6."
      end

      @msrp_unit = msrp_unit
    end

    # Custom attribute writer method with validation
    # @param [Object] icms_legal_reason Value to be assigned
    def icms_legal_reason=(icms_legal_reason)

      if !icms_legal_reason.nil? && icms_legal_reason.to_s.length > 60
        fail ArgumentError, "invalid value for 'icms_legal_reason', the character length must be smaller than or equal to 60."
      end

      @icms_legal_reason = icms_legal_reason
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          code == o.code &&
          state == o.state &&
          name == o.name &&
          start_date == o.start_date &&
          expiration_date == o.expiration_date &&
          inactive == o.inactive &&
          subject_to_st == o.subject_to_st &&
          icms_cst == o.icms_cst &&
          calc_mode == o.calc_mode &&
          discount_rate_for_mono_phase == o.discount_rate_for_mono_phase &&
          rate == o.rate &&
          icms_base_discount == o.icms_base_discount &&
          msrp == o.msrp &&
          mva_rate == o.mva_rate &&
          msrp_unit == o.msrp_unit &&
          icms_legal_reason == o.icms_legal_reason &&
          fcp_rate == o.fcp_rate &&
          icms_st_conf == o.icms_st_conf &&
          icms_inter_state_conf == o.icms_inter_state_conf &&
          company_id == o.company_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [code, state, name, start_date, expiration_date, inactive, subject_to_st, icms_cst, calc_mode, discount_rate_for_mono_phase, rate, icms_base_discount, msrp, mva_rate, msrp_unit, icms_legal_reason, fcp_rate, icms_st_conf, icms_inter_state_conf, company_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
