=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class InstallmentComplete
    # DOCNUMBER, ID OF THIS DOCUMENT FOR THIS transaction
    attr_accessor :document_number

    # installment Due Date
    attr_accessor :date

    # Intallment amount, fraction of  ∑(lineAmount - lineTaxedDiscount)
    attr_accessor :gross_value

    # net amount due for this installment, grossValue - ∑ (withhold amounts)
    attr_accessor :net_value

    # Inform if this payment is subject to Pis, Cofins or CSLL
    attr_accessor :withholding_mode

    # calculated PIS-RF tax for this payment
    attr_accessor :withholding_pis

    # calculated COFINS-RF tax for this payment
    attr_accessor :withholding_cofins

    # calculated CSLL-RF tax for this payment
    attr_accessor :withholding_csll


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'document_number' => :'documentNumber',
        :'date' => :'date',
        :'gross_value' => :'grossValue',
        :'net_value' => :'netValue',
        :'withholding_mode' => :'withholdingMode',
        :'withholding_pis' => :'withholdingPIS',
        :'withholding_cofins' => :'withholdingCOFINS',
        :'withholding_csll' => :'withholdingCSLL'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'document_number' => :'String',
        :'date' => :'DateTime',
        :'gross_value' => :'Float',
        :'net_value' => :'Float',
        :'withholding_mode' => :'WithholdingMode',
        :'withholding_pis' => :'Float',
        :'withholding_cofins' => :'Float',
        :'withholding_csll' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'documentNumber')
        self.document_number = attributes[:'documentNumber']
      end

      if attributes.has_key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.has_key?(:'grossValue')
        self.gross_value = attributes[:'grossValue']
      end

      if attributes.has_key?(:'netValue')
        self.net_value = attributes[:'netValue']
      end

      if attributes.has_key?(:'withholdingMode')
        self.withholding_mode = attributes[:'withholdingMode']
      end

      if attributes.has_key?(:'withholdingPIS')
        self.withholding_pis = attributes[:'withholdingPIS']
      end

      if attributes.has_key?(:'withholdingCOFINS')
        self.withholding_cofins = attributes[:'withholdingCOFINS']
      end

      if attributes.has_key?(:'withholdingCSLL')
        self.withholding_csll = attributes[:'withholdingCSLL']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @document_number.nil?
        invalid_properties.push("invalid value for 'document_number', document_number cannot be nil.")
      end

      if @date.nil?
        invalid_properties.push("invalid value for 'date', date cannot be nil.")
      end

      if @gross_value.nil?
        invalid_properties.push("invalid value for 'gross_value', gross_value cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @document_number.nil?
      return false if @date.nil?
      return false if @gross_value.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          document_number == o.document_number &&
          date == o.date &&
          gross_value == o.gross_value &&
          net_value == o.net_value &&
          withholding_mode == o.withholding_mode &&
          withholding_pis == o.withholding_pis &&
          withholding_cofins == o.withholding_cofins &&
          withholding_csll == o.withholding_csll
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [document_number, date, gross_value, net_value, withholding_mode, withholding_pis, withholding_cofins, withholding_csll].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
