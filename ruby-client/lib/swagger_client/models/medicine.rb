=begin
#BR16 - API

#This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class Medicine
    attr_accessor :lote_number

    # This is a decimal type with 11 digits including 3 decimal positions.
    attr_accessor :lote_quantity

    attr_accessor :manufactoty_date

    attr_accessor :expiration_date

    # This is a decimal type with 15 digits including 2 decimal positions.  Max value to end user.
    attr_accessor :max_value_to_end_user


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'lote_number' => :'loteNumber',
        :'lote_quantity' => :'loteQuantity',
        :'manufactoty_date' => :'manufactotyDate',
        :'expiration_date' => :'expirationDate',
        :'max_value_to_end_user' => :'maxValueToEndUser'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'lote_number' => :'String',
        :'lote_quantity' => :'Float',
        :'manufactoty_date' => :'Date',
        :'expiration_date' => :'Date',
        :'max_value_to_end_user' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'loteNumber')
        self.lote_number = attributes[:'loteNumber']
      end

      if attributes.has_key?(:'loteQuantity')
        self.lote_quantity = attributes[:'loteQuantity']
      end

      if attributes.has_key?(:'manufactotyDate')
        self.manufactoty_date = attributes[:'manufactotyDate']
      end

      if attributes.has_key?(:'expirationDate')
        self.expiration_date = attributes[:'expirationDate']
      end

      if attributes.has_key?(:'maxValueToEndUser')
        self.max_value_to_end_user = attributes[:'maxValueToEndUser']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @lote_number.nil?
        invalid_properties.push("invalid value for 'lote_number', lote_number cannot be nil.")
      end

      if @lote_number.to_s.length > 20
        invalid_properties.push("invalid value for 'lote_number', the character length must be smaller than or equal to 20.")
      end

      if @lote_quantity.nil?
        invalid_properties.push("invalid value for 'lote_quantity', lote_quantity cannot be nil.")
      end

      if @manufactoty_date.nil?
        invalid_properties.push("invalid value for 'manufactoty_date', manufactoty_date cannot be nil.")
      end

      if @expiration_date.nil?
        invalid_properties.push("invalid value for 'expiration_date', expiration_date cannot be nil.")
      end

      if @max_value_to_end_user.nil?
        invalid_properties.push("invalid value for 'max_value_to_end_user', max_value_to_end_user cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @lote_number.nil?
      return false if @lote_number.to_s.length > 20
      return false if @lote_quantity.nil?
      return false if @manufactoty_date.nil?
      return false if @expiration_date.nil?
      return false if @max_value_to_end_user.nil?
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] lote_number Value to be assigned
    def lote_number=(lote_number)
      if lote_number.nil?
        fail ArgumentError, "lote_number cannot be nil"
      end

      if lote_number.to_s.length > 20
        fail ArgumentError, "invalid value for 'lote_number', the character length must be smaller than or equal to 20."
      end

      @lote_number = lote_number
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          lote_number == o.lote_number &&
          lote_quantity == o.lote_quantity &&
          manufactoty_date == o.manufactoty_date &&
          expiration_date == o.expiration_date &&
          max_value_to_end_user == o.max_value_to_end_user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [lote_number, lote_quantity, manufactoty_date, expiration_date, max_value_to_end_user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
