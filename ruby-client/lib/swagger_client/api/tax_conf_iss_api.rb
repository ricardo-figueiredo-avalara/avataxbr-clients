=begin
#BR16 - API

#This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class TaxConfISSApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # create a new ISS Configuration
    # 
    # @param iss_conf_by_city The pet JSON you want to post
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse201]
    def create_iss_conf_by_city(iss_conf_by_city, opts = {})
      data, _status_code, _headers = create_iss_conf_by_city_with_http_info(iss_conf_by_city, opts)
      return data
    end

    # create a new ISS Configuration
    # 
    # @param iss_conf_by_city The pet JSON you want to post
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def create_iss_conf_by_city_with_http_info(iss_conf_by_city, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfISSApi.create_iss_conf_by_city ..."
      end
      # verify the required parameter 'iss_conf_by_city' is set
      fail ArgumentError, "Missing the required parameter 'iss_conf_by_city' when calling TaxConfISSApi.create_iss_conf_by_city" if iss_conf_by_city.nil?
      # resource path
      local_var_path = "/taxconf/iss".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(iss_conf_by_city)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfISSApi#create_iss_conf_by_city\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # disable a ISS by City Code.
    # 
    # @param city_code City Code
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_iss_conf(city_code, opts = {})
      delete_iss_conf_with_http_info(city_code, opts)
      return nil
    end

    # disable a ISS by City Code.
    # 
    # @param city_code City Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_iss_conf_with_http_info(city_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfISSApi.delete_iss_conf ..."
      end
      # verify the required parameter 'city_code' is set
      fail ArgumentError, "Missing the required parameter 'city_code' when calling TaxConfISSApi.delete_iss_conf" if city_code.nil?
      # resource path
      local_var_path = "/taxconf/iss/{cityCode}".sub('{format}','json').sub('{' + 'cityCode' + '}', city_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfISSApi#delete_iss_conf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get ISS information by City Code.
    # This operation return configurations of ISS that match with parameters queries 
    # @param city_code City Code
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code Identificator of this configuration, it is unique for account or standard namedspace 
    # @option opts [Date] :date When informed return valid version configuration for this date 
    # @option opts [BOOLEAN] :inactive return the inctives versions too 
    # @return [Array<IssConfByCity>]
    def get_iss_conf_by_city(city_code, opts = {})
      data, _status_code, _headers = get_iss_conf_by_city_with_http_info(city_code, opts)
      return data
    end

    # get ISS information by City Code.
    # This operation return configurations of ISS that match with parameters queries 
    # @param city_code City Code
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code Identificator of this configuration, it is unique for account or standard namedspace 
    # @option opts [Date] :date When informed return valid version configuration for this date 
    # @option opts [BOOLEAN] :inactive return the inctives versions too 
    # @return [Array<(Array<IssConfByCity>, Fixnum, Hash)>] Array<IssConfByCity> data, response status code and response headers
    def get_iss_conf_by_city_with_http_info(city_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfISSApi.get_iss_conf_by_city ..."
      end
      # verify the required parameter 'city_code' is set
      fail ArgumentError, "Missing the required parameter 'city_code' when calling TaxConfISSApi.get_iss_conf_by_city" if city_code.nil?
      if !opts[:'code'].nil? && opts[:'code'].to_s.length > 60
        fail ArgumentError, 'invalid value for "opts[:"code"]" when calling TaxConfISSApi.get_iss_conf_by_city, the character length must be smaller than or equal to 60.'
      end

      # resource path
      local_var_path = "/taxconf/iss/{cityCode}".sub('{format}','json').sub('{' + 'cityCode' + '}', city_code.to_s)

      # query parameters
      query_params = {}
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'inactive'] = opts[:'inactive'] if !opts[:'inactive'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<IssConfByCity>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfISSApi#get_iss_conf_by_city\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrive list of ISS
    # This operation return ISS configurations that match with parameters queries 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :suffixcode Identify this ISS 
    # @option opts [Date] :date When informed return valid version configuration for this date 
    # @option opts [BOOLEAN] :inactive return the inactive versions too 
    # @return [Array<IssConfByCity>]
    def get_iss_list(opts = {})
      data, _status_code, _headers = get_iss_list_with_http_info(opts)
      return data
    end

    # retrive list of ISS
    # This operation return ISS configurations that match with parameters queries 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :suffixcode Identify this ISS 
    # @option opts [Date] :date When informed return valid version configuration for this date 
    # @option opts [BOOLEAN] :inactive return the inactive versions too 
    # @return [Array<(Array<IssConfByCity>, Fixnum, Hash)>] Array<IssConfByCity> data, response status code and response headers
    def get_iss_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfISSApi.get_iss_list ..."
      end
      if !opts[:'suffixcode'].nil? && opts[:'suffixcode'].to_s.length > 60
        fail ArgumentError, 'invalid value for "opts[:"suffixcode"]" when calling TaxConfISSApi.get_iss_list, the character length must be smaller than or equal to 60.'
      end

      # resource path
      local_var_path = "/taxconf/iss".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'suffixcode'] = opts[:'suffixcode'] if !opts[:'suffixcode'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'inactive'] = opts[:'inactive'] if !opts[:'inactive'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<IssConfByCity>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfISSApi#get_iss_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update a ISS by City Code.
    # 
    # @param city_code City Code
    # @param iss_conf_by_city The pet JSON you want to post
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_iss_conf_by_city(city_code, iss_conf_by_city, opts = {})
      update_iss_conf_by_city_with_http_info(city_code, iss_conf_by_city, opts)
      return nil
    end

    # update a ISS by City Code.
    # 
    # @param city_code City Code
    # @param iss_conf_by_city The pet JSON you want to post
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_iss_conf_by_city_with_http_info(city_code, iss_conf_by_city, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfISSApi.update_iss_conf_by_city ..."
      end
      # verify the required parameter 'city_code' is set
      fail ArgumentError, "Missing the required parameter 'city_code' when calling TaxConfISSApi.update_iss_conf_by_city" if city_code.nil?
      # verify the required parameter 'iss_conf_by_city' is set
      fail ArgumentError, "Missing the required parameter 'iss_conf_by_city' when calling TaxConfISSApi.update_iss_conf_by_city" if iss_conf_by_city.nil?
      # resource path
      local_var_path = "/taxconf/iss/{cityCode}".sub('{format}','json').sub('{' + 'cityCode' + '}', city_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(iss_conf_by_city)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfISSApi#update_iss_conf_by_city\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
