=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class CompanyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Retrieve Companies by account
    # Retrieve list companies of one account
    # @param [Hash] opts the optional parameters
    # @return [Array<Company>]
    def companies_get(opts = {})
      data, _status_code, _headers = companies_get_with_http_info(opts)
      return data
    end

    # Retrieve Companies by account
    # Retrieve list companies of one account
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Company>, Fixnum, Hash)>] Array<Company> data, response status code and response headers
    def companies_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyApi.companies_get ..."
      end
      # resource path
      local_var_path = "/companies".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Company>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyApi#companies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create company and your data configuration
    # This method operation create a company for a account 
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [Company]
    def create_company(body, opts = {})
      data, _status_code, _headers = create_company_with_http_info(body, opts)
      return data
    end

    # Create company and your data configuration
    # This method operation create a company for a account 
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [Array<(Company, Fixnum, Hash)>] Company data, response status code and response headers
    def create_company_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyApi.create_company ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling CompanyApi.create_company" if body.nil?
      # resource path
      local_var_path = "/companies".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Company')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyApi#create_company\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param account_id Account ID
    # @param company_id Company ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_account_company(account_id, company_id, opts = {})
      delete_account_company_with_http_info(account_id, company_id, opts)
      return nil
    end

    # 
    # 
    # @param account_id Account ID
    # @param company_id Company ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_account_company_with_http_info(account_id, company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyApi.delete_account_company ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling CompanyApi.delete_account_company" if account_id.nil?
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyApi.delete_account_company" if company_id.nil?
      # resource path
      local_var_path = "/accounts/{accountId}/companies/{companyId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyApi#delete_account_company\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param company_id Company ID
    # @param company_id2 Company ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_company(company_id, company_id2, opts = {})
      delete_company_with_http_info(company_id, company_id2, opts)
      return nil
    end

    # 
    # 
    # @param company_id Company ID
    # @param company_id2 Company ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_company_with_http_info(company_id, company_id2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyApi.delete_company ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyApi.delete_company" if company_id.nil?
      # verify the required parameter 'company_id2' is set
      fail ArgumentError, "Missing the required parameter 'company_id2' when calling CompanyApi.delete_company" if company_id2.nil?
      # resource path
      local_var_path = "/companies/{companyId}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'companyId' + '}', company_id2.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyApi#delete_company\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get company information and your data configuration
    # This method operation get a company for a account 
    # @param company_id Company ID
    # @param [Hash] opts the optional parameters
    # @return [Company]
    def info_company(company_id, opts = {})
      data, _status_code, _headers = info_company_with_http_info(company_id, opts)
      return data
    end

    # Get company information and your data configuration
    # This method operation get a company for a account 
    # @param company_id Company ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Company, Fixnum, Hash)>] Company data, response status code and response headers
    def info_company_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyApi.info_company ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyApi.info_company" if company_id.nil?
      # resource path
      local_var_path = "/companies/{companyId}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Company')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyApi#info_company\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update company information and your data configuration
    # This method operation create a company for a account 
    # @param company_id Company ID
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_company(company_id, body, opts = {})
      update_company_with_http_info(company_id, body, opts)
      return nil
    end

    # Update company information and your data configuration
    # This method operation create a company for a account 
    # @param company_id Company ID
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_company_with_http_info(company_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyApi.update_company ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyApi.update_company" if company_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling CompanyApi.update_company" if body.nil?
      # resource path
      local_var_path = "/companies/{companyId}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyApi#update_company\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
