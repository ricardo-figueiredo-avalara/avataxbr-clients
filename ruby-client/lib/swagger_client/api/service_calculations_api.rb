=begin
#BR16 - API

#This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class ServiceCalculationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Retrieve transactions
    # Retrieve a single transaction
    # @param authorization Bearer {auth}
    # @param account_id Account ID
    # @param company_code Company Code
    # @param transaction_type Transaction Type (sale, purchase, receipts or payment)
    # @param document_code Document Code
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def calculations_account_account_id_company_company_code_transaction_type_document_code_get(authorization, account_id, company_code, transaction_type, document_code, opts = {})
      calculations_account_account_id_company_company_code_transaction_type_document_code_get_with_http_info(authorization, account_id, company_code, transaction_type, document_code, opts)
      return nil
    end

    # Retrieve transactions
    # Retrieve a single transaction
    # @param authorization Bearer {auth}
    # @param account_id Account ID
    # @param company_code Company Code
    # @param transaction_type Transaction Type (sale, purchase, receipts or payment)
    # @param document_code Document Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def calculations_account_account_id_company_company_code_transaction_type_document_code_get_with_http_info(authorization, account_id, company_code, transaction_type, document_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceCalculationsApi.calculations_account_account_id_company_company_code_transaction_type_document_code_get ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ServiceCalculationsApi.calculations_account_account_id_company_company_code_transaction_type_document_code_get" if authorization.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ServiceCalculationsApi.calculations_account_account_id_company_company_code_transaction_type_document_code_get" if account_id.nil?
      # verify the required parameter 'company_code' is set
      fail ArgumentError, "Missing the required parameter 'company_code' when calling ServiceCalculationsApi.calculations_account_account_id_company_company_code_transaction_type_document_code_get" if company_code.nil?
      # verify the required parameter 'transaction_type' is set
      fail ArgumentError, "Missing the required parameter 'transaction_type' when calling ServiceCalculationsApi.calculations_account_account_id_company_company_code_transaction_type_document_code_get" if transaction_type.nil?
      # verify enum value
      unless ['sale', 'purchase', 'receipt', 'payment'].include?(transaction_type)
        fail ArgumentError, "invalid value for 'transaction_type', must be one of sale, purchase, receipt, payment"
      end
      # verify the required parameter 'document_code' is set
      fail ArgumentError, "Missing the required parameter 'document_code' when calling ServiceCalculationsApi.calculations_account_account_id_company_company_code_transaction_type_document_code_get" if document_code.nil?
      # resource path
      local_var_path = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'companyCode' + '}', company_code.to_s).sub('{' + 'transactionType' + '}', transaction_type.to_s).sub('{' + 'documentCode' + '}', document_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceCalculationsApi#calculations_account_account_id_company_company_code_transaction_type_document_code_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Promote a calculation to transaction
    # Promote a calculation to transaction
    # @param authorization Bearer {auth}
    # @param account_id Account ID
    # @param company_code Company Code
    # @param transaction_type Transaction Type (sale, purchase, receipts or payment)
    # @param document_code Document Code
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post(authorization, account_id, company_code, transaction_type, document_code, opts = {})
      calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post_with_http_info(authorization, account_id, company_code, transaction_type, document_code, opts)
      return nil
    end

    # Promote a calculation to transaction
    # Promote a calculation to transaction
    # @param authorization Bearer {auth}
    # @param account_id Account ID
    # @param company_code Company Code
    # @param transaction_type Transaction Type (sale, purchase, receipts or payment)
    # @param document_code Document Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post_with_http_info(authorization, account_id, company_code, transaction_type, document_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceCalculationsApi.calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ServiceCalculationsApi.calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post" if authorization.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ServiceCalculationsApi.calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post" if account_id.nil?
      # verify the required parameter 'company_code' is set
      fail ArgumentError, "Missing the required parameter 'company_code' when calling ServiceCalculationsApi.calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post" if company_code.nil?
      # verify the required parameter 'transaction_type' is set
      fail ArgumentError, "Missing the required parameter 'transaction_type' when calling ServiceCalculationsApi.calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post" if transaction_type.nil?
      # verify enum value
      unless ['sale', 'purchase', 'receipt', 'payment'].include?(transaction_type)
        fail ArgumentError, "invalid value for 'transaction_type', must be one of sale, purchase, receipt, payment"
      end
      # verify the required parameter 'document_code' is set
      fail ArgumentError, "Missing the required parameter 'document_code' when calling ServiceCalculationsApi.calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post" if document_code.nil?
      # resource path
      local_var_path = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/transactions".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'companyCode' + '}', company_code.to_s).sub('{' + 'transactionType' + '}', transaction_type.to_s).sub('{' + 'documentCode' + '}', document_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceCalculationsApi#calculations_account_account_id_company_company_code_transaction_type_document_code_transactions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve transactions
    # Retrieve a list of transactions
    # @param authorization Bearer {auth}
    # @param account_id Account ID
    # @param company_code Company Code
    # @param transaction_type Transaction Type (sale, purchase, receipts or payment)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def calculations_account_account_id_company_company_code_transaction_type_get(authorization, account_id, company_code, transaction_type, opts = {})
      calculations_account_account_id_company_company_code_transaction_type_get_with_http_info(authorization, account_id, company_code, transaction_type, opts)
      return nil
    end

    # Retrieve transactions
    # Retrieve a list of transactions
    # @param authorization Bearer {auth}
    # @param account_id Account ID
    # @param company_code Company Code
    # @param transaction_type Transaction Type (sale, purchase, receipts or payment)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def calculations_account_account_id_company_company_code_transaction_type_get_with_http_info(authorization, account_id, company_code, transaction_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceCalculationsApi.calculations_account_account_id_company_company_code_transaction_type_get ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ServiceCalculationsApi.calculations_account_account_id_company_company_code_transaction_type_get" if authorization.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ServiceCalculationsApi.calculations_account_account_id_company_company_code_transaction_type_get" if account_id.nil?
      # verify the required parameter 'company_code' is set
      fail ArgumentError, "Missing the required parameter 'company_code' when calling ServiceCalculationsApi.calculations_account_account_id_company_company_code_transaction_type_get" if company_code.nil?
      # verify the required parameter 'transaction_type' is set
      fail ArgumentError, "Missing the required parameter 'transaction_type' when calling ServiceCalculationsApi.calculations_account_account_id_company_company_code_transaction_type_get" if transaction_type.nil?
      # verify enum value
      unless ['sale', 'purchase', 'receipt', 'payment'].include?(transaction_type)
        fail ArgumentError, "invalid value for 'transaction_type', must be one of sale, purchase, receipt, payment"
      end
      # resource path
      local_var_path = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'companyCode' + '}', company_code.to_s).sub('{' + 'transactionType' + '}', transaction_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceCalculationsApi#calculations_account_account_id_company_company_code_transaction_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Calculation Method
    # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [PaymentTransactionOut]
    def calculationsservice_payment_post(authorization, body, opts = {})
      data, _status_code, _headers = calculationsservice_payment_post_with_http_info(authorization, body, opts)
      return data
    end

    # Calculation Method
    # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentTransactionOut, Fixnum, Hash)>] PaymentTransactionOut data, response status code and response headers
    def calculationsservice_payment_post_with_http_info(authorization, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceCalculationsApi.calculationsservice_payment_post ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ServiceCalculationsApi.calculationsservice_payment_post" if authorization.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ServiceCalculationsApi.calculationsservice_payment_post" if body.nil?
      # resource path
      local_var_path = "/calculations?service-payment".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentTransactionOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceCalculationsApi#calculationsservice_payment_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Calculation Method
    # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [PurchaseTransactionOut]
    def calculationsservice_purchase_post(authorization, body, opts = {})
      data, _status_code, _headers = calculationsservice_purchase_post_with_http_info(authorization, body, opts)
      return data
    end

    # Calculation Method
    # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [Array<(PurchaseTransactionOut, Fixnum, Hash)>] PurchaseTransactionOut data, response status code and response headers
    def calculationsservice_purchase_post_with_http_info(authorization, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceCalculationsApi.calculationsservice_purchase_post ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ServiceCalculationsApi.calculationsservice_purchase_post" if authorization.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ServiceCalculationsApi.calculationsservice_purchase_post" if body.nil?
      # resource path
      local_var_path = "/calculations?service-purchase".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PurchaseTransactionOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceCalculationsApi#calculationsservice_purchase_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Calculation Method
    # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [ReceiptTransactionOut]
    def calculationsservice_receipt_post(authorization, body, opts = {})
      data, _status_code, _headers = calculationsservice_receipt_post_with_http_info(authorization, body, opts)
      return data
    end

    # Calculation Method
    # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReceiptTransactionOut, Fixnum, Hash)>] ReceiptTransactionOut data, response status code and response headers
    def calculationsservice_receipt_post_with_http_info(authorization, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceCalculationsApi.calculationsservice_receipt_post ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ServiceCalculationsApi.calculationsservice_receipt_post" if authorization.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ServiceCalculationsApi.calculationsservice_receipt_post" if body.nil?
      # resource path
      local_var_path = "/calculations?service-receipt".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReceiptTransactionOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceCalculationsApi#calculationsservice_receipt_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Calculation Method
    # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each 'calculations-<type>'.
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [SalesTransactionOut]
    def calculationsservice_sales_post(authorization, body, opts = {})
      data, _status_code, _headers = calculationsservice_sales_post_with_http_info(authorization, body, opts)
      return data
    end

    # Calculation Method
    # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [Array<(SalesTransactionOut, Fixnum, Hash)>] SalesTransactionOut data, response status code and response headers
    def calculationsservice_sales_post_with_http_info(authorization, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceCalculationsApi.calculationsservice_sales_post ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ServiceCalculationsApi.calculationsservice_sales_post" if authorization.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ServiceCalculationsApi.calculationsservice_sales_post" if body.nil?
      # resource path
      local_var_path = "/calculations?service-sales".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SalesTransactionOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceCalculationsApi#calculationsservice_sales_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
