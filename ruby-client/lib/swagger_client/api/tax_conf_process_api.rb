=begin
#BR16 - API

#This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class TaxConfProcessApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # create a new Process Type configuration
    # 
    # @param taxconfprocess The pet JSON you want to post
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse201]
    def create_process(taxconfprocess, opts = {})
      data, _status_code, _headers = create_process_with_http_info(taxconfprocess, opts)
      return data
    end

    # create a new Process Type configuration
    # 
    # @param taxconfprocess The pet JSON you want to post
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def create_process_with_http_info(taxconfprocess, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfProcessApi.create_process ..."
      end
      # verify the required parameter 'taxconfprocess' is set
      fail ArgumentError, "Missing the required parameter 'taxconfprocess' when calling TaxConfProcessApi.create_process" if taxconfprocess.nil?
      # resource path
      local_var_path = "/taxconf/process".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(taxconfprocess)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfProcessApi#create_process\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # disable a Process.
    # 
    # @param code Process Code
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_process(code, opts = {})
      delete_process_with_http_info(code, opts)
      return nil
    end

    # disable a Process.
    # 
    # @param code Process Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_process_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfProcessApi.delete_process ..."
      end
      # verify the required parameter 'code' is set
      fail ArgumentError, "Missing the required parameter 'code' when calling TaxConfProcessApi.delete_process" if code.nil?
      # resource path
      local_var_path = "/taxconf/process/{code}".sub('{format}','json').sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfProcessApi#delete_process\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get Process information.
    # This operation return Process Type configuration 
    # @param code Process Code
    # @param [Hash] opts the optional parameters
    # @return [ProcessScenario]
    def get_process(code, opts = {})
      data, _status_code, _headers = get_process_with_http_info(code, opts)
      return data
    end

    # get Process information.
    # This operation return Process Type configuration 
    # @param code Process Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcessScenario, Fixnum, Hash)>] ProcessScenario data, response status code and response headers
    def get_process_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfProcessApi.get_process ..."
      end
      # verify the required parameter 'code' is set
      fail ArgumentError, "Missing the required parameter 'code' when calling TaxConfProcessApi.get_process" if code.nil?
      # resource path
      local_var_path = "/taxconf/process/{code}".sub('{format}','json').sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessScenario')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfProcessApi#get_process\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrive list of Process.
    # This operation return Process Type configurations that match with parameters queries 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_id filter the configuration by accountID, if not informed, only the standard configuration will be returned 
    # @option opts [Date] :date When informed return valid version configuration for this date 
    # @option opts [BOOLEAN] :inactive return the inactive versions too 
    # @return [Array<ProcessScenario>]
    def get_process_list(opts = {})
      data, _status_code, _headers = get_process_list_with_http_info(opts)
      return data
    end

    # retrive list of Process.
    # This operation return Process Type configurations that match with parameters queries 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account_id filter the configuration by accountID, if not informed, only the standard configuration will be returned 
    # @option opts [Date] :date When informed return valid version configuration for this date 
    # @option opts [BOOLEAN] :inactive return the inactive versions too 
    # @return [Array<(Array<ProcessScenario>, Fixnum, Hash)>] Array<ProcessScenario> data, response status code and response headers
    def get_process_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfProcessApi.get_process_list ..."
      end
      if !opts[:'account_id'].nil? && opts[:'account_id'].to_s.length > 60
        fail ArgumentError, 'invalid value for "opts[:"account_id"]" when calling TaxConfProcessApi.get_process_list, the character length must be smaller than or equal to 60.'
      end

      # resource path
      local_var_path = "/taxconf/process".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'accountId'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'inactive'] = opts[:'inactive'] if !opts[:'inactive'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ProcessScenario>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfProcessApi#get_process_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update a Process Type configuration
    # 
    # @param code Process Code
    # @param taxconfprocess The pet JSON you want to post
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_process(code, taxconfprocess, opts = {})
      update_process_with_http_info(code, taxconfprocess, opts)
      return nil
    end

    # update a Process Type configuration
    # 
    # @param code Process Code
    # @param taxconfprocess The pet JSON you want to post
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_process_with_http_info(code, taxconfprocess, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfProcessApi.update_process ..."
      end
      # verify the required parameter 'code' is set
      fail ArgumentError, "Missing the required parameter 'code' when calling TaxConfProcessApi.update_process" if code.nil?
      # verify the required parameter 'taxconfprocess' is set
      fail ArgumentError, "Missing the required parameter 'taxconfprocess' when calling TaxConfProcessApi.update_process" if taxconfprocess.nil?
      # resource path
      local_var_path = "/taxconf/process/{code}".sub('{format}','json').sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(taxconfprocess)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfProcessApi#update_process\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
