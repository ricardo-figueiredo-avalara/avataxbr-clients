=begin
#BR16 - API

#This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class LegalReasonApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Legal Reason.
    # 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse201]
    def create_reason_(body, opts = {})
      data, _status_code, _headers = create_reason__with_http_info(body, opts)
      return data
    end

    # Create Legal Reason.
    # 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def create_reason__with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LegalReasonApi.create_reason_ ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling LegalReasonApi.create_reason_" if body.nil?
      # resource path
      local_var_path = "/taxconf/legal-reason".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LegalReasonApi#create_reason_\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Legal Reason entry.
    # 
    # @param uuid 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_reason_(uuid, opts = {})
      delete_reason__with_http_info(uuid, opts)
      return nil
    end

    # Delete a Legal Reason entry.
    # 
    # @param uuid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_reason__with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LegalReasonApi.delete_reason_ ..."
      end
      # verify the required parameter 'uuid' is set
      fail ArgumentError, "Missing the required parameter 'uuid' when calling LegalReasonApi.delete_reason_" if uuid.nil?
      # resource path
      local_var_path = "/taxconf/legal-reason/{uuid}".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LegalReasonApi#delete_reason_\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get single Legal Reason.
    # 
    # @param uuid 
    # @param [Hash] opts the optional parameters
    # @return [ProcessScenario]
    def get_reason_(uuid, opts = {})
      data, _status_code, _headers = get_reason__with_http_info(uuid, opts)
      return data
    end

    # Get single Legal Reason.
    # 
    # @param uuid 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProcessScenario, Fixnum, Hash)>] ProcessScenario data, response status code and response headers
    def get_reason__with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LegalReasonApi.get_reason_ ..."
      end
      # verify the required parameter 'uuid' is set
      fail ArgumentError, "Missing the required parameter 'uuid' when calling LegalReasonApi.get_reason_" if uuid.nil?
      # resource path
      local_var_path = "/taxconf/legal-reason/{uuid}".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProcessScenario')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LegalReasonApi#get_reason_\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Legal Reasons.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_id Filters by company domain entries. Provide \&quot;global\&quot; to retrive only \&quot;global\&quot; entries. CompanyId searches also match global entries. 
    # @return [Array<LegalReason>]
    def list_reason(opts = {})
      data, _status_code, _headers = list_reason_with_http_info(opts)
      return data
    end

    # List Legal Reasons.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company_id Filters by company domain entries. Provide \&quot;global\&quot; to retrive only \&quot;global\&quot; entries. CompanyId searches also match global entries. 
    # @return [Array<(Array<LegalReason>, Fixnum, Hash)>] Array<LegalReason> data, response status code and response headers
    def list_reason_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LegalReasonApi.list_reason ..."
      end
      if !opts[:'company_id'].nil? && opts[:'company_id'].to_s.length > 60
        fail ArgumentError, 'invalid value for "opts[:"company_id"]" when calling LegalReasonApi.list_reason, the character length must be smaller than or equal to 60.'
      end

      # resource path
      local_var_path = "/taxconf/legal-reason".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'companyId'] = opts[:'company_id'] if !opts[:'company_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<LegalReason>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LegalReasonApi#list_reason\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Legal Reason.
    # 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_reason_(body, opts = {})
      update_reason__with_http_info(body, opts)
      return nil
    end

    # Update Legal Reason.
    # 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_reason__with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LegalReasonApi.update_reason_ ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling LegalReasonApi.update_reason_" if body.nil?
      # resource path
      local_var_path = "/taxconf/legal-reason".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LegalReasonApi#update_reason_\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
