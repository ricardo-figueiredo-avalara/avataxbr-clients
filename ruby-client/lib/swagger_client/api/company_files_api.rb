=begin
#BR16 - API

#This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class CompanyFilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Deletes a company file store.  
    # @param company_id Company ID
    # @param company_id2 Company ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def companies_company_id_nfse_certificate_delete(company_id, company_id2, opts = {})
      companies_company_id_nfse_certificate_delete_with_http_info(company_id, company_id2, opts)
      return nil
    end

    # 
    # Deletes a company file store.  
    # @param company_id Company ID
    # @param company_id2 Company ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def companies_company_id_nfse_certificate_delete_with_http_info(company_id, company_id2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyFilesApi.companies_company_id_nfse_certificate_delete ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyFilesApi.companies_company_id_nfse_certificate_delete" if company_id.nil?
      # verify the required parameter 'company_id2' is set
      fail ArgumentError, "Missing the required parameter 'company_id2' when calling CompanyFilesApi.companies_company_id_nfse_certificate_delete" if company_id2.nil?
      # resource path
      local_var_path = "/companies/{companyId}/nfse-certificate".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'companyId' + '}', company_id2.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyFilesApi#companies_company_id_nfse_certificate_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets an existing NFSe certificate file for this company. 
    # @param company_id Company ID
    # @param company_id2 Company ID
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :peek Use this parameter to check the existence of the file without downloading it.
    # @return [nil]
    def companies_company_id_nfse_certificate_get(company_id, company_id2, opts = {})
      companies_company_id_nfse_certificate_get_with_http_info(company_id, company_id2, opts)
      return nil
    end

    # 
    # Gets an existing NFSe certificate file for this company. 
    # @param company_id Company ID
    # @param company_id2 Company ID
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :peek Use this parameter to check the existence of the file without downloading it.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def companies_company_id_nfse_certificate_get_with_http_info(company_id, company_id2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyFilesApi.companies_company_id_nfse_certificate_get ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyFilesApi.companies_company_id_nfse_certificate_get" if company_id.nil?
      # verify the required parameter 'company_id2' is set
      fail ArgumentError, "Missing the required parameter 'company_id2' when calling CompanyFilesApi.companies_company_id_nfse_certificate_get" if company_id2.nil?
      # resource path
      local_var_path = "/companies/{companyId}/nfse-certificate".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'companyId' + '}', company_id2.to_s)

      # query parameters
      query_params = {}
      query_params[:'peek'] = opts[:'peek'] if !opts[:'peek'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyFilesApi#companies_company_id_nfse_certificate_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # If it still not exists, uploads a new NFSe Certificate file for this company. Send the file as a base64 string. 
    # @param company_id Company ID
    # @param body Content
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def companies_company_id_nfse_certificate_post(company_id, body, opts = {})
      data, _status_code, _headers = companies_company_id_nfse_certificate_post_with_http_info(company_id, body, opts)
      return data
    end

    # 
    # If it still not exists, uploads a new NFSe Certificate file for this company. Send the file as a base64 string. 
    # @param company_id Company ID
    # @param body Content
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def companies_company_id_nfse_certificate_post_with_http_info(company_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyFilesApi.companies_company_id_nfse_certificate_post ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyFilesApi.companies_company_id_nfse_certificate_post" if company_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling CompanyFilesApi.companies_company_id_nfse_certificate_post" if body.nil?
      # resource path
      local_var_path = "/companies/{companyId}/nfse-certificate".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyFilesApi#companies_company_id_nfse_certificate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Updates an existing NFSe certificate file for this company. Send the file as a base64 string. 
    # @param company_id Company ID
    # @param company_id2 Company ID
    # @param body Content
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def companies_company_id_nfse_certificate_put(company_id, company_id2, body, opts = {})
      data, _status_code, _headers = companies_company_id_nfse_certificate_put_with_http_info(company_id, company_id2, body, opts)
      return data
    end

    # 
    # Updates an existing NFSe certificate file for this company. Send the file as a base64 string. 
    # @param company_id Company ID
    # @param company_id2 Company ID
    # @param body Content
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def companies_company_id_nfse_certificate_put_with_http_info(company_id, company_id2, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyFilesApi.companies_company_id_nfse_certificate_put ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyFilesApi.companies_company_id_nfse_certificate_put" if company_id.nil?
      # verify the required parameter 'company_id2' is set
      fail ArgumentError, "Missing the required parameter 'company_id2' when calling CompanyFilesApi.companies_company_id_nfse_certificate_put" if company_id2.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling CompanyFilesApi.companies_company_id_nfse_certificate_put" if body.nil?
      # resource path
      local_var_path = "/companies/{companyId}/nfse-certificate".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'companyId' + '}', company_id2.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyFilesApi#companies_company_id_nfse_certificate_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
