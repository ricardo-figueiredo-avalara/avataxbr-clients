=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class ServiceTransactionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Retrieve transactions
    # Retrieve a single transaction
    # @param authorization Bearer {auth}
    # @param account_id Account ID
    # @param company_code Company Code
    # @param transaction_type Transaction Type (sale, purchase, receipts or payment)
    # @param document_code Document Code
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def transactions_account_account_id_company_company_code_transaction_type_document_code_get(authorization, account_id, company_code, transaction_type, document_code, opts = {})
      transactions_account_account_id_company_company_code_transaction_type_document_code_get_with_http_info(authorization, account_id, company_code, transaction_type, document_code, opts)
      return nil
    end

    # Retrieve transactions
    # Retrieve a single transaction
    # @param authorization Bearer {auth}
    # @param account_id Account ID
    # @param company_code Company Code
    # @param transaction_type Transaction Type (sale, purchase, receipts or payment)
    # @param document_code Document Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def transactions_account_account_id_company_company_code_transaction_type_document_code_get_with_http_info(authorization, account_id, company_code, transaction_type, document_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceTransactionsApi.transactions_account_account_id_company_company_code_transaction_type_document_code_get ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ServiceTransactionsApi.transactions_account_account_id_company_company_code_transaction_type_document_code_get" if authorization.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ServiceTransactionsApi.transactions_account_account_id_company_company_code_transaction_type_document_code_get" if account_id.nil?
      # verify the required parameter 'company_code' is set
      fail ArgumentError, "Missing the required parameter 'company_code' when calling ServiceTransactionsApi.transactions_account_account_id_company_company_code_transaction_type_document_code_get" if company_code.nil?
      # verify the required parameter 'transaction_type' is set
      fail ArgumentError, "Missing the required parameter 'transaction_type' when calling ServiceTransactionsApi.transactions_account_account_id_company_company_code_transaction_type_document_code_get" if transaction_type.nil?
      # verify enum value
      unless ['sale', 'purchase', 'receipt', 'payment'].include?(transaction_type)
        fail ArgumentError, "invalid value for 'transaction_type', must be one of sale, purchase, receipt, payment"
      end
      # verify the required parameter 'document_code' is set
      fail ArgumentError, "Missing the required parameter 'document_code' when calling ServiceTransactionsApi.transactions_account_account_id_company_company_code_transaction_type_document_code_get" if document_code.nil?
      # resource path
      local_var_path = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'companyCode' + '}', company_code.to_s).sub('{' + 'transactionType' + '}', transaction_type.to_s).sub('{' + 'documentCode' + '}', document_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceTransactionsApi#transactions_account_account_id_company_company_code_transaction_type_document_code_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Transaction State Transition
    # Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -> Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -> Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -> Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -> Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -> Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -> Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -> FiledByAvalara 
    # @param authorization Bearer {auth}
    # @param account_id Account ID
    # @param company_code Company Code
    # @param transaction_type Transaction Type (sale, purchase, receipts or payment)
    # @param document_code Document Code
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def transactions_account_account_id_company_company_code_transaction_type_document_code_state_transitions_post(authorization, account_id, company_code, transaction_type, document_code, body, opts = {})
      transactions_account_account_id_company_company_code_transaction_type_document_code_state_transitions_post_with_http_info(authorization, account_id, company_code, transaction_type, document_code, body, opts)
      return nil
    end

    # Transaction State Transition
    # Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
    # @param authorization Bearer {auth}
    # @param account_id Account ID
    # @param company_code Company Code
    # @param transaction_type Transaction Type (sale, purchase, receipts or payment)
    # @param document_code Document Code
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def transactions_account_account_id_company_company_code_transaction_type_document_code_state_transitions_post_with_http_info(authorization, account_id, company_code, transaction_type, document_code, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceTransactionsApi.transactions_account_account_id_company_company_code_transaction_type_document_code_state_transitions_post ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ServiceTransactionsApi.transactions_account_account_id_company_company_code_transaction_type_document_code_state_transitions_post" if authorization.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ServiceTransactionsApi.transactions_account_account_id_company_company_code_transaction_type_document_code_state_transitions_post" if account_id.nil?
      # verify the required parameter 'company_code' is set
      fail ArgumentError, "Missing the required parameter 'company_code' when calling ServiceTransactionsApi.transactions_account_account_id_company_company_code_transaction_type_document_code_state_transitions_post" if company_code.nil?
      # verify the required parameter 'transaction_type' is set
      fail ArgumentError, "Missing the required parameter 'transaction_type' when calling ServiceTransactionsApi.transactions_account_account_id_company_company_code_transaction_type_document_code_state_transitions_post" if transaction_type.nil?
      # verify enum value
      unless ['sale', 'purchase', 'receipt', 'payment'].include?(transaction_type)
        fail ArgumentError, "invalid value for 'transaction_type', must be one of sale, purchase, receipt, payment"
      end
      # verify the required parameter 'document_code' is set
      fail ArgumentError, "Missing the required parameter 'document_code' when calling ServiceTransactionsApi.transactions_account_account_id_company_company_code_transaction_type_document_code_state_transitions_post" if document_code.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ServiceTransactionsApi.transactions_account_account_id_company_company_code_transaction_type_document_code_state_transitions_post" if body.nil?
      # resource path
      local_var_path = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/stateTransitions".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'companyCode' + '}', company_code.to_s).sub('{' + 'transactionType' + '}', transaction_type.to_s).sub('{' + 'documentCode' + '}', document_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceTransactionsApi#transactions_account_account_id_company_company_code_transaction_type_document_code_state_transitions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve transactions
    # Retrieve a list of transactions
    # @param authorization Bearer {auth}
    # @param account_id Account ID
    # @param company_code Company Code
    # @param transaction_type Transaction Type (sale, purchase, receipts or payment)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def transactions_account_account_id_company_company_code_transaction_type_get(authorization, account_id, company_code, transaction_type, opts = {})
      transactions_account_account_id_company_company_code_transaction_type_get_with_http_info(authorization, account_id, company_code, transaction_type, opts)
      return nil
    end

    # Retrieve transactions
    # Retrieve a list of transactions
    # @param authorization Bearer {auth}
    # @param account_id Account ID
    # @param company_code Company Code
    # @param transaction_type Transaction Type (sale, purchase, receipts or payment)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def transactions_account_account_id_company_company_code_transaction_type_get_with_http_info(authorization, account_id, company_code, transaction_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceTransactionsApi.transactions_account_account_id_company_company_code_transaction_type_get ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ServiceTransactionsApi.transactions_account_account_id_company_company_code_transaction_type_get" if authorization.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ServiceTransactionsApi.transactions_account_account_id_company_company_code_transaction_type_get" if account_id.nil?
      # verify the required parameter 'company_code' is set
      fail ArgumentError, "Missing the required parameter 'company_code' when calling ServiceTransactionsApi.transactions_account_account_id_company_company_code_transaction_type_get" if company_code.nil?
      # verify the required parameter 'transaction_type' is set
      fail ArgumentError, "Missing the required parameter 'transaction_type' when calling ServiceTransactionsApi.transactions_account_account_id_company_company_code_transaction_type_get" if transaction_type.nil?
      # verify enum value
      unless ['sale', 'purchase', 'receipt', 'payment'].include?(transaction_type)
        fail ArgumentError, "invalid value for 'transaction_type', must be one of sale, purchase, receipt, payment"
      end
      # resource path
      local_var_path = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'companyCode' + '}', company_code.to_s).sub('{' + 'transactionType' + '}', transaction_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceTransactionsApi#transactions_account_account_id_company_company_code_transaction_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Calculation Method
    # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [PaymentTransactionOut]
    def transactionsservice_payment_post(authorization, body, opts = {})
      data, _status_code, _headers = transactionsservice_payment_post_with_http_info(authorization, body, opts)
      return data
    end

    # Calculation Method
    # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentTransactionOut, Fixnum, Hash)>] PaymentTransactionOut data, response status code and response headers
    def transactionsservice_payment_post_with_http_info(authorization, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceTransactionsApi.transactionsservice_payment_post ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ServiceTransactionsApi.transactionsservice_payment_post" if authorization.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ServiceTransactionsApi.transactionsservice_payment_post" if body.nil?
      # resource path
      local_var_path = "/transactions?service-payment".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentTransactionOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceTransactionsApi#transactionsservice_payment_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Calculation Method
    # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [PurchaseTransactionOut]
    def transactionsservice_purchase_post(authorization, body, opts = {})
      data, _status_code, _headers = transactionsservice_purchase_post_with_http_info(authorization, body, opts)
      return data
    end

    # Calculation Method
    # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [Array<(PurchaseTransactionOut, Fixnum, Hash)>] PurchaseTransactionOut data, response status code and response headers
    def transactionsservice_purchase_post_with_http_info(authorization, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceTransactionsApi.transactionsservice_purchase_post ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ServiceTransactionsApi.transactionsservice_purchase_post" if authorization.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ServiceTransactionsApi.transactionsservice_purchase_post" if body.nil?
      # resource path
      local_var_path = "/transactions?service-purchase".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PurchaseTransactionOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceTransactionsApi#transactionsservice_purchase_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Calculation Method
    # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [ReceiptTransactionOut]
    def transactionsservice_receipt_post(authorization, body, opts = {})
      data, _status_code, _headers = transactionsservice_receipt_post_with_http_info(authorization, body, opts)
      return data
    end

    # Calculation Method
    # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReceiptTransactionOut, Fixnum, Hash)>] ReceiptTransactionOut data, response status code and response headers
    def transactionsservice_receipt_post_with_http_info(authorization, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceTransactionsApi.transactionsservice_receipt_post ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ServiceTransactionsApi.transactionsservice_receipt_post" if authorization.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ServiceTransactionsApi.transactionsservice_receipt_post" if body.nil?
      # resource path
      local_var_path = "/transactions?service-receipt".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReceiptTransactionOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceTransactionsApi#transactionsservice_receipt_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Calculation Method
    # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [SalesTransactionOut]
    def transactionsservice_sales_post(authorization, body, opts = {})
      data, _status_code, _headers = transactionsservice_sales_post_with_http_info(authorization, body, opts)
      return data
    end

    # Calculation Method
    # Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [Array<(SalesTransactionOut, Fixnum, Hash)>] SalesTransactionOut data, response status code and response headers
    def transactionsservice_sales_post_with_http_info(authorization, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ServiceTransactionsApi.transactionsservice_sales_post ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling ServiceTransactionsApi.transactionsservice_sales_post" if authorization.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ServiceTransactionsApi.transactionsservice_sales_post" if body.nil?
      # resource path
      local_var_path = "/transactions?service-sales".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SalesTransactionOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceTransactionsApi#transactionsservice_sales_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
