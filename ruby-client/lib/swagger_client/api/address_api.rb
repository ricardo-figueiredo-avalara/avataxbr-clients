=begin
#BR16 - API

#This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class AddressApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # This operation return address
    # @param zipcode ZIP Code
    # @param [Hash] opts the optional parameters
    # @return [Array<Address>]
    def get_zip_code(zipcode, opts = {})
      data, _status_code, _headers = get_zip_code_with_http_info(zipcode, opts)
      return data
    end

    # 
    # This operation return address
    # @param zipcode ZIP Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Address>, Fixnum, Hash)>] Array<Address> data, response status code and response headers
    def get_zip_code_with_http_info(zipcode, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AddressApi.get_zip_code ..."
      end
      # verify the required parameter 'zipcode' is set
      fail ArgumentError, "Missing the required parameter 'zipcode' when calling AddressApi.get_zip_code" if zipcode.nil?
      if zipcode.to_s.length > 60
        fail ArgumentError, 'invalid value for "zipcode" when calling AddressApi.get_zip_code, the character length must be smaller than or equal to 60.'
      end

      if zipcode !~ Regexp.new(/^(\\d{8}|\\d{5}\\-\\d{3})$/)
        fail ArgumentError, "invalid value for 'zipcode' when calling AddressApi.get_zip_code, must conform to the pattern /^(\\d{8}|\\d{5}\\-\\d{3})$/."
      end

      # resource path
      local_var_path = "/addresses/{zipcode}".sub('{format}','json').sub('{' + 'zipcode' + '}', zipcode.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Address>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#get_zip_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
