=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class TaxConfCFOPApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # create a new CFOP configuration
    # 
    # @param body The pet JSON you want to post
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse201]
    def create_cfop(body, opts = {})
      data, _status_code, _headers = create_cfop_with_http_info(body, opts)
      return data
    end

    # create a new CFOP configuration
    # 
    # @param body The pet JSON you want to post
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def create_cfop_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfCFOPApi.create_cfop ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling TaxConfCFOPApi.create_cfop" if body.nil?
      # resource path
      local_var_path = "/taxconf/cfop".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfCFOPApi#create_cfop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # disable a CFOP.
    # 
    # @param code CFOP Code
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_cfop(code, opts = {})
      delete_cfop_with_http_info(code, opts)
      return nil
    end

    # disable a CFOP.
    # 
    # @param code CFOP Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_cfop_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfCFOPApi.delete_cfop ..."
      end
      # verify the required parameter 'code' is set
      fail ArgumentError, "Missing the required parameter 'code' when calling TaxConfCFOPApi.delete_cfop" if code.nil?
      if code.to_s.length > 60
        fail ArgumentError, 'invalid value for "code" when calling TaxConfCFOPApi.delete_cfop, the character length must be smaller than or equal to 60.'
      end

      # resource path
      local_var_path = "/taxconf/cfop/{code}".sub('{format}','json').sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfCFOPApi#delete_cfop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get CFOP information.
    # This operation return CFOP configuration 
    # @param code CFOP Code
    # @param [Hash] opts the optional parameters
    # @return [CfopConf]
    def get_cfop(code, opts = {})
      data, _status_code, _headers = get_cfop_with_http_info(code, opts)
      return data
    end

    # get CFOP information.
    # This operation return CFOP configuration 
    # @param code CFOP Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(CfopConf, Fixnum, Hash)>] CfopConf data, response status code and response headers
    def get_cfop_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfCFOPApi.get_cfop ..."
      end
      # verify the required parameter 'code' is set
      fail ArgumentError, "Missing the required parameter 'code' when calling TaxConfCFOPApi.get_cfop" if code.nil?
      if code.to_s.length > 60
        fail ArgumentError, 'invalid value for "code" when calling TaxConfCFOPApi.get_cfop, the character length must be smaller than or equal to 60.'
      end

      # resource path
      local_var_path = "/taxconf/cfop/{code}".sub('{format}','json').sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CfopConf')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfCFOPApi#get_cfop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrive list of CFOP.
    # This operation return CFOP configurations that match with parameters queries 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :suffixcode Identify this CFOP, the CFOP Code has two parts N.XXX where N the prefix is the operation scope type if IN or OUT and if is in state, other state, other country and suffix XXX is the operation type 
    # @option opts [Date] :date When informed return valid version configuration for this date 
    # @option opts [BOOLEAN] :inactive return the inactive versions too 
    # @return [Array<CfopConf>]
    def get_cfop_list(opts = {})
      data, _status_code, _headers = get_cfop_list_with_http_info(opts)
      return data
    end

    # retrive list of CFOP.
    # This operation return CFOP configurations that match with parameters queries 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :suffixcode Identify this CFOP, the CFOP Code has two parts N.XXX where N the prefix is the operation scope type if IN or OUT and if is in state, other state, other country and suffix XXX is the operation type 
    # @option opts [Date] :date When informed return valid version configuration for this date 
    # @option opts [BOOLEAN] :inactive return the inactive versions too 
    # @return [Array<(Array<CfopConf>, Fixnum, Hash)>] Array<CfopConf> data, response status code and response headers
    def get_cfop_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfCFOPApi.get_cfop_list ..."
      end
      if !opts[:'suffixcode'].nil? && opts[:'suffixcode'].to_s.length > 60
        fail ArgumentError, 'invalid value for "opts[:"suffixcode"]" when calling TaxConfCFOPApi.get_cfop_list, the character length must be smaller than or equal to 60.'
      end

      # resource path
      local_var_path = "/taxconf/cfop".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'suffixcode'] = opts[:'suffixcode'] if !opts[:'suffixcode'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'inactive'] = opts[:'inactive'] if !opts[:'inactive'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CfopConf>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfCFOPApi#get_cfop_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update a CFOP configuration
    # 
    # @param code CFOP Code
    # @param taxconfcfop The pet JSON you want to post
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_cfop(code, taxconfcfop, opts = {})
      update_cfop_with_http_info(code, taxconfcfop, opts)
      return nil
    end

    # update a CFOP configuration
    # 
    # @param code CFOP Code
    # @param taxconfcfop The pet JSON you want to post
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_cfop_with_http_info(code, taxconfcfop, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfCFOPApi.update_cfop ..."
      end
      # verify the required parameter 'code' is set
      fail ArgumentError, "Missing the required parameter 'code' when calling TaxConfCFOPApi.update_cfop" if code.nil?
      if code.to_s.length > 60
        fail ArgumentError, 'invalid value for "code" when calling TaxConfCFOPApi.update_cfop, the character length must be smaller than or equal to 60.'
      end

      # verify the required parameter 'taxconfcfop' is set
      fail ArgumentError, "Missing the required parameter 'taxconfcfop' when calling TaxConfCFOPApi.update_cfop" if taxconfcfop.nil?
      # resource path
      local_var_path = "/taxconf/cfop/{code}".sub('{format}','json').sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(taxconfcfop)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfCFOPApi#update_cfop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
