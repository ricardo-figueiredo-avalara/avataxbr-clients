=begin
#BR16 - API

#This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class CompanyLocationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # This operation return location 
    # @param company_id Company ID
    # @param code Location Code
    # @param [Hash] opts the optional parameters
    # @return [Location]
    def companies_company_id_locations_code_get(company_id, code, opts = {})
      data, _status_code, _headers = companies_company_id_locations_code_get_with_http_info(company_id, code, opts)
      return data
    end

    # 
    # This operation return location 
    # @param company_id Company ID
    # @param code Location Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(Location, Fixnum, Hash)>] Location data, response status code and response headers
    def companies_company_id_locations_code_get_with_http_info(company_id, code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyLocationApi.companies_company_id_locations_code_get ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyLocationApi.companies_company_id_locations_code_get" if company_id.nil?
      # verify the required parameter 'code' is set
      fail ArgumentError, "Missing the required parameter 'code' when calling CompanyLocationApi.companies_company_id_locations_code_get" if code.nil?
      # resource path
      local_var_path = "/companies/{companyId}/locations/{code}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Location')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyLocationApi#companies_company_id_locations_code_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # This operation return all locations 
    # @param company_id Company ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :x_pagination_limit The per page limit. Currently set to 10 but subject to change at any time (max 100). (default to 10)
    # @option opts [Integer] :x_pagination_current_page The current page. Defaults to 1. (default to 1)
    # @option opts [String] :x_pagination_sort 
    # @return [Array<Location>]
    def companies_company_id_locations_get(company_id, opts = {})
      data, _status_code, _headers = companies_company_id_locations_get_with_http_info(company_id, opts)
      return data
    end

    # 
    # This operation return all locations 
    # @param company_id Company ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :x_pagination_limit The per page limit. Currently set to 10 but subject to change at any time (max 100).
    # @option opts [Integer] :x_pagination_current_page The current page. Defaults to 1.
    # @option opts [String] :x_pagination_sort 
    # @return [Array<(Array<Location>, Fixnum, Hash)>] Array<Location> data, response status code and response headers
    def companies_company_id_locations_get_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyLocationApi.companies_company_id_locations_get ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyLocationApi.companies_company_id_locations_get" if company_id.nil?
      if !opts[:'x_pagination_limit'].nil? && opts[:'x_pagination_limit'] < 5
        fail ArgumentError, 'invalid value for "opts[:"x_pagination_limit"]" when calling CompanyLocationApi.companies_company_id_locations_get, must be greater than or equal to 5.'
      end

      if !opts[:'x_pagination_current_page'].nil? && opts[:'x_pagination_current_page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"x_pagination_current_page"]" when calling CompanyLocationApi.companies_company_id_locations_get, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/companies/{companyId}/locations".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-Pagination-Limit'] = opts[:'x_pagination_limit'] if !opts[:'x_pagination_limit'].nil?
      header_params[:'X-Pagination-Current-Page'] = opts[:'x_pagination_current_page'] if !opts[:'x_pagination_current_page'].nil?
      header_params[:'X-Pagination-Sort'] = opts[:'x_pagination_sort'] if !opts[:'x_pagination_sort'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Location>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyLocationApi#companies_company_id_locations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new location for company
    # This method operation create a new location for company 
    # @param company_id Company ID
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse201]
    def create_location(company_id, body, opts = {})
      data, _status_code, _headers = create_location_with_http_info(company_id, body, opts)
      return data
    end

    # Create new location for company
    # This method operation create a new location for company 
    # @param company_id Company ID
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def create_location_with_http_info(company_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyLocationApi.create_location ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyLocationApi.create_location" if company_id.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling CompanyLocationApi.create_location" if body.nil?
      # resource path
      local_var_path = "/companies/{companyId}/locations".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyLocationApi#create_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param company_id Company ID
    # @param code Location Code
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_location(company_id, code, opts = {})
      delete_location_with_http_info(company_id, code, opts)
      return nil
    end

    # 
    # 
    # @param company_id Company ID
    # @param code Location Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_location_with_http_info(company_id, code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyLocationApi.delete_location ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyLocationApi.delete_location" if company_id.nil?
      # verify the required parameter 'code' is set
      fail ArgumentError, "Missing the required parameter 'code' when calling CompanyLocationApi.delete_location" if code.nil?
      # resource path
      local_var_path = "/companies/{companyId}/locations/{code}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyLocationApi#delete_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update location for company
    # This method operation update a location for company 
    # @param company_id Company ID
    # @param code Location Code
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_location(company_id, code, body, opts = {})
      update_location_with_http_info(company_id, code, body, opts)
      return nil
    end

    # Update location for company
    # This method operation update a location for company 
    # @param company_id Company ID
    # @param code Location Code
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_location_with_http_info(company_id, code, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyLocationApi.update_location ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyLocationApi.update_location" if company_id.nil?
      # verify the required parameter 'code' is set
      fail ArgumentError, "Missing the required parameter 'code' when calling CompanyLocationApi.update_location" if code.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling CompanyLocationApi.update_location" if body.nil?
      # resource path
      local_var_path = "/companies/{companyId}/locations/{code}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyLocationApi#update_location\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
