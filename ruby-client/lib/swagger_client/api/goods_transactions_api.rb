=begin
#AvaTax Brazil

#The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class GoodsTransactionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Transaction Method
    # This method has more then one operation model, (a) AS IS, the system only stores the transaction; (b) Full Calculation, the system calculates taxes, validates fileds, stores with transaction state, but doesn't try get government authorization; (c) Full Sync, the system calculates taxes, validates fileds, gets government authorization, stores with transaction state when authorized, used for NFCe. 
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [TransactionForGoodsOut]
    def transactionsgoods_purchase_post(authorization, body, opts = {})
      data, _status_code, _headers = transactionsgoods_purchase_post_with_http_info(authorization, body, opts)
      return data
    end

    # Transaction Method
    # This method has more then one operation model, (a) AS IS, the system only stores the transaction; (b) Full Calculation, the system calculates taxes, validates fileds, stores with transaction state, but doesn&#39;t try get government authorization; (c) Full Sync, the system calculates taxes, validates fileds, gets government authorization, stores with transaction state when authorized, used for NFCe. 
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionForGoodsOut, Fixnum, Hash)>] TransactionForGoodsOut data, response status code and response headers
    def transactionsgoods_purchase_post_with_http_info(authorization, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GoodsTransactionsApi.transactionsgoods_purchase_post ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling GoodsTransactionsApi.transactionsgoods_purchase_post" if authorization.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling GoodsTransactionsApi.transactionsgoods_purchase_post" if body.nil?
      # resource path
      local_var_path = "/transactions?goods-purchase".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionForGoodsOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoodsTransactionsApi#transactionsgoods_purchase_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Transaction Method
    # This method has more then one operation model, (a) AS IS, the system only stores the transaction; (b) Full Calculation, the system calculates taxes, validates fields, stores with transaction state, but doesn't try get government authorization; (c) Full Sync, the system calculates the taxes, validates fileds, gets government authorization, stores with transaction state when authorized, used for NFCe. 
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [TransactionForGoodsOut]
    def transactionsgoods_sales_post(authorization, body, opts = {})
      data, _status_code, _headers = transactionsgoods_sales_post_with_http_info(authorization, body, opts)
      return data
    end

    # Transaction Method
    # This method has more then one operation model, (a) AS IS, the system only stores the transaction; (b) Full Calculation, the system calculates taxes, validates fields, stores with transaction state, but doesn&#39;t try get government authorization; (c) Full Sync, the system calculates the taxes, validates fileds, gets government authorization, stores with transaction state when authorized, used for NFCe. 
    # @param authorization Bearer {auth}
    # @param body Transaction Message
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionForGoodsOut, Fixnum, Hash)>] TransactionForGoodsOut data, response status code and response headers
    def transactionsgoods_sales_post_with_http_info(authorization, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GoodsTransactionsApi.transactionsgoods_sales_post ..."
      end
      # verify the required parameter 'authorization' is set
      fail ArgumentError, "Missing the required parameter 'authorization' when calling GoodsTransactionsApi.transactionsgoods_sales_post" if authorization.nil?
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling GoodsTransactionsApi.transactionsgoods_sales_post" if body.nil?
      # resource path
      local_var_path = "/transactions?goods-sales".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionForGoodsOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoodsTransactionsApi#transactionsgoods_sales_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
