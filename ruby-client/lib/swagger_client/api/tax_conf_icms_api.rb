=begin
#BR16 - API

#This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class TaxConfICMSApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # create a new ICMS Configuration
    # 
    # @param state Brazilian State
    # @param icms_conf_state The pet JSON you want to post
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse201]
    def create_icmsconfstate(state, icms_conf_state, opts = {})
      data, _status_code, _headers = create_icmsconfstate_with_http_info(state, icms_conf_state, opts)
      return data
    end

    # create a new ICMS Configuration
    # 
    # @param state Brazilian State
    # @param icms_conf_state The pet JSON you want to post
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def create_icmsconfstate_with_http_info(state, icms_conf_state, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfICMSApi.create_icmsconfstate ..."
      end
      # verify the required parameter 'state' is set
      fail ArgumentError, "Missing the required parameter 'state' when calling TaxConfICMSApi.create_icmsconfstate" if state.nil?
      # verify enum value
      unless ['ac', 'al', 'am', 'ap', 'ba', 'ce', 'df', 'es', 'go', 'ma', 'mg', 'ms', 'mt', 'pa', 'pb', 'pe', 'pi', 'pr', 'rj', 'rn', 'ro', 'rr', 'rs', 'sc', 'se', 'sp', 'to'].include?(state)
        fail ArgumentError, "invalid value for 'state', must be one of ac, al, am, ap, ba, ce, df, es, go, ma, mg, ms, mt, pa, pb, pe, pi, pr, rj, rn, ro, rr, rs, sc, se, sp, to"
      end
      if state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state" when calling TaxConfICMSApi.create_icmsconfstate, the character length must be smaller than or equal to 2.'
      end

      # verify the required parameter 'icms_conf_state' is set
      fail ArgumentError, "Missing the required parameter 'icms_conf_state' when calling TaxConfICMSApi.create_icmsconfstate" if icms_conf_state.nil?
      # resource path
      local_var_path = "/taxconf/icms/{state}".sub('{format}','json').sub('{' + 'state' + '}', state.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(icms_conf_state)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfICMSApi#create_icmsconfstate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # disable a ICMS by State.
    # 
    # @param state Brazilian State
    # @param code ICMS Code
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_icms_conf(state, code, opts = {})
      delete_icms_conf_with_http_info(state, code, opts)
      return nil
    end

    # disable a ICMS by State.
    # 
    # @param state Brazilian State
    # @param code ICMS Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_icms_conf_with_http_info(state, code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfICMSApi.delete_icms_conf ..."
      end
      # verify the required parameter 'state' is set
      fail ArgumentError, "Missing the required parameter 'state' when calling TaxConfICMSApi.delete_icms_conf" if state.nil?
      # verify enum value
      unless ['ac', 'al', 'am', 'ap', 'ba', 'ce', 'df', 'es', 'go', 'ma', 'mg', 'ms', 'mt', 'pa', 'pb', 'pe', 'pi', 'pr', 'rj', 'rn', 'ro', 'rr', 'rs', 'sc', 'se', 'sp', 'to'].include?(state)
        fail ArgumentError, "invalid value for 'state', must be one of ac, al, am, ap, ba, ce, df, es, go, ma, mg, ms, mt, pa, pb, pe, pi, pr, rj, rn, ro, rr, rs, sc, se, sp, to"
      end
      if state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state" when calling TaxConfICMSApi.delete_icms_conf, the character length must be smaller than or equal to 2.'
      end

      # verify the required parameter 'code' is set
      fail ArgumentError, "Missing the required parameter 'code' when calling TaxConfICMSApi.delete_icms_conf" if code.nil?
      if code.to_s.length > 60
        fail ArgumentError, 'invalid value for "code" when calling TaxConfICMSApi.delete_icms_conf, the character length must be smaller than or equal to 60.'
      end

      # resource path
      local_var_path = "/taxconf/icms/{state}/{code}".sub('{format}','json').sub('{' + 'state' + '}', state.to_s).sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfICMSApi#delete_icms_conf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get ICMS information by State.
    # This operation return configurations of icms that match with parameters queries 
    # @param state Brazilian State
    # @param code ICMS Code
    # @param [Hash] opts the optional parameters
    # @return [Array<IcmsConfByState>]
    def get_icms_conf_by_state(state, code, opts = {})
      data, _status_code, _headers = get_icms_conf_by_state_with_http_info(state, code, opts)
      return data
    end

    # get ICMS information by State.
    # This operation return configurations of icms that match with parameters queries 
    # @param state Brazilian State
    # @param code ICMS Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<IcmsConfByState>, Fixnum, Hash)>] Array<IcmsConfByState> data, response status code and response headers
    def get_icms_conf_by_state_with_http_info(state, code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfICMSApi.get_icms_conf_by_state ..."
      end
      # verify the required parameter 'state' is set
      fail ArgumentError, "Missing the required parameter 'state' when calling TaxConfICMSApi.get_icms_conf_by_state" if state.nil?
      # verify enum value
      unless ['ac', 'al', 'am', 'ap', 'ba', 'ce', 'df', 'es', 'go', 'ma', 'mg', 'ms', 'mt', 'pa', 'pb', 'pe', 'pi', 'pr', 'rj', 'rn', 'ro', 'rr', 'rs', 'sc', 'se', 'sp', 'to'].include?(state)
        fail ArgumentError, "invalid value for 'state', must be one of ac, al, am, ap, ba, ce, df, es, go, ma, mg, ms, mt, pa, pb, pe, pi, pr, rj, rn, ro, rr, rs, sc, se, sp, to"
      end
      if state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state" when calling TaxConfICMSApi.get_icms_conf_by_state, the character length must be smaller than or equal to 2.'
      end

      # verify the required parameter 'code' is set
      fail ArgumentError, "Missing the required parameter 'code' when calling TaxConfICMSApi.get_icms_conf_by_state" if code.nil?
      if code.to_s.length > 60
        fail ArgumentError, 'invalid value for "code" when calling TaxConfICMSApi.get_icms_conf_by_state, the character length must be smaller than or equal to 60.'
      end

      # resource path
      local_var_path = "/taxconf/icms/{state}/{code}".sub('{format}','json').sub('{' + 'state' + '}', state.to_s).sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<IcmsConfByState>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfICMSApi#get_icms_conf_by_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrive list of ICMS.
    # This operation return ICMS configurations that match with parameters queries 
    # @param state Brazilian State
    # @param [Hash] opts the optional parameters
    # @option opts [String] :suffixcode Identify this ICMS
    # @option opts [Date] :date When informed return valid version configuration for this date
    # @option opts [BOOLEAN] :inactive return the inactive versions too
    # @return [Array<IcmsConfByState>]
    def get_icms_list(state, opts = {})
      data, _status_code, _headers = get_icms_list_with_http_info(state, opts)
      return data
    end

    # retrive list of ICMS.
    # This operation return ICMS configurations that match with parameters queries 
    # @param state Brazilian State
    # @param [Hash] opts the optional parameters
    # @option opts [String] :suffixcode Identify this ICMS
    # @option opts [Date] :date When informed return valid version configuration for this date
    # @option opts [BOOLEAN] :inactive return the inactive versions too
    # @return [Array<(Array<IcmsConfByState>, Fixnum, Hash)>] Array<IcmsConfByState> data, response status code and response headers
    def get_icms_list_with_http_info(state, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfICMSApi.get_icms_list ..."
      end
      # verify the required parameter 'state' is set
      fail ArgumentError, "Missing the required parameter 'state' when calling TaxConfICMSApi.get_icms_list" if state.nil?
      # verify enum value
      unless ['ac', 'al', 'am', 'ap', 'ba', 'ce', 'df', 'es', 'go', 'ma', 'mg', 'ms', 'mt', 'pa', 'pb', 'pe', 'pi', 'pr', 'rj', 'rn', 'ro', 'rr', 'rs', 'sc', 'se', 'sp', 'to'].include?(state)
        fail ArgumentError, "invalid value for 'state', must be one of ac, al, am, ap, ba, ce, df, es, go, ma, mg, ms, mt, pa, pb, pe, pi, pr, rj, rn, ro, rr, rs, sc, se, sp, to"
      end
      if state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state" when calling TaxConfICMSApi.get_icms_list, the character length must be smaller than or equal to 2.'
      end

      if !opts[:'suffixcode'].nil? && opts[:'suffixcode'].to_s.length > 60
        fail ArgumentError, 'invalid value for "opts[:"suffixcode"]" when calling TaxConfICMSApi.get_icms_list, the character length must be smaller than or equal to 60.'
      end

      # resource path
      local_var_path = "/taxconf/icms/{state}".sub('{format}','json').sub('{' + 'state' + '}', state.to_s)

      # query parameters
      query_params = {}
      query_params[:'suffixcode'] = opts[:'suffixcode'] if !opts[:'suffixcode'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'inactive'] = opts[:'inactive'] if !opts[:'inactive'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<IcmsConfByState>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfICMSApi#get_icms_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrive list of ICMS.
    # This operation return ICMS configurations that match with parameters queries 
    # @param text Search for codes
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state Filter for states
    # @return [Array<IcmsConfByState>]
    def get_icms_list_0(text, opts = {})
      data, _status_code, _headers = get_icms_list_0_with_http_info(text, opts)
      return data
    end

    # retrive list of ICMS.
    # This operation return ICMS configurations that match with parameters queries 
    # @param text Search for codes
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state Filter for states
    # @return [Array<(Array<IcmsConfByState>, Fixnum, Hash)>] Array<IcmsConfByState> data, response status code and response headers
    def get_icms_list_0_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfICMSApi.get_icms_list_0 ..."
      end
      # verify the required parameter 'text' is set
      fail ArgumentError, "Missing the required parameter 'text' when calling TaxConfICMSApi.get_icms_list_0" if text.nil?
      if text.to_s.length > 60
        fail ArgumentError, 'invalid value for "text" when calling TaxConfICMSApi.get_icms_list_0, the character length must be smaller than or equal to 60.'
      end

      if !opts[:'state'].nil? && opts[:'state'].to_s.length > 2
        fail ArgumentError, 'invalid value for "opts[:"state"]" when calling TaxConfICMSApi.get_icms_list_0, the character length must be smaller than or equal to 2.'
      end

      # resource path
      local_var_path = "/taxconf/icms-search/".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'text'] = text
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<IcmsConfByState>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfICMSApi#get_icms_list_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update a IcmsConf State,
    # 
    # @param state Brazilian State
    # @param code ICMS Code
    # @param icms_conf_state The pet JSON you want to post
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_icmsconfstate(state, code, icms_conf_state, opts = {})
      update_icmsconfstate_with_http_info(state, code, icms_conf_state, opts)
      return nil
    end

    # update a IcmsConf State,
    # 
    # @param state Brazilian State
    # @param code ICMS Code
    # @param icms_conf_state The pet JSON you want to post
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_icmsconfstate_with_http_info(state, code, icms_conf_state, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TaxConfICMSApi.update_icmsconfstate ..."
      end
      # verify the required parameter 'state' is set
      fail ArgumentError, "Missing the required parameter 'state' when calling TaxConfICMSApi.update_icmsconfstate" if state.nil?
      # verify enum value
      unless ['ac', 'al', 'am', 'ap', 'ba', 'ce', 'df', 'es', 'go', 'ma', 'mg', 'ms', 'mt', 'pa', 'pb', 'pe', 'pi', 'pr', 'rj', 'rn', 'ro', 'rr', 'rs', 'sc', 'se', 'sp', 'to'].include?(state)
        fail ArgumentError, "invalid value for 'state', must be one of ac, al, am, ap, ba, ce, df, es, go, ma, mg, ms, mt, pa, pb, pe, pi, pr, rj, rn, ro, rr, rs, sc, se, sp, to"
      end
      if state.to_s.length > 2
        fail ArgumentError, 'invalid value for "state" when calling TaxConfICMSApi.update_icmsconfstate, the character length must be smaller than or equal to 2.'
      end

      # verify the required parameter 'code' is set
      fail ArgumentError, "Missing the required parameter 'code' when calling TaxConfICMSApi.update_icmsconfstate" if code.nil?
      if code.to_s.length > 60
        fail ArgumentError, 'invalid value for "code" when calling TaxConfICMSApi.update_icmsconfstate, the character length must be smaller than or equal to 60.'
      end

      # verify the required parameter 'icms_conf_state' is set
      fail ArgumentError, "Missing the required parameter 'icms_conf_state' when calling TaxConfICMSApi.update_icmsconfstate" if icms_conf_state.nil?
      # resource path
      local_var_path = "/taxconf/icms/{state}/{code}".sub('{format}','json').sub('{' + 'state' + '}', state.to_s).sub('{' + 'code' + '}', code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(icms_conf_state)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxConfICMSApi#update_icmsconfstate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
