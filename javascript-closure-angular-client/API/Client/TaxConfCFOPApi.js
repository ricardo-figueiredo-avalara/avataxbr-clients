/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.TaxConfCFOPApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 * Version: 1.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.TaxConfCFOPApi');

goog.require('API.Client.CfopConf');
goog.require('API.Client.Message');
goog.require('API.Client.ValidationError');
goog.require('API.Client.date');
goog.require('API.Client.inline_response_201');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.TaxConfCFOPApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('TaxConfCFOPApiBasePath') ?
                   /** @type {!string} */ ($injector.get('TaxConfCFOPApiBasePath')) :
                   'http://avataxbr-sandbox.avalarabrasil.com.br/v2';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('TaxConfCFOPApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('TaxConfCFOPApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.TaxConfCFOPApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * create a new CFOP configuration
 * 
 * @param {!CfopConf} body The pet JSON you want to post
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.inline_response_201>}
 */
API.Client.TaxConfCFOPApi.prototype.createCfop = function(body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/taxconf/cfop';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling createCfop');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * disable a CFOP.
 * 
 * @param {!string} code CFOP Code
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.TaxConfCFOPApi.prototype.deleteCfop = function(code, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/taxconf/cfop/{code}'
      .replace('{' + 'code' + '}', String(code));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'code' is set
  if (!code) {
    throw new Error('Missing required parameter code when calling deleteCfop');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * get CFOP information.
 * This operation return CFOP configuration 
 * @param {!string} code CFOP Code
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.CfopConf>}
 */
API.Client.TaxConfCFOPApi.prototype.getCfop = function(code, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/taxconf/cfop/{code}'
      .replace('{' + 'code' + '}', String(code));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'code' is set
  if (!code) {
    throw new Error('Missing required parameter code when calling getCfop');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * retrive list of CFOP.
 * This operation return CFOP configurations that match with parameters queries 
 * @param {!string=} opt_suffixcode Identify this CFOP, the CFOP Code has two parts N.XXX where N the prefix is the operation scope type if IN or OUT and if is in state, other state, other country and suffix XXX is the operation type 
 * @param {!API.Client.date=} opt_date When informed return valid version configuration for this date 
 * @param {!boolean=} opt_inactive return the inactive versions too 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.CfopConf>>}
 */
API.Client.TaxConfCFOPApi.prototype.getCfopList = function(opt_suffixcode, opt_date, opt_inactive, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/taxconf/cfop';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_suffixcode !== undefined) {
    queryParameters['suffixcode'] = opt_suffixcode;
  }

  if (opt_date !== undefined) {
    queryParameters['date'] = opt_date;
  }

  if (opt_inactive !== undefined) {
    queryParameters['inactive'] = opt_inactive;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * update a CFOP configuration
 * 
 * @param {!string} code CFOP Code
 * @param {!CfopConf} taxconfcfop The pet JSON you want to post
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.TaxConfCFOPApi.prototype.updateCfop = function(code, taxconfcfop, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/taxconf/cfop/{code}'
      .replace('{' + 'code' + '}', String(code));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'code' is set
  if (!code) {
    throw new Error('Missing required parameter code when calling updateCfop');
  }
  // verify required parameter 'taxconfcfop' is set
  if (!taxconfcfop) {
    throw new Error('Missing required parameter taxconfcfop when calling updateCfop');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: taxconfcfop,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
