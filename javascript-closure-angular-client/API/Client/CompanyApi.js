/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.CompanyApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 * Version: 1.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.CompanyApi');

goog.require('API.Client.Company');
goog.require('API.Client.Message');
goog.require('API.Client.UUID');
goog.require('API.Client.ValidationError');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.CompanyApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('CompanyApiBasePath') ?
                   /** @type {!string} */ ($injector.get('CompanyApiBasePath')) :
                   'https://br16-dev-app03.br.avalara.com/v2';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('CompanyApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('CompanyApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.CompanyApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Retrieve Companies by account
 * Retrieve list companies of one account
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Company>>}
 */
API.Client.CompanyApi.prototype.companiesGet = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/companies';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create company and your data configuration
 * This method operation create a company for a account 
 * @param {!Company} body Transaction Message
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Company>}
 */
API.Client.CompanyApi.prototype.createCompany = function(body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/companies';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling createCompany');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!API.Client.UUID} accountId Account ID
 * @param {!API.Client.UUID} companyId Company ID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.CompanyApi.prototype.deleteAccountCompany = function(accountId, companyId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/accounts/{accountId}/companies/{companyId}'
      .replace('{' + 'accountId' + '}', String(accountId))
      .replace('{' + 'companyId' + '}', String(companyId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'accountId' is set
  if (!accountId) {
    throw new Error('Missing required parameter accountId when calling deleteAccountCompany');
  }
  // verify required parameter 'companyId' is set
  if (!companyId) {
    throw new Error('Missing required parameter companyId when calling deleteAccountCompany');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * 
 * @param {!API.Client.UUID} companyId Company ID
 * @param {!API.Client.UUID} companyId2 Company ID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.CompanyApi.prototype.deleteCompany = function(companyId, companyId2, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/companies/{companyId}'
      .replace('{' + 'companyId' + '}', String(companyId))
      .replace('{' + 'companyId' + '}', String(companyId2));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'companyId' is set
  if (!companyId) {
    throw new Error('Missing required parameter companyId when calling deleteCompany');
  }
  // verify required parameter 'companyId2' is set
  if (!companyId2) {
    throw new Error('Missing required parameter companyId2 when calling deleteCompany');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get company information and your data configuration
 * This method operation get a company for a account 
 * @param {!API.Client.UUID} companyId Company ID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Company>}
 */
API.Client.CompanyApi.prototype.infoCompany = function(companyId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/companies/{companyId}'
      .replace('{' + 'companyId' + '}', String(companyId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'companyId' is set
  if (!companyId) {
    throw new Error('Missing required parameter companyId when calling infoCompany');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update company information and your data configuration
 * This method operation create a company for a account 
 * @param {!API.Client.UUID} companyId Company ID
 * @param {!Company} body Transaction Message
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.CompanyApi.prototype.updateCompany = function(companyId, body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/companies/{companyId}'
      .replace('{' + 'companyId' + '}', String(companyId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'companyId' is set
  if (!companyId) {
    throw new Error('Missing required parameter companyId when calling updateCompany');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling updateCompany');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
