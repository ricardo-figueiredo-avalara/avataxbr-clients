/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.TaxConfISSApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 * Version: 1.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.TaxConfISSApi');

goog.require('API.Client.IssConfByCity');
goog.require('API.Client.Message');
goog.require('API.Client.ValidationError');
goog.require('API.Client.date');
goog.require('API.Client.inline_response_201');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.TaxConfISSApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('TaxConfISSApiBasePath') ?
                   /** @type {!string} */ ($injector.get('TaxConfISSApiBasePath')) :
                   'http://avataxbr-sandbox.avalarabrasil.com.br/v2';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('TaxConfISSApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('TaxConfISSApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.TaxConfISSApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * create a new ISS Configuration
 * 
 * @param {!IssConfByCity} issConfByCity The pet JSON you want to post
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.inline_response_201>}
 */
API.Client.TaxConfISSApi.prototype.createIssConfByCity = function(issConfByCity, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/taxconf/iss';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'issConfByCity' is set
  if (!issConfByCity) {
    throw new Error('Missing required parameter issConfByCity when calling createIssConfByCity');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: issConfByCity,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * disable a ISS by City Code.
 * 
 * @param {!number} cityCode City Code
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.TaxConfISSApi.prototype.deleteIssConf = function(cityCode, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/taxconf/iss/{cityCode}'
      .replace('{' + 'cityCode' + '}', String(cityCode));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'cityCode' is set
  if (!cityCode) {
    throw new Error('Missing required parameter cityCode when calling deleteIssConf');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * get ISS information by City Code.
 * This operation return configurations of ISS that match with parameters queries 
 * @param {!number} cityCode City Code
 * @param {!string=} opt_code Identificator of this configuration, it is unique for account or standard namedspace 
 * @param {!API.Client.date=} opt_date When informed return valid version configuration for this date 
 * @param {!boolean=} opt_inactive return the inctives versions too 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.IssConfByCity>>}
 */
API.Client.TaxConfISSApi.prototype.getIssConfByCity = function(cityCode, opt_code, opt_date, opt_inactive, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/taxconf/iss/{cityCode}'
      .replace('{' + 'cityCode' + '}', String(cityCode));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'cityCode' is set
  if (!cityCode) {
    throw new Error('Missing required parameter cityCode when calling getIssConfByCity');
  }
  if (opt_code !== undefined) {
    queryParameters['code'] = opt_code;
  }

  if (opt_date !== undefined) {
    queryParameters['date'] = opt_date;
  }

  if (opt_inactive !== undefined) {
    queryParameters['inactive'] = opt_inactive;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * retrive list of ISS
 * This operation return ISS configurations that match with parameters queries 
 * @param {!string=} opt_suffixcode Identify this ISS 
 * @param {!API.Client.date=} opt_date When informed return valid version configuration for this date 
 * @param {!boolean=} opt_inactive return the inactive versions too 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.IssConfByCity>>}
 */
API.Client.TaxConfISSApi.prototype.getIssList = function(opt_suffixcode, opt_date, opt_inactive, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/taxconf/iss';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_suffixcode !== undefined) {
    queryParameters['suffixcode'] = opt_suffixcode;
  }

  if (opt_date !== undefined) {
    queryParameters['date'] = opt_date;
  }

  if (opt_inactive !== undefined) {
    queryParameters['inactive'] = opt_inactive;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * update a ISS by City Code.
 * 
 * @param {!number} cityCode City Code
 * @param {!IssConfByCity} issConfByCity The pet JSON you want to post
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.TaxConfISSApi.prototype.updateIssConfByCity = function(cityCode, issConfByCity, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/taxconf/iss/{cityCode}'
      .replace('{' + 'cityCode' + '}', String(cityCode));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'cityCode' is set
  if (!cityCode) {
    throw new Error('Missing required parameter cityCode when calling updateIssConfByCity');
  }
  // verify required parameter 'issConfByCity' is set
  if (!issConfByCity) {
    throw new Error('Missing required parameter issConfByCity when calling updateIssConfByCity');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: issConfByCity,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
