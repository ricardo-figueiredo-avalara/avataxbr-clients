/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.InvoiceContingencyApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 * Version: 1.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.InvoiceContingencyApi');

goog.require('API.Client.Body4');
goog.require('API.Client.Message');
goog.require('API.Client.ValidationError');
goog.require('API.Client.inline_response_200_3');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.InvoiceContingencyApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('InvoiceContingencyApiBasePath') ?
                   /** @type {!string} */ ($injector.get('InvoiceContingencyApiBasePath')) :
                   'https://br16-dev-app03.br.avalara.com/v2';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('InvoiceContingencyApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('InvoiceContingencyApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.InvoiceContingencyApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Invoice Drop Contingency per State
 * Drop State in Contingency
 * @param {!string} state Brazilian State
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.InvoiceContingencyApi.prototype.invoiceDropContingency = function(state, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/invoices/contingency/{state}'
      .replace('{' + 'state' + '}', String(state));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'state' is set
  if (!state) {
    throw new Error('Missing required parameter state when calling invoiceDropContingency');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Invoice Set Contingency per State
 * Set State in Contingency
 * @param {!string} state Brazilian State
 * @param {!Body4} body Set Contingency
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.InvoiceContingencyApi.prototype.invoiceSetContingency = function(state, body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/invoices/contingency/{state}'
      .replace('{' + 'state' + '}', String(state));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'state' is set
  if (!state) {
    throw new Error('Missing required parameter state when calling invoiceSetContingency');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling invoiceSetContingency');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Invoice Verify Contingency per State
 * Check if State was in Contingency
 * @param {!string} state Brazilian State
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.inline_response_200_3>}
 */
API.Client.InvoiceContingencyApi.prototype.invoiceVerifyContingency = function(state, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/invoices/contingency/{state}'
      .replace('{' + 'state' + '}', String(state));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'state' is set
  if (!state) {
    throw new Error('Missing required parameter state when calling invoiceVerifyContingency');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
