/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.ServiceCalculationsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 * Version: 1.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.ServiceCalculationsApi');

goog.require('API.Client.Message');
goog.require('API.Client.PaymentTransactionIn');
goog.require('API.Client.PaymentTransactionOut');
goog.require('API.Client.PurchaseTransactionIn');
goog.require('API.Client.PurchaseTransactionOut');
goog.require('API.Client.ReceiptTransactionIn');
goog.require('API.Client.ReceiptTransactionOut');
goog.require('API.Client.SalesTransactionIn');
goog.require('API.Client.SalesTransactionOut');
goog.require('API.Client.UUID');
goog.require('API.Client.ValidationError');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.ServiceCalculationsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('ServiceCalculationsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('ServiceCalculationsApiBasePath')) :
                   'http://avataxbr-sandbox.avalarabrasil.com.br/v2';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('ServiceCalculationsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('ServiceCalculationsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.ServiceCalculationsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Retrieve transactions
 * Retrieve a single transaction
 * @param {!string} authorization Bearer {auth}
 * @param {!API.Client.UUID} accountId Account ID
 * @param {!string} companyCode Company Code
 * @param {!string} transactionType Transaction Type (sale, purchase, receipts or payment)
 * @param {!string} documentCode Document Code
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ServiceCalculationsApi.prototype.calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet = function(authorization, accountId, companyCode, transactionType, documentCode, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}'
      .replace('{' + 'accountId' + '}', String(accountId))
      .replace('{' + 'companyCode' + '}', String(companyCode))
      .replace('{' + 'transactionType' + '}', String(transactionType))
      .replace('{' + 'documentCode' + '}', String(documentCode));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet');
  }
  // verify required parameter 'accountId' is set
  if (!accountId) {
    throw new Error('Missing required parameter accountId when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet');
  }
  // verify required parameter 'companyCode' is set
  if (!companyCode) {
    throw new Error('Missing required parameter companyCode when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet');
  }
  // verify required parameter 'transactionType' is set
  if (!transactionType) {
    throw new Error('Missing required parameter transactionType when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet');
  }
  // verify required parameter 'documentCode' is set
  if (!documentCode) {
    throw new Error('Missing required parameter documentCode when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet');
  }
  headerParams['Authorization'] = authorization;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Promote a calculation to transaction
 * Promote a calculation to transaction
 * @param {!string} authorization Bearer {auth}
 * @param {!API.Client.UUID} accountId Account ID
 * @param {!string} companyCode Company Code
 * @param {!string} transactionType Transaction Type (sale, purchase, receipts or payment)
 * @param {!string} documentCode Document Code
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ServiceCalculationsApi.prototype.calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost = function(authorization, accountId, companyCode, transactionType, documentCode, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/transactions'
      .replace('{' + 'accountId' + '}', String(accountId))
      .replace('{' + 'companyCode' + '}', String(companyCode))
      .replace('{' + 'transactionType' + '}', String(transactionType))
      .replace('{' + 'documentCode' + '}', String(documentCode));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost');
  }
  // verify required parameter 'accountId' is set
  if (!accountId) {
    throw new Error('Missing required parameter accountId when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost');
  }
  // verify required parameter 'companyCode' is set
  if (!companyCode) {
    throw new Error('Missing required parameter companyCode when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost');
  }
  // verify required parameter 'transactionType' is set
  if (!transactionType) {
    throw new Error('Missing required parameter transactionType when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost');
  }
  // verify required parameter 'documentCode' is set
  if (!documentCode) {
    throw new Error('Missing required parameter documentCode when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost');
  }
  headerParams['Authorization'] = authorization;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Retrieve transactions
 * Retrieve a list of transactions
 * @param {!string} authorization Bearer {auth}
 * @param {!API.Client.UUID} accountId Account ID
 * @param {!string} companyCode Company Code
 * @param {!string} transactionType Transaction Type (sale, purchase, receipts or payment)
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ServiceCalculationsApi.prototype.calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet = function(authorization, accountId, companyCode, transactionType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calculations/account/{accountId}/company/{companyCode}/{transactionType}'
      .replace('{' + 'accountId' + '}', String(accountId))
      .replace('{' + 'companyCode' + '}', String(companyCode))
      .replace('{' + 'transactionType' + '}', String(transactionType));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet');
  }
  // verify required parameter 'accountId' is set
  if (!accountId) {
    throw new Error('Missing required parameter accountId when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet');
  }
  // verify required parameter 'companyCode' is set
  if (!companyCode) {
    throw new Error('Missing required parameter companyCode when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet');
  }
  // verify required parameter 'transactionType' is set
  if (!transactionType) {
    throw new Error('Missing required parameter transactionType when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet');
  }
  headerParams['Authorization'] = authorization;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Calculation Method
 * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
 * @param {!string} authorization Bearer {auth}
 * @param {!PaymentTransactionIn} body Transaction Message
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.PaymentTransactionOut>}
 */
API.Client.ServiceCalculationsApi.prototype.calculationsservicePaymentPost = function(authorization, body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calculations?service-payment';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling calculationsservicePaymentPost');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling calculationsservicePaymentPost');
  }
  headerParams['Authorization'] = authorization;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Calculation Method
 * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
 * @param {!string} authorization Bearer {auth}
 * @param {!PurchaseTransactionIn} body Transaction Message
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.PurchaseTransactionOut>}
 */
API.Client.ServiceCalculationsApi.prototype.calculationsservicePurchasePost = function(authorization, body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calculations?service-purchase';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling calculationsservicePurchasePost');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling calculationsservicePurchasePost');
  }
  headerParams['Authorization'] = authorization;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Calculation Method
 * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
 * @param {!string} authorization Bearer {auth}
 * @param {!ReceiptTransactionIn} body Transaction Message
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ReceiptTransactionOut>}
 */
API.Client.ServiceCalculationsApi.prototype.calculationsserviceReceiptPost = function(authorization, body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calculations?service-receipt';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling calculationsserviceReceiptPost');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling calculationsserviceReceiptPost');
  }
  headerParams['Authorization'] = authorization;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Calculation Method
 * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
 * @param {!string} authorization Bearer {auth}
 * @param {!SalesTransactionIn} body Transaction Message
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.SalesTransactionOut>}
 */
API.Client.ServiceCalculationsApi.prototype.calculationsserviceSalesPost = function(authorization, body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calculations?service-sales';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling calculationsserviceSalesPost');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling calculationsserviceSalesPost');
  }
  headerParams['Authorization'] = authorization;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
