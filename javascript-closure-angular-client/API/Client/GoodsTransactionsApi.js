/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.GoodsTransactionsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 * Version: 1.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.GoodsTransactionsApi');

goog.require('API.Client.Message');
goog.require('API.Client.TransactionForGoodsIn');
goog.require('API.Client.TransactionForGoodsOut');
goog.require('API.Client.ValidationError');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.GoodsTransactionsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('GoodsTransactionsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('GoodsTransactionsApiBasePath')) :
                   'https://br16-dev-app03.br.avalara.com/v2';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('GoodsTransactionsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('GoodsTransactionsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.GoodsTransactionsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Transaction Method
 * This method has more then one operation model, (a) AS IS, the system only stores the transaction; (b) Full Calculation, the system calculates taxes, validates fileds, stores with transaction state, but doesn&#39;t try get government authorization; (c) Full Sync, the system calculates taxes, validates fileds, gets government authorization, stores with transaction state when authorized, used for NFCe. 
 * @param {!string} authorization Bearer {auth}
 * @param {!TransactionForGoodsIn} body Transaction Message
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.TransactionForGoodsOut>}
 */
API.Client.GoodsTransactionsApi.prototype.transactionsgoodsPurchasePost = function(authorization, body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/transactions?goods-purchase';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling transactionsgoodsPurchasePost');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling transactionsgoodsPurchasePost');
  }
  headerParams['Authorization'] = authorization;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Transaction Method
 * This method has more then one operation model, (a) AS IS, the system only stores the transaction; (b) Full Calculation, the system calculates taxes, validates fields, stores with transaction state, but doesn&#39;t try get government authorization; (c) Full Sync, the system calculates the taxes, validates fileds, gets government authorization, stores with transaction state when authorized, used for NFCe. 
 * @param {!string} authorization Bearer {auth}
 * @param {!TransactionForGoodsIn} body Transaction Message
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.TransactionForGoodsOut>}
 */
API.Client.GoodsTransactionsApi.prototype.transactionsgoodsSalesPost = function(authorization, body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/transactions?goods-sales';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling transactionsgoodsSalesPost');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling transactionsgoodsSalesPost');
  }
  headerParams['Authorization'] = authorization;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
