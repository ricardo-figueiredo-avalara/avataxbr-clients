/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.InvoiceNFeDANFEApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 * Version: 1.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.InvoiceNFeDANFEApi');

goog.require('API.Client.Message');
goog.require('API.Client.ValidationError');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.InvoiceNFeDANFEApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('InvoiceNFeDANFEApiBasePath') ?
                   /** @type {!string} */ ($injector.get('InvoiceNFeDANFEApiBasePath')) :
                   'http://avataxbr-sandbox.avalarabrasil.com.br/v2';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('InvoiceNFeDANFEApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('InvoiceNFeDANFEApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.InvoiceNFeDANFEApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Retrieve Danfe
 * Retrieve the Danfe 
 * @param {!string} authorization Bearer {auth}
 * @param {!string} key Invoice Key
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Object>}
 */
API.Client.InvoiceNFeDANFEApi.prototype.nfePrint = function(authorization, key, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/invoices/nfe/{key}'
      .replace('{' + 'key' + '}', String(key));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'authorization' is set
  if (!authorization) {
    throw new Error('Missing required parameter authorization when calling nfePrint');
  }
  // verify required parameter 'key' is set
  if (!key) {
    throw new Error('Missing required parameter key when calling nfePrint');
  }
  headerParams['Authorization'] = authorization;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
