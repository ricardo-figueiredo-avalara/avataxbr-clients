=begin comment

AvaTax Brazil

The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::TaxConfISSApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# create_iss_conf_by_city
#
# create a new ISS Configuration
# 
# @param IssConfByCity $iss_conf_by_city The pet JSON you want to post (required)
{
    my $params = {
    'iss_conf_by_city' => {
        data_type => 'IssConfByCity',
        description => 'The pet JSON you want to post',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_iss_conf_by_city' } = { 
    	summary => 'create a new ISS Configuration',
        params => $params,
        returns => 'InlineResponse201',
        };
}
# @return InlineResponse201
#
sub create_iss_conf_by_city {
    my ($self, %args) = @_;

    # verify the required parameter 'iss_conf_by_city' is set
    unless (exists $args{'iss_conf_by_city'}) {
      croak("Missing the required parameter 'iss_conf_by_city' when calling create_iss_conf_by_city");
    }

    # parse inputs
    my $_resource_path = '/taxconf/iss';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'iss_conf_by_city'}) {
        $_body_data = $args{'iss_conf_by_city'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse201', $response);
    return $_response_object;
}

#
# delete_iss_conf
#
# disable a ISS by City Code.
# 
# @param Number $city_code City Code (required)
{
    my $params = {
    'city_code' => {
        data_type => 'Number',
        description => 'City Code',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_iss_conf' } = { 
    	summary => 'disable a ISS by City Code.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_iss_conf {
    my ($self, %args) = @_;

    # verify the required parameter 'city_code' is set
    unless (exists $args{'city_code'}) {
      croak("Missing the required parameter 'city_code' when calling delete_iss_conf");
    }

    # parse inputs
    my $_resource_path = '/taxconf/iss/{cityCode}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'city_code'}) {
        my $_base_variable = "{" . "cityCode" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'city_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_iss_conf_by_city
#
# get ISS information by City Code.
# 
# @param Number $city_code City Code (required)
# @param string $code Identificator of this configuration, it is unique for account or standard namedspace  (optional)
# @param DateTime $date When informed return valid version configuration for this date  (optional)
# @param boolean $inactive return the inctives versions too  (optional)
{
    my $params = {
    'city_code' => {
        data_type => 'Number',
        description => 'City Code',
        required => '1',
    },
    'code' => {
        data_type => 'string',
        description => 'Identificator of this configuration, it is unique for account or standard namedspace ',
        required => '0',
    },
    'date' => {
        data_type => 'DateTime',
        description => 'When informed return valid version configuration for this date ',
        required => '0',
    },
    'inactive' => {
        data_type => 'boolean',
        description => 'return the inctives versions too ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_iss_conf_by_city' } = { 
    	summary => 'get ISS information by City Code.',
        params => $params,
        returns => 'ARRAY[IssConfByCity]',
        };
}
# @return ARRAY[IssConfByCity]
#
sub get_iss_conf_by_city {
    my ($self, %args) = @_;

    # verify the required parameter 'city_code' is set
    unless (exists $args{'city_code'}) {
      croak("Missing the required parameter 'city_code' when calling get_iss_conf_by_city");
    }

    # parse inputs
    my $_resource_path = '/taxconf/iss/{cityCode}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'code'}) {
        $query_params->{'code'} = $self->{api_client}->to_query_value($args{'code'});
    }

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    # query params
    if ( exists $args{'inactive'}) {
        $query_params->{'inactive'} = $self->{api_client}->to_query_value($args{'inactive'});
    }

    # path params
    if ( exists $args{'city_code'}) {
        my $_base_variable = "{" . "cityCode" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'city_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[IssConfByCity]', $response);
    return $_response_object;
}

#
# get_iss_list
#
# retrive list of ISS
# 
# @param string $suffixcode Identify this ISS  (optional)
# @param DateTime $date When informed return valid version configuration for this date  (optional)
# @param boolean $inactive return the inactive versions too  (optional)
{
    my $params = {
    'suffixcode' => {
        data_type => 'string',
        description => 'Identify this ISS ',
        required => '0',
    },
    'date' => {
        data_type => 'DateTime',
        description => 'When informed return valid version configuration for this date ',
        required => '0',
    },
    'inactive' => {
        data_type => 'boolean',
        description => 'return the inactive versions too ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_iss_list' } = { 
    	summary => 'retrive list of ISS',
        params => $params,
        returns => 'ARRAY[IssConfByCity]',
        };
}
# @return ARRAY[IssConfByCity]
#
sub get_iss_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/taxconf/iss';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'suffixcode'}) {
        $query_params->{'suffixcode'} = $self->{api_client}->to_query_value($args{'suffixcode'});
    }

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    # query params
    if ( exists $args{'inactive'}) {
        $query_params->{'inactive'} = $self->{api_client}->to_query_value($args{'inactive'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[IssConfByCity]', $response);
    return $_response_object;
}

#
# update_iss_conf_by_city
#
# update a ISS by City Code.
# 
# @param Number $city_code City Code (required)
# @param IssConfByCity $iss_conf_by_city The pet JSON you want to post (required)
{
    my $params = {
    'city_code' => {
        data_type => 'Number',
        description => 'City Code',
        required => '1',
    },
    'iss_conf_by_city' => {
        data_type => 'IssConfByCity',
        description => 'The pet JSON you want to post',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_iss_conf_by_city' } = { 
    	summary => 'update a ISS by City Code.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_iss_conf_by_city {
    my ($self, %args) = @_;

    # verify the required parameter 'city_code' is set
    unless (exists $args{'city_code'}) {
      croak("Missing the required parameter 'city_code' when calling update_iss_conf_by_city");
    }

    # verify the required parameter 'iss_conf_by_city' is set
    unless (exists $args{'iss_conf_by_city'}) {
      croak("Missing the required parameter 'iss_conf_by_city' when calling update_iss_conf_by_city");
    }

    # parse inputs
    my $_resource_path = '/taxconf/iss/{cityCode}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'city_code'}) {
        my $_base_variable = "{" . "cityCode" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'city_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'iss_conf_by_city'}) {
        $_body_data = $args{'iss_conf_by_city'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
