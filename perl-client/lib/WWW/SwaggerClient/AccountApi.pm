=begin comment

AvaTax Brazil

The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::AccountApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# accounts_account_id_companies_get
#
# Retrieve Companies by account
# 
# @param UUID $account_id Account ID (required)
{
    my $params = {
    'account_id' => {
        data_type => 'UUID',
        description => 'Account ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'accounts_account_id_companies_get' } = { 
    	summary => 'Retrieve Companies by account',
        params => $params,
        returns => 'ARRAY[AccountCompany]',
        };
}
# @return ARRAY[AccountCompany]
#
sub accounts_account_id_companies_get {
    my ($self, %args) = @_;

    # verify the required parameter 'account_id' is set
    unless (exists $args{'account_id'}) {
      croak("Missing the required parameter 'account_id' when calling accounts_account_id_companies_get");
    }

    # parse inputs
    my $_resource_path = '/accounts/{accountId}/companies';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'account_id'}) {
        my $_base_variable = "{" . "accountId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'account_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[AccountCompany]', $response);
    return $_response_object;
}

#
# create_account_company
#
# Create company and your data configuration
# 
# @param UUID $account_id Account ID (required)
# @param Body $body Company Code (required)
{
    my $params = {
    'account_id' => {
        data_type => 'UUID',
        description => 'Account ID',
        required => '1',
    },
    'body' => {
        data_type => 'Body',
        description => 'Company Code',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_account_company' } = { 
    	summary => 'Create company and your data configuration',
        params => $params,
        returns => 'InlineResponse201',
        };
}
# @return InlineResponse201
#
sub create_account_company {
    my ($self, %args) = @_;

    # verify the required parameter 'account_id' is set
    unless (exists $args{'account_id'}) {
      croak("Missing the required parameter 'account_id' when calling create_account_company");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling create_account_company");
    }

    # parse inputs
    my $_resource_path = '/accounts/{accountId}/companies';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'account_id'}) {
        my $_base_variable = "{" . "accountId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'account_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse201', $response);
    return $_response_object;
}

1;
