=begin comment

BR16 - API

This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::Object::Agast;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use base ("Class::Accessor", "Class::Data::Inheritable");


#
#
#
# NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
# REF: https://github.com/swagger-api/swagger-codegen
#

=begin comment

BR16 - API

This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('swagger_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new object
sub new { 
    my ($class, %args) = @_; 

	my $self = bless {}, $class;
	
	foreach my $attribute (keys %{$class->attribute_map}) {
		my $args_key = $class->attribute_map->{$attribute};
		$self->$attribute( $args{ $args_key } );
	}
	
	return $self;
}  

# return perl hash
sub to_hash {
    return decode_json(JSON->new->convert_blessed->encode( shift ));
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }
    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use swagger_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->swagger_types} ) {
    	my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[/i) { # array
            my $_subclass = substr($_type, 6, -1);
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
        	$log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);
        
    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "WWW::SwaggerClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => '',
                                  class => 'Agast',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'code' => {
    	datatype => 'string',
    	base_name => 'code',
    	description => 'Agast Code. AGAST (Avalara Goods and Services Types) are preset products with default tax definitions available to be used as provided or copied to create an specific comapany item.',
    	format => '',
    	read_only => '',
    		},
    'description' => {
    	datatype => 'string',
    	base_name => 'description',
    	description => 'Agast Description',
    	format => '',
    	read_only => '',
    		},
    'hs_code' => {
    	datatype => 'string',
    	base_name => 'hsCode',
    	description => 'harmonized code, NCM or LC 116',
    	format => '',
    	read_only => '',
    		},
    'ex' => {
    	datatype => 'int',
    	base_name => 'ex',
    	description => 'hsCode Exception for IPI tax',
    	format => '',
    	read_only => '',
    		},
    'cest' => {
    	datatype => 'string',
    	base_name => 'cest',
    	description => 'tax substitution code - Codigo especificador da Substuicao Tributaria',
    	format => '',
    	read_only => '',
    		},
    'cean' => {
    	datatype => 'string',
    	base_name => 'cean',
    	description => 'GTIN NUMBER',
    	format => '',
    	read_only => '',
    		},
    'code_type' => {
    	datatype => 'AgastCodeType',
    	base_name => 'codeType',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'cst_ipi' => {
    	datatype => 'string',
    	base_name => 'cstIPI',
    	description => 'Inform if this process is subject to IPI taxation on output process - &#39;50&#39; # Saída Tributada - &#39;51&#39; # Saída Tributável com Alíquota Zero - &#39;52&#39; # Saída Isenta - &#39;53&#39; # Saída Não-Tributada - &#39;54&#39; # Saída Imune ',
    	format => '',
    	read_only => '',
    		},
    'ipi_legal_tax_class' => {
    	datatype => 'string',
    	base_name => 'ipiLegalTaxClass',
    	description => 'Legal tax classificação for IPI (enquadramento tributário) When the process has CST IPI 52 or 54, it is mandatory to inform a Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo&#x3D;mCnJajU4BKU&#x3D; ',
    	format => '',
    	read_only => '',
    		},
    'pis_cofins_tax_reporting' => {
    	datatype => 'string',
    	base_name => 'pisCofinsTaxReporting',
    	description => 'when the company is Real Profit inform if this item is cumulative or no cumulative by default',
    	format => '',
    	read_only => '',
    		},
    'accruable_pis_taxation' => {
    	datatype => 'string',
    	base_name => 'accruablePISTaxation',
    	description => 'Inform if this item by nature is subject to PIS taxation or exempt - &#39;T&#39; # TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;N&#39; # NO TAXABLE ',
    	format => '',
    	read_only => '',
    		},
    'accruable_cofins_taxation' => {
    	datatype => 'string',
    	base_name => 'accruableCOFINSTaxation',
    	description => 'Inform if this item by nature is subject to COFINS taxation or exempt - &#39;T&#39; # TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;N&#39; # NO TAXABLE ',
    	format => '',
    	read_only => '',
    		},
    'accruable_csll_taxation' => {
    	datatype => 'string',
    	base_name => 'accruableCSLLTaxation',
    	description => 'Inform if this item by nature is subject to CSLL taxation or exempt - &#39;T&#39; # TAXABLE - &#39;E&#39; # EXEMPT ',
    	format => '',
    	read_only => '',
    		},
    'iss_dueat_destination' => {
    	datatype => 'boolean',
    	base_name => 'issDueatDestination',
    	description => 'for service items with City Jurisdiction, inform where the ISS tax is due',
    	format => '',
    	read_only => '',
    		},
    'pis_cofins_credit_not_allowed' => {
    	datatype => 'boolean',
    	base_name => 'pisCofinsCreditNotAllowed',
    	description => 'on Real Profit Purchase transaction, inform if this item allows tax credits when it is non-cumulative',
    	format => '',
    	read_only => '',
    		},
    'iss_taxation' => {
    	datatype => 'string',
    	base_name => 'issTaxation',
    	description => '- &#39;T&#39; # TAXABLE - TRIBUTÁVEL INCLUSIVE PARA EXPORTAÇÃO&#39; - &#39;E&#39; # TAXABLE WITH EXEMPTION FOR EXPORTS - ISENTO PARA SERVIÇOS PRESTADOS AO EXTERIOR (DEFAULT) - &#39;F&#39; # EXEMPT - &#39;A&#39; # SUSPENDED FOR ADMINISTRATIVE REASON - &#39;L&#39; # SUSPENDED FOR LEGAL DECISION - &#39;I&#39; # IMMUNE ',
    	format => '',
    	read_only => '',
    		},
    'federal_tax_rate' => {
    	datatype => 'ARRAY[TaxTypeRate]',
    	base_name => 'federalTaxRate',
    	description => 'This is an array of tax object related to an agast.',
    	format => '',
    	read_only => '',
    		},
    'special_product_class' => {
    	datatype => 'string',
    	base_name => 'specialProductClass',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'icms_conf' => {
    	datatype => 'ARRAY[AgastIcmsConf]',
    	base_name => 'icmsConf',
    	description => 'One per State',
    	format => '',
    	read_only => '',
    		},
});

__PACKAGE__->swagger_types( {
    'code' => 'string',
    'description' => 'string',
    'hs_code' => 'string',
    'ex' => 'int',
    'cest' => 'string',
    'cean' => 'string',
    'code_type' => 'AgastCodeType',
    'cst_ipi' => 'string',
    'ipi_legal_tax_class' => 'string',
    'pis_cofins_tax_reporting' => 'string',
    'accruable_pis_taxation' => 'string',
    'accruable_cofins_taxation' => 'string',
    'accruable_csll_taxation' => 'string',
    'iss_dueat_destination' => 'boolean',
    'pis_cofins_credit_not_allowed' => 'boolean',
    'iss_taxation' => 'string',
    'federal_tax_rate' => 'ARRAY[TaxTypeRate]',
    'special_product_class' => 'string',
    'icms_conf' => 'ARRAY[AgastIcmsConf]'
} );

__PACKAGE__->attribute_map( {
    'code' => 'code',
    'description' => 'description',
    'hs_code' => 'hsCode',
    'ex' => 'ex',
    'cest' => 'cest',
    'cean' => 'cean',
    'code_type' => 'codeType',
    'cst_ipi' => 'cstIPI',
    'ipi_legal_tax_class' => 'ipiLegalTaxClass',
    'pis_cofins_tax_reporting' => 'pisCofinsTaxReporting',
    'accruable_pis_taxation' => 'accruablePISTaxation',
    'accruable_cofins_taxation' => 'accruableCOFINSTaxation',
    'accruable_csll_taxation' => 'accruableCSLLTaxation',
    'iss_dueat_destination' => 'issDueatDestination',
    'pis_cofins_credit_not_allowed' => 'pisCofinsCreditNotAllowed',
    'iss_taxation' => 'issTaxation',
    'federal_tax_rate' => 'federalTaxRate',
    'special_product_class' => 'specialProductClass',
    'icms_conf' => 'icmsConf'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
