=begin comment

BR16 - API

This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::TaxConfICMSApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# create_icmsconfstate
#
# create a new ICMS Configuration
# 
# @param string $state Brazilian State (required)
# @param IcmsConfByState $icms_conf_state The pet JSON you want to post (required)
{
    my $params = {
    'state' => {
        data_type => 'string',
        description => 'Brazilian State',
        required => '1',
    },
    'icms_conf_state' => {
        data_type => 'IcmsConfByState',
        description => 'The pet JSON you want to post',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_icmsconfstate' } = { 
    	summary => 'create a new ICMS Configuration',
        params => $params,
        returns => 'InlineResponse201',
        };
}
# @return InlineResponse201
#
sub create_icmsconfstate {
    my ($self, %args) = @_;

    # verify the required parameter 'state' is set
    unless (exists $args{'state'}) {
      croak("Missing the required parameter 'state' when calling create_icmsconfstate");
    }

    # verify the required parameter 'icms_conf_state' is set
    unless (exists $args{'icms_conf_state'}) {
      croak("Missing the required parameter 'icms_conf_state' when calling create_icmsconfstate");
    }

    # parse inputs
    my $_resource_path = '/taxconf/icms/{state}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'state'}) {
        my $_base_variable = "{" . "state" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'state'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'icms_conf_state'}) {
        $_body_data = $args{'icms_conf_state'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse201', $response);
    return $_response_object;
}

#
# delete_icms_conf
#
# disable a ICMS by State.
# 
# @param string $state Brazilian State (required)
# @param string $code ICMS Code (required)
{
    my $params = {
    'state' => {
        data_type => 'string',
        description => 'Brazilian State',
        required => '1',
    },
    'code' => {
        data_type => 'string',
        description => 'ICMS Code',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_icms_conf' } = { 
    	summary => 'disable a ICMS by State.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_icms_conf {
    my ($self, %args) = @_;

    # verify the required parameter 'state' is set
    unless (exists $args{'state'}) {
      croak("Missing the required parameter 'state' when calling delete_icms_conf");
    }

    # verify the required parameter 'code' is set
    unless (exists $args{'code'}) {
      croak("Missing the required parameter 'code' when calling delete_icms_conf");
    }

    # parse inputs
    my $_resource_path = '/taxconf/icms/{state}/{code}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'state'}) {
        my $_base_variable = "{" . "state" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'state'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'code'}) {
        my $_base_variable = "{" . "code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_icms_conf_by_state
#
# get ICMS information by State.
# 
# @param string $state Brazilian State (required)
# @param string $code ICMS Code (required)
{
    my $params = {
    'state' => {
        data_type => 'string',
        description => 'Brazilian State',
        required => '1',
    },
    'code' => {
        data_type => 'string',
        description => 'ICMS Code',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_icms_conf_by_state' } = { 
    	summary => 'get ICMS information by State.',
        params => $params,
        returns => 'ARRAY[IcmsConfByState]',
        };
}
# @return ARRAY[IcmsConfByState]
#
sub get_icms_conf_by_state {
    my ($self, %args) = @_;

    # verify the required parameter 'state' is set
    unless (exists $args{'state'}) {
      croak("Missing the required parameter 'state' when calling get_icms_conf_by_state");
    }

    # verify the required parameter 'code' is set
    unless (exists $args{'code'}) {
      croak("Missing the required parameter 'code' when calling get_icms_conf_by_state");
    }

    # parse inputs
    my $_resource_path = '/taxconf/icms/{state}/{code}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'state'}) {
        my $_base_variable = "{" . "state" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'state'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'code'}) {
        my $_base_variable = "{" . "code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[IcmsConfByState]', $response);
    return $_response_object;
}

#
# get_icms_list
#
# retrive list of ICMS.
# 
# @param string $state Brazilian State (required)
# @param string $suffixcode Identify this ICMS (optional)
# @param DateTime $date When informed return valid version configuration for this date (optional)
# @param boolean $inactive return the inactive versions too (optional)
{
    my $params = {
    'state' => {
        data_type => 'string',
        description => 'Brazilian State',
        required => '1',
    },
    'suffixcode' => {
        data_type => 'string',
        description => 'Identify this ICMS',
        required => '0',
    },
    'date' => {
        data_type => 'DateTime',
        description => 'When informed return valid version configuration for this date',
        required => '0',
    },
    'inactive' => {
        data_type => 'boolean',
        description => 'return the inactive versions too',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_icms_list' } = { 
    	summary => 'retrive list of ICMS.',
        params => $params,
        returns => 'ARRAY[IcmsConfByState]',
        };
}
# @return ARRAY[IcmsConfByState]
#
sub get_icms_list {
    my ($self, %args) = @_;

    # verify the required parameter 'state' is set
    unless (exists $args{'state'}) {
      croak("Missing the required parameter 'state' when calling get_icms_list");
    }

    # parse inputs
    my $_resource_path = '/taxconf/icms/{state}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'suffixcode'}) {
        $query_params->{'suffixcode'} = $self->{api_client}->to_query_value($args{'suffixcode'});
    }

    # query params
    if ( exists $args{'date'}) {
        $query_params->{'date'} = $self->{api_client}->to_query_value($args{'date'});
    }

    # query params
    if ( exists $args{'inactive'}) {
        $query_params->{'inactive'} = $self->{api_client}->to_query_value($args{'inactive'});
    }

    # path params
    if ( exists $args{'state'}) {
        my $_base_variable = "{" . "state" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'state'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[IcmsConfByState]', $response);
    return $_response_object;
}

#
# get_icms_list_0
#
# retrive list of ICMS.
# 
# @param string $text Search for codes (required)
# @param string $state Filter for states (optional)
{
    my $params = {
    'text' => {
        data_type => 'string',
        description => 'Search for codes',
        required => '1',
    },
    'state' => {
        data_type => 'string',
        description => 'Filter for states',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_icms_list_0' } = { 
    	summary => 'retrive list of ICMS.',
        params => $params,
        returns => 'ARRAY[IcmsConfByState]',
        };
}
# @return ARRAY[IcmsConfByState]
#
sub get_icms_list_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'text' is set
    unless (exists $args{'text'}) {
      croak("Missing the required parameter 'text' when calling get_icms_list_0");
    }

    # parse inputs
    my $_resource_path = '/taxconf/icms-search/';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    # query params
    if ( exists $args{'state'}) {
        $query_params->{'state'} = $self->{api_client}->to_query_value($args{'state'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[IcmsConfByState]', $response);
    return $_response_object;
}

#
# update_icmsconfstate
#
# update a IcmsConf State,
# 
# @param string $state Brazilian State (required)
# @param string $code ICMS Code (required)
# @param IcmsConfByState $icms_conf_state The pet JSON you want to post (required)
{
    my $params = {
    'state' => {
        data_type => 'string',
        description => 'Brazilian State',
        required => '1',
    },
    'code' => {
        data_type => 'string',
        description => 'ICMS Code',
        required => '1',
    },
    'icms_conf_state' => {
        data_type => 'IcmsConfByState',
        description => 'The pet JSON you want to post',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_icmsconfstate' } = { 
    	summary => 'update a IcmsConf State,',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_icmsconfstate {
    my ($self, %args) = @_;

    # verify the required parameter 'state' is set
    unless (exists $args{'state'}) {
      croak("Missing the required parameter 'state' when calling update_icmsconfstate");
    }

    # verify the required parameter 'code' is set
    unless (exists $args{'code'}) {
      croak("Missing the required parameter 'code' when calling update_icmsconfstate");
    }

    # verify the required parameter 'icms_conf_state' is set
    unless (exists $args{'icms_conf_state'}) {
      croak("Missing the required parameter 'icms_conf_state' when calling update_icmsconfstate");
    }

    # parse inputs
    my $_resource_path = '/taxconf/icms/{state}/{code}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'state'}) {
        my $_base_variable = "{" . "state" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'state'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'code'}) {
        my $_base_variable = "{" . "code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'icms_conf_state'}) {
        $_body_data = $args{'icms_conf_state'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
