=begin comment

BR16 - API

This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::CompanyAGASTApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# companies_company_id_agasts_code_get
#
# 
# 
# @param UUID $company_id Company ID (required)
# @param string $code Agast Code (required)
# @param string $parent Agast parent code, means that this agast is a specialization of parent agast  (optional)
{
    my $params = {
    'company_id' => {
        data_type => 'UUID',
        description => 'Company ID',
        required => '1',
    },
    'code' => {
        data_type => 'string',
        description => 'Agast Code',
        required => '1',
    },
    'parent' => {
        data_type => 'string',
        description => 'Agast parent code, means that this agast is a specialization of parent agast ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'companies_company_id_agasts_code_get' } = { 
    	summary => '',
        params => $params,
        returns => 'CustomAgast',
        };
}
# @return CustomAgast
#
sub companies_company_id_agasts_code_get {
    my ($self, %args) = @_;

    # verify the required parameter 'company_id' is set
    unless (exists $args{'company_id'}) {
      croak("Missing the required parameter 'company_id' when calling companies_company_id_agasts_code_get");
    }

    # verify the required parameter 'code' is set
    unless (exists $args{'code'}) {
      croak("Missing the required parameter 'code' when calling companies_company_id_agasts_code_get");
    }

    # parse inputs
    my $_resource_path = '/companies/{companyId}/agasts/{code}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'parent'}) {
        $query_params->{'parent'} = $self->{api_client}->to_query_value($args{'parent'});
    }

    # path params
    if ( exists $args{'company_id'}) {
        my $_base_variable = "{" . "companyId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'company_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'code'}) {
        my $_base_variable = "{" . "code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CustomAgast', $response);
    return $_response_object;
}

#
# companies_company_id_agasts_get
#
# 
# 
# @param UUID $company_id Company ID (required)
# @param string $text Text query (optional)
# @param int $x_pagination_limit The per page limit. Currently set to 10 but subject to change at any time (max 100). (optional, default to 10)
# @param int $x_pagination_current_page The current page. Defaults to 1. (optional, default to 1)
# @param string $x_pagination_sort  (optional)
# @param string $agast Custom Agast Code (optional)
# @param string $parent Agast Code (optional)
{
    my $params = {
    'company_id' => {
        data_type => 'UUID',
        description => 'Company ID',
        required => '1',
    },
    'text' => {
        data_type => 'string',
        description => 'Text query',
        required => '0',
    },
    'x_pagination_limit' => {
        data_type => 'int',
        description => 'The per page limit. Currently set to 10 but subject to change at any time (max 100).',
        required => '0',
    },
    'x_pagination_current_page' => {
        data_type => 'int',
        description => 'The current page. Defaults to 1.',
        required => '0',
    },
    'x_pagination_sort' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'agast' => {
        data_type => 'string',
        description => 'Custom Agast Code',
        required => '0',
    },
    'parent' => {
        data_type => 'string',
        description => 'Agast Code',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'companies_company_id_agasts_get' } = { 
    	summary => '',
        params => $params,
        returns => 'ARRAY[InlineResponse2001]',
        };
}
# @return ARRAY[InlineResponse2001]
#
sub companies_company_id_agasts_get {
    my ($self, %args) = @_;

    # verify the required parameter 'company_id' is set
    unless (exists $args{'company_id'}) {
      croak("Missing the required parameter 'company_id' when calling companies_company_id_agasts_get");
    }

    # parse inputs
    my $_resource_path = '/companies/{companyId}/agasts';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    # query params
    if ( exists $args{'agast'}) {
        $query_params->{'agast'} = $self->{api_client}->to_query_value($args{'agast'});
    }

    # query params
    if ( exists $args{'parent'}) {
        $query_params->{'parent'} = $self->{api_client}->to_query_value($args{'parent'});
    }

    # header params
    if ( exists $args{'x_pagination_limit'}) {
        $header_params->{'X-Pagination-Limit'} = $self->{api_client}->to_header_value($args{'x_pagination_limit'});
    }

    # header params
    if ( exists $args{'x_pagination_current_page'}) {
        $header_params->{'X-Pagination-Current-Page'} = $self->{api_client}->to_header_value($args{'x_pagination_current_page'});
    }

    # header params
    if ( exists $args{'x_pagination_sort'}) {
        $header_params->{'X-Pagination-Sort'} = $self->{api_client}->to_header_value($args{'x_pagination_sort'});
    }

    # path params
    if ( exists $args{'company_id'}) {
        my $_base_variable = "{" . "companyId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'company_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[InlineResponse2001]', $response);
    return $_response_object;
}

#
# create_custom_agast
#
# Create custom agast for one company
# 
# @param UUID $company_id Company ID (required)
# @param CustomAgast $body Transaction Message (required)
# @param string $text Text query (optional)
{
    my $params = {
    'company_id' => {
        data_type => 'UUID',
        description => 'Company ID',
        required => '1',
    },
    'body' => {
        data_type => 'CustomAgast',
        description => 'Transaction Message',
        required => '1',
    },
    'text' => {
        data_type => 'string',
        description => 'Text query',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_custom_agast' } = { 
    	summary => 'Create custom agast for one company',
        params => $params,
        returns => 'InlineResponse201',
        };
}
# @return InlineResponse201
#
sub create_custom_agast {
    my ($self, %args) = @_;

    # verify the required parameter 'company_id' is set
    unless (exists $args{'company_id'}) {
      croak("Missing the required parameter 'company_id' when calling create_custom_agast");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling create_custom_agast");
    }

    # parse inputs
    my $_resource_path = '/companies/{companyId}/agasts';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    # path params
    if ( exists $args{'company_id'}) {
        my $_base_variable = "{" . "companyId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'company_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('InlineResponse201', $response);
    return $_response_object;
}

#
# delete_agast
#
# 
# 
# @param UUID $company_id Company ID (required)
# @param string $code Agast Code (required)
{
    my $params = {
    'company_id' => {
        data_type => 'UUID',
        description => 'Company ID',
        required => '1',
    },
    'code' => {
        data_type => 'string',
        description => 'Agast Code',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_agast' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_agast {
    my ($self, %args) = @_;

    # verify the required parameter 'company_id' is set
    unless (exists $args{'company_id'}) {
      croak("Missing the required parameter 'company_id' when calling delete_agast");
    }

    # verify the required parameter 'code' is set
    unless (exists $args{'code'}) {
      croak("Missing the required parameter 'code' when calling delete_agast");
    }

    # parse inputs
    my $_resource_path = '/companies/{companyId}/agasts/{code}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'company_id'}) {
        my $_base_variable = "{" . "companyId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'company_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'code'}) {
        my $_base_variable = "{" . "code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_custom_agast
#
# Update custom agast for one company
# 
# @param UUID $company_id Company ID (required)
# @param string $code Agast Code (required)
# @param CustomAgast $body Transaction Message (required)
{
    my $params = {
    'company_id' => {
        data_type => 'UUID',
        description => 'Company ID',
        required => '1',
    },
    'code' => {
        data_type => 'string',
        description => 'Agast Code',
        required => '1',
    },
    'body' => {
        data_type => 'CustomAgast',
        description => 'Transaction Message',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_custom_agast' } = { 
    	summary => 'Update custom agast for one company',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_custom_agast {
    my ($self, %args) = @_;

    # verify the required parameter 'company_id' is set
    unless (exists $args{'company_id'}) {
      croak("Missing the required parameter 'company_id' when calling update_custom_agast");
    }

    # verify the required parameter 'code' is set
    unless (exists $args{'code'}) {
      croak("Missing the required parameter 'code' when calling update_custom_agast");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling update_custom_agast");
    }

    # parse inputs
    my $_resource_path = '/companies/{companyId}/agasts/{code}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'company_id'}) {
        my $_base_variable = "{" . "companyId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'company_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'code'}) {
        my $_base_variable = "{" . "code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
