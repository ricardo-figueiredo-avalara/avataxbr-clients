/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.api;

import io.swagger.model.Message;
import io.swagger.model.PaymentTransactionIn;
import io.swagger.model.PaymentTransactionOut;
import io.swagger.model.PurchaseTransactionIn;
import io.swagger.model.PurchaseTransactionOut;
import io.swagger.model.ReceiptTransactionIn;
import io.swagger.model.ReceiptTransactionOut;
import io.swagger.model.SalesTransactionIn;
import io.swagger.model.SalesTransactionOut;
import io.swagger.model.StateTransition;
import io.swagger.model.ValidationError;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * API tests for ServiceTransactionsApi
 */
public class ServiceTransactionsApiTest {


    private ServiceTransactionsApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("https://br16-dev-app03.br.avalara.com/v2", ServiceTransactionsApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    
    /**
     * Retrieve transactions
     *
     * Retrieve a single transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetTest() {
        String authorization = null;
        String accountId = null;
        String companyCode = null;
        String transactionType = null;
        String documentCode = null;
	// response = api.transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(authorization, accountId, companyCode, transactionType, documentCode);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Transaction State Transition
     *
     * Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostTest() {
        String authorization = null;
        String accountId = null;
        String companyCode = null;
        String transactionType = null;
        String documentCode = null;
        StateTransition body = null;
	// response = api.transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost(authorization, accountId, companyCode, transactionType, documentCode, body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Retrieve transactions
     *
     * Retrieve a list of transactions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetTest() {
        String authorization = null;
        String accountId = null;
        String companyCode = null;
        String transactionType = null;
	// response = api.transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(authorization, accountId, companyCode, transactionType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Calculation Method
     *
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsservicePaymentPostTest() {
        String authorization = null;
        PaymentTransactionIn body = null;
	//PaymentTransactionOut response = api.transactionsservicePaymentPost(authorization, body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Calculation Method
     *
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsservicePurchasePostTest() {
        String authorization = null;
        PurchaseTransactionIn body = null;
	//PurchaseTransactionOut response = api.transactionsservicePurchasePost(authorization, body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Calculation Method
     *
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsserviceReceiptPostTest() {
        String authorization = null;
        ReceiptTransactionIn body = null;
	//ReceiptTransactionOut response = api.transactionsserviceReceiptPost(authorization, body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Calculation Method
     *
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsserviceSalesPostTest() {
        String authorization = null;
        SalesTransactionIn body = null;
	//SalesTransactionOut response = api.transactionsserviceSalesPost(authorization, body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
}
