/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.api;

import io.swagger.model.Message;
import io.swagger.model.PaymentTransactionIn;
import io.swagger.model.PaymentTransactionOut;
import io.swagger.model.PurchaseTransactionIn;
import io.swagger.model.PurchaseTransactionOut;
import io.swagger.model.ReceiptTransactionIn;
import io.swagger.model.ReceiptTransactionOut;
import io.swagger.model.SalesTransactionIn;
import io.swagger.model.SalesTransactionOut;
import io.swagger.model.ValidationError;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * API tests for ServiceCalculationsApi
 */
public class ServiceCalculationsApiTest {


    private ServiceCalculationsApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("https://br16-dev-app03.br.avalara.com/v2", ServiceCalculationsApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    
    /**
     * Retrieve transactions
     *
     * Retrieve a single transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetTest() {
        String authorization = null;
        String accountId = null;
        String companyCode = null;
        String transactionType = null;
        String documentCode = null;
	// response = api.calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(authorization, accountId, companyCode, transactionType, documentCode);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Promote a calculation to transaction
     *
     * Promote a calculation to transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostTest() {
        String authorization = null;
        String accountId = null;
        String companyCode = null;
        String transactionType = null;
        String documentCode = null;
	// response = api.calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost(authorization, accountId, companyCode, transactionType, documentCode);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Retrieve transactions
     *
     * Retrieve a list of transactions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetTest() {
        String authorization = null;
        String accountId = null;
        String companyCode = null;
        String transactionType = null;
	// response = api.calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(authorization, accountId, companyCode, transactionType);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Calculation Method
     *
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void calculationsservicePaymentPostTest() {
        String authorization = null;
        PaymentTransactionIn body = null;
	//PaymentTransactionOut response = api.calculationsservicePaymentPost(authorization, body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Calculation Method
     *
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void calculationsservicePurchasePostTest() {
        String authorization = null;
        PurchaseTransactionIn body = null;
	//PurchaseTransactionOut response = api.calculationsservicePurchasePost(authorization, body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Calculation Method
     *
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void calculationsserviceReceiptPostTest() {
        String authorization = null;
        ReceiptTransactionIn body = null;
	//ReceiptTransactionOut response = api.calculationsserviceReceiptPost(authorization, body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Calculation Method
     *
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void calculationsserviceSalesPostTest() {
        String authorization = null;
        SalesTransactionIn body = null;
	//SalesTransactionOut response = api.calculationsserviceSalesPost(authorization, body);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
}
