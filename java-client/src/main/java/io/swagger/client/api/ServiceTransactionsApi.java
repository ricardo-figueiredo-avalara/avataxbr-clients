/*
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Message;
import io.swagger.client.model.PaymentTransactionIn;
import io.swagger.client.model.PaymentTransactionOut;
import io.swagger.client.model.PurchaseTransactionIn;
import io.swagger.client.model.PurchaseTransactionOut;
import io.swagger.client.model.ReceiptTransactionIn;
import io.swagger.client.model.ReceiptTransactionOut;
import io.swagger.client.model.SalesTransactionIn;
import io.swagger.client.model.SalesTransactionOut;
import io.swagger.client.model.StateTransition;
import io.swagger.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServiceTransactionsApi {
    private ApiClient apiClient;

    public ServiceTransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceTransactionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet */
    private com.squareup.okhttp.Call transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetCall(String authorization, String accountId, String companyCode, String transactionType, String documentCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "companyCode" + "\\}", apiClient.escapeString(companyCode.toString()))
        .replaceAll("\\{" + "transactionType" + "\\}", apiClient.escapeString(transactionType.toString()))
        .replaceAll("\\{" + "documentCode" + "\\}", apiClient.escapeString(documentCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetValidateBeforeCall(String authorization, String accountId, String companyCode, String transactionType, String documentCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(Async)");
        }
        
        // verify the required parameter 'companyCode' is set
        if (companyCode == null) {
            throw new ApiException("Missing the required parameter 'companyCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(Async)");
        }
        
        // verify the required parameter 'transactionType' is set
        if (transactionType == null) {
            throw new ApiException("Missing the required parameter 'transactionType' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(Async)");
        }
        
        // verify the required parameter 'documentCode' is set
        if (documentCode == null) {
            throw new ApiException("Missing the required parameter 'documentCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetCall(authorization, accountId, companyCode, transactionType, documentCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve transactions
     * Retrieve a single transaction
     * @param authorization Bearer {auth} (required)
     * @param accountId Account ID (required)
     * @param companyCode Company Code (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param documentCode Document Code (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(String authorization, String accountId, String companyCode, String transactionType, String documentCode) throws ApiException {
        transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithHttpInfo(authorization, accountId, companyCode, transactionType, documentCode);
    }

    /**
     * Retrieve transactions
     * Retrieve a single transaction
     * @param authorization Bearer {auth} (required)
     * @param accountId Account ID (required)
     * @param companyCode Company Code (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param documentCode Document Code (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithHttpInfo(String authorization, String accountId, String companyCode, String transactionType, String documentCode) throws ApiException {
        com.squareup.okhttp.Call call = transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetValidateBeforeCall(authorization, accountId, companyCode, transactionType, documentCode, null, null);
        return apiClient.execute(call);
    }

    /**
     * Retrieve transactions (asynchronously)
     * Retrieve a single transaction
     * @param authorization Bearer {auth} (required)
     * @param accountId Account ID (required)
     * @param companyCode Company Code (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param documentCode Document Code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetAsync(String authorization, String accountId, String companyCode, String transactionType, String documentCode, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetValidateBeforeCall(authorization, accountId, companyCode, transactionType, documentCode, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost */
    private com.squareup.okhttp.Call transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostCall(String authorization, String accountId, String companyCode, String transactionType, String documentCode, StateTransition body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/stateTransitions".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "companyCode" + "\\}", apiClient.escapeString(companyCode.toString()))
        .replaceAll("\\{" + "transactionType" + "\\}", apiClient.escapeString(transactionType.toString()))
        .replaceAll("\\{" + "documentCode" + "\\}", apiClient.escapeString(documentCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostValidateBeforeCall(String authorization, String accountId, String companyCode, String transactionType, String documentCode, StateTransition body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost(Async)");
        }
        
        // verify the required parameter 'companyCode' is set
        if (companyCode == null) {
            throw new ApiException("Missing the required parameter 'companyCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost(Async)");
        }
        
        // verify the required parameter 'transactionType' is set
        if (transactionType == null) {
            throw new ApiException("Missing the required parameter 'transactionType' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost(Async)");
        }
        
        // verify the required parameter 'documentCode' is set
        if (documentCode == null) {
            throw new ApiException("Missing the required parameter 'documentCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostCall(authorization, accountId, companyCode, transactionType, documentCode, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Transaction State Transition
     * Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
     * @param authorization Bearer {auth} (required)
     * @param accountId Account ID (required)
     * @param companyCode Company Code (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param documentCode Document Code (required)
     * @param body Transaction Message (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost(String authorization, String accountId, String companyCode, String transactionType, String documentCode, StateTransition body) throws ApiException {
        transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostWithHttpInfo(authorization, accountId, companyCode, transactionType, documentCode, body);
    }

    /**
     * Transaction State Transition
     * Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
     * @param authorization Bearer {auth} (required)
     * @param accountId Account ID (required)
     * @param companyCode Company Code (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param documentCode Document Code (required)
     * @param body Transaction Message (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostWithHttpInfo(String authorization, String accountId, String companyCode, String transactionType, String documentCode, StateTransition body) throws ApiException {
        com.squareup.okhttp.Call call = transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostValidateBeforeCall(authorization, accountId, companyCode, transactionType, documentCode, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Transaction State Transition (asynchronously)
     * Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
     * @param authorization Bearer {auth} (required)
     * @param accountId Account ID (required)
     * @param companyCode Company Code (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param documentCode Document Code (required)
     * @param body Transaction Message (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostAsync(String authorization, String accountId, String companyCode, String transactionType, String documentCode, StateTransition body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostValidateBeforeCall(authorization, accountId, companyCode, transactionType, documentCode, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet */
    private com.squareup.okhttp.Call transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetCall(String authorization, String accountId, String companyCode, String transactionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "companyCode" + "\\}", apiClient.escapeString(companyCode.toString()))
        .replaceAll("\\{" + "transactionType" + "\\}", apiClient.escapeString(transactionType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetValidateBeforeCall(String authorization, String accountId, String companyCode, String transactionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(Async)");
        }
        
        // verify the required parameter 'companyCode' is set
        if (companyCode == null) {
            throw new ApiException("Missing the required parameter 'companyCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(Async)");
        }
        
        // verify the required parameter 'transactionType' is set
        if (transactionType == null) {
            throw new ApiException("Missing the required parameter 'transactionType' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetCall(authorization, accountId, companyCode, transactionType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve transactions
     * Retrieve a list of transactions
     * @param authorization Bearer {auth} (required)
     * @param accountId Account ID (required)
     * @param companyCode Company Code (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(String authorization, String accountId, String companyCode, String transactionType) throws ApiException {
        transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithHttpInfo(authorization, accountId, companyCode, transactionType);
    }

    /**
     * Retrieve transactions
     * Retrieve a list of transactions
     * @param authorization Bearer {auth} (required)
     * @param accountId Account ID (required)
     * @param companyCode Company Code (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithHttpInfo(String authorization, String accountId, String companyCode, String transactionType) throws ApiException {
        com.squareup.okhttp.Call call = transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetValidateBeforeCall(authorization, accountId, companyCode, transactionType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Retrieve transactions (asynchronously)
     * Retrieve a list of transactions
     * @param authorization Bearer {auth} (required)
     * @param accountId Account ID (required)
     * @param companyCode Company Code (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetAsync(String authorization, String accountId, String companyCode, String transactionType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetValidateBeforeCall(authorization, accountId, companyCode, transactionType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for transactionsservicePaymentPost */
    private com.squareup.okhttp.Call transactionsservicePaymentPostCall(String authorization, PaymentTransactionIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/transactions?service-payment".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transactionsservicePaymentPostValidateBeforeCall(String authorization, PaymentTransactionIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling transactionsservicePaymentPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling transactionsservicePaymentPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transactionsservicePaymentPostCall(authorization, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @return PaymentTransactionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentTransactionOut transactionsservicePaymentPost(String authorization, PaymentTransactionIn body) throws ApiException {
        ApiResponse<PaymentTransactionOut> resp = transactionsservicePaymentPostWithHttpInfo(authorization, body);
        return resp.getData();
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @return ApiResponse&lt;PaymentTransactionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentTransactionOut> transactionsservicePaymentPostWithHttpInfo(String authorization, PaymentTransactionIn body) throws ApiException {
        com.squareup.okhttp.Call call = transactionsservicePaymentPostValidateBeforeCall(authorization, body, null, null);
        Type localVarReturnType = new TypeToken<PaymentTransactionOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculation Method (asynchronously)
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transactionsservicePaymentPostAsync(String authorization, PaymentTransactionIn body, final ApiCallback<PaymentTransactionOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transactionsservicePaymentPostValidateBeforeCall(authorization, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentTransactionOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for transactionsservicePurchasePost */
    private com.squareup.okhttp.Call transactionsservicePurchasePostCall(String authorization, PurchaseTransactionIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/transactions?service-purchase".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transactionsservicePurchasePostValidateBeforeCall(String authorization, PurchaseTransactionIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling transactionsservicePurchasePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling transactionsservicePurchasePost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transactionsservicePurchasePostCall(authorization, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @return PurchaseTransactionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PurchaseTransactionOut transactionsservicePurchasePost(String authorization, PurchaseTransactionIn body) throws ApiException {
        ApiResponse<PurchaseTransactionOut> resp = transactionsservicePurchasePostWithHttpInfo(authorization, body);
        return resp.getData();
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @return ApiResponse&lt;PurchaseTransactionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PurchaseTransactionOut> transactionsservicePurchasePostWithHttpInfo(String authorization, PurchaseTransactionIn body) throws ApiException {
        com.squareup.okhttp.Call call = transactionsservicePurchasePostValidateBeforeCall(authorization, body, null, null);
        Type localVarReturnType = new TypeToken<PurchaseTransactionOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculation Method (asynchronously)
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transactionsservicePurchasePostAsync(String authorization, PurchaseTransactionIn body, final ApiCallback<PurchaseTransactionOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transactionsservicePurchasePostValidateBeforeCall(authorization, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PurchaseTransactionOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for transactionsserviceReceiptPost */
    private com.squareup.okhttp.Call transactionsserviceReceiptPostCall(String authorization, ReceiptTransactionIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/transactions?service-receipt".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transactionsserviceReceiptPostValidateBeforeCall(String authorization, ReceiptTransactionIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling transactionsserviceReceiptPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling transactionsserviceReceiptPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transactionsserviceReceiptPostCall(authorization, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @return ReceiptTransactionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReceiptTransactionOut transactionsserviceReceiptPost(String authorization, ReceiptTransactionIn body) throws ApiException {
        ApiResponse<ReceiptTransactionOut> resp = transactionsserviceReceiptPostWithHttpInfo(authorization, body);
        return resp.getData();
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @return ApiResponse&lt;ReceiptTransactionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReceiptTransactionOut> transactionsserviceReceiptPostWithHttpInfo(String authorization, ReceiptTransactionIn body) throws ApiException {
        com.squareup.okhttp.Call call = transactionsserviceReceiptPostValidateBeforeCall(authorization, body, null, null);
        Type localVarReturnType = new TypeToken<ReceiptTransactionOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculation Method (asynchronously)
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transactionsserviceReceiptPostAsync(String authorization, ReceiptTransactionIn body, final ApiCallback<ReceiptTransactionOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transactionsserviceReceiptPostValidateBeforeCall(authorization, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReceiptTransactionOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for transactionsserviceSalesPost */
    private com.squareup.okhttp.Call transactionsserviceSalesPostCall(String authorization, SalesTransactionIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/transactions?service-sales".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transactionsserviceSalesPostValidateBeforeCall(String authorization, SalesTransactionIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling transactionsserviceSalesPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling transactionsserviceSalesPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = transactionsserviceSalesPostCall(authorization, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @return SalesTransactionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SalesTransactionOut transactionsserviceSalesPost(String authorization, SalesTransactionIn body) throws ApiException {
        ApiResponse<SalesTransactionOut> resp = transactionsserviceSalesPostWithHttpInfo(authorization, body);
        return resp.getData();
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @return ApiResponse&lt;SalesTransactionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SalesTransactionOut> transactionsserviceSalesPostWithHttpInfo(String authorization, SalesTransactionIn body) throws ApiException {
        com.squareup.okhttp.Call call = transactionsserviceSalesPostValidateBeforeCall(authorization, body, null, null);
        Type localVarReturnType = new TypeToken<SalesTransactionOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculation Method (asynchronously)
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transactionsserviceSalesPostAsync(String authorization, SalesTransactionIn body, final ApiCallback<SalesTransactionOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transactionsserviceSalesPostValidateBeforeCall(authorization, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SalesTransactionOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
