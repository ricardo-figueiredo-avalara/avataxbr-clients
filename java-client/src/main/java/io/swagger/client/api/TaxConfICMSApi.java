/*
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.IcmsConfByState;
import io.swagger.client.model.InlineResponse201;
import org.joda.time.LocalDate;
import io.swagger.client.model.Message;
import io.swagger.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaxConfICMSApi {
    private ApiClient apiClient;

    public TaxConfICMSApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaxConfICMSApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createIcmsconfstate */
    private com.squareup.okhttp.Call createIcmsconfstateCall(String authorization, String state, IcmsConfByState icmsConfState, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = icmsConfState;
        
        // create path and map variables
        String localVarPath = "/taxconf/icms/{state}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "state" + "\\}", apiClient.escapeString(state.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createIcmsconfstateValidateBeforeCall(String authorization, String state, IcmsConfByState icmsConfState, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createIcmsconfstate(Async)");
        }
        
        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling createIcmsconfstate(Async)");
        }
        
        // verify the required parameter 'icmsConfState' is set
        if (icmsConfState == null) {
            throw new ApiException("Missing the required parameter 'icmsConfState' when calling createIcmsconfstate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createIcmsconfstateCall(authorization, state, icmsConfState, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * create a new ICMS Configuration
     * 
     * @param authorization Bearer {auth} (required)
     * @param state Brazilian State (required)
     * @param icmsConfState The pet JSON you want to post (required)
     * @return InlineResponse201
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse201 createIcmsconfstate(String authorization, String state, IcmsConfByState icmsConfState) throws ApiException {
        ApiResponse<InlineResponse201> resp = createIcmsconfstateWithHttpInfo(authorization, state, icmsConfState);
        return resp.getData();
    }

    /**
     * create a new ICMS Configuration
     * 
     * @param authorization Bearer {auth} (required)
     * @param state Brazilian State (required)
     * @param icmsConfState The pet JSON you want to post (required)
     * @return ApiResponse&lt;InlineResponse201&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse201> createIcmsconfstateWithHttpInfo(String authorization, String state, IcmsConfByState icmsConfState) throws ApiException {
        com.squareup.okhttp.Call call = createIcmsconfstateValidateBeforeCall(authorization, state, icmsConfState, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * create a new ICMS Configuration (asynchronously)
     * 
     * @param authorization Bearer {auth} (required)
     * @param state Brazilian State (required)
     * @param icmsConfState The pet JSON you want to post (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createIcmsconfstateAsync(String authorization, String state, IcmsConfByState icmsConfState, final ApiCallback<InlineResponse201> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createIcmsconfstateValidateBeforeCall(authorization, state, icmsConfState, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteIcmsConf */
    private com.squareup.okhttp.Call deleteIcmsConfCall(String authorization, String state, String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/taxconf/icms/{state}/{code}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "state" + "\\}", apiClient.escapeString(state.toString()))
        .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteIcmsConfValidateBeforeCall(String authorization, String state, String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteIcmsConf(Async)");
        }
        
        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling deleteIcmsConf(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteIcmsConf(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteIcmsConfCall(authorization, state, code, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * disable a ICMS by State.
     * 
     * @param authorization Bearer {auth} (required)
     * @param state Brazilian State (required)
     * @param code ICMS Code (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteIcmsConf(String authorization, String state, String code) throws ApiException {
        deleteIcmsConfWithHttpInfo(authorization, state, code);
    }

    /**
     * disable a ICMS by State.
     * 
     * @param authorization Bearer {auth} (required)
     * @param state Brazilian State (required)
     * @param code ICMS Code (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteIcmsConfWithHttpInfo(String authorization, String state, String code) throws ApiException {
        com.squareup.okhttp.Call call = deleteIcmsConfValidateBeforeCall(authorization, state, code, null, null);
        return apiClient.execute(call);
    }

    /**
     * disable a ICMS by State. (asynchronously)
     * 
     * @param authorization Bearer {auth} (required)
     * @param state Brazilian State (required)
     * @param code ICMS Code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteIcmsConfAsync(String authorization, String state, String code, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteIcmsConfValidateBeforeCall(authorization, state, code, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getIcmsConfByState */
    private com.squareup.okhttp.Call getIcmsConfByStateCall(String authorization, String state, String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/taxconf/icms/{state}/{code}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "state" + "\\}", apiClient.escapeString(state.toString()))
        .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIcmsConfByStateValidateBeforeCall(String authorization, String state, String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getIcmsConfByState(Async)");
        }
        
        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling getIcmsConfByState(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getIcmsConfByState(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getIcmsConfByStateCall(authorization, state, code, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get ICMS information by State.
     * This operation return configurations of icms that match with parameters queries 
     * @param authorization Bearer {auth} (required)
     * @param state Brazilian State (required)
     * @param code ICMS Code (required)
     * @return List&lt;IcmsConfByState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IcmsConfByState> getIcmsConfByState(String authorization, String state, String code) throws ApiException {
        ApiResponse<List<IcmsConfByState>> resp = getIcmsConfByStateWithHttpInfo(authorization, state, code);
        return resp.getData();
    }

    /**
     * get ICMS information by State.
     * This operation return configurations of icms that match with parameters queries 
     * @param authorization Bearer {auth} (required)
     * @param state Brazilian State (required)
     * @param code ICMS Code (required)
     * @return ApiResponse&lt;List&lt;IcmsConfByState&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IcmsConfByState>> getIcmsConfByStateWithHttpInfo(String authorization, String state, String code) throws ApiException {
        com.squareup.okhttp.Call call = getIcmsConfByStateValidateBeforeCall(authorization, state, code, null, null);
        Type localVarReturnType = new TypeToken<List<IcmsConfByState>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get ICMS information by State. (asynchronously)
     * This operation return configurations of icms that match with parameters queries 
     * @param authorization Bearer {auth} (required)
     * @param state Brazilian State (required)
     * @param code ICMS Code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIcmsConfByStateAsync(String authorization, String state, String code, final ApiCallback<List<IcmsConfByState>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIcmsConfByStateValidateBeforeCall(authorization, state, code, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IcmsConfByState>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getIcmsList */
    private com.squareup.okhttp.Call getIcmsListCall(String authorization, String state, String suffixcode, LocalDate date, Boolean inactive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/taxconf/icms/{state}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "state" + "\\}", apiClient.escapeString(state.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (suffixcode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "suffixcode", suffixcode));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "date", date));
        if (inactive != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "inactive", inactive));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIcmsListValidateBeforeCall(String authorization, String state, String suffixcode, LocalDate date, Boolean inactive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getIcmsList(Async)");
        }
        
        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling getIcmsList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getIcmsListCall(authorization, state, suffixcode, date, inactive, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * retrive list of ICMS.
     * This operation return ICMS configurations that match with parameters queries 
     * @param authorization Bearer {auth} (required)
     * @param state Brazilian State (required)
     * @param suffixcode Identify this ICMS (optional)
     * @param date When informed return valid version configuration for this date (optional)
     * @param inactive return the inactive versions too (optional)
     * @return List&lt;IcmsConfByState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IcmsConfByState> getIcmsList(String authorization, String state, String suffixcode, LocalDate date, Boolean inactive) throws ApiException {
        ApiResponse<List<IcmsConfByState>> resp = getIcmsListWithHttpInfo(authorization, state, suffixcode, date, inactive);
        return resp.getData();
    }

    /**
     * retrive list of ICMS.
     * This operation return ICMS configurations that match with parameters queries 
     * @param authorization Bearer {auth} (required)
     * @param state Brazilian State (required)
     * @param suffixcode Identify this ICMS (optional)
     * @param date When informed return valid version configuration for this date (optional)
     * @param inactive return the inactive versions too (optional)
     * @return ApiResponse&lt;List&lt;IcmsConfByState&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IcmsConfByState>> getIcmsListWithHttpInfo(String authorization, String state, String suffixcode, LocalDate date, Boolean inactive) throws ApiException {
        com.squareup.okhttp.Call call = getIcmsListValidateBeforeCall(authorization, state, suffixcode, date, inactive, null, null);
        Type localVarReturnType = new TypeToken<List<IcmsConfByState>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retrive list of ICMS. (asynchronously)
     * This operation return ICMS configurations that match with parameters queries 
     * @param authorization Bearer {auth} (required)
     * @param state Brazilian State (required)
     * @param suffixcode Identify this ICMS (optional)
     * @param date When informed return valid version configuration for this date (optional)
     * @param inactive return the inactive versions too (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIcmsListAsync(String authorization, String state, String suffixcode, LocalDate date, Boolean inactive, final ApiCallback<List<IcmsConfByState>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIcmsListValidateBeforeCall(authorization, state, suffixcode, date, inactive, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IcmsConfByState>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getIcmsListSearch */
    private com.squareup.okhttp.Call getIcmsListSearchCall(String authorization, String text, String state, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/taxconf/icms-search/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "text", text));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "state", state));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIcmsListSearchValidateBeforeCall(String authorization, String text, String state, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getIcmsListSearch(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling getIcmsListSearch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getIcmsListSearchCall(authorization, text, state, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * retrive list of ICMS.
     * This operation return ICMS configurations that match with parameters queries 
     * @param authorization Bearer {auth} (required)
     * @param text Search for codes (required)
     * @param state Filter for states (optional)
     * @return List&lt;IcmsConfByState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IcmsConfByState> getIcmsListSearch(String authorization, String text, String state) throws ApiException {
        ApiResponse<List<IcmsConfByState>> resp = getIcmsListSearchWithHttpInfo(authorization, text, state);
        return resp.getData();
    }

    /**
     * retrive list of ICMS.
     * This operation return ICMS configurations that match with parameters queries 
     * @param authorization Bearer {auth} (required)
     * @param text Search for codes (required)
     * @param state Filter for states (optional)
     * @return ApiResponse&lt;List&lt;IcmsConfByState&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IcmsConfByState>> getIcmsListSearchWithHttpInfo(String authorization, String text, String state) throws ApiException {
        com.squareup.okhttp.Call call = getIcmsListSearchValidateBeforeCall(authorization, text, state, null, null);
        Type localVarReturnType = new TypeToken<List<IcmsConfByState>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retrive list of ICMS. (asynchronously)
     * This operation return ICMS configurations that match with parameters queries 
     * @param authorization Bearer {auth} (required)
     * @param text Search for codes (required)
     * @param state Filter for states (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIcmsListSearchAsync(String authorization, String text, String state, final ApiCallback<List<IcmsConfByState>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIcmsListSearchValidateBeforeCall(authorization, text, state, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IcmsConfByState>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateIcmsconfstate */
    private com.squareup.okhttp.Call updateIcmsconfstateCall(String authorization, String state, String code, IcmsConfByState icmsConfState, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = icmsConfState;
        
        // create path and map variables
        String localVarPath = "/taxconf/icms/{state}/{code}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "state" + "\\}", apiClient.escapeString(state.toString()))
        .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateIcmsconfstateValidateBeforeCall(String authorization, String state, String code, IcmsConfByState icmsConfState, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateIcmsconfstate(Async)");
        }
        
        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling updateIcmsconfstate(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateIcmsconfstate(Async)");
        }
        
        // verify the required parameter 'icmsConfState' is set
        if (icmsConfState == null) {
            throw new ApiException("Missing the required parameter 'icmsConfState' when calling updateIcmsconfstate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateIcmsconfstateCall(authorization, state, code, icmsConfState, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * update a IcmsConf State,
     * 
     * @param authorization Bearer {auth} (required)
     * @param state Brazilian State (required)
     * @param code ICMS Code (required)
     * @param icmsConfState The pet JSON you want to post (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateIcmsconfstate(String authorization, String state, String code, IcmsConfByState icmsConfState) throws ApiException {
        updateIcmsconfstateWithHttpInfo(authorization, state, code, icmsConfState);
    }

    /**
     * update a IcmsConf State,
     * 
     * @param authorization Bearer {auth} (required)
     * @param state Brazilian State (required)
     * @param code ICMS Code (required)
     * @param icmsConfState The pet JSON you want to post (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateIcmsconfstateWithHttpInfo(String authorization, String state, String code, IcmsConfByState icmsConfState) throws ApiException {
        com.squareup.okhttp.Call call = updateIcmsconfstateValidateBeforeCall(authorization, state, code, icmsConfState, null, null);
        return apiClient.execute(call);
    }

    /**
     * update a IcmsConf State, (asynchronously)
     * 
     * @param authorization Bearer {auth} (required)
     * @param state Brazilian State (required)
     * @param code ICMS Code (required)
     * @param icmsConfState The pet JSON you want to post (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateIcmsconfstateAsync(String authorization, String state, String code, IcmsConfByState icmsConfState, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateIcmsconfstateValidateBeforeCall(authorization, state, code, icmsConfState, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
