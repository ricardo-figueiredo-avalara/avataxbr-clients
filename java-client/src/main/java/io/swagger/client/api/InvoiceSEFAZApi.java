/*
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;
import io.swagger.client.model.SefazDisableRangeIn;
import io.swagger.client.model.SefazInvoiceBasicStatus;
import io.swagger.client.model.SefazItDeleteIn;
import io.swagger.client.model.SefazItGetOut;
import io.swagger.client.model.SefazItPutIn;
import io.swagger.client.model.SefazPostOut;
import io.swagger.client.model.TransactionForSefazGoodsList;

public class InvoiceSEFAZApi {
    private ApiClient apiClient;

    public InvoiceSEFAZApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvoiceSEFAZApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for cancelInvoice */
    private com.squareup.okhttp.Call cancelInvoiceCall(String authorization, String key, SefazItDeleteIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/invoices/sefaz/{key}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelInvoiceValidateBeforeCall(String authorization, String key, SefazItDeleteIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling cancelInvoice(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling cancelInvoice(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling cancelInvoice(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cancelInvoiceCall(authorization, key, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancel invoice
     * Cancel the invoice
     * @param authorization Bearer {auth} (required)
     * @param key Invoice Key (required)
     * @param body Cancel Message (required)
     * @return SefazInvoiceBasicStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SefazInvoiceBasicStatus cancelInvoice(String authorization, String key, SefazItDeleteIn body) throws ApiException {
        ApiResponse<SefazInvoiceBasicStatus> resp = cancelInvoiceWithHttpInfo(authorization, key, body);
        return resp.getData();
    }

    /**
     * Cancel invoice
     * Cancel the invoice
     * @param authorization Bearer {auth} (required)
     * @param key Invoice Key (required)
     * @param body Cancel Message (required)
     * @return ApiResponse&lt;SefazInvoiceBasicStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SefazInvoiceBasicStatus> cancelInvoiceWithHttpInfo(String authorization, String key, SefazItDeleteIn body) throws ApiException {
        com.squareup.okhttp.Call call = cancelInvoiceValidateBeforeCall(authorization, key, body, null, null);
        Type localVarReturnType = new TypeToken<SefazInvoiceBasicStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel invoice (asynchronously)
     * Cancel the invoice
     * @param authorization Bearer {auth} (required)
     * @param key Invoice Key (required)
     * @param body Cancel Message (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelInvoiceAsync(String authorization, String key, SefazItDeleteIn body, final ApiCallback<SefazInvoiceBasicStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelInvoiceValidateBeforeCall(authorization, key, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SefazInvoiceBasicStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for disableRange */
    private com.squareup.okhttp.Call disableRangeCall(String authorization, SefazDisableRangeIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/invoices/sefaz".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call disableRangeValidateBeforeCall(String authorization, SefazDisableRangeIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling disableRange(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling disableRange(Async)");
        }
        
        
        com.squareup.okhttp.Call call = disableRangeCall(authorization, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Disable Range e-Invoice
     * Send disable range of NFes to SEFAZ 
     * @param authorization Bearer {auth} (required)
     * @param body Disable Range e-Invoice (required)
     * @return SefazInvoiceBasicStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SefazInvoiceBasicStatus disableRange(String authorization, SefazDisableRangeIn body) throws ApiException {
        ApiResponse<SefazInvoiceBasicStatus> resp = disableRangeWithHttpInfo(authorization, body);
        return resp.getData();
    }

    /**
     * Disable Range e-Invoice
     * Send disable range of NFes to SEFAZ 
     * @param authorization Bearer {auth} (required)
     * @param body Disable Range e-Invoice (required)
     * @return ApiResponse&lt;SefazInvoiceBasicStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SefazInvoiceBasicStatus> disableRangeWithHttpInfo(String authorization, SefazDisableRangeIn body) throws ApiException {
        com.squareup.okhttp.Call call = disableRangeValidateBeforeCall(authorization, body, null, null);
        Type localVarReturnType = new TypeToken<SefazInvoiceBasicStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Disable Range e-Invoice (asynchronously)
     * Send disable range of NFes to SEFAZ 
     * @param authorization Bearer {auth} (required)
     * @param body Disable Range e-Invoice (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call disableRangeAsync(String authorization, SefazDisableRangeIn body, final ApiCallback<SefazInvoiceBasicStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disableRangeValidateBeforeCall(authorization, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SefazInvoiceBasicStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for fixLetter */
    private com.squareup.okhttp.Call fixLetterCall(String authorization, String key, SefazItPutIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/invoices/sefaz/{key}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fixLetterValidateBeforeCall(String authorization, String key, SefazItPutIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling fixLetter(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling fixLetter(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling fixLetter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = fixLetterCall(authorization, key, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fix Letter
     * Fix Letter
     * @param authorization Bearer {auth} (required)
     * @param key Invoice Key (required)
     * @param body Fix Message (required)
     * @return SefazInvoiceBasicStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SefazInvoiceBasicStatus fixLetter(String authorization, String key, SefazItPutIn body) throws ApiException {
        ApiResponse<SefazInvoiceBasicStatus> resp = fixLetterWithHttpInfo(authorization, key, body);
        return resp.getData();
    }

    /**
     * Fix Letter
     * Fix Letter
     * @param authorization Bearer {auth} (required)
     * @param key Invoice Key (required)
     * @param body Fix Message (required)
     * @return ApiResponse&lt;SefazInvoiceBasicStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SefazInvoiceBasicStatus> fixLetterWithHttpInfo(String authorization, String key, SefazItPutIn body) throws ApiException {
        com.squareup.okhttp.Call call = fixLetterValidateBeforeCall(authorization, key, body, null, null);
        Type localVarReturnType = new TypeToken<SefazInvoiceBasicStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fix Letter (asynchronously)
     * Fix Letter
     * @param authorization Bearer {auth} (required)
     * @param key Invoice Key (required)
     * @param body Fix Message (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fixLetterAsync(String authorization, String key, SefazItPutIn body, final ApiCallback<SefazInvoiceBasicStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fixLetterValidateBeforeCall(authorization, key, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SefazInvoiceBasicStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveInvoice */
    private com.squareup.okhttp.Call retrieveInvoiceCall(String authorization, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/invoices/sefaz/{key}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveInvoiceValidateBeforeCall(String authorization, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveInvoice(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling retrieveInvoice(Async)");
        }
        
        
        com.squareup.okhttp.Call call = retrieveInvoiceCall(authorization, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve invoice
     * Retrieve the invoice
     * @param authorization Bearer {auth} (required)
     * @param key Invoice Key (required)
     * @return SefazItGetOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SefazItGetOut retrieveInvoice(String authorization, String key) throws ApiException {
        ApiResponse<SefazItGetOut> resp = retrieveInvoiceWithHttpInfo(authorization, key);
        return resp.getData();
    }

    /**
     * Retrieve invoice
     * Retrieve the invoice
     * @param authorization Bearer {auth} (required)
     * @param key Invoice Key (required)
     * @return ApiResponse&lt;SefazItGetOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SefazItGetOut> retrieveInvoiceWithHttpInfo(String authorization, String key) throws ApiException {
        com.squareup.okhttp.Call call = retrieveInvoiceValidateBeforeCall(authorization, key, null, null);
        Type localVarReturnType = new TypeToken<SefazItGetOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve invoice (asynchronously)
     * Retrieve the invoice
     * @param authorization Bearer {auth} (required)
     * @param key Invoice Key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveInvoiceAsync(String authorization, String key, final ApiCallback<SefazItGetOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveInvoiceValidateBeforeCall(authorization, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SefazItGetOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveInvoiceLookup */
    private com.squareup.okhttp.Call retrieveInvoiceLookupCall(String authorization, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/invoices/sefaz/{key}/lookup".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveInvoiceLookupValidateBeforeCall(String authorization, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveInvoiceLookup(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling retrieveInvoiceLookup(Async)");
        }
        
        
        com.squareup.okhttp.Call call = retrieveInvoiceLookupCall(authorization, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve invoice
     * Retrieve the invoice
     * @param authorization Bearer {auth} (required)
     * @param key Invoice Key (required)
     * @return TransactionForSefazGoodsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionForSefazGoodsList retrieveInvoiceLookup(String authorization, String key) throws ApiException {
        ApiResponse<TransactionForSefazGoodsList> resp = retrieveInvoiceLookupWithHttpInfo(authorization, key);
        return resp.getData();
    }

    /**
     * Retrieve invoice
     * Retrieve the invoice
     * @param authorization Bearer {auth} (required)
     * @param key Invoice Key (required)
     * @return ApiResponse&lt;TransactionForSefazGoodsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionForSefazGoodsList> retrieveInvoiceLookupWithHttpInfo(String authorization, String key) throws ApiException {
        com.squareup.okhttp.Call call = retrieveInvoiceLookupValidateBeforeCall(authorization, key, null, null);
        Type localVarReturnType = new TypeToken<TransactionForSefazGoodsList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve invoice (asynchronously)
     * Retrieve the invoice
     * @param authorization Bearer {auth} (required)
     * @param key Invoice Key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveInvoiceLookupAsync(String authorization, String key, final ApiCallback<TransactionForSefazGoodsList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveInvoiceLookupValidateBeforeCall(authorization, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionForSefazGoodsList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveStatus */
    private com.squareup.okhttp.Call retrieveStatusCall(String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/invoices/sefaz/status".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveStatusValidateBeforeCall(String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveStatus(Async)");
        }
        
        
        com.squareup.okhttp.Call call = retrieveStatusCall(authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve Status of SEFAZ Server
     * Retrieve Status of SEFAZ Server
     * @param authorization Bearer {auth} (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String retrieveStatus(String authorization) throws ApiException {
        ApiResponse<String> resp = retrieveStatusWithHttpInfo(authorization);
        return resp.getData();
    }

    /**
     * Retrieve Status of SEFAZ Server
     * Retrieve Status of SEFAZ Server
     * @param authorization Bearer {auth} (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> retrieveStatusWithHttpInfo(String authorization) throws ApiException {
        com.squareup.okhttp.Call call = retrieveStatusValidateBeforeCall(authorization, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve Status of SEFAZ Server (asynchronously)
     * Retrieve Status of SEFAZ Server
     * @param authorization Bearer {auth} (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveStatusAsync(String authorization, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveStatusValidateBeforeCall(authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for sendInvoice */
    private com.squareup.okhttp.Call sendInvoiceCall(String authorization, TransactionForSefazGoodsList body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/invoices/sefaz".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendInvoiceValidateBeforeCall(String authorization, TransactionForSefazGoodsList body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling sendInvoice(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling sendInvoice(Async)");
        }
        
        
        com.squareup.okhttp.Call call = sendInvoiceCall(authorization, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Send an e-Invoice
     * Send a invoice to SEFAZ 
     * @param authorization Bearer {auth} (required)
     * @param body Invoices (required)
     * @return SefazPostOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SefazPostOut sendInvoice(String authorization, TransactionForSefazGoodsList body) throws ApiException {
        ApiResponse<SefazPostOut> resp = sendInvoiceWithHttpInfo(authorization, body);
        return resp.getData();
    }

    /**
     * Send an e-Invoice
     * Send a invoice to SEFAZ 
     * @param authorization Bearer {auth} (required)
     * @param body Invoices (required)
     * @return ApiResponse&lt;SefazPostOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SefazPostOut> sendInvoiceWithHttpInfo(String authorization, TransactionForSefazGoodsList body) throws ApiException {
        com.squareup.okhttp.Call call = sendInvoiceValidateBeforeCall(authorization, body, null, null);
        Type localVarReturnType = new TypeToken<SefazPostOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send an e-Invoice (asynchronously)
     * Send a invoice to SEFAZ 
     * @param authorization Bearer {auth} (required)
     * @param body Invoices (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendInvoiceAsync(String authorization, TransactionForSefazGoodsList body, final ApiCallback<SefazPostOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendInvoiceValidateBeforeCall(authorization, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SefazPostOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
