/*
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Body1;
import io.swagger.client.model.InlineResponse201;
import io.swagger.client.model.ItemSimple;
import io.swagger.client.model.Message;
import io.swagger.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CompanyItemServiceApi {
    private ApiClient apiClient;

    public CompanyItemServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CompanyItemServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for companiesCompanyIdItemsCodeChangeCodePut */
    private com.squareup.okhttp.Call companiesCompanyIdItemsCodeChangeCodePutCall(String companyId, String code, Body1 body, String goods, String service, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/companies/{companyId}/items/{code}/change-code".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "companyId" + "\\}", apiClient.escapeString(companyId.toString()))
        .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (goods != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "goods", goods));
        if (service != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "service", service));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call companiesCompanyIdItemsCodeChangeCodePutValidateBeforeCall(String companyId, String code, Body1 body, String goods, String service, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling companiesCompanyIdItemsCodeChangeCodePut(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling companiesCompanyIdItemsCodeChangeCodePut(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling companiesCompanyIdItemsCodeChangeCodePut(Async)");
        }
        
        
        com.squareup.okhttp.Call call = companiesCompanyIdItemsCodeChangeCodePutCall(companyId, code, body, goods, service, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Change the code of a given item. 
     * @param companyId Company ID (required)
     * @param code Item Code (required)
     * @param body Requisition (required)
     * @param goods Provide to apply to goods items. (optional)
     * @param service Provide to apply to service items. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void companiesCompanyIdItemsCodeChangeCodePut(String companyId, String code, Body1 body, String goods, String service) throws ApiException {
        companiesCompanyIdItemsCodeChangeCodePutWithHttpInfo(companyId, code, body, goods, service);
    }

    /**
     * 
     * Change the code of a given item. 
     * @param companyId Company ID (required)
     * @param code Item Code (required)
     * @param body Requisition (required)
     * @param goods Provide to apply to goods items. (optional)
     * @param service Provide to apply to service items. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> companiesCompanyIdItemsCodeChangeCodePutWithHttpInfo(String companyId, String code, Body1 body, String goods, String service) throws ApiException {
        com.squareup.okhttp.Call call = companiesCompanyIdItemsCodeChangeCodePutValidateBeforeCall(companyId, code, body, goods, service, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Change the code of a given item. 
     * @param companyId Company ID (required)
     * @param code Item Code (required)
     * @param body Requisition (required)
     * @param goods Provide to apply to goods items. (optional)
     * @param service Provide to apply to service items. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call companiesCompanyIdItemsCodeChangeCodePutAsync(String companyId, String code, Body1 body, String goods, String service, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = companiesCompanyIdItemsCodeChangeCodePutValidateBeforeCall(companyId, code, body, goods, service, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for companiesCompanyIdItemsCodeserviceGet */
    private com.squareup.okhttp.Call companiesCompanyIdItemsCodeserviceGetCall(String companyId, String code, String avalaraProductType, String agast, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/companies/{companyId}/items/{code}?service".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "companyId" + "\\}", apiClient.escapeString(companyId.toString()))
        .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (agast != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "agast", agast));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (avalaraProductType != null)
        localVarHeaderParams.put("Avalara-Product-Type", apiClient.parameterToString(avalaraProductType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call companiesCompanyIdItemsCodeserviceGetValidateBeforeCall(String companyId, String code, String avalaraProductType, String agast, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling companiesCompanyIdItemsCodeserviceGet(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling companiesCompanyIdItemsCodeserviceGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = companiesCompanyIdItemsCodeserviceGetCall(companyId, code, avalaraProductType, agast, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * This operation return custom agast configurations that match with parameters queries 
     * @param companyId Company ID (required)
     * @param code Item Code (required)
     * @param avalaraProductType Avalara Product Type (optional, default to service)
     * @param agast Custom Agast Code (optional)
     * @return ItemSimple
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemSimple companiesCompanyIdItemsCodeserviceGet(String companyId, String code, String avalaraProductType, String agast) throws ApiException {
        ApiResponse<ItemSimple> resp = companiesCompanyIdItemsCodeserviceGetWithHttpInfo(companyId, code, avalaraProductType, agast);
        return resp.getData();
    }

    /**
     * 
     * This operation return custom agast configurations that match with parameters queries 
     * @param companyId Company ID (required)
     * @param code Item Code (required)
     * @param avalaraProductType Avalara Product Type (optional, default to service)
     * @param agast Custom Agast Code (optional)
     * @return ApiResponse&lt;ItemSimple&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemSimple> companiesCompanyIdItemsCodeserviceGetWithHttpInfo(String companyId, String code, String avalaraProductType, String agast) throws ApiException {
        com.squareup.okhttp.Call call = companiesCompanyIdItemsCodeserviceGetValidateBeforeCall(companyId, code, avalaraProductType, agast, null, null);
        Type localVarReturnType = new TypeToken<ItemSimple>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation return custom agast configurations that match with parameters queries 
     * @param companyId Company ID (required)
     * @param code Item Code (required)
     * @param avalaraProductType Avalara Product Type (optional, default to service)
     * @param agast Custom Agast Code (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call companiesCompanyIdItemsCodeserviceGetAsync(String companyId, String code, String avalaraProductType, String agast, final ApiCallback<ItemSimple> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = companiesCompanyIdItemsCodeserviceGetValidateBeforeCall(companyId, code, avalaraProductType, agast, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemSimple>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for companiesCompanyIdItemsserviceGet */
    private com.squareup.okhttp.Call companiesCompanyIdItemsserviceGetCall(String companyId, String avalaraProductType, Integer xPaginationLimit, Integer xPaginationCurrentPage, String xPaginationSort, String code, String agast, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/companies/{companyId}/items?service".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "companyId" + "\\}", apiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (code != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "code", code));
        if (agast != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "agast", agast));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (avalaraProductType != null)
        localVarHeaderParams.put("Avalara-Product-Type", apiClient.parameterToString(avalaraProductType));
        if (xPaginationLimit != null)
        localVarHeaderParams.put("X-Pagination-Limit", apiClient.parameterToString(xPaginationLimit));
        if (xPaginationCurrentPage != null)
        localVarHeaderParams.put("X-Pagination-Current-Page", apiClient.parameterToString(xPaginationCurrentPage));
        if (xPaginationSort != null)
        localVarHeaderParams.put("X-Pagination-Sort", apiClient.parameterToString(xPaginationSort));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call companiesCompanyIdItemsserviceGetValidateBeforeCall(String companyId, String avalaraProductType, Integer xPaginationLimit, Integer xPaginationCurrentPage, String xPaginationSort, String code, String agast, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling companiesCompanyIdItemsserviceGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = companiesCompanyIdItemsserviceGetCall(companyId, avalaraProductType, xPaginationLimit, xPaginationCurrentPage, xPaginationSort, code, agast, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * This operation return custom agast configurations that match with parameters queries 
     * @param companyId Company ID (required)
     * @param avalaraProductType Avalara Product Type (optional, default to service)
     * @param xPaginationLimit The per page limit. Currently set to 10 but subject to change at any time (max 100). (optional, default to 10)
     * @param xPaginationCurrentPage The current page. Defaults to 1. (optional, default to 1)
     * @param xPaginationSort  (optional)
     * @param code Item Code (optional)
     * @param agast Custom Agast Code (optional)
     * @return List&lt;ItemSimple&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ItemSimple> companiesCompanyIdItemsserviceGet(String companyId, String avalaraProductType, Integer xPaginationLimit, Integer xPaginationCurrentPage, String xPaginationSort, String code, String agast) throws ApiException {
        ApiResponse<List<ItemSimple>> resp = companiesCompanyIdItemsserviceGetWithHttpInfo(companyId, avalaraProductType, xPaginationLimit, xPaginationCurrentPage, xPaginationSort, code, agast);
        return resp.getData();
    }

    /**
     * 
     * This operation return custom agast configurations that match with parameters queries 
     * @param companyId Company ID (required)
     * @param avalaraProductType Avalara Product Type (optional, default to service)
     * @param xPaginationLimit The per page limit. Currently set to 10 but subject to change at any time (max 100). (optional, default to 10)
     * @param xPaginationCurrentPage The current page. Defaults to 1. (optional, default to 1)
     * @param xPaginationSort  (optional)
     * @param code Item Code (optional)
     * @param agast Custom Agast Code (optional)
     * @return ApiResponse&lt;List&lt;ItemSimple&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ItemSimple>> companiesCompanyIdItemsserviceGetWithHttpInfo(String companyId, String avalaraProductType, Integer xPaginationLimit, Integer xPaginationCurrentPage, String xPaginationSort, String code, String agast) throws ApiException {
        com.squareup.okhttp.Call call = companiesCompanyIdItemsserviceGetValidateBeforeCall(companyId, avalaraProductType, xPaginationLimit, xPaginationCurrentPage, xPaginationSort, code, agast, null, null);
        Type localVarReturnType = new TypeToken<List<ItemSimple>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation return custom agast configurations that match with parameters queries 
     * @param companyId Company ID (required)
     * @param avalaraProductType Avalara Product Type (optional, default to service)
     * @param xPaginationLimit The per page limit. Currently set to 10 but subject to change at any time (max 100). (optional, default to 10)
     * @param xPaginationCurrentPage The current page. Defaults to 1. (optional, default to 1)
     * @param xPaginationSort  (optional)
     * @param code Item Code (optional)
     * @param agast Custom Agast Code (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call companiesCompanyIdItemsserviceGetAsync(String companyId, String avalaraProductType, Integer xPaginationLimit, Integer xPaginationCurrentPage, String xPaginationSort, String code, String agast, final ApiCallback<List<ItemSimple>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = companiesCompanyIdItemsserviceGetValidateBeforeCall(companyId, avalaraProductType, xPaginationLimit, xPaginationCurrentPage, xPaginationSort, code, agast, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ItemSimple>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createItemService */
    private com.squareup.okhttp.Call createItemServiceCall(String companyId, ItemSimple body, String avalaraProductType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/companies/{companyId}/items?service".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "companyId" + "\\}", apiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (avalaraProductType != null)
        localVarHeaderParams.put("Avalara-Product-Type", apiClient.parameterToString(avalaraProductType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createItemServiceValidateBeforeCall(String companyId, ItemSimple body, String avalaraProductType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createItemService(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createItemService(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createItemServiceCall(companyId, body, avalaraProductType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create custom agast for one company
     * This method operation create a custom agast for one company 
     * @param companyId Company ID (required)
     * @param body Transaction Message (required)
     * @param avalaraProductType Avalara Product Type (optional, default to service)
     * @return InlineResponse201
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse201 createItemService(String companyId, ItemSimple body, String avalaraProductType) throws ApiException {
        ApiResponse<InlineResponse201> resp = createItemServiceWithHttpInfo(companyId, body, avalaraProductType);
        return resp.getData();
    }

    /**
     * Create custom agast for one company
     * This method operation create a custom agast for one company 
     * @param companyId Company ID (required)
     * @param body Transaction Message (required)
     * @param avalaraProductType Avalara Product Type (optional, default to service)
     * @return ApiResponse&lt;InlineResponse201&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse201> createItemServiceWithHttpInfo(String companyId, ItemSimple body, String avalaraProductType) throws ApiException {
        com.squareup.okhttp.Call call = createItemServiceValidateBeforeCall(companyId, body, avalaraProductType, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create custom agast for one company (asynchronously)
     * This method operation create a custom agast for one company 
     * @param companyId Company ID (required)
     * @param body Transaction Message (required)
     * @param avalaraProductType Avalara Product Type (optional, default to service)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createItemServiceAsync(String companyId, ItemSimple body, String avalaraProductType, final ApiCallback<InlineResponse201> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createItemServiceValidateBeforeCall(companyId, body, avalaraProductType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteItemService */
    private com.squareup.okhttp.Call deleteItemServiceCall(String companyId, String code, String avalaraProductType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/companies/{companyId}/items/{code}?service".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "companyId" + "\\}", apiClient.escapeString(companyId.toString()))
        .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (avalaraProductType != null)
        localVarHeaderParams.put("Avalara-Product-Type", apiClient.parameterToString(avalaraProductType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemServiceValidateBeforeCall(String companyId, String code, String avalaraProductType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteItemService(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteItemService(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteItemServiceCall(companyId, code, avalaraProductType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param companyId Company ID (required)
     * @param code Item Code (required)
     * @param avalaraProductType Avalara Product Type (optional, default to service)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemService(String companyId, String code, String avalaraProductType) throws ApiException {
        deleteItemServiceWithHttpInfo(companyId, code, avalaraProductType);
    }

    /**
     * 
     * 
     * @param companyId Company ID (required)
     * @param code Item Code (required)
     * @param avalaraProductType Avalara Product Type (optional, default to service)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemServiceWithHttpInfo(String companyId, String code, String avalaraProductType) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemServiceValidateBeforeCall(companyId, code, avalaraProductType, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param companyId Company ID (required)
     * @param code Item Code (required)
     * @param avalaraProductType Avalara Product Type (optional, default to service)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemServiceAsync(String companyId, String code, String avalaraProductType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemServiceValidateBeforeCall(companyId, code, avalaraProductType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateItemService */
    private com.squareup.okhttp.Call updateItemServiceCall(String companyId, String code, ItemSimple body, String avalaraProductType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/companies/{companyId}/items/{code}?service".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "companyId" + "\\}", apiClient.escapeString(companyId.toString()))
        .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (avalaraProductType != null)
        localVarHeaderParams.put("Avalara-Product-Type", apiClient.parameterToString(avalaraProductType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateItemServiceValidateBeforeCall(String companyId, String code, ItemSimple body, String avalaraProductType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateItemService(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateItemService(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateItemService(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateItemServiceCall(companyId, code, body, avalaraProductType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update custom agast for one company
     * This method operation create a custom agast for one company 
     * @param companyId Company ID (required)
     * @param code Item Code (required)
     * @param body Transaction Message (required)
     * @param avalaraProductType Avalara Product Type (optional, default to service)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateItemService(String companyId, String code, ItemSimple body, String avalaraProductType) throws ApiException {
        updateItemServiceWithHttpInfo(companyId, code, body, avalaraProductType);
    }

    /**
     * Update custom agast for one company
     * This method operation create a custom agast for one company 
     * @param companyId Company ID (required)
     * @param code Item Code (required)
     * @param body Transaction Message (required)
     * @param avalaraProductType Avalara Product Type (optional, default to service)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateItemServiceWithHttpInfo(String companyId, String code, ItemSimple body, String avalaraProductType) throws ApiException {
        com.squareup.okhttp.Call call = updateItemServiceValidateBeforeCall(companyId, code, body, avalaraProductType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update custom agast for one company (asynchronously)
     * This method operation create a custom agast for one company 
     * @param companyId Company ID (required)
     * @param code Item Code (required)
     * @param body Transaction Message (required)
     * @param avalaraProductType Avalara Product Type (optional, default to service)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateItemServiceAsync(String companyId, String code, ItemSimple body, String avalaraProductType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateItemServiceValidateBeforeCall(companyId, code, body, avalaraProductType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
