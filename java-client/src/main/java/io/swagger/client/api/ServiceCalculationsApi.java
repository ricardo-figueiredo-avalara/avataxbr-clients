/*
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;
import io.swagger.client.model.PaymentTransactionIn;
import io.swagger.client.model.PaymentTransactionOut;
import io.swagger.client.model.PurchaseTransactionIn;
import io.swagger.client.model.PurchaseTransactionOut;
import io.swagger.client.model.ReceiptTransactionIn;
import io.swagger.client.model.ReceiptTransactionOut;
import io.swagger.client.model.SalesTransactionIn;
import io.swagger.client.model.SalesTransactionOut;
import io.swagger.client.model.TransactionForGoodsIn;

public class ServiceCalculationsApi {
    private ApiClient apiClient;

    public ServiceCalculationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceCalculationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for calculationServicePayment */
    private com.squareup.okhttp.Call calculationServicePaymentCall(String authorization, PaymentTransactionIn body, String noPersist, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/calculations?service-payment".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (noPersist != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "noPersist", noPersist));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call calculationServicePaymentValidateBeforeCall(String authorization, PaymentTransactionIn body, String noPersist, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling calculationServicePayment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling calculationServicePayment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = calculationServicePaymentCall(authorization, body, noPersist, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param noPersist Do not save this calculation (optional)
     * @return PaymentTransactionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentTransactionOut calculationServicePayment(String authorization, PaymentTransactionIn body, String noPersist) throws ApiException {
        ApiResponse<PaymentTransactionOut> resp = calculationServicePaymentWithHttpInfo(authorization, body, noPersist);
        return resp.getData();
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param noPersist Do not save this calculation (optional)
     * @return ApiResponse&lt;PaymentTransactionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentTransactionOut> calculationServicePaymentWithHttpInfo(String authorization, PaymentTransactionIn body, String noPersist) throws ApiException {
        com.squareup.okhttp.Call call = calculationServicePaymentValidateBeforeCall(authorization, body, noPersist, null, null);
        Type localVarReturnType = new TypeToken<PaymentTransactionOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculation Method (asynchronously)
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param noPersist Do not save this calculation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call calculationServicePaymentAsync(String authorization, PaymentTransactionIn body, String noPersist, final ApiCallback<PaymentTransactionOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = calculationServicePaymentValidateBeforeCall(authorization, body, noPersist, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentTransactionOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for calculationServicePurchase */
    private com.squareup.okhttp.Call calculationServicePurchaseCall(String authorization, PurchaseTransactionIn body, String noPersist, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/calculations?service-purchase".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (noPersist != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "noPersist", noPersist));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call calculationServicePurchaseValidateBeforeCall(String authorization, PurchaseTransactionIn body, String noPersist, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling calculationServicePurchase(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling calculationServicePurchase(Async)");
        }
        
        
        com.squareup.okhttp.Call call = calculationServicePurchaseCall(authorization, body, noPersist, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param noPersist Do not save this calculation (optional)
     * @return PurchaseTransactionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PurchaseTransactionOut calculationServicePurchase(String authorization, PurchaseTransactionIn body, String noPersist) throws ApiException {
        ApiResponse<PurchaseTransactionOut> resp = calculationServicePurchaseWithHttpInfo(authorization, body, noPersist);
        return resp.getData();
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param noPersist Do not save this calculation (optional)
     * @return ApiResponse&lt;PurchaseTransactionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PurchaseTransactionOut> calculationServicePurchaseWithHttpInfo(String authorization, PurchaseTransactionIn body, String noPersist) throws ApiException {
        com.squareup.okhttp.Call call = calculationServicePurchaseValidateBeforeCall(authorization, body, noPersist, null, null);
        Type localVarReturnType = new TypeToken<PurchaseTransactionOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculation Method (asynchronously)
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param noPersist Do not save this calculation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call calculationServicePurchaseAsync(String authorization, PurchaseTransactionIn body, String noPersist, final ApiCallback<PurchaseTransactionOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = calculationServicePurchaseValidateBeforeCall(authorization, body, noPersist, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PurchaseTransactionOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for calculationServiceReceipt */
    private com.squareup.okhttp.Call calculationServiceReceiptCall(String authorization, ReceiptTransactionIn body, String noPersist, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/calculations?service-receipt".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (noPersist != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "noPersist", noPersist));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call calculationServiceReceiptValidateBeforeCall(String authorization, ReceiptTransactionIn body, String noPersist, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling calculationServiceReceipt(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling calculationServiceReceipt(Async)");
        }
        
        
        com.squareup.okhttp.Call call = calculationServiceReceiptCall(authorization, body, noPersist, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param noPersist Do not save this calculation (optional)
     * @return ReceiptTransactionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReceiptTransactionOut calculationServiceReceipt(String authorization, ReceiptTransactionIn body, String noPersist) throws ApiException {
        ApiResponse<ReceiptTransactionOut> resp = calculationServiceReceiptWithHttpInfo(authorization, body, noPersist);
        return resp.getData();
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param noPersist Do not save this calculation (optional)
     * @return ApiResponse&lt;ReceiptTransactionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReceiptTransactionOut> calculationServiceReceiptWithHttpInfo(String authorization, ReceiptTransactionIn body, String noPersist) throws ApiException {
        com.squareup.okhttp.Call call = calculationServiceReceiptValidateBeforeCall(authorization, body, noPersist, null, null);
        Type localVarReturnType = new TypeToken<ReceiptTransactionOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculation Method (asynchronously)
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param noPersist Do not save this calculation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call calculationServiceReceiptAsync(String authorization, ReceiptTransactionIn body, String noPersist, final ApiCallback<ReceiptTransactionOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = calculationServiceReceiptValidateBeforeCall(authorization, body, noPersist, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReceiptTransactionOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for calculationServiceSales */
    private com.squareup.okhttp.Call calculationServiceSalesCall(String authorization, SalesTransactionIn body, String noPersist, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/calculations?service-sales".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (noPersist != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "noPersist", noPersist));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call calculationServiceSalesValidateBeforeCall(String authorization, SalesTransactionIn body, String noPersist, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling calculationServiceSales(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling calculationServiceSales(Async)");
        }
        
        
        com.squareup.okhttp.Call call = calculationServiceSalesCall(authorization, body, noPersist, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param noPersist Do not save this calculation (optional)
     * @return SalesTransactionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SalesTransactionOut calculationServiceSales(String authorization, SalesTransactionIn body, String noPersist) throws ApiException {
        ApiResponse<SalesTransactionOut> resp = calculationServiceSalesWithHttpInfo(authorization, body, noPersist);
        return resp.getData();
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param noPersist Do not save this calculation (optional)
     * @return ApiResponse&lt;SalesTransactionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SalesTransactionOut> calculationServiceSalesWithHttpInfo(String authorization, SalesTransactionIn body, String noPersist) throws ApiException {
        com.squareup.okhttp.Call call = calculationServiceSalesValidateBeforeCall(authorization, body, noPersist, null, null);
        Type localVarReturnType = new TypeToken<SalesTransactionOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculation Method (asynchronously)
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param noPersist Do not save this calculation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call calculationServiceSalesAsync(String authorization, SalesTransactionIn body, String noPersist, final ApiCallback<SalesTransactionOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = calculationServiceSalesValidateBeforeCall(authorization, body, noPersist, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SalesTransactionOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for convertServiceCalculatioToTransaction */
    private com.squareup.okhttp.Call convertServiceCalculatioToTransactionCall(String authorization, String transactionType, String documentCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/calculations/service/{transactionType}/{documentCode}/transactions".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "transactionType" + "\\}", apiClient.escapeString(transactionType.toString()))
        .replaceAll("\\{" + "documentCode" + "\\}", apiClient.escapeString(documentCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertServiceCalculatioToTransactionValidateBeforeCall(String authorization, String transactionType, String documentCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling convertServiceCalculatioToTransaction(Async)");
        }
        
        // verify the required parameter 'transactionType' is set
        if (transactionType == null) {
            throw new ApiException("Missing the required parameter 'transactionType' when calling convertServiceCalculatioToTransaction(Async)");
        }
        
        // verify the required parameter 'documentCode' is set
        if (documentCode == null) {
            throw new ApiException("Missing the required parameter 'documentCode' when calling convertServiceCalculatioToTransaction(Async)");
        }
        
        
        com.squareup.okhttp.Call call = convertServiceCalculatioToTransactionCall(authorization, transactionType, documentCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Promote a calculation to transaction
     * Promote a calculation to transaction
     * @param authorization Bearer {auth} (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param documentCode Document Code (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void convertServiceCalculatioToTransaction(String authorization, String transactionType, String documentCode) throws ApiException {
        convertServiceCalculatioToTransactionWithHttpInfo(authorization, transactionType, documentCode);
    }

    /**
     * Promote a calculation to transaction
     * Promote a calculation to transaction
     * @param authorization Bearer {auth} (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param documentCode Document Code (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> convertServiceCalculatioToTransactionWithHttpInfo(String authorization, String transactionType, String documentCode) throws ApiException {
        com.squareup.okhttp.Call call = convertServiceCalculatioToTransactionValidateBeforeCall(authorization, transactionType, documentCode, null, null);
        return apiClient.execute(call);
    }

    /**
     * Promote a calculation to transaction (asynchronously)
     * Promote a calculation to transaction
     * @param authorization Bearer {auth} (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param documentCode Document Code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertServiceCalculatioToTransactionAsync(String authorization, String transactionType, String documentCode, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertServiceCalculatioToTransactionValidateBeforeCall(authorization, transactionType, documentCode, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for retrieveGoodsTransactions */
    private com.squareup.okhttp.Call retrieveGoodsTransactionsCall(String authorization, String transactionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/calculations/goods/{transactionType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "transactionType" + "\\}", apiClient.escapeString(transactionType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveGoodsTransactionsValidateBeforeCall(String authorization, String transactionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveGoodsTransactions(Async)");
        }
        
        // verify the required parameter 'transactionType' is set
        if (transactionType == null) {
            throw new ApiException("Missing the required parameter 'transactionType' when calling retrieveGoodsTransactions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = retrieveGoodsTransactionsCall(authorization, transactionType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve goods transactions
     * Retrieve a list of transactions
     * @param authorization Bearer {auth} (required)
     * @param transactionType Transaction Type (required)
     * @return List&lt;TransactionForGoodsIn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TransactionForGoodsIn> retrieveGoodsTransactions(String authorization, String transactionType) throws ApiException {
        ApiResponse<List<TransactionForGoodsIn>> resp = retrieveGoodsTransactionsWithHttpInfo(authorization, transactionType);
        return resp.getData();
    }

    /**
     * Retrieve goods transactions
     * Retrieve a list of transactions
     * @param authorization Bearer {auth} (required)
     * @param transactionType Transaction Type (required)
     * @return ApiResponse&lt;List&lt;TransactionForGoodsIn&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TransactionForGoodsIn>> retrieveGoodsTransactionsWithHttpInfo(String authorization, String transactionType) throws ApiException {
        com.squareup.okhttp.Call call = retrieveGoodsTransactionsValidateBeforeCall(authorization, transactionType, null, null);
        Type localVarReturnType = new TypeToken<List<TransactionForGoodsIn>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve goods transactions (asynchronously)
     * Retrieve a list of transactions
     * @param authorization Bearer {auth} (required)
     * @param transactionType Transaction Type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveGoodsTransactionsAsync(String authorization, String transactionType, final ApiCallback<List<TransactionForGoodsIn>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveGoodsTransactionsValidateBeforeCall(authorization, transactionType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TransactionForGoodsIn>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for retrieveServiceTransactionDocument */
    private com.squareup.okhttp.Call retrieveServiceTransactionDocumentCall(String authorization, String transactionType, String documentCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/calculations/service/{transactionType}/{documentCode}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "transactionType" + "\\}", apiClient.escapeString(transactionType.toString()))
        .replaceAll("\\{" + "documentCode" + "\\}", apiClient.escapeString(documentCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveServiceTransactionDocumentValidateBeforeCall(String authorization, String transactionType, String documentCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveServiceTransactionDocument(Async)");
        }
        
        // verify the required parameter 'transactionType' is set
        if (transactionType == null) {
            throw new ApiException("Missing the required parameter 'transactionType' when calling retrieveServiceTransactionDocument(Async)");
        }
        
        // verify the required parameter 'documentCode' is set
        if (documentCode == null) {
            throw new ApiException("Missing the required parameter 'documentCode' when calling retrieveServiceTransactionDocument(Async)");
        }
        
        
        com.squareup.okhttp.Call call = retrieveServiceTransactionDocumentCall(authorization, transactionType, documentCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve service transactions
     * Retrieve a single transaction
     * @param authorization Bearer {auth} (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param documentCode Document Code (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void retrieveServiceTransactionDocument(String authorization, String transactionType, String documentCode) throws ApiException {
        retrieveServiceTransactionDocumentWithHttpInfo(authorization, transactionType, documentCode);
    }

    /**
     * Retrieve service transactions
     * Retrieve a single transaction
     * @param authorization Bearer {auth} (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param documentCode Document Code (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> retrieveServiceTransactionDocumentWithHttpInfo(String authorization, String transactionType, String documentCode) throws ApiException {
        com.squareup.okhttp.Call call = retrieveServiceTransactionDocumentValidateBeforeCall(authorization, transactionType, documentCode, null, null);
        return apiClient.execute(call);
    }

    /**
     * Retrieve service transactions (asynchronously)
     * Retrieve a single transaction
     * @param authorization Bearer {auth} (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param documentCode Document Code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveServiceTransactionDocumentAsync(String authorization, String transactionType, String documentCode, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveServiceTransactionDocumentValidateBeforeCall(authorization, transactionType, documentCode, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for retrieveServiceTransactions */
    private com.squareup.okhttp.Call retrieveServiceTransactionsCall(String authorization, String transactionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/calculations/service/{transactionType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "transactionType" + "\\}", apiClient.escapeString(transactionType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveServiceTransactionsValidateBeforeCall(String authorization, String transactionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveServiceTransactions(Async)");
        }
        
        // verify the required parameter 'transactionType' is set
        if (transactionType == null) {
            throw new ApiException("Missing the required parameter 'transactionType' when calling retrieveServiceTransactions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = retrieveServiceTransactionsCall(authorization, transactionType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve service transactions
     * Retrieve a list of transactions
     * @param authorization Bearer {auth} (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void retrieveServiceTransactions(String authorization, String transactionType) throws ApiException {
        retrieveServiceTransactionsWithHttpInfo(authorization, transactionType);
    }

    /**
     * Retrieve service transactions
     * Retrieve a list of transactions
     * @param authorization Bearer {auth} (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> retrieveServiceTransactionsWithHttpInfo(String authorization, String transactionType) throws ApiException {
        com.squareup.okhttp.Call call = retrieveServiceTransactionsValidateBeforeCall(authorization, transactionType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Retrieve service transactions (asynchronously)
     * Retrieve a list of transactions
     * @param authorization Bearer {auth} (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveServiceTransactionsAsync(String authorization, String transactionType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveServiceTransactionsValidateBeforeCall(authorization, transactionType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
