/*
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Message;
import io.swagger.client.model.PaymentTransactionIn;
import io.swagger.client.model.PaymentTransactionOut;
import io.swagger.client.model.PurchaseTransactionIn;
import io.swagger.client.model.PurchaseTransactionOut;
import io.swagger.client.model.ReceiptTransactionIn;
import io.swagger.client.model.ReceiptTransactionOut;
import io.swagger.client.model.SalesTransactionIn;
import io.swagger.client.model.SalesTransactionOut;
import io.swagger.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServiceCalculationsApi {
    private ApiClient apiClient;

    public ServiceCalculationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceCalculationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet */
    private com.squareup.okhttp.Call calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetCall(String authorization, String accountId, String companyCode, String transactionType, String documentCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "companyCode" + "\\}", apiClient.escapeString(companyCode.toString()))
        .replaceAll("\\{" + "transactionType" + "\\}", apiClient.escapeString(transactionType.toString()))
        .replaceAll("\\{" + "documentCode" + "\\}", apiClient.escapeString(documentCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetValidateBeforeCall(String authorization, String accountId, String companyCode, String transactionType, String documentCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(Async)");
        }
        
        // verify the required parameter 'companyCode' is set
        if (companyCode == null) {
            throw new ApiException("Missing the required parameter 'companyCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(Async)");
        }
        
        // verify the required parameter 'transactionType' is set
        if (transactionType == null) {
            throw new ApiException("Missing the required parameter 'transactionType' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(Async)");
        }
        
        // verify the required parameter 'documentCode' is set
        if (documentCode == null) {
            throw new ApiException("Missing the required parameter 'documentCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetCall(authorization, accountId, companyCode, transactionType, documentCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve transactions
     * Retrieve a single transaction
     * @param authorization Bearer {auth} (required)
     * @param accountId Account ID (required)
     * @param companyCode Company Code (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param documentCode Document Code (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(String authorization, String accountId, String companyCode, String transactionType, String documentCode) throws ApiException {
        calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithHttpInfo(authorization, accountId, companyCode, transactionType, documentCode);
    }

    /**
     * Retrieve transactions
     * Retrieve a single transaction
     * @param authorization Bearer {auth} (required)
     * @param accountId Account ID (required)
     * @param companyCode Company Code (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param documentCode Document Code (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithHttpInfo(String authorization, String accountId, String companyCode, String transactionType, String documentCode) throws ApiException {
        com.squareup.okhttp.Call call = calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetValidateBeforeCall(authorization, accountId, companyCode, transactionType, documentCode, null, null);
        return apiClient.execute(call);
    }

    /**
     * Retrieve transactions (asynchronously)
     * Retrieve a single transaction
     * @param authorization Bearer {auth} (required)
     * @param accountId Account ID (required)
     * @param companyCode Company Code (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param documentCode Document Code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetAsync(String authorization, String accountId, String companyCode, String transactionType, String documentCode, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetValidateBeforeCall(authorization, accountId, companyCode, transactionType, documentCode, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost */
    private com.squareup.okhttp.Call calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostCall(String authorization, String accountId, String companyCode, String transactionType, String documentCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/transactions".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "companyCode" + "\\}", apiClient.escapeString(companyCode.toString()))
        .replaceAll("\\{" + "transactionType" + "\\}", apiClient.escapeString(transactionType.toString()))
        .replaceAll("\\{" + "documentCode" + "\\}", apiClient.escapeString(documentCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostValidateBeforeCall(String authorization, String accountId, String companyCode, String transactionType, String documentCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost(Async)");
        }
        
        // verify the required parameter 'companyCode' is set
        if (companyCode == null) {
            throw new ApiException("Missing the required parameter 'companyCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost(Async)");
        }
        
        // verify the required parameter 'transactionType' is set
        if (transactionType == null) {
            throw new ApiException("Missing the required parameter 'transactionType' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost(Async)");
        }
        
        // verify the required parameter 'documentCode' is set
        if (documentCode == null) {
            throw new ApiException("Missing the required parameter 'documentCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostCall(authorization, accountId, companyCode, transactionType, documentCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Promote a calculation to transaction
     * Promote a calculation to transaction
     * @param authorization Bearer {auth} (required)
     * @param accountId Account ID (required)
     * @param companyCode Company Code (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param documentCode Document Code (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost(String authorization, String accountId, String companyCode, String transactionType, String documentCode) throws ApiException {
        calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostWithHttpInfo(authorization, accountId, companyCode, transactionType, documentCode);
    }

    /**
     * Promote a calculation to transaction
     * Promote a calculation to transaction
     * @param authorization Bearer {auth} (required)
     * @param accountId Account ID (required)
     * @param companyCode Company Code (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param documentCode Document Code (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostWithHttpInfo(String authorization, String accountId, String companyCode, String transactionType, String documentCode) throws ApiException {
        com.squareup.okhttp.Call call = calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostValidateBeforeCall(authorization, accountId, companyCode, transactionType, documentCode, null, null);
        return apiClient.execute(call);
    }

    /**
     * Promote a calculation to transaction (asynchronously)
     * Promote a calculation to transaction
     * @param authorization Bearer {auth} (required)
     * @param accountId Account ID (required)
     * @param companyCode Company Code (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param documentCode Document Code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostAsync(String authorization, String accountId, String companyCode, String transactionType, String documentCode, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostValidateBeforeCall(authorization, accountId, companyCode, transactionType, documentCode, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet */
    private com.squareup.okhttp.Call calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetCall(String authorization, String accountId, String companyCode, String transactionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "companyCode" + "\\}", apiClient.escapeString(companyCode.toString()))
        .replaceAll("\\{" + "transactionType" + "\\}", apiClient.escapeString(transactionType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetValidateBeforeCall(String authorization, String accountId, String companyCode, String transactionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(Async)");
        }
        
        // verify the required parameter 'companyCode' is set
        if (companyCode == null) {
            throw new ApiException("Missing the required parameter 'companyCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(Async)");
        }
        
        // verify the required parameter 'transactionType' is set
        if (transactionType == null) {
            throw new ApiException("Missing the required parameter 'transactionType' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetCall(authorization, accountId, companyCode, transactionType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve transactions
     * Retrieve a list of transactions
     * @param authorization Bearer {auth} (required)
     * @param accountId Account ID (required)
     * @param companyCode Company Code (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(String authorization, String accountId, String companyCode, String transactionType) throws ApiException {
        calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithHttpInfo(authorization, accountId, companyCode, transactionType);
    }

    /**
     * Retrieve transactions
     * Retrieve a list of transactions
     * @param authorization Bearer {auth} (required)
     * @param accountId Account ID (required)
     * @param companyCode Company Code (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithHttpInfo(String authorization, String accountId, String companyCode, String transactionType) throws ApiException {
        com.squareup.okhttp.Call call = calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetValidateBeforeCall(authorization, accountId, companyCode, transactionType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Retrieve transactions (asynchronously)
     * Retrieve a list of transactions
     * @param authorization Bearer {auth} (required)
     * @param accountId Account ID (required)
     * @param companyCode Company Code (required)
     * @param transactionType Transaction Type (sale, purchase, receipts or payment) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetAsync(String authorization, String accountId, String companyCode, String transactionType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetValidateBeforeCall(authorization, accountId, companyCode, transactionType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for calculationsservicePaymentPost */
    private com.squareup.okhttp.Call calculationsservicePaymentPostCall(String authorization, PaymentTransactionIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/calculations?service-payment".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call calculationsservicePaymentPostValidateBeforeCall(String authorization, PaymentTransactionIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling calculationsservicePaymentPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling calculationsservicePaymentPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = calculationsservicePaymentPostCall(authorization, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @return PaymentTransactionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentTransactionOut calculationsservicePaymentPost(String authorization, PaymentTransactionIn body) throws ApiException {
        ApiResponse<PaymentTransactionOut> resp = calculationsservicePaymentPostWithHttpInfo(authorization, body);
        return resp.getData();
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @return ApiResponse&lt;PaymentTransactionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentTransactionOut> calculationsservicePaymentPostWithHttpInfo(String authorization, PaymentTransactionIn body) throws ApiException {
        com.squareup.okhttp.Call call = calculationsservicePaymentPostValidateBeforeCall(authorization, body, null, null);
        Type localVarReturnType = new TypeToken<PaymentTransactionOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculation Method (asynchronously)
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call calculationsservicePaymentPostAsync(String authorization, PaymentTransactionIn body, final ApiCallback<PaymentTransactionOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = calculationsservicePaymentPostValidateBeforeCall(authorization, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentTransactionOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for calculationsservicePurchasePost */
    private com.squareup.okhttp.Call calculationsservicePurchasePostCall(String authorization, PurchaseTransactionIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/calculations?service-purchase".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call calculationsservicePurchasePostValidateBeforeCall(String authorization, PurchaseTransactionIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling calculationsservicePurchasePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling calculationsservicePurchasePost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = calculationsservicePurchasePostCall(authorization, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @return PurchaseTransactionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PurchaseTransactionOut calculationsservicePurchasePost(String authorization, PurchaseTransactionIn body) throws ApiException {
        ApiResponse<PurchaseTransactionOut> resp = calculationsservicePurchasePostWithHttpInfo(authorization, body);
        return resp.getData();
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @return ApiResponse&lt;PurchaseTransactionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PurchaseTransactionOut> calculationsservicePurchasePostWithHttpInfo(String authorization, PurchaseTransactionIn body) throws ApiException {
        com.squareup.okhttp.Call call = calculationsservicePurchasePostValidateBeforeCall(authorization, body, null, null);
        Type localVarReturnType = new TypeToken<PurchaseTransactionOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculation Method (asynchronously)
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call calculationsservicePurchasePostAsync(String authorization, PurchaseTransactionIn body, final ApiCallback<PurchaseTransactionOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = calculationsservicePurchasePostValidateBeforeCall(authorization, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PurchaseTransactionOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for calculationsserviceReceiptPost */
    private com.squareup.okhttp.Call calculationsserviceReceiptPostCall(String authorization, ReceiptTransactionIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/calculations?service-receipt".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call calculationsserviceReceiptPostValidateBeforeCall(String authorization, ReceiptTransactionIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling calculationsserviceReceiptPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling calculationsserviceReceiptPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = calculationsserviceReceiptPostCall(authorization, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @return ReceiptTransactionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReceiptTransactionOut calculationsserviceReceiptPost(String authorization, ReceiptTransactionIn body) throws ApiException {
        ApiResponse<ReceiptTransactionOut> resp = calculationsserviceReceiptPostWithHttpInfo(authorization, body);
        return resp.getData();
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @return ApiResponse&lt;ReceiptTransactionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReceiptTransactionOut> calculationsserviceReceiptPostWithHttpInfo(String authorization, ReceiptTransactionIn body) throws ApiException {
        com.squareup.okhttp.Call call = calculationsserviceReceiptPostValidateBeforeCall(authorization, body, null, null);
        Type localVarReturnType = new TypeToken<ReceiptTransactionOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculation Method (asynchronously)
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call calculationsserviceReceiptPostAsync(String authorization, ReceiptTransactionIn body, final ApiCallback<ReceiptTransactionOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = calculationsserviceReceiptPostValidateBeforeCall(authorization, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReceiptTransactionOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for calculationsserviceSalesPost */
    private com.squareup.okhttp.Call calculationsserviceSalesPostCall(String authorization, SalesTransactionIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/calculations?service-sales".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call calculationsserviceSalesPostValidateBeforeCall(String authorization, SalesTransactionIn body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling calculationsserviceSalesPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling calculationsserviceSalesPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = calculationsserviceSalesPostCall(authorization, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @return SalesTransactionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SalesTransactionOut calculationsserviceSalesPost(String authorization, SalesTransactionIn body) throws ApiException {
        ApiResponse<SalesTransactionOut> resp = calculationsserviceSalesPostWithHttpInfo(authorization, body);
        return resp.getData();
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @return ApiResponse&lt;SalesTransactionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SalesTransactionOut> calculationsserviceSalesPostWithHttpInfo(String authorization, SalesTransactionIn body) throws ApiException {
        com.squareup.okhttp.Call call = calculationsserviceSalesPostValidateBeforeCall(authorization, body, null, null);
        Type localVarReturnType = new TypeToken<SalesTransactionOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculation Method (asynchronously)
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
     * @param authorization Bearer {auth} (required)
     * @param body Transaction Message (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call calculationsserviceSalesPostAsync(String authorization, SalesTransactionIn body, final ApiCallback<SalesTransactionOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = calculationsserviceSalesPostValidateBeforeCall(authorization, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SalesTransactionOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
