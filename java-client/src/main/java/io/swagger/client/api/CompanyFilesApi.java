/*
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.Body2;
import io.swagger.client.model.Body3;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.Message;
import io.swagger.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CompanyFilesApi {
    private ApiClient apiClient;

    public CompanyFilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CompanyFilesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for companiesCompanyIdNfseCertificateDelete */
    private com.squareup.okhttp.Call companiesCompanyIdNfseCertificateDeleteCall(String companyId, String companyId2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/companies/{companyId}/nfse-certificate".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "companyId" + "\\}", apiClient.escapeString(companyId.toString()))
        .replaceAll("\\{" + "companyId" + "\\}", apiClient.escapeString(companyId2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call companiesCompanyIdNfseCertificateDeleteValidateBeforeCall(String companyId, String companyId2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling companiesCompanyIdNfseCertificateDelete(Async)");
        }
        
        // verify the required parameter 'companyId2' is set
        if (companyId2 == null) {
            throw new ApiException("Missing the required parameter 'companyId2' when calling companiesCompanyIdNfseCertificateDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = companiesCompanyIdNfseCertificateDeleteCall(companyId, companyId2, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Deletes a company file store.  
     * @param companyId Company ID (required)
     * @param companyId2 Company ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void companiesCompanyIdNfseCertificateDelete(String companyId, String companyId2) throws ApiException {
        companiesCompanyIdNfseCertificateDeleteWithHttpInfo(companyId, companyId2);
    }

    /**
     * 
     * Deletes a company file store.  
     * @param companyId Company ID (required)
     * @param companyId2 Company ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> companiesCompanyIdNfseCertificateDeleteWithHttpInfo(String companyId, String companyId2) throws ApiException {
        com.squareup.okhttp.Call call = companiesCompanyIdNfseCertificateDeleteValidateBeforeCall(companyId, companyId2, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Deletes a company file store.  
     * @param companyId Company ID (required)
     * @param companyId2 Company ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call companiesCompanyIdNfseCertificateDeleteAsync(String companyId, String companyId2, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = companiesCompanyIdNfseCertificateDeleteValidateBeforeCall(companyId, companyId2, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for companiesCompanyIdNfseCertificateGet */
    private com.squareup.okhttp.Call companiesCompanyIdNfseCertificateGetCall(String companyId, String companyId2, BigDecimal peek, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/companies/{companyId}/nfse-certificate".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "companyId" + "\\}", apiClient.escapeString(companyId.toString()))
        .replaceAll("\\{" + "companyId" + "\\}", apiClient.escapeString(companyId2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (peek != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "peek", peek));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call companiesCompanyIdNfseCertificateGetValidateBeforeCall(String companyId, String companyId2, BigDecimal peek, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling companiesCompanyIdNfseCertificateGet(Async)");
        }
        
        // verify the required parameter 'companyId2' is set
        if (companyId2 == null) {
            throw new ApiException("Missing the required parameter 'companyId2' when calling companiesCompanyIdNfseCertificateGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = companiesCompanyIdNfseCertificateGetCall(companyId, companyId2, peek, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Gets an existing NFSe certificate file for this company. 
     * @param companyId Company ID (required)
     * @param companyId2 Company ID (required)
     * @param peek Use this parameter to check the existence of the file without downloading it. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void companiesCompanyIdNfseCertificateGet(String companyId, String companyId2, BigDecimal peek) throws ApiException {
        companiesCompanyIdNfseCertificateGetWithHttpInfo(companyId, companyId2, peek);
    }

    /**
     * 
     * Gets an existing NFSe certificate file for this company. 
     * @param companyId Company ID (required)
     * @param companyId2 Company ID (required)
     * @param peek Use this parameter to check the existence of the file without downloading it. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> companiesCompanyIdNfseCertificateGetWithHttpInfo(String companyId, String companyId2, BigDecimal peek) throws ApiException {
        com.squareup.okhttp.Call call = companiesCompanyIdNfseCertificateGetValidateBeforeCall(companyId, companyId2, peek, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Gets an existing NFSe certificate file for this company. 
     * @param companyId Company ID (required)
     * @param companyId2 Company ID (required)
     * @param peek Use this parameter to check the existence of the file without downloading it. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call companiesCompanyIdNfseCertificateGetAsync(String companyId, String companyId2, BigDecimal peek, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = companiesCompanyIdNfseCertificateGetValidateBeforeCall(companyId, companyId2, peek, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for companiesCompanyIdNfseCertificatePost */
    private com.squareup.okhttp.Call companiesCompanyIdNfseCertificatePostCall(String companyId, Body3 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/companies/{companyId}/nfse-certificate".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "companyId" + "\\}", apiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call companiesCompanyIdNfseCertificatePostValidateBeforeCall(String companyId, Body3 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling companiesCompanyIdNfseCertificatePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling companiesCompanyIdNfseCertificatePost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = companiesCompanyIdNfseCertificatePostCall(companyId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * If it still not exists, uploads a new NFSe Certificate file for this company. Send the file as a base64 string. 
     * @param companyId Company ID (required)
     * @param body Content (required)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 companiesCompanyIdNfseCertificatePost(String companyId, Body3 body) throws ApiException {
        ApiResponse<InlineResponse2002> resp = companiesCompanyIdNfseCertificatePostWithHttpInfo(companyId, body);
        return resp.getData();
    }

    /**
     * 
     * If it still not exists, uploads a new NFSe Certificate file for this company. Send the file as a base64 string. 
     * @param companyId Company ID (required)
     * @param body Content (required)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> companiesCompanyIdNfseCertificatePostWithHttpInfo(String companyId, Body3 body) throws ApiException {
        com.squareup.okhttp.Call call = companiesCompanyIdNfseCertificatePostValidateBeforeCall(companyId, body, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * If it still not exists, uploads a new NFSe Certificate file for this company. Send the file as a base64 string. 
     * @param companyId Company ID (required)
     * @param body Content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call companiesCompanyIdNfseCertificatePostAsync(String companyId, Body3 body, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = companiesCompanyIdNfseCertificatePostValidateBeforeCall(companyId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for companiesCompanyIdNfseCertificatePut */
    private com.squareup.okhttp.Call companiesCompanyIdNfseCertificatePutCall(String companyId, String companyId2, Body2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/companies/{companyId}/nfse-certificate".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "companyId" + "\\}", apiClient.escapeString(companyId.toString()))
        .replaceAll("\\{" + "companyId" + "\\}", apiClient.escapeString(companyId2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call companiesCompanyIdNfseCertificatePutValidateBeforeCall(String companyId, String companyId2, Body2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling companiesCompanyIdNfseCertificatePut(Async)");
        }
        
        // verify the required parameter 'companyId2' is set
        if (companyId2 == null) {
            throw new ApiException("Missing the required parameter 'companyId2' when calling companiesCompanyIdNfseCertificatePut(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling companiesCompanyIdNfseCertificatePut(Async)");
        }
        
        
        com.squareup.okhttp.Call call = companiesCompanyIdNfseCertificatePutCall(companyId, companyId2, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Updates an existing NFSe certificate file for this company. Send the file as a base64 string. 
     * @param companyId Company ID (required)
     * @param companyId2 Company ID (required)
     * @param body Content (required)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 companiesCompanyIdNfseCertificatePut(String companyId, String companyId2, Body2 body) throws ApiException {
        ApiResponse<InlineResponse2002> resp = companiesCompanyIdNfseCertificatePutWithHttpInfo(companyId, companyId2, body);
        return resp.getData();
    }

    /**
     * 
     * Updates an existing NFSe certificate file for this company. Send the file as a base64 string. 
     * @param companyId Company ID (required)
     * @param companyId2 Company ID (required)
     * @param body Content (required)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> companiesCompanyIdNfseCertificatePutWithHttpInfo(String companyId, String companyId2, Body2 body) throws ApiException {
        com.squareup.okhttp.Call call = companiesCompanyIdNfseCertificatePutValidateBeforeCall(companyId, companyId2, body, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing NFSe certificate file for this company. Send the file as a base64 string. 
     * @param companyId Company ID (required)
     * @param companyId2 Company ID (required)
     * @param body Content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call companiesCompanyIdNfseCertificatePutAsync(String companyId, String companyId2, Body2 body, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = companiesCompanyIdNfseCertificatePutValidateBeforeCall(companyId, companyId2, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
