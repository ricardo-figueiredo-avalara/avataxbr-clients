/*
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Filter this message application to specified tax cases. - taxtype - jurisdictionType 
 */
@ApiModel(description = "Filter this message application to specified tax cases. - taxtype - jurisdictionType ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-04-06T17:54:07.550Z")
public class LegalReasonTaxScope {
  /**
   * This is the Tax Type to apply legal messages. - 'NONE' - 'INSS' - 'IRRF' - 'IRPJ' - 'PIS' - 'COFINS' - 'CSLL' - 'IPI' - 'ICMS' - 'II' - 'IOF' - 'ISS' - 'APROXTOTALTAX' 
   */
  public enum TaxTypeEnum {
    @SerializedName("NONE")
    NONE("NONE"),
    
    @SerializedName("INSS")
    INSS("INSS"),
    
    @SerializedName("IRRF")
    IRRF("IRRF"),
    
    @SerializedName("IRPJ")
    IRPJ("IRPJ"),
    
    @SerializedName("PIS")
    PIS("PIS"),
    
    @SerializedName("COFINS")
    COFINS("COFINS"),
    
    @SerializedName("CSLL")
    CSLL("CSLL"),
    
    @SerializedName("IPI")
    IPI("IPI"),
    
    @SerializedName("ICMS")
    ICMS("ICMS"),
    
    @SerializedName("II")
    II("II"),
    
    @SerializedName("IOF")
    IOF("IOF"),
    
    @SerializedName("ISS")
    ISS("ISS"),
    
    @SerializedName("APROXTOTALTAX")
    APROXTOTALTAX("APROXTOTALTAX");

    private String value;

    TaxTypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("taxType")
  private TaxTypeEnum taxType = null;

  /**
   * These are the specific tax types to which a message may be applied - 'icms' - 'icmsSt' - 'icmsStSd' - 'icmsPartOwn' - 'icmsPartDest' - 'icmsDifaFCP' - 'icmsDifaDest' - 'icmsDifaRemet' - 'icmsRf' - 'icmsDeson' - 'icmsCredsn' - 'pis' - 'pisSt' - 'cofins' - 'cofinsSt' - 'ipi' - 'ipiReturned' - 'ii' - 'iof' 
   */
  public enum SpecializedTaxTypeEnum {
    @SerializedName("icms")
    ICMS("icms"),
    
    @SerializedName("icmsSt")
    ICMSST("icmsSt"),
    
    @SerializedName("icmsStSd")
    ICMSSTSD("icmsStSd"),
    
    @SerializedName("icmsPartOwn")
    ICMSPARTOWN("icmsPartOwn"),
    
    @SerializedName("icmsPartDest")
    ICMSPARTDEST("icmsPartDest"),
    
    @SerializedName("icmsDifaFCP")
    ICMSDIFAFCP("icmsDifaFCP"),
    
    @SerializedName("icmsDifaDest")
    ICMSDIFADEST("icmsDifaDest"),
    
    @SerializedName("icmsDifaRemet")
    ICMSDIFAREMET("icmsDifaRemet"),
    
    @SerializedName("icmsRf")
    ICMSRF("icmsRf"),
    
    @SerializedName("icmsDeson")
    ICMSDESON("icmsDeson"),
    
    @SerializedName("icmsCredsn")
    ICMSCREDSN("icmsCredsn"),
    
    @SerializedName("pis")
    PIS("pis"),
    
    @SerializedName("pisSt")
    PISST("pisSt"),
    
    @SerializedName("cofins")
    COFINS("cofins"),
    
    @SerializedName("cofinsSt")
    COFINSST("cofinsSt"),
    
    @SerializedName("ipi")
    IPI("ipi"),
    
    @SerializedName("ipiReturned")
    IPIRETURNED("ipiReturned"),
    
    @SerializedName("ii")
    II("ii"),
    
    @SerializedName("iof")
    IOF("iof");

    private String value;

    SpecializedTaxTypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("specializedTaxType")
  private SpecializedTaxTypeEnum specializedTaxType = null;

  /**
   * Types of jurisdiction - 'NONE' - 'City' - 'State' - 'Country' 
   */
  public enum JurisdictionTypeEnum {
    @SerializedName("NONE")
    NONE("NONE"),
    
    @SerializedName("City")
    CITY("City"),
    
    @SerializedName("State")
    STATE("State"),
    
    @SerializedName("Country")
    COUNTRY("Country");

    private String value;

    JurisdictionTypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("jurisdictionType")
  private JurisdictionTypeEnum jurisdictionType = null;

  @SerializedName("jurisdictionIbgeCode")
  private String jurisdictionIbgeCode = null;

  public LegalReasonTaxScope taxType(TaxTypeEnum taxType) {
    this.taxType = taxType;
    return this;
  }

   /**
   * This is the Tax Type to apply legal messages. - 'NONE' - 'INSS' - 'IRRF' - 'IRPJ' - 'PIS' - 'COFINS' - 'CSLL' - 'IPI' - 'ICMS' - 'II' - 'IOF' - 'ISS' - 'APROXTOTALTAX' 
   * @return taxType
  **/
  @ApiModelProperty(example = "null", required = true, value = "This is the Tax Type to apply legal messages. - 'NONE' - 'INSS' - 'IRRF' - 'IRPJ' - 'PIS' - 'COFINS' - 'CSLL' - 'IPI' - 'ICMS' - 'II' - 'IOF' - 'ISS' - 'APROXTOTALTAX' ")
  public TaxTypeEnum getTaxType() {
    return taxType;
  }

  public void setTaxType(TaxTypeEnum taxType) {
    this.taxType = taxType;
  }

  public LegalReasonTaxScope specializedTaxType(SpecializedTaxTypeEnum specializedTaxType) {
    this.specializedTaxType = specializedTaxType;
    return this;
  }

   /**
   * These are the specific tax types to which a message may be applied - 'icms' - 'icmsSt' - 'icmsStSd' - 'icmsPartOwn' - 'icmsPartDest' - 'icmsDifaFCP' - 'icmsDifaDest' - 'icmsDifaRemet' - 'icmsRf' - 'icmsDeson' - 'icmsCredsn' - 'pis' - 'pisSt' - 'cofins' - 'cofinsSt' - 'ipi' - 'ipiReturned' - 'ii' - 'iof' 
   * @return specializedTaxType
  **/
  @ApiModelProperty(example = "null", value = "These are the specific tax types to which a message may be applied - 'icms' - 'icmsSt' - 'icmsStSd' - 'icmsPartOwn' - 'icmsPartDest' - 'icmsDifaFCP' - 'icmsDifaDest' - 'icmsDifaRemet' - 'icmsRf' - 'icmsDeson' - 'icmsCredsn' - 'pis' - 'pisSt' - 'cofins' - 'cofinsSt' - 'ipi' - 'ipiReturned' - 'ii' - 'iof' ")
  public SpecializedTaxTypeEnum getSpecializedTaxType() {
    return specializedTaxType;
  }

  public void setSpecializedTaxType(SpecializedTaxTypeEnum specializedTaxType) {
    this.specializedTaxType = specializedTaxType;
  }

  public LegalReasonTaxScope jurisdictionType(JurisdictionTypeEnum jurisdictionType) {
    this.jurisdictionType = jurisdictionType;
    return this;
  }

   /**
   * Types of jurisdiction - 'NONE' - 'City' - 'State' - 'Country' 
   * @return jurisdictionType
  **/
  @ApiModelProperty(example = "null", required = true, value = "Types of jurisdiction - 'NONE' - 'City' - 'State' - 'Country' ")
  public JurisdictionTypeEnum getJurisdictionType() {
    return jurisdictionType;
  }

  public void setJurisdictionType(JurisdictionTypeEnum jurisdictionType) {
    this.jurisdictionType = jurisdictionType;
  }

  public LegalReasonTaxScope jurisdictionIbgeCode(String jurisdictionIbgeCode) {
    this.jurisdictionIbgeCode = jurisdictionIbgeCode;
    return this;
  }

   /**
   * Code to identify the Jurisdiction
   * @return jurisdictionIbgeCode
  **/
  @ApiModelProperty(example = "null", value = "Code to identify the Jurisdiction")
  public String getJurisdictionIbgeCode() {
    return jurisdictionIbgeCode;
  }

  public void setJurisdictionIbgeCode(String jurisdictionIbgeCode) {
    this.jurisdictionIbgeCode = jurisdictionIbgeCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalReasonTaxScope legalReasonTaxScope = (LegalReasonTaxScope) o;
    return Objects.equals(this.taxType, legalReasonTaxScope.taxType) &&
        Objects.equals(this.specializedTaxType, legalReasonTaxScope.specializedTaxType) &&
        Objects.equals(this.jurisdictionType, legalReasonTaxScope.jurisdictionType) &&
        Objects.equals(this.jurisdictionIbgeCode, legalReasonTaxScope.jurisdictionIbgeCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(taxType, specializedTaxType, jurisdictionType, jurisdictionIbgeCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalReasonTaxScope {\n");
    
    sb.append("    taxType: ").append(toIndentedString(taxType)).append("\n");
    sb.append("    specializedTaxType: ").append(toIndentedString(specializedTaxType)).append("\n");
    sb.append("    jurisdictionType: ").append(toIndentedString(jurisdictionType)).append("\n");
    sb.append("    jurisdictionIbgeCode: ").append(toIndentedString(jurisdictionIbgeCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

