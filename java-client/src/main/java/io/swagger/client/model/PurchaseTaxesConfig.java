/*
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * PurchaseTaxesConfig
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-02-16T18:26:15.214Z")
public class PurchaseTaxesConfig {
  /**
   * ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE=0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE 
   */
  public enum EntityAccruableCOFINSTaxationEnum {
    @SerializedName("T")
    T("T"),
    
    @SerializedName("N")
    N("N"),
    
    @SerializedName("Z")
    Z("Z"),
    
    @SerializedName("E")
    E("E"),
    
    @SerializedName("H")
    H("H"),
    
    @SerializedName("S")
    S("S");

    private String value;

    EntityAccruableCOFINSTaxationEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("entityAccruableCOFINSTaxation")
  private EntityAccruableCOFINSTaxationEnum entityAccruableCOFINSTaxation = EntityAccruableCOFINSTaxationEnum.T;

  /**
   * ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.   This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT 
   */
  public enum EntityAccruableCSLLTaxationEnum {
    @SerializedName("T")
    T("T"),
    
    @SerializedName("E")
    E("E");

    private String value;

    EntityAccruableCSLLTaxationEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("entityAccruableCSLLTaxation")
  private EntityAccruableCSLLTaxationEnum entityAccruableCSLLTaxation = EntityAccruableCSLLTaxationEnum.T;

  /**
   * ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE=0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE 
   */
  public enum EntityAccruablePISTaxationEnum {
    @SerializedName("T")
    T("T"),
    
    @SerializedName("N")
    N("N"),
    
    @SerializedName("Z")
    Z("Z"),
    
    @SerializedName("E")
    E("E"),
    
    @SerializedName("H")
    H("H"),
    
    @SerializedName("S")
    S("S");

    private String value;

    EntityAccruablePISTaxationEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("entityAccruablePISTaxation")
  private EntityAccruablePISTaxationEnum entityAccruablePISTaxation = EntityAccruablePISTaxationEnum.T;

  @SerializedName("accruableCOFINSExempCodeTaxation")
  private String accruableCOFINSExempCodeTaxation = null;

  @SerializedName("accruablePISExempCodeTaxation")
  private String accruablePISExempCodeTaxation = null;

  @SerializedName("accruablePISExemptReasonTaxation")
  private String accruablePISExemptReasonTaxation = null;

  @SerializedName("accruableCOFINSExemptReasonTaxation")
  private String accruableCOFINSExemptReasonTaxation = null;

  @SerializedName("accruableCSLLExemptReasonTaxation")
  private String accruableCSLLExemptReasonTaxation = null;

  @SerializedName("withholdingPIS")
  private Boolean withholdingPIS = true;

  @SerializedName("withholdingCOFINS")
  private Boolean withholdingCOFINS = true;

  @SerializedName("withholdingCSLL")
  private Boolean withholdingCSLL = true;

  @SerializedName("withholdingIRRF")
  private Boolean withholdingIRRF = true;

  @SerializedName("withholdCOFINSExemptReasonTaxation")
  private String withholdCOFINSExemptReasonTaxation = null;

  @SerializedName("withholdCSLLExemptReasonTaxation")
  private String withholdCSLLExemptReasonTaxation = null;

  @SerializedName("withholdPISExemptReasonTaxation")
  private String withholdPISExemptReasonTaxation = null;

  public PurchaseTaxesConfig entityAccruableCOFINSTaxation(EntityAccruableCOFINSTaxationEnum entityAccruableCOFINSTaxation) {
    this.entityAccruableCOFINSTaxation = entityAccruableCOFINSTaxation;
    return this;
  }

   /**
   * ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE=0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE 
   * @return entityAccruableCOFINSTaxation
  **/
  @ApiModelProperty(example = "null", value = "ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE=0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE ")
  public EntityAccruableCOFINSTaxationEnum getEntityAccruableCOFINSTaxation() {
    return entityAccruableCOFINSTaxation;
  }

  public void setEntityAccruableCOFINSTaxation(EntityAccruableCOFINSTaxationEnum entityAccruableCOFINSTaxation) {
    this.entityAccruableCOFINSTaxation = entityAccruableCOFINSTaxation;
  }

  public PurchaseTaxesConfig entityAccruableCSLLTaxation(EntityAccruableCSLLTaxationEnum entityAccruableCSLLTaxation) {
    this.entityAccruableCSLLTaxation = entityAccruableCSLLTaxation;
    return this;
  }

   /**
   * ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.   This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT 
   * @return entityAccruableCSLLTaxation
  **/
  @ApiModelProperty(example = "null", value = "ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.   This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT ")
  public EntityAccruableCSLLTaxationEnum getEntityAccruableCSLLTaxation() {
    return entityAccruableCSLLTaxation;
  }

  public void setEntityAccruableCSLLTaxation(EntityAccruableCSLLTaxationEnum entityAccruableCSLLTaxation) {
    this.entityAccruableCSLLTaxation = entityAccruableCSLLTaxation;
  }

  public PurchaseTaxesConfig entityAccruablePISTaxation(EntityAccruablePISTaxationEnum entityAccruablePISTaxation) {
    this.entityAccruablePISTaxation = entityAccruablePISTaxation;
    return this;
  }

   /**
   * ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE=0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE 
   * @return entityAccruablePISTaxation
  **/
  @ApiModelProperty(example = "null", value = "ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE=0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE ")
  public EntityAccruablePISTaxationEnum getEntityAccruablePISTaxation() {
    return entityAccruablePISTaxation;
  }

  public void setEntityAccruablePISTaxation(EntityAccruablePISTaxationEnum entityAccruablePISTaxation) {
    this.entityAccruablePISTaxation = entityAccruablePISTaxation;
  }

  public PurchaseTaxesConfig accruableCOFINSExempCodeTaxation(String accruableCOFINSExempCodeTaxation) {
    this.accruableCOFINSExempCodeTaxation = accruableCOFINSExempCodeTaxation;
    return this;
  }

   /**
   * This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption. When not Taxable of Seller point of view this field has the reason code.
   * @return accruableCOFINSExempCodeTaxation
  **/
  @ApiModelProperty(example = "null", value = "This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption. When not Taxable of Seller point of view this field has the reason code.")
  public String getAccruableCOFINSExempCodeTaxation() {
    return accruableCOFINSExempCodeTaxation;
  }

  public void setAccruableCOFINSExempCodeTaxation(String accruableCOFINSExempCodeTaxation) {
    this.accruableCOFINSExempCodeTaxation = accruableCOFINSExempCodeTaxation;
  }

  public PurchaseTaxesConfig accruablePISExempCodeTaxation(String accruablePISExempCodeTaxation) {
    this.accruablePISExempCodeTaxation = accruablePISExempCodeTaxation;
    return this;
  }

   /**
   * This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption. When not Taxable of Seller point of view this field has the reason code.
   * @return accruablePISExempCodeTaxation
  **/
  @ApiModelProperty(example = "null", value = "This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption. When not Taxable of Seller point of view this field has the reason code.")
  public String getAccruablePISExempCodeTaxation() {
    return accruablePISExempCodeTaxation;
  }

  public void setAccruablePISExempCodeTaxation(String accruablePISExempCodeTaxation) {
    this.accruablePISExempCodeTaxation = accruablePISExempCodeTaxation;
  }

  public PurchaseTaxesConfig accruablePISExemptReasonTaxation(String accruablePISExemptReasonTaxation) {
    this.accruablePISExemptReasonTaxation = accruablePISExemptReasonTaxation;
    return this;
  }

   /**
   * When Code is 999 the user system need send the custom reason to Exemption
   * @return accruablePISExemptReasonTaxation
  **/
  @ApiModelProperty(example = "null", value = "When Code is 999 the user system need send the custom reason to Exemption")
  public String getAccruablePISExemptReasonTaxation() {
    return accruablePISExemptReasonTaxation;
  }

  public void setAccruablePISExemptReasonTaxation(String accruablePISExemptReasonTaxation) {
    this.accruablePISExemptReasonTaxation = accruablePISExemptReasonTaxation;
  }

  public PurchaseTaxesConfig accruableCOFINSExemptReasonTaxation(String accruableCOFINSExemptReasonTaxation) {
    this.accruableCOFINSExemptReasonTaxation = accruableCOFINSExemptReasonTaxation;
    return this;
  }

   /**
   * When Code is 999 the user system need send the custom reason to Exemption
   * @return accruableCOFINSExemptReasonTaxation
  **/
  @ApiModelProperty(example = "null", value = "When Code is 999 the user system need send the custom reason to Exemption")
  public String getAccruableCOFINSExemptReasonTaxation() {
    return accruableCOFINSExemptReasonTaxation;
  }

  public void setAccruableCOFINSExemptReasonTaxation(String accruableCOFINSExemptReasonTaxation) {
    this.accruableCOFINSExemptReasonTaxation = accruableCOFINSExemptReasonTaxation;
  }

  public PurchaseTaxesConfig accruableCSLLExemptReasonTaxation(String accruableCSLLExemptReasonTaxation) {
    this.accruableCSLLExemptReasonTaxation = accruableCSLLExemptReasonTaxation;
    return this;
  }

   /**
   * CSLL no withholding Custom Reason
   * @return accruableCSLLExemptReasonTaxation
  **/
  @ApiModelProperty(example = "null", value = "CSLL no withholding Custom Reason")
  public String getAccruableCSLLExemptReasonTaxation() {
    return accruableCSLLExemptReasonTaxation;
  }

  public void setAccruableCSLLExemptReasonTaxation(String accruableCSLLExemptReasonTaxation) {
    this.accruableCSLLExemptReasonTaxation = accruableCSLLExemptReasonTaxation;
  }

  public PurchaseTaxesConfig withholdingPIS(Boolean withholdingPIS) {
    this.withholdingPIS = withholdingPIS;
    return this;
  }

   /**
   * Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
   * @return withholdingPIS
  **/
  @ApiModelProperty(example = "null", value = "Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.")
  public Boolean getWithholdingPIS() {
    return withholdingPIS;
  }

  public void setWithholdingPIS(Boolean withholdingPIS) {
    this.withholdingPIS = withholdingPIS;
  }

  public PurchaseTaxesConfig withholdingCOFINS(Boolean withholdingCOFINS) {
    this.withholdingCOFINS = withholdingCOFINS;
    return this;
  }

   /**
   * Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
   * @return withholdingCOFINS
  **/
  @ApiModelProperty(example = "null", value = "Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.")
  public Boolean getWithholdingCOFINS() {
    return withholdingCOFINS;
  }

  public void setWithholdingCOFINS(Boolean withholdingCOFINS) {
    this.withholdingCOFINS = withholdingCOFINS;
  }

  public PurchaseTaxesConfig withholdingCSLL(Boolean withholdingCSLL) {
    this.withholdingCSLL = withholdingCSLL;
    return this;
  }

   /**
   * Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
   * @return withholdingCSLL
  **/
  @ApiModelProperty(example = "null", value = "Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.")
  public Boolean getWithholdingCSLL() {
    return withholdingCSLL;
  }

  public void setWithholdingCSLL(Boolean withholdingCSLL) {
    this.withholdingCSLL = withholdingCSLL;
  }

  public PurchaseTaxesConfig withholdingIRRF(Boolean withholdingIRRF) {
    this.withholdingIRRF = withholdingIRRF;
    return this;
  }

   /**
   * Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
   * @return withholdingIRRF
  **/
  @ApiModelProperty(example = "null", value = "Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.")
  public Boolean getWithholdingIRRF() {
    return withholdingIRRF;
  }

  public void setWithholdingIRRF(Boolean withholdingIRRF) {
    this.withholdingIRRF = withholdingIRRF;
  }

  public PurchaseTaxesConfig withholdCOFINSExemptReasonTaxation(String withholdCOFINSExemptReasonTaxation) {
    this.withholdCOFINSExemptReasonTaxation = withholdCOFINSExemptReasonTaxation;
    return this;
  }

   /**
   * COFINS no withholding Custom Reason
   * @return withholdCOFINSExemptReasonTaxation
  **/
  @ApiModelProperty(example = "null", value = "COFINS no withholding Custom Reason")
  public String getWithholdCOFINSExemptReasonTaxation() {
    return withholdCOFINSExemptReasonTaxation;
  }

  public void setWithholdCOFINSExemptReasonTaxation(String withholdCOFINSExemptReasonTaxation) {
    this.withholdCOFINSExemptReasonTaxation = withholdCOFINSExemptReasonTaxation;
  }

  public PurchaseTaxesConfig withholdCSLLExemptReasonTaxation(String withholdCSLLExemptReasonTaxation) {
    this.withholdCSLLExemptReasonTaxation = withholdCSLLExemptReasonTaxation;
    return this;
  }

   /**
   * CSLL no withholding Custom Reason
   * @return withholdCSLLExemptReasonTaxation
  **/
  @ApiModelProperty(example = "null", value = "CSLL no withholding Custom Reason")
  public String getWithholdCSLLExemptReasonTaxation() {
    return withholdCSLLExemptReasonTaxation;
  }

  public void setWithholdCSLLExemptReasonTaxation(String withholdCSLLExemptReasonTaxation) {
    this.withholdCSLLExemptReasonTaxation = withholdCSLLExemptReasonTaxation;
  }

  public PurchaseTaxesConfig withholdPISExemptReasonTaxation(String withholdPISExemptReasonTaxation) {
    this.withholdPISExemptReasonTaxation = withholdPISExemptReasonTaxation;
    return this;
  }

   /**
   * PIS no withholding Custom Reason
   * @return withholdPISExemptReasonTaxation
  **/
  @ApiModelProperty(example = "null", value = "PIS no withholding Custom Reason")
  public String getWithholdPISExemptReasonTaxation() {
    return withholdPISExemptReasonTaxation;
  }

  public void setWithholdPISExemptReasonTaxation(String withholdPISExemptReasonTaxation) {
    this.withholdPISExemptReasonTaxation = withholdPISExemptReasonTaxation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PurchaseTaxesConfig purchaseTaxesConfig = (PurchaseTaxesConfig) o;
    return Objects.equals(this.entityAccruableCOFINSTaxation, purchaseTaxesConfig.entityAccruableCOFINSTaxation) &&
        Objects.equals(this.entityAccruableCSLLTaxation, purchaseTaxesConfig.entityAccruableCSLLTaxation) &&
        Objects.equals(this.entityAccruablePISTaxation, purchaseTaxesConfig.entityAccruablePISTaxation) &&
        Objects.equals(this.accruableCOFINSExempCodeTaxation, purchaseTaxesConfig.accruableCOFINSExempCodeTaxation) &&
        Objects.equals(this.accruablePISExempCodeTaxation, purchaseTaxesConfig.accruablePISExempCodeTaxation) &&
        Objects.equals(this.accruablePISExemptReasonTaxation, purchaseTaxesConfig.accruablePISExemptReasonTaxation) &&
        Objects.equals(this.accruableCOFINSExemptReasonTaxation, purchaseTaxesConfig.accruableCOFINSExemptReasonTaxation) &&
        Objects.equals(this.accruableCSLLExemptReasonTaxation, purchaseTaxesConfig.accruableCSLLExemptReasonTaxation) &&
        Objects.equals(this.withholdingPIS, purchaseTaxesConfig.withholdingPIS) &&
        Objects.equals(this.withholdingCOFINS, purchaseTaxesConfig.withholdingCOFINS) &&
        Objects.equals(this.withholdingCSLL, purchaseTaxesConfig.withholdingCSLL) &&
        Objects.equals(this.withholdingIRRF, purchaseTaxesConfig.withholdingIRRF) &&
        Objects.equals(this.withholdCOFINSExemptReasonTaxation, purchaseTaxesConfig.withholdCOFINSExemptReasonTaxation) &&
        Objects.equals(this.withholdCSLLExemptReasonTaxation, purchaseTaxesConfig.withholdCSLLExemptReasonTaxation) &&
        Objects.equals(this.withholdPISExemptReasonTaxation, purchaseTaxesConfig.withholdPISExemptReasonTaxation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityAccruableCOFINSTaxation, entityAccruableCSLLTaxation, entityAccruablePISTaxation, accruableCOFINSExempCodeTaxation, accruablePISExempCodeTaxation, accruablePISExemptReasonTaxation, accruableCOFINSExemptReasonTaxation, accruableCSLLExemptReasonTaxation, withholdingPIS, withholdingCOFINS, withholdingCSLL, withholdingIRRF, withholdCOFINSExemptReasonTaxation, withholdCSLLExemptReasonTaxation, withholdPISExemptReasonTaxation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PurchaseTaxesConfig {\n");
    
    sb.append("    entityAccruableCOFINSTaxation: ").append(toIndentedString(entityAccruableCOFINSTaxation)).append("\n");
    sb.append("    entityAccruableCSLLTaxation: ").append(toIndentedString(entityAccruableCSLLTaxation)).append("\n");
    sb.append("    entityAccruablePISTaxation: ").append(toIndentedString(entityAccruablePISTaxation)).append("\n");
    sb.append("    accruableCOFINSExempCodeTaxation: ").append(toIndentedString(accruableCOFINSExempCodeTaxation)).append("\n");
    sb.append("    accruablePISExempCodeTaxation: ").append(toIndentedString(accruablePISExempCodeTaxation)).append("\n");
    sb.append("    accruablePISExemptReasonTaxation: ").append(toIndentedString(accruablePISExemptReasonTaxation)).append("\n");
    sb.append("    accruableCOFINSExemptReasonTaxation: ").append(toIndentedString(accruableCOFINSExemptReasonTaxation)).append("\n");
    sb.append("    accruableCSLLExemptReasonTaxation: ").append(toIndentedString(accruableCSLLExemptReasonTaxation)).append("\n");
    sb.append("    withholdingPIS: ").append(toIndentedString(withholdingPIS)).append("\n");
    sb.append("    withholdingCOFINS: ").append(toIndentedString(withholdingCOFINS)).append("\n");
    sb.append("    withholdingCSLL: ").append(toIndentedString(withholdingCSLL)).append("\n");
    sb.append("    withholdingIRRF: ").append(toIndentedString(withholdingIRRF)).append("\n");
    sb.append("    withholdCOFINSExemptReasonTaxation: ").append(toIndentedString(withholdCOFINSExemptReasonTaxation)).append("\n");
    sb.append("    withholdCSLLExemptReasonTaxation: ").append(toIndentedString(withholdCSLLExemptReasonTaxation)).append("\n");
    sb.append("    withholdPISExemptReasonTaxation: ").append(toIndentedString(withholdPISExemptReasonTaxation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

