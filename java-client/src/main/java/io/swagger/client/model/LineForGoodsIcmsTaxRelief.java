/*
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * LineForGoodsIcmsTaxRelief
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-04-06T17:54:07.550Z")
public class LineForGoodsIcmsTaxRelief {
  /**
   * When item transaction subject to desoneration, this is the reason code - '1' # Táxi; - '3' # Produtor Agropecuário; - '4' # Frotista/Locadora; - '5' # Diplomático/Consular; - '6' # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações); - '7' # SUFRAMA; - '8' # Venda a órgão Público; - '9' # Outros - '10' # Deficiente Condutor - '11' # Deficiente não condutor - '12' # Fomento agropecuário - '16' # Olimpíadas Rio 2016 
   */
  public enum ReasonCodeEnum {
    @SerializedName("1")
    _1("1"),
    
    @SerializedName("3")
    _3("3"),
    
    @SerializedName("4")
    _4("4"),
    
    @SerializedName("5")
    _5("5"),
    
    @SerializedName("6")
    _6("6"),
    
    @SerializedName("7")
    _7("7"),
    
    @SerializedName("8")
    _8("8"),
    
    @SerializedName("9")
    _9("9"),
    
    @SerializedName("10")
    _10("10"),
    
    @SerializedName("11")
    _11("11"),
    
    @SerializedName("12")
    _12("12"),
    
    @SerializedName("16")
    _16("16");

    private String value;

    ReasonCodeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("reasonCode")
  private ReasonCodeEnum reasonCode = null;

  @SerializedName("taxBaseDiscount")
  private Double taxBaseDiscount = null;

  @SerializedName("taxAmount")
  private Double taxAmount = null;

  public LineForGoodsIcmsTaxRelief reasonCode(ReasonCodeEnum reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

   /**
   * When item transaction subject to desoneration, this is the reason code - '1' # Táxi; - '3' # Produtor Agropecuário; - '4' # Frotista/Locadora; - '5' # Diplomático/Consular; - '6' # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações); - '7' # SUFRAMA; - '8' # Venda a órgão Público; - '9' # Outros - '10' # Deficiente Condutor - '11' # Deficiente não condutor - '12' # Fomento agropecuário - '16' # Olimpíadas Rio 2016 
   * @return reasonCode
  **/
  @ApiModelProperty(example = "null", required = true, value = "When item transaction subject to desoneration, this is the reason code - '1' # Táxi; - '3' # Produtor Agropecuário; - '4' # Frotista/Locadora; - '5' # Diplomático/Consular; - '6' # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações); - '7' # SUFRAMA; - '8' # Venda a órgão Público; - '9' # Outros - '10' # Deficiente Condutor - '11' # Deficiente não condutor - '12' # Fomento agropecuário - '16' # Olimpíadas Rio 2016 ")
  public ReasonCodeEnum getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(ReasonCodeEnum reasonCode) {
    this.reasonCode = reasonCode;
  }

  public LineForGoodsIcmsTaxRelief taxBaseDiscount(Double taxBaseDiscount) {
    this.taxBaseDiscount = taxBaseDiscount;
    return this;
  }

   /**
   * ICMS Tax base rate discount  (desconto na base do ICMS referetne a desoneração)
   * @return taxBaseDiscount
  **/
  @ApiModelProperty(example = "null", value = "ICMS Tax base rate discount  (desconto na base do ICMS referetne a desoneração)")
  public Double getTaxBaseDiscount() {
    return taxBaseDiscount;
  }

  public void setTaxBaseDiscount(Double taxBaseDiscount) {
    this.taxBaseDiscount = taxBaseDiscount;
  }

  public LineForGoodsIcmsTaxRelief taxAmount(Double taxAmount) {
    this.taxAmount = taxAmount;
    return this;
  }

   /**
   * Amount for Icms Relief (desoneração)
   * @return taxAmount
  **/
  @ApiModelProperty(example = "null", value = "Amount for Icms Relief (desoneração)")
  public Double getTaxAmount() {
    return taxAmount;
  }

  public void setTaxAmount(Double taxAmount) {
    this.taxAmount = taxAmount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineForGoodsIcmsTaxRelief lineForGoodsIcmsTaxRelief = (LineForGoodsIcmsTaxRelief) o;
    return Objects.equals(this.reasonCode, lineForGoodsIcmsTaxRelief.reasonCode) &&
        Objects.equals(this.taxBaseDiscount, lineForGoodsIcmsTaxRelief.taxBaseDiscount) &&
        Objects.equals(this.taxAmount, lineForGoodsIcmsTaxRelief.taxAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reasonCode, taxBaseDiscount, taxAmount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineForGoodsIcmsTaxRelief {\n");
    
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    taxBaseDiscount: ").append(toIndentedString(taxBaseDiscount)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

