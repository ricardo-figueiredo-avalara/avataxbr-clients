/*
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * LineForGoodsIcmsTaxRelief
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-02-16T18:26:15.214Z")
public class LineForGoodsIcmsTaxRelief {
  @SerializedName("icmsTaxReliefReasonCode")
  private Integer icmsTaxReliefReasonCode = null;

  @SerializedName("icmsReliefTaxRate")
  private Double icmsReliefTaxRate = null;

  @SerializedName("icmsReliefTaxAmount")
  private Double icmsReliefTaxAmount = null;

  public LineForGoodsIcmsTaxRelief icmsTaxReliefReasonCode(Integer icmsTaxReliefReasonCode) {
    this.icmsTaxReliefReasonCode = icmsTaxReliefReasonCode;
    return this;
  }

   /**
   * When item transaction subject to desoneration, this is the reason code - 1 # Táxi; - 3 # Produtor Agropecuário; - 4 # Frotista/Locadora; - 5 # Diplomático/Consular; - 6 # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações); - 7 # SUFRAMA; - 8 # Venda a órgão Público; - 9 # Outros - 10 # Deficiente Condutor - 11 # Deficiente não condutor - 12 # Fomento agropecuário - 16 # Olimpíadas Rio 2016 
   * @return icmsTaxReliefReasonCode
  **/
  @ApiModelProperty(example = "null", required = true, value = "When item transaction subject to desoneration, this is the reason code - 1 # Táxi; - 3 # Produtor Agropecuário; - 4 # Frotista/Locadora; - 5 # Diplomático/Consular; - 6 # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações); - 7 # SUFRAMA; - 8 # Venda a órgão Público; - 9 # Outros - 10 # Deficiente Condutor - 11 # Deficiente não condutor - 12 # Fomento agropecuário - 16 # Olimpíadas Rio 2016 ")
  public Integer getIcmsTaxReliefReasonCode() {
    return icmsTaxReliefReasonCode;
  }

  public void setIcmsTaxReliefReasonCode(Integer icmsTaxReliefReasonCode) {
    this.icmsTaxReliefReasonCode = icmsTaxReliefReasonCode;
  }

  public LineForGoodsIcmsTaxRelief icmsReliefTaxRate(Double icmsReliefTaxRate) {
    this.icmsReliefTaxRate = icmsReliefTaxRate;
    return this;
  }

   /**
   * ICMS Tax base rate discount  (desconto na base do ICMS referetne a desoneração)
   * @return icmsReliefTaxRate
  **/
  @ApiModelProperty(example = "null", value = "ICMS Tax base rate discount  (desconto na base do ICMS referetne a desoneração)")
  public Double getIcmsReliefTaxRate() {
    return icmsReliefTaxRate;
  }

  public void setIcmsReliefTaxRate(Double icmsReliefTaxRate) {
    this.icmsReliefTaxRate = icmsReliefTaxRate;
  }

  public LineForGoodsIcmsTaxRelief icmsReliefTaxAmount(Double icmsReliefTaxAmount) {
    this.icmsReliefTaxAmount = icmsReliefTaxAmount;
    return this;
  }

   /**
   * Amount for Icms Relief (desoneração)
   * @return icmsReliefTaxAmount
  **/
  @ApiModelProperty(example = "null", value = "Amount for Icms Relief (desoneração)")
  public Double getIcmsReliefTaxAmount() {
    return icmsReliefTaxAmount;
  }

  public void setIcmsReliefTaxAmount(Double icmsReliefTaxAmount) {
    this.icmsReliefTaxAmount = icmsReliefTaxAmount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineForGoodsIcmsTaxRelief lineForGoodsIcmsTaxRelief = (LineForGoodsIcmsTaxRelief) o;
    return Objects.equals(this.icmsTaxReliefReasonCode, lineForGoodsIcmsTaxRelief.icmsTaxReliefReasonCode) &&
        Objects.equals(this.icmsReliefTaxRate, lineForGoodsIcmsTaxRelief.icmsReliefTaxRate) &&
        Objects.equals(this.icmsReliefTaxAmount, lineForGoodsIcmsTaxRelief.icmsReliefTaxAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(icmsTaxReliefReasonCode, icmsReliefTaxRate, icmsReliefTaxAmount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineForGoodsIcmsTaxRelief {\n");
    
    sb.append("    icmsTaxReliefReasonCode: ").append(toIndentedString(icmsTaxReliefReasonCode)).append("\n");
    sb.append("    icmsReliefTaxRate: ").append(toIndentedString(icmsReliefTaxRate)).append("\n");
    sb.append("    icmsReliefTaxAmount: ").append(toIndentedString(icmsReliefTaxAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

