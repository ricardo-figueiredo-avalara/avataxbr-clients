/*
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;

import org.joda.time.DateTime;

import com.google.gson.annotations.SerializedName;

import io.swagger.annotations.ApiModelProperty;

/**
 * CompanyConfiguration
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-04-06T17:54:07.550Z")
public class CompanyConfiguration {
  @SerializedName("certificate")
  private String certificate = null;

  @SerializedName("certificatepwd")
  private String certificatepwd = null;

  @SerializedName("certificateexpiration")
  private DateTime certificateexpiration = null;

  @SerializedName("logo")
  private String logo = null;

  /**
   * how the document will be printed - '0' # without DANFE; - '1' # DANFe Letter; - '2' # DANFe Landscape; 
   */
  public enum TpImpNFeEnum {
    @SerializedName("0")
    _0("0"),
    
    @SerializedName("1")
    _1("1"),
    
    @SerializedName("2")
    _2("2");

    private String value;

    TpImpNFeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("tpImpNFe")
  private TpImpNFeEnum tpImpNFe = null;

  /**
   * how the document will be printed - '0' # without DANFE; - '4' # DANFe NFC-e; - '5' # DANFe NFC-e e-mail 
   */
  public enum TpImpNFCeEnum {
    @SerializedName("0")
    _0("0"),
    
    @SerializedName("4")
    _4("4"),
    
    @SerializedName("5")
    _5("5");

    private String value;

    TpImpNFCeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("tpImpNFCe")
  private TpImpNFCeEnum tpImpNFCe = null;

  public CompanyConfiguration certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

   /**
   * digital certificate A1 model, p12, encoded by base64
   * @return certificate
  **/
  @ApiModelProperty(example = "null", value = "digital certificate A1 model, p12, encoded by base64")
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }

  public CompanyConfiguration certificatepwd(String certificatepwd) {
    this.certificatepwd = certificatepwd;
    return this;
  }

   /**
   * certificate password
   * @return certificatepwd
  **/
  @ApiModelProperty(example = "null", value = "certificate password")
  public String getCertificatepwd() {
    return certificatepwd;
  }

  public void setCertificatepwd(String certificatepwd) {
    this.certificatepwd = certificatepwd;
  }

  public CompanyConfiguration certificateexpiration(DateTime certificateexpiration) {
    this.certificateexpiration = certificateexpiration;
    return this;
  }

   /**
   * expiration date of this certificate
   * @return certificateexpiration
  **/
  @ApiModelProperty(example = "null", value = "expiration date of this certificate")
  public DateTime getCertificateexpiration() {
    return certificateexpiration;
  }

  public void setCertificateexpiration(DateTime certificateexpiration) {
    this.certificateexpiration = certificateexpiration;
  }

  public CompanyConfiguration logo(String logo) {
    this.logo = logo;
    return this;
  }

   /**
   * company logo image encoded by base64
   * @return logo
  **/
  @ApiModelProperty(example = "null", value = "company logo image encoded by base64")
  public String getLogo() {
    return logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }

  public CompanyConfiguration tpImpNFe(TpImpNFeEnum tpImpNFe) {
    this.tpImpNFe = tpImpNFe;
    return this;
  }

   /**
   * how the document will be printed - '0' # without DANFE; - '1' # DANFe Letter; - '2' # DANFe Landscape; 
   * @return tpImpNFe
  **/
  @ApiModelProperty(example = "null", value = "how the document will be printed - '0' # without DANFE; - '1' # DANFe Letter; - '2' # DANFe Landscape; ")
  public TpImpNFeEnum getTpImpNFe() {
    return tpImpNFe;
  }

  public void setTpImpNFe(TpImpNFeEnum tpImpNFe) {
    this.tpImpNFe = tpImpNFe;
  }

  public CompanyConfiguration tpImpNFCe(TpImpNFCeEnum tpImpNFCe) {
    this.tpImpNFCe = tpImpNFCe;
    return this;
  }

   /**
   * how the document will be printed - '0' # without DANFE; - '4' # DANFe NFC-e; - '5' # DANFe NFC-e e-mail 
   * @return tpImpNFCe
  **/
  @ApiModelProperty(example = "null", value = "how the document will be printed - '0' # without DANFE; - '4' # DANFe NFC-e; - '5' # DANFe NFC-e e-mail ")
  public TpImpNFCeEnum getTpImpNFCe() {
    return tpImpNFCe;
  }

  public void setTpImpNFCe(TpImpNFCeEnum tpImpNFCe) {
    this.tpImpNFCe = tpImpNFCe;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyConfiguration companyConfiguration = (CompanyConfiguration) o;
    return Objects.equals(this.certificate, companyConfiguration.certificate) &&
        Objects.equals(this.certificatepwd, companyConfiguration.certificatepwd) &&
        Objects.equals(this.certificateexpiration, companyConfiguration.certificateexpiration) &&
        Objects.equals(this.logo, companyConfiguration.logo) &&
        Objects.equals(this.tpImpNFe, companyConfiguration.tpImpNFe) &&
        Objects.equals(this.tpImpNFCe, companyConfiguration.tpImpNFCe);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificate, certificatepwd, certificateexpiration, logo, tpImpNFe, tpImpNFCe);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyConfiguration {\n");
    
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    certificatepwd: ").append(toIndentedString(certificatepwd)).append("\n");
    sb.append("    certificateexpiration: ").append(toIndentedString(certificateexpiration)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    tpImpNFe: ").append(toIndentedString(tpImpNFe)).append("\n");
    sb.append("    tpImpNFCe: ").append(toIndentedString(tpImpNFCe)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

