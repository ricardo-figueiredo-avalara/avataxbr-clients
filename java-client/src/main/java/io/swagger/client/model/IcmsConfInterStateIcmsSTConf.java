/*
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * IcmsConfInterStateIcmsSTConf
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-02-24T19:47:57.099Z")
public class IcmsConfInterStateIcmsSTConf {
  /**
   * Gets or Sets protocolType
   */
  public enum ProtocolTypeEnum {
    @SerializedName("COVENANT")
    COVENANT("COVENANT"),
    
    @SerializedName("PROTOCOL")
    PROTOCOL("PROTOCOL"),
    
    @SerializedName("NOTHING")
    NOTHING("NOTHING");

    private String value;

    ProtocolTypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("protocolType")
  private ProtocolTypeEnum protocolType = null;

  @SerializedName("hasReductionOfMVAForSimples")
  private Boolean hasReductionOfMVAForSimples = null;

  @SerializedName("reductionOfMVAForSimples")
  private Double reductionOfMVAForSimples = null;

  /**
   * how this ICMS-ST will be calculed for itens linked to this configuration
   */
  public enum CalcModeEnum {
    @SerializedName("BYMVARATE")
    BYMVARATE("BYMVARATE"),
    
    @SerializedName("SRP")
    SRP("SRP"),
    
    @SerializedName("MSRP")
    MSRP("MSRP");

    private String value;

    CalcModeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("calcMode")
  private CalcModeEnum calcMode = null;

  @SerializedName("icmsStBaseDiscount")
  private Double icmsStBaseDiscount = null;

  @SerializedName("mvaRate")
  private Double mvaRate = null;

  @SerializedName("srp")
  private Double srp = null;

  @SerializedName("srpUnit")
  private String srpUnit = null;

  public IcmsConfInterStateIcmsSTConf protocolType(ProtocolTypeEnum protocolType) {
    this.protocolType = protocolType;
    return this;
  }

   /**
   * Get protocolType
   * @return protocolType
  **/
  @ApiModelProperty(example = "null", value = "")
  public ProtocolTypeEnum getProtocolType() {
    return protocolType;
  }

  public void setProtocolType(ProtocolTypeEnum protocolType) {
    this.protocolType = protocolType;
  }

  public IcmsConfInterStateIcmsSTConf hasReductionOfMVAForSimples(Boolean hasReductionOfMVAForSimples) {
    this.hasReductionOfMVAForSimples = hasReductionOfMVAForSimples;
    return this;
  }

   /**
   * inform that substituted is tax regime Simplified the operation MVA will be reduced
   * @return hasReductionOfMVAForSimples
  **/
  @ApiModelProperty(example = "null", value = "inform that substituted is tax regime Simplified the operation MVA will be reduced")
  public Boolean getHasReductionOfMVAForSimples() {
    return hasReductionOfMVAForSimples;
  }

  public void setHasReductionOfMVAForSimples(Boolean hasReductionOfMVAForSimples) {
    this.hasReductionOfMVAForSimples = hasReductionOfMVAForSimples;
  }

  public IcmsConfInterStateIcmsSTConf reductionOfMVAForSimples(Double reductionOfMVAForSimples) {
    this.reductionOfMVAForSimples = reductionOfMVAForSimples;
    return this;
  }

   /**
   * MVA reduction when substituted is tax regime Simplified.
   * @return reductionOfMVAForSimples
  **/
  @ApiModelProperty(example = "null", value = "MVA reduction when substituted is tax regime Simplified.")
  public Double getReductionOfMVAForSimples() {
    return reductionOfMVAForSimples;
  }

  public void setReductionOfMVAForSimples(Double reductionOfMVAForSimples) {
    this.reductionOfMVAForSimples = reductionOfMVAForSimples;
  }

  public IcmsConfInterStateIcmsSTConf calcMode(CalcModeEnum calcMode) {
    this.calcMode = calcMode;
    return this;
  }

   /**
   * how this ICMS-ST will be calculed for itens linked to this configuration
   * @return calcMode
  **/
  @ApiModelProperty(example = "null", value = "how this ICMS-ST will be calculed for itens linked to this configuration")
  public CalcModeEnum getCalcMode() {
    return calcMode;
  }

  public void setCalcMode(CalcModeEnum calcMode) {
    this.calcMode = calcMode;
  }

  public IcmsConfInterStateIcmsSTConf icmsStBaseDiscount(Double icmsStBaseDiscount) {
    this.icmsStBaseDiscount = icmsStBaseDiscount;
    return this;
  }

   /**
   * ICMS rate - Redução da BC ICMS ST (%)
   * @return icmsStBaseDiscount
  **/
  @ApiModelProperty(example = "null", value = "ICMS rate - Redução da BC ICMS ST (%)")
  public Double getIcmsStBaseDiscount() {
    return icmsStBaseDiscount;
  }

  public void setIcmsStBaseDiscount(Double icmsStBaseDiscount) {
    this.icmsStBaseDiscount = icmsStBaseDiscount;
  }

  public IcmsConfInterStateIcmsSTConf mvaRate(Double mvaRate) {
    this.mvaRate = mvaRate;
    return this;
  }

   /**
   * ICMS-ST MVA rate to define calc base
   * @return mvaRate
  **/
  @ApiModelProperty(example = "null", value = "ICMS-ST MVA rate to define calc base")
  public Double getMvaRate() {
    return mvaRate;
  }

  public void setMvaRate(Double mvaRate) {
    this.mvaRate = mvaRate;
  }

  public IcmsConfInterStateIcmsSTConf srp(Double srp) {
    this.srp = srp;
    return this;
  }

   /**
   * SRP or MSRP amount base for this ICMS-ST configuration
   * @return srp
  **/
  @ApiModelProperty(example = "null", value = "SRP or MSRP amount base for this ICMS-ST configuration")
  public Double getSrp() {
    return srp;
  }

  public void setSrp(Double srp) {
    this.srp = srp;
  }

  public IcmsConfInterStateIcmsSTConf srpUnit(String srpUnit) {
    this.srpUnit = srpUnit;
    return this;
  }

   /**
   * unit used to SRP amount value
   * @return srpUnit
  **/
  @ApiModelProperty(example = "null", value = "unit used to SRP amount value")
  public String getSrpUnit() {
    return srpUnit;
  }

  public void setSrpUnit(String srpUnit) {
    this.srpUnit = srpUnit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IcmsConfInterStateIcmsSTConf icmsConfInterStateIcmsSTConf = (IcmsConfInterStateIcmsSTConf) o;
    return Objects.equals(this.protocolType, icmsConfInterStateIcmsSTConf.protocolType) &&
        Objects.equals(this.hasReductionOfMVAForSimples, icmsConfInterStateIcmsSTConf.hasReductionOfMVAForSimples) &&
        Objects.equals(this.reductionOfMVAForSimples, icmsConfInterStateIcmsSTConf.reductionOfMVAForSimples) &&
        Objects.equals(this.calcMode, icmsConfInterStateIcmsSTConf.calcMode) &&
        Objects.equals(this.icmsStBaseDiscount, icmsConfInterStateIcmsSTConf.icmsStBaseDiscount) &&
        Objects.equals(this.mvaRate, icmsConfInterStateIcmsSTConf.mvaRate) &&
        Objects.equals(this.srp, icmsConfInterStateIcmsSTConf.srp) &&
        Objects.equals(this.srpUnit, icmsConfInterStateIcmsSTConf.srpUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(protocolType, hasReductionOfMVAForSimples, reductionOfMVAForSimples, calcMode, icmsStBaseDiscount, mvaRate, srp, srpUnit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IcmsConfInterStateIcmsSTConf {\n");
    
    sb.append("    protocolType: ").append(toIndentedString(protocolType)).append("\n");
    sb.append("    hasReductionOfMVAForSimples: ").append(toIndentedString(hasReductionOfMVAForSimples)).append("\n");
    sb.append("    reductionOfMVAForSimples: ").append(toIndentedString(reductionOfMVAForSimples)).append("\n");
    sb.append("    calcMode: ").append(toIndentedString(calcMode)).append("\n");
    sb.append("    icmsStBaseDiscount: ").append(toIndentedString(icmsStBaseDiscount)).append("\n");
    sb.append("    mvaRate: ").append(toIndentedString(mvaRate)).append("\n");
    sb.append("    srp: ").append(toIndentedString(srp)).append("\n");
    sb.append("    srpUnit: ").append(toIndentedString(srpUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

