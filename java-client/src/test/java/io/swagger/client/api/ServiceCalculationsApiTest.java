/*
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Message;
import io.swagger.client.model.PaymentTransactionIn;
import io.swagger.client.model.PaymentTransactionOut;
import io.swagger.client.model.PurchaseTransactionIn;
import io.swagger.client.model.PurchaseTransactionOut;
import io.swagger.client.model.ReceiptTransactionIn;
import io.swagger.client.model.ReceiptTransactionOut;
import io.swagger.client.model.SalesTransactionIn;
import io.swagger.client.model.SalesTransactionOut;
import io.swagger.client.model.TransactionForGoodsIn;
import io.swagger.client.model.ValidationError;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServiceCalculationsApi
 */
@Ignore
public class ServiceCalculationsApiTest {

    private final ServiceCalculationsApi api = new ServiceCalculationsApi();

    
    /**
     * Calculation Method
     *
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void calculationServicePaymentTest() throws ApiException {
        String authorization = null;
        PaymentTransactionIn body = null;
        String noPersist = null;
        PaymentTransactionOut response = api.calculationServicePayment(authorization, body, noPersist);

        // TODO: test validations
    }
    
    /**
     * Calculation Method
     *
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void calculationServicePurchaseTest() throws ApiException {
        String authorization = null;
        PurchaseTransactionIn body = null;
        String noPersist = null;
        PurchaseTransactionOut response = api.calculationServicePurchase(authorization, body, noPersist);

        // TODO: test validations
    }
    
    /**
     * Calculation Method
     *
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void calculationServiceReceiptTest() throws ApiException {
        String authorization = null;
        ReceiptTransactionIn body = null;
        String noPersist = null;
        ReceiptTransactionOut response = api.calculationServiceReceipt(authorization, body, noPersist);

        // TODO: test validations
    }
    
    /**
     * Calculation Method
     *
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void calculationServiceSalesTest() throws ApiException {
        String authorization = null;
        SalesTransactionIn body = null;
        String noPersist = null;
        SalesTransactionOut response = api.calculationServiceSales(authorization, body, noPersist);

        // TODO: test validations
    }
    
    /**
     * Promote a calculation to transaction
     *
     * Promote a calculation to transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertServiceCalculatioToTransactionTest() throws ApiException {
        String authorization = null;
        String transactionType = null;
        String documentCode = null;
        api.convertServiceCalculatioToTransaction(authorization, transactionType, documentCode);

        // TODO: test validations
    }
    
    /**
     * Retrieve goods transactions
     *
     * Retrieve a list of transactions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveGoodsTransactionsTest() throws ApiException {
        String authorization = null;
        String transactionType = null;
        List<TransactionForGoodsIn> response = api.retrieveGoodsTransactions(authorization, transactionType);

        // TODO: test validations
    }
    
    /**
     * Retrieve service transactions
     *
     * Retrieve a single transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveServiceTransactionDocumentTest() throws ApiException {
        String authorization = null;
        String transactionType = null;
        String documentCode = null;
        api.retrieveServiceTransactionDocument(authorization, transactionType, documentCode);

        // TODO: test validations
    }
    
    /**
     * Retrieve service transactions
     *
     * Retrieve a list of transactions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveServiceTransactionsTest() throws ApiException {
        String authorization = null;
        String transactionType = null;
        api.retrieveServiceTransactions(authorization, transactionType);

        // TODO: test validations
    }
    
}
