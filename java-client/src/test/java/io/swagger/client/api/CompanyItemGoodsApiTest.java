/*
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import java.util.List;
import java.util.UUID;

import org.junit.Ignore;
import org.junit.Test;

import io.swagger.client.ApiException;
import io.swagger.client.model.Body1;
import io.swagger.client.model.InlineResponse201;
import io.swagger.client.model.ItemGoods;

/**
 * API tests for CompanyItemGoodsApi
 */
@Ignore
public class CompanyItemGoodsApiTest {

    private final CompanyItemGoodsApi api = new CompanyItemGoodsApi();

    
    /**
     * 
     *
     * Change the code of a given item. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void companyItemsChangeCodeTest() throws ApiException {
        String authorization = null;
        UUID companyId = null;
        String code = null;
        Body1 body = null;
        String goods = null;
        String service = null;
        api.companyItemsChangeCode(authorization, companyId, code, body, goods, service);

        // TODO: test validations
    }
    
    /**
     * Create custom agast for one company
     *
     * This method operation create a custom agast for one company 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createItemTest() throws ApiException {
        String authorization = null;
        UUID companyId = null;
        String avalaraProductType = null;
        ItemGoods body = null;
        InlineResponse201 response = api.createItem(authorization, companyId, avalaraProductType, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete Item
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemTest() throws ApiException {
        String authorization = null;
        UUID companyId = null;
        String code = null;
        String avalaraProductType = null;
        api.deleteItem(authorization, companyId, code, avalaraProductType);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This operation return custom agast configurations that match with parameters queries 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompanyItemsGoodsTest() throws ApiException {
        String authorization = null;
        UUID companyId = null;
        String code = null;
        String avalaraProductType = null;
        String agast = null;
        ItemGoods response = api.getCompanyItemsGoods(authorization, companyId, code, avalaraProductType, agast);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This operation return custom agast configurations that match with parameters queries 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompanyItemsGoodsListTest() throws ApiException {
        String authorization = null;
        UUID companyId = null;
        String avalaraProductType = null;
        Integer xPaginationLimit = null;
        Integer xPaginationCurrentPage = null;
        String xPaginationSort = null;
        String code = null;
        String agast = null;
        List<ItemGoods> response = api.getCompanyItemsGoodsList(authorization, companyId, avalaraProductType, xPaginationLimit, xPaginationCurrentPage, xPaginationSort, code, agast);

        // TODO: test validations
    }
    
    /**
     * Update custom agast for one company
     *
     * This method operation create a custom agast for one company 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateItemTest() throws ApiException {
        String authorization = null;
        UUID companyId = null;
        String code = null;
        String avalaraProductType = null;
        ItemGoods body = null;
        api.updateItem(authorization, companyId, code, avalaraProductType, body);

        // TODO: test validations
    }
    
}
