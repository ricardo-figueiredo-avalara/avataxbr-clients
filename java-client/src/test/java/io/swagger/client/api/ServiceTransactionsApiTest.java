/*
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Message;
import io.swagger.client.model.PaymentTransactionIn;
import io.swagger.client.model.PaymentTransactionOut;
import io.swagger.client.model.PurchaseTransactionIn;
import io.swagger.client.model.PurchaseTransactionOut;
import io.swagger.client.model.ReceiptTransactionIn;
import io.swagger.client.model.ReceiptTransactionOut;
import io.swagger.client.model.SalesTransactionIn;
import io.swagger.client.model.SalesTransactionOut;
import io.swagger.client.model.StateTransition;
import io.swagger.client.model.ValidationError;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServiceTransactionsApi
 */
@Ignore
public class ServiceTransactionsApiTest {

    private final ServiceTransactionsApi api = new ServiceTransactionsApi();

    
    /**
     * Retrieve transactions
     *
     * Retrieve a single transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetTest() throws ApiException {
        String authorization = null;
        String accountId = null;
        String companyCode = null;
        String transactionType = null;
        String documentCode = null;
        api.transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(authorization, accountId, companyCode, transactionType, documentCode);

        // TODO: test validations
    }
    
    /**
     * Transaction State Transition
     *
     * Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostTest() throws ApiException {
        String authorization = null;
        String accountId = null;
        String companyCode = null;
        String transactionType = null;
        String documentCode = null;
        StateTransition body = null;
        api.transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost(authorization, accountId, companyCode, transactionType, documentCode, body);

        // TODO: test validations
    }
    
    /**
     * Retrieve transactions
     *
     * Retrieve a list of transactions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetTest() throws ApiException {
        String authorization = null;
        String accountId = null;
        String companyCode = null;
        String transactionType = null;
        api.transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(authorization, accountId, companyCode, transactionType);

        // TODO: test validations
    }
    
    /**
     * Calculation Method
     *
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsservicePaymentPostTest() throws ApiException {
        String authorization = null;
        PaymentTransactionIn body = null;
        PaymentTransactionOut response = api.transactionsservicePaymentPost(authorization, body);

        // TODO: test validations
    }
    
    /**
     * Calculation Method
     *
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsservicePurchasePostTest() throws ApiException {
        String authorization = null;
        PurchaseTransactionIn body = null;
        PurchaseTransactionOut response = api.transactionsservicePurchasePost(authorization, body);

        // TODO: test validations
    }
    
    /**
     * Calculation Method
     *
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsserviceReceiptPostTest() throws ApiException {
        String authorization = null;
        ReceiptTransactionIn body = null;
        ReceiptTransactionOut response = api.transactionsserviceReceiptPost(authorization, body);

        // TODO: test validations
    }
    
    /**
     * Calculation Method
     *
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsserviceSalesPostTest() throws ApiException {
        String authorization = null;
        SalesTransactionIn body = null;
        SalesTransactionOut response = api.transactionsserviceSalesPost(authorization, body);

        // TODO: test validations
    }
    
}
