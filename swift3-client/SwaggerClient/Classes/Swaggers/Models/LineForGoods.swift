//
// LineForGoods.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class LineForGoods: JSONEncodable {
    public enum UseType: String { 
        case useOrConsumption = "use or consumption"
        case resale = "resale"
        case agriculturalProduction = "agricultural production"
        case production = "production"
        case useOrConsumptionOnBusinessEstablishment = "use or consumption on business establishment"
        case useOrConsumptionOnTransporterServiceEstablishment = "use or consumption on transporter service establishment"
        case useOrConsumptionOnCommunicationServiceEstablishment = "use or consumption on communication service establishment"
        case useOrConsumptionOnDemandByContract = "use or consumption on demand by contract"
        case useOrConsumptionOnEnergySupplierEstablishment = "use or consumption on energy supplier establishment"
        case useOrConsumptionOfFuelTransactionTypeExportation = "use or consumption of fuel transaction type exportation"
        case fixedAssets = "fixed assets"
        case resaleExport = "resale export"
        case resaleIcmsExempt = "resale icms exempt"
        case resaleBuyerUnderTheSameIcmsstTaxRule = "resale buyer under the same icmsSt tax rule"
        case transportOfGoodsThatDon&#39;tNeedInvoiceNf = "transport of goods that don't need invoice (nf)"
    }
    /** This string is a unique identifier for this line in the transaction */
    public var lineCode: Int32?
    /** This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states. */
    public var itemCode: String?
    /** AGAST CODE for itemCode */
    public var avalaraGoodsAndServicesType: String?
    /** This decimal 11 integers and 1 to 4 decimals captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1 */
    public var numberOfItems: Double?
    /** when is return operation this field inform the percentage of returned itens. This decimal max 3 integers and 2 decimals, v &gt;&#x3D;0.00 and v &lt;&#x3D; 100.00 */
    public var returnedPercentageAmount: Double?
    /** This decimal 11 integers and 1 to 10 decimals captures the unit price of this line. */
    public var lineUnitPrice: Double?
    /** In its simplest form lineAmount &#x3D; (item price * numberOfItems). If taxIncluded is &#39;true&#39;, lineAmount &#x3D; (item price * numberOfItems + tax). */
    public var lineAmount: Double?
    /** This string captures the description of the item represented by this line, will be used LC 116 */
    public var itemDescription: String?
    /** Discount conditional, This decimal 13 integers and 0 to 2 decimals */
    public var lineTaxedDiscount: Double?
    /** discount unconditional, This decimal 13 integers and 0 to 2 decimals */
    public var lineUntaxedDiscount: Double?
    /** This is a enumeration folowing table */
    public var useType: UseType?
    /** Reference to process configurantion of this transaction, See ProcessScenario definition */
    public var processScenario: String?
    /** Fiscal Operation Code of transport service */
    public var cfop: Int32?
    /** return if this transaction has stock impact for this process or CFOP */
    public var hasStockImpact: Bool?
    /** return if this transaction has finantial impact for this process or CFOP */
    public var hasFinantialImpact: Bool?
    /** This decimal 13 integers and 0 to 2 decimals */
    public var freightAmount: Double?
    /** This decimal 13 integers and 0 to 2 decimals */
    public var insuranceAmount: Double?
    /** This decimal 13 integers and 0 to 2 decimals */
    public var otherCostAmount: Double?
    /** The item value will compose the invoice total value. */
    public var indTotType: Bool?
    /** order number, information used for B2B control process */
    public var orderNumber: String?
    /** number of the item from order number, information used for B2B control process */
    public var orderItemNumber: String?
    /** Gloal Unique identifier (Importation form) */
    public var fciNumber: String?
    /** RECOPI number */
    public var recopiNumber: String?
    /** additional information about product (referenced standard, complementary info, etc) */
    public var infAdProd: String?
    public var vehicle: Vehicle?
    public var medicine: Medicine?
    public var weapon: Weapon?
    public var fuel: Fuel?
    /** Inform that for this item the Entity referenced is ICMS Substitute */
    public var entityIsIcmsSubstitute: Bool?
    /** Inform that this item has ICMS withheld for transport value service. */
    public var isTransportIcmsWithheld: Bool?
    public var icmsTaxRelief: LineForGoodsIcmsTaxRelief?
    /** Exportation detail */
    public var export: [LineForGoodsExport]?
    /** Import declaration */
    public var di: [LineForGoodsDi]?
    public var calculatedTax: LineForGoodsCalculatedTax?

    public init() {}

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["lineCode"] = self.lineCode?.encodeToJSON()
        nillableDictionary["itemCode"] = self.itemCode
        nillableDictionary["avalaraGoodsAndServicesType"] = self.avalaraGoodsAndServicesType
        nillableDictionary["numberOfItems"] = self.numberOfItems
        nillableDictionary["returnedPercentageAmount"] = self.returnedPercentageAmount
        nillableDictionary["lineUnitPrice"] = self.lineUnitPrice
        nillableDictionary["lineAmount"] = self.lineAmount
        nillableDictionary["itemDescription"] = self.itemDescription
        nillableDictionary["lineTaxedDiscount"] = self.lineTaxedDiscount
        nillableDictionary["lineUntaxedDiscount"] = self.lineUntaxedDiscount
        nillableDictionary["useType"] = self.useType?.rawValue
        nillableDictionary["processScenario"] = self.processScenario
        nillableDictionary["cfop"] = self.cfop?.encodeToJSON()
        nillableDictionary["hasStockImpact"] = self.hasStockImpact
        nillableDictionary["hasFinantialImpact"] = self.hasFinantialImpact
        nillableDictionary["freightAmount"] = self.freightAmount
        nillableDictionary["insuranceAmount"] = self.insuranceAmount
        nillableDictionary["otherCostAmount"] = self.otherCostAmount
        nillableDictionary["indTotType"] = self.indTotType
        nillableDictionary["orderNumber"] = self.orderNumber
        nillableDictionary["orderItemNumber"] = self.orderItemNumber
        nillableDictionary["fciNumber"] = self.fciNumber
        nillableDictionary["recopiNumber"] = self.recopiNumber
        nillableDictionary["infAdProd"] = self.infAdProd
        nillableDictionary["vehicle"] = self.vehicle?.encodeToJSON()
        nillableDictionary["medicine"] = self.medicine?.encodeToJSON()
        nillableDictionary["weapon"] = self.weapon?.encodeToJSON()
        nillableDictionary["fuel"] = self.fuel?.encodeToJSON()
        nillableDictionary["entityIsIcmsSubstitute"] = self.entityIsIcmsSubstitute
        nillableDictionary["isTransportIcmsWithheld"] = self.isTransportIcmsWithheld
        nillableDictionary["icmsTaxRelief"] = self.icmsTaxRelief?.encodeToJSON()
        nillableDictionary["export"] = self.export?.encodeToJSON()
        nillableDictionary["di"] = self.di?.encodeToJSON()
        nillableDictionary["calculatedTax"] = self.calculatedTax?.encodeToJSON()
        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
