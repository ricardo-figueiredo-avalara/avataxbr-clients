//
// PurchaseTaxesConfig.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class PurchaseTaxesConfig: JSONEncodable {
    public enum EntityAccruableCOFINSTaxation: String { 
        case t = "T"
        case n = "N"
        case z = "Z"
        case e = "E"
        case h = "H"
        case s = "S"
    }
    public enum EntityAccruableCSLLTaxation: String { 
        case t = "T"
        case e = "E"
    }
    public enum EntityAccruablePISTaxation: String { 
        case t = "T"
        case n = "N"
        case z = "Z"
        case e = "E"
        case h = "H"
        case s = "S"
    }
    /** ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE&#x3D;0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - &#39;T&#39; # TAXABLE - &#39;N&#39; # NOT TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;S&#39; # SPECIFIC RATE  */
    public var entityAccruableCOFINSTaxation: EntityAccruableCOFINSTaxation?
    /** ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.   This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT  */
    public var entityAccruableCSLLTaxation: EntityAccruableCSLLTaxation?
    /** ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE&#x3D;0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - &#39;T&#39; # TAXABLE - &#39;N&#39; # NOT TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;S&#39; # SPECIFIC RATE  */
    public var entityAccruablePISTaxation: EntityAccruablePISTaxation?
    /** This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption. When not Taxable of Seller point of view this field has the reason code. */
    public var accruableCOFINSExempCodeTaxation: String?
    /** This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption. When not Taxable of Seller point of view this field has the reason code. */
    public var accruablePISExempCodeTaxation: String?
    /** When Code is 999 the user system need send the custom reason to Exemption */
    public var accruablePISExemptReasonTaxation: String?
    /** When Code is 999 the user system need send the custom reason to Exemption */
    public var accruableCOFINSExemptReasonTaxation: String?
    /** CSLL no withholding Custom Reason */
    public var accruableCSLLExemptReasonTaxation: String?
    /** Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings. */
    public var withholdingPIS: Bool?
    /** Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings. */
    public var withholdingCOFINS: Bool?
    /** Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings. */
    public var withholdingCSLL: Bool?
    /** Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings. */
    public var withholdingIRRF: Bool?
    /** COFINS no withholding Custom Reason */
    public var withholdCOFINSExemptReasonTaxation: String?
    /** CSLL no withholding Custom Reason */
    public var withholdCSLLExemptReasonTaxation: String?
    /** PIS no withholding Custom Reason */
    public var withholdPISExemptReasonTaxation: String?

    public init() {}

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["entityAccruableCOFINSTaxation"] = self.entityAccruableCOFINSTaxation?.rawValue
        nillableDictionary["entityAccruableCSLLTaxation"] = self.entityAccruableCSLLTaxation?.rawValue
        nillableDictionary["entityAccruablePISTaxation"] = self.entityAccruablePISTaxation?.rawValue
        nillableDictionary["accruableCOFINSExempCodeTaxation"] = self.accruableCOFINSExempCodeTaxation
        nillableDictionary["accruablePISExempCodeTaxation"] = self.accruablePISExempCodeTaxation
        nillableDictionary["accruablePISExemptReasonTaxation"] = self.accruablePISExemptReasonTaxation
        nillableDictionary["accruableCOFINSExemptReasonTaxation"] = self.accruableCOFINSExemptReasonTaxation
        nillableDictionary["accruableCSLLExemptReasonTaxation"] = self.accruableCSLLExemptReasonTaxation
        nillableDictionary["withholdingPIS"] = self.withholdingPIS
        nillableDictionary["withholdingCOFINS"] = self.withholdingCOFINS
        nillableDictionary["withholdingCSLL"] = self.withholdingCSLL
        nillableDictionary["withholdingIRRF"] = self.withholdingIRRF
        nillableDictionary["withholdCOFINSExemptReasonTaxation"] = self.withholdCOFINSExemptReasonTaxation
        nillableDictionary["withholdCSLLExemptReasonTaxation"] = self.withholdCSLLExemptReasonTaxation
        nillableDictionary["withholdPISExemptReasonTaxation"] = self.withholdPISExemptReasonTaxation
        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
