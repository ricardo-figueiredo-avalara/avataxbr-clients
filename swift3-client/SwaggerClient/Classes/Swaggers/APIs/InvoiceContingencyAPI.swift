//
// InvoiceContingencyAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class InvoiceContingencyAPI: APIBase {

    public class func mapValuesToQueryItems(values: [String:Any?]) -> [URLQueryItem] {
        return values
            .filter { $0.1 != nil }
            .map { (item: (_key: String, _value: Any?)) -> URLQueryItem in
                URLQueryItem(name: item._key, value:"\(item._value!)")
            }
    }

    /**
     * enum for parameter state
     */
    public enum State_invoiceDropContingency: String { 
        case ac = "ac"
        case al = "al"
        case am = "am"
        case ap = "ap"
        case ba = "ba"
        case ce = "ce"
        case df = "df"
        case es = "es"
        case go = "go"
        case ma = "ma"
        case mg = "mg"
        case ms = "ms"
        case mt = "mt"
        case pa = "pa"
        case pb = "pb"
        case pe = "pe"
        case pi = "pi"
        case pr = "pr"
        case rj = "rj"
        case rn = "rn"
        case ro = "ro"
        case rr = "rr"
        case rs = "rs"
        case sc = "sc"
        case se = "se"
        case sp = "sp"
        case to = "to"
    }

    /**
     Invoice Drop Contingency per State
     
     - parameter state: (path) Brazilian State 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func invoiceDropContingency(state: State_invoiceDropContingency, completion: @escaping ((_ error: Error?) -> Void)) {
        invoiceDropContingencyWithRequestBuilder(state: state).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Invoice Drop Contingency per State
     - DELETE /invoices/contingency/{state}
     - Drop State in Contingency
     
     - parameter state: (path) Brazilian State 

     - returns: RequestBuilder<Void> 
     */
    open class func invoiceDropContingencyWithRequestBuilder(state: State_invoiceDropContingency) -> RequestBuilder<Void> {
        var path = "/invoices/contingency/{state}"
        path = path.replacingOccurrences(of: "{state}", with: "\(state.rawValue)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter state
     */
    public enum State_invoiceSetContingency: String { 
        case ac = "ac"
        case al = "al"
        case am = "am"
        case ap = "ap"
        case ba = "ba"
        case ce = "ce"
        case df = "df"
        case es = "es"
        case go = "go"
        case ma = "ma"
        case mg = "mg"
        case ms = "ms"
        case mt = "mt"
        case pa = "pa"
        case pb = "pb"
        case pe = "pe"
        case pi = "pi"
        case pr = "pr"
        case rj = "rj"
        case rn = "rn"
        case ro = "ro"
        case rr = "rr"
        case rs = "rs"
        case sc = "sc"
        case se = "se"
        case sp = "sp"
        case to = "to"
    }

    /**
     Invoice Set Contingency per State
     
     - parameter state: (path) Brazilian State 
     - parameter body: (body) Set Contingency 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func invoiceSetContingency(state: State_invoiceSetContingency, body: Body4, completion: @escaping ((_ error: Error?) -> Void)) {
        invoiceSetContingencyWithRequestBuilder(state: state, body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Invoice Set Contingency per State
     - PUT /invoices/contingency/{state}
     - Set State in Contingency
     
     - parameter state: (path) Brazilian State 
     - parameter body: (body) Set Contingency 

     - returns: RequestBuilder<Void> 
     */
    open class func invoiceSetContingencyWithRequestBuilder(state: State_invoiceSetContingency, body: Body4) -> RequestBuilder<Void> {
        var path = "/invoices/contingency/{state}"
        path = path.replacingOccurrences(of: "{state}", with: "\(state.rawValue)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: convertedParameters, isBody: true)
    }

    /**
     * enum for parameter state
     */
    public enum State_invoiceVerifyContingency: String { 
        case ac = "ac"
        case al = "al"
        case am = "am"
        case ap = "ap"
        case ba = "ba"
        case ce = "ce"
        case df = "df"
        case es = "es"
        case go = "go"
        case ma = "ma"
        case mg = "mg"
        case ms = "ms"
        case mt = "mt"
        case pa = "pa"
        case pb = "pb"
        case pe = "pe"
        case pi = "pi"
        case pr = "pr"
        case rj = "rj"
        case rn = "rn"
        case ro = "ro"
        case rr = "rr"
        case rs = "rs"
        case sc = "sc"
        case se = "se"
        case sp = "sp"
        case to = "to"
    }

    /**
     Invoice Verify Contingency per State
     
     - parameter state: (path) Brazilian State 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func invoiceVerifyContingency(state: State_invoiceVerifyContingency, completion: @escaping ((_ data: InlineResponse2003?,_ error: Error?) -> Void)) {
        invoiceVerifyContingencyWithRequestBuilder(state: state).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Invoice Verify Contingency per State
     - GET /invoices/contingency/{state}
     - Check if State was in Contingency
     - examples: [{contentType=application/json, example={
  "contingency" : true,
  "finishDate" : "2000-01-23T04:56:07.000+00:00",
  "startDate" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter state: (path) Brazilian State 

     - returns: RequestBuilder<InlineResponse2003> 
     */
    open class func invoiceVerifyContingencyWithRequestBuilder(state: State_invoiceVerifyContingency) -> RequestBuilder<InlineResponse2003> {
        var path = "/invoices/contingency/{state}"
        path = path.replacingOccurrences(of: "{state}", with: "\(state.rawValue)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<InlineResponse2003>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
