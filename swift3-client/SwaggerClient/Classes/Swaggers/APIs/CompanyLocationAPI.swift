//
// CompanyLocationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class CompanyLocationAPI: APIBase {

    public class func mapValuesToQueryItems(values: [String:Any?]) -> [URLQueryItem] {
        return values
            .filter { $0.1 != nil }
            .map { (item: (_key: String, _value: Any?)) -> URLQueryItem in
                URLQueryItem(name: item._key, value:"\(item._value!)")
            }
    }

    /**

     - parameter companyId: (path) Company ID 
     - parameter code: (path) Location Code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func companiesCompanyIdLocationsCodeGet(companyId: UUID, code: String, completion: @escaping ((_ data: Location?,_ error: Error?) -> Void)) {
        companiesCompanyIdLocationsCodeGetWithRequestBuilder(companyId: companyId, code: code).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /companies/{companyId}/locations/{code}
     - This operation return location 
     - examples: [{contentType=application/json, example=""}]
     
     - parameter companyId: (path) Company ID 
     - parameter code: (path) Location Code 

     - returns: RequestBuilder<Location> 
     */
    open class func companiesCompanyIdLocationsCodeGetWithRequestBuilder(companyId: UUID, code: String) -> RequestBuilder<Location> {
        var path = "/companies/{companyId}/locations/{code}"
        path = path.replacingOccurrences(of: "{companyId}", with: "\(companyId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{code}", with: "\(code)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Location>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter companyId: (path) Company ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func companiesCompanyIdLocationsGet(companyId: UUID, completion: @escaping ((_ data: [Location]?,_ error: Error?) -> Void)) {
        companiesCompanyIdLocationsGetWithRequestBuilder(companyId: companyId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /companies/{companyId}/locations
     - This operation return all locations 
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - examples: [{contentType=application/json, example=[ "" ]}]
     
     - parameter companyId: (path) Company ID 

     - returns: RequestBuilder<[Location]> 
     */
    open class func companiesCompanyIdLocationsGetWithRequestBuilder(companyId: UUID) -> RequestBuilder<[Location]> {
        var path = "/companies/{companyId}/locations"
        path = path.replacingOccurrences(of: "{companyId}", with: "\(companyId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<[Location]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create new location for company
     
     - parameter companyId: (path) Company ID 
     - parameter body: (body) Transaction Message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createLocation(companyId: UUID, body: Location, completion: @escaping ((_ data: InlineResponse201?,_ error: Error?) -> Void)) {
        createLocationWithRequestBuilder(companyId: companyId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create new location for company
     - POST /companies/{companyId}/locations
     - This method operation create a new location for company 
     - examples: [{contentType=application/json, example={
  "id" : 123
}}]
     
     - parameter companyId: (path) Company ID 
     - parameter body: (body) Transaction Message 

     - returns: RequestBuilder<InlineResponse201> 
     */
    open class func createLocationWithRequestBuilder(companyId: UUID, body: Location) -> RequestBuilder<InlineResponse201> {
        var path = "/companies/{companyId}/locations"
        path = path.replacingOccurrences(of: "{companyId}", with: "\(companyId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<InlineResponse201>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter companyId: (path) Company ID 
     - parameter code: (path) Location Code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLocation(companyId: UUID, code: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteLocationWithRequestBuilder(companyId: companyId, code: code).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - DELETE /companies/{companyId}/locations/{code}
     
     - parameter companyId: (path) Company ID 
     - parameter code: (path) Location Code 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLocationWithRequestBuilder(companyId: UUID, code: String) -> RequestBuilder<Void> {
        var path = "/companies/{companyId}/locations/{code}"
        path = path.replacingOccurrences(of: "{companyId}", with: "\(companyId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{code}", with: "\(code)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update location for company
     
     - parameter companyId: (path) Company ID 
     - parameter code: (path) Location Code 
     - parameter body: (body) Transaction Message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateLocation(companyId: UUID, code: String, body: Location, completion: @escaping ((_ error: Error?) -> Void)) {
        updateLocationWithRequestBuilder(companyId: companyId, code: code, body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update location for company
     - PUT /companies/{companyId}/locations/{code}
     - This method operation update a location for company 
     
     - parameter companyId: (path) Company ID 
     - parameter code: (path) Location Code 
     - parameter body: (body) Transaction Message 

     - returns: RequestBuilder<Void> 
     */
    open class func updateLocationWithRequestBuilder(companyId: UUID, code: String, body: Location) -> RequestBuilder<Void> {
        var path = "/companies/{companyId}/locations/{code}"
        path = path.replacingOccurrences(of: "{companyId}", with: "\(companyId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{code}", with: "\(code)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: convertedParameters, isBody: true)
    }

}
