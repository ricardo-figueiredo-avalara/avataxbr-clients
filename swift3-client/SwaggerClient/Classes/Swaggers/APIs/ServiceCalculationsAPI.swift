//
// ServiceCalculationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class ServiceCalculationsAPI: APIBase {

    public class func mapValuesToQueryItems(values: [String:Any?]) -> [URLQueryItem] {
        return values
            .filter { $0.1 != nil }
            .map { (item: (_key: String, _value: Any?)) -> URLQueryItem in
                URLQueryItem(name: item._key, value:"\(item._value!)")
            }
    }

    /**
     * enum for parameter transactionType
     */
    public enum TransactionType_calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet: String { 
        case sale = "sale"
        case purchase = "purchase"
        case receipt = "receipt"
        case payment = "payment"
    }

    /**
     Retrieve transactions
     
     - parameter accountId: (path) Account ID 
     - parameter companyCode: (path) Company Code 
     - parameter transactionType: (path) Transaction Type (sale, purchase, receipts or payment) 
     - parameter documentCode: (path) Document Code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(accountId: UUID, companyCode: String, transactionType: TransactionType_calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet, documentCode: String, completion: @escaping ((_ error: Error?) -> Void)) {
        calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithRequestBuilder(accountId: accountId, companyCode: companyCode, transactionType: transactionType, documentCode: documentCode).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Retrieve transactions
     - GET /calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}
     - Retrieve a single transaction
     
     - parameter accountId: (path) Account ID 
     - parameter companyCode: (path) Company Code 
     - parameter transactionType: (path) Transaction Type (sale, purchase, receipts or payment) 
     - parameter documentCode: (path) Document Code 

     - returns: RequestBuilder<Void> 
     */
    open class func calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithRequestBuilder(accountId: UUID, companyCode: String, transactionType: TransactionType_calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet, documentCode: String) -> RequestBuilder<Void> {
        var path = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{companyCode}", with: "\(companyCode)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{transactionType}", with: "\(transactionType.rawValue)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{documentCode}", with: "\(documentCode)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter transactionType
     */
    public enum TransactionType_calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost: String { 
        case sale = "sale"
        case purchase = "purchase"
        case receipt = "receipt"
        case payment = "payment"
    }

    /**
     Promote a calculation to transaction
     
     - parameter accountId: (path) Account ID 
     - parameter companyCode: (path) Company Code 
     - parameter transactionType: (path) Transaction Type (sale, purchase, receipts or payment) 
     - parameter documentCode: (path) Document Code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost(accountId: UUID, companyCode: String, transactionType: TransactionType_calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost, documentCode: String, completion: @escaping ((_ error: Error?) -> Void)) {
        calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostWithRequestBuilder(accountId: accountId, companyCode: companyCode, transactionType: transactionType, documentCode: documentCode).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Promote a calculation to transaction
     - POST /calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/transactions
     - Promote a calculation to transaction
     
     - parameter accountId: (path) Account ID 
     - parameter companyCode: (path) Company Code 
     - parameter transactionType: (path) Transaction Type (sale, purchase, receipts or payment) 
     - parameter documentCode: (path) Document Code 

     - returns: RequestBuilder<Void> 
     */
    open class func calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostWithRequestBuilder(accountId: UUID, companyCode: String, transactionType: TransactionType_calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost, documentCode: String) -> RequestBuilder<Void> {
        var path = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/transactions"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{companyCode}", with: "\(companyCode)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{transactionType}", with: "\(transactionType.rawValue)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{documentCode}", with: "\(documentCode)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter transactionType
     */
    public enum TransactionType_calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet: String { 
        case sale = "sale"
        case purchase = "purchase"
        case receipt = "receipt"
        case payment = "payment"
    }

    /**
     Retrieve transactions
     
     - parameter accountId: (path) Account ID 
     - parameter companyCode: (path) Company Code 
     - parameter transactionType: (path) Transaction Type (sale, purchase, receipts or payment) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(accountId: UUID, companyCode: String, transactionType: TransactionType_calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet, completion: @escaping ((_ error: Error?) -> Void)) {
        calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithRequestBuilder(accountId: accountId, companyCode: companyCode, transactionType: transactionType).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Retrieve transactions
     - GET /calculations/account/{accountId}/company/{companyCode}/{transactionType}
     - Retrieve a list of transactions
     
     - parameter accountId: (path) Account ID 
     - parameter companyCode: (path) Company Code 
     - parameter transactionType: (path) Transaction Type (sale, purchase, receipts or payment) 

     - returns: RequestBuilder<Void> 
     */
    open class func calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithRequestBuilder(accountId: UUID, companyCode: String, transactionType: TransactionType_calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet) -> RequestBuilder<Void> {
        var path = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{companyCode}", with: "\(companyCode)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{transactionType}", with: "\(transactionType.rawValue)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Calculation Method
     
     - parameter body: (body) Transaction Message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculationsservicePaymentPost(body: PaymentTransactionIn, completion: @escaping ((_ data: PaymentTransactionOut?,_ error: Error?) -> Void)) {
        calculationsservicePaymentPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Calculation Method
     - POST /calculations?service-payment
     - Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     - examples: [{contentType=application/json, example={
  "processingInfo" : {
    "duration" : 1.3579000000000001069366817318950779736042022705078125,
    "versionId" : "aeiou"
  },
  "header" : {
    "companyCode" : "aeiou",
    "transactionType" : "aeiou",
    "documentCode" : "aeiou",
    "accountId" : "aeiou",
    "paymentMode" : "aeiou",
    "currency" : "aeiou",
    "taxCalculationDate" : "2000-01-23",
    "transactionDate" : "2000-01-23",
    "vendorCode" : "aeiou"
  },
  "lines" : [ "" ],
  "calculatedTaxSummary" : {
    "totalTax" : 1.3579000000000001069366817318950779736042022705078125,
    "numberOfLines" : 123,
    "grandTotal" : 1.3579000000000001069366817318950779736042022705078125,
    "subtotal" : 1.3579000000000001069366817318950779736042022705078125,
    "pccWithholdingModes" : [ {
      "totalTax" : 1.3579000000000001069366817318950779736042022705078125,
      "csllRf" : "",
      "pisRf" : {
        "tax" : 1.3579000000000001069366817318950779736042022705078125
      },
      "cofinsRf" : "",
      "type" : "aeiou"
    } ],
    "taxByType" : {
      "issRf" : {
        "tax" : 1.3579000000000001069366817318950779736042022705078125,
        "jurisdictions" : [ {
          "jurisdictionType" : "aeiou",
          "jurisdictionName" : "aeiou",
          "tax" : 1.3579000000000001069366817318950779736042022705078125
        } ]
      },
      "csllRf" : "",
      "pisRf" : "",
      "cofinsRf" : "",
      "inssRf" : "",
      "irrf" : ""
    }
  }
}}]
     
     - parameter body: (body) Transaction Message 

     - returns: RequestBuilder<PaymentTransactionOut> 
     */
    open class func calculationsservicePaymentPostWithRequestBuilder(body: PaymentTransactionIn) -> RequestBuilder<PaymentTransactionOut> {
        let path = "/calculations?service-payment"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<PaymentTransactionOut>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: convertedParameters, isBody: true)
    }

    /**
     Calculation Method
     
     - parameter body: (body) Transaction Message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculationsservicePurchasePost(body: PurchaseTransactionIn, completion: @escaping ((_ data: PurchaseTransactionOut?,_ error: Error?) -> Void)) {
        calculationsservicePurchasePostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Calculation Method
     - POST /calculations?service-purchase
     - Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     - examples: [{contentType=application/json, example={
  "processingInfo" : {
    "duration" : 1.3579000000000001069366817318950779736042022705078125,
    "versionId" : "aeiou"
  },
  "header" : "",
  "lines" : [ "" ],
  "calculatedTaxSummary" : {
    "totalTax" : 1.3579000000000001069366817318950779736042022705078125,
    "numberOfLines" : 123,
    "grandTotal" : 1.3579000000000001069366817318950779736042022705078125,
    "subtotal" : 1.3579000000000001069366817318950779736042022705078125,
    "taxByType" : {
      "issRf" : {
        "tax" : 1.3579000000000001069366817318950779736042022705078125,
        "jurisdictions" : [ {
          "jurisdictionType" : "aeiou",
          "jurisdictionName" : "aeiou",
          "tax" : 1.3579000000000001069366817318950779736042022705078125
        } ]
      },
      "csllRf" : "",
      "pisRf" : "",
      "inssAr" : "",
      "cofinsRf" : "",
      "inssRf" : "",
      "pis" : "",
      "irrf" : "",
      "cofins" : ""
    }
  }
}}]
     
     - parameter body: (body) Transaction Message 

     - returns: RequestBuilder<PurchaseTransactionOut> 
     */
    open class func calculationsservicePurchasePostWithRequestBuilder(body: PurchaseTransactionIn) -> RequestBuilder<PurchaseTransactionOut> {
        let path = "/calculations?service-purchase"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<PurchaseTransactionOut>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: convertedParameters, isBody: true)
    }

    /**
     Calculation Method
     
     - parameter body: (body) Transaction Message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculationsserviceReceiptPost(body: ReceiptTransactionIn, completion: @escaping ((_ data: ReceiptTransactionOut?,_ error: Error?) -> Void)) {
        calculationsserviceReceiptPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Calculation Method
     - POST /calculations?service-receipt
     - Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     - examples: [{contentType=application/json, example={
  "processingInfo" : {
    "duration" : 1.3579000000000001069366817318950779736042022705078125,
    "versionId" : "aeiou"
  },
  "header" : {
    "companyCode" : "aeiou",
    "transactionType" : "aeiou",
    "documentCode" : "aeiou",
    "accountId" : "aeiou",
    "paymentMode" : "aeiou",
    "currency" : "aeiou",
    "taxCalculationDate" : "2000-01-23",
    "transactionDate" : "2000-01-23",
    "vendorCode" : "aeiou"
  },
  "lines" : [ "" ],
  "calculatedTaxSummary" : {
    "totalTax" : 1.3579000000000001069366817318950779736042022705078125,
    "numberOfLines" : 123,
    "grandTotal" : 1.3579000000000001069366817318950779736042022705078125,
    "subtotal" : 1.3579000000000001069366817318950779736042022705078125,
    "pccWithholdingModes" : [ {
      "totalTax" : 1.3579000000000001069366817318950779736042022705078125,
      "csllRf" : "",
      "pisRf" : {
        "tax" : 1.3579000000000001069366817318950779736042022705078125
      },
      "cofinsRf" : "",
      "type" : "aeiou"
    } ],
    "taxByType" : {
      "issRf" : {
        "tax" : 1.3579000000000001069366817318950779736042022705078125,
        "jurisdictions" : [ {
          "jurisdictionType" : "aeiou",
          "jurisdictionName" : "aeiou",
          "tax" : 1.3579000000000001069366817318950779736042022705078125
        } ]
      },
      "csllRf" : "",
      "pisRf" : "",
      "cofinsRf" : "",
      "inssRf" : "",
      "irrf" : ""
    }
  }
}}]
     
     - parameter body: (body) Transaction Message 

     - returns: RequestBuilder<ReceiptTransactionOut> 
     */
    open class func calculationsserviceReceiptPostWithRequestBuilder(body: ReceiptTransactionIn) -> RequestBuilder<ReceiptTransactionOut> {
        let path = "/calculations?service-receipt"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<ReceiptTransactionOut>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: convertedParameters, isBody: true)
    }

    /**
     Calculation Method
     
     - parameter body: (body) Transaction Message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculationsserviceSalesPost(body: SalesTransactionIn, completion: @escaping ((_ data: SalesTransactionOut?,_ error: Error?) -> Void)) {
        calculationsserviceSalesPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Calculation Method
     - POST /calculations?service-sales
     - Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each 'calculations-<type>'.
     - examples: [{contentType=application/json, example={
  "processingInfo" : {
    "duration" : 1.3579000000000001069366817318950779736042022705078125,
    "versionId" : "aeiou"
  },
  "header" : "",
  "lines" : [ "" ],
  "calculatedTaxSummary" : {
    "totalTax" : 1.3579000000000001069366817318950779736042022705078125,
    "numberOfLines" : 123,
    "grandTotal" : 1.3579000000000001069366817318950779736042022705078125,
    "subtotal" : 1.3579000000000001069366817318950779736042022705078125,
    "taxByType" : {
      "issRf" : "",
      "iss" : "",
      "inssRf" : "",
      "irrf" : "",
      "aproxtribCity" : "",
      "cofins" : "",
      "irpj" : "",
      "csllRf" : "",
      "inss" : "",
      "pisRf" : {
        "tax" : 1.3579000000000001069366817318950779736042022705078125,
        "jurisdictions" : [ {
          "jurisdictionType" : "aeiou",
          "jurisdictionName" : "aeiou",
          "tax" : 1.3579000000000001069366817318950779736042022705078125
        } ]
      },
      "cofinsRf" : "",
      "aproxtribFed" : "",
      "pis" : "",
      "csll" : ""
    }
  }
}}]
     
     - parameter body: (body) Transaction Message 

     - returns: RequestBuilder<SalesTransactionOut> 
     */
    open class func calculationsserviceSalesPostWithRequestBuilder(body: SalesTransactionIn) -> RequestBuilder<SalesTransactionOut> {
        let path = "/calculations?service-sales"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<SalesTransactionOut>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: convertedParameters, isBody: true)
    }

}
