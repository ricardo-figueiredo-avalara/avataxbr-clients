//
// CompanyICMSAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class CompanyICMSAPI: APIBase {

    public class func mapValuesToQueryItems(values: [String:Any?]) -> [URLQueryItem] {
        return values
            .filter { $0.1 != nil }
            .map { (item: (_key: String, _value: Any?)) -> URLQueryItem in
                URLQueryItem(name: item._key, value:"\(item._value!)")
            }
    }

    /**

     - parameter companyId: (path) Company ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func companiesCompanyIdIcmsGet(companyId: UUID, completion: @escaping ((_ data: [CustomIcmsConfByState]?,_ error: Error?) -> Void)) {
        companiesCompanyIdIcmsGetWithRequestBuilder(companyId: companyId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /companies/{companyId}/icms
     - This operation return custom ICMS configurations that match with parameters queries 
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - examples: [{contentType=application/json, example=[ "" ]}]
     
     - parameter companyId: (path) Company ID 

     - returns: RequestBuilder<[CustomIcmsConfByState]> 
     */
    open class func companiesCompanyIdIcmsGetWithRequestBuilder(companyId: UUID) -> RequestBuilder<[CustomIcmsConfByState]> {
        var path = "/companies/{companyId}/icms"
        path = path.replacingOccurrences(of: "{companyId}", with: "\(companyId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<[CustomIcmsConfByState]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter state
     */
    public enum State_companiesCompanyIdIcmsStateGet: String { 
        case ac = "ac"
        case al = "al"
        case am = "am"
        case ap = "ap"
        case ba = "ba"
        case ce = "ce"
        case df = "df"
        case es = "es"
        case go = "go"
        case ma = "ma"
        case mg = "mg"
        case ms = "ms"
        case mt = "mt"
        case pa = "pa"
        case pb = "pb"
        case pe = "pe"
        case pi = "pi"
        case pr = "pr"
        case rj = "rj"
        case rn = "rn"
        case ro = "ro"
        case rr = "rr"
        case rs = "rs"
        case sc = "sc"
        case se = "se"
        case sp = "sp"
        case to = "to"
    }

    /**

     - parameter companyId: (path) Company ID 
     - parameter state: (path) Brazilian State 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func companiesCompanyIdIcmsStateGet(companyId: UUID, state: State_companiesCompanyIdIcmsStateGet, completion: @escaping ((_ data: CustomIcmsConfByState?,_ error: Error?) -> Void)) {
        companiesCompanyIdIcmsStateGetWithRequestBuilder(companyId: companyId, state: state).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /companies/{companyId}/icms/{state}
     - This operation return custom ICMS configurations that match with parameters queries 
     - examples: [{contentType=application/json, example=""}]
     
     - parameter companyId: (path) Company ID 
     - parameter state: (path) Brazilian State 

     - returns: RequestBuilder<CustomIcmsConfByState> 
     */
    open class func companiesCompanyIdIcmsStateGetWithRequestBuilder(companyId: UUID, state: State_companiesCompanyIdIcmsStateGet) -> RequestBuilder<CustomIcmsConfByState> {
        var path = "/companies/{companyId}/icms/{state}"
        path = path.replacingOccurrences(of: "{companyId}", with: "\(companyId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{state}", with: "\(state.rawValue)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<CustomIcmsConfByState>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create custom ICMS tax for one company
     
     - parameter companyId: (path) Company ID 
     - parameter body: (body) Transaction Message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createICMS(companyId: UUID, body: CustomIcmsConfByState, completion: @escaping ((_ data: InlineResponse201?,_ error: Error?) -> Void)) {
        createICMSWithRequestBuilder(companyId: companyId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create custom ICMS tax for one company
     - POST /companies/{companyId}/icms
     - This method operation create a custom agast for one company 
     - examples: [{contentType=application/json, example={
  "id" : 123
}}]
     
     - parameter companyId: (path) Company ID 
     - parameter body: (body) Transaction Message 

     - returns: RequestBuilder<InlineResponse201> 
     */
    open class func createICMSWithRequestBuilder(companyId: UUID, body: CustomIcmsConfByState) -> RequestBuilder<InlineResponse201> {
        var path = "/companies/{companyId}/icms"
        path = path.replacingOccurrences(of: "{companyId}", with: "\(companyId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<InlineResponse201>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: convertedParameters, isBody: true)
    }

    /**
     * enum for parameter state
     */
    public enum State_deleteCustomIcmsConfByState: String { 
        case ac = "ac"
        case al = "al"
        case am = "am"
        case ap = "ap"
        case ba = "ba"
        case ce = "ce"
        case df = "df"
        case es = "es"
        case go = "go"
        case ma = "ma"
        case mg = "mg"
        case ms = "ms"
        case mt = "mt"
        case pa = "pa"
        case pb = "pb"
        case pe = "pe"
        case pi = "pi"
        case pr = "pr"
        case rj = "rj"
        case rn = "rn"
        case ro = "ro"
        case rr = "rr"
        case rs = "rs"
        case sc = "sc"
        case se = "se"
        case sp = "sp"
        case to = "to"
    }

    /**

     - parameter companyId: (path) Company ID 
     - parameter state: (path) Brazilian State 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteCustomIcmsConfByState(companyId: UUID, state: State_deleteCustomIcmsConfByState, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteCustomIcmsConfByStateWithRequestBuilder(companyId: companyId, state: state).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - DELETE /companies/{companyId}/icms/{state}
     
     - parameter companyId: (path) Company ID 
     - parameter state: (path) Brazilian State 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteCustomIcmsConfByStateWithRequestBuilder(companyId: UUID, state: State_deleteCustomIcmsConfByState) -> RequestBuilder<Void> {
        var path = "/companies/{companyId}/icms/{state}"
        path = path.replacingOccurrences(of: "{companyId}", with: "\(companyId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{state}", with: "\(state.rawValue)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter state
     */
    public enum State_updateCustomIcmsConfByState: String { 
        case ac = "ac"
        case al = "al"
        case am = "am"
        case ap = "ap"
        case ba = "ba"
        case ce = "ce"
        case df = "df"
        case es = "es"
        case go = "go"
        case ma = "ma"
        case mg = "mg"
        case ms = "ms"
        case mt = "mt"
        case pa = "pa"
        case pb = "pb"
        case pe = "pe"
        case pi = "pi"
        case pr = "pr"
        case rj = "rj"
        case rn = "rn"
        case ro = "ro"
        case rr = "rr"
        case rs = "rs"
        case sc = "sc"
        case se = "se"
        case sp = "sp"
        case to = "to"
    }

    /**
     Update custom agast for one company
     
     - parameter companyId: (path) Company ID 
     - parameter state: (path) Brazilian State 
     - parameter body: (body) Transaction Message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateCustomIcmsConfByState(companyId: UUID, state: State_updateCustomIcmsConfByState, body: CustomIcmsConfByState, completion: @escaping ((_ error: Error?) -> Void)) {
        updateCustomIcmsConfByStateWithRequestBuilder(companyId: companyId, state: state, body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update custom agast for one company
     - PUT /companies/{companyId}/icms/{state}
     - This method operation update a custom ICMS tax for one company 
     
     - parameter companyId: (path) Company ID 
     - parameter state: (path) Brazilian State 
     - parameter body: (body) Transaction Message 

     - returns: RequestBuilder<Void> 
     */
    open class func updateCustomIcmsConfByStateWithRequestBuilder(companyId: UUID, state: State_updateCustomIcmsConfByState, body: CustomIcmsConfByState) -> RequestBuilder<Void> {
        var path = "/companies/{companyId}/icms/{state}"
        path = path.replacingOccurrences(of: "{companyId}", with: "\(companyId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{state}", with: "\(state.rawValue)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: convertedParameters, isBody: true)
    }

}
