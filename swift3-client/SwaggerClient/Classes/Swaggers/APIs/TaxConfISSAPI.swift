//
// TaxConfISSAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class TaxConfISSAPI: APIBase {

    public class func mapValuesToQueryItems(values: [String:Any?]) -> [URLQueryItem] {
        return values
            .filter { $0.1 != nil }
            .map { (item: (_key: String, _value: Any?)) -> URLQueryItem in
                URLQueryItem(name: item._key, value:"\(item._value!)")
            }
    }

    /**
     create a new ISS Configuration
     
     - parameter issConfByCity: (body) The pet JSON you want to post 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createIssConfByCity(issConfByCity: IssConfByCity, completion: @escaping ((_ data: InlineResponse201?,_ error: Error?) -> Void)) {
        createIssConfByCityWithRequestBuilder(issConfByCity: issConfByCity).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     create a new ISS Configuration
     - POST /taxconf/iss
     - examples: [{contentType=application/json, example={
  "id" : 123
}}]
     
     - parameter issConfByCity: (body) The pet JSON you want to post 

     - returns: RequestBuilder<InlineResponse201> 
     */
    open class func createIssConfByCityWithRequestBuilder(issConfByCity: IssConfByCity) -> RequestBuilder<InlineResponse201> {
        let path = "/taxconf/iss"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = issConfByCity.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<InlineResponse201>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: convertedParameters, isBody: true)
    }

    /**
     disable a ISS by City Code.
     
     - parameter cityCode: (path) City Code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIssConf(cityCode: Double, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteIssConfWithRequestBuilder(cityCode: cityCode).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     disable a ISS by City Code.
     - DELETE /taxconf/iss/{cityCode}
     
     - parameter cityCode: (path) City Code 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteIssConfWithRequestBuilder(cityCode: Double) -> RequestBuilder<Void> {
        var path = "/taxconf/iss/{cityCode}"
        path = path.replacingOccurrences(of: "{cityCode}", with: "\(cityCode)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     get ISS information by City Code.
     
     - parameter cityCode: (path) City Code 
     - parameter code: (query) Identificator of this configuration, it is unique for account or standard namedspace  (optional)
     - parameter date: (query) When informed return valid version configuration for this date  (optional)
     - parameter inactive: (query) return the inctives versions too  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIssConfByCity(cityCode: Double, code: String? = nil, date: Date? = nil, inactive: Bool? = nil, completion: @escaping ((_ data: [IssConfByCity]?,_ error: Error?) -> Void)) {
        getIssConfByCityWithRequestBuilder(cityCode: cityCode, code: code, date: date, inactive: inactive).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     get ISS information by City Code.
     - GET /taxconf/iss/{cityCode}
     - This operation return configurations of ISS that match with parameters queries 
     - examples: [{contentType=application/json, example=[ {
  "cityCode" : 123456789,
  "issWhDestOtherCities" : true,
  "name" : "aeiou",
  "issWhDestSameCity" : true,
  "serviceList" : [ {
    "taxRate" : {
      "ISS_RF" : "",
      "ISS_E" : "",
      "ISS" : {
        "rateType" : "aeiou",
        "reason" : "aeiou",
        "period" : {
          "startDate" : "2000-01-23",
          "expirationDate" : "2000-01-23"
        },
        "rate" : 1.3579000000000001069366817318950779736042022705078125,
        "isExempt" : true,
        "discount" : 1.3579000000000001069366817318950779736042022705078125,
        "message" : "aeiou",
        "zone2" : 123,
        "taxType" : "aeiou",
        "zone1" : 123
      },
      "ISS_I" : "",
      "ibpt" : {
        "cityTax" : 1.3579000000000001069366817318950779736042022705078125,
        "nationalFedTax" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "agast" : "aeiou",
    "cityServiceCode" : "aeiou"
  } ],
  "issWhOriginUnregSeller" : true,
  "state" : { }
} ]}]
     
     - parameter cityCode: (path) City Code 
     - parameter code: (query) Identificator of this configuration, it is unique for account or standard namedspace  (optional)
     - parameter date: (query) When informed return valid version configuration for this date  (optional)
     - parameter inactive: (query) return the inctives versions too  (optional)

     - returns: RequestBuilder<[IssConfByCity]> 
     */
    open class func getIssConfByCityWithRequestBuilder(cityCode: Double, code: String? = nil, date: Date? = nil, inactive: Bool? = nil) -> RequestBuilder<[IssConfByCity]> {
        var path = "/taxconf/iss/{cityCode}"
        path = path.replacingOccurrences(of: "{cityCode}", with: "\(cityCode)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "code": code,
            "date": date?.encodeToJSON(),
            "inactive": inactive
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<[IssConfByCity]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     retrive list of ISS
     
     - parameter suffixcode: (query) Identify this ISS  (optional)
     - parameter date: (query) When informed return valid version configuration for this date  (optional)
     - parameter inactive: (query) return the inactive versions too  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIssList(suffixcode: String? = nil, date: Date? = nil, inactive: Bool? = nil, completion: @escaping ((_ data: [IssConfByCity]?,_ error: Error?) -> Void)) {
        getIssListWithRequestBuilder(suffixcode: suffixcode, date: date, inactive: inactive).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     retrive list of ISS
     - GET /taxconf/iss
     - This operation return ISS configurations that match with parameters queries 
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - examples: [{contentType=application/json, example=[ {
  "cityCode" : 123456789,
  "issWhDestOtherCities" : true,
  "name" : "aeiou",
  "issWhDestSameCity" : true,
  "serviceList" : [ {
    "taxRate" : {
      "ISS_RF" : "",
      "ISS_E" : "",
      "ISS" : {
        "rateType" : "aeiou",
        "reason" : "aeiou",
        "period" : {
          "startDate" : "2000-01-23",
          "expirationDate" : "2000-01-23"
        },
        "rate" : 1.3579000000000001069366817318950779736042022705078125,
        "isExempt" : true,
        "discount" : 1.3579000000000001069366817318950779736042022705078125,
        "message" : "aeiou",
        "zone2" : 123,
        "taxType" : "aeiou",
        "zone1" : 123
      },
      "ISS_I" : "",
      "ibpt" : {
        "cityTax" : 1.3579000000000001069366817318950779736042022705078125,
        "nationalFedTax" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "agast" : "aeiou",
    "cityServiceCode" : "aeiou"
  } ],
  "issWhOriginUnregSeller" : true,
  "state" : { }
} ]}]
     
     - parameter suffixcode: (query) Identify this ISS  (optional)
     - parameter date: (query) When informed return valid version configuration for this date  (optional)
     - parameter inactive: (query) return the inactive versions too  (optional)

     - returns: RequestBuilder<[IssConfByCity]> 
     */
    open class func getIssListWithRequestBuilder(suffixcode: String? = nil, date: Date? = nil, inactive: Bool? = nil) -> RequestBuilder<[IssConfByCity]> {
        let path = "/taxconf/iss"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "suffixcode": suffixcode,
            "date": date?.encodeToJSON(),
            "inactive": inactive
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<[IssConfByCity]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     update a ISS by City Code.
     
     - parameter cityCode: (path) City Code 
     - parameter issConfByCity: (body) The pet JSON you want to post 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateIssConfByCity(cityCode: Double, issConfByCity: IssConfByCity, completion: @escaping ((_ error: Error?) -> Void)) {
        updateIssConfByCityWithRequestBuilder(cityCode: cityCode, issConfByCity: issConfByCity).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     update a ISS by City Code.
     - PUT /taxconf/iss/{cityCode}
     
     - parameter cityCode: (path) City Code 
     - parameter issConfByCity: (body) The pet JSON you want to post 

     - returns: RequestBuilder<Void> 
     */
    open class func updateIssConfByCityWithRequestBuilder(cityCode: Double, issConfByCity: IssConfByCity) -> RequestBuilder<Void> {
        var path = "/taxconf/iss/{cityCode}"
        path = path.replacingOccurrences(of: "{cityCode}", with: "\(cityCode)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = issConfByCity.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: convertedParameters, isBody: true)
    }

}
