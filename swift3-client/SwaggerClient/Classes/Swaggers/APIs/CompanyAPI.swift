//
// CompanyAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class CompanyAPI: APIBase {

    public class func mapValuesToQueryItems(values: [String:Any?]) -> [URLQueryItem] {
        return values
            .filter { $0.1 != nil }
            .map { (item: (_key: String, _value: Any?)) -> URLQueryItem in
                URLQueryItem(name: item._key, value:"\(item._value!)")
            }
    }

    /**
     Retrieve Companies by account
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func companiesGet(completion: @escaping ((_ data: [Company]?,_ error: Error?) -> Void)) {
        companiesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Retrieve Companies by account
     - GET /companies
     - Retrieve list companies of one account
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - examples: [{contentType=application/json, example=[ {
  "icmsRateForSimplestaxregime" : 1.3579000000000001069366817318950779736042022705078125,
  "authorizedToDownloadNFe" : [ {
    "federalTaxId" : "aeiou"
  } ],
  "code" : "aeiou",
  "configuration" : {
    "tpImpNFCe" : "aeiou",
    "certificatepwd" : "aeiou",
    "tpImpNFe" : "aeiou",
    "certificate" : "aeiou",
    "logo" : "aeiou",
    "certificateexpiration" : "2000-01-23T04:56:07.000+00:00"
  },
  "entityType" : { },
  "cofinsSubjectTo" : "aeiou",
  "issWithholdSubjectTo" : true,
  "inssWithholdSubjectTo" : true,
  "officialName" : "aeiou",
  "mailServer" : {
    "password" : "aeiou",
    "protocol" : "aeiou",
    "port" : 123,
    "smtpAddress" : "aeiou",
    "emailFrom" : "aeiou",
    "templatemessageToEmail" : "aeiou",
    "user" : "aeiou"
  },
  "irrfWithholdSubjectTo" : true,
  "pisSubjectTo" : "aeiou",
  "name" : "aeiou",
  "federalTaxRegime" : { },
  "csllSubjectTo" : "aeiou",
  "subjectToSRF1234" : true,
  "receiptsAreFullNoCumulativePisCofins" : true,
  "isExemptByGrossRevenueForSimplestaxregime" : true
} ]}]

     - returns: RequestBuilder<[Company]> 
     */
    open class func companiesGetWithRequestBuilder() -> RequestBuilder<[Company]> {
        let path = "/companies"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<[Company]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create company and your data configuration
     
     - parameter body: (body) Transaction Message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createCompany(body: Company, completion: @escaping ((_ data: Company?,_ error: Error?) -> Void)) {
        createCompanyWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create company and your data configuration
     - POST /companies
     - This method operation create a company for a account 
     - examples: [{contentType=application/json, example={
  "icmsRateForSimplestaxregime" : 1.3579000000000001069366817318950779736042022705078125,
  "authorizedToDownloadNFe" : [ {
    "federalTaxId" : "aeiou"
  } ],
  "code" : "aeiou",
  "configuration" : {
    "tpImpNFCe" : "aeiou",
    "certificatepwd" : "aeiou",
    "tpImpNFe" : "aeiou",
    "certificate" : "aeiou",
    "logo" : "aeiou",
    "certificateexpiration" : "2000-01-23T04:56:07.000+00:00"
  },
  "entityType" : { },
  "cofinsSubjectTo" : "aeiou",
  "issWithholdSubjectTo" : true,
  "inssWithholdSubjectTo" : true,
  "officialName" : "aeiou",
  "mailServer" : {
    "password" : "aeiou",
    "protocol" : "aeiou",
    "port" : 123,
    "smtpAddress" : "aeiou",
    "emailFrom" : "aeiou",
    "templatemessageToEmail" : "aeiou",
    "user" : "aeiou"
  },
  "irrfWithholdSubjectTo" : true,
  "pisSubjectTo" : "aeiou",
  "name" : "aeiou",
  "federalTaxRegime" : { },
  "csllSubjectTo" : "aeiou",
  "subjectToSRF1234" : true,
  "receiptsAreFullNoCumulativePisCofins" : true,
  "isExemptByGrossRevenueForSimplestaxregime" : true
}}]
     
     - parameter body: (body) Transaction Message 

     - returns: RequestBuilder<Company> 
     */
    open class func createCompanyWithRequestBuilder(body: Company) -> RequestBuilder<Company> {
        let path = "/companies"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Company>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter accountId: (path) Account ID 
     - parameter companyId: (path) Company ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAccountCompany(accountId: UUID, companyId: UUID, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteAccountCompanyWithRequestBuilder(accountId: accountId, companyId: companyId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - DELETE /accounts/{accountId}/companies/{companyId}
     
     - parameter accountId: (path) Account ID 
     - parameter companyId: (path) Company ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAccountCompanyWithRequestBuilder(accountId: UUID, companyId: UUID) -> RequestBuilder<Void> {
        var path = "/accounts/{accountId}/companies/{companyId}"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{companyId}", with: "\(companyId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter companyId: (path) Company ID 
     - parameter companyId2: (path) Company ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteCompany(companyId: UUID, companyId2: UUID, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteCompanyWithRequestBuilder(companyId: companyId, companyId2: companyId2).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - DELETE /companies/{companyId}
     
     - parameter companyId: (path) Company ID 
     - parameter companyId2: (path) Company ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteCompanyWithRequestBuilder(companyId: UUID, companyId2: UUID) -> RequestBuilder<Void> {
        var path = "/companies/{companyId}"
        path = path.replacingOccurrences(of: "{companyId}", with: "\(companyId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{companyId2}", with: "\(companyId2)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get company information and your data configuration
     
     - parameter companyId: (path) Company ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func infoCompany(companyId: UUID, completion: @escaping ((_ data: Company?,_ error: Error?) -> Void)) {
        infoCompanyWithRequestBuilder(companyId: companyId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get company information and your data configuration
     - GET /companies/{companyId}
     - This method operation get a company for a account 
     - examples: [{contentType=application/json, example={
  "icmsRateForSimplestaxregime" : 1.3579000000000001069366817318950779736042022705078125,
  "authorizedToDownloadNFe" : [ {
    "federalTaxId" : "aeiou"
  } ],
  "code" : "aeiou",
  "configuration" : {
    "tpImpNFCe" : "aeiou",
    "certificatepwd" : "aeiou",
    "tpImpNFe" : "aeiou",
    "certificate" : "aeiou",
    "logo" : "aeiou",
    "certificateexpiration" : "2000-01-23T04:56:07.000+00:00"
  },
  "entityType" : { },
  "cofinsSubjectTo" : "aeiou",
  "issWithholdSubjectTo" : true,
  "inssWithholdSubjectTo" : true,
  "officialName" : "aeiou",
  "mailServer" : {
    "password" : "aeiou",
    "protocol" : "aeiou",
    "port" : 123,
    "smtpAddress" : "aeiou",
    "emailFrom" : "aeiou",
    "templatemessageToEmail" : "aeiou",
    "user" : "aeiou"
  },
  "irrfWithholdSubjectTo" : true,
  "pisSubjectTo" : "aeiou",
  "name" : "aeiou",
  "federalTaxRegime" : { },
  "csllSubjectTo" : "aeiou",
  "subjectToSRF1234" : true,
  "receiptsAreFullNoCumulativePisCofins" : true,
  "isExemptByGrossRevenueForSimplestaxregime" : true
}}]
     
     - parameter companyId: (path) Company ID 

     - returns: RequestBuilder<Company> 
     */
    open class func infoCompanyWithRequestBuilder(companyId: UUID) -> RequestBuilder<Company> {
        var path = "/companies/{companyId}"
        path = path.replacingOccurrences(of: "{companyId}", with: "\(companyId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Company>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update company information and your data configuration
     
     - parameter companyId: (path) Company ID 
     - parameter body: (body) Transaction Message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateCompany(companyId: UUID, body: Company, completion: @escaping ((_ error: Error?) -> Void)) {
        updateCompanyWithRequestBuilder(companyId: companyId, body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update company information and your data configuration
     - PUT /companies/{companyId}
     - This method operation create a company for a account 
     
     - parameter companyId: (path) Company ID 
     - parameter body: (body) Transaction Message 

     - returns: RequestBuilder<Void> 
     */
    open class func updateCompanyWithRequestBuilder(companyId: UUID, body: Company) -> RequestBuilder<Void> {
        var path = "/companies/{companyId}"
        path = path.replacingOccurrences(of: "{companyId}", with: "\(companyId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: convertedParameters, isBody: true)
    }

}
