// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case Error(Int, Data?, Error)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> T {
        let key = discriminator;
        if let decoder = decoders[key] {
            return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.int32Value as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.int64Value as! T;
        }
        if T.self is UUID.Type && source is String {
            return UUID(uuidString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is Data.Type && source is String {
            return Data(base64Encoded: source as! String) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject) -> Date in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return date
                    }
                }
            }
            if let sourceInt = source as? Int64 {
                // treat as a java date
                return Date(timeIntervalSince1970: Double(sourceInt / 1000) )
            }
            fatalError("formatter failed to parse \(source)")
        } 

        // Decoder for [AccountCompany]
        Decoders.addDecoder(clazz: [AccountCompany].self) { (source: AnyObject) -> [AccountCompany] in
            return Decoders.decode(clazz: [AccountCompany].self, source: source)
        }
        // Decoder for AccountCompany
        Decoders.addDecoder(clazz: AccountCompany.self) { (source: AnyObject) -> AccountCompany in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AccountCompany()
            instance.companyId = Decoders.decodeOptional(clazz: UUID.self, source: sourceDictionary["companyId"] as AnyObject?)
            instance.companyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyCode"] as AnyObject?)
            instance.companyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyName"] as AnyObject?)
            return instance
        }


        // Decoder for [AdditionalInformation]
        Decoders.addDecoder(clazz: [AdditionalInformation].self) { (source: AnyObject) -> [AdditionalInformation] in
            return Decoders.decode(clazz: [AdditionalInformation].self, source: source)
        }
        // Decoder for AdditionalInformation
        Decoders.addDecoder(clazz: AdditionalInformation.self) { (source: AnyObject) -> AdditionalInformation in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AdditionalInformation()
            instance.fiscalInfo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fiscalInfo"] as AnyObject?)
            instance.complementaryInfo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["complementaryInfo"] as AnyObject?)
            instance.procRef = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["procRef"] as AnyObject?)
            return instance
        }


        // Decoder for [AdditionalInformationProcRef]
        Decoders.addDecoder(clazz: [AdditionalInformationProcRef].self) { (source: AnyObject) -> [AdditionalInformationProcRef] in
            return Decoders.decode(clazz: [AdditionalInformationProcRef].self, source: source)
        }
        // Decoder for AdditionalInformationProcRef
        Decoders.addDecoder(clazz: AdditionalInformationProcRef.self) { (source: AnyObject) -> AdditionalInformationProcRef in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AdditionalInformationProcRef()
            instance.nProc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nProc"] as AnyObject?)
            if let indProc = sourceDictionary["indProc"] as? String { 
                instance.indProc = AdditionalInformationProcRef.IndProc(rawValue: (indProc))
            }
            
            return instance
        }


        // Decoder for [Address]
        Decoders.addDecoder(clazz: [Address].self) { (source: AnyObject) -> [Address] in
            return Decoders.decode(clazz: [Address].self, source: source)
        }
        // Decoder for Address
        Decoders.addDecoder(clazz: Address.self) { (source: AnyObject) -> Address in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Address()
            instance.street = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street"] as AnyObject?)
            instance.neighborhood = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["neighborhood"] as AnyObject?)
            instance.zipcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zipcode"] as AnyObject?)
            instance.cityCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityCode"] as AnyObject?)
            instance.cityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityName"] as AnyObject?)
            instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"] as AnyObject?)
            instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryCode"] as AnyObject?)
            instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"] as AnyObject?)
            return instance
        }


        // Decoder for [Agast]
        Decoders.addDecoder(clazz: [Agast].self) { (source: AnyObject) -> [Agast] in
            return Decoders.decode(clazz: [Agast].self, source: source)
        }
        // Decoder for Agast
        Decoders.addDecoder(clazz: Agast.self) { (source: AnyObject) -> Agast in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Agast()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.hsCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hsCode"] as AnyObject?)
            instance.ex = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ex"] as AnyObject?)
            instance.cest = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cest"] as AnyObject?)
            instance.cean = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cean"] as AnyObject?)
            instance.codeType = Decoders.decodeOptional(clazz: AgastCodeType.self, source: sourceDictionary["codeType"] as AnyObject?)
            if let cstIPI = sourceDictionary["cstIPI"] as? String { 
                instance.cstIPI = Agast.CstIPI(rawValue: (cstIPI))
            }
            
            instance.ipiLegalTaxClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipiLegalTaxClass"] as AnyObject?)
            if let pisCofinsTaxReporting = sourceDictionary["pisCofinsTaxReporting"] as? String { 
                instance.pisCofinsTaxReporting = Agast.PisCofinsTaxReporting(rawValue: (pisCofinsTaxReporting))
            }
            
            if let accruablePISTaxation = sourceDictionary["accruablePISTaxation"] as? String { 
                instance.accruablePISTaxation = Agast.AccruablePISTaxation(rawValue: (accruablePISTaxation))
            }
            
            instance.pisExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReasonCode"] as AnyObject?)
            instance.pisExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReason"] as AnyObject?)
            if let accruableCOFINSTaxation = sourceDictionary["accruableCOFINSTaxation"] as? String { 
                instance.accruableCOFINSTaxation = Agast.AccruableCOFINSTaxation(rawValue: (accruableCOFINSTaxation))
            }
            
            instance.cofinsExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReasonCode"] as AnyObject?)
            instance.cofinsExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReason"] as AnyObject?)
            if let accruableCSLLTaxation = sourceDictionary["accruableCSLLTaxation"] as? String { 
                instance.accruableCSLLTaxation = Agast.AccruableCSLLTaxation(rawValue: (accruableCSLLTaxation))
            }
            
            instance.csllExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["csllExemptLegalReason"] as AnyObject?)
            instance.csllExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["csllExemptLegalReasonCode"] as AnyObject?)
            instance.withholding = Decoders.decodeOptional(clazz: AgastWithholding.self, source: sourceDictionary["withholding"] as AnyObject?)
            instance.issDueatDestination = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["issDueatDestination"] as AnyObject?)
            instance.pisCofinsCreditNotAllowed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["pisCofinsCreditNotAllowed"] as AnyObject?)
            if let issTaxation = sourceDictionary["issTaxation"] as? String { 
                instance.issTaxation = Agast.IssTaxation(rawValue: (issTaxation))
            }
            
            instance.federalTaxRate = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["federalTaxRate"] as AnyObject?)
            if let specialProductClass = sourceDictionary["specialProductClass"] as? String { 
                instance.specialProductClass = Agast.SpecialProductClass(rawValue: (specialProductClass))
            }
            
            instance.icmsConf = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["icmsConf"] as AnyObject?)
            return instance
        }


        // Decoder for [AgastCodeType]
        Decoders.addDecoder(clazz: [AgastCodeType].self) { (source: AnyObject) -> [AgastCodeType] in
            return Decoders.decode(clazz: [AgastCodeType].self, source: source)
        }
        // Decoder for AgastCodeType
        Decoders.addDecoder(clazz: AgastCodeType.self) { (source: AnyObject) -> AgastCodeType in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AgastCodeType()
            instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"] as AnyObject?)
            if let name = sourceDictionary["name"] as? String { 
                instance.name = AgastCodeType.Name(rawValue: (name))
            }
            
            return instance
        }


        // Decoder for [AgastExtendForSefaz]
        Decoders.addDecoder(clazz: [AgastExtendForSefaz].self) { (source: AnyObject) -> [AgastExtendForSefaz] in
            return Decoders.decode(clazz: [AgastExtendForSefaz].self, source: source)
        }
        // Decoder for AgastExtendForSefaz
        Decoders.addDecoder(clazz: AgastExtendForSefaz.self) { (source: AnyObject) -> AgastExtendForSefaz in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AgastExtendForSefaz()
            instance.hsCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hsCode"] as AnyObject?)
            instance.ex = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ex"] as AnyObject?)
            instance.cest = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cest"] as AnyObject?)
            instance.cean = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cean"] as AnyObject?)
            instance.nve = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nve"] as AnyObject?)
            instance.unit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unit"] as AnyObject?)
            instance.unitTaxable = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitTaxable"] as AnyObject?)
            instance.nFCI = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nFCI"] as AnyObject?)
            return instance
        }


        // Decoder for [AgastIcmsConf]
        Decoders.addDecoder(clazz: [AgastIcmsConf].self) { (source: AnyObject) -> [AgastIcmsConf] in
            return Decoders.decode(clazz: [AgastIcmsConf].self, source: source)
        }
        // Decoder for AgastIcmsConf
        Decoders.addDecoder(clazz: AgastIcmsConf.self) { (source: AnyObject) -> AgastIcmsConf in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AgastIcmsConf()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"] as AnyObject?)
            return instance
        }


        // Decoder for [AgastWithholding]
        Decoders.addDecoder(clazz: [AgastWithholding].self) { (source: AnyObject) -> [AgastWithholding] in
            return Decoders.decode(clazz: [AgastWithholding].self, source: source)
        }
        // Decoder for AgastWithholding
        Decoders.addDecoder(clazz: AgastWithholding.self) { (source: AnyObject) -> AgastWithholding in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AgastWithholding()
            instance.IRRF = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IRRF"] as AnyObject?)
            instance.iRRFLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["IRRFLegalReason"] as AnyObject?)
            instance.iNSSSubjectToDischarge = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["INSSSubjectToDischarge"] as AnyObject?)
            instance.INSS = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["INSS"] as AnyObject?)
            instance.iNSSLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["INSSLegalReason"] as AnyObject?)
            instance.iNSsForSimples = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["INSsForSimples"] as AnyObject?)
            instance.iNSSForSimplesLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["INSSForSimplesLegalReason"] as AnyObject?)
            instance.PIS = Decoders.decodeOptional(clazz: AgastWithholdingPIS.self, source: sourceDictionary["PIS"] as AnyObject?)
            instance.COFINS = Decoders.decodeOptional(clazz: AgastWithholdingCOFINS.self, source: sourceDictionary["COFINS"] as AnyObject?)
            instance.CSLL = Decoders.decodeOptional(clazz: AgastWithholdingCSLL.self, source: sourceDictionary["CSLL"] as AnyObject?)
            return instance
        }


        // Decoder for [AgastWithholdingCOFINS]
        Decoders.addDecoder(clazz: [AgastWithholdingCOFINS].self) { (source: AnyObject) -> [AgastWithholdingCOFINS] in
            return Decoders.decode(clazz: [AgastWithholdingCOFINS].self, source: source)
        }
        // Decoder for AgastWithholdingCOFINS
        Decoders.addDecoder(clazz: AgastWithholdingCOFINS.self) { (source: AnyObject) -> AgastWithholdingCOFINS in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AgastWithholdingCOFINS()
            instance.legalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["legalReason"] as AnyObject?)
            instance.business = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["business"] as AnyObject?)
            instance.businessLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["businessLegalReason"] as AnyObject?)
            instance.federalGovernment = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["federalGovernment"] as AnyObject?)
            instance.federalGovernmentLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["federalGovernmentLegalReason"] as AnyObject?)
            instance.stateGovernment = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stateGovernment"] as AnyObject?)
            instance.stateGovernmentLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateGovernmentLegalReason"] as AnyObject?)
            instance.cityGovernment = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["cityGovernment"] as AnyObject?)
            instance.cityGovernmentLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityGovernmentLegalReason"] as AnyObject?)
            return instance
        }


        // Decoder for [AgastWithholdingCSLL]
        Decoders.addDecoder(clazz: [AgastWithholdingCSLL].self) { (source: AnyObject) -> [AgastWithholdingCSLL] in
            return Decoders.decode(clazz: [AgastWithholdingCSLL].self, source: source)
        }
        // Decoder for AgastWithholdingCSLL
        Decoders.addDecoder(clazz: AgastWithholdingCSLL.self) { (source: AnyObject) -> AgastWithholdingCSLL in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AgastWithholdingCSLL()
            instance.legalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["legalReason"] as AnyObject?)
            instance.business = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["business"] as AnyObject?)
            instance.businessLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["businessLegalReason"] as AnyObject?)
            instance.federalGovernment = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["federalGovernment"] as AnyObject?)
            instance.federalGovernmentLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["federalGovernmentLegalReason"] as AnyObject?)
            instance.stateGovernment = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stateGovernment"] as AnyObject?)
            instance.stateGovernmentLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateGovernmentLegalReason"] as AnyObject?)
            instance.cityGovernment = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["cityGovernment"] as AnyObject?)
            instance.cityGovernmentLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityGovernmentLegalReason"] as AnyObject?)
            return instance
        }


        // Decoder for [AgastWithholdingPIS]
        Decoders.addDecoder(clazz: [AgastWithholdingPIS].self) { (source: AnyObject) -> [AgastWithholdingPIS] in
            return Decoders.decode(clazz: [AgastWithholdingPIS].self, source: source)
        }
        // Decoder for AgastWithholdingPIS
        Decoders.addDecoder(clazz: AgastWithholdingPIS.self) { (source: AnyObject) -> AgastWithholdingPIS in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AgastWithholdingPIS()
            instance.legalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["legalReason"] as AnyObject?)
            instance.business = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["business"] as AnyObject?)
            instance.businessLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["businessLegalReason"] as AnyObject?)
            instance.federalGovernment = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["federalGovernment"] as AnyObject?)
            instance.federalGovernmentLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["federalGovernmentLegalReason"] as AnyObject?)
            instance.stateGovernment = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stateGovernment"] as AnyObject?)
            instance.stateGovernmentLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateGovernmentLegalReason"] as AnyObject?)
            instance.cityGovernment = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["cityGovernment"] as AnyObject?)
            instance.cityGovernmentLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityGovernmentLegalReason"] as AnyObject?)
            return instance
        }


        // Decoder for [Body]
        Decoders.addDecoder(clazz: [Body].self) { (source: AnyObject) -> [Body] in
            return Decoders.decode(clazz: [Body].self, source: source)
        }
        // Decoder for Body
        Decoders.addDecoder(clazz: Body.self) { (source: AnyObject) -> Body in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Body()
            instance.companyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyCode"] as AnyObject?)
            return instance
        }


        // Decoder for [Body1]
        Decoders.addDecoder(clazz: [Body1].self) { (source: AnyObject) -> [Body1] in
            return Decoders.decode(clazz: [Body1].self, source: source)
        }
        // Decoder for Body1
        Decoders.addDecoder(clazz: Body1.self) { (source: AnyObject) -> Body1 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Body1()
            instance.newCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["newCode"] as AnyObject?)
            return instance
        }


        // Decoder for [Body2]
        Decoders.addDecoder(clazz: [Body2].self) { (source: AnyObject) -> [Body2] in
            return Decoders.decode(clazz: [Body2].self, source: source)
        }
        // Decoder for Body2
        Decoders.addDecoder(clazz: Body2.self) { (source: AnyObject) -> Body2 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Body2()
            instance.content = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content"] as AnyObject?)
            return instance
        }


        // Decoder for [Body3]
        Decoders.addDecoder(clazz: [Body3].self) { (source: AnyObject) -> [Body3] in
            return Decoders.decode(clazz: [Body3].self, source: source)
        }
        // Decoder for Body3
        Decoders.addDecoder(clazz: Body3.self) { (source: AnyObject) -> Body3 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Body3()
            instance.content = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content"] as AnyObject?)
            return instance
        }


        // Decoder for [Body4]
        Decoders.addDecoder(clazz: [Body4].self) { (source: AnyObject) -> [Body4] in
            return Decoders.decode(clazz: [Body4].self, source: source)
        }
        // Decoder for Body4
        Decoders.addDecoder(clazz: Body4.self) { (source: AnyObject) -> Body4 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Body4()
            instance.startDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["startDate"] as AnyObject?)
            instance.finishDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["finishDate"] as AnyObject?)
            return instance
        }


        // Decoder for [CSTPistCofinsEnum]
        Decoders.addDecoder(clazz: [CSTPistCofinsEnum].self) { (source: AnyObject) -> [CSTPistCofinsEnum] in
            return Decoders.decode(clazz: [CSTPistCofinsEnum].self, source: source)
        }
        // Decoder for CSTPistCofinsEnum
        Decoders.addDecoder(clazz: CSTPistCofinsEnum.self) { (source: AnyObject) -> CSTPistCofinsEnum in
            if let source = source as? String {
                if let result = CSTPistCofinsEnum(rawValue: source) {
                    return result
                }
            }
            fatalError("Source \(source) is not convertible to enum type CSTPistCofinsEnum: Maybe swagger file is insufficient")
        }


        // Decoder for [CSTTableAEnum]
        Decoders.addDecoder(clazz: [CSTTableAEnum].self) { (source: AnyObject) -> [CSTTableAEnum] in
            return Decoders.decode(clazz: [CSTTableAEnum].self, source: source)
        }
        // Decoder for CSTTableAEnum
        Decoders.addDecoder(clazz: CSTTableAEnum.self) { (source: AnyObject) -> CSTTableAEnum in
            if let source = source as? String {
                if let result = CSTTableAEnum(rawValue: source) {
                    return result
                }
            }
            fatalError("Source \(source) is not convertible to enum type CSTTableAEnum: Maybe swagger file is insufficient")
        }


        // Decoder for [CSTTableBEnum]
        Decoders.addDecoder(clazz: [CSTTableBEnum].self) { (source: AnyObject) -> [CSTTableBEnum] in
            return Decoders.decode(clazz: [CSTTableBEnum].self, source: source)
        }
        // Decoder for CSTTableBEnum
        Decoders.addDecoder(clazz: CSTTableBEnum.self) { (source: AnyObject) -> CSTTableBEnum in
            if let source = source as? String {
                if let result = CSTTableBEnum(rawValue: source) {
                    return result
                }
            }
            fatalError("Source \(source) is not convertible to enum type CSTTableBEnum: Maybe swagger file is insufficient")
        }


        // Decoder for [CalcModelEnum]
        Decoders.addDecoder(clazz: [CalcModelEnum].self) { (source: AnyObject) -> [CalcModelEnum] in
            return Decoders.decode(clazz: [CalcModelEnum].self, source: source)
        }
        // Decoder for CalcModelEnum
        Decoders.addDecoder(clazz: CalcModelEnum.self) { (source: AnyObject) -> CalcModelEnum in
            if let source = source as? String {
                if let result = CalcModelEnum(rawValue: source) {
                    return result
                }
            }
            fatalError("Source \(source) is not convertible to enum type CalcModelEnum: Maybe swagger file is insufficient")
        }


        // Decoder for [CalculatedTaxSummaryForGoods]
        Decoders.addDecoder(clazz: [CalculatedTaxSummaryForGoods].self) { (source: AnyObject) -> [CalculatedTaxSummaryForGoods] in
            return Decoders.decode(clazz: [CalculatedTaxSummaryForGoods].self, source: source)
        }
        // Decoder for CalculatedTaxSummaryForGoods
        Decoders.addDecoder(clazz: CalculatedTaxSummaryForGoods.self) { (source: AnyObject) -> CalculatedTaxSummaryForGoods in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CalculatedTaxSummaryForGoods()
            instance.numberOfLines = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfLines"] as AnyObject?)
            instance.taxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["taxedDiscount"] as AnyObject?)
            instance.untaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["untaxedDiscount"] as AnyObject?)
            instance.subtotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotal"] as AnyObject?)
            instance.totalTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["totalTax"] as AnyObject?)
            instance.grandTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grandTotal"] as AnyObject?)
            instance.taxByType = Decoders.decodeOptional(clazz: CalculatedTaxSummaryForGoodsTaxByType.self, source: sourceDictionary["taxByType"] as AnyObject?)
            return instance
        }


        // Decoder for [CalculatedTaxSummaryForGoodsTaxByType]
        Decoders.addDecoder(clazz: [CalculatedTaxSummaryForGoodsTaxByType].self) { (source: AnyObject) -> [CalculatedTaxSummaryForGoodsTaxByType] in
            return Decoders.decode(clazz: [CalculatedTaxSummaryForGoodsTaxByType].self, source: source)
        }
        // Decoder for CalculatedTaxSummaryForGoodsTaxByType
        Decoders.addDecoder(clazz: CalculatedTaxSummaryForGoodsTaxByType.self) { (source: AnyObject) -> CalculatedTaxSummaryForGoodsTaxByType in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CalculatedTaxSummaryForGoodsTaxByType()
            instance.icms = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icms"] as AnyObject?)
            instance.icmsSt = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsSt"] as AnyObject?)
            instance.icmsStSd = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsStSd"] as AnyObject?)
            instance.icmsPartOwn = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsPartOwn"] as AnyObject?)
            instance.icmsPartDest = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsPartDest"] as AnyObject?)
            instance.icmsDifaFCP = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsDifaFCP"] as AnyObject?)
            instance.icmsDifaDest = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsDifaDest"] as AnyObject?)
            instance.icmsDifaRemet = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsDifaRemet"] as AnyObject?)
            instance.icmsRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsRf"] as AnyObject?)
            instance.icmsDeson = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsDeson"] as AnyObject?)
            instance.icmsCredsn = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsCredsn"] as AnyObject?)
            instance.pis = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["pis"] as AnyObject?)
            instance.pisSt = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["pisSt"] as AnyObject?)
            instance.cofins = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["cofins"] as AnyObject?)
            instance.cofinsSt = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["cofinsSt"] as AnyObject?)
            instance.ipi = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["ipi"] as AnyObject?)
            instance.ipiReturned = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["ipiReturned"] as AnyObject?)
            instance.ii = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["ii"] as AnyObject?)
            instance.iof = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["iof"] as AnyObject?)
            instance.aproxtribState = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["aproxtribState"] as AnyObject?)
            instance.aproxtribFed = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["aproxtribFed"] as AnyObject?)
            return instance
        }


        // Decoder for [CfopConf]
        Decoders.addDecoder(clazz: [CfopConf].self) { (source: AnyObject) -> [CfopConf] in
            return Decoders.decode(clazz: [CfopConf].self, source: source)
        }
        // Decoder for CfopConf
        Decoders.addDecoder(clazz: CfopConf.self) { (source: AnyObject) -> CfopConf in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CfopConf()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.stockImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stockImpact"] as AnyObject?)
            instance.financialImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["financialImpact"] as AnyObject?)
            if let cstIPI = sourceDictionary["cstIPI"] as? String { 
                instance.cstIPI = CfopConf.CstIPI(rawValue: (cstIPI))
            }
            
            instance.ipiLegalTaxClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipiLegalTaxClass"] as AnyObject?)
            if let accruablePISTaxation = sourceDictionary["accruablePISTaxation"] as? String { 
                instance.accruablePISTaxation = CfopConf.AccruablePISTaxation(rawValue: (accruablePISTaxation))
            }
            
            instance.pisExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReasonCode"] as AnyObject?)
            instance.pisExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReason"] as AnyObject?)
            if let accruableCOFINSTaxation = sourceDictionary["accruableCOFINSTaxation"] as? String { 
                instance.accruableCOFINSTaxation = CfopConf.AccruableCOFINSTaxation(rawValue: (accruableCOFINSTaxation))
            }
            
            instance.cofinsExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReasonCode"] as AnyObject?)
            instance.cofinsExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReason"] as AnyObject?)
            instance.allowIPIcreditWhenInGoing = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowIPIcreditWhenInGoing"] as AnyObject?)
            instance.icmsConf = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["icmsConf"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            if let wayType = sourceDictionary["wayType"] as? String { 
                instance.wayType = CfopConf.WayType(rawValue: (wayType))
            }
            
            instance.codInState = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["codInState"] as AnyObject?)
            instance.codOtherState = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["codOtherState"] as AnyObject?)
            instance.codOtherCountry = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["codOtherCountry"] as AnyObject?)
            instance.cstICMSSameState = Decoders.decodeOptional(clazz: CstIcmsEnum.self, source: sourceDictionary["cstICMSSameState"] as AnyObject?)
            instance.cstICMSOtherState = Decoders.decodeOptional(clazz: CstIcmsEnum.self, source: sourceDictionary["cstICMSOtherState"] as AnyObject?)
            instance.cstICMSOtherCountry = Decoders.decodeOptional(clazz: CstIcmsEnum.self, source: sourceDictionary["cstICMSOtherCountry"] as AnyObject?)
            if let productType = sourceDictionary["productType"] as? String { 
                instance.productType = CfopConf.ProductType(rawValue: (productType))
            }
            
            instance.operationToTaxPayerOtherState = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["operationToTaxPayerOtherState"] as AnyObject?)
            instance.operationWithST = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["operationWithST"] as AnyObject?)
            instance.operationToFreeZone = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["operationToFreeZone"] as AnyObject?)
            if let specificForProductClass = sourceDictionary["specificForProductClass"] as? String { 
                instance.specificForProductClass = CfopConf.SpecificForProductClass(rawValue: (specificForProductClass))
            }
            
            return instance
        }


        // Decoder for [Company]
        Decoders.addDecoder(clazz: [Company].self) { (source: AnyObject) -> [Company] in
            return Decoders.decode(clazz: [Company].self, source: source)
        }
        // Decoder for Company
        Decoders.addDecoder(clazz: Company.self) { (source: AnyObject) -> Company in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Company()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.officialName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["officialName"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.entityType = Decoders.decodeOptional(clazz: EntityType.self, source: sourceDictionary["entityType"] as AnyObject?)
            instance.subjectToSRF1234 = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["subjectToSRF1234"] as AnyObject?)
            instance.federalTaxRegime = Decoders.decodeOptional(clazz: FederalTaxRegime.self, source: sourceDictionary["federalTaxRegime"] as AnyObject?)
            if let pisSubjectTo = sourceDictionary["pisSubjectTo"] as? String { 
                instance.pisSubjectTo = Company.PisSubjectTo(rawValue: (pisSubjectTo))
            }
            
            if let cofinsSubjectTo = sourceDictionary["cofinsSubjectTo"] as? String { 
                instance.cofinsSubjectTo = Company.CofinsSubjectTo(rawValue: (cofinsSubjectTo))
            }
            
            if let csllSubjectTo = sourceDictionary["csllSubjectTo"] as? String { 
                instance.csllSubjectTo = Company.CsllSubjectTo(rawValue: (csllSubjectTo))
            }
            
            instance.receiptsAreFullNoCumulativePisCofins = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["receiptsAreFullNoCumulativePisCofins"] as AnyObject?)
            instance.inssWithholdSubjectTo = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["inssWithholdSubjectTo"] as AnyObject?)
            instance.issWithholdSubjectTo = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["issWithholdSubjectTo"] as AnyObject?)
            instance.irrfWithholdSubjectTo = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["irrfWithholdSubjectTo"] as AnyObject?)
            instance.icmsRateForSimplestaxregime = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["icmsRateForSimplestaxregime"] as AnyObject?)
            instance.isExemptByGrossRevenueForSimplestaxregime = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isExemptByGrossRevenueForSimplestaxregime"] as AnyObject?)
            instance.configuration = Decoders.decodeOptional(clazz: CompanyConfiguration.self, source: sourceDictionary["configuration"] as AnyObject?)
            instance.mailServer = Decoders.decodeOptional(clazz: CompanyMailServer.self, source: sourceDictionary["mailServer"] as AnyObject?)
            instance.authorizedToDownloadNFe = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["authorizedToDownloadNFe"] as AnyObject?)
            return instance
        }


        // Decoder for [CompanyAuthorizedToDownloadNFe]
        Decoders.addDecoder(clazz: [CompanyAuthorizedToDownloadNFe].self) { (source: AnyObject) -> [CompanyAuthorizedToDownloadNFe] in
            return Decoders.decode(clazz: [CompanyAuthorizedToDownloadNFe].self, source: source)
        }
        // Decoder for CompanyAuthorizedToDownloadNFe
        Decoders.addDecoder(clazz: CompanyAuthorizedToDownloadNFe.self) { (source: AnyObject) -> CompanyAuthorizedToDownloadNFe in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CompanyAuthorizedToDownloadNFe()
            instance.federalTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["federalTaxId"] as AnyObject?)
            return instance
        }


        // Decoder for [CompanyConfiguration]
        Decoders.addDecoder(clazz: [CompanyConfiguration].self) { (source: AnyObject) -> [CompanyConfiguration] in
            return Decoders.decode(clazz: [CompanyConfiguration].self, source: source)
        }
        // Decoder for CompanyConfiguration
        Decoders.addDecoder(clazz: CompanyConfiguration.self) { (source: AnyObject) -> CompanyConfiguration in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CompanyConfiguration()
            instance.certificate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["certificate"] as AnyObject?)
            instance.certificatepwd = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["certificatepwd"] as AnyObject?)
            instance.certificateexpiration = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["certificateexpiration"] as AnyObject?)
            instance.logo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["logo"] as AnyObject?)
            if let tpImpNFe = sourceDictionary["tpImpNFe"] as? String { 
                instance.tpImpNFe = CompanyConfiguration.TpImpNFe(rawValue: (tpImpNFe))
            }
            
            if let tpImpNFCe = sourceDictionary["tpImpNFCe"] as? String { 
                instance.tpImpNFCe = CompanyConfiguration.TpImpNFCe(rawValue: (tpImpNFCe))
            }
            
            return instance
        }


        // Decoder for [CompanyMailServer]
        Decoders.addDecoder(clazz: [CompanyMailServer].self) { (source: AnyObject) -> [CompanyMailServer] in
            return Decoders.decode(clazz: [CompanyMailServer].self, source: source)
        }
        // Decoder for CompanyMailServer
        Decoders.addDecoder(clazz: CompanyMailServer.self) { (source: AnyObject) -> CompanyMailServer in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CompanyMailServer()
            instance.user = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["user"] as AnyObject?)
            instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"] as AnyObject?)
            instance.smtpAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["smtpAddress"] as AnyObject?)
            instance.port = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["port"] as AnyObject?)
            instance.emailFrom = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emailFrom"] as AnyObject?)
            if let _protocol = sourceDictionary["protocol"] as? String { 
                instance._protocol = CompanyMailServer.ModelProtocol(rawValue: (_protocol))
            }
            
            instance.templatemessageToEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["templatemessageToEmail"] as AnyObject?)
            return instance
        }


        // Decoder for [CstIcmsEnum]
        Decoders.addDecoder(clazz: [CstIcmsEnum].self) { (source: AnyObject) -> [CstIcmsEnum] in
            return Decoders.decode(clazz: [CstIcmsEnum].self, source: source)
        }
        // Decoder for CstIcmsEnum
        Decoders.addDecoder(clazz: CstIcmsEnum.self) { (source: AnyObject) -> CstIcmsEnum in
            if let source = source as? String {
                if let result = CstIcmsEnum(rawValue: source) {
                    return result
                }
            }
            fatalError("Source \(source) is not convertible to enum type CstIcmsEnum: Maybe swagger file is insufficient")
        }


        // Decoder for [CustomAgast]
        Decoders.addDecoder(clazz: [CustomAgast].self) { (source: AnyObject) -> [CustomAgast] in
            return Decoders.decode(clazz: [CustomAgast].self, source: source)
        }
        // Decoder for CustomAgast
        Decoders.addDecoder(clazz: CustomAgast.self) { (source: AnyObject) -> CustomAgast in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CustomAgast()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.hsCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hsCode"] as AnyObject?)
            instance.ex = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ex"] as AnyObject?)
            instance.cest = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cest"] as AnyObject?)
            instance.cean = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cean"] as AnyObject?)
            instance.codeType = Decoders.decodeOptional(clazz: AgastCodeType.self, source: sourceDictionary["codeType"] as AnyObject?)
            if let cstIPI = sourceDictionary["cstIPI"] as? String { 
                instance.cstIPI = CustomAgast.CstIPI(rawValue: (cstIPI))
            }
            
            instance.ipiLegalTaxClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipiLegalTaxClass"] as AnyObject?)
            if let pisCofinsTaxReporting = sourceDictionary["pisCofinsTaxReporting"] as? String { 
                instance.pisCofinsTaxReporting = CustomAgast.PisCofinsTaxReporting(rawValue: (pisCofinsTaxReporting))
            }
            
            if let accruablePISTaxation = sourceDictionary["accruablePISTaxation"] as? String { 
                instance.accruablePISTaxation = CustomAgast.AccruablePISTaxation(rawValue: (accruablePISTaxation))
            }
            
            instance.pisExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReasonCode"] as AnyObject?)
            instance.pisExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReason"] as AnyObject?)
            if let accruableCOFINSTaxation = sourceDictionary["accruableCOFINSTaxation"] as? String { 
                instance.accruableCOFINSTaxation = CustomAgast.AccruableCOFINSTaxation(rawValue: (accruableCOFINSTaxation))
            }
            
            instance.cofinsExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReasonCode"] as AnyObject?)
            instance.cofinsExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReason"] as AnyObject?)
            if let accruableCSLLTaxation = sourceDictionary["accruableCSLLTaxation"] as? String { 
                instance.accruableCSLLTaxation = CustomAgast.AccruableCSLLTaxation(rawValue: (accruableCSLLTaxation))
            }
            
            instance.csllExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["csllExemptLegalReason"] as AnyObject?)
            instance.csllExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["csllExemptLegalReasonCode"] as AnyObject?)
            instance.withholding = Decoders.decodeOptional(clazz: AgastWithholding.self, source: sourceDictionary["withholding"] as AnyObject?)
            instance.issDueatDestination = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["issDueatDestination"] as AnyObject?)
            instance.pisCofinsCreditNotAllowed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["pisCofinsCreditNotAllowed"] as AnyObject?)
            if let issTaxation = sourceDictionary["issTaxation"] as? String { 
                instance.issTaxation = CustomAgast.IssTaxation(rawValue: (issTaxation))
            }
            
            instance.federalTaxRate = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["federalTaxRate"] as AnyObject?)
            if let specialProductClass = sourceDictionary["specialProductClass"] as? String { 
                instance.specialProductClass = CustomAgast.SpecialProductClass(rawValue: (specialProductClass))
            }
            
            instance.icmsConf = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["icmsConf"] as AnyObject?)
            instance.companyId = Decoders.decodeOptional(clazz: UUID.self, source: sourceDictionary["companyId"] as AnyObject?)
            return instance
        }


        // Decoder for [CustomIcmsConfByState]
        Decoders.addDecoder(clazz: [CustomIcmsConfByState].self) { (source: AnyObject) -> [CustomIcmsConfByState] in
            return Decoders.decode(clazz: [CustomIcmsConfByState].self, source: source)
        }
        // Decoder for CustomIcmsConfByState
        Decoders.addDecoder(clazz: CustomIcmsConfByState.self) { (source: AnyObject) -> CustomIcmsConfByState in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CustomIcmsConfByState()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.startDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["startDate"] as AnyObject?)
            instance.expirationDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["expirationDate"] as AnyObject?)
            instance.inactive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["inactive"] as AnyObject?)
            instance.subjectToST = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["subjectToST"] as AnyObject?)
            if let icmsCST = sourceDictionary["icmsCST"] as? String { 
                instance.icmsCST = CustomIcmsConfByState.IcmsCST(rawValue: (icmsCST))
            }
            
            if let calcMode = sourceDictionary["calcMode"] as? String { 
                instance.calcMode = CustomIcmsConfByState.CalcMode(rawValue: (calcMode))
            }
            
            instance.discountRateForMonoPhase = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discountRateForMonoPhase"] as AnyObject?)
            instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"] as AnyObject?)
            instance.icmsBaseDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["icmsBaseDiscount"] as AnyObject?)
            instance.msrp = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["msrp"] as AnyObject?)
            instance.mvaRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["mvaRate"] as AnyObject?)
            instance.msrpUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msrpUnit"] as AnyObject?)
            instance.icmsLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icmsLegalReason"] as AnyObject?)
            instance.fcpRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["fcpRate"] as AnyObject?)
            instance.icmsSTConf = Decoders.decodeOptional(clazz: IcmsConfByStateIcmsSTConf.self, source: sourceDictionary["icmsSTConf"] as AnyObject?)
            instance.icmsInterStateConf = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["icmsInterStateConf"] as AnyObject?)
            instance.companyId = Decoders.decodeOptional(clazz: UUID.self, source: sourceDictionary["companyId"] as AnyObject?)
            return instance
        }


        // Decoder for [CustomProcessScenario]
        Decoders.addDecoder(clazz: [CustomProcessScenario].self) { (source: AnyObject) -> [CustomProcessScenario] in
            return Decoders.decode(clazz: [CustomProcessScenario].self, source: source)
        }
        // Decoder for CustomProcessScenario
        Decoders.addDecoder(clazz: CustomProcessScenario.self) { (source: AnyObject) -> CustomProcessScenario in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CustomProcessScenario()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.stockImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stockImpact"] as AnyObject?)
            instance.financialImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["financialImpact"] as AnyObject?)
            if let cstIPI = sourceDictionary["cstIPI"] as? String { 
                instance.cstIPI = CustomProcessScenario.CstIPI(rawValue: (cstIPI))
            }
            
            instance.ipiLegalTaxClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipiLegalTaxClass"] as AnyObject?)
            if let accruablePISTaxation = sourceDictionary["accruablePISTaxation"] as? String { 
                instance.accruablePISTaxation = CustomProcessScenario.AccruablePISTaxation(rawValue: (accruablePISTaxation))
            }
            
            instance.pisExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReasonCode"] as AnyObject?)
            instance.pisExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReason"] as AnyObject?)
            if let accruableCOFINSTaxation = sourceDictionary["accruableCOFINSTaxation"] as? String { 
                instance.accruableCOFINSTaxation = CustomProcessScenario.AccruableCOFINSTaxation(rawValue: (accruableCOFINSTaxation))
            }
            
            instance.cofinsExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReasonCode"] as AnyObject?)
            instance.cofinsExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReason"] as AnyObject?)
            instance.allowIPIcreditWhenInGoing = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowIPIcreditWhenInGoing"] as AnyObject?)
            instance.icmsConf = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["icmsConf"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            if let type = sourceDictionary["type"] as? String { 
                instance.type = CustomProcessScenario.ModelType(rawValue: (type))
            }
            
            if let wayType = sourceDictionary["wayType"] as? String { 
                instance.wayType = CustomProcessScenario.WayType(rawValue: (wayType))
            }
            
            if let goal = sourceDictionary["goal"] as? String { 
                instance.goal = CustomProcessScenario.Goal(rawValue: (goal))
            }
            
            instance.overWriteCFOP = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["overWriteCFOP"] as AnyObject?)
            instance.cfops = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["cfops"] as AnyObject?)
            instance.companyId = Decoders.decodeOptional(clazz: UUID.self, source: sourceDictionary["companyId"] as AnyObject?)
            return instance
        }


        // Decoder for [CustomTaxTypeRate]
        Decoders.addDecoder(clazz: [CustomTaxTypeRate].self) { (source: AnyObject) -> [CustomTaxTypeRate] in
            return Decoders.decode(clazz: [CustomTaxTypeRate].self, source: source)
        }
        // Decoder for CustomTaxTypeRate
        Decoders.addDecoder(clazz: CustomTaxTypeRate.self) { (source: AnyObject) -> CustomTaxTypeRate in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CustomTaxTypeRate()
            instance.taxType = Decoders.decodeOptional(clazz: TaxType.self, source: sourceDictionary["taxType"] as AnyObject?)
            if let taxModel = sourceDictionary["taxModel"] as? String { 
                instance.taxModel = CustomTaxTypeRate.TaxModel(rawValue: (taxModel))
            }
            
            instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"] as AnyObject?)
            instance.srvAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["srvAmount"] as AnyObject?)
            instance.quantityUnidBase = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["quantityUnidBase"] as AnyObject?)
            if let specializationType = sourceDictionary["specializationType"] as? String { 
                instance.specializationType = CustomTaxTypeRate.SpecializationType(rawValue: (specializationType))
            }
            
            instance.companyId = Decoders.decodeOptional(clazz: UUID.self, source: sourceDictionary["companyId"] as AnyObject?)
            return instance
        }


        // Decoder for [DefaultLocations]
        Decoders.addDecoder(clazz: [DefaultLocations].self) { (source: AnyObject) -> [DefaultLocations] in
            return Decoders.decode(clazz: [DefaultLocations].self, source: source)
        }
        // Decoder for DefaultLocations
        Decoders.addDecoder(clazz: DefaultLocations.self) { (source: AnyObject) -> DefaultLocations in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DefaultLocations()
            instance.entity = Decoders.decodeOptional(clazz: EntityLocation.self, source: sourceDictionary["entity"] as AnyObject?)
            instance.company = Decoders.decodeOptional(clazz: EntityLocation.self, source: sourceDictionary["company"] as AnyObject?)
            instance.transporter = Decoders.decodeOptional(clazz: EntityLocation.self, source: sourceDictionary["transporter"] as AnyObject?)
            instance.deliveryLocation = Decoders.decodeOptional(clazz: EntityLocation.self, source: sourceDictionary["deliveryLocation"] as AnyObject?)
            instance.pickupLocation = Decoders.decodeOptional(clazz: EntityLocation.self, source: sourceDictionary["pickupLocation"] as AnyObject?)
            return instance
        }


        // Decoder for [DetailsCalculatedTax]
        Decoders.addDecoder(clazz: [DetailsCalculatedTax].self) { (source: AnyObject) -> [DetailsCalculatedTax] in
            return Decoders.decode(clazz: [DetailsCalculatedTax].self, source: source)
        }
        // Decoder for DetailsCalculatedTax
        Decoders.addDecoder(clazz: DetailsCalculatedTax.self) { (source: AnyObject) -> DetailsCalculatedTax in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DetailsCalculatedTax()
            instance.locationType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locationType"] as AnyObject?)
            instance.jurisdictionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jurisdictionName"] as AnyObject?)
            if let jurisdictionType = sourceDictionary["jurisdictionType"] as? String { 
                instance.jurisdictionType = DetailsCalculatedTax.JurisdictionType(rawValue: (jurisdictionType))
            }
            
            if let taxType = sourceDictionary["taxType"] as? String { 
                instance.taxType = DetailsCalculatedTax.TaxType(rawValue: (taxType))
            }
            
            instance.rateType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rateType"] as AnyObject?)
            instance.scenario = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scenario"] as AnyObject?)
            instance.subtotalTaxable = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotalTaxable"] as AnyObject?)
            instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"] as AnyObject?)
            instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"] as AnyObject?)
            instance.exemptionCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["exemptionCode"] as AnyObject?)
            instance.significantLocations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["significantLocations"] as AnyObject?)
            if let taxRuleType = sourceDictionary["taxRuleType"] as? String { 
                instance.taxRuleType = DetailsCalculatedTax.TaxRuleType(rawValue: (taxRuleType))
            }
            
            return instance
        }


        // Decoder for [DetailsCalculatedTaxItem]
        Decoders.addDecoder(clazz: [DetailsCalculatedTaxItem].self) { (source: AnyObject) -> [DetailsCalculatedTaxItem] in
            return Decoders.decode(clazz: [DetailsCalculatedTaxItem].self, source: source)
        }
        // Decoder for DetailsCalculatedTaxItem
        Decoders.addDecoder(clazz: DetailsCalculatedTaxItem.self) { (source: AnyObject) -> DetailsCalculatedTaxItem in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DetailsCalculatedTaxItem()
            instance.locationType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locationType"] as AnyObject?)
            instance.jurisdictionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jurisdictionName"] as AnyObject?)
            if let jurisdictionType = sourceDictionary["jurisdictionType"] as? String { 
                instance.jurisdictionType = DetailsCalculatedTaxItem.JurisdictionType(rawValue: (jurisdictionType))
            }
            
            if let taxType = sourceDictionary["taxType"] as? String { 
                instance.taxType = DetailsCalculatedTaxItem.TaxType(rawValue: (taxType))
            }
            
            instance.rateType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rateType"] as AnyObject?)
            instance.scenario = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scenario"] as AnyObject?)
            instance.subtotalTaxable = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotalTaxable"] as AnyObject?)
            instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"] as AnyObject?)
            instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"] as AnyObject?)
            instance.exemptionCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["exemptionCode"] as AnyObject?)
            instance.significantLocations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["significantLocations"] as AnyObject?)
            if let taxRuleType = sourceDictionary["taxRuleType"] as? String { 
                instance.taxRuleType = DetailsCalculatedTaxItem.TaxRuleType(rawValue: (taxRuleType))
            }
            
            instance.source = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["source"] as AnyObject?)
            instance.cstB = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cstB"] as AnyObject?)
            instance.modBC = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modBC"] as AnyObject?)
            instance.cst = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cst"] as AnyObject?)
            return instance
        }


        // Decoder for [Entity]
        Decoders.addDecoder(clazz: [Entity].self) { (source: AnyObject) -> [Entity] in
            return Decoders.decode(clazz: [Entity].self, source: source)
        }
        // Decoder for Entity
        Decoders.addDecoder(clazz: Entity.self) { (source: AnyObject) -> Entity in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Entity()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            if let role = sourceDictionary["role"] as? String { 
                instance.role = Entity.Role(rawValue: (role))
            }
            
            instance.type = Decoders.decodeOptional(clazz: EntityType.self, source: sourceDictionary["type"] as AnyObject?)
            instance.federalTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["federalTaxId"] as AnyObject?)
            instance.cityTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityTaxId"] as AnyObject?)
            instance.stateTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateTaxId"] as AnyObject?)
            instance.suframa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["suframa"] as AnyObject?)
            instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"] as AnyObject?)
            if let taxRegime = sourceDictionary["taxRegime"] as? String { 
                instance.taxRegime = Entity.TaxRegime(rawValue: (taxRegime))
            }
            
            instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            instance.subjectToSRF1234 = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["subjectToSRF1234"] as AnyObject?)
            return instance
        }


        // Decoder for [EntityForGoods]
        Decoders.addDecoder(clazz: [EntityForGoods].self) { (source: AnyObject) -> [EntityForGoods] in
            return Decoders.decode(clazz: [EntityForGoods].self, source: source)
        }
        // Decoder for EntityForGoods
        Decoders.addDecoder(clazz: EntityForGoods.self) { (source: AnyObject) -> EntityForGoods in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = EntityForGoods()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            if let role = sourceDictionary["role"] as? String { 
                instance.role = EntityForGoods.Role(rawValue: (role))
            }
            
            instance.type = Decoders.decodeOptional(clazz: EntityType.self, source: sourceDictionary["type"] as AnyObject?)
            instance.federalTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["federalTaxId"] as AnyObject?)
            instance.cityTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityTaxId"] as AnyObject?)
            instance.stateTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateTaxId"] as AnyObject?)
            instance.suframa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["suframa"] as AnyObject?)
            instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"] as AnyObject?)
            if let taxRegime = sourceDictionary["taxRegime"] as? String { 
                instance.taxRegime = EntityForGoods.TaxRegime(rawValue: (taxRegime))
            }
            
            instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            instance.subjectToSRF1234 = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["subjectToSRF1234"] as AnyObject?)
            instance.icmsTaxPayer = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["icmsTaxPayer"] as AnyObject?)
            return instance
        }


        // Decoder for [EntityInformerForGoods]
        Decoders.addDecoder(clazz: [EntityInformerForGoods].self) { (source: AnyObject) -> [EntityInformerForGoods] in
            return Decoders.decode(clazz: [EntityInformerForGoods].self, source: source)
        }
        // Decoder for EntityInformerForGoods
        Decoders.addDecoder(clazz: EntityInformerForGoods.self) { (source: AnyObject) -> EntityInformerForGoods in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = EntityInformerForGoods()
            instance.type = Decoders.decodeOptional(clazz: EntityType.self, source: sourceDictionary["type"] as AnyObject?)
            instance.taxRegime = Decoders.decodeOptional(clazz: FederalTaxRegime.self, source: sourceDictionary["taxRegime"] as AnyObject?)
            instance.federalTaxRegime = Decoders.decodeOptional(clazz: EntityInformerForGoodsFederalTaxRegime.self, source: sourceDictionary["federalTaxRegime"] as AnyObject?)
            instance.cityCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityCode"] as AnyObject?)
            instance.address = Decoders.decodeOptional(clazz: Address.self, source: sourceDictionary["address"] as AnyObject?)
            instance.details = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["details"] as AnyObject?)
            instance.icmsTaxPayer = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["icmsTaxPayer"] as AnyObject?)
            return instance
        }


        // Decoder for [EntityInformerForGoodsFederalTaxRegime]
        Decoders.addDecoder(clazz: [EntityInformerForGoodsFederalTaxRegime].self) { (source: AnyObject) -> [EntityInformerForGoodsFederalTaxRegime] in
            return Decoders.decode(clazz: [EntityInformerForGoodsFederalTaxRegime].self, source: source)
        }
        // Decoder for EntityInformerForGoodsFederalTaxRegime
        Decoders.addDecoder(clazz: EntityInformerForGoodsFederalTaxRegime.self) { (source: AnyObject) -> EntityInformerForGoodsFederalTaxRegime in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = EntityInformerForGoodsFederalTaxRegime()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.abbr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["abbr"] as AnyObject?)
            return instance
        }


        // Decoder for [EntityLocation]
        Decoders.addDecoder(clazz: [EntityLocation].self) { (source: AnyObject) -> [EntityLocation] in
            return Decoders.decode(clazz: [EntityLocation].self, source: source)
        }
        // Decoder for EntityLocation
        Decoders.addDecoder(clazz: EntityLocation.self) { (source: AnyObject) -> EntityLocation in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = EntityLocation()
            instance.street = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street"] as AnyObject?)
            instance.neighborhood = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["neighborhood"] as AnyObject?)
            instance.zipcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zipcode"] as AnyObject?)
            instance.cityCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityCode"] as AnyObject?)
            instance.cityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityName"] as AnyObject?)
            instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"] as AnyObject?)
            instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryCode"] as AnyObject?)
            instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"] as AnyObject?)
            return instance
        }


        // Decoder for [EntityType]
        Decoders.addDecoder(clazz: [EntityType].self) { (source: AnyObject) -> [EntityType] in
            return Decoders.decode(clazz: [EntityType].self, source: source)
        }
        // Decoder for EntityType
        Decoders.addDecoder(clazz: EntityType.self) { (source: AnyObject) -> EntityType in
            if let source = source as? String {
                if let result = EntityType(rawValue: source) {
                    return result
                }
            }
            fatalError("Source \(source) is not convertible to enum type EntityType: Maybe swagger file is insufficient")
        }


        // Decoder for [ExportInfo]
        Decoders.addDecoder(clazz: [ExportInfo].self) { (source: AnyObject) -> [ExportInfo] in
            return Decoders.decode(clazz: [ExportInfo].self, source: source)
        }
        // Decoder for ExportInfo
        Decoders.addDecoder(clazz: ExportInfo.self) { (source: AnyObject) -> ExportInfo in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ExportInfo()
            instance.shippingState = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["shippingState"] as AnyObject?)
            instance.place = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["place"] as AnyObject?)
            instance.placeDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["placeDescription"] as AnyObject?)
            return instance
        }


        // Decoder for [FederalTaxRegime]
        Decoders.addDecoder(clazz: [FederalTaxRegime].self) { (source: AnyObject) -> [FederalTaxRegime] in
            return Decoders.decode(clazz: [FederalTaxRegime].self, source: source)
        }
        // Decoder for FederalTaxRegime
        Decoders.addDecoder(clazz: FederalTaxRegime.self) { (source: AnyObject) -> FederalTaxRegime in
            if let source = source as? String {
                if let result = FederalTaxRegime(rawValue: source) {
                    return result
                }
            }
            fatalError("Source \(source) is not convertible to enum type FederalTaxRegime: Maybe swagger file is insufficient")
        }


        // Decoder for [Fuel]
        Decoders.addDecoder(clazz: [Fuel].self) { (source: AnyObject) -> [Fuel] in
            return Decoders.decode(clazz: [Fuel].self, source: source)
        }
        // Decoder for Fuel
        Decoders.addDecoder(clazz: Fuel.self) { (source: AnyObject) -> Fuel in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Fuel()
            instance.prodANPCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["prodANPCode"] as AnyObject?)
            instance.perMixGN = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["perMixGN"] as AnyObject?)
            instance.authorizationCodeCODIF = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authorizationCodeCODIF"] as AnyObject?)
            instance.quantityOnRoomTemperature = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["quantityOnRoomTemperature"] as AnyObject?)
            instance.stateCodeOfUndUser = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["stateCodeOfUndUser"] as AnyObject?)
            instance.cide = Decoders.decodeOptional(clazz: FuelCide.self, source: sourceDictionary["cide"] as AnyObject?)
            instance.pumpNumber = Decoders.decodeOptional(clazz: FuelPumpNumber.self, source: sourceDictionary["pumpNumber"] as AnyObject?)
            return instance
        }


        // Decoder for [FuelCide]
        Decoders.addDecoder(clazz: [FuelCide].self) { (source: AnyObject) -> [FuelCide] in
            return Decoders.decode(clazz: [FuelCide].self, source: source)
        }
        // Decoder for FuelCide
        Decoders.addDecoder(clazz: FuelCide.self) { (source: AnyObject) -> FuelCide in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FuelCide()
            instance.baseCalcCIDE = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["baseCalcCIDE"] as AnyObject?)
            instance.rateCIDE = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rateCIDE"] as AnyObject?)
            instance.valueCIDE = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["valueCIDE"] as AnyObject?)
            return instance
        }


        // Decoder for [FuelPumpNumber]
        Decoders.addDecoder(clazz: [FuelPumpNumber].self) { (source: AnyObject) -> [FuelPumpNumber] in
            return Decoders.decode(clazz: [FuelPumpNumber].self, source: source)
        }
        // Decoder for FuelPumpNumber
        Decoders.addDecoder(clazz: FuelPumpNumber.self) { (source: AnyObject) -> FuelPumpNumber in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FuelPumpNumber()
            instance.nozzleNumberFuelSupply = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nozzleNumberFuelSupply"] as AnyObject?)
            instance.fuelPumpNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fuelPumpNumber"] as AnyObject?)
            instance.fuelTankNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fuelTankNumber"] as AnyObject?)
            instance.startValueOfPumpNumber = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["startValueOfPumpNumber"] as AnyObject?)
            instance.endValueOfPumpNumber = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["endValueOfPumpNumber"] as AnyObject?)
            return instance
        }


        // Decoder for [HeaderBaseInfo]
        Decoders.addDecoder(clazz: [HeaderBaseInfo].self) { (source: AnyObject) -> [HeaderBaseInfo] in
            return Decoders.decode(clazz: [HeaderBaseInfo].self, source: source)
        }
        // Decoder for HeaderBaseInfo
        Decoders.addDecoder(clazz: HeaderBaseInfo.self) { (source: AnyObject) -> HeaderBaseInfo in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = HeaderBaseInfo()
            instance.accountId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountId"] as AnyObject?)
            instance.companyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyCode"] as AnyObject?)
            if let transactionType = sourceDictionary["transactionType"] as? String { 
                instance.transactionType = HeaderBaseInfo.TransactionType(rawValue: (transactionType))
            }
            
            instance.documentCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentCode"] as AnyObject?)
            if let currency = sourceDictionary["currency"] as? String { 
                instance.currency = HeaderBaseInfo.Currency(rawValue: (currency))
            }
            
            instance.transactionDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["transactionDate"] as AnyObject?)
            instance.taxCalculationDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["taxCalculationDate"] as AnyObject?)
            instance.companyLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyLocation"] as AnyObject?)
            return instance
        }


        // Decoder for [HeaderForGoods]
        Decoders.addDecoder(clazz: [HeaderForGoods].self) { (source: AnyObject) -> [HeaderForGoods] in
            return Decoders.decode(clazz: [HeaderForGoods].self, source: source)
        }
        // Decoder for HeaderForGoods
        Decoders.addDecoder(clazz: HeaderForGoods.self) { (source: AnyObject) -> HeaderForGoods in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = HeaderForGoods()
            if let messageType = sourceDictionary["messageType"] as? String { 
                instance.messageType = HeaderForGoods.MessageType(rawValue: (messageType))
            }
            
            instance.accountId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountId"] as AnyObject?)
            instance.companyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyCode"] as AnyObject?)
            instance.documentCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentCode"] as AnyObject?)
            instance.participants = Decoders.decodeOptional(clazz: HeaderForGoodsParticipants.self, source: sourceDictionary["participants"] as AnyObject?)
            instance.nfAccessKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nfAccessKey"] as AnyObject?)
            instance.nfceQrCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nfceQrCode"] as AnyObject?)
            if let transactionType = sourceDictionary["transactionType"] as? String { 
                instance.transactionType = HeaderForGoods.TransactionType(rawValue: (transactionType))
            }
            
            if let transactionModel = sourceDictionary["transactionModel"] as? String { 
                instance.transactionModel = HeaderForGoods.TransactionModel(rawValue: (transactionModel))
            }
            
            instance.transactionClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transactionClass"] as AnyObject?)
            if let eDocCreatorType = sourceDictionary["eDocCreatorType"] as? String { 
                instance.eDocCreatorType = HeaderForGoods.EDocCreatorType(rawValue: (eDocCreatorType))
            }
            
            instance.eDocCreatorPerspective = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eDocCreatorPerspective"] as AnyObject?)
            instance.entityCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["entityCode"] as AnyObject?)
            if let currency = sourceDictionary["currency"] as? String { 
                instance.currency = HeaderForGoods.Currency(rawValue: (currency))
            }
            
            instance.companyLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyLocation"] as AnyObject?)
            instance.transactionDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transactionDate"] as AnyObject?)
            instance.shippingDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shippingDate"] as AnyObject?)
            instance.additionalInfo = Decoders.decodeOptional(clazz: AdditionalInformation.self, source: sourceDictionary["additionalInfo"] as AnyObject?)
            if let tpImp = sourceDictionary["tpImp"] as? String { 
                instance.tpImp = HeaderForGoods.TpImp(rawValue: (tpImp))
            }
            
            instance.idDest = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["idDest"] as AnyObject?)
            if let indPres = sourceDictionary["indPres"] as? String { 
                instance.indPres = HeaderForGoods.IndPres(rawValue: (indPres))
            }
            
            instance.invoiceNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoiceNumber"] as AnyObject?)
            instance.invoiceSerial = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoiceSerial"] as AnyObject?)
            instance.defaultLocations = Decoders.decodeOptional(clazz: DefaultLocations.self, source: sourceDictionary["defaultLocations"] as AnyObject?)
            instance.transport = Decoders.decodeOptional(clazz: Transport.self, source: sourceDictionary["transport"] as AnyObject?)
            instance.nfRef = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["nfRef"] as AnyObject?)
            instance.payment = Decoders.decodeOptional(clazz: Payment.self, source: sourceDictionary["payment"] as AnyObject?)
            instance.purchaseInfo = Decoders.decodeOptional(clazz: PurchaseInfo.self, source: sourceDictionary["purchaseInfo"] as AnyObject?)
            instance.export = Decoders.decodeOptional(clazz: ExportInfo.self, source: sourceDictionary["export"] as AnyObject?)
            return instance
        }


        // Decoder for [HeaderForGoodsParticipants]
        Decoders.addDecoder(clazz: [HeaderForGoodsParticipants].self) { (source: AnyObject) -> [HeaderForGoodsParticipants] in
            return Decoders.decode(clazz: [HeaderForGoodsParticipants].self, source: source)
        }
        // Decoder for HeaderForGoodsParticipants
        Decoders.addDecoder(clazz: HeaderForGoodsParticipants.self) { (source: AnyObject) -> HeaderForGoodsParticipants in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = HeaderForGoodsParticipants()
            instance.entity = Decoders.decodeOptional(clazz: EntityForGoods.self, source: sourceDictionary["entity"] as AnyObject?)
            instance.transporter = Decoders.decodeOptional(clazz: EntityForGoods.self, source: sourceDictionary["transporter"] as AnyObject?)
            return instance
        }


        // Decoder for [IbptConf]
        Decoders.addDecoder(clazz: [IbptConf].self) { (source: AnyObject) -> [IbptConf] in
            return Decoders.decode(clazz: [IbptConf].self, source: source)
        }
        // Decoder for IbptConf
        Decoders.addDecoder(clazz: IbptConf.self) { (source: AnyObject) -> IbptConf in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = IbptConf()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.list = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["list"] as AnyObject?)
            return instance
        }


        // Decoder for [IcmsConfByState]
        Decoders.addDecoder(clazz: [IcmsConfByState].self) { (source: AnyObject) -> [IcmsConfByState] in
            return Decoders.decode(clazz: [IcmsConfByState].self, source: source)
        }
        // Decoder for IcmsConfByState
        Decoders.addDecoder(clazz: IcmsConfByState.self) { (source: AnyObject) -> IcmsConfByState in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = IcmsConfByState()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.startDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["startDate"] as AnyObject?)
            instance.expirationDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["expirationDate"] as AnyObject?)
            instance.inactive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["inactive"] as AnyObject?)
            instance.subjectToST = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["subjectToST"] as AnyObject?)
            if let icmsCST = sourceDictionary["icmsCST"] as? String { 
                instance.icmsCST = IcmsConfByState.IcmsCST(rawValue: (icmsCST))
            }
            
            if let calcMode = sourceDictionary["calcMode"] as? String { 
                instance.calcMode = IcmsConfByState.CalcMode(rawValue: (calcMode))
            }
            
            instance.discountRateForMonoPhase = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discountRateForMonoPhase"] as AnyObject?)
            instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"] as AnyObject?)
            instance.icmsBaseDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["icmsBaseDiscount"] as AnyObject?)
            instance.msrp = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["msrp"] as AnyObject?)
            instance.mvaRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["mvaRate"] as AnyObject?)
            instance.msrpUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msrpUnit"] as AnyObject?)
            instance.icmsLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icmsLegalReason"] as AnyObject?)
            instance.fcpRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["fcpRate"] as AnyObject?)
            instance.icmsSTConf = Decoders.decodeOptional(clazz: IcmsConfByStateIcmsSTConf.self, source: sourceDictionary["icmsSTConf"] as AnyObject?)
            instance.icmsInterStateConf = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["icmsInterStateConf"] as AnyObject?)
            return instance
        }


        // Decoder for [IcmsConfByStateIcmsSTConf]
        Decoders.addDecoder(clazz: [IcmsConfByStateIcmsSTConf].self) { (source: AnyObject) -> [IcmsConfByStateIcmsSTConf] in
            return Decoders.decode(clazz: [IcmsConfByStateIcmsSTConf].self, source: source)
        }
        // Decoder for IcmsConfByStateIcmsSTConf
        Decoders.addDecoder(clazz: IcmsConfByStateIcmsSTConf.self) { (source: AnyObject) -> IcmsConfByStateIcmsSTConf in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = IcmsConfByStateIcmsSTConf()
            instance.hasReductionOfMVAForSimples = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasReductionOfMVAForSimples"] as AnyObject?)
            instance.reductionOfMVAForSimples = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["reductionOfMVAForSimples"] as AnyObject?)
            if let calcMode = sourceDictionary["calcMode"] as? String { 
                instance.calcMode = IcmsConfByStateIcmsSTConf.CalcMode(rawValue: (calcMode))
            }
            
            instance.mvaRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["mvaRate"] as AnyObject?)
            instance.icmsStBaseDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["icmsStBaseDiscount"] as AnyObject?)
            instance.srp = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["srp"] as AnyObject?)
            instance.srpUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["srpUnit"] as AnyObject?)
            return instance
        }


        // Decoder for [IcmsConfInterState]
        Decoders.addDecoder(clazz: [IcmsConfInterState].self) { (source: AnyObject) -> [IcmsConfInterState] in
            return Decoders.decode(clazz: [IcmsConfInterState].self, source: source)
        }
        // Decoder for IcmsConfInterState
        Decoders.addDecoder(clazz: IcmsConfInterState.self) { (source: AnyObject) -> IcmsConfInterState in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = IcmsConfInterState()
            instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"] as AnyObject?)
            if let calcMode = sourceDictionary["calcMode"] as? String { 
                instance.calcMode = IcmsConfInterState.CalcMode(rawValue: (calcMode))
            }
            
            instance.discountRateForMonoPhase = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discountRateForMonoPhase"] as AnyObject?)
            instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"] as AnyObject?)
            instance.fcpRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["fcpRate"] as AnyObject?)
            instance.icmsBaseDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["icmsBaseDiscount"] as AnyObject?)
            instance.msrp = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["msrp"] as AnyObject?)
            instance.mvaRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["mvaRate"] as AnyObject?)
            instance.msrpUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msrpUnit"] as AnyObject?)
            instance.icmsLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icmsLegalReason"] as AnyObject?)
            instance.icmsSTConf = Decoders.decodeOptional(clazz: IcmsConfInterStateIcmsSTConf.self, source: sourceDictionary["icmsSTConf"] as AnyObject?)
            return instance
        }


        // Decoder for [IcmsConfInterStateIcmsSTConf]
        Decoders.addDecoder(clazz: [IcmsConfInterStateIcmsSTConf].self) { (source: AnyObject) -> [IcmsConfInterStateIcmsSTConf] in
            return Decoders.decode(clazz: [IcmsConfInterStateIcmsSTConf].self, source: source)
        }
        // Decoder for IcmsConfInterStateIcmsSTConf
        Decoders.addDecoder(clazz: IcmsConfInterStateIcmsSTConf.self) { (source: AnyObject) -> IcmsConfInterStateIcmsSTConf in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = IcmsConfInterStateIcmsSTConf()
            if let protocolType = sourceDictionary["protocolType"] as? String { 
                instance.protocolType = IcmsConfInterStateIcmsSTConf.ProtocolType(rawValue: (protocolType))
            }
            
            instance.hasReductionOfMVAForSimples = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasReductionOfMVAForSimples"] as AnyObject?)
            instance.reductionOfMVAForSimples = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["reductionOfMVAForSimples"] as AnyObject?)
            if let calcMode = sourceDictionary["calcMode"] as? String { 
                instance.calcMode = IcmsConfInterStateIcmsSTConf.CalcMode(rawValue: (calcMode))
            }
            
            instance.icmsStBaseDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["icmsStBaseDiscount"] as AnyObject?)
            instance.mvaRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["mvaRate"] as AnyObject?)
            instance.srp = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["srp"] as AnyObject?)
            instance.srpUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["srpUnit"] as AnyObject?)
            return instance
        }


        // Decoder for [IcmsTaxConf]
        Decoders.addDecoder(clazz: [IcmsTaxConf].self) { (source: AnyObject) -> [IcmsTaxConf] in
            return Decoders.decode(clazz: [IcmsTaxConf].self, source: source)
        }
        // Decoder for IcmsTaxConf
        Decoders.addDecoder(clazz: IcmsTaxConf.self) { (source: AnyObject) -> IcmsTaxConf in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = IcmsTaxConf()
            instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"] as AnyObject?)
            if let icmsCST = sourceDictionary["icmsCST"] as? String { 
                instance.icmsCST = IcmsTaxConf.IcmsCST(rawValue: (icmsCST))
            }
            
            instance.messageCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["messageCode"] as AnyObject?)
            instance.relationShip = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["relationShip"] as AnyObject?)
            return instance
        }


        // Decoder for [IcmsTaxConfBase]
        Decoders.addDecoder(clazz: [IcmsTaxConfBase].self) { (source: AnyObject) -> [IcmsTaxConfBase] in
            return Decoders.decode(clazz: [IcmsTaxConfBase].self, source: source)
        }
        // Decoder for IcmsTaxConfBase
        Decoders.addDecoder(clazz: IcmsTaxConfBase.self) { (source: AnyObject) -> IcmsTaxConfBase in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = IcmsTaxConfBase()
            instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"] as AnyObject?)
            if let icmsCST = sourceDictionary["icmsCST"] as? String { 
                instance.icmsCST = IcmsTaxConfBase.IcmsCST(rawValue: (icmsCST))
            }
            
            instance.messageCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["messageCode"] as AnyObject?)
            return instance
        }


        // Decoder for [InformerForGoods]
        Decoders.addDecoder(clazz: [InformerForGoods].self) { (source: AnyObject) -> [InformerForGoods] in
            return Decoders.decode(clazz: [InformerForGoods].self, source: source)
        }
        // Decoder for InformerForGoods
        Decoders.addDecoder(clazz: InformerForGoods.self) { (source: AnyObject) -> InformerForGoods in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InformerForGoods()
            instance.header = Decoders.decodeOptional(clazz: HeaderForGoods.self, source: sourceDictionary["header"] as AnyObject?)
            instance.line = Decoders.decodeOptional(clazz: LineForGoods.self, source: sourceDictionary["line"] as AnyObject?)
            instance.company = Decoders.decodeOptional(clazz: EntityInformerForGoods.self, source: sourceDictionary["_company"] as AnyObject?)
            instance.entity = Decoders.decodeOptional(clazz: EntityInformerForGoods.self, source: sourceDictionary["_entity"] as AnyObject?)
            instance.emitter = Decoders.decodeOptional(clazz: EntityInformerForGoods.self, source: sourceDictionary["emitter"] as AnyObject?)
            instance.receiver = Decoders.decodeOptional(clazz: EntityInformerForGoods.self, source: sourceDictionary["receiver"] as AnyObject?)
            instance.transporter = Decoders.decodeOptional(clazz: EntityInformerForGoods.self, source: sourceDictionary["transporter"] as AnyObject?)
            instance.csts = Decoders.decodeOptional(clazz: InformerForGoodsCsts.self, source: sourceDictionary["csts"] as AnyObject?)
            instance.amount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["amount"] as AnyObject?)
            instance.discount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount"] as AnyObject?)
            instance.quantity = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["quantity"] as AnyObject?)
            instance.unitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["unitPrice"] as AnyObject?)
            instance.freightAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["freightAmount"] as AnyObject?)
            instance.insuranceAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["insuranceAmount"] as AnyObject?)
            instance.otherCostAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["otherCostAmount"] as AnyObject?)
            instance.exemptValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["exemptValue"] as AnyObject?)
            return instance
        }


        // Decoder for [InformerForGoodsCsts]
        Decoders.addDecoder(clazz: [InformerForGoodsCsts].self) { (source: AnyObject) -> [InformerForGoodsCsts] in
            return Decoders.decode(clazz: [InformerForGoodsCsts].self, source: source)
        }
        // Decoder for InformerForGoodsCsts
        Decoders.addDecoder(clazz: InformerForGoodsCsts.self) { (source: AnyObject) -> InformerForGoodsCsts in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InformerForGoodsCsts()
            instance.icms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icms"] as AnyObject?)
            instance.ipi = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipi"] as AnyObject?)
            instance.pisCofins = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisCofins"] as AnyObject?)
            return instance
        }


        // Decoder for [InlineResponse200]
        Decoders.addDecoder(clazz: [InlineResponse200].self) { (source: AnyObject) -> [InlineResponse200] in
            return Decoders.decode(clazz: [InlineResponse200].self, source: source)
        }
        // Decoder for InlineResponse200
        Decoders.addDecoder(clazz: InlineResponse200.self) { (source: AnyObject) -> InlineResponse200 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InlineResponse200()
            instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"] as AnyObject?)
            instance.expired = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["expired"] as AnyObject?)
            return instance
        }


        // Decoder for [InlineResponse2001]
        Decoders.addDecoder(clazz: [InlineResponse2001].self) { (source: AnyObject) -> [InlineResponse2001] in
            return Decoders.decode(clazz: [InlineResponse2001].self, source: source)
        }
        // Decoder for InlineResponse2001
        Decoders.addDecoder(clazz: InlineResponse2001.self) { (source: AnyObject) -> InlineResponse2001 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InlineResponse2001()
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            return instance
        }


        // Decoder for [InlineResponse2002]
        Decoders.addDecoder(clazz: [InlineResponse2002].self) { (source: AnyObject) -> [InlineResponse2002] in
            return Decoders.decode(clazz: [InlineResponse2002].self, source: source)
        }
        // Decoder for InlineResponse2002
        Decoders.addDecoder(clazz: InlineResponse2002.self) { (source: AnyObject) -> InlineResponse2002 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InlineResponse2002()
            instance.companyId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyId"] as AnyObject?)
            return instance
        }


        // Decoder for [InlineResponse2003]
        Decoders.addDecoder(clazz: [InlineResponse2003].self) { (source: AnyObject) -> [InlineResponse2003] in
            return Decoders.decode(clazz: [InlineResponse2003].self, source: source)
        }
        // Decoder for InlineResponse2003
        Decoders.addDecoder(clazz: InlineResponse2003.self) { (source: AnyObject) -> InlineResponse2003 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InlineResponse2003()
            instance.contingency = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["contingency"] as AnyObject?)
            instance.startDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["startDate"] as AnyObject?)
            instance.finishDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["finishDate"] as AnyObject?)
            return instance
        }


        // Decoder for [InlineResponse2004]
        Decoders.addDecoder(clazz: [InlineResponse2004].self) { (source: AnyObject) -> [InlineResponse2004] in
            return Decoders.decode(clazz: [InlineResponse2004].self, source: source)
        }
        // Decoder for InlineResponse2004
        Decoders.addDecoder(clazz: InlineResponse2004.self) { (source: AnyObject) -> InlineResponse2004 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InlineResponse2004()
            if let environment = sourceDictionary["environment"] as? String { 
                instance.environment = InlineResponse2004.Environment(rawValue: (environment))
            }
            
            return instance
        }


        // Decoder for [InlineResponse201]
        Decoders.addDecoder(clazz: [InlineResponse201].self) { (source: AnyObject) -> [InlineResponse201] in
            return Decoders.decode(clazz: [InlineResponse201].self, source: source)
        }
        // Decoder for InlineResponse201
        Decoders.addDecoder(clazz: InlineResponse201.self) { (source: AnyObject) -> InlineResponse201 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InlineResponse201()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            return instance
        }


        // Decoder for [InstallmentComplete]
        Decoders.addDecoder(clazz: [InstallmentComplete].self) { (source: AnyObject) -> [InstallmentComplete] in
            return Decoders.decode(clazz: [InstallmentComplete].self, source: source)
        }
        // Decoder for InstallmentComplete
        Decoders.addDecoder(clazz: InstallmentComplete.self) { (source: AnyObject) -> InstallmentComplete in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InstallmentComplete()
            instance.documentNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentNumber"] as AnyObject?)
            instance.date = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date"] as AnyObject?)
            instance.grossValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grossValue"] as AnyObject?)
            instance.netValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["netValue"] as AnyObject?)
            instance.withholdingMode = Decoders.decodeOptional(clazz: WithholdingMode.self, source: sourceDictionary["withholdingMode"] as AnyObject?)
            instance.withholdingPIS = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["withholdingPIS"] as AnyObject?)
            instance.withholdingCOFINS = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["withholdingCOFINS"] as AnyObject?)
            instance.withholdingCSLL = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["withholdingCSLL"] as AnyObject?)
            return instance
        }


        // Decoder for [IpbtConfItem]
        Decoders.addDecoder(clazz: [IpbtConfItem].self) { (source: AnyObject) -> [IpbtConfItem] in
            return Decoders.decode(clazz: [IpbtConfItem].self, source: source)
        }
        // Decoder for IpbtConfItem
        Decoders.addDecoder(clazz: IpbtConfItem.self) { (source: AnyObject) -> IpbtConfItem in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = IpbtConfItem()
            instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"] as AnyObject?)
            instance.federalTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["federalTax"] as AnyObject?)
            instance.importTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["importTax"] as AnyObject?)
            instance.stateTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["stateTax"] as AnyObject?)
            instance.cityTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["cityTax"] as AnyObject?)
            instance.source = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source"] as AnyObject?)
            return instance
        }


        // Decoder for [IssConfByCity]
        Decoders.addDecoder(clazz: [IssConfByCity].self) { (source: AnyObject) -> [IssConfByCity] in
            return Decoders.decode(clazz: [IssConfByCity].self, source: source)
        }
        // Decoder for IssConfByCity
        Decoders.addDecoder(clazz: IssConfByCity.self) { (source: AnyObject) -> IssConfByCity in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = IssConfByCity()
            instance.cityCode = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["cityCode"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"] as AnyObject?)
            instance.issWhDestOtherCities = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["issWhDestOtherCities"] as AnyObject?)
            instance.issWhDestSameCity = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["issWhDestSameCity"] as AnyObject?)
            instance.issWhOriginUnregSeller = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["issWhOriginUnregSeller"] as AnyObject?)
            instance.serviceList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["serviceList"] as AnyObject?)
            return instance
        }


        // Decoder for [IssConfServiceList]
        Decoders.addDecoder(clazz: [IssConfServiceList].self) { (source: AnyObject) -> [IssConfServiceList] in
            return Decoders.decode(clazz: [IssConfServiceList].self, source: source)
        }
        // Decoder for IssConfServiceList
        Decoders.addDecoder(clazz: IssConfServiceList.self) { (source: AnyObject) -> IssConfServiceList in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = IssConfServiceList()
            instance.agast = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["agast"] as AnyObject?)
            instance.cityServiceCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityServiceCode"] as AnyObject?)
            instance.taxRate = Decoders.decodeOptional(clazz: IssConfServiceListTaxRate.self, source: sourceDictionary["taxRate"] as AnyObject?)
            return instance
        }


        // Decoder for [IssConfServiceListTaxRate]
        Decoders.addDecoder(clazz: [IssConfServiceListTaxRate].self) { (source: AnyObject) -> [IssConfServiceListTaxRate] in
            return Decoders.decode(clazz: [IssConfServiceListTaxRate].self, source: source)
        }
        // Decoder for IssConfServiceListTaxRate
        Decoders.addDecoder(clazz: IssConfServiceListTaxRate.self) { (source: AnyObject) -> IssConfServiceListTaxRate in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = IssConfServiceListTaxRate()
            instance.ISS = Decoders.decodeOptional(clazz: ServiceItemTaxRate.self, source: sourceDictionary["ISS"] as AnyObject?)
            instance.ISS_RF = Decoders.decodeOptional(clazz: ServiceItemTaxRate.self, source: sourceDictionary["ISS_RF"] as AnyObject?)
            instance.ISS_E = Decoders.decodeOptional(clazz: ServiceItemTaxRate.self, source: sourceDictionary["ISS_E"] as AnyObject?)
            instance.ISS_I = Decoders.decodeOptional(clazz: ServiceItemTaxRate.self, source: sourceDictionary["ISS_I"] as AnyObject?)
            instance.ibpt = Decoders.decodeOptional(clazz: IssConfServiceListTaxRateIbpt.self, source: sourceDictionary["ibpt"] as AnyObject?)
            return instance
        }


        // Decoder for [IssConfServiceListTaxRateIbpt]
        Decoders.addDecoder(clazz: [IssConfServiceListTaxRateIbpt].self) { (source: AnyObject) -> [IssConfServiceListTaxRateIbpt] in
            return Decoders.decode(clazz: [IssConfServiceListTaxRateIbpt].self, source: source)
        }
        // Decoder for IssConfServiceListTaxRateIbpt
        Decoders.addDecoder(clazz: IssConfServiceListTaxRateIbpt.self) { (source: AnyObject) -> IssConfServiceListTaxRateIbpt in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = IssConfServiceListTaxRateIbpt()
            instance.nationalFedTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["nationalFedTax"] as AnyObject?)
            instance.cityTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["cityTax"] as AnyObject?)
            return instance
        }


        // Decoder for [ItemCpom]
        Decoders.addDecoder(clazz: [ItemCpom].self) { (source: AnyObject) -> [ItemCpom] in
            return Decoders.decode(clazz: [ItemCpom].self, source: source)
        }
        // Decoder for ItemCpom
        Decoders.addDecoder(clazz: ItemCpom.self) { (source: AnyObject) -> ItemCpom in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ItemCpom()
            instance.companyId = Decoders.decodeOptional(clazz: UUID.self, source: sourceDictionary["companyId"] as AnyObject?)
            instance.cityCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityCode"] as AnyObject?)
            instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"] as AnyObject?)
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            return instance
        }


        // Decoder for [ItemGoods]
        Decoders.addDecoder(clazz: [ItemGoods].self) { (source: AnyObject) -> [ItemGoods] in
            return Decoders.decode(clazz: [ItemGoods].self, source: source)
        }
        // Decoder for ItemGoods
        Decoders.addDecoder(clazz: ItemGoods.self) { (source: AnyObject) -> ItemGoods in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ItemGoods()
            instance.companyId = Decoders.decodeOptional(clazz: UUID.self, source: sourceDictionary["companyId"] as AnyObject?)
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.agast = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["agast"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.sealCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sealCode"] as AnyObject?)
            instance.nFCI = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nFCI"] as AnyObject?)
            instance.isIcmsStSubstitute = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isIcmsStSubstitute"] as AnyObject?)
            if let source = sourceDictionary["source"] as? String { 
                instance.source = ItemGoods.Source(rawValue: (source))
            }
            
            if let productType = sourceDictionary["productType"] as? String { 
                instance.productType = ItemGoods.ProductType(rawValue: (productType))
            }
            
            instance.manufacturerEquivalent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["manufacturerEquivalent"] as AnyObject?)
            instance.appropriateIPIcreditWhenInGoing = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["appropriateIPIcreditWhenInGoing"] as AnyObject?)
            instance.usuallyAppropriatePISCOFINSCredit = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["usuallyAppropriatePISCOFINSCredit"] as AnyObject?)
            instance.isPisCofinsEstimatedCredit = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isPisCofinsEstimatedCredit"] as AnyObject?)
            if let piscofinsRevenueType = sourceDictionary["piscofinsRevenueType"] as? String { 
                instance.piscofinsRevenueType = ItemGoods.PiscofinsRevenueType(rawValue: (piscofinsRevenueType))
            }
            
            instance.icmsBaseDiscountForMonoPhaseSocialContr = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["icmsBaseDiscountForMonoPhaseSocialContr"] as AnyObject?)
            instance.cean = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cean"] as AnyObject?)
            instance.nve = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nve"] as AnyObject?)
            instance.salesUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["salesUnit"] as AnyObject?)
            instance.salesUnitIPIfactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["salesUnitIPIfactor"] as AnyObject?)
            instance.salesUnitIcmsfactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["salesUnitIcmsfactor"] as AnyObject?)
            instance.salesUnitIcmsStfactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["salesUnitIcmsStfactor"] as AnyObject?)
            instance.salesUnitPisCofinsfactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["salesUnitPisCofinsfactor"] as AnyObject?)
            instance.purchaseUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purchaseUnit"] as AnyObject?)
            instance.purchaseUnitIPIfactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["purchaseUnitIPIfactor"] as AnyObject?)
            instance.purchaseUnitIcmsfactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["purchaseUnitIcmsfactor"] as AnyObject?)
            instance.purchaseUnitIcmsStfactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["purchaseUnitIcmsStfactor"] as AnyObject?)
            instance.purchaseUnitPisCofinsfactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["purchaseUnitPisCofinsfactor"] as AnyObject?)
            instance.firstUse = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["firstUse"] as AnyObject?)
            return instance
        }


        // Decoder for [ItemSimple]
        Decoders.addDecoder(clazz: [ItemSimple].self) { (source: AnyObject) -> [ItemSimple] in
            return Decoders.decode(clazz: [ItemSimple].self, source: source)
        }
        // Decoder for ItemSimple
        Decoders.addDecoder(clazz: ItemSimple.self) { (source: AnyObject) -> ItemSimple in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ItemSimple()
            instance.companyId = Decoders.decodeOptional(clazz: UUID.self, source: sourceDictionary["companyId"] as AnyObject?)
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.agast = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["agast"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            return instance
        }


        // Decoder for [LegalReason]
        Decoders.addDecoder(clazz: [LegalReason].self) { (source: AnyObject) -> [LegalReason] in
            return Decoders.decode(clazz: [LegalReason].self, source: source)
        }
        // Decoder for LegalReason
        Decoders.addDecoder(clazz: LegalReason.self) { (source: AnyObject) -> LegalReason in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = LegalReason()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            if let scope = sourceDictionary["scope"] as? String { 
                instance.scope = LegalReason.Scope(rawValue: (scope))
            }
            
            instance.disable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["disable"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.legalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["legalCode"] as AnyObject?)
            if let showInInvoice = sourceDictionary["showInInvoice"] as? String { 
                instance.showInInvoice = LegalReason.ShowInInvoice(rawValue: (showInInvoice))
            }
            
            instance.referencedProcesses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["referencedProcesses"] as AnyObject?)
            instance.taxScope = Decoders.decodeOptional(clazz: LegalReasonTaxScope.self, source: sourceDictionary["taxScope"] as AnyObject?)
            return instance
        }


        // Decoder for [LegalReasonReferencedProcesses]
        Decoders.addDecoder(clazz: [LegalReasonReferencedProcesses].self) { (source: AnyObject) -> [LegalReasonReferencedProcesses] in
            return Decoders.decode(clazz: [LegalReasonReferencedProcesses].self, source: source)
        }
        // Decoder for LegalReasonReferencedProcesses
        Decoders.addDecoder(clazz: LegalReasonReferencedProcesses.self) { (source: AnyObject) -> LegalReasonReferencedProcesses in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = LegalReasonReferencedProcesses()
            instance.nProc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nProc"] as AnyObject?)
            if let indProc = sourceDictionary["indProc"] as? String { 
                instance.indProc = LegalReasonReferencedProcesses.IndProc(rawValue: (indProc))
            }
            
            return instance
        }


        // Decoder for [LegalReasonTaxScope]
        Decoders.addDecoder(clazz: [LegalReasonTaxScope].self) { (source: AnyObject) -> [LegalReasonTaxScope] in
            return Decoders.decode(clazz: [LegalReasonTaxScope].self, source: source)
        }
        // Decoder for LegalReasonTaxScope
        Decoders.addDecoder(clazz: LegalReasonTaxScope.self) { (source: AnyObject) -> LegalReasonTaxScope in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = LegalReasonTaxScope()
            if let taxType = sourceDictionary["taxType"] as? String { 
                instance.taxType = LegalReasonTaxScope.TaxType(rawValue: (taxType))
            }
            
            if let specializedTaxType = sourceDictionary["specializedTaxType"] as? String { 
                instance.specializedTaxType = LegalReasonTaxScope.SpecializedTaxType(rawValue: (specializedTaxType))
            }
            
            if let jurisdictionType = sourceDictionary["jurisdictionType"] as? String { 
                instance.jurisdictionType = LegalReasonTaxScope.JurisdictionType(rawValue: (jurisdictionType))
            }
            
            instance.jurisdictionIbgeCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jurisdictionIbgeCode"] as AnyObject?)
            return instance
        }


        // Decoder for [LineForGoods]
        Decoders.addDecoder(clazz: [LineForGoods].self) { (source: AnyObject) -> [LineForGoods] in
            return Decoders.decode(clazz: [LineForGoods].self, source: source)
        }
        // Decoder for LineForGoods
        Decoders.addDecoder(clazz: LineForGoods.self) { (source: AnyObject) -> LineForGoods in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = LineForGoods()
            instance.lineCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lineCode"] as AnyObject?)
            instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"] as AnyObject?)
            instance.avalaraGoodsAndServicesType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avalaraGoodsAndServicesType"] as AnyObject?)
            instance.numberOfItems = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["numberOfItems"] as AnyObject?)
            instance.returnedPercentageAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["returnedPercentageAmount"] as AnyObject?)
            instance.lineUnitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUnitPrice"] as AnyObject?)
            instance.lineAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineAmount"] as AnyObject?)
            instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"] as AnyObject?)
            instance.lineTaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineTaxedDiscount"] as AnyObject?)
            instance.lineUntaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedDiscount"] as AnyObject?)
            if let useType = sourceDictionary["useType"] as? String { 
                instance.useType = LineForGoods.UseType(rawValue: (useType))
            }
            
            instance.processScenario = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["processScenario"] as AnyObject?)
            instance.cfop = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["cfop"] as AnyObject?)
            instance.hasStockImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasStockImpact"] as AnyObject?)
            instance.hasFinantialImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasFinantialImpact"] as AnyObject?)
            instance.freightAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["freightAmount"] as AnyObject?)
            instance.insuranceAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["insuranceAmount"] as AnyObject?)
            instance.otherCostAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["otherCostAmount"] as AnyObject?)
            instance.indTotType = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["indTotType"] as AnyObject?)
            instance.orderNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderNumber"] as AnyObject?)
            instance.orderItemNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderItemNumber"] as AnyObject?)
            instance.fciNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fciNumber"] as AnyObject?)
            instance.recopiNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recopiNumber"] as AnyObject?)
            instance.infAdProd = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["infAdProd"] as AnyObject?)
            instance.vehicle = Decoders.decodeOptional(clazz: Vehicle.self, source: sourceDictionary["vehicle"] as AnyObject?)
            instance.medicine = Decoders.decodeOptional(clazz: Medicine.self, source: sourceDictionary["medicine"] as AnyObject?)
            instance.weapon = Decoders.decodeOptional(clazz: Weapon.self, source: sourceDictionary["weapon"] as AnyObject?)
            instance.fuel = Decoders.decodeOptional(clazz: Fuel.self, source: sourceDictionary["fuel"] as AnyObject?)
            instance.entityIsIcmsSubstitute = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["entityIsIcmsSubstitute"] as AnyObject?)
            instance.isTransportIcmsWithheld = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isTransportIcmsWithheld"] as AnyObject?)
            instance.icmsTaxRelief = Decoders.decodeOptional(clazz: LineForGoodsIcmsTaxRelief.self, source: sourceDictionary["icmsTaxRelief"] as AnyObject?)
            instance.export = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["export"] as AnyObject?)
            instance.di = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["di"] as AnyObject?)
            instance.calculatedTax = Decoders.decodeOptional(clazz: LineForGoodsCalculatedTax.self, source: sourceDictionary["calculatedTax"] as AnyObject?)
            return instance
        }


        // Decoder for [LineForGoodsAdi]
        Decoders.addDecoder(clazz: [LineForGoodsAdi].self) { (source: AnyObject) -> [LineForGoodsAdi] in
            return Decoders.decode(clazz: [LineForGoodsAdi].self, source: source)
        }
        // Decoder for LineForGoodsAdi
        Decoders.addDecoder(clazz: LineForGoodsAdi.self) { (source: AnyObject) -> LineForGoodsAdi in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = LineForGoodsAdi()
            instance.addNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["addNumber"] as AnyObject?)
            instance.sequentialNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sequentialNumber"] as AnyObject?)
            instance.manufacturerCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["manufacturerCode"] as AnyObject?)
            instance.adiDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["adiDiscount"] as AnyObject?)
            instance.drawbackNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["drawbackNumber"] as AnyObject?)
            return instance
        }


        // Decoder for [LineForGoodsCalculatedTax]
        Decoders.addDecoder(clazz: [LineForGoodsCalculatedTax].self) { (source: AnyObject) -> [LineForGoodsCalculatedTax] in
            return Decoders.decode(clazz: [LineForGoodsCalculatedTax].self, source: source)
        }
        // Decoder for LineForGoodsCalculatedTax
        Decoders.addDecoder(clazz: LineForGoodsCalculatedTax.self) { (source: AnyObject) -> LineForGoodsCalculatedTax in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = LineForGoodsCalculatedTax()
            instance.taxByType = Decoders.decodeOptional(clazz: LineForGoodsCalculatedTaxTaxByType.self, source: sourceDictionary["taxByType"] as AnyObject?)
            instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"] as AnyObject?)
            instance.details = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["details"] as AnyObject?)
            return instance
        }


        // Decoder for [LineForGoodsCalculatedTaxTaxByType]
        Decoders.addDecoder(clazz: [LineForGoodsCalculatedTaxTaxByType].self) { (source: AnyObject) -> [LineForGoodsCalculatedTaxTaxByType] in
            return Decoders.decode(clazz: [LineForGoodsCalculatedTaxTaxByType].self, source: source)
        }
        // Decoder for LineForGoodsCalculatedTaxTaxByType
        Decoders.addDecoder(clazz: LineForGoodsCalculatedTaxTaxByType.self) { (source: AnyObject) -> LineForGoodsCalculatedTaxTaxByType in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = LineForGoodsCalculatedTaxTaxByType()
            instance.icms = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icms"] as AnyObject?)
            instance.icmsSt = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsSt"] as AnyObject?)
            instance.icmsStSd = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsStSd"] as AnyObject?)
            instance.icmsPartOwn = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsPartOwn"] as AnyObject?)
            instance.icmsPartDest = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsPartDest"] as AnyObject?)
            instance.icmsDifaFCP = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsDifaFCP"] as AnyObject?)
            instance.icmsDifaDest = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsDifaDest"] as AnyObject?)
            instance.icmsDifaRemet = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsDifaRemet"] as AnyObject?)
            instance.icmsRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsRf"] as AnyObject?)
            instance.icmsDeson = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsDeson"] as AnyObject?)
            instance.icmsCredsn = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsCredsn"] as AnyObject?)
            instance.pis = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["pis"] as AnyObject?)
            instance.pisSt = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["pisSt"] as AnyObject?)
            instance.cofins = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["cofins"] as AnyObject?)
            instance.cofinsSt = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["cofinsSt"] as AnyObject?)
            instance.ipi = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["ipi"] as AnyObject?)
            instance.ipiReturned = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["ipiReturned"] as AnyObject?)
            instance.ii = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["ii"] as AnyObject?)
            instance.iof = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["iof"] as AnyObject?)
            instance.aproxtribState = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["aproxtribState"] as AnyObject?)
            instance.aproxtribFed = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["aproxtribFed"] as AnyObject?)
            return instance
        }


        // Decoder for [LineForGoodsDi]
        Decoders.addDecoder(clazz: [LineForGoodsDi].self) { (source: AnyObject) -> [LineForGoodsDi] in
            return Decoders.decode(clazz: [LineForGoodsDi].self, source: source)
        }
        // Decoder for LineForGoodsDi
        Decoders.addDecoder(clazz: LineForGoodsDi.self) { (source: AnyObject) -> LineForGoodsDi in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = LineForGoodsDi()
            instance.customsValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["customsValue"] as AnyObject?)
            instance.diNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["diNumber"] as AnyObject?)
            instance.registerDateDI = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["registerDateDI"] as AnyObject?)
            instance.clearanceSite = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clearanceSite"] as AnyObject?)
            instance.clearanceState = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["clearanceState"] as AnyObject?)
            instance.clearanceDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["clearanceDate"] as AnyObject?)
            if let transportDIType = sourceDictionary["transportDIType"] as? String { 
                instance.transportDIType = LineForGoodsDi.TransportDIType(rawValue: (transportDIType))
            }
            
            instance.afrmmValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["afrmmValue"] as AnyObject?)
            if let intermediateType = sourceDictionary["intermediateType"] as? String { 
                instance.intermediateType = LineForGoodsDi.IntermediateType(rawValue: (intermediateType))
            }
            
            instance.buyerFederalTaxID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["buyerFederalTaxID"] as AnyObject?)
            instance.buyerState = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["buyerState"] as AnyObject?)
            instance.exporterCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["exporterCode"] as AnyObject?)
            instance.adi = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["adi"] as AnyObject?)
            return instance
        }


        // Decoder for [LineForGoodsExport]
        Decoders.addDecoder(clazz: [LineForGoodsExport].self) { (source: AnyObject) -> [LineForGoodsExport] in
            return Decoders.decode(clazz: [LineForGoodsExport].self, source: source)
        }
        // Decoder for LineForGoodsExport
        Decoders.addDecoder(clazz: LineForGoodsExport.self) { (source: AnyObject) -> LineForGoodsExport in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = LineForGoodsExport()
            instance.drawbackNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["drawbackNumber"] as AnyObject?)
            instance.indExport = Decoders.decodeOptional(clazz: LineForGoodsIndExport.self, source: sourceDictionary["indExport"] as AnyObject?)
            return instance
        }


        // Decoder for [LineForGoodsIcmsTaxRelief]
        Decoders.addDecoder(clazz: [LineForGoodsIcmsTaxRelief].self) { (source: AnyObject) -> [LineForGoodsIcmsTaxRelief] in
            return Decoders.decode(clazz: [LineForGoodsIcmsTaxRelief].self, source: source)
        }
        // Decoder for LineForGoodsIcmsTaxRelief
        Decoders.addDecoder(clazz: LineForGoodsIcmsTaxRelief.self) { (source: AnyObject) -> LineForGoodsIcmsTaxRelief in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = LineForGoodsIcmsTaxRelief()
            if let reasonCode = sourceDictionary["reasonCode"] as? String { 
                instance.reasonCode = LineForGoodsIcmsTaxRelief.ReasonCode(rawValue: (reasonCode))
            }
            
            instance.taxBaseDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["taxBaseDiscount"] as AnyObject?)
            instance.taxAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["taxAmount"] as AnyObject?)
            return instance
        }


        // Decoder for [LineForGoodsIndExport]
        Decoders.addDecoder(clazz: [LineForGoodsIndExport].self) { (source: AnyObject) -> [LineForGoodsIndExport] in
            return Decoders.decode(clazz: [LineForGoodsIndExport].self, source: source)
        }
        // Decoder for LineForGoodsIndExport
        Decoders.addDecoder(clazz: LineForGoodsIndExport.self) { (source: AnyObject) -> LineForGoodsIndExport in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = LineForGoodsIndExport()
            instance.registerNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["registerNumber"] as AnyObject?)
            instance.accessKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accessKey"] as AnyObject?)
            instance.quantity = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["quantity"] as AnyObject?)
            return instance
        }


        // Decoder for [LineForSefazGoods]
        Decoders.addDecoder(clazz: [LineForSefazGoods].self) { (source: AnyObject) -> [LineForSefazGoods] in
            return Decoders.decode(clazz: [LineForSefazGoods].self, source: source)
        }
        // Decoder for LineForSefazGoods
        Decoders.addDecoder(clazz: LineForSefazGoods.self) { (source: AnyObject) -> LineForSefazGoods in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = LineForSefazGoods()
            instance.lineCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lineCode"] as AnyObject?)
            instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"] as AnyObject?)
            instance.avalaraGoodsAndServicesType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avalaraGoodsAndServicesType"] as AnyObject?)
            instance.numberOfItems = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["numberOfItems"] as AnyObject?)
            instance.returnedPercentageAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["returnedPercentageAmount"] as AnyObject?)
            instance.lineUnitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUnitPrice"] as AnyObject?)
            instance.lineAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineAmount"] as AnyObject?)
            instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"] as AnyObject?)
            instance.lineTaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineTaxedDiscount"] as AnyObject?)
            instance.lineUntaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedDiscount"] as AnyObject?)
            if let useType = sourceDictionary["useType"] as? String { 
                instance.useType = LineForSefazGoods.UseType(rawValue: (useType))
            }
            
            instance.processScenario = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["processScenario"] as AnyObject?)
            instance.cfop = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["cfop"] as AnyObject?)
            instance.hasStockImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasStockImpact"] as AnyObject?)
            instance.hasFinantialImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasFinantialImpact"] as AnyObject?)
            instance.freightAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["freightAmount"] as AnyObject?)
            instance.insuranceAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["insuranceAmount"] as AnyObject?)
            instance.otherCostAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["otherCostAmount"] as AnyObject?)
            instance.indTotType = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["indTotType"] as AnyObject?)
            instance.orderNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderNumber"] as AnyObject?)
            instance.orderItemNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderItemNumber"] as AnyObject?)
            instance.fciNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fciNumber"] as AnyObject?)
            instance.recopiNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recopiNumber"] as AnyObject?)
            instance.infAdProd = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["infAdProd"] as AnyObject?)
            instance.vehicle = Decoders.decodeOptional(clazz: Vehicle.self, source: sourceDictionary["vehicle"] as AnyObject?)
            instance.medicine = Decoders.decodeOptional(clazz: Medicine.self, source: sourceDictionary["medicine"] as AnyObject?)
            instance.weapon = Decoders.decodeOptional(clazz: Weapon.self, source: sourceDictionary["weapon"] as AnyObject?)
            instance.fuel = Decoders.decodeOptional(clazz: Fuel.self, source: sourceDictionary["fuel"] as AnyObject?)
            instance.entityIsIcmsSubstitute = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["entityIsIcmsSubstitute"] as AnyObject?)
            instance.isTransportIcmsWithheld = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isTransportIcmsWithheld"] as AnyObject?)
            instance.icmsTaxRelief = Decoders.decodeOptional(clazz: LineForGoodsIcmsTaxRelief.self, source: sourceDictionary["icmsTaxRelief"] as AnyObject?)
            instance.export = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["export"] as AnyObject?)
            instance.di = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["di"] as AnyObject?)
            instance.calculatedTax = Decoders.decodeOptional(clazz: LineForGoodsCalculatedTax.self, source: sourceDictionary["calculatedTax"] as AnyObject?)
            instance.extend = Decoders.decodeOptional(clazz: AgastExtendForSefaz.self, source: sourceDictionary["extend"] as AnyObject?)
            return instance
        }


        // Decoder for [Location]
        Decoders.addDecoder(clazz: [Location].self) { (source: AnyObject) -> [Location] in
            return Decoders.decode(clazz: [Location].self, source: source)
        }
        // Decoder for Location
        Decoders.addDecoder(clazz: Location.self) { (source: AnyObject) -> Location in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Location()
            instance.street = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street"] as AnyObject?)
            instance.neighborhood = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["neighborhood"] as AnyObject?)
            instance.zipcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zipcode"] as AnyObject?)
            instance.cityCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityCode"] as AnyObject?)
            instance.cityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityName"] as AnyObject?)
            instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"] as AnyObject?)
            instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryCode"] as AnyObject?)
            instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"] as AnyObject?)
            instance.complement = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["complement"] as AnyObject?)
            instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"] as AnyObject?)
            instance.companyId = Decoders.decodeOptional(clazz: UUID.self, source: sourceDictionary["companyId"] as AnyObject?)
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            if let type = sourceDictionary["type"] as? String { 
                instance.type = Location.ModelType(rawValue: (type))
            }
            
            instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            instance.federalTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["federalTaxId"] as AnyObject?)
            instance.stateTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateTaxId"] as AnyObject?)
            instance.secondaryStateTaxId = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["secondaryStateTaxId"] as AnyObject?)
            instance.cityTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityTaxId"] as AnyObject?)
            instance.suframa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["suframa"] as AnyObject?)
            if let mainActivity = sourceDictionary["mainActivity"] as? String { 
                instance.mainActivity = Location.MainActivity(rawValue: (mainActivity))
            }
            
            if let nfseProcessModel = sourceDictionary["nfseProcessModel"] as? String { 
                instance.nfseProcessModel = Location.NfseProcessModel(rawValue: (nfseProcessModel))
            }
            
            return instance
        }


        // Decoder for [LocationSecondaryStateTaxId]
        Decoders.addDecoder(clazz: [LocationSecondaryStateTaxId].self) { (source: AnyObject) -> [LocationSecondaryStateTaxId] in
            return Decoders.decode(clazz: [LocationSecondaryStateTaxId].self, source: source)
        }
        // Decoder for LocationSecondaryStateTaxId
        Decoders.addDecoder(clazz: LocationSecondaryStateTaxId.self) { (source: AnyObject) -> LocationSecondaryStateTaxId in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = LocationSecondaryStateTaxId()
            instance.stateTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateTaxId"] as AnyObject?)
            instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"] as AnyObject?)
            return instance
        }


        // Decoder for [Medicine]
        Decoders.addDecoder(clazz: [Medicine].self) { (source: AnyObject) -> [Medicine] in
            return Decoders.decode(clazz: [Medicine].self, source: source)
        }
        // Decoder for Medicine
        Decoders.addDecoder(clazz: Medicine.self) { (source: AnyObject) -> Medicine in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Medicine()
            instance.loteNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["loteNumber"] as AnyObject?)
            instance.loteQuantity = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["loteQuantity"] as AnyObject?)
            instance.manufactotyDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["manufactotyDate"] as AnyObject?)
            instance.expirationDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["expirationDate"] as AnyObject?)
            instance.maxValueToEndUser = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["maxValueToEndUser"] as AnyObject?)
            return instance
        }


        // Decoder for [Message]
        Decoders.addDecoder(clazz: [Message].self) { (source: AnyObject) -> [Message] in
            return Decoders.decode(clazz: [Message].self, source: source)
        }
        // Decoder for Message
        Decoders.addDecoder(clazz: Message.self) { (source: AnyObject) -> Message in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Message()
            instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            return instance
        }


        // Decoder for [ModelError]
        Decoders.addDecoder(clazz: [ModelError].self) { (source: AnyObject) -> [ModelError] in
            return Decoders.decode(clazz: [ModelError].self, source: source)
        }
        // Decoder for ModelError
        Decoders.addDecoder(clazz: ModelError.self) { (source: AnyObject) -> ModelError in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ModelError()
            instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"] as AnyObject?)
            instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            instance.field = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["field"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            if let _in = sourceDictionary["in"] as? String { 
                instance._in = ModelError.In(rawValue: (_in))
            }
            
            return instance
        }


        // Decoder for [NRef]
        Decoders.addDecoder(clazz: [NRef].self) { (source: AnyObject) -> [NRef] in
            return Decoders.decode(clazz: [NRef].self, source: source)
        }
        // Decoder for NRef
        Decoders.addDecoder(clazz: NRef.self) { (source: AnyObject) -> NRef in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = NRef()
            if let type = sourceDictionary["type"] as? String { 
                instance.type = NRef.ModelType(rawValue: (type))
            }
            
            instance.refNFe = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["refNFe"] as AnyObject?)
            instance.refCTe = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["refCTe"] as AnyObject?)
            instance.refECF = Decoders.decodeOptional(clazz: NRefRefECF.self, source: sourceDictionary["refECF"] as AnyObject?)
            instance.refNF = Decoders.decodeOptional(clazz: NRefRefNF.self, source: sourceDictionary["refNF"] as AnyObject?)
            instance.refFarmerNF = Decoders.decodeOptional(clazz: NRefRefFarmerNF.self, source: sourceDictionary["refFarmerNF"] as AnyObject?)
            return instance
        }


        // Decoder for [NRefRefECF]
        Decoders.addDecoder(clazz: [NRefRefECF].self) { (source: AnyObject) -> [NRefRefECF] in
            return Decoders.decode(clazz: [NRefRefECF].self, source: source)
        }
        // Decoder for NRefRefECF
        Decoders.addDecoder(clazz: NRefRefECF.self) { (source: AnyObject) -> NRefRefECF in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = NRefRefECF()
            instance.nECF = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nECF"] as AnyObject?)
            instance.nCOO = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nCOO"] as AnyObject?)
            if let modECF = sourceDictionary["modECF"] as? String { 
                instance.modECF = NRefRefECF.ModECF(rawValue: (modECF))
            }
            
            return instance
        }


        // Decoder for [NRefRefFarmerNF]
        Decoders.addDecoder(clazz: [NRefRefFarmerNF].self) { (source: AnyObject) -> [NRefRefFarmerNF] in
            return Decoders.decode(clazz: [NRefRefFarmerNF].self, source: source)
        }
        // Decoder for NRefRefFarmerNF
        Decoders.addDecoder(clazz: NRefRefFarmerNF.self) { (source: AnyObject) -> NRefRefFarmerNF in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = NRefRefFarmerNF()
            instance.stateCd = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["stateCd"] as AnyObject?)
            instance.yymm = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["yymm"] as AnyObject?)
            instance.federalTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["federalTaxId"] as AnyObject?)
            instance.stateTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateTaxId"] as AnyObject?)
            if let model = sourceDictionary["model"] as? String { 
                instance.model = NRefRefFarmerNF.Model(rawValue: (model))
            }
            
            instance.serie = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serie"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"] as AnyObject?)
            return instance
        }


        // Decoder for [NRefRefNF]
        Decoders.addDecoder(clazz: [NRefRefNF].self) { (source: AnyObject) -> [NRefRefNF] in
            return Decoders.decode(clazz: [NRefRefNF].self, source: source)
        }
        // Decoder for NRefRefNF
        Decoders.addDecoder(clazz: NRefRefNF.self) { (source: AnyObject) -> NRefRefNF in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = NRefRefNF()
            instance.stateCd = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["stateCd"] as AnyObject?)
            instance.yymm = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["yymm"] as AnyObject?)
            instance.federalTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["federalTaxId"] as AnyObject?)
            instance.serie = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serie"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"] as AnyObject?)
            return instance
        }


        // Decoder for [PayRecCalculatedTaxSummaryForService]
        Decoders.addDecoder(clazz: [PayRecCalculatedTaxSummaryForService].self) { (source: AnyObject) -> [PayRecCalculatedTaxSummaryForService] in
            return Decoders.decode(clazz: [PayRecCalculatedTaxSummaryForService].self, source: source)
        }
        // Decoder for PayRecCalculatedTaxSummaryForService
        Decoders.addDecoder(clazz: PayRecCalculatedTaxSummaryForService.self) { (source: AnyObject) -> PayRecCalculatedTaxSummaryForService in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PayRecCalculatedTaxSummaryForService()
            instance.numberOfLines = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfLines"] as AnyObject?)
            instance.subtotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotal"] as AnyObject?)
            instance.totalTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["totalTax"] as AnyObject?)
            instance.grandTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grandTotal"] as AnyObject?)
            instance.pccWithholdingModes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["pccWithholdingModes"] as AnyObject?)
            instance.taxByType = Decoders.decodeOptional(clazz: PayRecCalculatedTaxSummaryForServiceTaxByType.self, source: sourceDictionary["taxByType"] as AnyObject?)
            return instance
        }


        // Decoder for [PayRecCalculatedTaxSummaryForServiceTaxByType]
        Decoders.addDecoder(clazz: [PayRecCalculatedTaxSummaryForServiceTaxByType].self) { (source: AnyObject) -> [PayRecCalculatedTaxSummaryForServiceTaxByType] in
            return Decoders.decode(clazz: [PayRecCalculatedTaxSummaryForServiceTaxByType].self, source: source)
        }
        // Decoder for PayRecCalculatedTaxSummaryForServiceTaxByType
        Decoders.addDecoder(clazz: PayRecCalculatedTaxSummaryForServiceTaxByType.self) { (source: AnyObject) -> PayRecCalculatedTaxSummaryForServiceTaxByType in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PayRecCalculatedTaxSummaryForServiceTaxByType()
            instance.issRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["issRf"] as AnyObject?)
            instance.pisRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["pisRf"] as AnyObject?)
            instance.cofinsRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["cofinsRf"] as AnyObject?)
            instance.csllRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["csllRf"] as AnyObject?)
            instance.irrf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["irrf"] as AnyObject?)
            instance.inssRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["inssRf"] as AnyObject?)
            return instance
        }


        // Decoder for [PayRecHeader]
        Decoders.addDecoder(clazz: [PayRecHeader].self) { (source: AnyObject) -> [PayRecHeader] in
            return Decoders.decode(clazz: [PayRecHeader].self, source: source)
        }
        // Decoder for PayRecHeader
        Decoders.addDecoder(clazz: PayRecHeader.self) { (source: AnyObject) -> PayRecHeader in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PayRecHeader()
            instance.accountId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountId"] as AnyObject?)
            instance.companyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyCode"] as AnyObject?)
            if let transactionType = sourceDictionary["transactionType"] as? String { 
                instance.transactionType = PayRecHeader.TransactionType(rawValue: (transactionType))
            }
            
            instance.documentCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentCode"] as AnyObject?)
            if let currency = sourceDictionary["currency"] as? String { 
                instance.currency = PayRecHeader.Currency(rawValue: (currency))
            }
            
            instance.transactionDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["transactionDate"] as AnyObject?)
            instance.taxCalculationDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["taxCalculationDate"] as AnyObject?)
            instance.vendorCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendorCode"] as AnyObject?)
            if let paymentMode = sourceDictionary["paymentMode"] as? String { 
                instance.paymentMode = PayRecHeader.PaymentMode(rawValue: (paymentMode))
            }
            
            return instance
        }


        // Decoder for [PayRecLinesIn]
        Decoders.addDecoder(clazz: [PayRecLinesIn].self) { (source: AnyObject) -> [PayRecLinesIn] in
            return Decoders.decode(clazz: [PayRecLinesIn].self, source: source)
        }
        // Decoder for PayRecLinesIn
        Decoders.addDecoder(clazz: PayRecLinesIn.self) { (source: AnyObject) -> PayRecLinesIn in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PayRecLinesIn()
            instance.lineCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lineCode"] as AnyObject?)
            if let lineType = sourceDictionary["lineType"] as? String { 
                instance.lineType = PayRecLinesIn.LineType(rawValue: (lineType))
            }
            
            instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"] as AnyObject?)
            instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"] as AnyObject?)
            instance.itemDocNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDocNumber"] as AnyObject?)
            instance.lineUntaxedPenality = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedPenality"] as AnyObject?)
            instance.lineUntaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedDiscount"] as AnyObject?)
            return instance
        }


        // Decoder for [PayRecLinesOut]
        Decoders.addDecoder(clazz: [PayRecLinesOut].self) { (source: AnyObject) -> [PayRecLinesOut] in
            return Decoders.decode(clazz: [PayRecLinesOut].self, source: source)
        }
        // Decoder for PayRecLinesOut
        Decoders.addDecoder(clazz: PayRecLinesOut.self) { (source: AnyObject) -> PayRecLinesOut in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PayRecLinesOut()
            instance.lineCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lineCode"] as AnyObject?)
            if let lineType = sourceDictionary["lineType"] as? String { 
                instance.lineType = PayRecLinesOut.LineType(rawValue: (lineType))
            }
            
            instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"] as AnyObject?)
            instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"] as AnyObject?)
            instance.itemDocNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDocNumber"] as AnyObject?)
            instance.lineUntaxedPenality = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedPenality"] as AnyObject?)
            instance.lineUntaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedDiscount"] as AnyObject?)
            instance.lineAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineAmount"] as AnyObject?)
            instance.lineNetValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineNetValue"] as AnyObject?)
            instance.withholdingMode = Decoders.decodeOptional(clazz: WithholdingMode.self, source: sourceDictionary["withholdingMode"] as AnyObject?)
            instance.calculatedTax = Decoders.decodeOptional(clazz: PaymentCalculatedTax.self, source: sourceDictionary["calculatedTax"] as AnyObject?)
            return instance
        }


        // Decoder for [Payment]
        Decoders.addDecoder(clazz: [Payment].self) { (source: AnyObject) -> [Payment] in
            return Decoders.decode(clazz: [Payment].self, source: source)
        }
        // Decoder for Payment
        Decoders.addDecoder(clazz: Payment.self) { (source: AnyObject) -> Payment in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Payment()
            instance.installmentsTerms = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["installmentsTerms"] as AnyObject?)
            instance.bill = Decoders.decodeOptional(clazz: PaymentBill.self, source: sourceDictionary["bill"] as AnyObject?)
            instance.installment = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["installment"] as AnyObject?)
            instance.paymentMode = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["paymentMode"] as AnyObject?)
            return instance
        }


        // Decoder for [PaymentBill]
        Decoders.addDecoder(clazz: [PaymentBill].self) { (source: AnyObject) -> [PaymentBill] in
            return Decoders.decode(clazz: [PaymentBill].self, source: source)
        }
        // Decoder for PaymentBill
        Decoders.addDecoder(clazz: PaymentBill.self) { (source: AnyObject) -> PaymentBill in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PaymentBill()
            instance.nFat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nFat"] as AnyObject?)
            instance.vOrig = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["vOrig"] as AnyObject?)
            instance.vDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["vDiscount"] as AnyObject?)
            instance.vNet = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["vNet"] as AnyObject?)
            return instance
        }


        // Decoder for [PaymentCalculatedTax]
        Decoders.addDecoder(clazz: [PaymentCalculatedTax].self) { (source: AnyObject) -> [PaymentCalculatedTax] in
            return Decoders.decode(clazz: [PaymentCalculatedTax].self, source: source)
        }
        // Decoder for PaymentCalculatedTax
        Decoders.addDecoder(clazz: PaymentCalculatedTax.self) { (source: AnyObject) -> PaymentCalculatedTax in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PaymentCalculatedTax()
            instance.taxByType = Decoders.decodeOptional(clazz: PaymentTaxByType.self, source: sourceDictionary["taxByType"] as AnyObject?)
            instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"] as AnyObject?)
            return instance
        }


        // Decoder for [PaymentInstallment]
        Decoders.addDecoder(clazz: [PaymentInstallment].self) { (source: AnyObject) -> [PaymentInstallment] in
            return Decoders.decode(clazz: [PaymentInstallment].self, source: source)
        }
        // Decoder for PaymentInstallment
        Decoders.addDecoder(clazz: PaymentInstallment.self) { (source: AnyObject) -> PaymentInstallment in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PaymentInstallment()
            instance.documentNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentNumber"] as AnyObject?)
            instance.date = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date"] as AnyObject?)
            instance.grossValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grossValue"] as AnyObject?)
            return instance
        }


        // Decoder for [PaymentLinesIn]
        Decoders.addDecoder(clazz: [PaymentLinesIn].self) { (source: AnyObject) -> [PaymentLinesIn] in
            return Decoders.decode(clazz: [PaymentLinesIn].self, source: source)
        }
        // Decoder for PaymentLinesIn
        Decoders.addDecoder(clazz: PaymentLinesIn.self) { (source: AnyObject) -> PaymentLinesIn in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PaymentLinesIn()
            instance.lineCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lineCode"] as AnyObject?)
            if let lineType = sourceDictionary["lineType"] as? String { 
                instance.lineType = PaymentLinesIn.LineType(rawValue: (lineType))
            }
            
            instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"] as AnyObject?)
            instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"] as AnyObject?)
            instance.itemDocNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDocNumber"] as AnyObject?)
            instance.lineUntaxedPenality = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedPenality"] as AnyObject?)
            instance.lineUntaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedDiscount"] as AnyObject?)
            instance.lineNetValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineNetValue"] as AnyObject?)
            return instance
        }


        // Decoder for [PaymentPaymentMode]
        Decoders.addDecoder(clazz: [PaymentPaymentMode].self) { (source: AnyObject) -> [PaymentPaymentMode] in
            return Decoders.decode(clazz: [PaymentPaymentMode].self, source: source)
        }
        // Decoder for PaymentPaymentMode
        Decoders.addDecoder(clazz: PaymentPaymentMode.self) { (source: AnyObject) -> PaymentPaymentMode in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PaymentPaymentMode()
            if let mode = sourceDictionary["mode"] as? String { 
                instance.mode = PaymentPaymentMode.Mode(rawValue: (mode))
            }
            
            instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"] as AnyObject?)
            if let cardTpIntegration = sourceDictionary["cardTpIntegration"] as? String { 
                instance.cardTpIntegration = PaymentPaymentMode.CardTpIntegration(rawValue: (cardTpIntegration))
            }
            
            instance.cardCNPJ = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cardCNPJ"] as AnyObject?)
            if let cardBrand = sourceDictionary["cardBrand"] as? String { 
                instance.cardBrand = PaymentPaymentMode.CardBrand(rawValue: (cardBrand))
            }
            
            instance.cardAuthorization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cardAuthorization"] as AnyObject?)
            return instance
        }


        // Decoder for [PaymentTaxByType]
        Decoders.addDecoder(clazz: [PaymentTaxByType].self) { (source: AnyObject) -> [PaymentTaxByType] in
            return Decoders.decode(clazz: [PaymentTaxByType].self, source: source)
        }
        // Decoder for PaymentTaxByType
        Decoders.addDecoder(clazz: PaymentTaxByType.self) { (source: AnyObject) -> PaymentTaxByType in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PaymentTaxByType()
            instance.irrf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["irrf"] as AnyObject?)
            instance.inssRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["inssRf"] as AnyObject?)
            instance.issRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["issRf"] as AnyObject?)
            instance.pisRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["pisRf"] as AnyObject?)
            instance.cofinsRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["cofinsRf"] as AnyObject?)
            instance.csllRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["csllRf"] as AnyObject?)
            return instance
        }


        // Decoder for [PaymentTerms]
        Decoders.addDecoder(clazz: [PaymentTerms].self) { (source: AnyObject) -> [PaymentTerms] in
            return Decoders.decode(clazz: [PaymentTerms].self, source: source)
        }
        // Decoder for PaymentTerms
        Decoders.addDecoder(clazz: PaymentTerms.self) { (source: AnyObject) -> PaymentTerms in
            if let source = source as? Int32 {
                if let result = PaymentTerms(rawValue: source) {
                    return result
                }
            }
            fatalError("Source \(source) is not convertible to enum type PaymentTerms: Maybe swagger file is insufficient")
        }


        // Decoder for [PaymentTransactionIn]
        Decoders.addDecoder(clazz: [PaymentTransactionIn].self) { (source: AnyObject) -> [PaymentTransactionIn] in
            return Decoders.decode(clazz: [PaymentTransactionIn].self, source: source)
        }
        // Decoder for PaymentTransactionIn
        Decoders.addDecoder(clazz: PaymentTransactionIn.self) { (source: AnyObject) -> PaymentTransactionIn in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PaymentTransactionIn()
            instance.header = Decoders.decodeOptional(clazz: PayRecHeader.self, source: sourceDictionary["header"] as AnyObject?)
            instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"] as AnyObject?)
            return instance
        }


        // Decoder for [PaymentTransactionOut]
        Decoders.addDecoder(clazz: [PaymentTransactionOut].self) { (source: AnyObject) -> [PaymentTransactionOut] in
            return Decoders.decode(clazz: [PaymentTransactionOut].self, source: source)
        }
        // Decoder for PaymentTransactionOut
        Decoders.addDecoder(clazz: PaymentTransactionOut.self) { (source: AnyObject) -> PaymentTransactionOut in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PaymentTransactionOut()
            instance.header = Decoders.decodeOptional(clazz: PayRecHeader.self, source: sourceDictionary["header"] as AnyObject?)
            instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"] as AnyObject?)
            instance.calculatedTaxSummary = Decoders.decodeOptional(clazz: PayRecCalculatedTaxSummaryForService.self, source: sourceDictionary["calculatedTaxSummary"] as AnyObject?)
            instance.processingInfo = Decoders.decodeOptional(clazz: ProcessingInfo.self, source: sourceDictionary["processingInfo"] as AnyObject?)
            return instance
        }


        // Decoder for [PccWithholdingMode]
        Decoders.addDecoder(clazz: [PccWithholdingMode].self) { (source: AnyObject) -> [PccWithholdingMode] in
            return Decoders.decode(clazz: [PccWithholdingMode].self, source: source)
        }
        // Decoder for PccWithholdingMode
        Decoders.addDecoder(clazz: PccWithholdingMode.self) { (source: AnyObject) -> PccWithholdingMode in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PccWithholdingMode()
            if let type = sourceDictionary["type"] as? String { 
                instance.type = PccWithholdingMode.ModelType(rawValue: (type))
            }
            
            instance.totalTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["totalTax"] as AnyObject?)
            instance.pisRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["pisRf"] as AnyObject?)
            instance.cofinsRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["cofinsRf"] as AnyObject?)
            instance.csllRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["csllRf"] as AnyObject?)
            return instance
        }


        // Decoder for [PointOfOrderOrigin]
        Decoders.addDecoder(clazz: [PointOfOrderOrigin].self) { (source: AnyObject) -> [PointOfOrderOrigin] in
            return Decoders.decode(clazz: [PointOfOrderOrigin].self, source: source)
        }
        // Decoder for PointOfOrderOrigin
        Decoders.addDecoder(clazz: PointOfOrderOrigin.self) { (source: AnyObject) -> PointOfOrderOrigin in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PointOfOrderOrigin()
            instance.address = Decoders.decodeOptional(clazz: SimpleAddress.self, source: sourceDictionary["address"] as AnyObject?)
            return instance
        }


        // Decoder for [ProcessScenario]
        Decoders.addDecoder(clazz: [ProcessScenario].self) { (source: AnyObject) -> [ProcessScenario] in
            return Decoders.decode(clazz: [ProcessScenario].self, source: source)
        }
        // Decoder for ProcessScenario
        Decoders.addDecoder(clazz: ProcessScenario.self) { (source: AnyObject) -> ProcessScenario in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ProcessScenario()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.stockImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stockImpact"] as AnyObject?)
            instance.financialImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["financialImpact"] as AnyObject?)
            if let cstIPI = sourceDictionary["cstIPI"] as? String { 
                instance.cstIPI = ProcessScenario.CstIPI(rawValue: (cstIPI))
            }
            
            instance.ipiLegalTaxClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipiLegalTaxClass"] as AnyObject?)
            if let accruablePISTaxation = sourceDictionary["accruablePISTaxation"] as? String { 
                instance.accruablePISTaxation = ProcessScenario.AccruablePISTaxation(rawValue: (accruablePISTaxation))
            }
            
            instance.pisExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReasonCode"] as AnyObject?)
            instance.pisExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReason"] as AnyObject?)
            if let accruableCOFINSTaxation = sourceDictionary["accruableCOFINSTaxation"] as? String { 
                instance.accruableCOFINSTaxation = ProcessScenario.AccruableCOFINSTaxation(rawValue: (accruableCOFINSTaxation))
            }
            
            instance.cofinsExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReasonCode"] as AnyObject?)
            instance.cofinsExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReason"] as AnyObject?)
            instance.allowIPIcreditWhenInGoing = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowIPIcreditWhenInGoing"] as AnyObject?)
            instance.icmsConf = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["icmsConf"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            if let type = sourceDictionary["type"] as? String { 
                instance.type = ProcessScenario.ModelType(rawValue: (type))
            }
            
            if let wayType = sourceDictionary["wayType"] as? String { 
                instance.wayType = ProcessScenario.WayType(rawValue: (wayType))
            }
            
            if let goal = sourceDictionary["goal"] as? String { 
                instance.goal = ProcessScenario.Goal(rawValue: (goal))
            }
            
            instance.overWriteCFOP = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["overWriteCFOP"] as AnyObject?)
            instance.cfops = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["cfops"] as AnyObject?)
            return instance
        }


        // Decoder for [ProcessingInfo]
        Decoders.addDecoder(clazz: [ProcessingInfo].self) { (source: AnyObject) -> [ProcessingInfo] in
            return Decoders.decode(clazz: [ProcessingInfo].self, source: source)
        }
        // Decoder for ProcessingInfo
        Decoders.addDecoder(clazz: ProcessingInfo.self) { (source: AnyObject) -> ProcessingInfo in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ProcessingInfo()
            instance.versionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["versionId"] as AnyObject?)
            instance.duration = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["duration"] as AnyObject?)
            return instance
        }


        // Decoder for [PurchaseCalculatedTax]
        Decoders.addDecoder(clazz: [PurchaseCalculatedTax].self) { (source: AnyObject) -> [PurchaseCalculatedTax] in
            return Decoders.decode(clazz: [PurchaseCalculatedTax].self, source: source)
        }
        // Decoder for PurchaseCalculatedTax
        Decoders.addDecoder(clazz: PurchaseCalculatedTax.self) { (source: AnyObject) -> PurchaseCalculatedTax in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PurchaseCalculatedTax()
            instance.taxByType = Decoders.decodeOptional(clazz: PurchaseTaxByType.self, source: sourceDictionary["taxByType"] as AnyObject?)
            instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"] as AnyObject?)
            instance.details = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["details"] as AnyObject?)
            return instance
        }


        // Decoder for [PurchaseCalculatedTaxSummaryForService]
        Decoders.addDecoder(clazz: [PurchaseCalculatedTaxSummaryForService].self) { (source: AnyObject) -> [PurchaseCalculatedTaxSummaryForService] in
            return Decoders.decode(clazz: [PurchaseCalculatedTaxSummaryForService].self, source: source)
        }
        // Decoder for PurchaseCalculatedTaxSummaryForService
        Decoders.addDecoder(clazz: PurchaseCalculatedTaxSummaryForService.self) { (source: AnyObject) -> PurchaseCalculatedTaxSummaryForService in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PurchaseCalculatedTaxSummaryForService()
            instance.numberOfLines = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfLines"] as AnyObject?)
            instance.subtotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotal"] as AnyObject?)
            instance.totalTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["totalTax"] as AnyObject?)
            instance.grandTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grandTotal"] as AnyObject?)
            instance.taxByType = Decoders.decodeOptional(clazz: PurchaseCalculatedTaxSummaryForServiceTaxByType.self, source: sourceDictionary["taxByType"] as AnyObject?)
            return instance
        }


        // Decoder for [PurchaseCalculatedTaxSummaryForServiceTaxByType]
        Decoders.addDecoder(clazz: [PurchaseCalculatedTaxSummaryForServiceTaxByType].self) { (source: AnyObject) -> [PurchaseCalculatedTaxSummaryForServiceTaxByType] in
            return Decoders.decode(clazz: [PurchaseCalculatedTaxSummaryForServiceTaxByType].self, source: source)
        }
        // Decoder for PurchaseCalculatedTaxSummaryForServiceTaxByType
        Decoders.addDecoder(clazz: PurchaseCalculatedTaxSummaryForServiceTaxByType.self) { (source: AnyObject) -> PurchaseCalculatedTaxSummaryForServiceTaxByType in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PurchaseCalculatedTaxSummaryForServiceTaxByType()
            instance.issRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["issRf"] as AnyObject?)
            instance.pisRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["pisRf"] as AnyObject?)
            instance.cofinsRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["cofinsRf"] as AnyObject?)
            instance.csllRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["csllRf"] as AnyObject?)
            instance.irrf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["irrf"] as AnyObject?)
            instance.inssRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["inssRf"] as AnyObject?)
            instance.inssAr = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["inssAr"] as AnyObject?)
            instance.pis = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["pis"] as AnyObject?)
            instance.cofins = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["cofins"] as AnyObject?)
            return instance
        }


        // Decoder for [PurchaseDefaultLocations]
        Decoders.addDecoder(clazz: [PurchaseDefaultLocations].self) { (source: AnyObject) -> [PurchaseDefaultLocations] in
            return Decoders.decode(clazz: [PurchaseDefaultLocations].self, source: source)
        }
        // Decoder for PurchaseDefaultLocations
        Decoders.addDecoder(clazz: PurchaseDefaultLocations.self) { (source: AnyObject) -> PurchaseDefaultLocations in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PurchaseDefaultLocations()
            instance.pointOfOrderOrigin = Decoders.decodeOptional(clazz: PointOfOrderOrigin.self, source: sourceDictionary["PointOfOrderOrigin"] as AnyObject?)
            return instance
        }


        // Decoder for [PurchaseEntity]
        Decoders.addDecoder(clazz: [PurchaseEntity].self) { (source: AnyObject) -> [PurchaseEntity] in
            return Decoders.decode(clazz: [PurchaseEntity].self, source: source)
        }
        // Decoder for PurchaseEntity
        Decoders.addDecoder(clazz: PurchaseEntity.self) { (source: AnyObject) -> PurchaseEntity in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PurchaseEntity()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: EntityType.self, source: sourceDictionary["type"] as AnyObject?)
            instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            instance.cnpjcpf = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cnpjcpf"] as AnyObject?)
            instance.cityTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityTaxId"] as AnyObject?)
            instance.stateTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateTaxId"] as AnyObject?)
            instance.suframa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["suframa"] as AnyObject?)
            instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"] as AnyObject?)
            instance.taxRegime = Decoders.decodeOptional(clazz: FederalTaxRegime.self, source: sourceDictionary["taxRegime"] as AnyObject?)
            instance.hasCpom = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasCpom"] as AnyObject?)
            instance.subjectWithholdingIrrf = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["subjectWithholdingIrrf"] as AnyObject?)
            instance.inssPreviousContrib = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["inssPreviousContrib"] as AnyObject?)
            instance.inssBasisDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["inssBasisDiscount"] as AnyObject?)
            instance.issRfRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["issRfRate"] as AnyObject?)
            return instance
        }


        // Decoder for [PurchaseHeaderIn]
        Decoders.addDecoder(clazz: [PurchaseHeaderIn].self) { (source: AnyObject) -> [PurchaseHeaderIn] in
            return Decoders.decode(clazz: [PurchaseHeaderIn].self, source: source)
        }
        // Decoder for PurchaseHeaderIn
        Decoders.addDecoder(clazz: PurchaseHeaderIn.self) { (source: AnyObject) -> PurchaseHeaderIn in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PurchaseHeaderIn()
            instance.accountId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountId"] as AnyObject?)
            instance.companyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyCode"] as AnyObject?)
            if let transactionType = sourceDictionary["transactionType"] as? String { 
                instance.transactionType = PurchaseHeaderIn.TransactionType(rawValue: (transactionType))
            }
            
            instance.documentCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentCode"] as AnyObject?)
            if let currency = sourceDictionary["currency"] as? String { 
                instance.currency = PurchaseHeaderIn.Currency(rawValue: (currency))
            }
            
            instance.transactionDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["transactionDate"] as AnyObject?)
            instance.taxCalculationDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["taxCalculationDate"] as AnyObject?)
            instance.companyLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyLocation"] as AnyObject?)
            instance.vendorCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendorCode"] as AnyObject?)
            instance.purchaseOrderNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purchaseOrderNumber"] as AnyObject?)
            instance.entity = Decoders.decodeOptional(clazz: PurchaseEntity.self, source: sourceDictionary["entity"] as AnyObject?)
            instance.payment = Decoders.decodeOptional(clazz: PurchaseHeaderInPayment.self, source: sourceDictionary["payment"] as AnyObject?)
            instance.taxesConfig = Decoders.decodeOptional(clazz: PurchaseTaxesConfig.self, source: sourceDictionary["taxesConfig"] as AnyObject?)
            instance.defaultLocations = Decoders.decodeOptional(clazz: PurchaseDefaultLocations.self, source: sourceDictionary["defaultLocations"] as AnyObject?)
            return instance
        }


        // Decoder for [PurchaseHeaderInPayment]
        Decoders.addDecoder(clazz: [PurchaseHeaderInPayment].self) { (source: AnyObject) -> [PurchaseHeaderInPayment] in
            return Decoders.decode(clazz: [PurchaseHeaderInPayment].self, source: source)
        }
        // Decoder for PurchaseHeaderInPayment
        Decoders.addDecoder(clazz: PurchaseHeaderInPayment.self) { (source: AnyObject) -> PurchaseHeaderInPayment in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PurchaseHeaderInPayment()
            instance.terms = Decoders.decodeOptional(clazz: PaymentTerms.self, source: sourceDictionary["terms"] as AnyObject?)
            instance.installments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["installments"] as AnyObject?)
            return instance
        }


        // Decoder for [PurchaseHeaderOut]
        Decoders.addDecoder(clazz: [PurchaseHeaderOut].self) { (source: AnyObject) -> [PurchaseHeaderOut] in
            return Decoders.decode(clazz: [PurchaseHeaderOut].self, source: source)
        }
        // Decoder for PurchaseHeaderOut
        Decoders.addDecoder(clazz: PurchaseHeaderOut.self) { (source: AnyObject) -> PurchaseHeaderOut in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PurchaseHeaderOut()
            instance.accountId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountId"] as AnyObject?)
            instance.companyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyCode"] as AnyObject?)
            if let transactionType = sourceDictionary["transactionType"] as? String { 
                instance.transactionType = PurchaseHeaderOut.TransactionType(rawValue: (transactionType))
            }
            
            instance.documentCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentCode"] as AnyObject?)
            if let currency = sourceDictionary["currency"] as? String { 
                instance.currency = PurchaseHeaderOut.Currency(rawValue: (currency))
            }
            
            instance.transactionDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["transactionDate"] as AnyObject?)
            instance.taxCalculationDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["taxCalculationDate"] as AnyObject?)
            instance.companyLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyLocation"] as AnyObject?)
            instance.vendorCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendorCode"] as AnyObject?)
            instance.purchaseOrderNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purchaseOrderNumber"] as AnyObject?)
            instance.entity = Decoders.decodeOptional(clazz: PurchaseEntity.self, source: sourceDictionary["entity"] as AnyObject?)
            instance.payment = Decoders.decodeOptional(clazz: PurchaseHeaderOutPayment.self, source: sourceDictionary["payment"] as AnyObject?)
            instance.taxesConfig = Decoders.decodeOptional(clazz: PurchaseTaxesConfig.self, source: sourceDictionary["taxesConfig"] as AnyObject?)
            instance.defaultLocations = Decoders.decodeOptional(clazz: PurchaseDefaultLocations.self, source: sourceDictionary["defaultLocations"] as AnyObject?)
            return instance
        }


        // Decoder for [PurchaseHeaderOutPayment]
        Decoders.addDecoder(clazz: [PurchaseHeaderOutPayment].self) { (source: AnyObject) -> [PurchaseHeaderOutPayment] in
            return Decoders.decode(clazz: [PurchaseHeaderOutPayment].self, source: source)
        }
        // Decoder for PurchaseHeaderOutPayment
        Decoders.addDecoder(clazz: PurchaseHeaderOutPayment.self) { (source: AnyObject) -> PurchaseHeaderOutPayment in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PurchaseHeaderOutPayment()
            instance.terms = Decoders.decodeOptional(clazz: PaymentTerms.self, source: sourceDictionary["terms"] as AnyObject?)
            instance.withholdingMode = Decoders.decodeOptional(clazz: WithholdingMode.self, source: sourceDictionary["withholdingMode"] as AnyObject?)
            instance.installments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["installments"] as AnyObject?)
            return instance
        }


        // Decoder for [PurchaseInfo]
        Decoders.addDecoder(clazz: [PurchaseInfo].self) { (source: AnyObject) -> [PurchaseInfo] in
            return Decoders.decode(clazz: [PurchaseInfo].self, source: source)
        }
        // Decoder for PurchaseInfo
        Decoders.addDecoder(clazz: PurchaseInfo.self) { (source: AnyObject) -> PurchaseInfo in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PurchaseInfo()
            instance.governmentOrder = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["governmentOrder"] as AnyObject?)
            instance.orderNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderNumber"] as AnyObject?)
            instance.contractNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contractNumber"] as AnyObject?)
            return instance
        }


        // Decoder for [PurchaseInstallmentIn]
        Decoders.addDecoder(clazz: [PurchaseInstallmentIn].self) { (source: AnyObject) -> [PurchaseInstallmentIn] in
            return Decoders.decode(clazz: [PurchaseInstallmentIn].self, source: source)
        }
        // Decoder for PurchaseInstallmentIn
        Decoders.addDecoder(clazz: PurchaseInstallmentIn.self) { (source: AnyObject) -> PurchaseInstallmentIn in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PurchaseInstallmentIn()
            instance.documentNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentNumber"] as AnyObject?)
            instance.date = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date"] as AnyObject?)
            instance.grossValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grossValue"] as AnyObject?)
            return instance
        }


        // Decoder for [PurchaseLinesIn]
        Decoders.addDecoder(clazz: [PurchaseLinesIn].self) { (source: AnyObject) -> [PurchaseLinesIn] in
            return Decoders.decode(clazz: [PurchaseLinesIn].self, source: source)
        }
        // Decoder for PurchaseLinesIn
        Decoders.addDecoder(clazz: PurchaseLinesIn.self) { (source: AnyObject) -> PurchaseLinesIn in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PurchaseLinesIn()
            instance.lineCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lineCode"] as AnyObject?)
            instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"] as AnyObject?)
            instance.numberOfItems = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["numberOfItems"] as AnyObject?)
            instance.lineAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineAmount"] as AnyObject?)
            instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"] as AnyObject?)
            instance.lineTaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineTaxedDiscount"] as AnyObject?)
            instance.lineUntaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedDiscount"] as AnyObject?)
            if let useType = sourceDictionary["useType"] as? String { 
                instance.useType = PurchaseLinesIn.UseType(rawValue: (useType))
            }
            
            instance.taxDeductions = Decoders.decodeOptional(clazz: SalesLinesOutTaxDeductions.self, source: sourceDictionary["taxDeductions"] as AnyObject?)
            return instance
        }


        // Decoder for [PurchaseLinesOut]
        Decoders.addDecoder(clazz: [PurchaseLinesOut].self) { (source: AnyObject) -> [PurchaseLinesOut] in
            return Decoders.decode(clazz: [PurchaseLinesOut].self, source: source)
        }
        // Decoder for PurchaseLinesOut
        Decoders.addDecoder(clazz: PurchaseLinesOut.self) { (source: AnyObject) -> PurchaseLinesOut in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PurchaseLinesOut()
            instance.lineCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lineCode"] as AnyObject?)
            instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"] as AnyObject?)
            instance.numberOfItems = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["numberOfItems"] as AnyObject?)
            instance.lineAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineAmount"] as AnyObject?)
            instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"] as AnyObject?)
            instance.lineTaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineTaxedDiscount"] as AnyObject?)
            instance.lineUntaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedDiscount"] as AnyObject?)
            if let useType = sourceDictionary["useType"] as? String { 
                instance.useType = PurchaseLinesOut.UseType(rawValue: (useType))
            }
            
            instance.taxDeductions = Decoders.decodeOptional(clazz: SalesLinesOutTaxDeductions.self, source: sourceDictionary["taxDeductions"] as AnyObject?)
            instance.avalaraGoodsAndServicesType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avalaraGoodsAndServicesType"] as AnyObject?)
            instance.lineNetValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineNetValue"] as AnyObject?)
            instance.calculatedTax = Decoders.decodeOptional(clazz: PurchaseCalculatedTax.self, source: sourceDictionary["calculatedTax"] as AnyObject?)
            return instance
        }


        // Decoder for [PurchaseTaxByType]
        Decoders.addDecoder(clazz: [PurchaseTaxByType].self) { (source: AnyObject) -> [PurchaseTaxByType] in
            return Decoders.decode(clazz: [PurchaseTaxByType].self, source: source)
        }
        // Decoder for PurchaseTaxByType
        Decoders.addDecoder(clazz: PurchaseTaxByType.self) { (source: AnyObject) -> PurchaseTaxByType in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PurchaseTaxByType()
            instance.issRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["issRf"] as AnyObject?)
            instance.pisRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["pisRf"] as AnyObject?)
            instance.cofinsRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["cofinsRf"] as AnyObject?)
            instance.csllRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["csllRf"] as AnyObject?)
            instance.irrf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["irrf"] as AnyObject?)
            instance.inssRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["inssRf"] as AnyObject?)
            instance.inssAr = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["inssAr"] as AnyObject?)
            instance.pis = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["pis"] as AnyObject?)
            instance.cofins = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["cofins"] as AnyObject?)
            return instance
        }


        // Decoder for [PurchaseTaxByTypeDetail]
        Decoders.addDecoder(clazz: [PurchaseTaxByTypeDetail].self) { (source: AnyObject) -> [PurchaseTaxByTypeDetail] in
            return Decoders.decode(clazz: [PurchaseTaxByTypeDetail].self, source: source)
        }
        // Decoder for PurchaseTaxByTypeDetail
        Decoders.addDecoder(clazz: PurchaseTaxByTypeDetail.self) { (source: AnyObject) -> PurchaseTaxByTypeDetail in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PurchaseTaxByTypeDetail()
            instance.locationType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locationType"] as AnyObject?)
            instance.jurisdictionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jurisdictionName"] as AnyObject?)
            if let jurisdictionType = sourceDictionary["jurisdictionType"] as? String { 
                instance.jurisdictionType = PurchaseTaxByTypeDetail.JurisdictionType(rawValue: (jurisdictionType))
            }
            
            if let taxType = sourceDictionary["taxType"] as? String { 
                instance.taxType = PurchaseTaxByTypeDetail.TaxType(rawValue: (taxType))
            }
            
            instance.rateType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rateType"] as AnyObject?)
            instance.scenario = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scenario"] as AnyObject?)
            instance.subtotalTaxable = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotalTaxable"] as AnyObject?)
            instance.subtotalExempt = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotalExempt"] as AnyObject?)
            instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"] as AnyObject?)
            instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"] as AnyObject?)
            instance.exemptionCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["exemptionCode"] as AnyObject?)
            instance.significantLocations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["significantLocations"] as AnyObject?)
            if let taxRuleType = sourceDictionary["taxRuleType"] as? String { 
                instance.taxRuleType = PurchaseTaxByTypeDetail.TaxRuleType(rawValue: (taxRuleType))
            }
            
            return instance
        }


        // Decoder for [PurchaseTaxesConfig]
        Decoders.addDecoder(clazz: [PurchaseTaxesConfig].self) { (source: AnyObject) -> [PurchaseTaxesConfig] in
            return Decoders.decode(clazz: [PurchaseTaxesConfig].self, source: source)
        }
        // Decoder for PurchaseTaxesConfig
        Decoders.addDecoder(clazz: PurchaseTaxesConfig.self) { (source: AnyObject) -> PurchaseTaxesConfig in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PurchaseTaxesConfig()
            if let entityAccruableCOFINSTaxation = sourceDictionary["entityAccruableCOFINSTaxation"] as? String { 
                instance.entityAccruableCOFINSTaxation = PurchaseTaxesConfig.EntityAccruableCOFINSTaxation(rawValue: (entityAccruableCOFINSTaxation))
            }
            
            if let entityAccruableCSLLTaxation = sourceDictionary["entityAccruableCSLLTaxation"] as? String { 
                instance.entityAccruableCSLLTaxation = PurchaseTaxesConfig.EntityAccruableCSLLTaxation(rawValue: (entityAccruableCSLLTaxation))
            }
            
            if let entityAccruablePISTaxation = sourceDictionary["entityAccruablePISTaxation"] as? String { 
                instance.entityAccruablePISTaxation = PurchaseTaxesConfig.EntityAccruablePISTaxation(rawValue: (entityAccruablePISTaxation))
            }
            
            instance.accruableCOFINSExempCodeTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accruableCOFINSExempCodeTaxation"] as AnyObject?)
            instance.accruablePISExempCodeTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accruablePISExempCodeTaxation"] as AnyObject?)
            instance.accruablePISExemptReasonTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accruablePISExemptReasonTaxation"] as AnyObject?)
            instance.accruableCOFINSExemptReasonTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accruableCOFINSExemptReasonTaxation"] as AnyObject?)
            instance.accruableCSLLExemptReasonTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accruableCSLLExemptReasonTaxation"] as AnyObject?)
            instance.withholdingPIS = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["withholdingPIS"] as AnyObject?)
            instance.withholdingCOFINS = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["withholdingCOFINS"] as AnyObject?)
            instance.withholdingCSLL = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["withholdingCSLL"] as AnyObject?)
            instance.withholdingIRRF = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["withholdingIRRF"] as AnyObject?)
            instance.withholdCOFINSExemptReasonTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["withholdCOFINSExemptReasonTaxation"] as AnyObject?)
            instance.withholdCSLLExemptReasonTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["withholdCSLLExemptReasonTaxation"] as AnyObject?)
            instance.withholdPISExemptReasonTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["withholdPISExemptReasonTaxation"] as AnyObject?)
            return instance
        }


        // Decoder for [PurchaseTransactionIn]
        Decoders.addDecoder(clazz: [PurchaseTransactionIn].self) { (source: AnyObject) -> [PurchaseTransactionIn] in
            return Decoders.decode(clazz: [PurchaseTransactionIn].self, source: source)
        }
        // Decoder for PurchaseTransactionIn
        Decoders.addDecoder(clazz: PurchaseTransactionIn.self) { (source: AnyObject) -> PurchaseTransactionIn in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PurchaseTransactionIn()
            instance.header = Decoders.decodeOptional(clazz: PurchaseHeaderIn.self, source: sourceDictionary["header"] as AnyObject?)
            instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"] as AnyObject?)
            return instance
        }


        // Decoder for [PurchaseTransactionOut]
        Decoders.addDecoder(clazz: [PurchaseTransactionOut].self) { (source: AnyObject) -> [PurchaseTransactionOut] in
            return Decoders.decode(clazz: [PurchaseTransactionOut].self, source: source)
        }
        // Decoder for PurchaseTransactionOut
        Decoders.addDecoder(clazz: PurchaseTransactionOut.self) { (source: AnyObject) -> PurchaseTransactionOut in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PurchaseTransactionOut()
            instance.header = Decoders.decodeOptional(clazz: PurchaseHeaderOut.self, source: sourceDictionary["header"] as AnyObject?)
            instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"] as AnyObject?)
            instance.calculatedTaxSummary = Decoders.decodeOptional(clazz: PurchaseCalculatedTaxSummaryForService.self, source: sourceDictionary["calculatedTaxSummary"] as AnyObject?)
            instance.processingInfo = Decoders.decodeOptional(clazz: ProcessingInfo.self, source: sourceDictionary["processingInfo"] as AnyObject?)
            return instance
        }


        // Decoder for [ReceiptTransactionIn]
        Decoders.addDecoder(clazz: [ReceiptTransactionIn].self) { (source: AnyObject) -> [ReceiptTransactionIn] in
            return Decoders.decode(clazz: [ReceiptTransactionIn].self, source: source)
        }
        // Decoder for ReceiptTransactionIn
        Decoders.addDecoder(clazz: ReceiptTransactionIn.self) { (source: AnyObject) -> ReceiptTransactionIn in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ReceiptTransactionIn()
            instance.header = Decoders.decodeOptional(clazz: PayRecHeader.self, source: sourceDictionary["header"] as AnyObject?)
            instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"] as AnyObject?)
            return instance
        }


        // Decoder for [ReceiptTransactionOut]
        Decoders.addDecoder(clazz: [ReceiptTransactionOut].self) { (source: AnyObject) -> [ReceiptTransactionOut] in
            return Decoders.decode(clazz: [ReceiptTransactionOut].self, source: source)
        }
        // Decoder for ReceiptTransactionOut
        Decoders.addDecoder(clazz: ReceiptTransactionOut.self) { (source: AnyObject) -> ReceiptTransactionOut in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ReceiptTransactionOut()
            instance.header = Decoders.decodeOptional(clazz: PayRecHeader.self, source: sourceDictionary["header"] as AnyObject?)
            instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"] as AnyObject?)
            instance.calculatedTaxSummary = Decoders.decodeOptional(clazz: PayRecCalculatedTaxSummaryForService.self, source: sourceDictionary["calculatedTaxSummary"] as AnyObject?)
            instance.processingInfo = Decoders.decodeOptional(clazz: ProcessingInfo.self, source: sourceDictionary["processingInfo"] as AnyObject?)
            return instance
        }


        // Decoder for [SalesCalculatedTax]
        Decoders.addDecoder(clazz: [SalesCalculatedTax].self) { (source: AnyObject) -> [SalesCalculatedTax] in
            return Decoders.decode(clazz: [SalesCalculatedTax].self, source: source)
        }
        // Decoder for SalesCalculatedTax
        Decoders.addDecoder(clazz: SalesCalculatedTax.self) { (source: AnyObject) -> SalesCalculatedTax in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesCalculatedTax()
            instance.taxByType = Decoders.decodeOptional(clazz: SalesTaxByType.self, source: sourceDictionary["taxByType"] as AnyObject?)
            instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"] as AnyObject?)
            instance.details = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["details"] as AnyObject?)
            return instance
        }


        // Decoder for [SalesCalculatedTaxSummaryForService]
        Decoders.addDecoder(clazz: [SalesCalculatedTaxSummaryForService].self) { (source: AnyObject) -> [SalesCalculatedTaxSummaryForService] in
            return Decoders.decode(clazz: [SalesCalculatedTaxSummaryForService].self, source: source)
        }
        // Decoder for SalesCalculatedTaxSummaryForService
        Decoders.addDecoder(clazz: SalesCalculatedTaxSummaryForService.self) { (source: AnyObject) -> SalesCalculatedTaxSummaryForService in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesCalculatedTaxSummaryForService()
            instance.numberOfLines = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfLines"] as AnyObject?)
            instance.subtotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotal"] as AnyObject?)
            instance.totalTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["totalTax"] as AnyObject?)
            instance.grandTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grandTotal"] as AnyObject?)
            instance.taxByType = Decoders.decodeOptional(clazz: SalesCalculatedTaxSummaryForServiceTaxByType.self, source: sourceDictionary["taxByType"] as AnyObject?)
            return instance
        }


        // Decoder for [SalesCalculatedTaxSummaryForServiceTaxByType]
        Decoders.addDecoder(clazz: [SalesCalculatedTaxSummaryForServiceTaxByType].self) { (source: AnyObject) -> [SalesCalculatedTaxSummaryForServiceTaxByType] in
            return Decoders.decode(clazz: [SalesCalculatedTaxSummaryForServiceTaxByType].self, source: source)
        }
        // Decoder for SalesCalculatedTaxSummaryForServiceTaxByType
        Decoders.addDecoder(clazz: SalesCalculatedTaxSummaryForServiceTaxByType.self) { (source: AnyObject) -> SalesCalculatedTaxSummaryForServiceTaxByType in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesCalculatedTaxSummaryForServiceTaxByType()
            instance.pisRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["pisRf"] as AnyObject?)
            instance.cofinsRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["cofinsRf"] as AnyObject?)
            instance.csllRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["csllRf"] as AnyObject?)
            instance.irrf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["irrf"] as AnyObject?)
            instance.inssRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["inssRf"] as AnyObject?)
            instance.pis = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["pis"] as AnyObject?)
            instance.cofins = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["cofins"] as AnyObject?)
            instance.csll = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["csll"] as AnyObject?)
            instance.issRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["issRf"] as AnyObject?)
            instance.iss = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["iss"] as AnyObject?)
            instance.aproxtribCity = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["aproxtribCity"] as AnyObject?)
            instance.aproxtribFed = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["aproxtribFed"] as AnyObject?)
            instance.irpj = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["irpj"] as AnyObject?)
            instance.inss = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["inss"] as AnyObject?)
            return instance
        }


        // Decoder for [SalesDefaultLocations]
        Decoders.addDecoder(clazz: [SalesDefaultLocations].self) { (source: AnyObject) -> [SalesDefaultLocations] in
            return Decoders.decode(clazz: [SalesDefaultLocations].self, source: source)
        }
        // Decoder for SalesDefaultLocations
        Decoders.addDecoder(clazz: SalesDefaultLocations.self) { (source: AnyObject) -> SalesDefaultLocations in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesDefaultLocations()
            instance.serviceRendered = Decoders.decodeOptional(clazz: ServiceRendered.self, source: sourceDictionary["serviceRendered"] as AnyObject?)
            return instance
        }


        // Decoder for [SalesEntity]
        Decoders.addDecoder(clazz: [SalesEntity].self) { (source: AnyObject) -> [SalesEntity] in
            return Decoders.decode(clazz: [SalesEntity].self, source: source)
        }
        // Decoder for SalesEntity
        Decoders.addDecoder(clazz: SalesEntity.self) { (source: AnyObject) -> SalesEntity in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesEntity()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: EntityType.self, source: sourceDictionary["type"] as AnyObject?)
            instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            instance.cnpjcpf = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cnpjcpf"] as AnyObject?)
            instance.cityTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityTaxId"] as AnyObject?)
            instance.stateTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateTaxId"] as AnyObject?)
            instance.suframa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["suframa"] as AnyObject?)
            instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"] as AnyObject?)
            instance.taxRegime = Decoders.decodeOptional(clazz: FederalTaxRegime.self, source: sourceDictionary["taxRegime"] as AnyObject?)
            if let specialTaxRegime = sourceDictionary["specialTaxRegime"] as? String { 
                instance.specialTaxRegime = SalesEntity.SpecialTaxRegime(rawValue: (specialTaxRegime))
            }
            
            instance.subjectToSRF1234 = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["subjectToSRF1234"] as AnyObject?)
            instance.requiredWithholdingISS = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["requiredWithholdingISS"] as AnyObject?)
            instance.art = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["art"] as AnyObject?)
            instance.adminProcess = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["adminProcess"] as AnyObject?)
            instance.buildCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["buildCode"] as AnyObject?)
            return instance
        }


        // Decoder for [SalesHeaderIn]
        Decoders.addDecoder(clazz: [SalesHeaderIn].self) { (source: AnyObject) -> [SalesHeaderIn] in
            return Decoders.decode(clazz: [SalesHeaderIn].self, source: source)
        }
        // Decoder for SalesHeaderIn
        Decoders.addDecoder(clazz: SalesHeaderIn.self) { (source: AnyObject) -> SalesHeaderIn in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesHeaderIn()
            instance.accountId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountId"] as AnyObject?)
            instance.companyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyCode"] as AnyObject?)
            if let transactionType = sourceDictionary["transactionType"] as? String { 
                instance.transactionType = SalesHeaderIn.TransactionType(rawValue: (transactionType))
            }
            
            instance.documentCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentCode"] as AnyObject?)
            if let currency = sourceDictionary["currency"] as? String { 
                instance.currency = SalesHeaderIn.Currency(rawValue: (currency))
            }
            
            instance.transactionDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["transactionDate"] as AnyObject?)
            instance.taxCalculationDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["taxCalculationDate"] as AnyObject?)
            instance.companyLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyLocation"] as AnyObject?)
            instance.customerCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customerCode"] as AnyObject?)
            instance.purchaseOrderNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purchaseOrderNumber"] as AnyObject?)
            instance.rpsNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["rpsNumber"] as AnyObject?)
            instance.rpsSerie = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rpsSerie"] as AnyObject?)
            instance.discriminationIn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["discriminationIn"] as AnyObject?)
            instance.entity = Decoders.decodeOptional(clazz: SalesEntity.self, source: sourceDictionary["entity"] as AnyObject?)
            instance.payment = Decoders.decodeOptional(clazz: SalesHeaderInPayment.self, source: sourceDictionary["payment"] as AnyObject?)
            instance.taxesConfig = Decoders.decodeOptional(clazz: SalesTaxesConfig.self, source: sourceDictionary["taxesConfig"] as AnyObject?)
            instance.defaultLocations = Decoders.decodeOptional(clazz: SalesDefaultLocations.self, source: sourceDictionary["defaultLocations"] as AnyObject?)
            return instance
        }


        // Decoder for [SalesHeaderInPayment]
        Decoders.addDecoder(clazz: [SalesHeaderInPayment].self) { (source: AnyObject) -> [SalesHeaderInPayment] in
            return Decoders.decode(clazz: [SalesHeaderInPayment].self, source: source)
        }
        // Decoder for SalesHeaderInPayment
        Decoders.addDecoder(clazz: SalesHeaderInPayment.self) { (source: AnyObject) -> SalesHeaderInPayment in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesHeaderInPayment()
            instance.terms = Decoders.decodeOptional(clazz: PaymentTerms.self, source: sourceDictionary["terms"] as AnyObject?)
            instance.installments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["installments"] as AnyObject?)
            return instance
        }


        // Decoder for [SalesHeaderOut]
        Decoders.addDecoder(clazz: [SalesHeaderOut].self) { (source: AnyObject) -> [SalesHeaderOut] in
            return Decoders.decode(clazz: [SalesHeaderOut].self, source: source)
        }
        // Decoder for SalesHeaderOut
        Decoders.addDecoder(clazz: SalesHeaderOut.self) { (source: AnyObject) -> SalesHeaderOut in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesHeaderOut()
            instance.accountId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountId"] as AnyObject?)
            instance.companyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyCode"] as AnyObject?)
            if let transactionType = sourceDictionary["transactionType"] as? String { 
                instance.transactionType = SalesHeaderOut.TransactionType(rawValue: (transactionType))
            }
            
            instance.documentCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentCode"] as AnyObject?)
            if let currency = sourceDictionary["currency"] as? String { 
                instance.currency = SalesHeaderOut.Currency(rawValue: (currency))
            }
            
            instance.transactionDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["transactionDate"] as AnyObject?)
            instance.taxCalculationDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["taxCalculationDate"] as AnyObject?)
            instance.companyLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyLocation"] as AnyObject?)
            instance.customerCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customerCode"] as AnyObject?)
            instance.purchaseOrderNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purchaseOrderNumber"] as AnyObject?)
            instance.rpsNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["rpsNumber"] as AnyObject?)
            instance.rpsSerie = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rpsSerie"] as AnyObject?)
            instance.discriminationIn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["discriminationIn"] as AnyObject?)
            instance.entity = Decoders.decodeOptional(clazz: SalesEntity.self, source: sourceDictionary["entity"] as AnyObject?)
            instance.payment = Decoders.decodeOptional(clazz: SalesHeaderOutPayment.self, source: sourceDictionary["payment"] as AnyObject?)
            instance.taxesConfig = Decoders.decodeOptional(clazz: SalesTaxesConfig.self, source: sourceDictionary["taxesConfig"] as AnyObject?)
            instance.defaultLocations = Decoders.decodeOptional(clazz: SalesDefaultLocations.self, source: sourceDictionary["defaultLocations"] as AnyObject?)
            instance.discriminationOut = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["discriminationOut"] as AnyObject?)
            instance.xml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["xml"] as AnyObject?)
            if let ediSyncState = sourceDictionary["ediSyncState"] as? String { 
                instance.ediSyncState = SalesHeaderOut.EdiSyncState(rawValue: (ediSyncState))
            }
            
            return instance
        }


        // Decoder for [SalesHeaderOutPayment]
        Decoders.addDecoder(clazz: [SalesHeaderOutPayment].self) { (source: AnyObject) -> [SalesHeaderOutPayment] in
            return Decoders.decode(clazz: [SalesHeaderOutPayment].self, source: source)
        }
        // Decoder for SalesHeaderOutPayment
        Decoders.addDecoder(clazz: SalesHeaderOutPayment.self) { (source: AnyObject) -> SalesHeaderOutPayment in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesHeaderOutPayment()
            instance.terms = Decoders.decodeOptional(clazz: PaymentTerms.self, source: sourceDictionary["terms"] as AnyObject?)
            instance.withholdingMode = Decoders.decodeOptional(clazz: WithholdingMode.self, source: sourceDictionary["withholdingMode"] as AnyObject?)
            instance.installments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["installments"] as AnyObject?)
            return instance
        }


        // Decoder for [SalesInstallmentIn]
        Decoders.addDecoder(clazz: [SalesInstallmentIn].self) { (source: AnyObject) -> [SalesInstallmentIn] in
            return Decoders.decode(clazz: [SalesInstallmentIn].self, source: source)
        }
        // Decoder for SalesInstallmentIn
        Decoders.addDecoder(clazz: SalesInstallmentIn.self) { (source: AnyObject) -> SalesInstallmentIn in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesInstallmentIn()
            instance.documentNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentNumber"] as AnyObject?)
            instance.date = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date"] as AnyObject?)
            instance.grossValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grossValue"] as AnyObject?)
            return instance
        }


        // Decoder for [SalesLinesIn]
        Decoders.addDecoder(clazz: [SalesLinesIn].self) { (source: AnyObject) -> [SalesLinesIn] in
            return Decoders.decode(clazz: [SalesLinesIn].self, source: source)
        }
        // Decoder for SalesLinesIn
        Decoders.addDecoder(clazz: SalesLinesIn.self) { (source: AnyObject) -> SalesLinesIn in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesLinesIn()
            instance.lineCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lineCode"] as AnyObject?)
            instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"] as AnyObject?)
            instance.numberOfItems = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["numberOfItems"] as AnyObject?)
            instance.lineAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineAmount"] as AnyObject?)
            instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"] as AnyObject?)
            instance.lineTaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineTaxedDiscount"] as AnyObject?)
            instance.lineUntaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedDiscount"] as AnyObject?)
            instance.taxDeductions = Decoders.decodeOptional(clazz: SalesLinesInTaxDeductions.self, source: sourceDictionary["taxDeductions"] as AnyObject?)
            return instance
        }


        // Decoder for [SalesLinesInTaxDeductions]
        Decoders.addDecoder(clazz: [SalesLinesInTaxDeductions].self) { (source: AnyObject) -> [SalesLinesInTaxDeductions] in
            return Decoders.decode(clazz: [SalesLinesInTaxDeductions].self, source: source)
        }
        // Decoder for SalesLinesInTaxDeductions
        Decoders.addDecoder(clazz: SalesLinesInTaxDeductions.self) { (source: AnyObject) -> SalesLinesInTaxDeductions in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesLinesInTaxDeductions()
            instance.iss = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["iss"] as AnyObject?)
            return instance
        }


        // Decoder for [SalesLinesOut]
        Decoders.addDecoder(clazz: [SalesLinesOut].self) { (source: AnyObject) -> [SalesLinesOut] in
            return Decoders.decode(clazz: [SalesLinesOut].self, source: source)
        }
        // Decoder for SalesLinesOut
        Decoders.addDecoder(clazz: SalesLinesOut.self) { (source: AnyObject) -> SalesLinesOut in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesLinesOut()
            instance.lineCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lineCode"] as AnyObject?)
            instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"] as AnyObject?)
            instance.numberOfItems = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["numberOfItems"] as AnyObject?)
            instance.lineAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineAmount"] as AnyObject?)
            instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"] as AnyObject?)
            instance.lineTaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineTaxedDiscount"] as AnyObject?)
            instance.lineUntaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedDiscount"] as AnyObject?)
            instance.taxDeductions = Decoders.decodeOptional(clazz: SalesLinesOutTaxDeductions.self, source: sourceDictionary["taxDeductions"] as AnyObject?)
            instance.avalaraGoodsAndServicesType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avalaraGoodsAndServicesType"] as AnyObject?)
            instance.lineNetValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineNetValue"] as AnyObject?)
            if let cst = sourceDictionary["cst"] as? String { 
                instance.cst = SalesLinesOut.Cst(rawValue: (cst))
            }
            
            if let cstRf = sourceDictionary["cstRf"] as? String { 
                instance.cstRf = SalesLinesOut.CstRf(rawValue: (cstRf))
            }
            
            instance.calculatedTax = Decoders.decodeOptional(clazz: SalesCalculatedTax.self, source: sourceDictionary["calculatedTax"] as AnyObject?)
            return instance
        }


        // Decoder for [SalesLinesOutTaxDeductions]
        Decoders.addDecoder(clazz: [SalesLinesOutTaxDeductions].self) { (source: AnyObject) -> [SalesLinesOutTaxDeductions] in
            return Decoders.decode(clazz: [SalesLinesOutTaxDeductions].self, source: source)
        }
        // Decoder for SalesLinesOutTaxDeductions
        Decoders.addDecoder(clazz: SalesLinesOutTaxDeductions.self) { (source: AnyObject) -> SalesLinesOutTaxDeductions in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesLinesOutTaxDeductions()
            instance.iss = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["iss"] as AnyObject?)
            return instance
        }


        // Decoder for [SalesTaxByType]
        Decoders.addDecoder(clazz: [SalesTaxByType].self) { (source: AnyObject) -> [SalesTaxByType] in
            return Decoders.decode(clazz: [SalesTaxByType].self, source: source)
        }
        // Decoder for SalesTaxByType
        Decoders.addDecoder(clazz: SalesTaxByType.self) { (source: AnyObject) -> SalesTaxByType in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesTaxByType()
            instance.pisRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["pisRf"] as AnyObject?)
            instance.cofinsRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["cofinsRf"] as AnyObject?)
            instance.csllRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["csllRf"] as AnyObject?)
            instance.irrf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["irrf"] as AnyObject?)
            instance.inssRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["inssRf"] as AnyObject?)
            instance.pis = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["pis"] as AnyObject?)
            instance.cofins = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["cofins"] as AnyObject?)
            instance.csll = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["csll"] as AnyObject?)
            instance.issRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["issRf"] as AnyObject?)
            instance.iss = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["iss"] as AnyObject?)
            instance.aproxtribCity = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["aproxtribCity"] as AnyObject?)
            instance.aproxtribFed = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["aproxtribFed"] as AnyObject?)
            instance.irpj = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["irpj"] as AnyObject?)
            instance.inss = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["inss"] as AnyObject?)
            return instance
        }


        // Decoder for [SalesTaxByTypeDetail]
        Decoders.addDecoder(clazz: [SalesTaxByTypeDetail].self) { (source: AnyObject) -> [SalesTaxByTypeDetail] in
            return Decoders.decode(clazz: [SalesTaxByTypeDetail].self, source: source)
        }
        // Decoder for SalesTaxByTypeDetail
        Decoders.addDecoder(clazz: SalesTaxByTypeDetail.self) { (source: AnyObject) -> SalesTaxByTypeDetail in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesTaxByTypeDetail()
            instance.locationType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locationType"] as AnyObject?)
            instance.jurisdictionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jurisdictionName"] as AnyObject?)
            if let jurisdictionType = sourceDictionary["jurisdictionType"] as? String { 
                instance.jurisdictionType = SalesTaxByTypeDetail.JurisdictionType(rawValue: (jurisdictionType))
            }
            
            if let taxType = sourceDictionary["taxType"] as? String { 
                instance.taxType = SalesTaxByTypeDetail.TaxType(rawValue: (taxType))
            }
            
            instance.rateType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rateType"] as AnyObject?)
            instance.scenario = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scenario"] as AnyObject?)
            instance.subtotalTaxable = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotalTaxable"] as AnyObject?)
            instance.subtotalExempt = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotalExempt"] as AnyObject?)
            instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"] as AnyObject?)
            instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"] as AnyObject?)
            instance.exemptionCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["exemptionCode"] as AnyObject?)
            instance.significantLocations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["significantLocations"] as AnyObject?)
            if let taxRuleType = sourceDictionary["taxRuleType"] as? String { 
                instance.taxRuleType = SalesTaxByTypeDetail.TaxRuleType(rawValue: (taxRuleType))
            }
            
            return instance
        }


        // Decoder for [SalesTaxesConfig]
        Decoders.addDecoder(clazz: [SalesTaxesConfig].self) { (source: AnyObject) -> [SalesTaxesConfig] in
            return Decoders.decode(clazz: [SalesTaxesConfig].self, source: source)
        }
        // Decoder for SalesTaxesConfig
        Decoders.addDecoder(clazz: SalesTaxesConfig.self) { (source: AnyObject) -> SalesTaxesConfig in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesTaxesConfig()
            if let accruableCOFINSTaxation = sourceDictionary["accruableCOFINSTaxation"] as? String { 
                instance.accruableCOFINSTaxation = SalesTaxesConfig.AccruableCOFINSTaxation(rawValue: (accruableCOFINSTaxation))
            }
            
            if let accruableCSLLTaxation = sourceDictionary["accruableCSLLTaxation"] as? String { 
                instance.accruableCSLLTaxation = SalesTaxesConfig.AccruableCSLLTaxation(rawValue: (accruableCSLLTaxation))
            }
            
            if let accruablePISTaxation = sourceDictionary["accruablePISTaxation"] as? String { 
                instance.accruablePISTaxation = SalesTaxesConfig.AccruablePISTaxation(rawValue: (accruablePISTaxation))
            }
            
            instance.accruableCOFINSExempCodeTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accruableCOFINSExempCodeTaxation"] as AnyObject?)
            instance.accruablePISExempCodeTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accruablePISExempCodeTaxation"] as AnyObject?)
            instance.withholdingCOFINS = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["withholdingCOFINS"] as AnyObject?)
            instance.withholdingCSLL = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["withholdingCSLL"] as AnyObject?)
            instance.withholdingIRRF = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["withholdingIRRF"] as AnyObject?)
            instance.withholdingPIS = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["withholdingPIS"] as AnyObject?)
            instance.withholdIRRFExemptReasonTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["withholdIRRFExemptReasonTaxation"] as AnyObject?)
            return instance
        }


        // Decoder for [SalesTransactionIn]
        Decoders.addDecoder(clazz: [SalesTransactionIn].self) { (source: AnyObject) -> [SalesTransactionIn] in
            return Decoders.decode(clazz: [SalesTransactionIn].self, source: source)
        }
        // Decoder for SalesTransactionIn
        Decoders.addDecoder(clazz: SalesTransactionIn.self) { (source: AnyObject) -> SalesTransactionIn in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesTransactionIn()
            instance.header = Decoders.decodeOptional(clazz: SalesHeaderIn.self, source: sourceDictionary["header"] as AnyObject?)
            instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"] as AnyObject?)
            return instance
        }


        // Decoder for [SalesTransactionOut]
        Decoders.addDecoder(clazz: [SalesTransactionOut].self) { (source: AnyObject) -> [SalesTransactionOut] in
            return Decoders.decode(clazz: [SalesTransactionOut].self, source: source)
        }
        // Decoder for SalesTransactionOut
        Decoders.addDecoder(clazz: SalesTransactionOut.self) { (source: AnyObject) -> SalesTransactionOut in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SalesTransactionOut()
            instance.header = Decoders.decodeOptional(clazz: SalesHeaderOut.self, source: sourceDictionary["header"] as AnyObject?)
            instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"] as AnyObject?)
            instance.calculatedTaxSummary = Decoders.decodeOptional(clazz: SalesCalculatedTaxSummaryForService.self, source: sourceDictionary["calculatedTaxSummary"] as AnyObject?)
            instance.processingInfo = Decoders.decodeOptional(clazz: ProcessingInfo.self, source: sourceDictionary["processingInfo"] as AnyObject?)
            return instance
        }


        // Decoder for [SefazDisableRangeIn]
        Decoders.addDecoder(clazz: [SefazDisableRangeIn].self) { (source: AnyObject) -> [SefazDisableRangeIn] in
            return Decoders.decode(clazz: [SefazDisableRangeIn].self, source: source)
        }
        // Decoder for SefazDisableRangeIn
        Decoders.addDecoder(clazz: SefazDisableRangeIn.self) { (source: AnyObject) -> SefazDisableRangeIn in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SefazDisableRangeIn()
            instance.companyLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyLocation"] as AnyObject?)
            if let transactionModel = sourceDictionary["transactionModel"] as? String { 
                instance.transactionModel = SefazDisableRangeIn.TransactionModel(rawValue: (transactionModel))
            }
            
            instance.invoiceSerial = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoiceSerial"] as AnyObject?)
            instance.year = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["year"] as AnyObject?)
            instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            instance.invoiceNumberInit = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["invoiceNumberInit"] as AnyObject?)
            instance.invoiceNumberEnd = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["invoiceNumberEnd"] as AnyObject?)
            return instance
        }


        // Decoder for [SefazInvoiceBasicStatus]
        Decoders.addDecoder(clazz: [SefazInvoiceBasicStatus].self) { (source: AnyObject) -> [SefazInvoiceBasicStatus] in
            return Decoders.decode(clazz: [SefazInvoiceBasicStatus].self, source: source)
        }
        // Decoder for SefazInvoiceBasicStatus
        Decoders.addDecoder(clazz: SefazInvoiceBasicStatus.self) { (source: AnyObject) -> SefazInvoiceBasicStatus in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SefazInvoiceBasicStatus()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.desc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["desc"] as AnyObject?)
            return instance
        }


        // Decoder for [SefazInvoiceStatus]
        Decoders.addDecoder(clazz: [SefazInvoiceStatus].self) { (source: AnyObject) -> [SefazInvoiceStatus] in
            return Decoders.decode(clazz: [SefazInvoiceStatus].self, source: source)
        }
        // Decoder for SefazInvoiceStatus
        Decoders.addDecoder(clazz: SefazInvoiceStatus.self) { (source: AnyObject) -> SefazInvoiceStatus in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SefazInvoiceStatus()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.desc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["desc"] as AnyObject?)
            instance._protocol = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["protocol"] as AnyObject?)
            instance.rec = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rec"] as AnyObject?)
            instance.date = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date"] as AnyObject?)
            if let environment = sourceDictionary["environment"] as? String { 
                instance.environment = SefazInvoiceStatus.Environment(rawValue: (environment))
            }
            
            instance.appVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["appVersion"] as AnyObject?)
            return instance
        }


        // Decoder for [SefazItDeleteIn]
        Decoders.addDecoder(clazz: [SefazItDeleteIn].self) { (source: AnyObject) -> [SefazItDeleteIn] in
            return Decoders.decode(clazz: [SefazItDeleteIn].self, source: source)
        }
        // Decoder for SefazItDeleteIn
        Decoders.addDecoder(clazz: SefazItDeleteIn.self) { (source: AnyObject) -> SefazItDeleteIn in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SefazItDeleteIn()
            instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            return instance
        }


        // Decoder for [SefazItGetOut]
        Decoders.addDecoder(clazz: [SefazItGetOut].self) { (source: AnyObject) -> [SefazItGetOut] in
            return Decoders.decode(clazz: [SefazItGetOut].self, source: source)
        }
        // Decoder for SefazItGetOut
        Decoders.addDecoder(clazz: SefazItGetOut.self) { (source: AnyObject) -> SefazItGetOut in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SefazItGetOut()
            instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"] as AnyObject?)
            instance.xml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["xml"] as AnyObject?)
            instance.status = Decoders.decodeOptional(clazz: SefazInvoiceStatus.self, source: sourceDictionary["status"] as AnyObject?)
            return instance
        }


        // Decoder for [SefazItPutIn]
        Decoders.addDecoder(clazz: [SefazItPutIn].self) { (source: AnyObject) -> [SefazItPutIn] in
            return Decoders.decode(clazz: [SefazItPutIn].self, source: source)
        }
        // Decoder for SefazItPutIn
        Decoders.addDecoder(clazz: SefazItPutIn.self) { (source: AnyObject) -> SefazItPutIn in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SefazItPutIn()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"] as AnyObject?)
            return instance
        }


        // Decoder for [SefazPostOut]
        Decoders.addDecoder(clazz: [SefazPostOut].self) { (source: AnyObject) -> [SefazPostOut] in
            return Decoders.decode(clazz: [SefazPostOut].self, source: source)
        }
        // Decoder for SefazPostOut
        Decoders.addDecoder(clazz: SefazPostOut.self) { (source: AnyObject) -> SefazPostOut in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SefazPostOut()
            instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"] as AnyObject?)
            instance.documentCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentCode"] as AnyObject?)
            instance.status = Decoders.decodeOptional(clazz: SefazInvoiceStatus.self, source: sourceDictionary["status"] as AnyObject?)
            return instance
        }


        // Decoder for [ServiceItemTaxRate]
        Decoders.addDecoder(clazz: [ServiceItemTaxRate].self) { (source: AnyObject) -> [ServiceItemTaxRate] in
            return Decoders.decode(clazz: [ServiceItemTaxRate].self, source: source)
        }
        // Decoder for ServiceItemTaxRate
        Decoders.addDecoder(clazz: ServiceItemTaxRate.self) { (source: AnyObject) -> ServiceItemTaxRate in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ServiceItemTaxRate()
            instance.taxType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["taxType"] as AnyObject?)
            instance.rateType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rateType"] as AnyObject?)
            instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"] as AnyObject?)
            instance.isExempt = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isExempt"] as AnyObject?)
            instance.discount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount"] as AnyObject?)
            instance.zone1 = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["zone1"] as AnyObject?)
            instance.zone2 = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["zone2"] as AnyObject?)
            instance.period = Decoders.decodeOptional(clazz: ServiceItemTaxRatePeriod.self, source: sourceDictionary["period"] as AnyObject?)
            instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"] as AnyObject?)
            instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            return instance
        }


        // Decoder for [ServiceItemTaxRatePeriod]
        Decoders.addDecoder(clazz: [ServiceItemTaxRatePeriod].self) { (source: AnyObject) -> [ServiceItemTaxRatePeriod] in
            return Decoders.decode(clazz: [ServiceItemTaxRatePeriod].self, source: source)
        }
        // Decoder for ServiceItemTaxRatePeriod
        Decoders.addDecoder(clazz: ServiceItemTaxRatePeriod.self) { (source: AnyObject) -> ServiceItemTaxRatePeriod in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ServiceItemTaxRatePeriod()
            instance.startDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["startDate"] as AnyObject?)
            instance.expirationDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["expirationDate"] as AnyObject?)
            return instance
        }


        // Decoder for [ServiceRendered]
        Decoders.addDecoder(clazz: [ServiceRendered].self) { (source: AnyObject) -> [ServiceRendered] in
            return Decoders.decode(clazz: [ServiceRendered].self, source: source)
        }
        // Decoder for ServiceRendered
        Decoders.addDecoder(clazz: ServiceRendered.self) { (source: AnyObject) -> ServiceRendered in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ServiceRendered()
            instance.address = Decoders.decodeOptional(clazz: SimpleAddress.self, source: sourceDictionary["address"] as AnyObject?)
            return instance
        }


        // Decoder for [SimpleAddress]
        Decoders.addDecoder(clazz: [SimpleAddress].self) { (source: AnyObject) -> [SimpleAddress] in
            return Decoders.decode(clazz: [SimpleAddress].self, source: source)
        }
        // Decoder for SimpleAddress
        Decoders.addDecoder(clazz: SimpleAddress.self) { (source: AnyObject) -> SimpleAddress in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SimpleAddress()
            instance.line1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["line1"] as AnyObject?)
            instance.line2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["line2"] as AnyObject?)
            instance.line3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["line3"] as AnyObject?)
            instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"] as AnyObject?)
            instance.zipcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zipcode"] as AnyObject?)
            instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"] as AnyObject?)
            instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"] as AnyObject?)
            return instance
        }


        // Decoder for [StateEnum]
        Decoders.addDecoder(clazz: [StateEnum].self) { (source: AnyObject) -> [StateEnum] in
            return Decoders.decode(clazz: [StateEnum].self, source: source)
        }
        // Decoder for StateEnum
        Decoders.addDecoder(clazz: StateEnum.self) { (source: AnyObject) -> StateEnum in
            if let source = source as? String {
                if let result = StateEnum(rawValue: source) {
                    return result
                }
            }
            fatalError("Source \(source) is not convertible to enum type StateEnum: Maybe swagger file is insufficient")
        }


        // Decoder for [StateTransition]
        Decoders.addDecoder(clazz: [StateTransition].self) { (source: AnyObject) -> [StateTransition] in
            return Decoders.decode(clazz: [StateTransition].self, source: source)
        }
        // Decoder for StateTransition
        Decoders.addDecoder(clazz: StateTransition.self) { (source: AnyObject) -> StateTransition in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = StateTransition()
            if let type = sourceDictionary["type"] as? String { 
                instance.type = StateTransition.ModelType(rawValue: (type))
            }
            
            instance.comment = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["comment"] as AnyObject?)
            return instance
        }


        // Decoder for [TaxByTypeSummaryForGoods]
        Decoders.addDecoder(clazz: [TaxByTypeSummaryForGoods].self) { (source: AnyObject) -> [TaxByTypeSummaryForGoods] in
            return Decoders.decode(clazz: [TaxByTypeSummaryForGoods].self, source: source)
        }
        // Decoder for TaxByTypeSummaryForGoods
        Decoders.addDecoder(clazz: TaxByTypeSummaryForGoods.self) { (source: AnyObject) -> TaxByTypeSummaryForGoods in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TaxByTypeSummaryForGoods()
            instance.calcbase = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["calcbase"] as AnyObject?)
            instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"] as AnyObject?)
            instance.jurisdictions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["jurisdictions"] as AnyObject?)
            return instance
        }


        // Decoder for [TaxByTypeSummaryForService]
        Decoders.addDecoder(clazz: [TaxByTypeSummaryForService].self) { (source: AnyObject) -> [TaxByTypeSummaryForService] in
            return Decoders.decode(clazz: [TaxByTypeSummaryForService].self, source: source)
        }
        // Decoder for TaxByTypeSummaryForService
        Decoders.addDecoder(clazz: TaxByTypeSummaryForService.self) { (source: AnyObject) -> TaxByTypeSummaryForService in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TaxByTypeSummaryForService()
            instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"] as AnyObject?)
            instance.jurisdictions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["jurisdictions"] as AnyObject?)
            return instance
        }


        // Decoder for [TaxByTypeSummaryJurisdiction]
        Decoders.addDecoder(clazz: [TaxByTypeSummaryJurisdiction].self) { (source: AnyObject) -> [TaxByTypeSummaryJurisdiction] in
            return Decoders.decode(clazz: [TaxByTypeSummaryJurisdiction].self, source: source)
        }
        // Decoder for TaxByTypeSummaryJurisdiction
        Decoders.addDecoder(clazz: TaxByTypeSummaryJurisdiction.self) { (source: AnyObject) -> TaxByTypeSummaryJurisdiction in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TaxByTypeSummaryJurisdiction()
            instance.jurisdictionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jurisdictionName"] as AnyObject?)
            if let jurisdictionType = sourceDictionary["jurisdictionType"] as? String { 
                instance.jurisdictionType = TaxByTypeSummaryJurisdiction.JurisdictionType(rawValue: (jurisdictionType))
            }
            
            instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"] as AnyObject?)
            return instance
        }


        // Decoder for [TaxByTypeSummaryJurisdictionForGoods]
        Decoders.addDecoder(clazz: [TaxByTypeSummaryJurisdictionForGoods].self) { (source: AnyObject) -> [TaxByTypeSummaryJurisdictionForGoods] in
            return Decoders.decode(clazz: [TaxByTypeSummaryJurisdictionForGoods].self, source: source)
        }
        // Decoder for TaxByTypeSummaryJurisdictionForGoods
        Decoders.addDecoder(clazz: TaxByTypeSummaryJurisdictionForGoods.self) { (source: AnyObject) -> TaxByTypeSummaryJurisdictionForGoods in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TaxByTypeSummaryJurisdictionForGoods()
            instance.jurisdictionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jurisdictionName"] as AnyObject?)
            if let jurisdictionType = sourceDictionary["jurisdictionType"] as? String { 
                instance.jurisdictionType = TaxByTypeSummaryJurisdictionForGoods.JurisdictionType(rawValue: (jurisdictionType))
            }
            
            instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"] as AnyObject?)
            return instance
        }


        // Decoder for [TaxByTypeTax]
        Decoders.addDecoder(clazz: [TaxByTypeTax].self) { (source: AnyObject) -> [TaxByTypeTax] in
            return Decoders.decode(clazz: [TaxByTypeTax].self, source: source)
        }
        // Decoder for TaxByTypeTax
        Decoders.addDecoder(clazz: TaxByTypeTax.self) { (source: AnyObject) -> TaxByTypeTax in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TaxByTypeTax()
            instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"] as AnyObject?)
            return instance
        }


        // Decoder for [TaxConf]
        Decoders.addDecoder(clazz: [TaxConf].self) { (source: AnyObject) -> [TaxConf] in
            return Decoders.decode(clazz: [TaxConf].self, source: source)
        }
        // Decoder for TaxConf
        Decoders.addDecoder(clazz: TaxConf.self) { (source: AnyObject) -> TaxConf in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TaxConf()
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.stockImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stockImpact"] as AnyObject?)
            instance.financialImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["financialImpact"] as AnyObject?)
            if let cstIPI = sourceDictionary["cstIPI"] as? String { 
                instance.cstIPI = TaxConf.CstIPI(rawValue: (cstIPI))
            }
            
            instance.ipiLegalTaxClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipiLegalTaxClass"] as AnyObject?)
            if let accruablePISTaxation = sourceDictionary["accruablePISTaxation"] as? String { 
                instance.accruablePISTaxation = TaxConf.AccruablePISTaxation(rawValue: (accruablePISTaxation))
            }
            
            instance.pisExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReasonCode"] as AnyObject?)
            instance.pisExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReason"] as AnyObject?)
            if let accruableCOFINSTaxation = sourceDictionary["accruableCOFINSTaxation"] as? String { 
                instance.accruableCOFINSTaxation = TaxConf.AccruableCOFINSTaxation(rawValue: (accruableCOFINSTaxation))
            }
            
            instance.cofinsExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReasonCode"] as AnyObject?)
            instance.cofinsExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReason"] as AnyObject?)
            instance.allowIPIcreditWhenInGoing = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowIPIcreditWhenInGoing"] as AnyObject?)
            instance.icmsConf = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["icmsConf"] as AnyObject?)
            return instance
        }


        // Decoder for [TaxType]
        Decoders.addDecoder(clazz: [TaxType].self) { (source: AnyObject) -> [TaxType] in
            return Decoders.decode(clazz: [TaxType].self, source: source)
        }
        // Decoder for TaxType
        Decoders.addDecoder(clazz: TaxType.self) { (source: AnyObject) -> TaxType in
            if let source = source as? String {
                if let result = TaxType(rawValue: source) {
                    return result
                }
            }
            fatalError("Source \(source) is not convertible to enum type TaxType: Maybe swagger file is insufficient")
        }


        // Decoder for [TaxTypeRate]
        Decoders.addDecoder(clazz: [TaxTypeRate].self) { (source: AnyObject) -> [TaxTypeRate] in
            return Decoders.decode(clazz: [TaxTypeRate].self, source: source)
        }
        // Decoder for TaxTypeRate
        Decoders.addDecoder(clazz: TaxTypeRate.self) { (source: AnyObject) -> TaxTypeRate in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TaxTypeRate()
            instance.taxType = Decoders.decodeOptional(clazz: TaxType.self, source: sourceDictionary["taxType"] as AnyObject?)
            if let taxModel = sourceDictionary["taxModel"] as? String { 
                instance.taxModel = TaxTypeRate.TaxModel(rawValue: (taxModel))
            }
            
            instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"] as AnyObject?)
            instance.srvAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["srvAmount"] as AnyObject?)
            instance.quantityUnidBase = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["quantityUnidBase"] as AnyObject?)
            if let specializationType = sourceDictionary["specializationType"] as? String { 
                instance.specializationType = TaxTypeRate.SpecializationType(rawValue: (specializationType))
            }
            
            return instance
        }


        // Decoder for [TransactionForGoodsIn]
        Decoders.addDecoder(clazz: [TransactionForGoodsIn].self) { (source: AnyObject) -> [TransactionForGoodsIn] in
            return Decoders.decode(clazz: [TransactionForGoodsIn].self, source: source)
        }
        // Decoder for TransactionForGoodsIn
        Decoders.addDecoder(clazz: TransactionForGoodsIn.self) { (source: AnyObject) -> TransactionForGoodsIn in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TransactionForGoodsIn()
            instance.header = Decoders.decodeOptional(clazz: HeaderForGoods.self, source: sourceDictionary["header"] as AnyObject?)
            instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"] as AnyObject?)
            return instance
        }


        // Decoder for [TransactionForGoodsOut]
        Decoders.addDecoder(clazz: [TransactionForGoodsOut].self) { (source: AnyObject) -> [TransactionForGoodsOut] in
            return Decoders.decode(clazz: [TransactionForGoodsOut].self, source: source)
        }
        // Decoder for TransactionForGoodsOut
        Decoders.addDecoder(clazz: TransactionForGoodsOut.self) { (source: AnyObject) -> TransactionForGoodsOut in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TransactionForGoodsOut()
            instance.header = Decoders.decodeOptional(clazz: HeaderForGoods.self, source: sourceDictionary["header"] as AnyObject?)
            instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"] as AnyObject?)
            instance.calculatedTaxSummary = Decoders.decodeOptional(clazz: CalculatedTaxSummaryForGoods.self, source: sourceDictionary["calculatedTaxSummary"] as AnyObject?)
            instance.processingInfo = Decoders.decodeOptional(clazz: ProcessingInfo.self, source: sourceDictionary["processingInfo"] as AnyObject?)
            return instance
        }


        // Decoder for [TransactionForSefazGoods]
        Decoders.addDecoder(clazz: [TransactionForSefazGoods].self) { (source: AnyObject) -> [TransactionForSefazGoods] in
            return Decoders.decode(clazz: [TransactionForSefazGoods].self, source: source)
        }
        // Decoder for TransactionForSefazGoods
        Decoders.addDecoder(clazz: TransactionForSefazGoods.self) { (source: AnyObject) -> TransactionForSefazGoods in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TransactionForSefazGoods()
            instance.header = Decoders.decodeOptional(clazz: HeaderForGoods.self, source: sourceDictionary["header"] as AnyObject?)
            instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"] as AnyObject?)
            instance.calculatedTaxSummary = Decoders.decodeOptional(clazz: CalculatedTaxSummaryForGoods.self, source: sourceDictionary["calculatedTaxSummary"] as AnyObject?)
            return instance
        }


        // Decoder for [TransactionForSefazGoodsList]
        Decoders.addDecoder(clazz: [TransactionForSefazGoodsList].self) { (source: AnyObject) -> [TransactionForSefazGoodsList] in
            return Decoders.decode(clazz: [TransactionForSefazGoodsList].self, source: source)
        }
        // Decoder for TransactionForSefazGoodsList
        Decoders.addDecoder(clazz: TransactionForSefazGoodsList.self) { (source: AnyObject) -> TransactionForSefazGoodsList in
            let sourceArray = source as! [AnyObject]
            return sourceArray.map({ Decoders.decode(clazz: TransactionForSefazGoods.self, source: $0) })
        }


        // Decoder for [Transport]
        Decoders.addDecoder(clazz: [Transport].self) { (source: AnyObject) -> [Transport] in
            return Decoders.decode(clazz: [Transport].self, source: source)
        }
        // Decoder for Transport
        Decoders.addDecoder(clazz: Transport.self) { (source: AnyObject) -> Transport in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Transport()
            if let modFreight = sourceDictionary["modFreight"] as? String { 
                instance.modFreight = Transport.ModFreight(rawValue: (modFreight))
            }
            
            instance.withholdICMSTransport = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["withholdICMSTransport"] as AnyObject?)
            instance.volumes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["volumes"] as AnyObject?)
            instance.vehicle = Decoders.decodeOptional(clazz: VehicleTransp.self, source: sourceDictionary["vehicle"] as AnyObject?)
            return instance
        }


        // Decoder for [TransportVolumes]
        Decoders.addDecoder(clazz: [TransportVolumes].self) { (source: AnyObject) -> [TransportVolumes] in
            return Decoders.decode(clazz: [TransportVolumes].self, source: source)
        }
        // Decoder for TransportVolumes
        Decoders.addDecoder(clazz: TransportVolumes.self) { (source: AnyObject) -> TransportVolumes in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TransportVolumes()
            instance.qVol = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["qVol"] as AnyObject?)
            instance.specie = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["specie"] as AnyObject?)
            instance.brand = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["brand"] as AnyObject?)
            instance.volumeNumeration = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["volumeNumeration"] as AnyObject?)
            instance.netWeight = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["netWeight"] as AnyObject?)
            instance.grossWeight = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grossWeight"] as AnyObject?)
            instance.seal = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["seal"] as AnyObject?)
            return instance
        }


        // Decoder for [ValidationError]
        Decoders.addDecoder(clazz: [ValidationError].self) { (source: AnyObject) -> [ValidationError] in
            return Decoders.decode(clazz: [ValidationError].self, source: source)
        }
        // Decoder for ValidationError
        Decoders.addDecoder(clazz: ValidationError.self) { (source: AnyObject) -> ValidationError in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ValidationError()
            instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            instance.errors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["errors"] as AnyObject?)
            return instance
        }


        // Decoder for [Vehicle]
        Decoders.addDecoder(clazz: [Vehicle].self) { (source: AnyObject) -> [Vehicle] in
            return Decoders.decode(clazz: [Vehicle].self, source: source)
        }
        // Decoder for Vehicle
        Decoders.addDecoder(clazz: Vehicle.self) { (source: AnyObject) -> Vehicle in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Vehicle()
            instance.tpOp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["tpOp"] as AnyObject?)
            instance.chassisNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["chassisNumber"] as AnyObject?)
            instance.colorCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["colorCode"] as AnyObject?)
            instance.colorName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["colorName"] as AnyObject?)
            instance.cvPower = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cvPower"] as AnyObject?)
            instance.cylinderVolumCC = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cylinderVolumCC"] as AnyObject?)
            instance.netWeight = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["netWeight"] as AnyObject?)
            instance.grossWeight = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["grossWeight"] as AnyObject?)
            instance.serialNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serialNumber"] as AnyObject?)
            if let fuelType = sourceDictionary["fuelType"] as? String { 
                instance.fuelType = Vehicle.FuelType(rawValue: (fuelType))
            }
            
            instance.engineNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["engineNumber"] as AnyObject?)
            instance.cmt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cmt"] as AnyObject?)
            instance.lengthBetweenAxis = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lengthBetweenAxis"] as AnyObject?)
            instance.modelYear = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modelYear"] as AnyObject?)
            instance.manufactoryYear = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["manufactoryYear"] as AnyObject?)
            instance.paintType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["paintType"] as AnyObject?)
            instance.vehicleRENAVAMType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vehicleRENAVAMType"] as AnyObject?)
            instance.specieRENAVAMType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["specieRENAVAMType"] as AnyObject?)
            instance.modelRENAVAMCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modelRENAVAMCode"] as AnyObject?)
            if let colorDENATRANCode = sourceDictionary["colorDENATRANCode"] as? String { 
                instance.colorDENATRANCode = Vehicle.ColorDENATRANCode(rawValue: (colorDENATRANCode))
            }
            
            if let vin = sourceDictionary["vin"] as? String { 
                instance.vin = Vehicle.Vin(rawValue: (vin))
            }
            
            if let vehicleManufactoryStatus = sourceDictionary["vehicleManufactoryStatus"] as? String { 
                instance.vehicleManufactoryStatus = Vehicle.VehicleManufactoryStatus(rawValue: (vehicleManufactoryStatus))
            }
            
            instance.maxOccupantsQuantity = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["maxOccupantsQuantity"] as AnyObject?)
            if let restrictionType = sourceDictionary["restrictionType"] as? String { 
                instance.restrictionType = Vehicle.RestrictionType(rawValue: (restrictionType))
            }
            
            return instance
        }


        // Decoder for [VehicleID]
        Decoders.addDecoder(clazz: [VehicleID].self) { (source: AnyObject) -> [VehicleID] in
            return Decoders.decode(clazz: [VehicleID].self, source: source)
        }
        // Decoder for VehicleID
        Decoders.addDecoder(clazz: VehicleID.self) { (source: AnyObject) -> VehicleID in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = VehicleID()
            instance.licensePlate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["licensePlate"] as AnyObject?)
            instance.stateCode = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["stateCode"] as AnyObject?)
            instance.rtnc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rtnc"] as AnyObject?)
            return instance
        }


        // Decoder for [VehicleTransp]
        Decoders.addDecoder(clazz: [VehicleTransp].self) { (source: AnyObject) -> [VehicleTransp] in
            return Decoders.decode(clazz: [VehicleTransp].self, source: source)
        }
        // Decoder for VehicleTransp
        Decoders.addDecoder(clazz: VehicleTransp.self) { (source: AnyObject) -> VehicleTransp in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = VehicleTransp()
            if let type = sourceDictionary["type"] as? String { 
                instance.type = VehicleTransp.ModelType(rawValue: (type))
            }
            
            instance.automobile = Decoders.decodeOptional(clazz: VehicleID.self, source: sourceDictionary["automobile"] as AnyObject?)
            instance.trailer = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["trailer"] as AnyObject?)
            instance.wagon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wagon"] as AnyObject?)
            instance.ferry = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ferry"] as AnyObject?)
            return instance
        }


        // Decoder for [Weapon]
        Decoders.addDecoder(clazz: [Weapon].self) { (source: AnyObject) -> [Weapon] in
            return Decoders.decode(clazz: [Weapon].self, source: source)
        }
        // Decoder for Weapon
        Decoders.addDecoder(clazz: Weapon.self) { (source: AnyObject) -> Weapon in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Weapon()
            if let weaponRestrictionType = sourceDictionary["weaponRestrictionType"] as? String { 
                instance.weaponRestrictionType = Weapon.WeaponRestrictionType(rawValue: (weaponRestrictionType))
            }
            
            instance.serieNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serieNumber"] as AnyObject?)
            instance.gunBarrelSerieNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gunBarrelSerieNumber"] as AnyObject?)
            instance.weaponDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["weaponDescription"] as AnyObject?)
            return instance
        }


        // Decoder for [WithholdingMode]
        Decoders.addDecoder(clazz: [WithholdingMode].self) { (source: AnyObject) -> [WithholdingMode] in
            return Decoders.decode(clazz: [WithholdingMode].self, source: source)
        }
        // Decoder for WithholdingMode
        Decoders.addDecoder(clazz: WithholdingMode.self) { (source: AnyObject) -> WithholdingMode in
            if let source = source as? String {
                if let result = WithholdingMode(rawValue: source) {
                    return result
                }
            }
            fatalError("Source \(source) is not convertible to enum type WithholdingMode: Maybe swagger file is insufficient")
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
