<?php
/**
 * ServiceCalculationsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * ServiceCalculationsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ServiceCalculationsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ServiceCalculationsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet
     *
     * Retrieve transactions
     *
     * @param string $authorization Bearer {auth} (required)
     * @param string $account_id Account ID (required)
     * @param string $company_code Company Code (required)
     * @param string $transaction_type Transaction Type (sale, purchase, receipts or payment) (required)
     * @param string $document_code Document Code (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet($authorization, $account_id, $company_code, $transaction_type, $document_code)
    {
        list($response) = $this->calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithHttpInfo($authorization, $account_id, $company_code, $transaction_type, $document_code);
        return $response;
    }

    /**
     * Operation calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithHttpInfo
     *
     * Retrieve transactions
     *
     * @param string $authorization Bearer {auth} (required)
     * @param string $account_id Account ID (required)
     * @param string $company_code Company Code (required)
     * @param string $transaction_type Transaction Type (sale, purchase, receipts or payment) (required)
     * @param string $document_code Document Code (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithHttpInfo($authorization, $account_id, $company_code, $transaction_type, $document_code)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet');
        }
        // verify the required parameter 'company_code' is set
        if ($company_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_code when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet');
        }
        // verify the required parameter 'transaction_type' is set
        if ($transaction_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $transaction_type when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet');
        }
        // verify the required parameter 'document_code' is set
        if ($document_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_code when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet');
        }
        // parse inputs
        $resourcePath = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                "{" . "companyCode" . "}",
                $this->apiClient->getSerializer()->toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($transaction_type !== null) {
            $resourcePath = str_replace(
                "{" . "transactionType" . "}",
                $this->apiClient->getSerializer()->toPathValue($transaction_type),
                $resourcePath
            );
        }
        // path params
        if ($document_code !== null) {
            $resourcePath = str_replace(
                "{" . "documentCode" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ValidationError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost
     *
     * Promote a calculation to transaction
     *
     * @param string $authorization Bearer {auth} (required)
     * @param string $account_id Account ID (required)
     * @param string $company_code Company Code (required)
     * @param string $transaction_type Transaction Type (sale, purchase, receipts or payment) (required)
     * @param string $document_code Document Code (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost($authorization, $account_id, $company_code, $transaction_type, $document_code)
    {
        list($response) = $this->calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostWithHttpInfo($authorization, $account_id, $company_code, $transaction_type, $document_code);
        return $response;
    }

    /**
     * Operation calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostWithHttpInfo
     *
     * Promote a calculation to transaction
     *
     * @param string $authorization Bearer {auth} (required)
     * @param string $account_id Account ID (required)
     * @param string $company_code Company Code (required)
     * @param string $transaction_type Transaction Type (sale, purchase, receipts or payment) (required)
     * @param string $document_code Document Code (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostWithHttpInfo($authorization, $account_id, $company_code, $transaction_type, $document_code)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost');
        }
        // verify the required parameter 'company_code' is set
        if ($company_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_code when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost');
        }
        // verify the required parameter 'transaction_type' is set
        if ($transaction_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $transaction_type when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost');
        }
        // verify the required parameter 'document_code' is set
        if ($document_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_code when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost');
        }
        // parse inputs
        $resourcePath = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/transactions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                "{" . "companyCode" . "}",
                $this->apiClient->getSerializer()->toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($transaction_type !== null) {
            $resourcePath = str_replace(
                "{" . "transactionType" . "}",
                $this->apiClient->getSerializer()->toPathValue($transaction_type),
                $resourcePath
            );
        }
        // path params
        if ($document_code !== null) {
            $resourcePath = str_replace(
                "{" . "documentCode" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/transactions'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ValidationError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet
     *
     * Retrieve transactions
     *
     * @param string $authorization Bearer {auth} (required)
     * @param string $account_id Account ID (required)
     * @param string $company_code Company Code (required)
     * @param string $transaction_type Transaction Type (sale, purchase, receipts or payment) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet($authorization, $account_id, $company_code, $transaction_type)
    {
        list($response) = $this->calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithHttpInfo($authorization, $account_id, $company_code, $transaction_type);
        return $response;
    }

    /**
     * Operation calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithHttpInfo
     *
     * Retrieve transactions
     *
     * @param string $authorization Bearer {auth} (required)
     * @param string $account_id Account ID (required)
     * @param string $company_code Company Code (required)
     * @param string $transaction_type Transaction Type (sale, purchase, receipts or payment) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithHttpInfo($authorization, $account_id, $company_code, $transaction_type)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet');
        }
        // verify the required parameter 'company_code' is set
        if ($company_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_code when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet');
        }
        // verify the required parameter 'transaction_type' is set
        if ($transaction_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $transaction_type when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet');
        }
        // parse inputs
        $resourcePath = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                "{" . "accountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                "{" . "companyCode" . "}",
                $this->apiClient->getSerializer()->toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($transaction_type !== null) {
            $resourcePath = str_replace(
                "{" . "transactionType" . "}",
                $this->apiClient->getSerializer()->toPathValue($transaction_type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/calculations/account/{accountId}/company/{companyCode}/{transactionType}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ValidationError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation calculationsservicePaymentPost
     *
     * Calculation Method
     *
     * @param string $authorization Bearer {auth} (required)
     * @param \Swagger\Client\Model\PaymentTransactionIn $body Transaction Message (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PaymentTransactionOut
     */
    public function calculationsservicePaymentPost($authorization, $body)
    {
        list($response) = $this->calculationsservicePaymentPostWithHttpInfo($authorization, $body);
        return $response;
    }

    /**
     * Operation calculationsservicePaymentPostWithHttpInfo
     *
     * Calculation Method
     *
     * @param string $authorization Bearer {auth} (required)
     * @param \Swagger\Client\Model\PaymentTransactionIn $body Transaction Message (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PaymentTransactionOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function calculationsservicePaymentPostWithHttpInfo($authorization, $body)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling calculationsservicePaymentPost');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling calculationsservicePaymentPost');
        }
        // parse inputs
        $resourcePath = "/calculations?service-payment";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PaymentTransactionOut',
                '/calculations?service-payment'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PaymentTransactionOut', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PaymentTransactionOut', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ValidationError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation calculationsservicePurchasePost
     *
     * Calculation Method
     *
     * @param string $authorization Bearer {auth} (required)
     * @param \Swagger\Client\Model\PurchaseTransactionIn $body Transaction Message (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PurchaseTransactionOut
     */
    public function calculationsservicePurchasePost($authorization, $body)
    {
        list($response) = $this->calculationsservicePurchasePostWithHttpInfo($authorization, $body);
        return $response;
    }

    /**
     * Operation calculationsservicePurchasePostWithHttpInfo
     *
     * Calculation Method
     *
     * @param string $authorization Bearer {auth} (required)
     * @param \Swagger\Client\Model\PurchaseTransactionIn $body Transaction Message (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PurchaseTransactionOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function calculationsservicePurchasePostWithHttpInfo($authorization, $body)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling calculationsservicePurchasePost');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling calculationsservicePurchasePost');
        }
        // parse inputs
        $resourcePath = "/calculations?service-purchase";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PurchaseTransactionOut',
                '/calculations?service-purchase'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PurchaseTransactionOut', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PurchaseTransactionOut', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ValidationError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation calculationsserviceReceiptPost
     *
     * Calculation Method
     *
     * @param string $authorization Bearer {auth} (required)
     * @param \Swagger\Client\Model\ReceiptTransactionIn $body Transaction Message (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ReceiptTransactionOut
     */
    public function calculationsserviceReceiptPost($authorization, $body)
    {
        list($response) = $this->calculationsserviceReceiptPostWithHttpInfo($authorization, $body);
        return $response;
    }

    /**
     * Operation calculationsserviceReceiptPostWithHttpInfo
     *
     * Calculation Method
     *
     * @param string $authorization Bearer {auth} (required)
     * @param \Swagger\Client\Model\ReceiptTransactionIn $body Transaction Message (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ReceiptTransactionOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function calculationsserviceReceiptPostWithHttpInfo($authorization, $body)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling calculationsserviceReceiptPost');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling calculationsserviceReceiptPost');
        }
        // parse inputs
        $resourcePath = "/calculations?service-receipt";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ReceiptTransactionOut',
                '/calculations?service-receipt'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ReceiptTransactionOut', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ReceiptTransactionOut', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ValidationError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation calculationsserviceSalesPost
     *
     * Calculation Method
     *
     * @param string $authorization Bearer {auth} (required)
     * @param \Swagger\Client\Model\SalesTransactionIn $body Transaction Message (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SalesTransactionOut
     */
    public function calculationsserviceSalesPost($authorization, $body)
    {
        list($response) = $this->calculationsserviceSalesPostWithHttpInfo($authorization, $body);
        return $response;
    }

    /**
     * Operation calculationsserviceSalesPostWithHttpInfo
     *
     * Calculation Method
     *
     * @param string $authorization Bearer {auth} (required)
     * @param \Swagger\Client\Model\SalesTransactionIn $body Transaction Message (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SalesTransactionOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function calculationsserviceSalesPostWithHttpInfo($authorization, $body)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling calculationsserviceSalesPost');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling calculationsserviceSalesPost');
        }
        // parse inputs
        $resourcePath = "/calculations?service-sales";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SalesTransactionOut',
                '/calculations?service-sales'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SalesTransactionOut', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SalesTransactionOut', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ValidationError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Message', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
