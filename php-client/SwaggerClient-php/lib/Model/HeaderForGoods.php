<?php
/**
 * HeaderForGoods
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * HeaderForGoods Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class HeaderForGoods implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'HeaderForGoods';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'message_type' => 'string',
        'account_id' => 'string',
        'company_code' => 'string',
        'document_code' => 'string',
        'participants' => '\Swagger\Client\Model\HeaderForGoodsParticipants',
        'nf_access_key' => 'string',
        'nfce_qr_code' => 'string',
        'transaction_type' => 'string',
        'transaction_model' => 'string',
        'transaction_class' => 'string',
        'e_doc_creator_type' => 'string',
        'e_doc_creator_perspective' => 'bool',
        'entity_code' => 'string',
        'currency' => 'string',
        'company_location' => 'string',
        'transaction_date' => 'string',
        'shipping_date' => 'string',
        'additional_info' => '\Swagger\Client\Model\AdditionalInformation',
        'tp_imp' => 'string',
        'id_dest' => 'int',
        'ind_pres' => 'string',
        'invoice_number' => 'int',
        'invoice_serial' => 'int',
        'default_locations' => '\Swagger\Client\Model\DefaultLocations',
        'transport' => '\Swagger\Client\Model\Transport',
        'nf_ref' => '\Swagger\Client\Model\NRef[]',
        'payment' => '\Swagger\Client\Model\Payment',
        'purchase_info' => '\Swagger\Client\Model\PurchaseInfo',
        'export' => '\Swagger\Client\Model\ExportInfo'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'message_type' => 'messageType',
        'account_id' => 'accountId',
        'company_code' => 'companyCode',
        'document_code' => 'documentCode',
        'participants' => 'participants',
        'nf_access_key' => 'nfAccessKey',
        'nfce_qr_code' => 'nfceQrCode',
        'transaction_type' => 'transactionType',
        'transaction_model' => 'transactionModel',
        'transaction_class' => 'transactionClass',
        'e_doc_creator_type' => 'eDocCreatorType',
        'e_doc_creator_perspective' => 'eDocCreatorPerspective',
        'entity_code' => 'entityCode',
        'currency' => 'currency',
        'company_location' => 'companyLocation',
        'transaction_date' => 'transactionDate',
        'shipping_date' => 'shippingDate',
        'additional_info' => 'additionalInfo',
        'tp_imp' => 'tpImp',
        'id_dest' => 'idDest',
        'ind_pres' => 'indPres',
        'invoice_number' => 'invoiceNumber',
        'invoice_serial' => 'invoiceSerial',
        'default_locations' => 'defaultLocations',
        'transport' => 'transport',
        'nf_ref' => 'nfRef',
        'payment' => 'payment',
        'purchase_info' => 'purchaseInfo',
        'export' => 'export'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'message_type' => 'setMessageType',
        'account_id' => 'setAccountId',
        'company_code' => 'setCompanyCode',
        'document_code' => 'setDocumentCode',
        'participants' => 'setParticipants',
        'nf_access_key' => 'setNfAccessKey',
        'nfce_qr_code' => 'setNfceQrCode',
        'transaction_type' => 'setTransactionType',
        'transaction_model' => 'setTransactionModel',
        'transaction_class' => 'setTransactionClass',
        'e_doc_creator_type' => 'setEDocCreatorType',
        'e_doc_creator_perspective' => 'setEDocCreatorPerspective',
        'entity_code' => 'setEntityCode',
        'currency' => 'setCurrency',
        'company_location' => 'setCompanyLocation',
        'transaction_date' => 'setTransactionDate',
        'shipping_date' => 'setShippingDate',
        'additional_info' => 'setAdditionalInfo',
        'tp_imp' => 'setTpImp',
        'id_dest' => 'setIdDest',
        'ind_pres' => 'setIndPres',
        'invoice_number' => 'setInvoiceNumber',
        'invoice_serial' => 'setInvoiceSerial',
        'default_locations' => 'setDefaultLocations',
        'transport' => 'setTransport',
        'nf_ref' => 'setNfRef',
        'payment' => 'setPayment',
        'purchase_info' => 'setPurchaseInfo',
        'export' => 'setExport'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'message_type' => 'getMessageType',
        'account_id' => 'getAccountId',
        'company_code' => 'getCompanyCode',
        'document_code' => 'getDocumentCode',
        'participants' => 'getParticipants',
        'nf_access_key' => 'getNfAccessKey',
        'nfce_qr_code' => 'getNfceQrCode',
        'transaction_type' => 'getTransactionType',
        'transaction_model' => 'getTransactionModel',
        'transaction_class' => 'getTransactionClass',
        'e_doc_creator_type' => 'getEDocCreatorType',
        'e_doc_creator_perspective' => 'getEDocCreatorPerspective',
        'entity_code' => 'getEntityCode',
        'currency' => 'getCurrency',
        'company_location' => 'getCompanyLocation',
        'transaction_date' => 'getTransactionDate',
        'shipping_date' => 'getShippingDate',
        'additional_info' => 'getAdditionalInfo',
        'tp_imp' => 'getTpImp',
        'id_dest' => 'getIdDest',
        'ind_pres' => 'getIndPres',
        'invoice_number' => 'getInvoiceNumber',
        'invoice_serial' => 'getInvoiceSerial',
        'default_locations' => 'getDefaultLocations',
        'transport' => 'getTransport',
        'nf_ref' => 'getNfRef',
        'payment' => 'getPayment',
        'purchase_info' => 'getPurchaseInfo',
        'export' => 'getExport'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const MESSAGE_TYPE_GOODS = 'goods';
    const TRANSACTION_TYPE_SALES = 'Sales';
    const TRANSACTION_TYPE_PURCHASE = 'Purchase';
    const TRANSACTION_TYPE_SALES_RETURN = 'SalesReturn';
    const TRANSACTION_TYPE_PURCHASE_RETURN = 'PurchaseReturn';
    const TRANSACTION_TYPE_TRANSFER_RETURN = 'TransferReturn';
    const TRANSACTION_TYPE_SHIPPING = 'Shipping';
    const TRANSACTION_TYPE_SHIPPING_RETURN = 'ShippingReturn';
    const TRANSACTION_TYPE_TRANSFER = 'Transfer';
    const TRANSACTION_TYPE_RECEIPT_ADJUSTMENT = 'ReceiptAdjustment';
    const TRANSACTION_TYPE_TRANSFER_ADJUSTMENT = 'TransferAdjustment';
    const TRANSACTION_MODEL__01 = '01';
    const TRANSACTION_MODEL__1_B = '1B';
    const TRANSACTION_MODEL__02 = '02';
    const TRANSACTION_MODEL__2_D = '2D';
    const TRANSACTION_MODEL__2_E = '2E';
    const TRANSACTION_MODEL__04 = '04';
    const TRANSACTION_MODEL__06 = '06';
    const TRANSACTION_MODEL__07 = '07';
    const TRANSACTION_MODEL__08 = '08';
    const TRANSACTION_MODEL__8_B = '8B';
    const TRANSACTION_MODEL__09 = '09';
    const TRANSACTION_MODEL__10 = '10';
    const TRANSACTION_MODEL__11 = '11';
    const TRANSACTION_MODEL__13 = '13';
    const TRANSACTION_MODEL__14 = '14';
    const TRANSACTION_MODEL__15 = '15';
    const TRANSACTION_MODEL__16 = '16';
    const TRANSACTION_MODEL__18 = '18';
    const TRANSACTION_MODEL__21 = '21';
    const TRANSACTION_MODEL__22 = '22';
    const TRANSACTION_MODEL__26 = '26';
    const TRANSACTION_MODEL__27 = '27';
    const TRANSACTION_MODEL__28 = '28';
    const TRANSACTION_MODEL__29 = '29';
    const TRANSACTION_MODEL__55 = '55';
    const TRANSACTION_MODEL__57 = '57';
    const TRANSACTION_MODEL__59 = '59';
    const TRANSACTION_MODEL__60 = '60';
    const TRANSACTION_MODEL__65 = '65';
    const E_DOC_CREATOR_TYPE_SELF = 'self';
    const E_DOC_CREATOR_TYPE_OTHER = 'other';
    const CURRENCY_BRL = 'BRL';
    const TP_IMP__0 = '0';
    const TP_IMP__1 = '1';
    const TP_IMP__2 = '2';
    const TP_IMP__3 = '3';
    const TP_IMP__4 = '4';
    const TP_IMP__5 = '5';
    const IND_PRES__0 = '0';
    const IND_PRES__1 = '1';
    const IND_PRES__2 = '2';
    const IND_PRES__3 = '3';
    const IND_PRES__4 = '4';
    const IND_PRES__9 = '9';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getMessageTypeAllowableValues()
    {
        return [
            self::MESSAGE_TYPE_GOODS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTransactionTypeAllowableValues()
    {
        return [
            self::TRANSACTION_TYPE_SALES,
            self::TRANSACTION_TYPE_PURCHASE,
            self::TRANSACTION_TYPE_SALES_RETURN,
            self::TRANSACTION_TYPE_PURCHASE_RETURN,
            self::TRANSACTION_TYPE_TRANSFER_RETURN,
            self::TRANSACTION_TYPE_SHIPPING,
            self::TRANSACTION_TYPE_SHIPPING_RETURN,
            self::TRANSACTION_TYPE_TRANSFER,
            self::TRANSACTION_TYPE_RECEIPT_ADJUSTMENT,
            self::TRANSACTION_TYPE_TRANSFER_ADJUSTMENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTransactionModelAllowableValues()
    {
        return [
            self::TRANSACTION_MODEL__01,
            self::TRANSACTION_MODEL__1_B,
            self::TRANSACTION_MODEL__02,
            self::TRANSACTION_MODEL__2_D,
            self::TRANSACTION_MODEL__2_E,
            self::TRANSACTION_MODEL__04,
            self::TRANSACTION_MODEL__06,
            self::TRANSACTION_MODEL__07,
            self::TRANSACTION_MODEL__08,
            self::TRANSACTION_MODEL__8_B,
            self::TRANSACTION_MODEL__09,
            self::TRANSACTION_MODEL__10,
            self::TRANSACTION_MODEL__11,
            self::TRANSACTION_MODEL__13,
            self::TRANSACTION_MODEL__14,
            self::TRANSACTION_MODEL__15,
            self::TRANSACTION_MODEL__16,
            self::TRANSACTION_MODEL__18,
            self::TRANSACTION_MODEL__21,
            self::TRANSACTION_MODEL__22,
            self::TRANSACTION_MODEL__26,
            self::TRANSACTION_MODEL__27,
            self::TRANSACTION_MODEL__28,
            self::TRANSACTION_MODEL__29,
            self::TRANSACTION_MODEL__55,
            self::TRANSACTION_MODEL__57,
            self::TRANSACTION_MODEL__59,
            self::TRANSACTION_MODEL__60,
            self::TRANSACTION_MODEL__65,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEDocCreatorTypeAllowableValues()
    {
        return [
            self::E_DOC_CREATOR_TYPE_SELF,
            self::E_DOC_CREATOR_TYPE_OTHER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_BRL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTpImpAllowableValues()
    {
        return [
            self::TP_IMP__0,
            self::TP_IMP__1,
            self::TP_IMP__2,
            self::TP_IMP__3,
            self::TP_IMP__4,
            self::TP_IMP__5,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getIndPresAllowableValues()
    {
        return [
            self::IND_PRES__0,
            self::IND_PRES__1,
            self::IND_PRES__2,
            self::IND_PRES__3,
            self::IND_PRES__4,
            self::IND_PRES__9,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['message_type'] = isset($data['message_type']) ? $data['message_type'] : 'goods';
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['company_code'] = isset($data['company_code']) ? $data['company_code'] : null;
        $this->container['document_code'] = isset($data['document_code']) ? $data['document_code'] : null;
        $this->container['participants'] = isset($data['participants']) ? $data['participants'] : null;
        $this->container['nf_access_key'] = isset($data['nf_access_key']) ? $data['nf_access_key'] : null;
        $this->container['nfce_qr_code'] = isset($data['nfce_qr_code']) ? $data['nfce_qr_code'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['transaction_model'] = isset($data['transaction_model']) ? $data['transaction_model'] : null;
        $this->container['transaction_class'] = isset($data['transaction_class']) ? $data['transaction_class'] : null;
        $this->container['e_doc_creator_type'] = isset($data['e_doc_creator_type']) ? $data['e_doc_creator_type'] : null;
        $this->container['e_doc_creator_perspective'] = isset($data['e_doc_creator_perspective']) ? $data['e_doc_creator_perspective'] : true;
        $this->container['entity_code'] = isset($data['entity_code']) ? $data['entity_code'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['company_location'] = isset($data['company_location']) ? $data['company_location'] : null;
        $this->container['transaction_date'] = isset($data['transaction_date']) ? $data['transaction_date'] : null;
        $this->container['shipping_date'] = isset($data['shipping_date']) ? $data['shipping_date'] : null;
        $this->container['additional_info'] = isset($data['additional_info']) ? $data['additional_info'] : null;
        $this->container['tp_imp'] = isset($data['tp_imp']) ? $data['tp_imp'] : null;
        $this->container['id_dest'] = isset($data['id_dest']) ? $data['id_dest'] : null;
        $this->container['ind_pres'] = isset($data['ind_pres']) ? $data['ind_pres'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['invoice_serial'] = isset($data['invoice_serial']) ? $data['invoice_serial'] : null;
        $this->container['default_locations'] = isset($data['default_locations']) ? $data['default_locations'] : null;
        $this->container['transport'] = isset($data['transport']) ? $data['transport'] : null;
        $this->container['nf_ref'] = isset($data['nf_ref']) ? $data['nf_ref'] : null;
        $this->container['payment'] = isset($data['payment']) ? $data['payment'] : null;
        $this->container['purchase_info'] = isset($data['purchase_info']) ? $data['purchase_info'] : null;
        $this->container['export'] = isset($data['export']) ? $data['export'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["goods"];
        if (!in_array($this->container['message_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'message_type', must be one of #{allowed_values}.";
        }

        if ($this->container['account_id'] === null) {
            $invalid_properties[] = "'account_id' can't be null";
        }
        if ($this->container['company_code'] === null) {
            $invalid_properties[] = "'company_code' can't be null";
        }
        if ((strlen($this->container['company_code']) > 60)) {
            $invalid_properties[] = "invalid value for 'company_code', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['nfce_qr_code']) && (strlen($this->container['nfce_qr_code']) > 600)) {
            $invalid_properties[] = "invalid value for 'nfce_qr_code', the character length must be smaller than or equal to 600.";
        }

        if (!is_null($this->container['nfce_qr_code']) && (strlen($this->container['nfce_qr_code']) < 100)) {
            $invalid_properties[] = "invalid value for 'nfce_qr_code', the character length must be bigger than or equal to 100.";
        }

        if ($this->container['transaction_type'] === null) {
            $invalid_properties[] = "'transaction_type' can't be null";
        }
        $allowed_values = ["Sales", "Purchase", "SalesReturn", "PurchaseReturn", "TransferReturn", "Shipping", "ShippingReturn", "Transfer", "ReceiptAdjustment", "TransferAdjustment"];
        if (!in_array($this->container['transaction_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'transaction_type', must be one of #{allowed_values}.";
        }

        $allowed_values = ["01", "1B", "02", "2D", "2E", "04", "06", "07", "08", "8B", "09", "10", "11", "13", "14", "15", "16", "18", "21", "22", "26", "27", "28", "29", "55", "57", "59", "60", "65"];
        if (!in_array($this->container['transaction_model'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'transaction_model', must be one of #{allowed_values}.";
        }

        if ($this->container['e_doc_creator_type'] === null) {
            $invalid_properties[] = "'e_doc_creator_type' can't be null";
        }
        $allowed_values = ["self", "other"];
        if (!in_array($this->container['e_doc_creator_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'e_doc_creator_type', must be one of #{allowed_values}.";
        }

        $allowed_values = ["BRL"];
        if (!in_array($this->container['currency'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'currency', must be one of #{allowed_values}.";
        }

        if ($this->container['company_location'] === null) {
            $invalid_properties[] = "'company_location' can't be null";
        }
        $allowed_values = ["0", "1", "2", "3", "4", "5"];
        if (!in_array($this->container['tp_imp'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'tp_imp', must be one of #{allowed_values}.";
        }

        $allowed_values = ["0", "1", "2", "3", "4", "9"];
        if (!in_array($this->container['ind_pres'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'ind_pres', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["goods"];
        if (!in_array($this->container['message_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['account_id'] === null) {
            return false;
        }
        if ($this->container['company_code'] === null) {
            return false;
        }
        if (strlen($this->container['company_code']) > 60) {
            return false;
        }
        if (strlen($this->container['nfce_qr_code']) > 600) {
            return false;
        }
        if (strlen($this->container['nfce_qr_code']) < 100) {
            return false;
        }
        if ($this->container['transaction_type'] === null) {
            return false;
        }
        $allowed_values = ["Sales", "Purchase", "SalesReturn", "PurchaseReturn", "TransferReturn", "Shipping", "ShippingReturn", "Transfer", "ReceiptAdjustment", "TransferAdjustment"];
        if (!in_array($this->container['transaction_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["01", "1B", "02", "2D", "2E", "04", "06", "07", "08", "8B", "09", "10", "11", "13", "14", "15", "16", "18", "21", "22", "26", "27", "28", "29", "55", "57", "59", "60", "65"];
        if (!in_array($this->container['transaction_model'], $allowed_values)) {
            return false;
        }
        if ($this->container['e_doc_creator_type'] === null) {
            return false;
        }
        $allowed_values = ["self", "other"];
        if (!in_array($this->container['e_doc_creator_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["BRL"];
        if (!in_array($this->container['currency'], $allowed_values)) {
            return false;
        }
        if ($this->container['company_location'] === null) {
            return false;
        }
        $allowed_values = ["0", "1", "2", "3", "4", "5"];
        if (!in_array($this->container['tp_imp'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["0", "1", "2", "3", "4", "9"];
        if (!in_array($this->container['ind_pres'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets message_type
     * @return string
     */
    public function getMessageType()
    {
        return $this->container['message_type'];
    }

    /**
     * Sets message_type
     * @param string $message_type
     * @return $this
     */
    public function setMessageType($message_type)
    {
        $allowed_values = array('goods');
        if (!is_null($message_type) && (!in_array($message_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'message_type', must be one of 'goods'");
        }
        $this->container['message_type'] = $message_type;

        return $this;
    }

    /**
     * Gets account_id
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     * @param string $account_id This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode on the next line.
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets company_code
     * @return string
     */
    public function getCompanyCode()
    {
        return $this->container['company_code'];
    }

    /**
     * Sets company_code
     * @param string $company_code string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company
     * @return $this
     */
    public function setCompanyCode($company_code)
    {
        if ((strlen($company_code) > 60)) {
            throw new \InvalidArgumentException('invalid length for $company_code when calling HeaderForGoods., must be smaller than or equal to 60.');
        }

        $this->container['company_code'] = $company_code;

        return $this;
    }

    /**
     * Gets document_code
     * @return string
     */
    public function getDocumentCode()
    {
        return $this->container['document_code'];
    }

    /**
     * Sets document_code
     * @param string $document_code This string is a code maintained by the client application to uniquely identify a document in the client's systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc. When has this field, the transaction will be stored
     * @return $this
     */
    public function setDocumentCode($document_code)
    {
        $this->container['document_code'] = $document_code;

        return $this;
    }

    /**
     * Gets participants
     * @return \Swagger\Client\Model\HeaderForGoodsParticipants
     */
    public function getParticipants()
    {
        return $this->container['participants'];
    }

    /**
     * Sets participants
     * @param \Swagger\Client\Model\HeaderForGoodsParticipants $participants
     * @return $this
     */
    public function setParticipants($participants)
    {
        $this->container['participants'] = $participants;

        return $this;
    }

    /**
     * Gets nf_access_key
     * @return string
     */
    public function getNfAccessKey()
    {
        return $this->container['nf_access_key'];
    }

    /**
     * Sets nf_access_key
     * @param string $nf_access_key This is the public NF id. With this number is possible get invoice information directly from government.
     * @return $this
     */
    public function setNfAccessKey($nf_access_key)
    {
        $this->container['nf_access_key'] = $nf_access_key;

        return $this;
    }

    /**
     * Gets nfce_qr_code
     * @return string
     */
    public function getNfceQrCode()
    {
        return $this->container['nfce_qr_code'];
    }

    /**
     * Sets nfce_qr_code
     * @param string $nfce_qr_code qr code printed on DANFE;
     * @return $this
     */
    public function setNfceQrCode($nfce_qr_code)
    {
        if (!is_null($nfce_qr_code) && (strlen($nfce_qr_code) > 600)) {
            throw new \InvalidArgumentException('invalid length for $nfce_qr_code when calling HeaderForGoods., must be smaller than or equal to 600.');
        }
        if (!is_null($nfce_qr_code) && (strlen($nfce_qr_code) < 100)) {
            throw new \InvalidArgumentException('invalid length for $nfce_qr_code when calling HeaderForGoods., must be bigger than or equal to 100.');
        }

        $this->container['nfce_qr_code'] = $nfce_qr_code;

        return $this;
    }

    /**
     * Gets transaction_type
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     * @param string $transaction_type This string indicates the type of transaction for which tax should be calculated.
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $allowed_values = array('Sales', 'Purchase', 'SalesReturn', 'PurchaseReturn', 'TransferReturn', 'Shipping', 'ShippingReturn', 'Transfer', 'ReceiptAdjustment', 'TransferAdjustment');
        if ((!in_array($transaction_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'transaction_type', must be one of 'Sales', 'Purchase', 'SalesReturn', 'PurchaseReturn', 'TransferReturn', 'Shipping', 'ShippingReturn', 'Transfer', 'ReceiptAdjustment', 'TransferAdjustment'");
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets transaction_model
     * @return string
     */
    public function getTransactionModel()
    {
        return $this->container['transaction_model'];
    }

    /**
     * Sets transaction_model
     * @param string $transaction_model This string indicates the type of transaction for which tax should be calculated. - '01' # Nota Fiscal 1/1A - '1B' # Nota Fiscal Avulsa - '02' # Nota Fiscal de Venda a-Consumidor - '2D' # Cupom Fiscal - '2E' # Cupom Fiscal-Bilhete de Passagem - '04' # Nota Fiscal de Produtor - '06' # Nota Fiscal/Conta de Energia Elétrica - '07' # Nota Fiscal de Serviço de Transporte - '08' # Conhecimento de Transporte Rodoviário de-Cargas - '8B' # Conhecimento de Transporte de-Cargas Avulso - '09' # Conhecimento de Transporte Aquaviário de-Cargas - '10' # Conhecimento Aéreo - '11' # Conhecimento de Transporte Ferroviário de-Cargas - '13' # Bilhete de Passagem Rodoviário - '14' # Bilhete de Passagem Aquaviário - '15' # Bilhete de Passagem e-Nota de-Bagagem - '16' # Bilhete de Passagem Ferroviário - '18' # Resumo de Movimento Diário - '21' # Nota Fiscal de Serviço de-Comunicação - '22' # Nota Fiscal de Serviço de Telecomunicação - '26' # Conhecimento de Transporte Multimodal de-Cargas - '27' # Nota Fiscal De Transporte Ferroviário De-Carga - '28' # Nota Fiscal/Conta de Fornecimento de Gás-Canalizado - '29' # Nota Fiscal/Conta de Fornecimento de Água-Canalizada - '55' # Nota Fiscal Eletrônica (NF-e) - '57' # Conhecimento de Transporte Eletrônico (CT-e) - '59' # Cupom Fiscal Eletrônico (CF-e-SAT) - '60' # Cupom Fiscal Eletrônico (CF-e-ECF) - '65' # Nota Fiscal Eletrônica ao-Consumidor Final (NFC-e)
     * @return $this
     */
    public function setTransactionModel($transaction_model)
    {
        $allowed_values = array('01', '1B', '02', '2D', '2E', '04', '06', '07', '08', '8B', '09', '10', '11', '13', '14', '15', '16', '18', '21', '22', '26', '27', '28', '29', '55', '57', '59', '60', '65');
        if (!is_null($transaction_model) && (!in_array($transaction_model, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'transaction_model', must be one of '01', '1B', '02', '2D', '2E', '04', '06', '07', '08', '8B', '09', '10', '11', '13', '14', '15', '16', '18', '21', '22', '26', '27', '28', '29', '55', '57', '59', '60', '65'");
        }
        $this->container['transaction_model'] = $transaction_model;

        return $this;
    }

    /**
     * Gets transaction_class
     * @return string
     */
    public function getTransactionClass()
    {
        return $this->container['transaction_class'];
    }

    /**
     * Sets transaction_class
     * @param string $transaction_class Natureza da Opreração - 'Describe kind of this transaction, summary
     * @return $this
     */
    public function setTransactionClass($transaction_class)
    {
        $this->container['transaction_class'] = $transaction_class;

        return $this;
    }

    /**
     * Gets e_doc_creator_type
     * @return string
     */
    public function getEDocCreatorType()
    {
        return $this->container['e_doc_creator_type'];
    }

    /**
     * Sets e_doc_creator_type
     * @param string $e_doc_creator_type
     * @return $this
     */
    public function setEDocCreatorType($e_doc_creator_type)
    {
        $allowed_values = array('self', 'other');
        if ((!in_array($e_doc_creator_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'e_doc_creator_type', must be one of 'self', 'other'");
        }
        $this->container['e_doc_creator_type'] = $e_doc_creator_type;

        return $this;
    }

    /**
     * Gets e_doc_creator_perspective
     * @return bool
     */
    public function getEDocCreatorPerspective()
    {
        return $this->container['e_doc_creator_perspective'];
    }

    /**
     * Sets e_doc_creator_perspective
     * @param bool $e_doc_creator_perspective This Flag is used only when eDocCreatorType is other and the return show Taxes using eDocCreator perspective or self perspective.
     * @return $this
     */
    public function setEDocCreatorPerspective($e_doc_creator_perspective)
    {
        $this->container['e_doc_creator_perspective'] = $e_doc_creator_perspective;

        return $this;
    }

    /**
     * Gets entity_code
     * @return string
     */
    public function getEntityCode()
    {
        return $this->container['entity_code'];
    }

    /**
     * Sets entity_code
     * @param string $entity_code This string is a code maintained by the client application and recorded in CUP to uniquely identify the party with whom the company (identified by companyCode) is transacting. It is unique within the context of a Company.
     * @return $this
     */
    public function setEntityCode($entity_code)
    {
        $this->container['entity_code'] = $entity_code;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency currency code
     * @return $this
     */
    public function setCurrency($currency)
    {
        $allowed_values = array('BRL');
        if (!is_null($currency) && (!in_array($currency, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'currency', must be one of 'BRL'");
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets company_location
     * @return string
     */
    public function getCompanyLocation()
    {
        return $this->container['company_location'];
    }

    /**
     * Sets company_location
     * @param string $company_location This string contains a previously configured company code which may also have codes needed for tax return purposes. These codes are maintained through the customer portal. Main company address identity
     * @return $this
     */
    public function setCompanyLocation($company_location)
    {
        $this->container['company_location'] = $company_location;

        return $this;
    }

    /**
     * Gets transaction_date
     * @return string
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     * @param string $transaction_date This string is the transaction date in ISO 8601 format, create transaction date
     * @return $this
     */
    public function setTransactionDate($transaction_date)
    {
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets shipping_date
     * @return string
     */
    public function getShippingDate()
    {
        return $this->container['shipping_date'];
    }

    /**
     * Sets shipping_date
     * @param string $shipping_date This string is the transaction date in ISO 8601 format, when products were shipped, can be empty or absent
     * @return $this
     */
    public function setShippingDate($shipping_date)
    {
        $this->container['shipping_date'] = $shipping_date;

        return $this;
    }

    /**
     * Gets additional_info
     * @return \Swagger\Client\Model\AdditionalInformation
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info
     * @param \Swagger\Client\Model\AdditionalInformation $additional_info
     * @return $this
     */
    public function setAdditionalInfo($additional_info)
    {
        $this->container['additional_info'] = $additional_info;

        return $this;
    }

    /**
     * Gets tp_imp
     * @return string
     */
    public function getTpImp()
    {
        return $this->container['tp_imp'];
    }

    /**
     * Sets tp_imp
     * @param string $tp_imp how the document will be printed - '0' # without DANFE; - '1' # DANFe Letter; - '2' # DANFe Landscape; - '3' # DANFe Simplified; - '4' # DANFe NFC-e; - '5' # DANFe NFC-e e-mail
     * @return $this
     */
    public function setTpImp($tp_imp)
    {
        $allowed_values = array('0', '1', '2', '3', '4', '5');
        if (!is_null($tp_imp) && (!in_array($tp_imp, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'tp_imp', must be one of '0', '1', '2', '3', '4', '5'");
        }
        $this->container['tp_imp'] = $tp_imp;

        return $this;
    }

    /**
     * Gets id_dest
     * @return int
     */
    public function getIdDest()
    {
        return $this->container['id_dest'];
    }

    /**
     * Sets id_dest
     * @param int $id_dest This indicator inform transaction target place, when is AUTOMATIC the company address and entity address are analyzed to identify type of transaction target place 1- same state; 2 - interstate; 3-with exterior. Exist some cases where is necessary force this situation like when buyer from another state buy something in loco, the address are from different states, but transaction no.  Identificador de Local de destino da operação, na opção AUTOMATIC endereços da Companhia e da entidade destino são analisados para saber se é uma operação dentro do mesmo estado, interestadual ou com o exterior. Há situações onde é necessário forçar este indicador como por exemplo  Quando uma pessoa com endereço em outro estado, compra uma mercadoria de forma presencial, é uma operação interna apesar dos endereços dos envolvidos estarem em estados distintos. - 0 # AUTOMATIC - DEFAULT - 1 # Interna; - 2 # Interestadual; - 3 # Exterior)
     * @return $this
     */
    public function setIdDest($id_dest)
    {
        $this->container['id_dest'] = $id_dest;

        return $this;
    }

    /**
     * Gets ind_pres
     * @return string
     */
    public function getIndPres()
    {
        return $this->container['ind_pres'];
    }

    /**
     * Sets ind_pres
     * @param string $ind_pres Presence indicator - '0' # Not applicable - '1' # Presential; - '2' # Remote, internet; - '3' # Remote, phone; - '4' # NFC-e home delivery; - '9' # Remote, others
     * @return $this
     */
    public function setIndPres($ind_pres)
    {
        $allowed_values = array('0', '1', '2', '3', '4', '9');
        if (!is_null($ind_pres) && (!in_array($ind_pres, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'ind_pres', must be one of '0', '1', '2', '3', '4', '9'");
        }
        $this->container['ind_pres'] = $ind_pres;

        return $this;
    }

    /**
     * Gets invoice_number
     * @return int
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     * @param int $invoice_number Invoice number, sequential unique by invoice serial (Número da nota fiscal)
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets invoice_serial
     * @return int
     */
    public function getInvoiceSerial()
    {
        return $this->container['invoice_serial'];
    }

    /**
     * Sets invoice_serial
     * @param int $invoice_serial Invoice number, sequential unique by invoice serial (Número da nota fiscal)
     * @return $this
     */
    public function setInvoiceSerial($invoice_serial)
    {
        $this->container['invoice_serial'] = $invoice_serial;

        return $this;
    }

    /**
     * Gets default_locations
     * @return \Swagger\Client\Model\DefaultLocations
     */
    public function getDefaultLocations()
    {
        return $this->container['default_locations'];
    }

    /**
     * Sets default_locations
     * @param \Swagger\Client\Model\DefaultLocations $default_locations
     * @return $this
     */
    public function setDefaultLocations($default_locations)
    {
        $this->container['default_locations'] = $default_locations;

        return $this;
    }

    /**
     * Gets transport
     * @return \Swagger\Client\Model\Transport
     */
    public function getTransport()
    {
        return $this->container['transport'];
    }

    /**
     * Sets transport
     * @param \Swagger\Client\Model\Transport $transport Shipment
     * @return $this
     */
    public function setTransport($transport)
    {
        $this->container['transport'] = $transport;

        return $this;
    }

    /**
     * Gets nf_ref
     * @return \Swagger\Client\Model\NRef[]
     */
    public function getNfRef()
    {
        return $this->container['nf_ref'];
    }

    /**
     * Sets nf_ref
     * @param \Swagger\Client\Model\NRef[] $nf_ref Transactions or other invoices referenced
     * @return $this
     */
    public function setNfRef($nf_ref)
    {
        $this->container['nf_ref'] = $nf_ref;

        return $this;
    }

    /**
     * Gets payment
     * @return \Swagger\Client\Model\Payment
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     * @param \Swagger\Client\Model\Payment $payment
     * @return $this
     */
    public function setPayment($payment)
    {
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets purchase_info
     * @return \Swagger\Client\Model\PurchaseInfo
     */
    public function getPurchaseInfo()
    {
        return $this->container['purchase_info'];
    }

    /**
     * Sets purchase_info
     * @param \Swagger\Client\Model\PurchaseInfo $purchase_info
     * @return $this
     */
    public function setPurchaseInfo($purchase_info)
    {
        $this->container['purchase_info'] = $purchase_info;

        return $this;
    }

    /**
     * Gets export
     * @return \Swagger\Client\Model\ExportInfo
     */
    public function getExport()
    {
        return $this->container['export'];
    }

    /**
     * Sets export
     * @param \Swagger\Client\Model\ExportInfo $export
     * @return $this
     */
    public function setExport($export)
    {
        $this->container['export'] = $export;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


