<?php
/**
 * TransportVolumes
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * TransportVolumes Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TransportVolumes implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Transport_volumes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'q_vol' => 'string',
        'specie' => 'string',
        'brand' => 'string',
        'volume_numeration' => 'string',
        'net_weight' => 'double',
        'gross_weight' => 'double',
        'seal' => 'string[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'q_vol' => 'qVol',
        'specie' => 'specie',
        'brand' => 'brand',
        'volume_numeration' => 'volumeNumeration',
        'net_weight' => 'netWeight',
        'gross_weight' => 'grossWeight',
        'seal' => 'seal'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'q_vol' => 'setQVol',
        'specie' => 'setSpecie',
        'brand' => 'setBrand',
        'volume_numeration' => 'setVolumeNumeration',
        'net_weight' => 'setNetWeight',
        'gross_weight' => 'setGrossWeight',
        'seal' => 'setSeal'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'q_vol' => 'getQVol',
        'specie' => 'getSpecie',
        'brand' => 'getBrand',
        'volume_numeration' => 'getVolumeNumeration',
        'net_weight' => 'getNetWeight',
        'gross_weight' => 'getGrossWeight',
        'seal' => 'getSeal'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['q_vol'] = isset($data['q_vol']) ? $data['q_vol'] : null;
        $this->container['specie'] = isset($data['specie']) ? $data['specie'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['volume_numeration'] = isset($data['volume_numeration']) ? $data['volume_numeration'] : null;
        $this->container['net_weight'] = isset($data['net_weight']) ? $data['net_weight'] : null;
        $this->container['gross_weight'] = isset($data['gross_weight']) ? $data['gross_weight'] : null;
        $this->container['seal'] = isset($data['seal']) ? $data['seal'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['q_vol']) && !preg_match("/[0-9]{1,15}/", $this->container['q_vol'])) {
            $invalid_properties[] = "invalid value for 'q_vol', must be conform to the pattern /[0-9]{1,15}/.";
        }

        if (!is_null($this->container['specie']) && (strlen($this->container['specie']) > 60)) {
            $invalid_properties[] = "invalid value for 'specie', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['specie']) && (strlen($this->container['specie']) < 1)) {
            $invalid_properties[] = "invalid value for 'specie', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['brand']) && (strlen($this->container['brand']) > 60)) {
            $invalid_properties[] = "invalid value for 'brand', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['brand']) && (strlen($this->container['brand']) < 1)) {
            $invalid_properties[] = "invalid value for 'brand', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['volume_numeration']) && (strlen($this->container['volume_numeration']) > 60)) {
            $invalid_properties[] = "invalid value for 'volume_numeration', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['volume_numeration']) && (strlen($this->container['volume_numeration']) < 1)) {
            $invalid_properties[] = "invalid value for 'volume_numeration', the character length must be bigger than or equal to 1.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (!preg_match("/[0-9]{1,15}/", $this->container['q_vol'])) {
            return false;
        }
        if (strlen($this->container['specie']) > 60) {
            return false;
        }
        if (strlen($this->container['specie']) < 1) {
            return false;
        }
        if (strlen($this->container['brand']) > 60) {
            return false;
        }
        if (strlen($this->container['brand']) < 1) {
            return false;
        }
        if (strlen($this->container['volume_numeration']) > 60) {
            return false;
        }
        if (strlen($this->container['volume_numeration']) < 1) {
            return false;
        }
        return true;
    }


    /**
     * Gets q_vol
     * @return string
     */
    public function getQVol()
    {
        return $this->container['q_vol'];
    }

    /**
     * Sets q_vol
     * @param string $q_vol Quantity of packages transported
     * @return $this
     */
    public function setQVol($q_vol)
    {

        if (!is_null($q_vol) && (!preg_match("/[0-9]{1,15}/", $q_vol))) {
            throw new \InvalidArgumentException("invalid value for $q_vol when calling TransportVolumes., must conform to the pattern /[0-9]{1,15}/.");
        }

        $this->container['q_vol'] = $q_vol;

        return $this;
    }

    /**
     * Gets specie
     * @return string
     */
    public function getSpecie()
    {
        return $this->container['specie'];
    }

    /**
     * Sets specie
     * @param string $specie package type
     * @return $this
     */
    public function setSpecie($specie)
    {
        if (!is_null($specie) && (strlen($specie) > 60)) {
            throw new \InvalidArgumentException('invalid length for $specie when calling TransportVolumes., must be smaller than or equal to 60.');
        }
        if (!is_null($specie) && (strlen($specie) < 1)) {
            throw new \InvalidArgumentException('invalid length for $specie when calling TransportVolumes., must be bigger than or equal to 1.');
        }

        $this->container['specie'] = $specie;

        return $this;
    }

    /**
     * Gets brand
     * @return string
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     * @param string $brand brand
     * @return $this
     */
    public function setBrand($brand)
    {
        if (!is_null($brand) && (strlen($brand) > 60)) {
            throw new \InvalidArgumentException('invalid length for $brand when calling TransportVolumes., must be smaller than or equal to 60.');
        }
        if (!is_null($brand) && (strlen($brand) < 1)) {
            throw new \InvalidArgumentException('invalid length for $brand when calling TransportVolumes., must be bigger than or equal to 1.');
        }

        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets volume_numeration
     * @return string
     */
    public function getVolumeNumeration()
    {
        return $this->container['volume_numeration'];
    }

    /**
     * Sets volume_numeration
     * @param string $volume_numeration packages numeration
     * @return $this
     */
    public function setVolumeNumeration($volume_numeration)
    {
        if (!is_null($volume_numeration) && (strlen($volume_numeration) > 60)) {
            throw new \InvalidArgumentException('invalid length for $volume_numeration when calling TransportVolumes., must be smaller than or equal to 60.');
        }
        if (!is_null($volume_numeration) && (strlen($volume_numeration) < 1)) {
            throw new \InvalidArgumentException('invalid length for $volume_numeration when calling TransportVolumes., must be bigger than or equal to 1.');
        }

        $this->container['volume_numeration'] = $volume_numeration;

        return $this;
    }

    /**
     * Gets net_weight
     * @return double
     */
    public function getNetWeight()
    {
        return $this->container['net_weight'];
    }

    /**
     * Sets net_weight
     * @param double $net_weight net weight using Kg
     * @return $this
     */
    public function setNetWeight($net_weight)
    {
        $this->container['net_weight'] = $net_weight;

        return $this;
    }

    /**
     * Gets gross_weight
     * @return double
     */
    public function getGrossWeight()
    {
        return $this->container['gross_weight'];
    }

    /**
     * Sets gross_weight
     * @param double $gross_weight gross weight using Kg
     * @return $this
     */
    public function setGrossWeight($gross_weight)
    {
        $this->container['gross_weight'] = $gross_weight;

        return $this;
    }

    /**
     * Gets seal
     * @return string[]
     */
    public function getSeal()
    {
        return $this->container['seal'];
    }

    /**
     * Sets seal
     * @param string[] $seal
     * @return $this
     */
    public function setSeal($seal)
    {
        $this->container['seal'] = $seal;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


