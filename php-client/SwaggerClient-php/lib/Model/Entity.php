<?php
/**
 * Entity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Entity Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Entity implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Entity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'role' => 'string',
        'type' => '\Swagger\Client\Model\EntityType',
        'federal_tax_id' => 'string',
        'city_tax_id' => 'string',
        'state_tax_id' => 'string',
        'suframa' => 'string',
        'phone' => 'string',
        'tax_regime' => 'string',
        'email' => 'string',
        'subject_to_srf1234' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'role' => 'role',
        'type' => 'type',
        'federal_tax_id' => 'federalTaxId',
        'city_tax_id' => 'cityTaxId',
        'state_tax_id' => 'stateTaxId',
        'suframa' => 'suframa',
        'phone' => 'phone',
        'tax_regime' => 'taxRegime',
        'email' => 'email',
        'subject_to_srf1234' => 'subjectToSRF1234'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'role' => 'setRole',
        'type' => 'setType',
        'federal_tax_id' => 'setFederalTaxId',
        'city_tax_id' => 'setCityTaxId',
        'state_tax_id' => 'setStateTaxId',
        'suframa' => 'setSuframa',
        'phone' => 'setPhone',
        'tax_regime' => 'setTaxRegime',
        'email' => 'setEmail',
        'subject_to_srf1234' => 'setSubjectToSrf1234'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'role' => 'getRole',
        'type' => 'getType',
        'federal_tax_id' => 'getFederalTaxId',
        'city_tax_id' => 'getCityTaxId',
        'state_tax_id' => 'getStateTaxId',
        'suframa' => 'getSuframa',
        'phone' => 'getPhone',
        'tax_regime' => 'getTaxRegime',
        'email' => 'getEmail',
        'subject_to_srf1234' => 'getSubjectToSrf1234'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const ROLE_TRANSPORTER = 'transporter';
    const ROLE_SENDER = 'sender';
    const ROLE_DISPATCHER = 'dispatcher';
    const ROLE_RECEIVER = 'receiver';
    const ROLE_ADDRESSEE = 'addressee';
    const ROLE_OTHER = 'other';
    const TAX_REGIME_REAL_PROFIT = 'realProfit';
    const TAX_REGIME_ESTIMATED_PROFIT = 'estimatedProfit';
    const TAX_REGIME_SIMPLIFIED = 'simplified';
    const TAX_REGIME_SIMPLIFIED_OVER_GROSSTHRESHOLD = 'simplifiedOverGrossthreshold';
    const TAX_REGIME_SIMPLIFIED_ENTREPRENEUR = 'simplifiedEntrepreneur';
    const TAX_REGIME_NOT_APPLICABLE = 'notApplicable';
    const TAX_REGIME_INDIVIDUAL = 'individual';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getRoleAllowableValues()
    {
        return [
            self::ROLE_TRANSPORTER,
            self::ROLE_SENDER,
            self::ROLE_DISPATCHER,
            self::ROLE_RECEIVER,
            self::ROLE_ADDRESSEE,
            self::ROLE_OTHER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTaxRegimeAllowableValues()
    {
        return [
            self::TAX_REGIME_REAL_PROFIT,
            self::TAX_REGIME_ESTIMATED_PROFIT,
            self::TAX_REGIME_SIMPLIFIED,
            self::TAX_REGIME_SIMPLIFIED_OVER_GROSSTHRESHOLD,
            self::TAX_REGIME_SIMPLIFIED_ENTREPRENEUR,
            self::TAX_REGIME_NOT_APPLICABLE,
            self::TAX_REGIME_INDIVIDUAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['federal_tax_id'] = isset($data['federal_tax_id']) ? $data['federal_tax_id'] : null;
        $this->container['city_tax_id'] = isset($data['city_tax_id']) ? $data['city_tax_id'] : null;
        $this->container['state_tax_id'] = isset($data['state_tax_id']) ? $data['state_tax_id'] : null;
        $this->container['suframa'] = isset($data['suframa']) ? $data['suframa'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['tax_regime'] = isset($data['tax_regime']) ? $data['tax_regime'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['subject_to_srf1234'] = isset($data['subject_to_srf1234']) ? $data['subject_to_srf1234'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["transporter", "sender", "dispatcher", "receiver", "addressee", "other"];
        if (!in_array($this->container['role'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'role', must be one of #{allowed_values}.";
        }

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if ($this->container['federal_tax_id'] === null) {
            $invalid_properties[] = "'federal_tax_id' can't be null";
        }
        if (!preg_match("/([!-ÿ]{0}|[!-ÿ]{5,20})?/", $this->container['federal_tax_id'])) {
            $invalid_properties[] = "invalid value for 'federal_tax_id', must be conform to the pattern /([!-ÿ]{0}|[!-ÿ]{5,20})?/.";
        }

        if (!is_null($this->container['city_tax_id']) && (strlen($this->container['city_tax_id']) > 15)) {
            $invalid_properties[] = "invalid value for 'city_tax_id', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['state_tax_id']) && !preg_match("/[0-9]{2,14}|ISENTO/", $this->container['state_tax_id'])) {
            $invalid_properties[] = "invalid value for 'state_tax_id', must be conform to the pattern /[0-9]{2,14}|ISENTO/.";
        }

        if (!is_null($this->container['suframa']) && !preg_match("/[0-9]{8,9}/", $this->container['suframa'])) {
            $invalid_properties[] = "invalid value for 'suframa', must be conform to the pattern /[0-9]{8,9}/.";
        }

        if (!is_null($this->container['phone']) && !preg_match("/[0-9]{6,14}/", $this->container['phone'])) {
            $invalid_properties[] = "invalid value for 'phone', must be conform to the pattern /[0-9]{6,14}/.";
        }

        $allowed_values = ["realProfit", "estimatedProfit", "simplified", "simplifiedOverGrossthreshold", "simplifiedEntrepreneur", "notApplicable", "individual"];
        if (!in_array($this->container['tax_regime'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'tax_regime', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['email']) && (strlen($this->container['email']) > 60)) {
            $invalid_properties[] = "invalid value for 'email', the character length must be smaller than or equal to 60.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["transporter", "sender", "dispatcher", "receiver", "addressee", "other"];
        if (!in_array($this->container['role'], $allowed_values)) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['federal_tax_id'] === null) {
            return false;
        }
        if (!preg_match("/([!-ÿ]{0}|[!-ÿ]{5,20})?/", $this->container['federal_tax_id'])) {
            return false;
        }
        if (strlen($this->container['city_tax_id']) > 15) {
            return false;
        }
        if (!preg_match("/[0-9]{2,14}|ISENTO/", $this->container['state_tax_id'])) {
            return false;
        }
        if (!preg_match("/[0-9]{8,9}/", $this->container['suframa'])) {
            return false;
        }
        if (!preg_match("/[0-9]{6,14}/", $this->container['phone'])) {
            return false;
        }
        $allowed_values = ["realProfit", "estimatedProfit", "simplified", "simplifiedOverGrossthreshold", "simplifiedEntrepreneur", "notApplicable", "individual"];
        if (!in_array($this->container['tax_regime'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['email']) > 60) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Entity name, official name (Razão Social)
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets role
     * @return string
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     * @param string $role - 'transporter' - 'sender' # REMETENTE - 'dispatcher' # EXPEDITOR - 'receiver' # RECEIVER - 'addressee' # DESTINATÁRIO - 'other' # OUTRO
     * @return $this
     */
    public function setRole($role)
    {
        $allowed_values = array('transporter', 'sender', 'dispatcher', 'receiver', 'addressee', 'other');
        if (!is_null($role) && (!in_array($role, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'role', must be one of 'transporter', 'sender', 'dispatcher', 'receiver', 'addressee', 'other'");
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets type
     * @return \Swagger\Client\Model\EntityType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param \Swagger\Client\Model\EntityType $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets federal_tax_id
     * @return string
     */
    public function getFederalTaxId()
    {
        return $this->container['federal_tax_id'];
    }

    /**
     * Sets federal_tax_id
     * @param string $federal_tax_id CNPJ/CPF of Sales Buyer, if CPF pattern is '[0-9]{11}' if CNPJ pattern is '[0-9]{14}'
     * @return $this
     */
    public function setFederalTaxId($federal_tax_id)
    {

        if ((!preg_match("/([!-ÿ]{0}|[!-ÿ]{5,20})?/", $federal_tax_id))) {
            throw new \InvalidArgumentException("invalid value for $federal_tax_id when calling Entity., must conform to the pattern /([!-ÿ]{0}|[!-ÿ]{5,20})?/.");
        }

        $this->container['federal_tax_id'] = $federal_tax_id;

        return $this;
    }

    /**
     * Gets city_tax_id
     * @return string
     */
    public function getCityTaxId()
    {
        return $this->container['city_tax_id'];
    }

    /**
     * Sets city_tax_id
     * @param string $city_tax_id City Tax ID
     * @return $this
     */
    public function setCityTaxId($city_tax_id)
    {
        if (!is_null($city_tax_id) && (strlen($city_tax_id) > 15)) {
            throw new \InvalidArgumentException('invalid length for $city_tax_id when calling Entity., must be smaller than or equal to 15.');
        }

        $this->container['city_tax_id'] = $city_tax_id;

        return $this;
    }

    /**
     * Gets state_tax_id
     * @return string
     */
    public function getStateTaxId()
    {
        return $this->container['state_tax_id'];
    }

    /**
     * Sets state_tax_id
     * @param string $state_tax_id State Tax ID
     * @return $this
     */
    public function setStateTaxId($state_tax_id)
    {

        if (!is_null($state_tax_id) && (!preg_match("/[0-9]{2,14}|ISENTO/", $state_tax_id))) {
            throw new \InvalidArgumentException("invalid value for $state_tax_id when calling Entity., must conform to the pattern /[0-9]{2,14}|ISENTO/.");
        }

        $this->container['state_tax_id'] = $state_tax_id;

        return $this;
    }

    /**
     * Gets suframa
     * @return string
     */
    public function getSuframa()
    {
        return $this->container['suframa'];
    }

    /**
     * Sets suframa
     * @param string $suframa Suframa ID
     * @return $this
     */
    public function setSuframa($suframa)
    {

        if (!is_null($suframa) && (!preg_match("/[0-9]{8,9}/", $suframa))) {
            throw new \InvalidArgumentException("invalid value for $suframa when calling Entity., must conform to the pattern /[0-9]{8,9}/.");
        }

        $this->container['suframa'] = $suframa;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone Entity Phone
     * @return $this
     */
    public function setPhone($phone)
    {

        if (!is_null($phone) && (!preg_match("/[0-9]{6,14}/", $phone))) {
            throw new \InvalidArgumentException("invalid value for $phone when calling Entity., must conform to the pattern /[0-9]{6,14}/.");
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets tax_regime
     * @return string
     */
    public function getTaxRegime()
    {
        return $this->container['tax_regime'];
    }

    /**
     * Sets tax_regime
     * @param string $tax_regime
     * @return $this
     */
    public function setTaxRegime($tax_regime)
    {
        $allowed_values = array('realProfit', 'estimatedProfit', 'simplified', 'simplifiedOverGrossthreshold', 'simplifiedEntrepreneur', 'notApplicable', 'individual');
        if (!is_null($tax_regime) && (!in_array($tax_regime, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'tax_regime', must be one of 'realProfit', 'estimatedProfit', 'simplified', 'simplifiedOverGrossthreshold', 'simplifiedEntrepreneur', 'notApplicable', 'individual'");
        }
        $this->container['tax_regime'] = $tax_regime;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Entity Email
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (strlen($email) > 60)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Entity., must be smaller than or equal to 60.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets subject_to_srf1234
     * @return bool
     */
    public function getSubjectToSrf1234()
    {
        return $this->container['subject_to_srf1234'];
    }

    /**
     * Sets subject_to_srf1234
     * @param bool $subject_to_srf1234 Companies subject to follow same rules of Government entities (Instrução Normativa: SRF1234)
     * @return $this
     */
    public function setSubjectToSrf1234($subject_to_srf1234)
    {
        $this->container['subject_to_srf1234'] = $subject_to_srf1234;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


