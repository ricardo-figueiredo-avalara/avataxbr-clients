<?php
/**
 * PurchaseEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PurchaseEntity Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PurchaseEntity implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'type' => '\Swagger\Client\Model\EntityType',
        'email' => 'string',
        'cnpjcpf' => 'string',
        'city_tax_id' => 'string',
        'state_tax_id' => 'string',
        'suframa' => 'string',
        'phone' => 'string',
        'tax_regime' => '\Swagger\Client\Model\FederalTaxRegime',
        'has_cpom' => 'bool',
        'subject_withholding_irrf' => 'bool',
        'inss_previous_contrib' => 'double',
        'inss_basis_discount' => 'double',
        'iss_rf_rate' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'type' => 'type',
        'email' => 'email',
        'cnpjcpf' => 'cnpjcpf',
        'city_tax_id' => 'cityTaxId',
        'state_tax_id' => 'stateTaxId',
        'suframa' => 'suframa',
        'phone' => 'phone',
        'tax_regime' => 'taxRegime',
        'has_cpom' => 'hasCpom',
        'subject_withholding_irrf' => 'subjectWithholdingIrrf',
        'inss_previous_contrib' => 'inssPreviousContrib',
        'inss_basis_discount' => 'inssBasisDiscount',
        'iss_rf_rate' => 'issRfRate'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'type' => 'setType',
        'email' => 'setEmail',
        'cnpjcpf' => 'setCnpjcpf',
        'city_tax_id' => 'setCityTaxId',
        'state_tax_id' => 'setStateTaxId',
        'suframa' => 'setSuframa',
        'phone' => 'setPhone',
        'tax_regime' => 'setTaxRegime',
        'has_cpom' => 'setHasCpom',
        'subject_withholding_irrf' => 'setSubjectWithholdingIrrf',
        'inss_previous_contrib' => 'setInssPreviousContrib',
        'inss_basis_discount' => 'setInssBasisDiscount',
        'iss_rf_rate' => 'setIssRfRate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'type' => 'getType',
        'email' => 'getEmail',
        'cnpjcpf' => 'getCnpjcpf',
        'city_tax_id' => 'getCityTaxId',
        'state_tax_id' => 'getStateTaxId',
        'suframa' => 'getSuframa',
        'phone' => 'getPhone',
        'tax_regime' => 'getTaxRegime',
        'has_cpom' => 'getHasCpom',
        'subject_withholding_irrf' => 'getSubjectWithholdingIrrf',
        'inss_previous_contrib' => 'getInssPreviousContrib',
        'inss_basis_discount' => 'getInssBasisDiscount',
        'iss_rf_rate' => 'getIssRfRate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['cnpjcpf'] = isset($data['cnpjcpf']) ? $data['cnpjcpf'] : null;
        $this->container['city_tax_id'] = isset($data['city_tax_id']) ? $data['city_tax_id'] : null;
        $this->container['state_tax_id'] = isset($data['state_tax_id']) ? $data['state_tax_id'] : null;
        $this->container['suframa'] = isset($data['suframa']) ? $data['suframa'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['tax_regime'] = isset($data['tax_regime']) ? $data['tax_regime'] : null;
        $this->container['has_cpom'] = isset($data['has_cpom']) ? $data['has_cpom'] : null;
        $this->container['subject_withholding_irrf'] = isset($data['subject_withholding_irrf']) ? $data['subject_withholding_irrf'] : null;
        $this->container['inss_previous_contrib'] = isset($data['inss_previous_contrib']) ? $data['inss_previous_contrib'] : null;
        $this->container['inss_basis_discount'] = isset($data['inss_basis_discount']) ? $data['inss_basis_discount'] : null;
        $this->container['iss_rf_rate'] = isset($data['iss_rf_rate']) ? $data['iss_rf_rate'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['name']) && (strlen($this->container['name']) > 60)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['email']) && (strlen($this->container['email']) > 60)) {
            $invalid_properties[] = "invalid value for 'email', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['cnpjcpf']) && !preg_match("/([!-ÿ]{0}|[!-ÿ]{5,20})?/", $this->container['cnpjcpf'])) {
            $invalid_properties[] = "invalid value for 'cnpjcpf', must be conform to the pattern /([!-ÿ]{0}|[!-ÿ]{5,20})?/.";
        }

        if (!is_null($this->container['city_tax_id']) && (strlen($this->container['city_tax_id']) > 15)) {
            $invalid_properties[] = "invalid value for 'city_tax_id', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['state_tax_id']) && !preg_match("/[0-9]{2,14}|ISENTO/", $this->container['state_tax_id'])) {
            $invalid_properties[] = "invalid value for 'state_tax_id', must be conform to the pattern /[0-9]{2,14}|ISENTO/.";
        }

        if (!is_null($this->container['suframa']) && !preg_match("/[0-9]{8,9}/", $this->container['suframa'])) {
            $invalid_properties[] = "invalid value for 'suframa', must be conform to the pattern /[0-9]{8,9}/.";
        }

        if (!is_null($this->container['phone']) && !preg_match("/[0-9]{6,14}/", $this->container['phone'])) {
            $invalid_properties[] = "invalid value for 'phone', must be conform to the pattern /[0-9]{6,14}/.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['name']) > 60) {
            return false;
        }
        if (strlen($this->container['email']) > 60) {
            return false;
        }
        if (!preg_match("/([!-ÿ]{0}|[!-ÿ]{5,20})?/", $this->container['cnpjcpf'])) {
            return false;
        }
        if (strlen($this->container['city_tax_id']) > 15) {
            return false;
        }
        if (!preg_match("/[0-9]{2,14}|ISENTO/", $this->container['state_tax_id'])) {
            return false;
        }
        if (!preg_match("/[0-9]{8,9}/", $this->container['suframa'])) {
            return false;
        }
        if (!preg_match("/[0-9]{6,14}/", $this->container['phone'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Legal Name of Service buyer.
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (strlen($name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $name when calling PurchaseEntity., must be smaller than or equal to 60.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     * @return \Swagger\Client\Model\EntityType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param \Swagger\Client\Model\EntityType $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Entity Email
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (strlen($email) > 60)) {
            throw new \InvalidArgumentException('invalid length for $email when calling PurchaseEntity., must be smaller than or equal to 60.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets cnpjcpf
     * @return string
     */
    public function getCnpjcpf()
    {
        return $this->container['cnpjcpf'];
    }

    /**
     * Sets cnpjcpf
     * @param string $cnpjcpf CNPJ/CPF of Sales Buyer. If CPF, pattern is '[0-9]{11}' if CNPJ, pattern is '[0-9]{14}'
     * @return $this
     */
    public function setCnpjcpf($cnpjcpf)
    {

        if (!is_null($cnpjcpf) && (!preg_match("/([!-ÿ]{0}|[!-ÿ]{5,20})?/", $cnpjcpf))) {
            throw new \InvalidArgumentException("invalid value for $cnpjcpf when calling PurchaseEntity., must conform to the pattern /([!-ÿ]{0}|[!-ÿ]{5,20})?/.");
        }

        $this->container['cnpjcpf'] = $cnpjcpf;

        return $this;
    }

    /**
     * Gets city_tax_id
     * @return string
     */
    public function getCityTaxId()
    {
        return $this->container['city_tax_id'];
    }

    /**
     * Sets city_tax_id
     * @param string $city_tax_id City Tax ID
     * @return $this
     */
    public function setCityTaxId($city_tax_id)
    {
        if (!is_null($city_tax_id) && (strlen($city_tax_id) > 15)) {
            throw new \InvalidArgumentException('invalid length for $city_tax_id when calling PurchaseEntity., must be smaller than or equal to 15.');
        }

        $this->container['city_tax_id'] = $city_tax_id;

        return $this;
    }

    /**
     * Gets state_tax_id
     * @return string
     */
    public function getStateTaxId()
    {
        return $this->container['state_tax_id'];
    }

    /**
     * Sets state_tax_id
     * @param string $state_tax_id State Tax ID
     * @return $this
     */
    public function setStateTaxId($state_tax_id)
    {

        if (!is_null($state_tax_id) && (!preg_match("/[0-9]{2,14}|ISENTO/", $state_tax_id))) {
            throw new \InvalidArgumentException("invalid value for $state_tax_id when calling PurchaseEntity., must conform to the pattern /[0-9]{2,14}|ISENTO/.");
        }

        $this->container['state_tax_id'] = $state_tax_id;

        return $this;
    }

    /**
     * Gets suframa
     * @return string
     */
    public function getSuframa()
    {
        return $this->container['suframa'];
    }

    /**
     * Sets suframa
     * @param string $suframa Suframa ID
     * @return $this
     */
    public function setSuframa($suframa)
    {

        if (!is_null($suframa) && (!preg_match("/[0-9]{8,9}/", $suframa))) {
            throw new \InvalidArgumentException("invalid value for $suframa when calling PurchaseEntity., must conform to the pattern /[0-9]{8,9}/.");
        }

        $this->container['suframa'] = $suframa;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone Entity Phone
     * @return $this
     */
    public function setPhone($phone)
    {

        if (!is_null($phone) && (!preg_match("/[0-9]{6,14}/", $phone))) {
            throw new \InvalidArgumentException("invalid value for $phone when calling PurchaseEntity., must conform to the pattern /[0-9]{6,14}/.");
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets tax_regime
     * @return \Swagger\Client\Model\FederalTaxRegime
     */
    public function getTaxRegime()
    {
        return $this->container['tax_regime'];
    }

    /**
     * Sets tax_regime
     * @param \Swagger\Client\Model\FederalTaxRegime $tax_regime
     * @return $this
     */
    public function setTaxRegime($tax_regime)
    {
        $this->container['tax_regime'] = $tax_regime;

        return $this;
    }

    /**
     * Gets has_cpom
     * @return bool
     */
    public function getHasCpom()
    {
        return $this->container['has_cpom'];
    }

    /**
     * Sets has_cpom
     * @param bool $has_cpom Some cities require PURCHASE.Buyers to withhold ISS (City Tax) from PURCHASE.Sellers stablished in different cities. In case the PURCHASE.Seller has acquired a Tax Registration in this destination city, by providing this information in the service invoice, this withholding obligation is lifted.
     * @return $this
     */
    public function setHasCpom($has_cpom)
    {
        $this->container['has_cpom'] = $has_cpom;

        return $this;
    }

    /**
     * Gets subject_withholding_irrf
     * @return bool
     */
    public function getSubjectWithholdingIrrf()
    {
        return $this->container['subject_withholding_irrf'];
    }

    /**
     * Sets subject_withholding_irrf
     * @param bool $subject_withholding_irrf These are the federal taxes attributes that determine whether withholding of taxes should take place. In special cases where the PURCHASE.Seller is exempt of one or more of these taxes the withholding follows the same rules. The Business type may also dictate these rules as well.
     * @return $this
     */
    public function setSubjectWithholdingIrrf($subject_withholding_irrf)
    {
        $this->container['subject_withholding_irrf'] = $subject_withholding_irrf;

        return $this;
    }

    /**
     * Gets inss_previous_contrib
     * @return double
     */
    public function getInssPreviousContrib()
    {
        return $this->container['inss_previous_contrib'];
    }

    /**
     * Sets inss_previous_contrib
     * @param double $inss_previous_contrib The INSS contribution is capped at a maximum limit (amount of actual retired payment available in the country).  Individuals sellers subject to INSS withholding can provide the amount already tax by other transactions (with the same buyer or different ones) to deduct to the tax basis. This amount is to be provided to the Seller in a form of a signed document.
     * @return $this
     */
    public function setInssPreviousContrib($inss_previous_contrib)
    {
        $this->container['inss_previous_contrib'] = $inss_previous_contrib;

        return $this;
    }

    /**
     * Gets inss_basis_discount
     * @return double
     */
    public function getInssBasisDiscount()
    {
        return $this->container['inss_basis_discount'];
    }

    /**
     * Sets inss_basis_discount
     * @param double $inss_basis_discount The INSS contribution is applicable only to the labor amount in a service contract.  There are several items that may be deducted from the service invoice total to arrive at the INSS taxable amount. This amount is to be provided to the Seller in the body of the Invoice or calculated during the transaction input.
     * @return $this
     */
    public function setInssBasisDiscount($inss_basis_discount)
    {
        $this->container['inss_basis_discount'] = $inss_basis_discount;

        return $this;
    }

    /**
     * Gets iss_rf_rate
     * @return double
     */
    public function getIssRfRate()
    {
        return $this->container['iss_rf_rate'];
    }

    /**
     * Sets iss_rf_rate
     * @param double $iss_rf_rate When Seller is Simples regime, the seller needs send RF rate.
     * @return $this
     */
    public function setIssRfRate($iss_rf_rate)
    {
        $this->container['iss_rf_rate'] = $iss_rf_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


