<?php
/**
 * Company
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Company Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Company implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Company';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'official_name' => 'string',
        'name' => 'string',
        'entity_type' => '\Swagger\Client\Model\EntityType',
        'subject_to_srf1234' => 'bool',
        'federal_tax_regime' => '\Swagger\Client\Model\FederalTaxRegime',
        'pis_subject_to' => 'string',
        'cofins_subject_to' => 'string',
        'csll_subject_to' => 'string',
        'receipts_are_full_no_cumulative_pis_cofins' => 'bool',
        'inss_withhold_subject_to' => 'bool',
        'iss_withhold_subject_to' => 'bool',
        'irrf_withhold_subject_to' => 'bool',
        'icms_rate_for_simplestaxregime' => 'double',
        'is_exempt_by_gross_revenue_for_simplestaxregime' => 'bool',
        'configuration' => '\Swagger\Client\Model\CompanyConfiguration',
        'mail_server' => '\Swagger\Client\Model\CompanyMailServer',
        'authorized_to_download_n_fe' => '\Swagger\Client\Model\CompanyAuthorizedToDownloadNFe[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'official_name' => 'officialName',
        'name' => 'name',
        'entity_type' => 'entityType',
        'subject_to_srf1234' => 'subjectToSRF1234',
        'federal_tax_regime' => 'federalTaxRegime',
        'pis_subject_to' => 'pisSubjectTo',
        'cofins_subject_to' => 'cofinsSubjectTo',
        'csll_subject_to' => 'csllSubjectTo',
        'receipts_are_full_no_cumulative_pis_cofins' => 'receiptsAreFullNoCumulativePisCofins',
        'inss_withhold_subject_to' => 'inssWithholdSubjectTo',
        'iss_withhold_subject_to' => 'issWithholdSubjectTo',
        'irrf_withhold_subject_to' => 'irrfWithholdSubjectTo',
        'icms_rate_for_simplestaxregime' => 'icmsRateForSimplestaxregime',
        'is_exempt_by_gross_revenue_for_simplestaxregime' => 'isExemptByGrossRevenueForSimplestaxregime',
        'configuration' => 'configuration',
        'mail_server' => 'mailServer',
        'authorized_to_download_n_fe' => 'authorizedToDownloadNFe'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'official_name' => 'setOfficialName',
        'name' => 'setName',
        'entity_type' => 'setEntityType',
        'subject_to_srf1234' => 'setSubjectToSrf1234',
        'federal_tax_regime' => 'setFederalTaxRegime',
        'pis_subject_to' => 'setPisSubjectTo',
        'cofins_subject_to' => 'setCofinsSubjectTo',
        'csll_subject_to' => 'setCsllSubjectTo',
        'receipts_are_full_no_cumulative_pis_cofins' => 'setReceiptsAreFullNoCumulativePisCofins',
        'inss_withhold_subject_to' => 'setInssWithholdSubjectTo',
        'iss_withhold_subject_to' => 'setIssWithholdSubjectTo',
        'irrf_withhold_subject_to' => 'setIrrfWithholdSubjectTo',
        'icms_rate_for_simplestaxregime' => 'setIcmsRateForSimplestaxregime',
        'is_exempt_by_gross_revenue_for_simplestaxregime' => 'setIsExemptByGrossRevenueForSimplestaxregime',
        'configuration' => 'setConfiguration',
        'mail_server' => 'setMailServer',
        'authorized_to_download_n_fe' => 'setAuthorizedToDownloadNFe'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'official_name' => 'getOfficialName',
        'name' => 'getName',
        'entity_type' => 'getEntityType',
        'subject_to_srf1234' => 'getSubjectToSrf1234',
        'federal_tax_regime' => 'getFederalTaxRegime',
        'pis_subject_to' => 'getPisSubjectTo',
        'cofins_subject_to' => 'getCofinsSubjectTo',
        'csll_subject_to' => 'getCsllSubjectTo',
        'receipts_are_full_no_cumulative_pis_cofins' => 'getReceiptsAreFullNoCumulativePisCofins',
        'inss_withhold_subject_to' => 'getInssWithholdSubjectTo',
        'iss_withhold_subject_to' => 'getIssWithholdSubjectTo',
        'irrf_withhold_subject_to' => 'getIrrfWithholdSubjectTo',
        'icms_rate_for_simplestaxregime' => 'getIcmsRateForSimplestaxregime',
        'is_exempt_by_gross_revenue_for_simplestaxregime' => 'getIsExemptByGrossRevenueForSimplestaxregime',
        'configuration' => 'getConfiguration',
        'mail_server' => 'getMailServer',
        'authorized_to_download_n_fe' => 'getAuthorizedToDownloadNFe'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PIS_SUBJECT_TO_TAXABLE = 'TAXABLE';
    const PIS_SUBJECT_TO_NOT_TAXABLE = 'NOT TAXABLE';
    const PIS_SUBJECT_TO_EXEMPT = 'EXEMPT';
    const COFINS_SUBJECT_TO_TAXABLE = 'TAXABLE';
    const COFINS_SUBJECT_TO_NOT_TAXABLE = 'NOT TAXABLE';
    const COFINS_SUBJECT_TO_EXEMPT = 'EXEMPT';
    const CSLL_SUBJECT_TO_TAXABLE = 'TAXABLE';
    const CSLL_SUBJECT_TO_NOT_TAXABLE = 'NOT TAXABLE';
    const CSLL_SUBJECT_TO_EXEMPT = 'EXEMPT';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPisSubjectToAllowableValues()
    {
        return [
            self::PIS_SUBJECT_TO_TAXABLE,
            self::PIS_SUBJECT_TO_NOT_TAXABLE,
            self::PIS_SUBJECT_TO_EXEMPT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCofinsSubjectToAllowableValues()
    {
        return [
            self::COFINS_SUBJECT_TO_TAXABLE,
            self::COFINS_SUBJECT_TO_NOT_TAXABLE,
            self::COFINS_SUBJECT_TO_EXEMPT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCsllSubjectToAllowableValues()
    {
        return [
            self::CSLL_SUBJECT_TO_TAXABLE,
            self::CSLL_SUBJECT_TO_NOT_TAXABLE,
            self::CSLL_SUBJECT_TO_EXEMPT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['official_name'] = isset($data['official_name']) ? $data['official_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['entity_type'] = isset($data['entity_type']) ? $data['entity_type'] : null;
        $this->container['subject_to_srf1234'] = isset($data['subject_to_srf1234']) ? $data['subject_to_srf1234'] : null;
        $this->container['federal_tax_regime'] = isset($data['federal_tax_regime']) ? $data['federal_tax_regime'] : null;
        $this->container['pis_subject_to'] = isset($data['pis_subject_to']) ? $data['pis_subject_to'] : null;
        $this->container['cofins_subject_to'] = isset($data['cofins_subject_to']) ? $data['cofins_subject_to'] : null;
        $this->container['csll_subject_to'] = isset($data['csll_subject_to']) ? $data['csll_subject_to'] : null;
        $this->container['receipts_are_full_no_cumulative_pis_cofins'] = isset($data['receipts_are_full_no_cumulative_pis_cofins']) ? $data['receipts_are_full_no_cumulative_pis_cofins'] : null;
        $this->container['inss_withhold_subject_to'] = isset($data['inss_withhold_subject_to']) ? $data['inss_withhold_subject_to'] : null;
        $this->container['iss_withhold_subject_to'] = isset($data['iss_withhold_subject_to']) ? $data['iss_withhold_subject_to'] : null;
        $this->container['irrf_withhold_subject_to'] = isset($data['irrf_withhold_subject_to']) ? $data['irrf_withhold_subject_to'] : null;
        $this->container['icms_rate_for_simplestaxregime'] = isset($data['icms_rate_for_simplestaxregime']) ? $data['icms_rate_for_simplestaxregime'] : null;
        $this->container['is_exempt_by_gross_revenue_for_simplestaxregime'] = isset($data['is_exempt_by_gross_revenue_for_simplestaxregime']) ? $data['is_exempt_by_gross_revenue_for_simplestaxregime'] : null;
        $this->container['configuration'] = isset($data['configuration']) ? $data['configuration'] : null;
        $this->container['mail_server'] = isset($data['mail_server']) ? $data['mail_server'] : null;
        $this->container['authorized_to_download_n_fe'] = isset($data['authorized_to_download_n_fe']) ? $data['authorized_to_download_n_fe'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['code'] === null) {
            $invalid_properties[] = "'code' can't be null";
        }
        if ((strlen($this->container['code']) > 60)) {
            $invalid_properties[] = "invalid value for 'code', the character length must be smaller than or equal to 60.";
        }

        if ($this->container['official_name'] === null) {
            $invalid_properties[] = "'official_name' can't be null";
        }
        if ((strlen($this->container['official_name']) > 150)) {
            $invalid_properties[] = "invalid value for 'official_name', the character length must be smaller than or equal to 150.";
        }

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 150)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 150.";
        }

        if ($this->container['entity_type'] === null) {
            $invalid_properties[] = "'entity_type' can't be null";
        }
        if ($this->container['federal_tax_regime'] === null) {
            $invalid_properties[] = "'federal_tax_regime' can't be null";
        }
        $allowed_values = ["TAXABLE", "NOT TAXABLE", "EXEMPT"];
        if (!in_array($this->container['pis_subject_to'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'pis_subject_to', must be one of #{allowed_values}.";
        }

        $allowed_values = ["TAXABLE", "NOT TAXABLE", "EXEMPT"];
        if (!in_array($this->container['cofins_subject_to'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'cofins_subject_to', must be one of #{allowed_values}.";
        }

        $allowed_values = ["TAXABLE", "NOT TAXABLE", "EXEMPT"];
        if (!in_array($this->container['csll_subject_to'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'csll_subject_to', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['code'] === null) {
            return false;
        }
        if (strlen($this->container['code']) > 60) {
            return false;
        }
        if ($this->container['official_name'] === null) {
            return false;
        }
        if (strlen($this->container['official_name']) > 150) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 150) {
            return false;
        }
        if ($this->container['entity_type'] === null) {
            return false;
        }
        if ($this->container['federal_tax_regime'] === null) {
            return false;
        }
        $allowed_values = ["TAXABLE", "NOT TAXABLE", "EXEMPT"];
        if (!in_array($this->container['pis_subject_to'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["TAXABLE", "NOT TAXABLE", "EXEMPT"];
        if (!in_array($this->container['cofins_subject_to'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["TAXABLE", "NOT TAXABLE", "EXEMPT"];
        if (!in_array($this->container['csll_subject_to'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company
     * @return $this
     */
    public function setCode($code)
    {
        if ((strlen($code) > 60)) {
            throw new \InvalidArgumentException('invalid length for $code when calling Company., must be smaller than or equal to 60.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets official_name
     * @return string
     */
    public function getOfficialName()
    {
        return $this->container['official_name'];
    }

    /**
     * Sets official_name
     * @param string $official_name Official Company name (Razão Social)
     * @return $this
     */
    public function setOfficialName($official_name)
    {
        if ((strlen($official_name) > 150)) {
            throw new \InvalidArgumentException('invalid length for $official_name when calling Company., must be smaller than or equal to 150.');
        }

        $this->container['official_name'] = $official_name;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Company name (DBA - Nome de Fantasia),  Used to identify branches/subsidiaries with same name
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 150)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Company., must be smaller than or equal to 150.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets entity_type
     * @return \Swagger\Client\Model\EntityType
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     * @param \Swagger\Client\Model\EntityType $entity_type
     * @return $this
     */
    public function setEntityType($entity_type)
    {
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets subject_to_srf1234
     * @return bool
     */
    public function getSubjectToSrf1234()
    {
        return $this->container['subject_to_srf1234'];
    }

    /**
     * Sets subject_to_srf1234
     * @param bool $subject_to_srf1234 Company has participation of state-owned capital (it will be considerated like a government entity)
     * @return $this
     */
    public function setSubjectToSrf1234($subject_to_srf1234)
    {
        $this->container['subject_to_srf1234'] = $subject_to_srf1234;

        return $this;
    }

    /**
     * Gets federal_tax_regime
     * @return \Swagger\Client\Model\FederalTaxRegime
     */
    public function getFederalTaxRegime()
    {
        return $this->container['federal_tax_regime'];
    }

    /**
     * Sets federal_tax_regime
     * @param \Swagger\Client\Model\FederalTaxRegime $federal_tax_regime
     * @return $this
     */
    public function setFederalTaxRegime($federal_tax_regime)
    {
        $this->container['federal_tax_regime'] = $federal_tax_regime;

        return $this;
    }

    /**
     * Gets pis_subject_to
     * @return string
     */
    public function getPisSubjectTo()
    {
        return $this->container['pis_subject_to'];
    }

    /**
     * Sets pis_subject_to
     * @param string $pis_subject_to this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules.
     * @return $this
     */
    public function setPisSubjectTo($pis_subject_to)
    {
        $allowed_values = array('TAXABLE', 'NOT TAXABLE', 'EXEMPT');
        if (!is_null($pis_subject_to) && (!in_array($pis_subject_to, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'pis_subject_to', must be one of 'TAXABLE', 'NOT TAXABLE', 'EXEMPT'");
        }
        $this->container['pis_subject_to'] = $pis_subject_to;

        return $this;
    }

    /**
     * Gets cofins_subject_to
     * @return string
     */
    public function getCofinsSubjectTo()
    {
        return $this->container['cofins_subject_to'];
    }

    /**
     * Sets cofins_subject_to
     * @param string $cofins_subject_to this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules.
     * @return $this
     */
    public function setCofinsSubjectTo($cofins_subject_to)
    {
        $allowed_values = array('TAXABLE', 'NOT TAXABLE', 'EXEMPT');
        if (!is_null($cofins_subject_to) && (!in_array($cofins_subject_to, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'cofins_subject_to', must be one of 'TAXABLE', 'NOT TAXABLE', 'EXEMPT'");
        }
        $this->container['cofins_subject_to'] = $cofins_subject_to;

        return $this;
    }

    /**
     * Gets csll_subject_to
     * @return string
     */
    public function getCsllSubjectTo()
    {
        return $this->container['csll_subject_to'];
    }

    /**
     * Sets csll_subject_to
     * @param string $csll_subject_to this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules.
     * @return $this
     */
    public function setCsllSubjectTo($csll_subject_to)
    {
        $allowed_values = array('TAXABLE', 'NOT TAXABLE', 'EXEMPT');
        if (!is_null($csll_subject_to) && (!in_array($csll_subject_to, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'csll_subject_to', must be one of 'TAXABLE', 'NOT TAXABLE', 'EXEMPT'");
        }
        $this->container['csll_subject_to'] = $csll_subject_to;

        return $this;
    }

    /**
     * Gets receipts_are_full_no_cumulative_pis_cofins
     * @return bool
     */
    public function getReceiptsAreFullNoCumulativePisCofins()
    {
        return $this->container['receipts_are_full_no_cumulative_pis_cofins'];
    }

    /**
     * Sets receipts_are_full_no_cumulative_pis_cofins
     * @param bool $receipts_are_full_no_cumulative_pis_cofins When th company is REAL PROFIT usually it operates under a Non-Cumulative PIS/COFINS regime But exist some services that are always Cumulative regime. If the company has all receipts from Non-Cumulative services this flag will be set to True. This flag informs special conditions to credit of PIS/COFINS when this company is out of Free zone and  purchases from Free Zone Company Quando uma empresa fora da Zona Franca adquire uma produto ou serviço de uma empresa situada na Zona Franca de Manaus, o crédito de PIS E COFINS segue estas aliquotas diferenciadas. Fundamentação, art. 5º da Instrução Normativa SRF nº 546/2005; art. 3º, § 12 da Lei nº 10.637/2002; art. 3º, § 17 da Lei nº 10.833/2003; art. 4º da Lei nº 11.307/2006. DESTINATÁRIO ALÍQUOTAS PIS COFINS a) Venda efetuada a pessoa jurídica estabelecida fora da Zona Franca de Manaus, que apure a Contribuição para o PIS/PASEP no regime de não-cumulatividade débito 0,65% 3% crédito 1% 4,6% c) Venda efetuada a pessoa jurídica estabelecida fora da Zona Franca de Manaus, que apure o imposto de renda com base no lucro real e que tenha sua receita, total ou parcialmente, excluída do regime de incidência não-cumulativa da Contribuição para o PIS/PASEP débito 1,3% 6% crédito 1,65% 7,6%
     * @return $this
     */
    public function setReceiptsAreFullNoCumulativePisCofins($receipts_are_full_no_cumulative_pis_cofins)
    {
        $this->container['receipts_are_full_no_cumulative_pis_cofins'] = $receipts_are_full_no_cumulative_pis_cofins;

        return $this;
    }

    /**
     * Gets inss_withhold_subject_to
     * @return bool
     */
    public function getInssWithholdSubjectTo()
    {
        return $this->container['inss_withhold_subject_to'];
    }

    /**
     * Sets inss_withhold_subject_to
     * @param bool $inss_withhold_subject_to On purchase transaction, to force withholding INSS this Flag can be set to True
     * @return $this
     */
    public function setInssWithholdSubjectTo($inss_withhold_subject_to)
    {
        $this->container['inss_withhold_subject_to'] = $inss_withhold_subject_to;

        return $this;
    }

    /**
     * Gets iss_withhold_subject_to
     * @return bool
     */
    public function getIssWithholdSubjectTo()
    {
        return $this->container['iss_withhold_subject_to'];
    }

    /**
     * Sets iss_withhold_subject_to
     * @param bool $iss_withhold_subject_to On purchase transaction, to force withhold ISS this Flag can be set to True
     * @return $this
     */
    public function setIssWithholdSubjectTo($iss_withhold_subject_to)
    {
        $this->container['iss_withhold_subject_to'] = $iss_withhold_subject_to;

        return $this;
    }

    /**
     * Gets irrf_withhold_subject_to
     * @return bool
     */
    public function getIrrfWithholdSubjectTo()
    {
        return $this->container['irrf_withhold_subject_to'];
    }

    /**
     * Sets irrf_withhold_subject_to
     * @param bool $irrf_withhold_subject_to On purchase transaction, if this flag is FALSE, the system will not withhold IRRF. if this flag is TRUE the system will analise other rules to define if will have witholding
     * @return $this
     */
    public function setIrrfWithholdSubjectTo($irrf_withhold_subject_to)
    {
        $this->container['irrf_withhold_subject_to'] = $irrf_withhold_subject_to;

        return $this;
    }

    /**
     * Gets icms_rate_for_simplestaxregime
     * @return double
     */
    public function getIcmsRateForSimplestaxregime()
    {
        return $this->container['icms_rate_for_simplestaxregime'];
    }

    /**
     * Sets icms_rate_for_simplestaxregime
     * @param double $icms_rate_for_simplestaxregime Actual ICMS Rate for this company (if the company is Tax Regime Simplified). Aliquota de ICMS da companhia caso Optante do Simples
     * @return $this
     */
    public function setIcmsRateForSimplestaxregime($icms_rate_for_simplestaxregime)
    {
        $this->container['icms_rate_for_simplestaxregime'] = $icms_rate_for_simplestaxregime;

        return $this;
    }

    /**
     * Gets is_exempt_by_gross_revenue_for_simplestaxregime
     * @return bool
     */
    public function getIsExemptByGrossRevenueForSimplestaxregime()
    {
        return $this->container['is_exempt_by_gross_revenue_for_simplestaxregime'];
    }

    /**
     * Sets is_exempt_by_gross_revenue_for_simplestaxregime
     * @param bool $is_exempt_by_gross_revenue_for_simplestaxregime ICMS Exempt when Tax Regime is Simplified because total gross revenue is bellow amount defined by state (see PARANÁ State) Isenção do ICMS no Simples Nacional para faixa de receita bruta
     * @return $this
     */
    public function setIsExemptByGrossRevenueForSimplestaxregime($is_exempt_by_gross_revenue_for_simplestaxregime)
    {
        $this->container['is_exempt_by_gross_revenue_for_simplestaxregime'] = $is_exempt_by_gross_revenue_for_simplestaxregime;

        return $this;
    }

    /**
     * Gets configuration
     * @return \Swagger\Client\Model\CompanyConfiguration
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     * @param \Swagger\Client\Model\CompanyConfiguration $configuration
     * @return $this
     */
    public function setConfiguration($configuration)
    {
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets mail_server
     * @return \Swagger\Client\Model\CompanyMailServer
     */
    public function getMailServer()
    {
        return $this->container['mail_server'];
    }

    /**
     * Sets mail_server
     * @param \Swagger\Client\Model\CompanyMailServer $mail_server
     * @return $this
     */
    public function setMailServer($mail_server)
    {
        $this->container['mail_server'] = $mail_server;

        return $this;
    }

    /**
     * Gets authorized_to_download_n_fe
     * @return \Swagger\Client\Model\CompanyAuthorizedToDownloadNFe[]
     */
    public function getAuthorizedToDownloadNFe()
    {
        return $this->container['authorized_to_download_n_fe'];
    }

    /**
     * Sets authorized_to_download_n_fe
     * @param \Swagger\Client\Model\CompanyAuthorizedToDownloadNFe[] $authorized_to_download_n_fe Person or company authorized to downloadNFe
     * @return $this
     */
    public function setAuthorizedToDownloadNFe($authorized_to_download_n_fe)
    {
        $this->container['authorized_to_download_n_fe'] = $authorized_to_download_n_fe;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


