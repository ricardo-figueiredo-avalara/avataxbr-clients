<?php
/**
 * CompanyConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CompanyConfiguration Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CompanyConfiguration implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Company_configuration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'certificate' => 'string',
        'certificatepwd' => 'string',
        'certificateexpiration' => '\DateTime',
        'logo' => 'string',
        'tp_imp_n_fe' => 'string',
        'tp_imp_nf_ce' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'certificate' => 'certificate',
        'certificatepwd' => 'certificatepwd',
        'certificateexpiration' => 'certificateexpiration',
        'logo' => 'logo',
        'tp_imp_n_fe' => 'tpImpNFe',
        'tp_imp_nf_ce' => 'tpImpNFCe'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'certificate' => 'setCertificate',
        'certificatepwd' => 'setCertificatepwd',
        'certificateexpiration' => 'setCertificateexpiration',
        'logo' => 'setLogo',
        'tp_imp_n_fe' => 'setTpImpNFe',
        'tp_imp_nf_ce' => 'setTpImpNfCe'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'certificate' => 'getCertificate',
        'certificatepwd' => 'getCertificatepwd',
        'certificateexpiration' => 'getCertificateexpiration',
        'logo' => 'getLogo',
        'tp_imp_n_fe' => 'getTpImpNFe',
        'tp_imp_nf_ce' => 'getTpImpNfCe'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TP_IMP_N_FE__0 = '0';
    const TP_IMP_N_FE__1 = '1';
    const TP_IMP_N_FE__2 = '2';
    const TP_IMP_NF_CE__0 = '0';
    const TP_IMP_NF_CE__4 = '4';
    const TP_IMP_NF_CE__5 = '5';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTpImpNFeAllowableValues()
    {
        return [
            self::TP_IMP_N_FE__0,
            self::TP_IMP_N_FE__1,
            self::TP_IMP_N_FE__2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTpImpNfCeAllowableValues()
    {
        return [
            self::TP_IMP_NF_CE__0,
            self::TP_IMP_NF_CE__4,
            self::TP_IMP_NF_CE__5,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['certificate'] = isset($data['certificate']) ? $data['certificate'] : null;
        $this->container['certificatepwd'] = isset($data['certificatepwd']) ? $data['certificatepwd'] : null;
        $this->container['certificateexpiration'] = isset($data['certificateexpiration']) ? $data['certificateexpiration'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['tp_imp_n_fe'] = isset($data['tp_imp_n_fe']) ? $data['tp_imp_n_fe'] : null;
        $this->container['tp_imp_nf_ce'] = isset($data['tp_imp_nf_ce']) ? $data['tp_imp_nf_ce'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["0", "1", "2"];
        if (!in_array($this->container['tp_imp_n_fe'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'tp_imp_n_fe', must be one of #{allowed_values}.";
        }

        $allowed_values = ["0", "4", "5"];
        if (!in_array($this->container['tp_imp_nf_ce'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'tp_imp_nf_ce', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["0", "1", "2"];
        if (!in_array($this->container['tp_imp_n_fe'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["0", "4", "5"];
        if (!in_array($this->container['tp_imp_nf_ce'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets certificate
     * @return string
     */
    public function getCertificate()
    {
        return $this->container['certificate'];
    }

    /**
     * Sets certificate
     * @param string $certificate digital certificate A1 model, p12, encoded by base64
     * @return $this
     */
    public function setCertificate($certificate)
    {
        $this->container['certificate'] = $certificate;

        return $this;
    }

    /**
     * Gets certificatepwd
     * @return string
     */
    public function getCertificatepwd()
    {
        return $this->container['certificatepwd'];
    }

    /**
     * Sets certificatepwd
     * @param string $certificatepwd certificate password
     * @return $this
     */
    public function setCertificatepwd($certificatepwd)
    {
        $this->container['certificatepwd'] = $certificatepwd;

        return $this;
    }

    /**
     * Gets certificateexpiration
     * @return \DateTime
     */
    public function getCertificateexpiration()
    {
        return $this->container['certificateexpiration'];
    }

    /**
     * Sets certificateexpiration
     * @param \DateTime $certificateexpiration expiration date of this certificate
     * @return $this
     */
    public function setCertificateexpiration($certificateexpiration)
    {
        $this->container['certificateexpiration'] = $certificateexpiration;

        return $this;
    }

    /**
     * Gets logo
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     * @param string $logo company logo image encoded by base64
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets tp_imp_n_fe
     * @return string
     */
    public function getTpImpNFe()
    {
        return $this->container['tp_imp_n_fe'];
    }

    /**
     * Sets tp_imp_n_fe
     * @param string $tp_imp_n_fe how the document will be printed - '0' # without DANFE; - '1' # DANFe Letter; - '2' # DANFe Landscape;
     * @return $this
     */
    public function setTpImpNFe($tp_imp_n_fe)
    {
        $allowed_values = array('0', '1', '2');
        if (!is_null($tp_imp_n_fe) && (!in_array($tp_imp_n_fe, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'tp_imp_n_fe', must be one of '0', '1', '2'");
        }
        $this->container['tp_imp_n_fe'] = $tp_imp_n_fe;

        return $this;
    }

    /**
     * Gets tp_imp_nf_ce
     * @return string
     */
    public function getTpImpNfCe()
    {
        return $this->container['tp_imp_nf_ce'];
    }

    /**
     * Sets tp_imp_nf_ce
     * @param string $tp_imp_nf_ce how the document will be printed - '0' # without DANFE; - '4' # DANFe NFC-e; - '5' # DANFe NFC-e e-mail
     * @return $this
     */
    public function setTpImpNfCe($tp_imp_nf_ce)
    {
        $allowed_values = array('0', '4', '5');
        if (!is_null($tp_imp_nf_ce) && (!in_array($tp_imp_nf_ce, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'tp_imp_nf_ce', must be one of '0', '4', '5'");
        }
        $this->container['tp_imp_nf_ce'] = $tp_imp_nf_ce;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


