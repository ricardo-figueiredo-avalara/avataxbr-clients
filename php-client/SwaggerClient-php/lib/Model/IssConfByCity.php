<?php
/**
 * IssConfByCity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * IssConfByCity Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class IssConfByCity implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'IssConfByCity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'city_code' => 'int',
        'name' => 'string',
        'state' => '\Swagger\Client\Model\StateEnum',
        'iss_wh_dest_other_cities' => 'bool',
        'iss_wh_dest_same_city' => 'bool',
        'iss_wh_origin_unreg_seller' => 'bool',
        'service_list' => '\Swagger\Client\Model\IssConfServiceList[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'city_code' => 'cityCode',
        'name' => 'name',
        'state' => 'state',
        'iss_wh_dest_other_cities' => 'issWhDestOtherCities',
        'iss_wh_dest_same_city' => 'issWhDestSameCity',
        'iss_wh_origin_unreg_seller' => 'issWhOriginUnregSeller',
        'service_list' => 'serviceList'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'city_code' => 'setCityCode',
        'name' => 'setName',
        'state' => 'setState',
        'iss_wh_dest_other_cities' => 'setIssWhDestOtherCities',
        'iss_wh_dest_same_city' => 'setIssWhDestSameCity',
        'iss_wh_origin_unreg_seller' => 'setIssWhOriginUnregSeller',
        'service_list' => 'setServiceList'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'city_code' => 'getCityCode',
        'name' => 'getName',
        'state' => 'getState',
        'iss_wh_dest_other_cities' => 'getIssWhDestOtherCities',
        'iss_wh_dest_same_city' => 'getIssWhDestSameCity',
        'iss_wh_origin_unreg_seller' => 'getIssWhOriginUnregSeller',
        'service_list' => 'getServiceList'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['city_code'] = isset($data['city_code']) ? $data['city_code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['iss_wh_dest_other_cities'] = isset($data['iss_wh_dest_other_cities']) ? $data['iss_wh_dest_other_cities'] : null;
        $this->container['iss_wh_dest_same_city'] = isset($data['iss_wh_dest_same_city']) ? $data['iss_wh_dest_same_city'] : null;
        $this->container['iss_wh_origin_unreg_seller'] = isset($data['iss_wh_origin_unreg_seller']) ? $data['iss_wh_origin_unreg_seller'] : null;
        $this->container['service_list'] = isset($data['service_list']) ? $data['service_list'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['city_code'] === null) {
            $invalid_properties[] = "'city_code' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['city_code'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets city_code
     * @return int
     */
    public function getCityCode()
    {
        return $this->container['city_code'];
    }

    /**
     * Sets city_code
     * @param int $city_code City Code (IBGE)
     * @return $this
     */
    public function setCityCode($city_code)
    {
        $this->container['city_code'] = $city_code;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets state
     * @return \Swagger\Client\Model\StateEnum
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param \Swagger\Client\Model\StateEnum $state
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets iss_wh_dest_other_cities
     * @return bool
     */
    public function getIssWhDestOtherCities()
    {
        return $this->container['iss_wh_dest_other_cities'];
    }

    /**
     * Sets iss_wh_dest_other_cities
     * @param bool $iss_wh_dest_other_cities
     * @return $this
     */
    public function setIssWhDestOtherCities($iss_wh_dest_other_cities)
    {
        $this->container['iss_wh_dest_other_cities'] = $iss_wh_dest_other_cities;

        return $this;
    }

    /**
     * Gets iss_wh_dest_same_city
     * @return bool
     */
    public function getIssWhDestSameCity()
    {
        return $this->container['iss_wh_dest_same_city'];
    }

    /**
     * Sets iss_wh_dest_same_city
     * @param bool $iss_wh_dest_same_city
     * @return $this
     */
    public function setIssWhDestSameCity($iss_wh_dest_same_city)
    {
        $this->container['iss_wh_dest_same_city'] = $iss_wh_dest_same_city;

        return $this;
    }

    /**
     * Gets iss_wh_origin_unreg_seller
     * @return bool
     */
    public function getIssWhOriginUnregSeller()
    {
        return $this->container['iss_wh_origin_unreg_seller'];
    }

    /**
     * Sets iss_wh_origin_unreg_seller
     * @param bool $iss_wh_origin_unreg_seller
     * @return $this
     */
    public function setIssWhOriginUnregSeller($iss_wh_origin_unreg_seller)
    {
        $this->container['iss_wh_origin_unreg_seller'] = $iss_wh_origin_unreg_seller;

        return $this;
    }

    /**
     * Gets service_list
     * @return \Swagger\Client\Model\IssConfServiceList[]
     */
    public function getServiceList()
    {
        return $this->container['service_list'];
    }

    /**
     * Sets service_list
     * @param \Swagger\Client\Model\IssConfServiceList[] $service_list
     * @return $this
     */
    public function setServiceList($service_list)
    {
        $this->container['service_list'] = $service_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


