<?php
/**
 * FuelCide
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * FuelCide Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FuelCide implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Fuel_cide';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'base_calc_cide' => 'double',
        'rate_cide' => 'double',
        'value_cide' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'base_calc_cide' => 'baseCalcCIDE',
        'rate_cide' => 'rateCIDE',
        'value_cide' => 'valueCIDE'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'base_calc_cide' => 'setBaseCalcCide',
        'rate_cide' => 'setRateCide',
        'value_cide' => 'setValueCide'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'base_calc_cide' => 'getBaseCalcCide',
        'rate_cide' => 'getRateCide',
        'value_cide' => 'getValueCide'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['base_calc_cide'] = isset($data['base_calc_cide']) ? $data['base_calc_cide'] : null;
        $this->container['rate_cide'] = isset($data['rate_cide']) ? $data['rate_cide'] : null;
        $this->container['value_cide'] = isset($data['value_cide']) ? $data['value_cide'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['base_calc_cide'] === null) {
            $invalid_properties[] = "'base_calc_cide' can't be null";
        }
        if ($this->container['rate_cide'] === null) {
            $invalid_properties[] = "'rate_cide' can't be null";
        }
        if ($this->container['value_cide'] === null) {
            $invalid_properties[] = "'value_cide' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['base_calc_cide'] === null) {
            return false;
        }
        if ($this->container['rate_cide'] === null) {
            return false;
        }
        if ($this->container['value_cide'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets base_calc_cide
     * @return double
     */
    public function getBaseCalcCide()
    {
        return $this->container['base_calc_cide'];
    }

    /**
     * Sets base_calc_cide
     * @param double $base_calc_cide percentage of natural gas (GLP), this decimal 12 integers and 0 to 4 decimals
     * @return $this
     */
    public function setBaseCalcCide($base_calc_cide)
    {
        $this->container['base_calc_cide'] = $base_calc_cide;

        return $this;
    }

    /**
     * Gets rate_cide
     * @return double
     */
    public function getRateCide()
    {
        return $this->container['rate_cide'];
    }

    /**
     * Sets rate_cide
     * @param double $rate_cide percentage of natural gas (GLP), this decimal 11 integers and 0 to 4 decimals - R$
     * @return $this
     */
    public function setRateCide($rate_cide)
    {
        $this->container['rate_cide'] = $rate_cide;

        return $this;
    }

    /**
     * Gets value_cide
     * @return double
     */
    public function getValueCide()
    {
        return $this->container['value_cide'];
    }

    /**
     * Sets value_cide
     * @param double $value_cide percentage of natural gas (GLP), this decimal 13 integers and 2 decimals - R$
     * @return $this
     */
    public function setValueCide($value_cide)
    {
        $this->container['value_cide'] = $value_cide;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


