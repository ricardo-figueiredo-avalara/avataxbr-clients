<?php
/**
 * AgastWithholding
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * AgastWithholding Class Doc Comment
 *
 * @category    Class */
 // @description inform if this item is subject to withholding tax on service Transactions, default true
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AgastWithholding implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Agast_withholding';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'irrf' => 'bool',
        'irrf_legal_reason' => 'string',
        'inss_subject_to_discharge' => 'bool',
        'inss' => 'bool',
        'inss_legal_reason' => 'string',
        'in_ss_for_simples' => 'bool',
        'inss_for_simples_legal_reason' => 'string',
        'pis' => '\Swagger\Client\Model\AgastWithholdingPIS',
        'cofins' => '\Swagger\Client\Model\AgastWithholdingCOFINS',
        'csll' => '\Swagger\Client\Model\AgastWithholdingCSLL'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'irrf' => 'IRRF',
        'irrf_legal_reason' => 'IRRFLegalReason',
        'inss_subject_to_discharge' => 'INSSSubjectToDischarge',
        'inss' => 'INSS',
        'inss_legal_reason' => 'INSSLegalReason',
        'in_ss_for_simples' => 'INSsForSimples',
        'inss_for_simples_legal_reason' => 'INSSForSimplesLegalReason',
        'pis' => 'PIS',
        'cofins' => 'COFINS',
        'csll' => 'CSLL'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'irrf' => 'setIrrf',
        'irrf_legal_reason' => 'setIrrfLegalReason',
        'inss_subject_to_discharge' => 'setInssSubjectToDischarge',
        'inss' => 'setInss',
        'inss_legal_reason' => 'setInssLegalReason',
        'in_ss_for_simples' => 'setInSsForSimples',
        'inss_for_simples_legal_reason' => 'setInssForSimplesLegalReason',
        'pis' => 'setPis',
        'cofins' => 'setCofins',
        'csll' => 'setCsll'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'irrf' => 'getIrrf',
        'irrf_legal_reason' => 'getIrrfLegalReason',
        'inss_subject_to_discharge' => 'getInssSubjectToDischarge',
        'inss' => 'getInss',
        'inss_legal_reason' => 'getInssLegalReason',
        'in_ss_for_simples' => 'getInSsForSimples',
        'inss_for_simples_legal_reason' => 'getInssForSimplesLegalReason',
        'pis' => 'getPis',
        'cofins' => 'getCofins',
        'csll' => 'getCsll'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['irrf'] = isset($data['irrf']) ? $data['irrf'] : null;
        $this->container['irrf_legal_reason'] = isset($data['irrf_legal_reason']) ? $data['irrf_legal_reason'] : null;
        $this->container['inss_subject_to_discharge'] = isset($data['inss_subject_to_discharge']) ? $data['inss_subject_to_discharge'] : null;
        $this->container['inss'] = isset($data['inss']) ? $data['inss'] : null;
        $this->container['inss_legal_reason'] = isset($data['inss_legal_reason']) ? $data['inss_legal_reason'] : null;
        $this->container['in_ss_for_simples'] = isset($data['in_ss_for_simples']) ? $data['in_ss_for_simples'] : null;
        $this->container['inss_for_simples_legal_reason'] = isset($data['inss_for_simples_legal_reason']) ? $data['inss_for_simples_legal_reason'] : null;
        $this->container['pis'] = isset($data['pis']) ? $data['pis'] : null;
        $this->container['cofins'] = isset($data['cofins']) ? $data['cofins'] : null;
        $this->container['csll'] = isset($data['csll']) ? $data['csll'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['irrf_legal_reason']) && (strlen($this->container['irrf_legal_reason']) > 60)) {
            $invalid_properties[] = "invalid value for 'irrf_legal_reason', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['inss_legal_reason']) && (strlen($this->container['inss_legal_reason']) > 60)) {
            $invalid_properties[] = "invalid value for 'inss_legal_reason', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['inss_for_simples_legal_reason']) && (strlen($this->container['inss_for_simples_legal_reason']) > 60)) {
            $invalid_properties[] = "invalid value for 'inss_for_simples_legal_reason', the character length must be smaller than or equal to 60.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['irrf_legal_reason']) > 60) {
            return false;
        }
        if (strlen($this->container['inss_legal_reason']) > 60) {
            return false;
        }
        if (strlen($this->container['inss_for_simples_legal_reason']) > 60) {
            return false;
        }
        return true;
    }


    /**
     * Gets irrf
     * @return bool
     */
    public function getIrrf()
    {
        return $this->container['irrf'];
    }

    /**
     * Sets irrf
     * @param bool $irrf
     * @return $this
     */
    public function setIrrf($irrf)
    {
        $this->container['irrf'] = $irrf;

        return $this;
    }

    /**
     * Gets irrf_legal_reason
     * @return string
     */
    public function getIrrfLegalReason()
    {
        return $this->container['irrf_legal_reason'];
    }

    /**
     * Sets irrf_legal_reason
     * @param string $irrf_legal_reason reference id to TaxLegalReason
     * @return $this
     */
    public function setIrrfLegalReason($irrf_legal_reason)
    {
        if (!is_null($irrf_legal_reason) && (strlen($irrf_legal_reason) > 60)) {
            throw new \InvalidArgumentException('invalid length for $irrf_legal_reason when calling AgastWithholding., must be smaller than or equal to 60.');
        }

        $this->container['irrf_legal_reason'] = $irrf_legal_reason;

        return $this;
    }

    /**
     * Gets inss_subject_to_discharge
     * @return bool
     */
    public function getInssSubjectToDischarge()
    {
        return $this->container['inss_subject_to_discharge'];
    }

    /**
     * Sets inss_subject_to_discharge
     * @param bool $inss_subject_to_discharge Item subjecto to payroll discharge Item sujeto à desoneraçãode folha de pagamento
     * @return $this
     */
    public function setInssSubjectToDischarge($inss_subject_to_discharge)
    {
        $this->container['inss_subject_to_discharge'] = $inss_subject_to_discharge;

        return $this;
    }

    /**
     * Gets inss
     * @return bool
     */
    public function getInss()
    {
        return $this->container['inss'];
    }

    /**
     * Sets inss
     * @param bool $inss
     * @return $this
     */
    public function setInss($inss)
    {
        $this->container['inss'] = $inss;

        return $this;
    }

    /**
     * Gets inss_legal_reason
     * @return string
     */
    public function getInssLegalReason()
    {
        return $this->container['inss_legal_reason'];
    }

    /**
     * Sets inss_legal_reason
     * @param string $inss_legal_reason reference id to TaxLegalReason
     * @return $this
     */
    public function setInssLegalReason($inss_legal_reason)
    {
        if (!is_null($inss_legal_reason) && (strlen($inss_legal_reason) > 60)) {
            throw new \InvalidArgumentException('invalid length for $inss_legal_reason when calling AgastWithholding., must be smaller than or equal to 60.');
        }

        $this->container['inss_legal_reason'] = $inss_legal_reason;

        return $this;
    }

    /**
     * Gets in_ss_for_simples
     * @return bool
     */
    public function getInSsForSimples()
    {
        return $this->container['in_ss_for_simples'];
    }

    /**
     * Sets in_ss_for_simples
     * @param bool $in_ss_for_simples
     * @return $this
     */
    public function setInSsForSimples($in_ss_for_simples)
    {
        $this->container['in_ss_for_simples'] = $in_ss_for_simples;

        return $this;
    }

    /**
     * Gets inss_for_simples_legal_reason
     * @return string
     */
    public function getInssForSimplesLegalReason()
    {
        return $this->container['inss_for_simples_legal_reason'];
    }

    /**
     * Sets inss_for_simples_legal_reason
     * @param string $inss_for_simples_legal_reason reference id to TaxLegalReason
     * @return $this
     */
    public function setInssForSimplesLegalReason($inss_for_simples_legal_reason)
    {
        if (!is_null($inss_for_simples_legal_reason) && (strlen($inss_for_simples_legal_reason) > 60)) {
            throw new \InvalidArgumentException('invalid length for $inss_for_simples_legal_reason when calling AgastWithholding., must be smaller than or equal to 60.');
        }

        $this->container['inss_for_simples_legal_reason'] = $inss_for_simples_legal_reason;

        return $this;
    }

    /**
     * Gets pis
     * @return \Swagger\Client\Model\AgastWithholdingPIS
     */
    public function getPis()
    {
        return $this->container['pis'];
    }

    /**
     * Sets pis
     * @param \Swagger\Client\Model\AgastWithholdingPIS $pis
     * @return $this
     */
    public function setPis($pis)
    {
        $this->container['pis'] = $pis;

        return $this;
    }

    /**
     * Gets cofins
     * @return \Swagger\Client\Model\AgastWithholdingCOFINS
     */
    public function getCofins()
    {
        return $this->container['cofins'];
    }

    /**
     * Sets cofins
     * @param \Swagger\Client\Model\AgastWithholdingCOFINS $cofins
     * @return $this
     */
    public function setCofins($cofins)
    {
        $this->container['cofins'] = $cofins;

        return $this;
    }

    /**
     * Gets csll
     * @return \Swagger\Client\Model\AgastWithholdingCSLL
     */
    public function getCsll()
    {
        return $this->container['csll'];
    }

    /**
     * Sets csll
     * @param \Swagger\Client\Model\AgastWithholdingCSLL $csll
     * @return $this
     */
    public function setCsll($csll)
    {
        $this->container['csll'] = $csll;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


