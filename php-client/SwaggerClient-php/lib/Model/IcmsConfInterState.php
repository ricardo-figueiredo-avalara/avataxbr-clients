<?php
/**
 * IcmsConfInterState
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * IcmsConfInterState Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class IcmsConfInterState implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'IcmsConfInterState';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'state' => '\Swagger\Client\Model\StateEnum',
        'calc_mode' => 'string',
        'discount_rate_for_mono_phase' => 'double',
        'rate' => 'double',
        'fcp_rate' => 'double',
        'icms_base_discount' => 'double',
        'msrp' => 'double',
        'mva_rate' => 'double',
        'msrp_unit' => 'string',
        'icms_legal_reason' => 'string',
        'icms_st_conf' => '\Swagger\Client\Model\IcmsConfInterStateIcmsSTConf'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'state' => 'state',
        'calc_mode' => 'calcMode',
        'discount_rate_for_mono_phase' => 'discountRateForMonoPhase',
        'rate' => 'rate',
        'fcp_rate' => 'fcpRate',
        'icms_base_discount' => 'icmsBaseDiscount',
        'msrp' => 'msrp',
        'mva_rate' => 'mvaRate',
        'msrp_unit' => 'msrpUnit',
        'icms_legal_reason' => 'icmsLegalReason',
        'icms_st_conf' => 'icmsSTConf'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'state' => 'setState',
        'calc_mode' => 'setCalcMode',
        'discount_rate_for_mono_phase' => 'setDiscountRateForMonoPhase',
        'rate' => 'setRate',
        'fcp_rate' => 'setFcpRate',
        'icms_base_discount' => 'setIcmsBaseDiscount',
        'msrp' => 'setMsrp',
        'mva_rate' => 'setMvaRate',
        'msrp_unit' => 'setMsrpUnit',
        'icms_legal_reason' => 'setIcmsLegalReason',
        'icms_st_conf' => 'setIcmsStConf'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'state' => 'getState',
        'calc_mode' => 'getCalcMode',
        'discount_rate_for_mono_phase' => 'getDiscountRateForMonoPhase',
        'rate' => 'getRate',
        'fcp_rate' => 'getFcpRate',
        'icms_base_discount' => 'getIcmsBaseDiscount',
        'msrp' => 'getMsrp',
        'mva_rate' => 'getMvaRate',
        'msrp_unit' => 'getMsrpUnit',
        'icms_legal_reason' => 'getIcmsLegalReason',
        'icms_st_conf' => 'getIcmsStConf'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CALC_MODE_BYMVARATE = 'BYMVARATE';
    const CALC_MODE_SRP = 'SRP';
    const CALC_MODE_MMSRP = 'MMSRP';
    const CALC_MODE_OPERATIONAMOUNT = 'OPERATIONAMOUNT';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCalcModeAllowableValues()
    {
        return [
            self::CALC_MODE_BYMVARATE,
            self::CALC_MODE_SRP,
            self::CALC_MODE_MMSRP,
            self::CALC_MODE_OPERATIONAMOUNT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['calc_mode'] = isset($data['calc_mode']) ? $data['calc_mode'] : null;
        $this->container['discount_rate_for_mono_phase'] = isset($data['discount_rate_for_mono_phase']) ? $data['discount_rate_for_mono_phase'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['fcp_rate'] = isset($data['fcp_rate']) ? $data['fcp_rate'] : null;
        $this->container['icms_base_discount'] = isset($data['icms_base_discount']) ? $data['icms_base_discount'] : null;
        $this->container['msrp'] = isset($data['msrp']) ? $data['msrp'] : null;
        $this->container['mva_rate'] = isset($data['mva_rate']) ? $data['mva_rate'] : null;
        $this->container['msrp_unit'] = isset($data['msrp_unit']) ? $data['msrp_unit'] : null;
        $this->container['icms_legal_reason'] = isset($data['icms_legal_reason']) ? $data['icms_legal_reason'] : null;
        $this->container['icms_st_conf'] = isset($data['icms_st_conf']) ? $data['icms_st_conf'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["BYMVARATE", "SRP", "MMSRP", "OPERATIONAMOUNT"];
        if (!in_array($this->container['calc_mode'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'calc_mode', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['msrp_unit']) && (strlen($this->container['msrp_unit']) > 6)) {
            $invalid_properties[] = "invalid value for 'msrp_unit', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['icms_legal_reason']) && (strlen($this->container['icms_legal_reason']) > 60)) {
            $invalid_properties[] = "invalid value for 'icms_legal_reason', the character length must be smaller than or equal to 60.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["BYMVARATE", "SRP", "MMSRP", "OPERATIONAMOUNT"];
        if (!in_array($this->container['calc_mode'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['msrp_unit']) > 6) {
            return false;
        }
        if (strlen($this->container['icms_legal_reason']) > 60) {
            return false;
        }
        return true;
    }


    /**
     * Gets state
     * @return \Swagger\Client\Model\StateEnum
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param \Swagger\Client\Model\StateEnum $state
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets calc_mode
     * @return string
     */
    public function getCalcMode()
    {
        return $this->container['calc_mode'];
    }

    /**
     * Sets calc_mode
     * @param string $calc_mode how this ICMS will be calculed for itens linked to this configuration
     * @return $this
     */
    public function setCalcMode($calc_mode)
    {
        $allowed_values = array('BYMVARATE', 'SRP', 'MMSRP', 'OPERATIONAMOUNT');
        if (!is_null($calc_mode) && (!in_array($calc_mode, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'calc_mode', must be one of 'BYMVARATE', 'SRP', 'MMSRP', 'OPERATIONAMOUNT'");
        }
        $this->container['calc_mode'] = $calc_mode;

        return $this;
    }

    /**
     * Gets discount_rate_for_mono_phase
     * @return double
     */
    public function getDiscountRateForMonoPhase()
    {
        return $this->container['discount_rate_for_mono_phase'];
    }

    /**
     * Sets discount_rate_for_mono_phase
     * @param double $discount_rate_for_mono_phase discount if the item is subject to monophase PIS/COFINS when operation interstate
     * @return $this
     */
    public function setDiscountRateForMonoPhase($discount_rate_for_mono_phase)
    {
        $this->container['discount_rate_for_mono_phase'] = $discount_rate_for_mono_phase;

        return $this;
    }

    /**
     * Gets rate
     * @return double
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     * @param double $rate ICMS rate
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets fcp_rate
     * @return double
     */
    public function getFcpRate()
    {
        return $this->container['fcp_rate'];
    }

    /**
     * Sets fcp_rate
     * @param double $fcp_rate FCP rate (Fundo de Combate à Probreza / Fund Against Poverty
     * @return $this
     */
    public function setFcpRate($fcp_rate)
    {
        $this->container['fcp_rate'] = $fcp_rate;

        return $this;
    }

    /**
     * Gets icms_base_discount
     * @return double
     */
    public function getIcmsBaseDiscount()
    {
        return $this->container['icms_base_discount'];
    }

    /**
     * Sets icms_base_discount
     * @param double $icms_base_discount ICMS rate
     * @return $this
     */
    public function setIcmsBaseDiscount($icms_base_discount)
    {
        $this->container['icms_base_discount'] = $icms_base_discount;

        return $this;
    }

    /**
     * Gets msrp
     * @return double
     */
    public function getMsrp()
    {
        return $this->container['msrp'];
    }

    /**
     * Sets msrp
     * @param double $msrp SRP or MMSRP amount base for this icms configuration
     * @return $this
     */
    public function setMsrp($msrp)
    {
        $this->container['msrp'] = $msrp;

        return $this;
    }

    /**
     * Gets mva_rate
     * @return double
     */
    public function getMvaRate()
    {
        return $this->container['mva_rate'];
    }

    /**
     * Sets mva_rate
     * @param double $mva_rate ICMS MVA rate to define calc base
     * @return $this
     */
    public function setMvaRate($mva_rate)
    {
        $this->container['mva_rate'] = $mva_rate;

        return $this;
    }

    /**
     * Gets msrp_unit
     * @return string
     */
    public function getMsrpUnit()
    {
        return $this->container['msrp_unit'];
    }

    /**
     * Sets msrp_unit
     * @param string $msrp_unit unit used to SRP amount value
     * @return $this
     */
    public function setMsrpUnit($msrp_unit)
    {
        if (!is_null($msrp_unit) && (strlen($msrp_unit) > 6)) {
            throw new \InvalidArgumentException('invalid length for $msrp_unit when calling IcmsConfInterState., must be smaller than or equal to 6.');
        }

        $this->container['msrp_unit'] = $msrp_unit;

        return $this;
    }

    /**
     * Gets icms_legal_reason
     * @return string
     */
    public function getIcmsLegalReason()
    {
        return $this->container['icms_legal_reason'];
    }

    /**
     * Sets icms_legal_reason
     * @param string $icms_legal_reason Code for the ICM legal reason, this message will be placed on invoice.
     * @return $this
     */
    public function setIcmsLegalReason($icms_legal_reason)
    {
        if (!is_null($icms_legal_reason) && (strlen($icms_legal_reason) > 60)) {
            throw new \InvalidArgumentException('invalid length for $icms_legal_reason when calling IcmsConfInterState., must be smaller than or equal to 60.');
        }

        $this->container['icms_legal_reason'] = $icms_legal_reason;

        return $this;
    }

    /**
     * Gets icms_st_conf
     * @return \Swagger\Client\Model\IcmsConfInterStateIcmsSTConf
     */
    public function getIcmsStConf()
    {
        return $this->container['icms_st_conf'];
    }

    /**
     * Sets icms_st_conf
     * @param \Swagger\Client\Model\IcmsConfInterStateIcmsSTConf $icms_st_conf
     * @return $this
     */
    public function setIcmsStConf($icms_st_conf)
    {
        $this->container['icms_st_conf'] = $icms_st_conf;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


