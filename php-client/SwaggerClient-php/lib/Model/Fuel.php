<?php
/**
 * Fuel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Fuel Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Fuel implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Fuel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'prod_anp_code' => 'string',
        'per_mix_gn' => 'double',
        'authorization_code_codif' => 'string',
        'quantity_on_room_temperature' => 'double',
        'state_code_of_und_user' => '\Swagger\Client\Model\StateEnum',
        'cide' => '\Swagger\Client\Model\FuelCide',
        'pump_number' => '\Swagger\Client\Model\FuelPumpNumber'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'prod_anp_code' => 'prodANPCode',
        'per_mix_gn' => 'perMixGN',
        'authorization_code_codif' => 'authorizationCodeCODIF',
        'quantity_on_room_temperature' => 'quantityOnRoomTemperature',
        'state_code_of_und_user' => 'stateCodeOfUndUser',
        'cide' => 'cide',
        'pump_number' => 'pumpNumber'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'prod_anp_code' => 'setProdAnpCode',
        'per_mix_gn' => 'setPerMixGn',
        'authorization_code_codif' => 'setAuthorizationCodeCodif',
        'quantity_on_room_temperature' => 'setQuantityOnRoomTemperature',
        'state_code_of_und_user' => 'setStateCodeOfUndUser',
        'cide' => 'setCide',
        'pump_number' => 'setPumpNumber'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'prod_anp_code' => 'getProdAnpCode',
        'per_mix_gn' => 'getPerMixGn',
        'authorization_code_codif' => 'getAuthorizationCodeCodif',
        'quantity_on_room_temperature' => 'getQuantityOnRoomTemperature',
        'state_code_of_und_user' => 'getStateCodeOfUndUser',
        'cide' => 'getCide',
        'pump_number' => 'getPumpNumber'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['prod_anp_code'] = isset($data['prod_anp_code']) ? $data['prod_anp_code'] : null;
        $this->container['per_mix_gn'] = isset($data['per_mix_gn']) ? $data['per_mix_gn'] : null;
        $this->container['authorization_code_codif'] = isset($data['authorization_code_codif']) ? $data['authorization_code_codif'] : null;
        $this->container['quantity_on_room_temperature'] = isset($data['quantity_on_room_temperature']) ? $data['quantity_on_room_temperature'] : null;
        $this->container['state_code_of_und_user'] = isset($data['state_code_of_und_user']) ? $data['state_code_of_und_user'] : null;
        $this->container['cide'] = isset($data['cide']) ? $data['cide'] : null;
        $this->container['pump_number'] = isset($data['pump_number']) ? $data['pump_number'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['prod_anp_code'] === null) {
            $invalid_properties[] = "'prod_anp_code' can't be null";
        }
        if (!preg_match("/[0-9]{9}/", $this->container['prod_anp_code'])) {
            $invalid_properties[] = "invalid value for 'prod_anp_code', must be conform to the pattern /[0-9]{9}/.";
        }

        if (!is_null($this->container['authorization_code_codif']) && !preg_match("/[0-9]{1,21}/", $this->container['authorization_code_codif'])) {
            $invalid_properties[] = "invalid value for 'authorization_code_codif', must be conform to the pattern /[0-9]{1,21}/.";
        }

        if ($this->container['state_code_of_und_user'] === null) {
            $invalid_properties[] = "'state_code_of_und_user' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['prod_anp_code'] === null) {
            return false;
        }
        if (!preg_match("/[0-9]{9}/", $this->container['prod_anp_code'])) {
            return false;
        }
        if (!preg_match("/[0-9]{1,21}/", $this->container['authorization_code_codif'])) {
            return false;
        }
        if ($this->container['state_code_of_und_user'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets prod_anp_code
     * @return string
     */
    public function getProdAnpCode()
    {
        return $this->container['prod_anp_code'];
    }

    /**
     * Sets prod_anp_code
     * @param string $prod_anp_code
     * @return $this
     */
    public function setProdAnpCode($prod_anp_code)
    {

        if ((!preg_match("/[0-9]{9}/", $prod_anp_code))) {
            throw new \InvalidArgumentException("invalid value for $prod_anp_code when calling Fuel., must conform to the pattern /[0-9]{9}/.");
        }

        $this->container['prod_anp_code'] = $prod_anp_code;

        return $this;
    }

    /**
     * Gets per_mix_gn
     * @return double
     */
    public function getPerMixGn()
    {
        return $this->container['per_mix_gn'];
    }

    /**
     * Sets per_mix_gn
     * @param double $per_mix_gn percentage of natural gas (GLP)
     * @return $this
     */
    public function setPerMixGn($per_mix_gn)
    {
        $this->container['per_mix_gn'] = $per_mix_gn;

        return $this;
    }

    /**
     * Gets authorization_code_codif
     * @return string
     */
    public function getAuthorizationCodeCodif()
    {
        return $this->container['authorization_code_codif'];
    }

    /**
     * Sets authorization_code_codif
     * @param string $authorization_code_codif
     * @return $this
     */
    public function setAuthorizationCodeCodif($authorization_code_codif)
    {

        if (!is_null($authorization_code_codif) && (!preg_match("/[0-9]{1,21}/", $authorization_code_codif))) {
            throw new \InvalidArgumentException("invalid value for $authorization_code_codif when calling Fuel., must conform to the pattern /[0-9]{1,21}/.");
        }

        $this->container['authorization_code_codif'] = $authorization_code_codif;

        return $this;
    }

    /**
     * Gets quantity_on_room_temperature
     * @return double
     */
    public function getQuantityOnRoomTemperature()
    {
        return $this->container['quantity_on_room_temperature'];
    }

    /**
     * Sets quantity_on_room_temperature
     * @param double $quantity_on_room_temperature This decimal 12 integers and 0 to 4 decimals Quantidade de combustível faturada à temperatura ambiente. Informar quando a quantidade faturada informada no campo qCom (I10) tiver sido ajustada para uma temperatura diferente da ambiente.
     * @return $this
     */
    public function setQuantityOnRoomTemperature($quantity_on_room_temperature)
    {
        $this->container['quantity_on_room_temperature'] = $quantity_on_room_temperature;

        return $this;
    }

    /**
     * Gets state_code_of_und_user
     * @return \Swagger\Client\Model\StateEnum
     */
    public function getStateCodeOfUndUser()
    {
        return $this->container['state_code_of_und_user'];
    }

    /**
     * Sets state_code_of_und_user
     * @param \Swagger\Client\Model\StateEnum $state_code_of_und_user state where fuel was used
     * @return $this
     */
    public function setStateCodeOfUndUser($state_code_of_und_user)
    {
        $this->container['state_code_of_und_user'] = $state_code_of_und_user;

        return $this;
    }

    /**
     * Gets cide
     * @return \Swagger\Client\Model\FuelCide
     */
    public function getCide()
    {
        return $this->container['cide'];
    }

    /**
     * Sets cide
     * @param \Swagger\Client\Model\FuelCide $cide
     * @return $this
     */
    public function setCide($cide)
    {
        $this->container['cide'] = $cide;

        return $this;
    }

    /**
     * Gets pump_number
     * @return \Swagger\Client\Model\FuelPumpNumber
     */
    public function getPumpNumber()
    {
        return $this->container['pump_number'];
    }

    /**
     * Sets pump_number
     * @param \Swagger\Client\Model\FuelPumpNumber $pump_number
     * @return $this
     */
    public function setPumpNumber($pump_number)
    {
        $this->container['pump_number'] = $pump_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


