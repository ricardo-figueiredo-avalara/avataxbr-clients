<?php
/**
 * Vehicle
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Vehicle Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Vehicle implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Vehicle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tp_op' => 'int',
        'chassis_number' => 'string',
        'color_code' => 'string',
        'color_name' => 'string',
        'cv_power' => 'string',
        'cylinder_volum_cc' => 'string',
        'net_weight' => 'string',
        'gross_weight' => 'string',
        'serial_number' => 'string',
        'fuel_type' => 'string',
        'engine_number' => 'string',
        'cmt' => 'string',
        'length_between_axis' => 'string',
        'model_year' => 'string',
        'manufactory_year' => 'string',
        'paint_type' => 'string',
        'vehicle_renavam_type' => 'string',
        'specie_renavam_type' => 'string',
        'model_renavam_code' => 'string',
        'color_denatran_code' => 'string',
        'vin' => 'string',
        'vehicle_manufactory_status' => 'string',
        'max_occupants_quantity' => 'string',
        'restriction_type' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'tp_op' => 'tpOp',
        'chassis_number' => 'chassisNumber',
        'color_code' => 'colorCode',
        'color_name' => 'colorName',
        'cv_power' => 'cvPower',
        'cylinder_volum_cc' => 'cylinderVolumCC',
        'net_weight' => 'netWeight',
        'gross_weight' => 'grossWeight',
        'serial_number' => 'serialNumber',
        'fuel_type' => 'fuelType',
        'engine_number' => 'engineNumber',
        'cmt' => 'cmt',
        'length_between_axis' => 'lengthBetweenAxis',
        'model_year' => 'modelYear',
        'manufactory_year' => 'manufactoryYear',
        'paint_type' => 'paintType',
        'vehicle_renavam_type' => 'vehicleRENAVAMType',
        'specie_renavam_type' => 'specieRENAVAMType',
        'model_renavam_code' => 'modelRENAVAMCode',
        'color_denatran_code' => 'colorDENATRANCode',
        'vin' => 'vin',
        'vehicle_manufactory_status' => 'vehicleManufactoryStatus',
        'max_occupants_quantity' => 'maxOccupantsQuantity',
        'restriction_type' => 'restrictionType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'tp_op' => 'setTpOp',
        'chassis_number' => 'setChassisNumber',
        'color_code' => 'setColorCode',
        'color_name' => 'setColorName',
        'cv_power' => 'setCvPower',
        'cylinder_volum_cc' => 'setCylinderVolumCc',
        'net_weight' => 'setNetWeight',
        'gross_weight' => 'setGrossWeight',
        'serial_number' => 'setSerialNumber',
        'fuel_type' => 'setFuelType',
        'engine_number' => 'setEngineNumber',
        'cmt' => 'setCmt',
        'length_between_axis' => 'setLengthBetweenAxis',
        'model_year' => 'setModelYear',
        'manufactory_year' => 'setManufactoryYear',
        'paint_type' => 'setPaintType',
        'vehicle_renavam_type' => 'setVehicleRenavamType',
        'specie_renavam_type' => 'setSpecieRenavamType',
        'model_renavam_code' => 'setModelRenavamCode',
        'color_denatran_code' => 'setColorDenatranCode',
        'vin' => 'setVin',
        'vehicle_manufactory_status' => 'setVehicleManufactoryStatus',
        'max_occupants_quantity' => 'setMaxOccupantsQuantity',
        'restriction_type' => 'setRestrictionType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'tp_op' => 'getTpOp',
        'chassis_number' => 'getChassisNumber',
        'color_code' => 'getColorCode',
        'color_name' => 'getColorName',
        'cv_power' => 'getCvPower',
        'cylinder_volum_cc' => 'getCylinderVolumCc',
        'net_weight' => 'getNetWeight',
        'gross_weight' => 'getGrossWeight',
        'serial_number' => 'getSerialNumber',
        'fuel_type' => 'getFuelType',
        'engine_number' => 'getEngineNumber',
        'cmt' => 'getCmt',
        'length_between_axis' => 'getLengthBetweenAxis',
        'model_year' => 'getModelYear',
        'manufactory_year' => 'getManufactoryYear',
        'paint_type' => 'getPaintType',
        'vehicle_renavam_type' => 'getVehicleRenavamType',
        'specie_renavam_type' => 'getSpecieRenavamType',
        'model_renavam_code' => 'getModelRenavamCode',
        'color_denatran_code' => 'getColorDenatranCode',
        'vin' => 'getVin',
        'vehicle_manufactory_status' => 'getVehicleManufactoryStatus',
        'max_occupants_quantity' => 'getMaxOccupantsQuantity',
        'restriction_type' => 'getRestrictionType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const FUEL_TYPE__01 = '01';
    const FUEL_TYPE__02 = '02';
    const FUEL_TYPE__03 = '03';
    const FUEL_TYPE__16 = '16';
    const FUEL_TYPE__17 = '17';
    const FUEL_TYPE__18 = '18';
    const COLOR_DENATRAN_CODE__01 = '01';
    const COLOR_DENATRAN_CODE__02 = '02';
    const COLOR_DENATRAN_CODE__03 = '03';
    const COLOR_DENATRAN_CODE__04 = '04';
    const COLOR_DENATRAN_CODE__05 = '05';
    const COLOR_DENATRAN_CODE__06 = '06';
    const COLOR_DENATRAN_CODE__07 = '07';
    const COLOR_DENATRAN_CODE__08 = '08';
    const COLOR_DENATRAN_CODE__09 = '09';
    const COLOR_DENATRAN_CODE__10 = '10';
    const COLOR_DENATRAN_CODE__11 = '11';
    const COLOR_DENATRAN_CODE__12 = '12';
    const COLOR_DENATRAN_CODE__13 = '13';
    const COLOR_DENATRAN_CODE__14 = '14';
    const COLOR_DENATRAN_CODE__15 = '15';
    const COLOR_DENATRAN_CODE__16 = '16';
    const VIN_R = 'R';
    const VIN_N = 'N';
    const VEHICLE_MANUFACTORY_STATUS__1 = '1';
    const VEHICLE_MANUFACTORY_STATUS__2 = '2';
    const VEHICLE_MANUFACTORY_STATUS__3 = '3';
    const RESTRICTION_TYPE__0 = '0';
    const RESTRICTION_TYPE__1 = '1';
    const RESTRICTION_TYPE__2 = '2';
    const RESTRICTION_TYPE__3 = '3';
    const RESTRICTION_TYPE__4 = '4';
    const RESTRICTION_TYPE__9 = '9';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFuelTypeAllowableValues()
    {
        return [
            self::FUEL_TYPE__01,
            self::FUEL_TYPE__02,
            self::FUEL_TYPE__03,
            self::FUEL_TYPE__16,
            self::FUEL_TYPE__17,
            self::FUEL_TYPE__18,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getColorDenatranCodeAllowableValues()
    {
        return [
            self::COLOR_DENATRAN_CODE__01,
            self::COLOR_DENATRAN_CODE__02,
            self::COLOR_DENATRAN_CODE__03,
            self::COLOR_DENATRAN_CODE__04,
            self::COLOR_DENATRAN_CODE__05,
            self::COLOR_DENATRAN_CODE__06,
            self::COLOR_DENATRAN_CODE__07,
            self::COLOR_DENATRAN_CODE__08,
            self::COLOR_DENATRAN_CODE__09,
            self::COLOR_DENATRAN_CODE__10,
            self::COLOR_DENATRAN_CODE__11,
            self::COLOR_DENATRAN_CODE__12,
            self::COLOR_DENATRAN_CODE__13,
            self::COLOR_DENATRAN_CODE__14,
            self::COLOR_DENATRAN_CODE__15,
            self::COLOR_DENATRAN_CODE__16,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getVinAllowableValues()
    {
        return [
            self::VIN_R,
            self::VIN_N,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getVehicleManufactoryStatusAllowableValues()
    {
        return [
            self::VEHICLE_MANUFACTORY_STATUS__1,
            self::VEHICLE_MANUFACTORY_STATUS__2,
            self::VEHICLE_MANUFACTORY_STATUS__3,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getRestrictionTypeAllowableValues()
    {
        return [
            self::RESTRICTION_TYPE__0,
            self::RESTRICTION_TYPE__1,
            self::RESTRICTION_TYPE__2,
            self::RESTRICTION_TYPE__3,
            self::RESTRICTION_TYPE__4,
            self::RESTRICTION_TYPE__9,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tp_op'] = isset($data['tp_op']) ? $data['tp_op'] : null;
        $this->container['chassis_number'] = isset($data['chassis_number']) ? $data['chassis_number'] : null;
        $this->container['color_code'] = isset($data['color_code']) ? $data['color_code'] : null;
        $this->container['color_name'] = isset($data['color_name']) ? $data['color_name'] : null;
        $this->container['cv_power'] = isset($data['cv_power']) ? $data['cv_power'] : null;
        $this->container['cylinder_volum_cc'] = isset($data['cylinder_volum_cc']) ? $data['cylinder_volum_cc'] : null;
        $this->container['net_weight'] = isset($data['net_weight']) ? $data['net_weight'] : null;
        $this->container['gross_weight'] = isset($data['gross_weight']) ? $data['gross_weight'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['fuel_type'] = isset($data['fuel_type']) ? $data['fuel_type'] : null;
        $this->container['engine_number'] = isset($data['engine_number']) ? $data['engine_number'] : null;
        $this->container['cmt'] = isset($data['cmt']) ? $data['cmt'] : null;
        $this->container['length_between_axis'] = isset($data['length_between_axis']) ? $data['length_between_axis'] : null;
        $this->container['model_year'] = isset($data['model_year']) ? $data['model_year'] : null;
        $this->container['manufactory_year'] = isset($data['manufactory_year']) ? $data['manufactory_year'] : null;
        $this->container['paint_type'] = isset($data['paint_type']) ? $data['paint_type'] : null;
        $this->container['vehicle_renavam_type'] = isset($data['vehicle_renavam_type']) ? $data['vehicle_renavam_type'] : null;
        $this->container['specie_renavam_type'] = isset($data['specie_renavam_type']) ? $data['specie_renavam_type'] : null;
        $this->container['model_renavam_code'] = isset($data['model_renavam_code']) ? $data['model_renavam_code'] : null;
        $this->container['color_denatran_code'] = isset($data['color_denatran_code']) ? $data['color_denatran_code'] : null;
        $this->container['vin'] = isset($data['vin']) ? $data['vin'] : null;
        $this->container['vehicle_manufactory_status'] = isset($data['vehicle_manufactory_status']) ? $data['vehicle_manufactory_status'] : null;
        $this->container['max_occupants_quantity'] = isset($data['max_occupants_quantity']) ? $data['max_occupants_quantity'] : null;
        $this->container['restriction_type'] = isset($data['restriction_type']) ? $data['restriction_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['tp_op'] === null) {
            $invalid_properties[] = "'tp_op' can't be null";
        }
        if ($this->container['chassis_number'] === null) {
            $invalid_properties[] = "'chassis_number' can't be null";
        }
        if ((strlen($this->container['chassis_number']) > 17)) {
            $invalid_properties[] = "invalid value for 'chassis_number', the character length must be smaller than or equal to 17.";
        }

        if (!preg_match("/[A-Z0-9]+/", $this->container['chassis_number'])) {
            $invalid_properties[] = "invalid value for 'chassis_number', must be conform to the pattern /[A-Z0-9]+/.";
        }

        if ($this->container['color_code'] === null) {
            $invalid_properties[] = "'color_code' can't be null";
        }
        if ((strlen($this->container['color_code']) > 17)) {
            $invalid_properties[] = "invalid value for 'color_code', the character length must be smaller than or equal to 17.";
        }

        if ($this->container['color_name'] === null) {
            $invalid_properties[] = "'color_name' can't be null";
        }
        if ((strlen($this->container['color_name']) > 40)) {
            $invalid_properties[] = "invalid value for 'color_name', the character length must be smaller than or equal to 40.";
        }

        if ($this->container['cv_power'] === null) {
            $invalid_properties[] = "'cv_power' can't be null";
        }
        if ((strlen($this->container['cv_power']) > 4)) {
            $invalid_properties[] = "invalid value for 'cv_power', the character length must be smaller than or equal to 4.";
        }

        if ($this->container['cylinder_volum_cc'] === null) {
            $invalid_properties[] = "'cylinder_volum_cc' can't be null";
        }
        if ((strlen($this->container['cylinder_volum_cc']) > 4)) {
            $invalid_properties[] = "invalid value for 'cylinder_volum_cc', the character length must be smaller than or equal to 4.";
        }

        if ($this->container['net_weight'] === null) {
            $invalid_properties[] = "'net_weight' can't be null";
        }
        if ((strlen($this->container['net_weight']) > 9)) {
            $invalid_properties[] = "invalid value for 'net_weight', the character length must be smaller than or equal to 9.";
        }

        if ($this->container['gross_weight'] === null) {
            $invalid_properties[] = "'gross_weight' can't be null";
        }
        if ((strlen($this->container['gross_weight']) > 9)) {
            $invalid_properties[] = "invalid value for 'gross_weight', the character length must be smaller than or equal to 9.";
        }

        if ($this->container['serial_number'] === null) {
            $invalid_properties[] = "'serial_number' can't be null";
        }
        if ((strlen($this->container['serial_number']) > 9)) {
            $invalid_properties[] = "invalid value for 'serial_number', the character length must be smaller than or equal to 9.";
        }

        if ($this->container['fuel_type'] === null) {
            $invalid_properties[] = "'fuel_type' can't be null";
        }
        $allowed_values = ["01", "02", "03", "16", "17", "18"];
        if (!in_array($this->container['fuel_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'fuel_type', must be one of #{allowed_values}.";
        }

        if ($this->container['engine_number'] === null) {
            $invalid_properties[] = "'engine_number' can't be null";
        }
        if ((strlen($this->container['engine_number']) > 21)) {
            $invalid_properties[] = "invalid value for 'engine_number', the character length must be smaller than or equal to 21.";
        }

        if ($this->container['cmt'] === null) {
            $invalid_properties[] = "'cmt' can't be null";
        }
        if ((strlen($this->container['cmt']) > 9)) {
            $invalid_properties[] = "invalid value for 'cmt', the character length must be smaller than or equal to 9.";
        }

        if ($this->container['length_between_axis'] === null) {
            $invalid_properties[] = "'length_between_axis' can't be null";
        }
        if ((strlen($this->container['length_between_axis']) > 4)) {
            $invalid_properties[] = "invalid value for 'length_between_axis', the character length must be smaller than or equal to 4.";
        }

        if ($this->container['model_year'] === null) {
            $invalid_properties[] = "'model_year' can't be null";
        }
        if (!preg_match("/[0-9]{4}/", $this->container['model_year'])) {
            $invalid_properties[] = "invalid value for 'model_year', must be conform to the pattern /[0-9]{4}/.";
        }

        if ($this->container['manufactory_year'] === null) {
            $invalid_properties[] = "'manufactory_year' can't be null";
        }
        if (!preg_match("/[0-9]{4}/", $this->container['manufactory_year'])) {
            $invalid_properties[] = "invalid value for 'manufactory_year', must be conform to the pattern /[0-9]{4}/.";
        }

        if ($this->container['paint_type'] === null) {
            $invalid_properties[] = "'paint_type' can't be null";
        }
        if ((strlen($this->container['paint_type']) > 1)) {
            $invalid_properties[] = "invalid value for 'paint_type', the character length must be smaller than or equal to 1.";
        }

        if ($this->container['vehicle_renavam_type'] === null) {
            $invalid_properties[] = "'vehicle_renavam_type' can't be null";
        }
        if (!preg_match("/[0-9]{1,2}/", $this->container['vehicle_renavam_type'])) {
            $invalid_properties[] = "invalid value for 'vehicle_renavam_type', must be conform to the pattern /[0-9]{1,2}/.";
        }

        if ($this->container['specie_renavam_type'] === null) {
            $invalid_properties[] = "'specie_renavam_type' can't be null";
        }
        if (!preg_match("/[0-9]{1}/", $this->container['specie_renavam_type'])) {
            $invalid_properties[] = "invalid value for 'specie_renavam_type', must be conform to the pattern /[0-9]{1}/.";
        }

        if ($this->container['model_renavam_code'] === null) {
            $invalid_properties[] = "'model_renavam_code' can't be null";
        }
        if (!preg_match("/[0-9]{1,6}/", $this->container['model_renavam_code'])) {
            $invalid_properties[] = "invalid value for 'model_renavam_code', must be conform to the pattern /[0-9]{1,6}/.";
        }

        if ($this->container['color_denatran_code'] === null) {
            $invalid_properties[] = "'color_denatran_code' can't be null";
        }
        $allowed_values = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16"];
        if (!in_array($this->container['color_denatran_code'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'color_denatran_code', must be one of #{allowed_values}.";
        }

        if (!preg_match("/[0-9]{1,2}/", $this->container['color_denatran_code'])) {
            $invalid_properties[] = "invalid value for 'color_denatran_code', must be conform to the pattern /[0-9]{1,2}/.";
        }

        if ($this->container['vin'] === null) {
            $invalid_properties[] = "'vin' can't be null";
        }
        $allowed_values = ["R", "N"];
        if (!in_array($this->container['vin'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'vin', must be one of #{allowed_values}.";
        }

        if ($this->container['vehicle_manufactory_status'] === null) {
            $invalid_properties[] = "'vehicle_manufactory_status' can't be null";
        }
        $allowed_values = ["1", "2", "3"];
        if (!in_array($this->container['vehicle_manufactory_status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'vehicle_manufactory_status', must be one of #{allowed_values}.";
        }

        if ($this->container['max_occupants_quantity'] === null) {
            $invalid_properties[] = "'max_occupants_quantity' can't be null";
        }
        if ((strlen($this->container['max_occupants_quantity']) > 3)) {
            $invalid_properties[] = "invalid value for 'max_occupants_quantity', the character length must be smaller than or equal to 3.";
        }

        if ($this->container['restriction_type'] === null) {
            $invalid_properties[] = "'restriction_type' can't be null";
        }
        $allowed_values = ["0", "1", "2", "3", "4", "9"];
        if (!in_array($this->container['restriction_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'restriction_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['tp_op'] === null) {
            return false;
        }
        if ($this->container['chassis_number'] === null) {
            return false;
        }
        if (strlen($this->container['chassis_number']) > 17) {
            return false;
        }
        if (!preg_match("/[A-Z0-9]+/", $this->container['chassis_number'])) {
            return false;
        }
        if ($this->container['color_code'] === null) {
            return false;
        }
        if (strlen($this->container['color_code']) > 17) {
            return false;
        }
        if ($this->container['color_name'] === null) {
            return false;
        }
        if (strlen($this->container['color_name']) > 40) {
            return false;
        }
        if ($this->container['cv_power'] === null) {
            return false;
        }
        if (strlen($this->container['cv_power']) > 4) {
            return false;
        }
        if ($this->container['cylinder_volum_cc'] === null) {
            return false;
        }
        if (strlen($this->container['cylinder_volum_cc']) > 4) {
            return false;
        }
        if ($this->container['net_weight'] === null) {
            return false;
        }
        if (strlen($this->container['net_weight']) > 9) {
            return false;
        }
        if ($this->container['gross_weight'] === null) {
            return false;
        }
        if (strlen($this->container['gross_weight']) > 9) {
            return false;
        }
        if ($this->container['serial_number'] === null) {
            return false;
        }
        if (strlen($this->container['serial_number']) > 9) {
            return false;
        }
        if ($this->container['fuel_type'] === null) {
            return false;
        }
        $allowed_values = ["01", "02", "03", "16", "17", "18"];
        if (!in_array($this->container['fuel_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['engine_number'] === null) {
            return false;
        }
        if (strlen($this->container['engine_number']) > 21) {
            return false;
        }
        if ($this->container['cmt'] === null) {
            return false;
        }
        if (strlen($this->container['cmt']) > 9) {
            return false;
        }
        if ($this->container['length_between_axis'] === null) {
            return false;
        }
        if (strlen($this->container['length_between_axis']) > 4) {
            return false;
        }
        if ($this->container['model_year'] === null) {
            return false;
        }
        if (!preg_match("/[0-9]{4}/", $this->container['model_year'])) {
            return false;
        }
        if ($this->container['manufactory_year'] === null) {
            return false;
        }
        if (!preg_match("/[0-9]{4}/", $this->container['manufactory_year'])) {
            return false;
        }
        if ($this->container['paint_type'] === null) {
            return false;
        }
        if (strlen($this->container['paint_type']) > 1) {
            return false;
        }
        if ($this->container['vehicle_renavam_type'] === null) {
            return false;
        }
        if (!preg_match("/[0-9]{1,2}/", $this->container['vehicle_renavam_type'])) {
            return false;
        }
        if ($this->container['specie_renavam_type'] === null) {
            return false;
        }
        if (!preg_match("/[0-9]{1}/", $this->container['specie_renavam_type'])) {
            return false;
        }
        if ($this->container['model_renavam_code'] === null) {
            return false;
        }
        if (!preg_match("/[0-9]{1,6}/", $this->container['model_renavam_code'])) {
            return false;
        }
        if ($this->container['color_denatran_code'] === null) {
            return false;
        }
        $allowed_values = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16"];
        if (!in_array($this->container['color_denatran_code'], $allowed_values)) {
            return false;
        }
        if (!preg_match("/[0-9]{1,2}/", $this->container['color_denatran_code'])) {
            return false;
        }
        if ($this->container['vin'] === null) {
            return false;
        }
        $allowed_values = ["R", "N"];
        if (!in_array($this->container['vin'], $allowed_values)) {
            return false;
        }
        if ($this->container['vehicle_manufactory_status'] === null) {
            return false;
        }
        $allowed_values = ["1", "2", "3"];
        if (!in_array($this->container['vehicle_manufactory_status'], $allowed_values)) {
            return false;
        }
        if ($this->container['max_occupants_quantity'] === null) {
            return false;
        }
        if (strlen($this->container['max_occupants_quantity']) > 3) {
            return false;
        }
        if ($this->container['restriction_type'] === null) {
            return false;
        }
        $allowed_values = ["0", "1", "2", "3", "4", "9"];
        if (!in_array($this->container['restriction_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets tp_op
     * @return int
     */
    public function getTpOp()
    {
        return $this->container['tp_op'];
    }

    /**
     * Sets tp_op
     * @param int $tp_op - 1 # Sales by car dealership - 2 # Direct billing - 3 # Direct sales - 0 # Other
     * @return $this
     */
    public function setTpOp($tp_op)
    {
        $this->container['tp_op'] = $tp_op;

        return $this;
    }

    /**
     * Gets chassis_number
     * @return string
     */
    public function getChassisNumber()
    {
        return $this->container['chassis_number'];
    }

    /**
     * Sets chassis_number
     * @param string $chassis_number
     * @return $this
     */
    public function setChassisNumber($chassis_number)
    {
        if ((strlen($chassis_number) > 17)) {
            throw new \InvalidArgumentException('invalid length for $chassis_number when calling Vehicle., must be smaller than or equal to 17.');
        }
        if ((!preg_match("/[A-Z0-9]+/", $chassis_number))) {
            throw new \InvalidArgumentException("invalid value for $chassis_number when calling Vehicle., must conform to the pattern /[A-Z0-9]+/.");
        }

        $this->container['chassis_number'] = $chassis_number;

        return $this;
    }

    /**
     * Gets color_code
     * @return string
     */
    public function getColorCode()
    {
        return $this->container['color_code'];
    }

    /**
     * Sets color_code
     * @param string $color_code color code used by factory
     * @return $this
     */
    public function setColorCode($color_code)
    {
        if ((strlen($color_code) > 17)) {
            throw new \InvalidArgumentException('invalid length for $color_code when calling Vehicle., must be smaller than or equal to 17.');
        }

        $this->container['color_code'] = $color_code;

        return $this;
    }

    /**
     * Gets color_name
     * @return string
     */
    public function getColorName()
    {
        return $this->container['color_name'];
    }

    /**
     * Sets color_name
     * @param string $color_name color name
     * @return $this
     */
    public function setColorName($color_name)
    {
        if ((strlen($color_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $color_name when calling Vehicle., must be smaller than or equal to 40.');
        }

        $this->container['color_name'] = $color_name;

        return $this;
    }

    /**
     * Gets cv_power
     * @return string
     */
    public function getCvPower()
    {
        return $this->container['cv_power'];
    }

    /**
     * Sets cv_power
     * @param string $cv_power Power using CV unid
     * @return $this
     */
    public function setCvPower($cv_power)
    {
        if ((strlen($cv_power) > 4)) {
            throw new \InvalidArgumentException('invalid length for $cv_power when calling Vehicle., must be smaller than or equal to 4.');
        }

        $this->container['cv_power'] = $cv_power;

        return $this;
    }

    /**
     * Gets cylinder_volum_cc
     * @return string
     */
    public function getCylinderVolumCc()
    {
        return $this->container['cylinder_volum_cc'];
    }

    /**
     * Sets cylinder_volum_cc
     * @param string $cylinder_volum_cc engine size in cubic centimeters
     * @return $this
     */
    public function setCylinderVolumCc($cylinder_volum_cc)
    {
        if ((strlen($cylinder_volum_cc) > 4)) {
            throw new \InvalidArgumentException('invalid length for $cylinder_volum_cc when calling Vehicle., must be smaller than or equal to 4.');
        }

        $this->container['cylinder_volum_cc'] = $cylinder_volum_cc;

        return $this;
    }

    /**
     * Gets net_weight
     * @return string
     */
    public function getNetWeight()
    {
        return $this->container['net_weight'];
    }

    /**
     * Sets net_weight
     * @param string $net_weight net weight
     * @return $this
     */
    public function setNetWeight($net_weight)
    {
        if ((strlen($net_weight) > 9)) {
            throw new \InvalidArgumentException('invalid length for $net_weight when calling Vehicle., must be smaller than or equal to 9.');
        }

        $this->container['net_weight'] = $net_weight;

        return $this;
    }

    /**
     * Gets gross_weight
     * @return string
     */
    public function getGrossWeight()
    {
        return $this->container['gross_weight'];
    }

    /**
     * Sets gross_weight
     * @param string $gross_weight gross weight
     * @return $this
     */
    public function setGrossWeight($gross_weight)
    {
        if ((strlen($gross_weight) > 9)) {
            throw new \InvalidArgumentException('invalid length for $gross_weight when calling Vehicle., must be smaller than or equal to 9.');
        }

        $this->container['gross_weight'] = $gross_weight;

        return $this;
    }

    /**
     * Gets serial_number
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     * @param string $serial_number serie
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        if ((strlen($serial_number) > 9)) {
            throw new \InvalidArgumentException('invalid length for $serial_number when calling Vehicle., must be smaller than or equal to 9.');
        }

        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets fuel_type
     * @return string
     */
    public function getFuelType()
    {
        return $this->container['fuel_type'];
    }

    /**
     * Sets fuel_type
     * @param string $fuel_type - '01' # Alcohol - '02' # Gas - '03' # Diesel - '16' # Alcohol/Gas - '17' # Gas/Alcohol/GNV - '18' # Gas/Electric
     * @return $this
     */
    public function setFuelType($fuel_type)
    {
        $allowed_values = array('01', '02', '03', '16', '17', '18');
        if ((!in_array($fuel_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'fuel_type', must be one of '01', '02', '03', '16', '17', '18'");
        }
        $this->container['fuel_type'] = $fuel_type;

        return $this;
    }

    /**
     * Gets engine_number
     * @return string
     */
    public function getEngineNumber()
    {
        return $this->container['engine_number'];
    }

    /**
     * Sets engine_number
     * @param string $engine_number engine number
     * @return $this
     */
    public function setEngineNumber($engine_number)
    {
        if ((strlen($engine_number) > 21)) {
            throw new \InvalidArgumentException('invalid length for $engine_number when calling Vehicle., must be smaller than or equal to 21.');
        }

        $this->container['engine_number'] = $engine_number;

        return $this;
    }

    /**
     * Gets cmt
     * @return string
     */
    public function getCmt()
    {
        return $this->container['cmt'];
    }

    /**
     * Sets cmt
     * @param string $cmt traction capacity, tonne
     * @return $this
     */
    public function setCmt($cmt)
    {
        if ((strlen($cmt) > 9)) {
            throw new \InvalidArgumentException('invalid length for $cmt when calling Vehicle., must be smaller than or equal to 9.');
        }

        $this->container['cmt'] = $cmt;

        return $this;
    }

    /**
     * Gets length_between_axis
     * @return string
     */
    public function getLengthBetweenAxis()
    {
        return $this->container['length_between_axis'];
    }

    /**
     * Sets length_between_axis
     * @param string $length_between_axis length between axis
     * @return $this
     */
    public function setLengthBetweenAxis($length_between_axis)
    {
        if ((strlen($length_between_axis) > 4)) {
            throw new \InvalidArgumentException('invalid length for $length_between_axis when calling Vehicle., must be smaller than or equal to 4.');
        }

        $this->container['length_between_axis'] = $length_between_axis;

        return $this;
    }

    /**
     * Gets model_year
     * @return string
     */
    public function getModelYear()
    {
        return $this->container['model_year'];
    }

    /**
     * Sets model_year
     * @param string $model_year model year
     * @return $this
     */
    public function setModelYear($model_year)
    {

        if ((!preg_match("/[0-9]{4}/", $model_year))) {
            throw new \InvalidArgumentException("invalid value for $model_year when calling Vehicle., must conform to the pattern /[0-9]{4}/.");
        }

        $this->container['model_year'] = $model_year;

        return $this;
    }

    /**
     * Gets manufactory_year
     * @return string
     */
    public function getManufactoryYear()
    {
        return $this->container['manufactory_year'];
    }

    /**
     * Sets manufactory_year
     * @param string $manufactory_year year of factory
     * @return $this
     */
    public function setManufactoryYear($manufactory_year)
    {

        if ((!preg_match("/[0-9]{4}/", $manufactory_year))) {
            throw new \InvalidArgumentException("invalid value for $manufactory_year when calling Vehicle., must conform to the pattern /[0-9]{4}/.");
        }

        $this->container['manufactory_year'] = $manufactory_year;

        return $this;
    }

    /**
     * Gets paint_type
     * @return string
     */
    public function getPaintType()
    {
        return $this->container['paint_type'];
    }

    /**
     * Sets paint_type
     * @param string $paint_type paynt type
     * @return $this
     */
    public function setPaintType($paint_type)
    {
        if ((strlen($paint_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $paint_type when calling Vehicle., must be smaller than or equal to 1.');
        }

        $this->container['paint_type'] = $paint_type;

        return $this;
    }

    /**
     * Gets vehicle_renavam_type
     * @return string
     */
    public function getVehicleRenavamType()
    {
        return $this->container['vehicle_renavam_type'];
    }

    /**
     * Sets vehicle_renavam_type
     * @param string $vehicle_renavam_type
     * @return $this
     */
    public function setVehicleRenavamType($vehicle_renavam_type)
    {

        if ((!preg_match("/[0-9]{1,2}/", $vehicle_renavam_type))) {
            throw new \InvalidArgumentException("invalid value for $vehicle_renavam_type when calling Vehicle., must conform to the pattern /[0-9]{1,2}/.");
        }

        $this->container['vehicle_renavam_type'] = $vehicle_renavam_type;

        return $this;
    }

    /**
     * Gets specie_renavam_type
     * @return string
     */
    public function getSpecieRenavamType()
    {
        return $this->container['specie_renavam_type'];
    }

    /**
     * Sets specie_renavam_type
     * @param string $specie_renavam_type
     * @return $this
     */
    public function setSpecieRenavamType($specie_renavam_type)
    {

        if ((!preg_match("/[0-9]{1}/", $specie_renavam_type))) {
            throw new \InvalidArgumentException("invalid value for $specie_renavam_type when calling Vehicle., must conform to the pattern /[0-9]{1}/.");
        }

        $this->container['specie_renavam_type'] = $specie_renavam_type;

        return $this;
    }

    /**
     * Gets model_renavam_code
     * @return string
     */
    public function getModelRenavamCode()
    {
        return $this->container['model_renavam_code'];
    }

    /**
     * Sets model_renavam_code
     * @param string $model_renavam_code
     * @return $this
     */
    public function setModelRenavamCode($model_renavam_code)
    {

        if ((!preg_match("/[0-9]{1,6}/", $model_renavam_code))) {
            throw new \InvalidArgumentException("invalid value for $model_renavam_code when calling Vehicle., must conform to the pattern /[0-9]{1,6}/.");
        }

        $this->container['model_renavam_code'] = $model_renavam_code;

        return $this;
    }

    /**
     * Gets color_denatran_code
     * @return string
     */
    public function getColorDenatranCode()
    {
        return $this->container['color_denatran_code'];
    }

    /**
     * Sets color_denatran_code
     * @param string $color_denatran_code - '01' # YELLOW - '02' # BLUE - '03' # BEIGE - '04' # WHITE - '05' # GRAY - '06' # GOLDEN - '07' # GRENA - '08' # ORANGE - '09' # BROWN - '10' # SILVER - '11' # BLACK - '12' # PINK - '13' # PURPLE - '14' # GREEN - '15' # RED - '16' # FANTASY
     * @return $this
     */
    public function setColorDenatranCode($color_denatran_code)
    {
        $allowed_values = array('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16');
        if ((!in_array($color_denatran_code, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'color_denatran_code', must be one of '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16'");
        }

        if ((!preg_match("/[0-9]{1,2}/", $color_denatran_code))) {
            throw new \InvalidArgumentException("invalid value for $color_denatran_code when calling Vehicle., must conform to the pattern /[0-9]{1,2}/.");
        }

        $this->container['color_denatran_code'] = $color_denatran_code;

        return $this;
    }

    /**
     * Gets vin
     * @return string
     */
    public function getVin()
    {
        return $this->container['vin'];
    }

    /**
     * Sets vin
     * @param string $vin chassis condition original or modified (remarcado)
     * @return $this
     */
    public function setVin($vin)
    {
        $allowed_values = array('R', 'N');
        if ((!in_array($vin, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'vin', must be one of 'R', 'N'");
        }
        $this->container['vin'] = $vin;

        return $this;
    }

    /**
     * Gets vehicle_manufactory_status
     * @return string
     */
    public function getVehicleManufactoryStatus()
    {
        return $this->container['vehicle_manufactory_status'];
    }

    /**
     * Sets vehicle_manufactory_status
     * @param string $vehicle_manufactory_status - '1' # Finished(Done) - '2' # Not finished - '3' # Semi-finished
     * @return $this
     */
    public function setVehicleManufactoryStatus($vehicle_manufactory_status)
    {
        $allowed_values = array('1', '2', '3');
        if ((!in_array($vehicle_manufactory_status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'vehicle_manufactory_status', must be one of '1', '2', '3'");
        }
        $this->container['vehicle_manufactory_status'] = $vehicle_manufactory_status;

        return $this;
    }

    /**
     * Gets max_occupants_quantity
     * @return string
     */
    public function getMaxOccupantsQuantity()
    {
        return $this->container['max_occupants_quantity'];
    }

    /**
     * Sets max_occupants_quantity
     * @param string $max_occupants_quantity max number of sit occupants
     * @return $this
     */
    public function setMaxOccupantsQuantity($max_occupants_quantity)
    {
        if ((strlen($max_occupants_quantity) > 3)) {
            throw new \InvalidArgumentException('invalid length for $max_occupants_quantity when calling Vehicle., must be smaller than or equal to 3.');
        }

        $this->container['max_occupants_quantity'] = $max_occupants_quantity;

        return $this;
    }

    /**
     * Gets restriction_type
     * @return string
     */
    public function getRestrictionType()
    {
        return $this->container['restriction_type'];
    }

    /**
     * Sets restriction_type
     * @param string $restriction_type Lien/restriction type - '0' # No one; - '1' # Alienação Fiduciária; - '2' # Arrendamento Mercantil; - '3' # Reserva de Domínio; - '4' # Penhor de Veículos; - '9' # Other.
     * @return $this
     */
    public function setRestrictionType($restriction_type)
    {
        $allowed_values = array('0', '1', '2', '3', '4', '9');
        if ((!in_array($restriction_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'restriction_type', must be one of '0', '1', '2', '3', '4', '9'");
        }
        $this->container['restriction_type'] = $restriction_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


