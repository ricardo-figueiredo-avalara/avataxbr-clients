<?php
/**
 * SalesTaxesConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SalesTaxesConfig Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SalesTaxesConfig implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SalesTaxesConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accruable_cofins_taxation' => 'string',
        'accruable_csll_taxation' => 'string',
        'accruable_pis_taxation' => 'string',
        'accruable_cofins_exemp_code_taxation' => 'string',
        'accruable_pis_exemp_code_taxation' => 'string',
        'withholding_cofins' => 'bool',
        'withholding_csll' => 'bool',
        'withholding_irrf' => 'bool',
        'withholding_pis' => 'bool',
        'withhold_irrf_exempt_reason_taxation' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'accruable_cofins_taxation' => 'accruableCOFINSTaxation',
        'accruable_csll_taxation' => 'accruableCSLLTaxation',
        'accruable_pis_taxation' => 'accruablePISTaxation',
        'accruable_cofins_exemp_code_taxation' => 'accruableCOFINSExempCodeTaxation',
        'accruable_pis_exemp_code_taxation' => 'accruablePISExempCodeTaxation',
        'withholding_cofins' => 'withholdingCOFINS',
        'withholding_csll' => 'withholdingCSLL',
        'withholding_irrf' => 'withholdingIRRF',
        'withholding_pis' => 'withholdingPIS',
        'withhold_irrf_exempt_reason_taxation' => 'withholdIRRFExemptReasonTaxation'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'accruable_cofins_taxation' => 'setAccruableCofinsTaxation',
        'accruable_csll_taxation' => 'setAccruableCsllTaxation',
        'accruable_pis_taxation' => 'setAccruablePisTaxation',
        'accruable_cofins_exemp_code_taxation' => 'setAccruableCofinsExempCodeTaxation',
        'accruable_pis_exemp_code_taxation' => 'setAccruablePisExempCodeTaxation',
        'withholding_cofins' => 'setWithholdingCofins',
        'withholding_csll' => 'setWithholdingCsll',
        'withholding_irrf' => 'setWithholdingIrrf',
        'withholding_pis' => 'setWithholdingPis',
        'withhold_irrf_exempt_reason_taxation' => 'setWithholdIrrfExemptReasonTaxation'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'accruable_cofins_taxation' => 'getAccruableCofinsTaxation',
        'accruable_csll_taxation' => 'getAccruableCsllTaxation',
        'accruable_pis_taxation' => 'getAccruablePisTaxation',
        'accruable_cofins_exemp_code_taxation' => 'getAccruableCofinsExempCodeTaxation',
        'accruable_pis_exemp_code_taxation' => 'getAccruablePisExempCodeTaxation',
        'withholding_cofins' => 'getWithholdingCofins',
        'withholding_csll' => 'getWithholdingCsll',
        'withholding_irrf' => 'getWithholdingIrrf',
        'withholding_pis' => 'getWithholdingPis',
        'withhold_irrf_exempt_reason_taxation' => 'getWithholdIrrfExemptReasonTaxation'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const ACCRUABLE_COFINS_TAXATION_T = 'T';
    const ACCRUABLE_COFINS_TAXATION_N = 'N';
    const ACCRUABLE_COFINS_TAXATION_Z = 'Z';
    const ACCRUABLE_COFINS_TAXATION_E = 'E';
    const ACCRUABLE_COFINS_TAXATION_H = 'H';
    const ACCRUABLE_COFINS_TAXATION_S = 'S';
    const ACCRUABLE_CSLL_TAXATION_T = 'T';
    const ACCRUABLE_CSLL_TAXATION_E = 'E';
    const ACCRUABLE_PIS_TAXATION_T = 'T';
    const ACCRUABLE_PIS_TAXATION_N = 'N';
    const ACCRUABLE_PIS_TAXATION_Z = 'Z';
    const ACCRUABLE_PIS_TAXATION_E = 'E';
    const ACCRUABLE_PIS_TAXATION_H = 'H';
    const ACCRUABLE_PIS_TAXATION_S = 'S';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAccruableCofinsTaxationAllowableValues()
    {
        return [
            self::ACCRUABLE_COFINS_TAXATION_T,
            self::ACCRUABLE_COFINS_TAXATION_N,
            self::ACCRUABLE_COFINS_TAXATION_Z,
            self::ACCRUABLE_COFINS_TAXATION_E,
            self::ACCRUABLE_COFINS_TAXATION_H,
            self::ACCRUABLE_COFINS_TAXATION_S,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAccruableCsllTaxationAllowableValues()
    {
        return [
            self::ACCRUABLE_CSLL_TAXATION_T,
            self::ACCRUABLE_CSLL_TAXATION_E,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAccruablePisTaxationAllowableValues()
    {
        return [
            self::ACCRUABLE_PIS_TAXATION_T,
            self::ACCRUABLE_PIS_TAXATION_N,
            self::ACCRUABLE_PIS_TAXATION_Z,
            self::ACCRUABLE_PIS_TAXATION_E,
            self::ACCRUABLE_PIS_TAXATION_H,
            self::ACCRUABLE_PIS_TAXATION_S,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accruable_cofins_taxation'] = isset($data['accruable_cofins_taxation']) ? $data['accruable_cofins_taxation'] : null;
        $this->container['accruable_csll_taxation'] = isset($data['accruable_csll_taxation']) ? $data['accruable_csll_taxation'] : null;
        $this->container['accruable_pis_taxation'] = isset($data['accruable_pis_taxation']) ? $data['accruable_pis_taxation'] : null;
        $this->container['accruable_cofins_exemp_code_taxation'] = isset($data['accruable_cofins_exemp_code_taxation']) ? $data['accruable_cofins_exemp_code_taxation'] : null;
        $this->container['accruable_pis_exemp_code_taxation'] = isset($data['accruable_pis_exemp_code_taxation']) ? $data['accruable_pis_exemp_code_taxation'] : null;
        $this->container['withholding_cofins'] = isset($data['withholding_cofins']) ? $data['withholding_cofins'] : null;
        $this->container['withholding_csll'] = isset($data['withholding_csll']) ? $data['withholding_csll'] : null;
        $this->container['withholding_irrf'] = isset($data['withholding_irrf']) ? $data['withholding_irrf'] : null;
        $this->container['withholding_pis'] = isset($data['withholding_pis']) ? $data['withholding_pis'] : null;
        $this->container['withhold_irrf_exempt_reason_taxation'] = isset($data['withhold_irrf_exempt_reason_taxation']) ? $data['withhold_irrf_exempt_reason_taxation'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["T", "N", "Z", "E", "H", "S"];
        if (!in_array($this->container['accruable_cofins_taxation'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'accruable_cofins_taxation', must be one of #{allowed_values}.";
        }

        $allowed_values = ["T", "E"];
        if (!in_array($this->container['accruable_csll_taxation'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'accruable_csll_taxation', must be one of #{allowed_values}.";
        }

        $allowed_values = ["T", "N", "Z", "E", "H", "S"];
        if (!in_array($this->container['accruable_pis_taxation'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'accruable_pis_taxation', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['accruable_cofins_exemp_code_taxation']) && !preg_match("/[0-9]{3}/", $this->container['accruable_cofins_exemp_code_taxation'])) {
            $invalid_properties[] = "invalid value for 'accruable_cofins_exemp_code_taxation', must be conform to the pattern /[0-9]{3}/.";
        }

        if (!is_null($this->container['accruable_pis_exemp_code_taxation']) && !preg_match("/[0-9]{3}/", $this->container['accruable_pis_exemp_code_taxation'])) {
            $invalid_properties[] = "invalid value for 'accruable_pis_exemp_code_taxation', must be conform to the pattern /[0-9]{3}/.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["T", "N", "Z", "E", "H", "S"];
        if (!in_array($this->container['accruable_cofins_taxation'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["T", "E"];
        if (!in_array($this->container['accruable_csll_taxation'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["T", "N", "Z", "E", "H", "S"];
        if (!in_array($this->container['accruable_pis_taxation'], $allowed_values)) {
            return false;
        }
        if (!preg_match("/[0-9]{3}/", $this->container['accruable_cofins_exemp_code_taxation'])) {
            return false;
        }
        if (!preg_match("/[0-9]{3}/", $this->container['accruable_pis_exemp_code_taxation'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets accruable_cofins_taxation
     * @return string
     */
    public function getAccruableCofinsTaxation()
    {
        return $this->container['accruable_cofins_taxation'];
    }

    /**
     * Sets accruable_cofins_taxation
     * @param string $accruable_cofins_taxation There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE
     * @return $this
     */
    public function setAccruableCofinsTaxation($accruable_cofins_taxation)
    {
        $allowed_values = array('T', 'N', 'Z', 'E', 'H', 'S');
        if (!is_null($accruable_cofins_taxation) && (!in_array($accruable_cofins_taxation, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'accruable_cofins_taxation', must be one of 'T', 'N', 'Z', 'E', 'H', 'S'");
        }
        $this->container['accruable_cofins_taxation'] = $accruable_cofins_taxation;

        return $this;
    }

    /**
     * Gets accruable_csll_taxation
     * @return string
     */
    public function getAccruableCsllTaxation()
    {
        return $this->container['accruable_csll_taxation'];
    }

    /**
     * Sets accruable_csll_taxation
     * @param string $accruable_csll_taxation There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT
     * @return $this
     */
    public function setAccruableCsllTaxation($accruable_csll_taxation)
    {
        $allowed_values = array('T', 'E');
        if (!is_null($accruable_csll_taxation) && (!in_array($accruable_csll_taxation, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'accruable_csll_taxation', must be one of 'T', 'E'");
        }
        $this->container['accruable_csll_taxation'] = $accruable_csll_taxation;

        return $this;
    }

    /**
     * Gets accruable_pis_taxation
     * @return string
     */
    public function getAccruablePisTaxation()
    {
        return $this->container['accruable_pis_taxation'];
    }

    /**
     * Sets accruable_pis_taxation
     * @param string $accruable_pis_taxation There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE
     * @return $this
     */
    public function setAccruablePisTaxation($accruable_pis_taxation)
    {
        $allowed_values = array('T', 'N', 'Z', 'E', 'H', 'S');
        if (!is_null($accruable_pis_taxation) && (!in_array($accruable_pis_taxation, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'accruable_pis_taxation', must be one of 'T', 'N', 'Z', 'E', 'H', 'S'");
        }
        $this->container['accruable_pis_taxation'] = $accruable_pis_taxation;

        return $this;
    }

    /**
     * Gets accruable_cofins_exemp_code_taxation
     * @return string
     */
    public function getAccruableCofinsExempCodeTaxation()
    {
        return $this->container['accruable_cofins_exemp_code_taxation'];
    }

    /**
     * Sets accruable_cofins_exemp_code_taxation
     * @param string $accruable_cofins_exemp_code_taxation This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption
     * @return $this
     */
    public function setAccruableCofinsExempCodeTaxation($accruable_cofins_exemp_code_taxation)
    {

        if (!is_null($accruable_cofins_exemp_code_taxation) && (!preg_match("/[0-9]{3}/", $accruable_cofins_exemp_code_taxation))) {
            throw new \InvalidArgumentException("invalid value for $accruable_cofins_exemp_code_taxation when calling SalesTaxesConfig., must conform to the pattern /[0-9]{3}/.");
        }

        $this->container['accruable_cofins_exemp_code_taxation'] = $accruable_cofins_exemp_code_taxation;

        return $this;
    }

    /**
     * Gets accruable_pis_exemp_code_taxation
     * @return string
     */
    public function getAccruablePisExempCodeTaxation()
    {
        return $this->container['accruable_pis_exemp_code_taxation'];
    }

    /**
     * Sets accruable_pis_exemp_code_taxation
     * @param string $accruable_pis_exemp_code_taxation This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption
     * @return $this
     */
    public function setAccruablePisExempCodeTaxation($accruable_pis_exemp_code_taxation)
    {

        if (!is_null($accruable_pis_exemp_code_taxation) && (!preg_match("/[0-9]{3}/", $accruable_pis_exemp_code_taxation))) {
            throw new \InvalidArgumentException("invalid value for $accruable_pis_exemp_code_taxation when calling SalesTaxesConfig., must conform to the pattern /[0-9]{3}/.");
        }

        $this->container['accruable_pis_exemp_code_taxation'] = $accruable_pis_exemp_code_taxation;

        return $this;
    }

    /**
     * Gets withholding_cofins
     * @return bool
     */
    public function getWithholdingCofins()
    {
        return $this->container['withholding_cofins'];
    }

    /**
     * Sets withholding_cofins
     * @param bool $withholding_cofins Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
     * @return $this
     */
    public function setWithholdingCofins($withholding_cofins)
    {
        $this->container['withholding_cofins'] = $withholding_cofins;

        return $this;
    }

    /**
     * Gets withholding_csll
     * @return bool
     */
    public function getWithholdingCsll()
    {
        return $this->container['withholding_csll'];
    }

    /**
     * Sets withholding_csll
     * @param bool $withholding_csll Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
     * @return $this
     */
    public function setWithholdingCsll($withholding_csll)
    {
        $this->container['withholding_csll'] = $withholding_csll;

        return $this;
    }

    /**
     * Gets withholding_irrf
     * @return bool
     */
    public function getWithholdingIrrf()
    {
        return $this->container['withholding_irrf'];
    }

    /**
     * Sets withholding_irrf
     * @param bool $withholding_irrf Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
     * @return $this
     */
    public function setWithholdingIrrf($withholding_irrf)
    {
        $this->container['withholding_irrf'] = $withholding_irrf;

        return $this;
    }

    /**
     * Gets withholding_pis
     * @return bool
     */
    public function getWithholdingPis()
    {
        return $this->container['withholding_pis'];
    }

    /**
     * Sets withholding_pis
     * @param bool $withholding_pis Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
     * @return $this
     */
    public function setWithholdingPis($withholding_pis)
    {
        $this->container['withholding_pis'] = $withholding_pis;

        return $this;
    }

    /**
     * Gets withhold_irrf_exempt_reason_taxation
     * @return string
     */
    public function getWithholdIrrfExemptReasonTaxation()
    {
        return $this->container['withhold_irrf_exempt_reason_taxation'];
    }

    /**
     * Sets withhold_irrf_exempt_reason_taxation
     * @param string $withhold_irrf_exempt_reason_taxation When property withholdingIRRF is false is mandatory inform the reason
     * @return $this
     */
    public function setWithholdIrrfExemptReasonTaxation($withhold_irrf_exempt_reason_taxation)
    {
        $this->container['withhold_irrf_exempt_reason_taxation'] = $withhold_irrf_exempt_reason_taxation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


