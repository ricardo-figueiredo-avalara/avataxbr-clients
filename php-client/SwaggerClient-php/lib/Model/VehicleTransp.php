<?php
/**
 * VehicleTransp
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * VehicleTransp Class Doc Comment
 *
 * @category    Class */
 // @description Identify type of vehicle used to transport the attributes, except atribute type,  follow rule allOf then only one of this atributes will be informed.
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VehicleTransp implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'VehicleTransp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'automobile' => '\Swagger\Client\Model\VehicleID',
        'trailer' => '\Swagger\Client\Model\VehicleID[]',
        'wagon' => 'string',
        'ferry' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'automobile' => 'automobile',
        'trailer' => 'trailer',
        'wagon' => 'wagon',
        'ferry' => 'ferry'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'automobile' => 'setAutomobile',
        'trailer' => 'setTrailer',
        'wagon' => 'setWagon',
        'ferry' => 'setFerry'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'automobile' => 'getAutomobile',
        'trailer' => 'getTrailer',
        'wagon' => 'getWagon',
        'ferry' => 'getFerry'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_AUTOMOBILE = 'automobile';
    const TYPE_WAGON = 'wagon';
    const TYPE_FERRY = 'ferry';
    const TYPE_TRAILER = 'trailer';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_AUTOMOBILE,
            self::TYPE_WAGON,
            self::TYPE_FERRY,
            self::TYPE_TRAILER,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['automobile'] = isset($data['automobile']) ? $data['automobile'] : null;
        $this->container['trailer'] = isset($data['trailer']) ? $data['trailer'] : null;
        $this->container['wagon'] = isset($data['wagon']) ? $data['wagon'] : null;
        $this->container['ferry'] = isset($data['ferry']) ? $data['ferry'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["automobile", "wagon", "ferry", "trailer"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['wagon']) && (strlen($this->container['wagon']) > 20)) {
            $invalid_properties[] = "invalid value for 'wagon', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['wagon']) && (strlen($this->container['wagon']) < 1)) {
            $invalid_properties[] = "invalid value for 'wagon', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ferry']) && (strlen($this->container['ferry']) > 20)) {
            $invalid_properties[] = "invalid value for 'ferry', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['ferry']) && (strlen($this->container['ferry']) < 1)) {
            $invalid_properties[] = "invalid value for 'ferry', the character length must be bigger than or equal to 1.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["automobile", "wagon", "ferry", "trailer"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['wagon']) > 20) {
            return false;
        }
        if (strlen($this->container['wagon']) < 1) {
            return false;
        }
        if (strlen($this->container['ferry']) > 20) {
            return false;
        }
        if (strlen($this->container['ferry']) < 1) {
            return false;
        }
        return true;
    }


    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('automobile', 'wagon', 'ferry', 'trailer');
        if (!is_null($type) && (!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'automobile', 'wagon', 'ferry', 'trailer'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets automobile
     * @return \Swagger\Client\Model\VehicleID
     */
    public function getAutomobile()
    {
        return $this->container['automobile'];
    }

    /**
     * Sets automobile
     * @param \Swagger\Client\Model\VehicleID $automobile
     * @return $this
     */
    public function setAutomobile($automobile)
    {
        $this->container['automobile'] = $automobile;

        return $this;
    }

    /**
     * Gets trailer
     * @return \Swagger\Client\Model\VehicleID[]
     */
    public function getTrailer()
    {
        return $this->container['trailer'];
    }

    /**
     * Sets trailer
     * @param \Swagger\Client\Model\VehicleID[] $trailer Trailer
     * @return $this
     */
    public function setTrailer($trailer)
    {
        $this->container['trailer'] = $trailer;

        return $this;
    }

    /**
     * Gets wagon
     * @return string
     */
    public function getWagon()
    {
        return $this->container['wagon'];
    }

    /**
     * Sets wagon
     * @param string $wagon
     * @return $this
     */
    public function setWagon($wagon)
    {
        if (!is_null($wagon) && (strlen($wagon) > 20)) {
            throw new \InvalidArgumentException('invalid length for $wagon when calling VehicleTransp., must be smaller than or equal to 20.');
        }
        if (!is_null($wagon) && (strlen($wagon) < 1)) {
            throw new \InvalidArgumentException('invalid length for $wagon when calling VehicleTransp., must be bigger than or equal to 1.');
        }

        $this->container['wagon'] = $wagon;

        return $this;
    }

    /**
     * Gets ferry
     * @return string
     */
    public function getFerry()
    {
        return $this->container['ferry'];
    }

    /**
     * Sets ferry
     * @param string $ferry Ferry
     * @return $this
     */
    public function setFerry($ferry)
    {
        if (!is_null($ferry) && (strlen($ferry) > 20)) {
            throw new \InvalidArgumentException('invalid length for $ferry when calling VehicleTransp., must be smaller than or equal to 20.');
        }
        if (!is_null($ferry) && (strlen($ferry) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ferry when calling VehicleTransp., must be bigger than or equal to 1.');
        }

        $this->container['ferry'] = $ferry;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


