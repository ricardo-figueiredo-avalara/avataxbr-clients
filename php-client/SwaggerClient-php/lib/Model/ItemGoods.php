<?php
/**
 * ItemGoods
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ItemGoods Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ItemGoods implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ItemGoods';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_id' => 'string',
        'code' => 'string',
        'agast' => 'string',
        'description' => 'string',
        'seal_code' => 'string',
        'n_fci' => 'string',
        'is_icms_st_substitute' => 'bool',
        'source' => 'string',
        'product_type' => 'string',
        'manufacturer_equivalent' => 'bool',
        'appropriate_ip_icredit_when_in_going' => 'bool',
        'usually_appropriate_piscofins_credit' => 'bool',
        'is_pis_cofins_estimated_credit' => 'bool',
        'piscofins_revenue_type' => 'string',
        'icms_base_discount_for_mono_phase_social_contr' => 'double',
        'cean' => 'string',
        'nve' => 'string',
        'sales_unit' => 'string',
        'sales_unit_ip_ifactor' => 'double',
        'sales_unit_icmsfactor' => 'double',
        'sales_unit_icms_stfactor' => 'double',
        'sales_unit_pis_cofinsfactor' => 'double',
        'purchase_unit' => 'string',
        'purchase_unit_ip_ifactor' => 'double',
        'purchase_unit_icmsfactor' => 'double',
        'purchase_unit_icms_stfactor' => 'double',
        'purchase_unit_pis_cofinsfactor' => 'double',
        'first_use' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'company_id' => 'companyId',
        'code' => 'code',
        'agast' => 'agast',
        'description' => 'description',
        'seal_code' => 'sealCode',
        'n_fci' => 'nFCI',
        'is_icms_st_substitute' => 'isIcmsStSubstitute',
        'source' => 'source',
        'product_type' => 'productType',
        'manufacturer_equivalent' => 'manufacturerEquivalent',
        'appropriate_ip_icredit_when_in_going' => 'appropriateIPIcreditWhenInGoing',
        'usually_appropriate_piscofins_credit' => 'usuallyAppropriatePISCOFINSCredit',
        'is_pis_cofins_estimated_credit' => 'isPisCofinsEstimatedCredit',
        'piscofins_revenue_type' => 'piscofinsRevenueType',
        'icms_base_discount_for_mono_phase_social_contr' => 'icmsBaseDiscountForMonoPhaseSocialContr',
        'cean' => 'cean',
        'nve' => 'nve',
        'sales_unit' => 'salesUnit',
        'sales_unit_ip_ifactor' => 'salesUnitIPIfactor',
        'sales_unit_icmsfactor' => 'salesUnitIcmsfactor',
        'sales_unit_icms_stfactor' => 'salesUnitIcmsStfactor',
        'sales_unit_pis_cofinsfactor' => 'salesUnitPisCofinsfactor',
        'purchase_unit' => 'purchaseUnit',
        'purchase_unit_ip_ifactor' => 'purchaseUnitIPIfactor',
        'purchase_unit_icmsfactor' => 'purchaseUnitIcmsfactor',
        'purchase_unit_icms_stfactor' => 'purchaseUnitIcmsStfactor',
        'purchase_unit_pis_cofinsfactor' => 'purchaseUnitPisCofinsfactor',
        'first_use' => 'firstUse'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'company_id' => 'setCompanyId',
        'code' => 'setCode',
        'agast' => 'setAgast',
        'description' => 'setDescription',
        'seal_code' => 'setSealCode',
        'n_fci' => 'setNFci',
        'is_icms_st_substitute' => 'setIsIcmsStSubstitute',
        'source' => 'setSource',
        'product_type' => 'setProductType',
        'manufacturer_equivalent' => 'setManufacturerEquivalent',
        'appropriate_ip_icredit_when_in_going' => 'setAppropriateIpIcreditWhenInGoing',
        'usually_appropriate_piscofins_credit' => 'setUsuallyAppropriatePiscofinsCredit',
        'is_pis_cofins_estimated_credit' => 'setIsPisCofinsEstimatedCredit',
        'piscofins_revenue_type' => 'setPiscofinsRevenueType',
        'icms_base_discount_for_mono_phase_social_contr' => 'setIcmsBaseDiscountForMonoPhaseSocialContr',
        'cean' => 'setCean',
        'nve' => 'setNve',
        'sales_unit' => 'setSalesUnit',
        'sales_unit_ip_ifactor' => 'setSalesUnitIpIfactor',
        'sales_unit_icmsfactor' => 'setSalesUnitIcmsfactor',
        'sales_unit_icms_stfactor' => 'setSalesUnitIcmsStfactor',
        'sales_unit_pis_cofinsfactor' => 'setSalesUnitPisCofinsfactor',
        'purchase_unit' => 'setPurchaseUnit',
        'purchase_unit_ip_ifactor' => 'setPurchaseUnitIpIfactor',
        'purchase_unit_icmsfactor' => 'setPurchaseUnitIcmsfactor',
        'purchase_unit_icms_stfactor' => 'setPurchaseUnitIcmsStfactor',
        'purchase_unit_pis_cofinsfactor' => 'setPurchaseUnitPisCofinsfactor',
        'first_use' => 'setFirstUse'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'company_id' => 'getCompanyId',
        'code' => 'getCode',
        'agast' => 'getAgast',
        'description' => 'getDescription',
        'seal_code' => 'getSealCode',
        'n_fci' => 'getNFci',
        'is_icms_st_substitute' => 'getIsIcmsStSubstitute',
        'source' => 'getSource',
        'product_type' => 'getProductType',
        'manufacturer_equivalent' => 'getManufacturerEquivalent',
        'appropriate_ip_icredit_when_in_going' => 'getAppropriateIpIcreditWhenInGoing',
        'usually_appropriate_piscofins_credit' => 'getUsuallyAppropriatePiscofinsCredit',
        'is_pis_cofins_estimated_credit' => 'getIsPisCofinsEstimatedCredit',
        'piscofins_revenue_type' => 'getPiscofinsRevenueType',
        'icms_base_discount_for_mono_phase_social_contr' => 'getIcmsBaseDiscountForMonoPhaseSocialContr',
        'cean' => 'getCean',
        'nve' => 'getNve',
        'sales_unit' => 'getSalesUnit',
        'sales_unit_ip_ifactor' => 'getSalesUnitIpIfactor',
        'sales_unit_icmsfactor' => 'getSalesUnitIcmsfactor',
        'sales_unit_icms_stfactor' => 'getSalesUnitIcmsStfactor',
        'sales_unit_pis_cofinsfactor' => 'getSalesUnitPisCofinsfactor',
        'purchase_unit' => 'getPurchaseUnit',
        'purchase_unit_ip_ifactor' => 'getPurchaseUnitIpIfactor',
        'purchase_unit_icmsfactor' => 'getPurchaseUnitIcmsfactor',
        'purchase_unit_icms_stfactor' => 'getPurchaseUnitIcmsStfactor',
        'purchase_unit_pis_cofinsfactor' => 'getPurchaseUnitPisCofinsfactor',
        'first_use' => 'getFirstUse'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SOURCE__0 = '0';
    const SOURCE__1 = '1';
    const SOURCE__2 = '2';
    const SOURCE__3 = '3';
    const SOURCE__4 = '4';
    const SOURCE__5 = '5';
    const SOURCE__6 = '6';
    const SOURCE__7 = '7';
    const SOURCE__8 = '8';
    const PRODUCT_TYPE_FOR_PRODUCT = 'FOR PRODUCT';
    const PRODUCT_TYPE_FOR_MERCHANDISE = 'FOR MERCHANDISE';
    const PRODUCT_TYPE_NO_RESTRICTION = 'NO RESTRICTION';
    const PRODUCT_TYPE_SERVICE = 'SERVICE';
    const PRODUCT_TYPE_FEEDSTOCK = 'FEEDSTOCK';
    const PRODUCT_TYPE_FIXED_ASSETS = 'FIXED ASSETS';
    const PISCOFINS_REVENUE_TYPE__01 = '01';
    const PISCOFINS_REVENUE_TYPE__02 = '02';
    const PISCOFINS_REVENUE_TYPE__03 = '03';
    const PISCOFINS_REVENUE_TYPE__04 = '04';
    const PISCOFINS_REVENUE_TYPE__05 = '05';
    const PISCOFINS_REVENUE_TYPE__06 = '06';
    const PISCOFINS_REVENUE_TYPE__07 = '07';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE__0,
            self::SOURCE__1,
            self::SOURCE__2,
            self::SOURCE__3,
            self::SOURCE__4,
            self::SOURCE__5,
            self::SOURCE__6,
            self::SOURCE__7,
            self::SOURCE__8,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getProductTypeAllowableValues()
    {
        return [
            self::PRODUCT_TYPE_FOR_PRODUCT,
            self::PRODUCT_TYPE_FOR_MERCHANDISE,
            self::PRODUCT_TYPE_NO_RESTRICTION,
            self::PRODUCT_TYPE_SERVICE,
            self::PRODUCT_TYPE_FEEDSTOCK,
            self::PRODUCT_TYPE_FIXED_ASSETS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPiscofinsRevenueTypeAllowableValues()
    {
        return [
            self::PISCOFINS_REVENUE_TYPE__01,
            self::PISCOFINS_REVENUE_TYPE__02,
            self::PISCOFINS_REVENUE_TYPE__03,
            self::PISCOFINS_REVENUE_TYPE__04,
            self::PISCOFINS_REVENUE_TYPE__05,
            self::PISCOFINS_REVENUE_TYPE__06,
            self::PISCOFINS_REVENUE_TYPE__07,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['agast'] = isset($data['agast']) ? $data['agast'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['seal_code'] = isset($data['seal_code']) ? $data['seal_code'] : null;
        $this->container['n_fci'] = isset($data['n_fci']) ? $data['n_fci'] : null;
        $this->container['is_icms_st_substitute'] = isset($data['is_icms_st_substitute']) ? $data['is_icms_st_substitute'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['product_type'] = isset($data['product_type']) ? $data['product_type'] : null;
        $this->container['manufacturer_equivalent'] = isset($data['manufacturer_equivalent']) ? $data['manufacturer_equivalent'] : null;
        $this->container['appropriate_ip_icredit_when_in_going'] = isset($data['appropriate_ip_icredit_when_in_going']) ? $data['appropriate_ip_icredit_when_in_going'] : null;
        $this->container['usually_appropriate_piscofins_credit'] = isset($data['usually_appropriate_piscofins_credit']) ? $data['usually_appropriate_piscofins_credit'] : null;
        $this->container['is_pis_cofins_estimated_credit'] = isset($data['is_pis_cofins_estimated_credit']) ? $data['is_pis_cofins_estimated_credit'] : null;
        $this->container['piscofins_revenue_type'] = isset($data['piscofins_revenue_type']) ? $data['piscofins_revenue_type'] : null;
        $this->container['icms_base_discount_for_mono_phase_social_contr'] = isset($data['icms_base_discount_for_mono_phase_social_contr']) ? $data['icms_base_discount_for_mono_phase_social_contr'] : null;
        $this->container['cean'] = isset($data['cean']) ? $data['cean'] : null;
        $this->container['nve'] = isset($data['nve']) ? $data['nve'] : null;
        $this->container['sales_unit'] = isset($data['sales_unit']) ? $data['sales_unit'] : null;
        $this->container['sales_unit_ip_ifactor'] = isset($data['sales_unit_ip_ifactor']) ? $data['sales_unit_ip_ifactor'] : null;
        $this->container['sales_unit_icmsfactor'] = isset($data['sales_unit_icmsfactor']) ? $data['sales_unit_icmsfactor'] : null;
        $this->container['sales_unit_icms_stfactor'] = isset($data['sales_unit_icms_stfactor']) ? $data['sales_unit_icms_stfactor'] : null;
        $this->container['sales_unit_pis_cofinsfactor'] = isset($data['sales_unit_pis_cofinsfactor']) ? $data['sales_unit_pis_cofinsfactor'] : null;
        $this->container['purchase_unit'] = isset($data['purchase_unit']) ? $data['purchase_unit'] : null;
        $this->container['purchase_unit_ip_ifactor'] = isset($data['purchase_unit_ip_ifactor']) ? $data['purchase_unit_ip_ifactor'] : null;
        $this->container['purchase_unit_icmsfactor'] = isset($data['purchase_unit_icmsfactor']) ? $data['purchase_unit_icmsfactor'] : null;
        $this->container['purchase_unit_icms_stfactor'] = isset($data['purchase_unit_icms_stfactor']) ? $data['purchase_unit_icms_stfactor'] : null;
        $this->container['purchase_unit_pis_cofinsfactor'] = isset($data['purchase_unit_pis_cofinsfactor']) ? $data['purchase_unit_pis_cofinsfactor'] : null;
        $this->container['first_use'] = isset($data['first_use']) ? $data['first_use'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['company_id'] === null) {
            $invalid_properties[] = "'company_id' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalid_properties[] = "'code' can't be null";
        }
        if ((strlen($this->container['code']) > 60)) {
            $invalid_properties[] = "invalid value for 'code', the character length must be smaller than or equal to 60.";
        }

        if ($this->container['agast'] === null) {
            $invalid_properties[] = "'agast' can't be null";
        }
        if ((strlen($this->container['agast']) > 60)) {
            $invalid_properties[] = "invalid value for 'agast', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['description']) && (strlen($this->container['description']) > 60)) {
            $invalid_properties[] = "invalid value for 'description', the character length must be smaller than or equal to 60.";
        }

        if ($this->container['seal_code'] === null) {
            $invalid_properties[] = "'seal_code' can't be null";
        }
        if ((strlen($this->container['seal_code']) > 60)) {
            $invalid_properties[] = "invalid value for 'seal_code', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['n_fci']) && !preg_match("/[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/", $this->container['n_fci'])) {
            $invalid_properties[] = "invalid value for 'n_fci', must be conform to the pattern /[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/.";
        }

        $allowed_values = ["0", "1", "2", "3", "4", "5", "6", "7", "8"];
        if (!in_array($this->container['source'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'source', must be one of #{allowed_values}.";
        }

        $allowed_values = ["FOR PRODUCT", "FOR MERCHANDISE", "NO RESTRICTION", "SERVICE", "FEEDSTOCK", "FIXED ASSETS"];
        if (!in_array($this->container['product_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'product_type', must be one of #{allowed_values}.";
        }

        $allowed_values = ["01", "02", "03", "04", "05", "06", "07"];
        if (!in_array($this->container['piscofins_revenue_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'piscofins_revenue_type', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['cean']) && !preg_match("/[0-9]{0}|[0-9]{8}|[0-9]{12,14}/", $this->container['cean'])) {
            $invalid_properties[] = "invalid value for 'cean', must be conform to the pattern /[0-9]{0}|[0-9]{8}|[0-9]{12,14}/.";
        }

        if (!is_null($this->container['nve']) && !preg_match("/[A-Z]{2}[0-9]{4}/", $this->container['nve'])) {
            $invalid_properties[] = "invalid value for 'nve', must be conform to the pattern /[A-Z]{2}[0-9]{4}/.";
        }

        if (!is_null($this->container['sales_unit']) && (strlen($this->container['sales_unit']) > 6)) {
            $invalid_properties[] = "invalid value for 'sales_unit', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['purchase_unit']) && (strlen($this->container['purchase_unit']) > 6)) {
            $invalid_properties[] = "invalid value for 'purchase_unit', the character length must be smaller than or equal to 6.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['company_id'] === null) {
            return false;
        }
        if ($this->container['code'] === null) {
            return false;
        }
        if (strlen($this->container['code']) > 60) {
            return false;
        }
        if ($this->container['agast'] === null) {
            return false;
        }
        if (strlen($this->container['agast']) > 60) {
            return false;
        }
        if (strlen($this->container['description']) > 60) {
            return false;
        }
        if ($this->container['seal_code'] === null) {
            return false;
        }
        if (strlen($this->container['seal_code']) > 60) {
            return false;
        }
        if (!preg_match("/[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/", $this->container['n_fci'])) {
            return false;
        }
        $allowed_values = ["0", "1", "2", "3", "4", "5", "6", "7", "8"];
        if (!in_array($this->container['source'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["FOR PRODUCT", "FOR MERCHANDISE", "NO RESTRICTION", "SERVICE", "FEEDSTOCK", "FIXED ASSETS"];
        if (!in_array($this->container['product_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["01", "02", "03", "04", "05", "06", "07"];
        if (!in_array($this->container['piscofins_revenue_type'], $allowed_values)) {
            return false;
        }
        if (!preg_match("/[0-9]{0}|[0-9]{8}|[0-9]{12,14}/", $this->container['cean'])) {
            return false;
        }
        if (!preg_match("/[A-Z]{2}[0-9]{4}/", $this->container['nve'])) {
            return false;
        }
        if (strlen($this->container['sales_unit']) > 6) {
            return false;
        }
        if (strlen($this->container['purchase_unit']) > 6) {
            return false;
        }
        return true;
    }


    /**
     * Gets company_id
     * @return string
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     * @param string $company_id Company ID
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code ERP Code
     * @return $this
     */
    public function setCode($code)
    {
        if ((strlen($code) > 60)) {
            throw new \InvalidArgumentException('invalid length for $code when calling ItemGoods., must be smaller than or equal to 60.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets agast
     * @return string
     */
    public function getAgast()
    {
        return $this->container['agast'];
    }

    /**
     * Sets agast
     * @param string $agast Agast Code
     * @return $this
     */
    public function setAgast($agast)
    {
        if ((strlen($agast) > 60)) {
            throw new \InvalidArgumentException('invalid length for $agast when calling ItemGoods., must be smaller than or equal to 60.');
        }

        $this->container['agast'] = $agast;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Item Description
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (strlen($description) > 60)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ItemGoods., must be smaller than or equal to 60.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets seal_code
     * @return string
     */
    public function getSealCode()
    {
        return $this->container['seal_code'];
    }

    /**
     * Sets seal_code
     * @param string $seal_code Seal Code for ipi tax control (código do selo para controle de IPI)
     * @return $this
     */
    public function setSealCode($seal_code)
    {
        if ((strlen($seal_code) > 60)) {
            throw new \InvalidArgumentException('invalid length for $seal_code when calling ItemGoods., must be smaller than or equal to 60.');
        }

        $this->container['seal_code'] = $seal_code;

        return $this;
    }

    /**
     * Gets n_fci
     * @return string
     */
    public function getNFci()
    {
        return $this->container['n_fci'];
    }

    /**
     * Sets n_fci
     * @param string $n_fci Importation content form number (Número de controle da FCI - Ficha de Conteúdo de Importação)
     * @return $this
     */
    public function setNFci($n_fci)
    {

        if (!is_null($n_fci) && (!preg_match("/[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/", $n_fci))) {
            throw new \InvalidArgumentException("invalid value for $n_fci when calling ItemGoods., must conform to the pattern /[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/.");
        }

        $this->container['n_fci'] = $n_fci;

        return $this;
    }

    /**
     * Gets is_icms_st_substitute
     * @return bool
     */
    public function getIsIcmsStSubstitute()
    {
        return $this->container['is_icms_st_substitute'];
    }

    /**
     * Sets is_icms_st_substitute
     * @param bool $is_icms_st_substitute this field inform that this merchandise or product is ICMS Substitute Must be used when the item is for resale and the company will assume the role of ICMS Substitute (wholesaler, retailer, distributor). Example: when Importing some product the company does not pay IcmsSt at the time of customs clearance but when selling sale the item. Deverá ser utilizado quando a empresa que irá vender a mercadoria sujeita ao ICMS ST for o SUBSTITUTO TRIBUTÁRIO (Distribuidor, atacadista e varejista), como por exemplo das mercadorias IMPORTADAS, neste sentido, a empresa não irá pagar o ICMS ST no desembaraço aduaneiro e irá recolher quando for vender as mesmas.
     * @return $this
     */
    public function setIsIcmsStSubstitute($is_icms_st_substitute)
    {
        $this->container['is_icms_st_substitute'] = $is_icms_st_substitute;

        return $this;
    }

    /**
     * Gets source
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     * @param string $source - '0' # National goods - except those treated in codes 3,4, 5 and 8 - '1' # Foreign goods - Imported directly by seller, except those in code 6 - '2' # Foreign goods - Acquired in the internal market (inside Brazil), except those in code 7 - '3' # National goods - Merchandise or goods with imported content above 40% and with less than or equal to 70% - '4' # National goods from production following 'standard basic processes' as stablished by legislation (standard basic processes are devised to separate simple assembly from manufaturing processes) - '5' # National goods - Merchandise or goods with imported content equal or below 40% - '6' # Foreign goods - Directly imported by Seller, without a National Equivalent as listed by Comex and natural gas - '7' # Foreign goods - Acquired inside Brazil, without a National Equivalent  as listed by Comex and natural gas - '8' # National goods - Merchandise or goods with imported content above 70%
     * @return $this
     */
    public function setSource($source)
    {
        $allowed_values = array('0', '1', '2', '3', '4', '5', '6', '7', '8');
        if (!is_null($source) && (!in_array($source, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'source', must be one of '0', '1', '2', '3', '4', '5', '6', '7', '8'");
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets product_type
     * @return string
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     * @param string $product_type
     * @return $this
     */
    public function setProductType($product_type)
    {
        $allowed_values = array('FOR PRODUCT', 'FOR MERCHANDISE', 'NO RESTRICTION', 'SERVICE', 'FEEDSTOCK', 'FIXED ASSETS');
        if (!is_null($product_type) && (!in_array($product_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'product_type', must be one of 'FOR PRODUCT', 'FOR MERCHANDISE', 'NO RESTRICTION', 'SERVICE', 'FEEDSTOCK', 'FIXED ASSETS'");
        }
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets manufacturer_equivalent
     * @return bool
     */
    public function getManufacturerEquivalent()
    {
        return $this->container['manufacturer_equivalent'];
    }

    /**
     * Sets manufacturer_equivalent
     * @param bool $manufacturer_equivalent Item is merchandise but will be considered product
     * @return $this
     */
    public function setManufacturerEquivalent($manufacturer_equivalent)
    {
        $this->container['manufacturer_equivalent'] = $manufacturer_equivalent;

        return $this;
    }

    /**
     * Gets appropriate_ip_icredit_when_in_going
     * @return bool
     */
    public function getAppropriateIpIcreditWhenInGoing()
    {
        return $this->container['appropriate_ip_icredit_when_in_going'];
    }

    /**
     * Sets appropriate_ip_icredit_when_in_going
     * @param bool $appropriate_ip_icredit_when_in_going Inform that this item will have rights to aprropriate IPI credit
     * @return $this
     */
    public function setAppropriateIpIcreditWhenInGoing($appropriate_ip_icredit_when_in_going)
    {
        $this->container['appropriate_ip_icredit_when_in_going'] = $appropriate_ip_icredit_when_in_going;

        return $this;
    }

    /**
     * Gets usually_appropriate_piscofins_credit
     * @return bool
     */
    public function getUsuallyAppropriatePiscofinsCredit()
    {
        return $this->container['usually_appropriate_piscofins_credit'];
    }

    /**
     * Sets usually_appropriate_piscofins_credit
     * @param bool $usually_appropriate_piscofins_credit Subject to appropriate PIS/COFINS credit, when NO CUMULATIVE
     * @return $this
     */
    public function setUsuallyAppropriatePiscofinsCredit($usually_appropriate_piscofins_credit)
    {
        $this->container['usually_appropriate_piscofins_credit'] = $usually_appropriate_piscofins_credit;

        return $this;
    }

    /**
     * Gets is_pis_cofins_estimated_credit
     * @return bool
     */
    public function getIsPisCofinsEstimatedCredit()
    {
        return $this->container['is_pis_cofins_estimated_credit'];
    }

    /**
     * Sets is_pis_cofins_estimated_credit
     * @param bool $is_pis_cofins_estimated_credit The credit PIS/COFINS is subject to purchase form companies, but exist some exceptions, when the credit will be a estimated amount
     * @return $this
     */
    public function setIsPisCofinsEstimatedCredit($is_pis_cofins_estimated_credit)
    {
        $this->container['is_pis_cofins_estimated_credit'] = $is_pis_cofins_estimated_credit;

        return $this;
    }

    /**
     * Gets piscofins_revenue_type
     * @return string
     */
    public function getPiscofinsRevenueType()
    {
        return $this->container['piscofins_revenue_type'];
    }

    /**
     * Sets piscofins_revenue_type
     * @param string $piscofins_revenue_type - '01' # Vinculada Exclusivamente a Receita Tributada no Mercado Interno - '02' # Exclusivamente a Receita Não Tributada no Mercado Interno - '03' # Exclusivamente a Receita de Exportação - '04' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno - '05' # Vinculada a Receitas Tributadas no Mercado Interno e de Exportação - '06' # Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação - '07' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação
     * @return $this
     */
    public function setPiscofinsRevenueType($piscofins_revenue_type)
    {
        $allowed_values = array('01', '02', '03', '04', '05', '06', '07');
        if (!is_null($piscofins_revenue_type) && (!in_array($piscofins_revenue_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'piscofins_revenue_type', must be one of '01', '02', '03', '04', '05', '06', '07'");
        }
        $this->container['piscofins_revenue_type'] = $piscofins_revenue_type;

        return $this;
    }

    /**
     * Gets icms_base_discount_for_mono_phase_social_contr
     * @return double
     */
    public function getIcmsBaseDiscountForMonoPhaseSocialContr()
    {
        return $this->container['icms_base_discount_for_mono_phase_social_contr'];
    }

    /**
     * Sets icms_base_discount_for_mono_phase_social_contr
     * @param double $icms_base_discount_for_mono_phase_social_contr Discount allowed on icms base when PIS/COFINS are Monophase
     * @return $this
     */
    public function setIcmsBaseDiscountForMonoPhaseSocialContr($icms_base_discount_for_mono_phase_social_contr)
    {
        $this->container['icms_base_discount_for_mono_phase_social_contr'] = $icms_base_discount_for_mono_phase_social_contr;

        return $this;
    }

    /**
     * Gets cean
     * @return string
     */
    public function getCean()
    {
        return $this->container['cean'];
    }

    /**
     * Sets cean
     * @param string $cean GTIN NUMBER
     * @return $this
     */
    public function setCean($cean)
    {

        if (!is_null($cean) && (!preg_match("/[0-9]{0}|[0-9]{8}|[0-9]{12,14}/", $cean))) {
            throw new \InvalidArgumentException("invalid value for $cean when calling ItemGoods., must conform to the pattern /[0-9]{0}|[0-9]{8}|[0-9]{12,14}/.");
        }

        $this->container['cean'] = $cean;

        return $this;
    }

    /**
     * Gets nve
     * @return string
     */
    public function getNve()
    {
        return $this->container['nve'];
    }

    /**
     * Sets nve
     * @param string $nve Nomenclatura de Valor aduaneio e Estatístico - NCM extension code
     * @return $this
     */
    public function setNve($nve)
    {

        if (!is_null($nve) && (!preg_match("/[A-Z]{2}[0-9]{4}/", $nve))) {
            throw new \InvalidArgumentException("invalid value for $nve when calling ItemGoods., must conform to the pattern /[A-Z]{2}[0-9]{4}/.");
        }

        $this->container['nve'] = $nve;

        return $this;
    }

    /**
     * Gets sales_unit
     * @return string
     */
    public function getSalesUnit()
    {
        return $this->container['sales_unit'];
    }

    /**
     * Sets sales_unit
     * @param string $sales_unit
     * @return $this
     */
    public function setSalesUnit($sales_unit)
    {
        if (!is_null($sales_unit) && (strlen($sales_unit) > 6)) {
            throw new \InvalidArgumentException('invalid length for $sales_unit when calling ItemGoods., must be smaller than or equal to 6.');
        }

        $this->container['sales_unit'] = $sales_unit;

        return $this;
    }

    /**
     * Gets sales_unit_ip_ifactor
     * @return double
     */
    public function getSalesUnitIpIfactor()
    {
        return $this->container['sales_unit_ip_ifactor'];
    }

    /**
     * Sets sales_unit_ip_ifactor
     * @param double $sales_unit_ip_ifactor factor to convert sales quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)
     * @return $this
     */
    public function setSalesUnitIpIfactor($sales_unit_ip_ifactor)
    {
        $this->container['sales_unit_ip_ifactor'] = $sales_unit_ip_ifactor;

        return $this;
    }

    /**
     * Gets sales_unit_icmsfactor
     * @return double
     */
    public function getSalesUnitIcmsfactor()
    {
        return $this->container['sales_unit_icmsfactor'];
    }

    /**
     * Sets sales_unit_icmsfactor
     * @param double $sales_unit_icmsfactor factor to convert sales quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
     * @return $this
     */
    public function setSalesUnitIcmsfactor($sales_unit_icmsfactor)
    {
        $this->container['sales_unit_icmsfactor'] = $sales_unit_icmsfactor;

        return $this;
    }

    /**
     * Gets sales_unit_icms_stfactor
     * @return double
     */
    public function getSalesUnitIcmsStfactor()
    {
        return $this->container['sales_unit_icms_stfactor'];
    }

    /**
     * Sets sales_unit_icms_stfactor
     * @param double $sales_unit_icms_stfactor factor to convert sales quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)
     * @return $this
     */
    public function setSalesUnitIcmsStfactor($sales_unit_icms_stfactor)
    {
        $this->container['sales_unit_icms_stfactor'] = $sales_unit_icms_stfactor;

        return $this;
    }

    /**
     * Gets sales_unit_pis_cofinsfactor
     * @return double
     */
    public function getSalesUnitPisCofinsfactor()
    {
        return $this->container['sales_unit_pis_cofinsfactor'];
    }

    /**
     * Sets sales_unit_pis_cofinsfactor
     * @param double $sales_unit_pis_cofinsfactor factor to convert sales quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
     * @return $this
     */
    public function setSalesUnitPisCofinsfactor($sales_unit_pis_cofinsfactor)
    {
        $this->container['sales_unit_pis_cofinsfactor'] = $sales_unit_pis_cofinsfactor;

        return $this;
    }

    /**
     * Gets purchase_unit
     * @return string
     */
    public function getPurchaseUnit()
    {
        return $this->container['purchase_unit'];
    }

    /**
     * Sets purchase_unit
     * @param string $purchase_unit
     * @return $this
     */
    public function setPurchaseUnit($purchase_unit)
    {
        if (!is_null($purchase_unit) && (strlen($purchase_unit) > 6)) {
            throw new \InvalidArgumentException('invalid length for $purchase_unit when calling ItemGoods., must be smaller than or equal to 6.');
        }

        $this->container['purchase_unit'] = $purchase_unit;

        return $this;
    }

    /**
     * Gets purchase_unit_ip_ifactor
     * @return double
     */
    public function getPurchaseUnitIpIfactor()
    {
        return $this->container['purchase_unit_ip_ifactor'];
    }

    /**
     * Sets purchase_unit_ip_ifactor
     * @param double $purchase_unit_ip_ifactor factor to convert purchase quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)
     * @return $this
     */
    public function setPurchaseUnitIpIfactor($purchase_unit_ip_ifactor)
    {
        $this->container['purchase_unit_ip_ifactor'] = $purchase_unit_ip_ifactor;

        return $this;
    }

    /**
     * Gets purchase_unit_icmsfactor
     * @return double
     */
    public function getPurchaseUnitIcmsfactor()
    {
        return $this->container['purchase_unit_icmsfactor'];
    }

    /**
     * Sets purchase_unit_icmsfactor
     * @param double $purchase_unit_icmsfactor factor to convert purchase quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
     * @return $this
     */
    public function setPurchaseUnitIcmsfactor($purchase_unit_icmsfactor)
    {
        $this->container['purchase_unit_icmsfactor'] = $purchase_unit_icmsfactor;

        return $this;
    }

    /**
     * Gets purchase_unit_icms_stfactor
     * @return double
     */
    public function getPurchaseUnitIcmsStfactor()
    {
        return $this->container['purchase_unit_icms_stfactor'];
    }

    /**
     * Sets purchase_unit_icms_stfactor
     * @param double $purchase_unit_icms_stfactor factor to convert purchase quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)
     * @return $this
     */
    public function setPurchaseUnitIcmsStfactor($purchase_unit_icms_stfactor)
    {
        $this->container['purchase_unit_icms_stfactor'] = $purchase_unit_icms_stfactor;

        return $this;
    }

    /**
     * Gets purchase_unit_pis_cofinsfactor
     * @return double
     */
    public function getPurchaseUnitPisCofinsfactor()
    {
        return $this->container['purchase_unit_pis_cofinsfactor'];
    }

    /**
     * Sets purchase_unit_pis_cofinsfactor
     * @param double $purchase_unit_pis_cofinsfactor factor to convert purchase quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
     * @return $this
     */
    public function setPurchaseUnitPisCofinsfactor($purchase_unit_pis_cofinsfactor)
    {
        $this->container['purchase_unit_pis_cofinsfactor'] = $purchase_unit_pis_cofinsfactor;

        return $this;
    }

    /**
     * Gets first_use
     * @return bool
     */
    public function getFirstUse()
    {
        return $this->container['first_use'];
    }

    /**
     * Sets first_use
     * @param bool $first_use When the product is new, and will be retail, firt time that it exit it is subject to IPI
     * @return $this
     */
    public function setFirstUse($first_use)
    {
        $this->container['first_use'] = $first_use;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


