<?php
/**
 * SalesEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SalesEntity Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SalesEntity implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SalesEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'type' => '\Swagger\Client\Model\EntityType',
        'email' => 'string',
        'cnpjcpf' => 'string',
        'city_tax_id' => 'string',
        'state_tax_id' => 'string',
        'suframa' => 'string',
        'phone' => 'string',
        'tax_regime' => '\Swagger\Client\Model\FederalTaxRegime',
        'special_tax_regime' => 'string',
        'subject_to_srf1234' => 'bool',
        'required_withholding_iss' => 'bool',
        'art' => 'string',
        'admin_process' => 'string',
        'build_code' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'type' => 'type',
        'email' => 'email',
        'cnpjcpf' => 'cnpjcpf',
        'city_tax_id' => 'cityTaxId',
        'state_tax_id' => 'stateTaxId',
        'suframa' => 'suframa',
        'phone' => 'phone',
        'tax_regime' => 'taxRegime',
        'special_tax_regime' => 'specialTaxRegime',
        'subject_to_srf1234' => 'subjectToSRF1234',
        'required_withholding_iss' => 'requiredWithholdingISS',
        'art' => 'art',
        'admin_process' => 'adminProcess',
        'build_code' => 'buildCode'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'type' => 'setType',
        'email' => 'setEmail',
        'cnpjcpf' => 'setCnpjcpf',
        'city_tax_id' => 'setCityTaxId',
        'state_tax_id' => 'setStateTaxId',
        'suframa' => 'setSuframa',
        'phone' => 'setPhone',
        'tax_regime' => 'setTaxRegime',
        'special_tax_regime' => 'setSpecialTaxRegime',
        'subject_to_srf1234' => 'setSubjectToSrf1234',
        'required_withholding_iss' => 'setRequiredWithholdingIss',
        'art' => 'setArt',
        'admin_process' => 'setAdminProcess',
        'build_code' => 'setBuildCode'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'type' => 'getType',
        'email' => 'getEmail',
        'cnpjcpf' => 'getCnpjcpf',
        'city_tax_id' => 'getCityTaxId',
        'state_tax_id' => 'getStateTaxId',
        'suframa' => 'getSuframa',
        'phone' => 'getPhone',
        'tax_regime' => 'getTaxRegime',
        'special_tax_regime' => 'getSpecialTaxRegime',
        'subject_to_srf1234' => 'getSubjectToSrf1234',
        'required_withholding_iss' => 'getRequiredWithholdingIss',
        'art' => 'getArt',
        'admin_process' => 'getAdminProcess',
        'build_code' => 'getBuildCode'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SPECIAL_TAX_REGIME_MEM = 'MEM';
    const SPECIAL_TAX_REGIME_EST = 'EST';
    const SPECIAL_TAX_REGIME_SPR = 'SPR';
    const SPECIAL_TAX_REGIME_COP = 'COP';
    const SPECIAL_TAX_REGIME_MEI = 'MEI';
    const SPECIAL_TAX_REGIME_MPP = 'MPP';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSpecialTaxRegimeAllowableValues()
    {
        return [
            self::SPECIAL_TAX_REGIME_MEM,
            self::SPECIAL_TAX_REGIME_EST,
            self::SPECIAL_TAX_REGIME_SPR,
            self::SPECIAL_TAX_REGIME_COP,
            self::SPECIAL_TAX_REGIME_MEI,
            self::SPECIAL_TAX_REGIME_MPP,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['cnpjcpf'] = isset($data['cnpjcpf']) ? $data['cnpjcpf'] : null;
        $this->container['city_tax_id'] = isset($data['city_tax_id']) ? $data['city_tax_id'] : null;
        $this->container['state_tax_id'] = isset($data['state_tax_id']) ? $data['state_tax_id'] : null;
        $this->container['suframa'] = isset($data['suframa']) ? $data['suframa'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['tax_regime'] = isset($data['tax_regime']) ? $data['tax_regime'] : null;
        $this->container['special_tax_regime'] = isset($data['special_tax_regime']) ? $data['special_tax_regime'] : null;
        $this->container['subject_to_srf1234'] = isset($data['subject_to_srf1234']) ? $data['subject_to_srf1234'] : null;
        $this->container['required_withholding_iss'] = isset($data['required_withholding_iss']) ? $data['required_withholding_iss'] : null;
        $this->container['art'] = isset($data['art']) ? $data['art'] : null;
        $this->container['admin_process'] = isset($data['admin_process']) ? $data['admin_process'] : null;
        $this->container['build_code'] = isset($data['build_code']) ? $data['build_code'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['name']) && (strlen($this->container['name']) > 60)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 60.";
        }

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if (!is_null($this->container['email']) && (strlen($this->container['email']) > 60)) {
            $invalid_properties[] = "invalid value for 'email', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['cnpjcpf']) && !preg_match("/([!-ÿ]{0}|[!-ÿ]{5,20})?/", $this->container['cnpjcpf'])) {
            $invalid_properties[] = "invalid value for 'cnpjcpf', must be conform to the pattern /([!-ÿ]{0}|[!-ÿ]{5,20})?/.";
        }

        if (!is_null($this->container['city_tax_id']) && (strlen($this->container['city_tax_id']) > 15)) {
            $invalid_properties[] = "invalid value for 'city_tax_id', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['state_tax_id']) && !preg_match("/[0-9]{2,14}|ISENTO/", $this->container['state_tax_id'])) {
            $invalid_properties[] = "invalid value for 'state_tax_id', must be conform to the pattern /[0-9]{2,14}|ISENTO/.";
        }

        if (!is_null($this->container['suframa']) && !preg_match("/[0-9]{8,9}/", $this->container['suframa'])) {
            $invalid_properties[] = "invalid value for 'suframa', must be conform to the pattern /[0-9]{8,9}/.";
        }

        if (!is_null($this->container['phone']) && !preg_match("/[0-9]{6,14}/", $this->container['phone'])) {
            $invalid_properties[] = "invalid value for 'phone', must be conform to the pattern /[0-9]{6,14}/.";
        }

        if ($this->container['tax_regime'] === null) {
            $invalid_properties[] = "'tax_regime' can't be null";
        }
        $allowed_values = ["MEM", "EST", "SPR", "COP", "MEI", "MPP"];
        if (!in_array($this->container['special_tax_regime'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'special_tax_regime', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['art']) && (strlen($this->container['art']) > 15)) {
            $invalid_properties[] = "invalid value for 'art', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['admin_process']) && (strlen($this->container['admin_process']) > 30)) {
            $invalid_properties[] = "invalid value for 'admin_process', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['build_code']) && (strlen($this->container['build_code']) > 15)) {
            $invalid_properties[] = "invalid value for 'build_code', the character length must be smaller than or equal to 15.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['name']) > 60) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if (strlen($this->container['email']) > 60) {
            return false;
        }
        if (!preg_match("/([!-ÿ]{0}|[!-ÿ]{5,20})?/", $this->container['cnpjcpf'])) {
            return false;
        }
        if (strlen($this->container['city_tax_id']) > 15) {
            return false;
        }
        if (!preg_match("/[0-9]{2,14}|ISENTO/", $this->container['state_tax_id'])) {
            return false;
        }
        if (!preg_match("/[0-9]{8,9}/", $this->container['suframa'])) {
            return false;
        }
        if (!preg_match("/[0-9]{6,14}/", $this->container['phone'])) {
            return false;
        }
        if ($this->container['tax_regime'] === null) {
            return false;
        }
        $allowed_values = ["MEM", "EST", "SPR", "COP", "MEI", "MPP"];
        if (!in_array($this->container['special_tax_regime'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['art']) > 15) {
            return false;
        }
        if (strlen($this->container['admin_process']) > 30) {
            return false;
        }
        if (strlen($this->container['build_code']) > 15) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name SERVICE BUYER NAME OFFICIAL
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (strlen($name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SalesEntity., must be smaller than or equal to 60.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     * @return \Swagger\Client\Model\EntityType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param \Swagger\Client\Model\EntityType $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Entity Email
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (strlen($email) > 60)) {
            throw new \InvalidArgumentException('invalid length for $email when calling SalesEntity., must be smaller than or equal to 60.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets cnpjcpf
     * @return string
     */
    public function getCnpjcpf()
    {
        return $this->container['cnpjcpf'];
    }

    /**
     * Sets cnpjcpf
     * @param string $cnpjcpf CNPJ/CPF of Sales Buyer, if CPF pattern is '[0-9]{11}' if CNPJ pattern is '[0-9]{14}'
     * @return $this
     */
    public function setCnpjcpf($cnpjcpf)
    {

        if (!is_null($cnpjcpf) && (!preg_match("/([!-ÿ]{0}|[!-ÿ]{5,20})?/", $cnpjcpf))) {
            throw new \InvalidArgumentException("invalid value for $cnpjcpf when calling SalesEntity., must conform to the pattern /([!-ÿ]{0}|[!-ÿ]{5,20})?/.");
        }

        $this->container['cnpjcpf'] = $cnpjcpf;

        return $this;
    }

    /**
     * Gets city_tax_id
     * @return string
     */
    public function getCityTaxId()
    {
        return $this->container['city_tax_id'];
    }

    /**
     * Sets city_tax_id
     * @param string $city_tax_id City Tax ID
     * @return $this
     */
    public function setCityTaxId($city_tax_id)
    {
        if (!is_null($city_tax_id) && (strlen($city_tax_id) > 15)) {
            throw new \InvalidArgumentException('invalid length for $city_tax_id when calling SalesEntity., must be smaller than or equal to 15.');
        }

        $this->container['city_tax_id'] = $city_tax_id;

        return $this;
    }

    /**
     * Gets state_tax_id
     * @return string
     */
    public function getStateTaxId()
    {
        return $this->container['state_tax_id'];
    }

    /**
     * Sets state_tax_id
     * @param string $state_tax_id State Tax ID
     * @return $this
     */
    public function setStateTaxId($state_tax_id)
    {

        if (!is_null($state_tax_id) && (!preg_match("/[0-9]{2,14}|ISENTO/", $state_tax_id))) {
            throw new \InvalidArgumentException("invalid value for $state_tax_id when calling SalesEntity., must conform to the pattern /[0-9]{2,14}|ISENTO/.");
        }

        $this->container['state_tax_id'] = $state_tax_id;

        return $this;
    }

    /**
     * Gets suframa
     * @return string
     */
    public function getSuframa()
    {
        return $this->container['suframa'];
    }

    /**
     * Sets suframa
     * @param string $suframa Suframa ID
     * @return $this
     */
    public function setSuframa($suframa)
    {

        if (!is_null($suframa) && (!preg_match("/[0-9]{8,9}/", $suframa))) {
            throw new \InvalidArgumentException("invalid value for $suframa when calling SalesEntity., must conform to the pattern /[0-9]{8,9}/.");
        }

        $this->container['suframa'] = $suframa;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone Entity Phone
     * @return $this
     */
    public function setPhone($phone)
    {

        if (!is_null($phone) && (!preg_match("/[0-9]{6,14}/", $phone))) {
            throw new \InvalidArgumentException("invalid value for $phone when calling SalesEntity., must conform to the pattern /[0-9]{6,14}/.");
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets tax_regime
     * @return \Swagger\Client\Model\FederalTaxRegime
     */
    public function getTaxRegime()
    {
        return $this->container['tax_regime'];
    }

    /**
     * Sets tax_regime
     * @param \Swagger\Client\Model\FederalTaxRegime $tax_regime
     * @return $this
     */
    public function setTaxRegime($tax_regime)
    {
        $this->container['tax_regime'] = $tax_regime;

        return $this;
    }

    /**
     * Gets special_tax_regime
     * @return string
     */
    public function getSpecialTaxRegime()
    {
        return $this->container['special_tax_regime'];
    }

    /**
     * Sets special_tax_regime
     * @param string $special_tax_regime Entity Special Tax Regime  - 'MEM' # Microempresa municipal - 'EST' # Estimativa - 'SPR' # Sociedade de profissionais - 'COP' # Cooperativa - 'MEI' # Microempresário Individual (MEI) - 'MPP' # Microempresário e Empresa de Pequeno Porte (ME EPP)
     * @return $this
     */
    public function setSpecialTaxRegime($special_tax_regime)
    {
        $allowed_values = array('MEM', 'EST', 'SPR', 'COP', 'MEI', 'MPP');
        if (!is_null($special_tax_regime) && (!in_array($special_tax_regime, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'special_tax_regime', must be one of 'MEM', 'EST', 'SPR', 'COP', 'MEI', 'MPP'");
        }
        $this->container['special_tax_regime'] = $special_tax_regime;

        return $this;
    }

    /**
     * Gets subject_to_srf1234
     * @return bool
     */
    public function getSubjectToSrf1234()
    {
        return $this->container['subject_to_srf1234'];
    }

    /**
     * Sets subject_to_srf1234
     * @param bool $subject_to_srf1234 Companies subject to rule follow same rule of Government
     * @return $this
     */
    public function setSubjectToSrf1234($subject_to_srf1234)
    {
        $this->container['subject_to_srf1234'] = $subject_to_srf1234;

        return $this;
    }

    /**
     * Gets required_withholding_iss
     * @return bool
     */
    public function getRequiredWithholdingIss()
    {
        return $this->container['required_withholding_iss'];
    }

    /**
     * Sets required_withholding_iss
     * @param bool $required_withholding_iss If Withholding ISS is required, independently the rules applied.
     * @return $this
     */
    public function setRequiredWithholdingIss($required_withholding_iss)
    {
        $this->container['required_withholding_iss'] = $required_withholding_iss;

        return $this;
    }

    /**
     * Gets art
     * @return string
     */
    public function getArt()
    {
        return $this->container['art'];
    }

    /**
     * Sets art
     * @param string $art technical note. Anota\\u00e7\\u00e3o de Responsabilidade T\\u00e9cnica-ART, estabelece que todos os contratos referentes à  execu\\u00e7\\u00e3o de servi\\u00e7os ou obras de Engenharia, Agronomia, Geologia, Geografia ou Meteorologia dever\\u00e3o ser objeto de anota\\u00e7\\u00e3o no Conselho Regional de Engenharia e Agronomia
     * @return $this
     */
    public function setArt($art)
    {
        if (!is_null($art) && (strlen($art) > 15)) {
            throw new \InvalidArgumentException('invalid length for $art when calling SalesEntity., must be smaller than or equal to 15.');
        }

        $this->container['art'] = $art;

        return $this;
    }

    /**
     * Gets admin_process
     * @return string
     */
    public function getAdminProcess()
    {
        return $this->container['admin_process'];
    }

    /**
     * Sets admin_process
     * @param string $admin_process PROCESS NUMBER TO ISS SUSPENDED FOR ADMINISTRATIVE PROCESS
     * @return $this
     */
    public function setAdminProcess($admin_process)
    {
        if (!is_null($admin_process) && (strlen($admin_process) > 30)) {
            throw new \InvalidArgumentException('invalid length for $admin_process when calling SalesEntity., must be smaller than or equal to 30.');
        }

        $this->container['admin_process'] = $admin_process;

        return $this;
    }

    /**
     * Gets build_code
     * @return string
     */
    public function getBuildCode()
    {
        return $this->container['build_code'];
    }

    /**
     * Sets build_code
     * @param string $build_code Business code. Código da obra OBRA
     * @return $this
     */
    public function setBuildCode($build_code)
    {
        if (!is_null($build_code) && (strlen($build_code) > 15)) {
            throw new \InvalidArgumentException('invalid length for $build_code when calling SalesEntity., must be smaller than or equal to 15.');
        }

        $this->container['build_code'] = $build_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


