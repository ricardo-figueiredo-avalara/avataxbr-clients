<?php
/**
 * PaymentBill
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PaymentBill Class Doc Comment
 *
 * @category    Class */
 // @description Bill information
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PaymentBill implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Payment_bill';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'n_fat' => 'string',
        'v_orig' => 'double',
        'v_discount' => 'double',
        'v_net' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'n_fat' => 'nFat',
        'v_orig' => 'vOrig',
        'v_discount' => 'vDiscount',
        'v_net' => 'vNet'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'n_fat' => 'setNFat',
        'v_orig' => 'setVOrig',
        'v_discount' => 'setVDiscount',
        'v_net' => 'setVNet'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'n_fat' => 'getNFat',
        'v_orig' => 'getVOrig',
        'v_discount' => 'getVDiscount',
        'v_net' => 'getVNet'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['n_fat'] = isset($data['n_fat']) ? $data['n_fat'] : null;
        $this->container['v_orig'] = isset($data['v_orig']) ? $data['v_orig'] : null;
        $this->container['v_discount'] = isset($data['v_discount']) ? $data['v_discount'] : null;
        $this->container['v_net'] = isset($data['v_net']) ? $data['v_net'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['n_fat']) && (strlen($this->container['n_fat']) > 60)) {
            $invalid_properties[] = "invalid value for 'n_fat', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['n_fat']) && (strlen($this->container['n_fat']) < 1)) {
            $invalid_properties[] = "invalid value for 'n_fat', the character length must be bigger than or equal to 1.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['n_fat']) > 60) {
            return false;
        }
        if (strlen($this->container['n_fat']) < 1) {
            return false;
        }
        return true;
    }


    /**
     * Gets n_fat
     * @return string
     */
    public function getNFat()
    {
        return $this->container['n_fat'];
    }

    /**
     * Sets n_fat
     * @param string $n_fat Bill identifier
     * @return $this
     */
    public function setNFat($n_fat)
    {
        if (!is_null($n_fat) && (strlen($n_fat) > 60)) {
            throw new \InvalidArgumentException('invalid length for $n_fat when calling PaymentBill., must be smaller than or equal to 60.');
        }
        if (!is_null($n_fat) && (strlen($n_fat) < 1)) {
            throw new \InvalidArgumentException('invalid length for $n_fat when calling PaymentBill., must be bigger than or equal to 1.');
        }

        $this->container['n_fat'] = $n_fat;

        return $this;
    }

    /**
     * Gets v_orig
     * @return double
     */
    public function getVOrig()
    {
        return $this->container['v_orig'];
    }

    /**
     * Sets v_orig
     * @param double $v_orig Orignal value
     * @return $this
     */
    public function setVOrig($v_orig)
    {
        $this->container['v_orig'] = $v_orig;

        return $this;
    }

    /**
     * Gets v_discount
     * @return double
     */
    public function getVDiscount()
    {
        return $this->container['v_discount'];
    }

    /**
     * Sets v_discount
     * @param double $v_discount Discount
     * @return $this
     */
    public function setVDiscount($v_discount)
    {
        $this->container['v_discount'] = $v_discount;

        return $this;
    }

    /**
     * Gets v_net
     * @return double
     */
    public function getVNet()
    {
        return $this->container['v_net'];
    }

    /**
     * Sets v_net
     * @param double $v_net Net value
     * @return $this
     */
    public function setVNet($v_net)
    {
        $this->container['v_net'] = $v_net;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


