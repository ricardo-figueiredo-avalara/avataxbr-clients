<?php
/**
 * LineForGoodsAdi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LineForGoodsAdi Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LineForGoodsAdi implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LineForGoods_adi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'add_number' => 'int',
        'sequential_number' => 'int',
        'manufacturer_code' => 'string',
        'adi_discount' => 'double',
        'drawback_number' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'add_number' => 'addNumber',
        'sequential_number' => 'sequentialNumber',
        'manufacturer_code' => 'manufacturerCode',
        'adi_discount' => 'adiDiscount',
        'drawback_number' => 'drawbackNumber'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'add_number' => 'setAddNumber',
        'sequential_number' => 'setSequentialNumber',
        'manufacturer_code' => 'setManufacturerCode',
        'adi_discount' => 'setAdiDiscount',
        'drawback_number' => 'setDrawbackNumber'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'add_number' => 'getAddNumber',
        'sequential_number' => 'getSequentialNumber',
        'manufacturer_code' => 'getManufacturerCode',
        'adi_discount' => 'getAdiDiscount',
        'drawback_number' => 'getDrawbackNumber'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['add_number'] = isset($data['add_number']) ? $data['add_number'] : null;
        $this->container['sequential_number'] = isset($data['sequential_number']) ? $data['sequential_number'] : null;
        $this->container['manufacturer_code'] = isset($data['manufacturer_code']) ? $data['manufacturer_code'] : null;
        $this->container['adi_discount'] = isset($data['adi_discount']) ? $data['adi_discount'] : null;
        $this->container['drawback_number'] = isset($data['drawback_number']) ? $data['drawback_number'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['add_number'] === null) {
            $invalid_properties[] = "'add_number' can't be null";
        }
        if ($this->container['sequential_number'] === null) {
            $invalid_properties[] = "'sequential_number' can't be null";
        }
        if ($this->container['manufacturer_code'] === null) {
            $invalid_properties[] = "'manufacturer_code' can't be null";
        }
        if ((strlen($this->container['manufacturer_code']) > 60)) {
            $invalid_properties[] = "invalid value for 'manufacturer_code', the character length must be smaller than or equal to 60.";
        }

        if ((strlen($this->container['manufacturer_code']) < 1)) {
            $invalid_properties[] = "invalid value for 'manufacturer_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['drawback_number']) && (strlen($this->container['drawback_number']) < 1)) {
            $invalid_properties[] = "invalid value for 'drawback_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['drawback_number']) && !preg_match("/[0-9]{0,11}/", $this->container['drawback_number'])) {
            $invalid_properties[] = "invalid value for 'drawback_number', must be conform to the pattern /[0-9]{0,11}/.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['add_number'] === null) {
            return false;
        }
        if ($this->container['sequential_number'] === null) {
            return false;
        }
        if ($this->container['manufacturer_code'] === null) {
            return false;
        }
        if (strlen($this->container['manufacturer_code']) > 60) {
            return false;
        }
        if (strlen($this->container['manufacturer_code']) < 1) {
            return false;
        }
        if (strlen($this->container['drawback_number']) < 1) {
            return false;
        }
        if (!preg_match("/[0-9]{0,11}/", $this->container['drawback_number'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets add_number
     * @return int
     */
    public function getAddNumber()
    {
        return $this->container['add_number'];
    }

    /**
     * Sets add_number
     * @param int $add_number aditional sequence number (1 to 100)
     * @return $this
     */
    public function setAddNumber($add_number)
    {
        $this->container['add_number'] = $add_number;

        return $this;
    }

    /**
     * Gets sequential_number
     * @return int
     */
    public function getSequentialNumber()
    {
        return $this->container['sequential_number'];
    }

    /**
     * Sets sequential_number
     * @param int $sequential_number sequential item number for this adi, sequence number (1 to 999)
     * @return $this
     */
    public function setSequentialNumber($sequential_number)
    {
        $this->container['sequential_number'] = $sequential_number;

        return $this;
    }

    /**
     * Gets manufacturer_code
     * @return string
     */
    public function getManufacturerCode()
    {
        return $this->container['manufacturer_code'];
    }

    /**
     * Sets manufacturer_code
     * @param string $manufacturer_code Manufatorer erp internal code
     * @return $this
     */
    public function setManufacturerCode($manufacturer_code)
    {
        if ((strlen($manufacturer_code) > 60)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_code when calling LineForGoodsAdi., must be smaller than or equal to 60.');
        }
        if ((strlen($manufacturer_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_code when calling LineForGoodsAdi., must be bigger than or equal to 1.');
        }

        $this->container['manufacturer_code'] = $manufacturer_code;

        return $this;
    }

    /**
     * Gets adi_discount
     * @return double
     */
    public function getAdiDiscount()
    {
        return $this->container['adi_discount'];
    }

    /**
     * Sets adi_discount
     * @param double $adi_discount This decimal 13 integers and 2 decimals, aditional adi discount
     * @return $this
     */
    public function setAdiDiscount($adi_discount)
    {
        $this->container['adi_discount'] = $adi_discount;

        return $this;
    }

    /**
     * Gets drawback_number
     * @return string
     */
    public function getDrawbackNumber()
    {
        return $this->container['drawback_number'];
    }

    /**
     * Sets drawback_number
     * @param string $drawback_number Drawback number
     * @return $this
     */
    public function setDrawbackNumber($drawback_number)
    {

        if (!is_null($drawback_number) && (strlen($drawback_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $drawback_number when calling LineForGoodsAdi., must be bigger than or equal to 1.');
        }
        if (!is_null($drawback_number) && (!preg_match("/[0-9]{0,11}/", $drawback_number))) {
            throw new \InvalidArgumentException("invalid value for $drawback_number when calling LineForGoodsAdi., must conform to the pattern /[0-9]{0,11}/.");
        }

        $this->container['drawback_number'] = $drawback_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


