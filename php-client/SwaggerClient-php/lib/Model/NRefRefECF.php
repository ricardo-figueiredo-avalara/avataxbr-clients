<?php
/**
 * NRefRefECF
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * NRefRefECF Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NRefRefECF implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'NRef_refECF';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'n_ecf' => 'string',
        'n_coo' => 'string',
        'mod_ecf' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'n_ecf' => 'nECF',
        'n_coo' => 'nCOO',
        'mod_ecf' => 'modECF'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'n_ecf' => 'setNEcf',
        'n_coo' => 'setNCoo',
        'mod_ecf' => 'setModEcf'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'n_ecf' => 'getNEcf',
        'n_coo' => 'getNCoo',
        'mod_ecf' => 'getModEcf'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const MOD_ECF__2_B = '2B';
    const MOD_ECF__2_C = '2C';
    const MOD_ECF__2_D = '2D';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getModEcfAllowableValues()
    {
        return [
            self::MOD_ECF__2_B,
            self::MOD_ECF__2_C,
            self::MOD_ECF__2_D,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['n_ecf'] = isset($data['n_ecf']) ? $data['n_ecf'] : null;
        $this->container['n_coo'] = isset($data['n_coo']) ? $data['n_coo'] : null;
        $this->container['mod_ecf'] = isset($data['mod_ecf']) ? $data['mod_ecf'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['n_ecf'] === null) {
            $invalid_properties[] = "'n_ecf' can't be null";
        }
        if (!preg_match("/[0-9]{1,3}/", $this->container['n_ecf'])) {
            $invalid_properties[] = "invalid value for 'n_ecf', must be conform to the pattern /[0-9]{1,3}/.";
        }

        if ($this->container['n_coo'] === null) {
            $invalid_properties[] = "'n_coo' can't be null";
        }
        if (!preg_match("/[0-9]{1,6}/", $this->container['n_coo'])) {
            $invalid_properties[] = "invalid value for 'n_coo', must be conform to the pattern /[0-9]{1,6}/.";
        }

        if ($this->container['mod_ecf'] === null) {
            $invalid_properties[] = "'mod_ecf' can't be null";
        }
        $allowed_values = ["2B", "2C", "2D"];
        if (!in_array($this->container['mod_ecf'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'mod_ecf', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['n_ecf'] === null) {
            return false;
        }
        if (!preg_match("/[0-9]{1,3}/", $this->container['n_ecf'])) {
            return false;
        }
        if ($this->container['n_coo'] === null) {
            return false;
        }
        if (!preg_match("/[0-9]{1,6}/", $this->container['n_coo'])) {
            return false;
        }
        if ($this->container['mod_ecf'] === null) {
            return false;
        }
        $allowed_values = ["2B", "2C", "2D"];
        if (!in_array($this->container['mod_ecf'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets n_ecf
     * @return string
     */
    public function getNEcf()
    {
        return $this->container['n_ecf'];
    }

    /**
     * Sets n_ecf
     * @param string $n_ecf ECF Sequential number that generated Cupom attached to NFe informar o número de ordem seqüencial do ECF que emitiu o Cupom Fiscal vinculado à NF-e
     * @return $this
     */
    public function setNEcf($n_ecf)
    {

        if ((!preg_match("/[0-9]{1,3}/", $n_ecf))) {
            throw new \InvalidArgumentException("invalid value for $n_ecf when calling NRefRefECF., must conform to the pattern /[0-9]{1,3}/.");
        }

        $this->container['n_ecf'] = $n_ecf;

        return $this;
    }

    /**
     * Gets n_coo
     * @return string
     */
    public function getNCoo()
    {
        return $this->container['n_coo'];
    }

    /**
     * Sets n_coo
     * @param string $n_coo Operational counter number attached to NFe Informar o Número do Contador de Ordem de Operação - COO vinculado à NF-e
     * @return $this
     */
    public function setNCoo($n_coo)
    {

        if ((!preg_match("/[0-9]{1,6}/", $n_coo))) {
            throw new \InvalidArgumentException("invalid value for $n_coo when calling NRefRefECF., must conform to the pattern /[0-9]{1,6}/.");
        }

        $this->container['n_coo'] = $n_coo;

        return $this;
    }

    /**
     * Gets mod_ecf
     * @return string
     */
    public function getModEcf()
    {
        return $this->container['mod_ecf'];
    }

    /**
     * Sets mod_ecf
     * @param string $mod_ecf Fiscal document model - '2B' # coupon tax not ECF - '2C' # PDV coupon tax - '2D' # ECF coupon tax
     * @return $this
     */
    public function setModEcf($mod_ecf)
    {
        $allowed_values = array('2B', '2C', '2D');
        if ((!in_array($mod_ecf, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'mod_ecf', must be one of '2B', '2C', '2D'");
        }
        $this->container['mod_ecf'] = $mod_ecf;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


