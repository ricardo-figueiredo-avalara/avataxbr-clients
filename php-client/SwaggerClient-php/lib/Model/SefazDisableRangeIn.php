<?php
/**
 * SefazDisableRangeIn
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SefazDisableRangeIn Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SefazDisableRangeIn implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SefazDisableRangeIn';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_location' => 'string',
        'transaction_model' => 'string',
        'invoice_serial' => 'int',
        'year' => 'float',
        'message' => 'string',
        'invoice_number_init' => 'float',
        'invoice_number_end' => 'float'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'company_location' => 'companyLocation',
        'transaction_model' => 'transactionModel',
        'invoice_serial' => 'invoiceSerial',
        'year' => 'year',
        'message' => 'message',
        'invoice_number_init' => 'invoiceNumberInit',
        'invoice_number_end' => 'invoiceNumberEnd'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'company_location' => 'setCompanyLocation',
        'transaction_model' => 'setTransactionModel',
        'invoice_serial' => 'setInvoiceSerial',
        'year' => 'setYear',
        'message' => 'setMessage',
        'invoice_number_init' => 'setInvoiceNumberInit',
        'invoice_number_end' => 'setInvoiceNumberEnd'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'company_location' => 'getCompanyLocation',
        'transaction_model' => 'getTransactionModel',
        'invoice_serial' => 'getInvoiceSerial',
        'year' => 'getYear',
        'message' => 'getMessage',
        'invoice_number_init' => 'getInvoiceNumberInit',
        'invoice_number_end' => 'getInvoiceNumberEnd'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TRANSACTION_MODEL__55 = '55';
    const TRANSACTION_MODEL__65 = '65';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTransactionModelAllowableValues()
    {
        return [
            self::TRANSACTION_MODEL__55,
            self::TRANSACTION_MODEL__65,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_location'] = isset($data['company_location']) ? $data['company_location'] : null;
        $this->container['transaction_model'] = isset($data['transaction_model']) ? $data['transaction_model'] : null;
        $this->container['invoice_serial'] = isset($data['invoice_serial']) ? $data['invoice_serial'] : null;
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['invoice_number_init'] = isset($data['invoice_number_init']) ? $data['invoice_number_init'] : null;
        $this->container['invoice_number_end'] = isset($data['invoice_number_end']) ? $data['invoice_number_end'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["55", "65"];
        if (!in_array($this->container['transaction_model'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'transaction_model', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['message']) && (strlen($this->container['message']) > 255)) {
            $invalid_properties[] = "invalid value for 'message', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['message']) && (strlen($this->container['message']) < 15)) {
            $invalid_properties[] = "invalid value for 'message', the character length must be bigger than or equal to 15.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["55", "65"];
        if (!in_array($this->container['transaction_model'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['message']) > 255) {
            return false;
        }
        if (strlen($this->container['message']) < 15) {
            return false;
        }
        return true;
    }


    /**
     * Gets company_location
     * @return string
     */
    public function getCompanyLocation()
    {
        return $this->container['company_location'];
    }

    /**
     * Sets company_location
     * @param string $company_location This string contains a previously configured company code which may also have codes needed for tax return purposes. These codes are maintained through the customer portal. Main company address identity
     * @return $this
     */
    public function setCompanyLocation($company_location)
    {
        $this->container['company_location'] = $company_location;

        return $this;
    }

    /**
     * Gets transaction_model
     * @return string
     */
    public function getTransactionModel()
    {
        return $this->container['transaction_model'];
    }

    /**
     * Sets transaction_model
     * @param string $transaction_model This string indicates the type of transaction for which tax should be calculated. - '55' # Nota Fiscal Eletrônica (NF-e) - '65' # Nota Fiscal Eletrônica ao-Consumidor Final (NFC-e)
     * @return $this
     */
    public function setTransactionModel($transaction_model)
    {
        $allowed_values = array('55', '65');
        if (!is_null($transaction_model) && (!in_array($transaction_model, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'transaction_model', must be one of '55', '65'");
        }
        $this->container['transaction_model'] = $transaction_model;

        return $this;
    }

    /**
     * Gets invoice_serial
     * @return int
     */
    public function getInvoiceSerial()
    {
        return $this->container['invoice_serial'];
    }

    /**
     * Sets invoice_serial
     * @param int $invoice_serial Invoice number, sequential unique by invoice serial (Número da nota fiscal)
     * @return $this
     */
    public function setInvoiceSerial($invoice_serial)
    {
        $this->container['invoice_serial'] = $invoice_serial;

        return $this;
    }

    /**
     * Gets year
     * @return float
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     * @param float $year
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets message
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     * @param string $message
     * @return $this
     */
    public function setMessage($message)
    {
        if (!is_null($message) && (strlen($message) > 255)) {
            throw new \InvalidArgumentException('invalid length for $message when calling SefazDisableRangeIn., must be smaller than or equal to 255.');
        }
        if (!is_null($message) && (strlen($message) < 15)) {
            throw new \InvalidArgumentException('invalid length for $message when calling SefazDisableRangeIn., must be bigger than or equal to 15.');
        }

        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets invoice_number_init
     * @return float
     */
    public function getInvoiceNumberInit()
    {
        return $this->container['invoice_number_init'];
    }

    /**
     * Sets invoice_number_init
     * @param float $invoice_number_init First number of disable range.
     * @return $this
     */
    public function setInvoiceNumberInit($invoice_number_init)
    {
        $this->container['invoice_number_init'] = $invoice_number_init;

        return $this;
    }

    /**
     * Gets invoice_number_end
     * @return float
     */
    public function getInvoiceNumberEnd()
    {
        return $this->container['invoice_number_end'];
    }

    /**
     * Sets invoice_number_end
     * @param float $invoice_number_end Last number of disable range.
     * @return $this
     */
    public function setInvoiceNumberEnd($invoice_number_end)
    {
        $this->container['invoice_number_end'] = $invoice_number_end;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


