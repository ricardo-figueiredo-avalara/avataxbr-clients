<?php
/**
 * VehicleID
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * VehicleID Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VehicleID implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'VehicleID';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'license_plate' => 'string',
        'state_code' => '\Swagger\Client\Model\StateEnum',
        'rtnc' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'license_plate' => 'licensePlate',
        'state_code' => 'stateCode',
        'rtnc' => 'rtnc'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'license_plate' => 'setLicensePlate',
        'state_code' => 'setStateCode',
        'rtnc' => 'setRtnc'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'license_plate' => 'getLicensePlate',
        'state_code' => 'getStateCode',
        'rtnc' => 'getRtnc'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['license_plate'] = isset($data['license_plate']) ? $data['license_plate'] : null;
        $this->container['state_code'] = isset($data['state_code']) ? $data['state_code'] : null;
        $this->container['rtnc'] = isset($data['rtnc']) ? $data['rtnc'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['license_plate'] === null) {
            $invalid_properties[] = "'license_plate' can't be null";
        }
        if (!preg_match("/[A-Z]{2,3}[0-9]{4}|[A-Z]{3,4}[0-9]{3}/", $this->container['license_plate'])) {
            $invalid_properties[] = "invalid value for 'license_plate', must be conform to the pattern /[A-Z]{2,3}[0-9]{4}|[A-Z]{3,4}[0-9]{3}/.";
        }

        if ($this->container['state_code'] === null) {
            $invalid_properties[] = "'state_code' can't be null";
        }
        if (!is_null($this->container['rtnc']) && (strlen($this->container['rtnc']) > 20)) {
            $invalid_properties[] = "invalid value for 'rtnc', the character length must be smaller than or equal to 20.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['license_plate'] === null) {
            return false;
        }
        if (!preg_match("/[A-Z]{2,3}[0-9]{4}|[A-Z]{3,4}[0-9]{3}/", $this->container['license_plate'])) {
            return false;
        }
        if ($this->container['state_code'] === null) {
            return false;
        }
        if (strlen($this->container['rtnc']) > 20) {
            return false;
        }
        return true;
    }


    /**
     * Gets license_plate
     * @return string
     */
    public function getLicensePlate()
    {
        return $this->container['license_plate'];
    }

    /**
     * Sets license_plate
     * @param string $license_plate
     * @return $this
     */
    public function setLicensePlate($license_plate)
    {

        if ((!preg_match("/[A-Z]{2,3}[0-9]{4}|[A-Z]{3,4}[0-9]{3}/", $license_plate))) {
            throw new \InvalidArgumentException("invalid value for $license_plate when calling VehicleID., must conform to the pattern /[A-Z]{2,3}[0-9]{4}|[A-Z]{3,4}[0-9]{3}/.");
        }

        $this->container['license_plate'] = $license_plate;

        return $this;
    }

    /**
     * Gets state_code
     * @return \Swagger\Client\Model\StateEnum
     */
    public function getStateCode()
    {
        return $this->container['state_code'];
    }

    /**
     * Sets state_code
     * @param \Swagger\Client\Model\StateEnum $state_code
     * @return $this
     */
    public function setStateCode($state_code)
    {
        $this->container['state_code'] = $state_code;

        return $this;
    }

    /**
     * Gets rtnc
     * @return string
     */
    public function getRtnc()
    {
        return $this->container['rtnc'];
    }

    /**
     * Sets rtnc
     * @param string $rtnc Cargo Transport National Register, Registro Nacional de Transportador de Carga (ANTT)
     * @return $this
     */
    public function setRtnc($rtnc)
    {
        if (!is_null($rtnc) && (strlen($rtnc) > 20)) {
            throw new \InvalidArgumentException('invalid length for $rtnc when calling VehicleID., must be smaller than or equal to 20.');
        }

        $this->container['rtnc'] = $rtnc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


