<?php
/**
 * FuelPumpNumber
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * FuelPumpNumber Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FuelPumpNumber implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Fuel_pumpNumber';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'nozzle_number_fuel_supply' => 'string',
        'fuel_pump_number' => 'string',
        'fuel_tank_number' => 'string',
        'start_value_of_pump_number' => 'double',
        'end_value_of_pump_number' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'nozzle_number_fuel_supply' => 'nozzleNumberFuelSupply',
        'fuel_pump_number' => 'fuelPumpNumber',
        'fuel_tank_number' => 'fuelTankNumber',
        'start_value_of_pump_number' => 'startValueOfPumpNumber',
        'end_value_of_pump_number' => 'endValueOfPumpNumber'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'nozzle_number_fuel_supply' => 'setNozzleNumberFuelSupply',
        'fuel_pump_number' => 'setFuelPumpNumber',
        'fuel_tank_number' => 'setFuelTankNumber',
        'start_value_of_pump_number' => 'setStartValueOfPumpNumber',
        'end_value_of_pump_number' => 'setEndValueOfPumpNumber'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'nozzle_number_fuel_supply' => 'getNozzleNumberFuelSupply',
        'fuel_pump_number' => 'getFuelPumpNumber',
        'fuel_tank_number' => 'getFuelTankNumber',
        'start_value_of_pump_number' => 'getStartValueOfPumpNumber',
        'end_value_of_pump_number' => 'getEndValueOfPumpNumber'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nozzle_number_fuel_supply'] = isset($data['nozzle_number_fuel_supply']) ? $data['nozzle_number_fuel_supply'] : null;
        $this->container['fuel_pump_number'] = isset($data['fuel_pump_number']) ? $data['fuel_pump_number'] : null;
        $this->container['fuel_tank_number'] = isset($data['fuel_tank_number']) ? $data['fuel_tank_number'] : null;
        $this->container['start_value_of_pump_number'] = isset($data['start_value_of_pump_number']) ? $data['start_value_of_pump_number'] : null;
        $this->container['end_value_of_pump_number'] = isset($data['end_value_of_pump_number']) ? $data['end_value_of_pump_number'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['nozzle_number_fuel_supply'] === null) {
            $invalid_properties[] = "'nozzle_number_fuel_supply' can't be null";
        }
        if (!preg_match("/[0-9]{1,3}/", $this->container['nozzle_number_fuel_supply'])) {
            $invalid_properties[] = "invalid value for 'nozzle_number_fuel_supply', must be conform to the pattern /[0-9]{1,3}/.";
        }

        if ($this->container['fuel_pump_number'] === null) {
            $invalid_properties[] = "'fuel_pump_number' can't be null";
        }
        if (!preg_match("/[0-9]{1,3}/", $this->container['fuel_pump_number'])) {
            $invalid_properties[] = "invalid value for 'fuel_pump_number', must be conform to the pattern /[0-9]{1,3}/.";
        }

        if ($this->container['fuel_tank_number'] === null) {
            $invalid_properties[] = "'fuel_tank_number' can't be null";
        }
        if (!preg_match("/[0-9]{1,3}/", $this->container['fuel_tank_number'])) {
            $invalid_properties[] = "invalid value for 'fuel_tank_number', must be conform to the pattern /[0-9]{1,3}/.";
        }

        if ($this->container['start_value_of_pump_number'] === null) {
            $invalid_properties[] = "'start_value_of_pump_number' can't be null";
        }
        if ($this->container['end_value_of_pump_number'] === null) {
            $invalid_properties[] = "'end_value_of_pump_number' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['nozzle_number_fuel_supply'] === null) {
            return false;
        }
        if (!preg_match("/[0-9]{1,3}/", $this->container['nozzle_number_fuel_supply'])) {
            return false;
        }
        if ($this->container['fuel_pump_number'] === null) {
            return false;
        }
        if (!preg_match("/[0-9]{1,3}/", $this->container['fuel_pump_number'])) {
            return false;
        }
        if ($this->container['fuel_tank_number'] === null) {
            return false;
        }
        if (!preg_match("/[0-9]{1,3}/", $this->container['fuel_tank_number'])) {
            return false;
        }
        if ($this->container['start_value_of_pump_number'] === null) {
            return false;
        }
        if ($this->container['end_value_of_pump_number'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets nozzle_number_fuel_supply
     * @return string
     */
    public function getNozzleNumberFuelSupply()
    {
        return $this->container['nozzle_number_fuel_supply'];
    }

    /**
     * Sets nozzle_number_fuel_supply
     * @param string $nozzle_number_fuel_supply Identification number of nozzle used in the dispensing process.   Numero de identificação do Bico utilizado no abastecimento
     * @return $this
     */
    public function setNozzleNumberFuelSupply($nozzle_number_fuel_supply)
    {

        if ((!preg_match("/[0-9]{1,3}/", $nozzle_number_fuel_supply))) {
            throw new \InvalidArgumentException("invalid value for $nozzle_number_fuel_supply when calling FuelPumpNumber., must conform to the pattern /[0-9]{1,3}/.");
        }

        $this->container['nozzle_number_fuel_supply'] = $nozzle_number_fuel_supply;

        return $this;
    }

    /**
     * Gets fuel_pump_number
     * @return string
     */
    public function getFuelPumpNumber()
    {
        return $this->container['fuel_pump_number'];
    }

    /**
     * Sets fuel_pump_number
     * @param string $fuel_pump_number Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado
     * @return $this
     */
    public function setFuelPumpNumber($fuel_pump_number)
    {

        if ((!preg_match("/[0-9]{1,3}/", $fuel_pump_number))) {
            throw new \InvalidArgumentException("invalid value for $fuel_pump_number when calling FuelPumpNumber., must conform to the pattern /[0-9]{1,3}/.");
        }

        $this->container['fuel_pump_number'] = $fuel_pump_number;

        return $this;
    }

    /**
     * Gets fuel_tank_number
     * @return string
     */
    public function getFuelTankNumber()
    {
        return $this->container['fuel_tank_number'];
    }

    /**
     * Sets fuel_tank_number
     * @param string $fuel_tank_number Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado
     * @return $this
     */
    public function setFuelTankNumber($fuel_tank_number)
    {

        if ((!preg_match("/[0-9]{1,3}/", $fuel_tank_number))) {
            throw new \InvalidArgumentException("invalid value for $fuel_tank_number when calling FuelPumpNumber., must conform to the pattern /[0-9]{1,3}/.");
        }

        $this->container['fuel_tank_number'] = $fuel_tank_number;

        return $this;
    }

    /**
     * Gets start_value_of_pump_number
     * @return double
     */
    public function getStartValueOfPumpNumber()
    {
        return $this->container['start_value_of_pump_number'];
    }

    /**
     * Sets start_value_of_pump_number
     * @param double $start_value_of_pump_number Valor do Encerrante no ínicio do abastecimento.  Reading of auto-counter (encerrante) at the start of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$
     * @return $this
     */
    public function setStartValueOfPumpNumber($start_value_of_pump_number)
    {
        $this->container['start_value_of_pump_number'] = $start_value_of_pump_number;

        return $this;
    }

    /**
     * Gets end_value_of_pump_number
     * @return double
     */
    public function getEndValueOfPumpNumber()
    {
        return $this->container['end_value_of_pump_number'];
    }

    /**
     * Sets end_value_of_pump_number
     * @param double $end_value_of_pump_number Valor do Encerrante no final do abastecimento.  Reading of auto-counter (encerrante) at the end of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$
     * @return $this
     */
    public function setEndValueOfPumpNumber($end_value_of_pump_number)
    {
        $this->container['end_value_of_pump_number'] = $end_value_of_pump_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


