<?php
/**
 * LineForGoods
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LineForGoods Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LineForGoods implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LineForGoods';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_code' => 'int',
        'item_code' => 'string',
        'avalara_goods_and_services_type' => 'string',
        'number_of_items' => 'double',
        'returned_percentage_amount' => 'double',
        'line_unit_price' => 'double',
        'line_amount' => 'double',
        'item_description' => 'string',
        'line_taxed_discount' => 'double',
        'line_untaxed_discount' => 'double',
        'use_type' => 'string',
        'process_scenario' => 'string',
        'cfop' => 'int',
        'has_stock_impact' => 'bool',
        'has_finantial_impact' => 'bool',
        'freight_amount' => 'double',
        'insurance_amount' => 'double',
        'other_cost_amount' => 'double',
        'ind_tot_type' => 'bool',
        'order_number' => 'string',
        'order_item_number' => 'string',
        'fci_number' => 'string',
        'recopi_number' => 'string',
        'inf_ad_prod' => 'string',
        'vehicle' => '\Swagger\Client\Model\Vehicle',
        'medicine' => '\Swagger\Client\Model\Medicine',
        'weapon' => '\Swagger\Client\Model\Weapon',
        'fuel' => '\Swagger\Client\Model\Fuel',
        'entity_is_icms_substitute' => 'bool',
        'is_transport_icms_withheld' => 'bool',
        'icms_tax_relief' => '\Swagger\Client\Model\LineForGoodsIcmsTaxRelief',
        'export' => '\Swagger\Client\Model\LineForGoodsExport[]',
        'di' => '\Swagger\Client\Model\LineForGoodsDi[]',
        'calculated_tax' => '\Swagger\Client\Model\LineForGoodsCalculatedTax'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'line_code' => 'lineCode',
        'item_code' => 'itemCode',
        'avalara_goods_and_services_type' => 'avalaraGoodsAndServicesType',
        'number_of_items' => 'numberOfItems',
        'returned_percentage_amount' => 'returnedPercentageAmount',
        'line_unit_price' => 'lineUnitPrice',
        'line_amount' => 'lineAmount',
        'item_description' => 'itemDescription',
        'line_taxed_discount' => 'lineTaxedDiscount',
        'line_untaxed_discount' => 'lineUntaxedDiscount',
        'use_type' => 'useType',
        'process_scenario' => 'processScenario',
        'cfop' => 'cfop',
        'has_stock_impact' => 'hasStockImpact',
        'has_finantial_impact' => 'hasFinantialImpact',
        'freight_amount' => 'freightAmount',
        'insurance_amount' => 'insuranceAmount',
        'other_cost_amount' => 'otherCostAmount',
        'ind_tot_type' => 'indTotType',
        'order_number' => 'orderNumber',
        'order_item_number' => 'orderItemNumber',
        'fci_number' => 'fciNumber',
        'recopi_number' => 'recopiNumber',
        'inf_ad_prod' => 'infAdProd',
        'vehicle' => 'vehicle',
        'medicine' => 'medicine',
        'weapon' => 'weapon',
        'fuel' => 'fuel',
        'entity_is_icms_substitute' => 'entityIsIcmsSubstitute',
        'is_transport_icms_withheld' => 'isTransportIcmsWithheld',
        'icms_tax_relief' => 'icmsTaxRelief',
        'export' => 'export',
        'di' => 'di',
        'calculated_tax' => 'calculatedTax'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'line_code' => 'setLineCode',
        'item_code' => 'setItemCode',
        'avalara_goods_and_services_type' => 'setAvalaraGoodsAndServicesType',
        'number_of_items' => 'setNumberOfItems',
        'returned_percentage_amount' => 'setReturnedPercentageAmount',
        'line_unit_price' => 'setLineUnitPrice',
        'line_amount' => 'setLineAmount',
        'item_description' => 'setItemDescription',
        'line_taxed_discount' => 'setLineTaxedDiscount',
        'line_untaxed_discount' => 'setLineUntaxedDiscount',
        'use_type' => 'setUseType',
        'process_scenario' => 'setProcessScenario',
        'cfop' => 'setCfop',
        'has_stock_impact' => 'setHasStockImpact',
        'has_finantial_impact' => 'setHasFinantialImpact',
        'freight_amount' => 'setFreightAmount',
        'insurance_amount' => 'setInsuranceAmount',
        'other_cost_amount' => 'setOtherCostAmount',
        'ind_tot_type' => 'setIndTotType',
        'order_number' => 'setOrderNumber',
        'order_item_number' => 'setOrderItemNumber',
        'fci_number' => 'setFciNumber',
        'recopi_number' => 'setRecopiNumber',
        'inf_ad_prod' => 'setInfAdProd',
        'vehicle' => 'setVehicle',
        'medicine' => 'setMedicine',
        'weapon' => 'setWeapon',
        'fuel' => 'setFuel',
        'entity_is_icms_substitute' => 'setEntityIsIcmsSubstitute',
        'is_transport_icms_withheld' => 'setIsTransportIcmsWithheld',
        'icms_tax_relief' => 'setIcmsTaxRelief',
        'export' => 'setExport',
        'di' => 'setDi',
        'calculated_tax' => 'setCalculatedTax'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'line_code' => 'getLineCode',
        'item_code' => 'getItemCode',
        'avalara_goods_and_services_type' => 'getAvalaraGoodsAndServicesType',
        'number_of_items' => 'getNumberOfItems',
        'returned_percentage_amount' => 'getReturnedPercentageAmount',
        'line_unit_price' => 'getLineUnitPrice',
        'line_amount' => 'getLineAmount',
        'item_description' => 'getItemDescription',
        'line_taxed_discount' => 'getLineTaxedDiscount',
        'line_untaxed_discount' => 'getLineUntaxedDiscount',
        'use_type' => 'getUseType',
        'process_scenario' => 'getProcessScenario',
        'cfop' => 'getCfop',
        'has_stock_impact' => 'getHasStockImpact',
        'has_finantial_impact' => 'getHasFinantialImpact',
        'freight_amount' => 'getFreightAmount',
        'insurance_amount' => 'getInsuranceAmount',
        'other_cost_amount' => 'getOtherCostAmount',
        'ind_tot_type' => 'getIndTotType',
        'order_number' => 'getOrderNumber',
        'order_item_number' => 'getOrderItemNumber',
        'fci_number' => 'getFciNumber',
        'recopi_number' => 'getRecopiNumber',
        'inf_ad_prod' => 'getInfAdProd',
        'vehicle' => 'getVehicle',
        'medicine' => 'getMedicine',
        'weapon' => 'getWeapon',
        'fuel' => 'getFuel',
        'entity_is_icms_substitute' => 'getEntityIsIcmsSubstitute',
        'is_transport_icms_withheld' => 'getIsTransportIcmsWithheld',
        'icms_tax_relief' => 'getIcmsTaxRelief',
        'export' => 'getExport',
        'di' => 'getDi',
        'calculated_tax' => 'getCalculatedTax'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const USE_TYPE_USE_OR_CONSUMPTION = 'use or consumption';
    const USE_TYPE_RESALE = 'resale';
    const USE_TYPE_AGRICULTURAL_PRODUCTION = 'agricultural production';
    const USE_TYPE_PRODUCTION = 'production';
    const USE_TYPE_USE_OR_CONSUMPTION_ON_BUSINESS_ESTABLISHMENT = 'use or consumption on business establishment';
    const USE_TYPE_USE_OR_CONSUMPTION_ON_TRANSPORTER_SERVICE_ESTABLISHMENT = 'use or consumption on transporter service establishment';
    const USE_TYPE_USE_OR_CONSUMPTION_ON_COMMUNICATION_SERVICE_ESTABLISHMENT = 'use or consumption on communication service establishment';
    const USE_TYPE_USE_OR_CONSUMPTION_ON_DEMAND_BY_CONTRACT = 'use or consumption on demand by contract';
    const USE_TYPE_USE_OR_CONSUMPTION_ON_ENERGY_SUPPLIER_ESTABLISHMENT = 'use or consumption on energy supplier establishment';
    const USE_TYPE_USE_OR_CONSUMPTION_OF_FUEL_TRANSACTION_TYPE_EXPORTATION = 'use or consumption of fuel transaction type exportation';
    const USE_TYPE_FIXED_ASSETS = 'fixed assets';
    const USE_TYPE_RESALE_EXPORT = 'resale export';
    const USE_TYPE_RESALE_ICMS_EXEMPT = 'resale icms exempt';
    const USE_TYPE_RESALE_BUYER_UNDER_THE_SAME_ICMS_ST_TAX_RULE = 'resale buyer under the same icmsSt tax rule';
    const USE_TYPE_TRANSPORT_OF_GOODS_THAT_DONT_NEED_INVOICE__NF = 'transport of goods that don't need invoice (nf)';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getUseTypeAllowableValues()
    {
        return [
            self::USE_TYPE_USE_OR_CONSUMPTION,
            self::USE_TYPE_RESALE,
            self::USE_TYPE_AGRICULTURAL_PRODUCTION,
            self::USE_TYPE_PRODUCTION,
            self::USE_TYPE_USE_OR_CONSUMPTION_ON_BUSINESS_ESTABLISHMENT,
            self::USE_TYPE_USE_OR_CONSUMPTION_ON_TRANSPORTER_SERVICE_ESTABLISHMENT,
            self::USE_TYPE_USE_OR_CONSUMPTION_ON_COMMUNICATION_SERVICE_ESTABLISHMENT,
            self::USE_TYPE_USE_OR_CONSUMPTION_ON_DEMAND_BY_CONTRACT,
            self::USE_TYPE_USE_OR_CONSUMPTION_ON_ENERGY_SUPPLIER_ESTABLISHMENT,
            self::USE_TYPE_USE_OR_CONSUMPTION_OF_FUEL_TRANSACTION_TYPE_EXPORTATION,
            self::USE_TYPE_FIXED_ASSETS,
            self::USE_TYPE_RESALE_EXPORT,
            self::USE_TYPE_RESALE_ICMS_EXEMPT,
            self::USE_TYPE_RESALE_BUYER_UNDER_THE_SAME_ICMS_ST_TAX_RULE,
            self::USE_TYPE_TRANSPORT_OF_GOODS_THAT_DONT_NEED_INVOICE__NF,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_code'] = isset($data['line_code']) ? $data['line_code'] : null;
        $this->container['item_code'] = isset($data['item_code']) ? $data['item_code'] : null;
        $this->container['avalara_goods_and_services_type'] = isset($data['avalara_goods_and_services_type']) ? $data['avalara_goods_and_services_type'] : null;
        $this->container['number_of_items'] = isset($data['number_of_items']) ? $data['number_of_items'] : 1.0;
        $this->container['returned_percentage_amount'] = isset($data['returned_percentage_amount']) ? $data['returned_percentage_amount'] : null;
        $this->container['line_unit_price'] = isset($data['line_unit_price']) ? $data['line_unit_price'] : null;
        $this->container['line_amount'] = isset($data['line_amount']) ? $data['line_amount'] : null;
        $this->container['item_description'] = isset($data['item_description']) ? $data['item_description'] : null;
        $this->container['line_taxed_discount'] = isset($data['line_taxed_discount']) ? $data['line_taxed_discount'] : null;
        $this->container['line_untaxed_discount'] = isset($data['line_untaxed_discount']) ? $data['line_untaxed_discount'] : null;
        $this->container['use_type'] = isset($data['use_type']) ? $data['use_type'] : null;
        $this->container['process_scenario'] = isset($data['process_scenario']) ? $data['process_scenario'] : null;
        $this->container['cfop'] = isset($data['cfop']) ? $data['cfop'] : null;
        $this->container['has_stock_impact'] = isset($data['has_stock_impact']) ? $data['has_stock_impact'] : null;
        $this->container['has_finantial_impact'] = isset($data['has_finantial_impact']) ? $data['has_finantial_impact'] : null;
        $this->container['freight_amount'] = isset($data['freight_amount']) ? $data['freight_amount'] : null;
        $this->container['insurance_amount'] = isset($data['insurance_amount']) ? $data['insurance_amount'] : null;
        $this->container['other_cost_amount'] = isset($data['other_cost_amount']) ? $data['other_cost_amount'] : null;
        $this->container['ind_tot_type'] = isset($data['ind_tot_type']) ? $data['ind_tot_type'] : true;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['order_item_number'] = isset($data['order_item_number']) ? $data['order_item_number'] : null;
        $this->container['fci_number'] = isset($data['fci_number']) ? $data['fci_number'] : null;
        $this->container['recopi_number'] = isset($data['recopi_number']) ? $data['recopi_number'] : null;
        $this->container['inf_ad_prod'] = isset($data['inf_ad_prod']) ? $data['inf_ad_prod'] : null;
        $this->container['vehicle'] = isset($data['vehicle']) ? $data['vehicle'] : null;
        $this->container['medicine'] = isset($data['medicine']) ? $data['medicine'] : null;
        $this->container['weapon'] = isset($data['weapon']) ? $data['weapon'] : null;
        $this->container['fuel'] = isset($data['fuel']) ? $data['fuel'] : null;
        $this->container['entity_is_icms_substitute'] = isset($data['entity_is_icms_substitute']) ? $data['entity_is_icms_substitute'] : null;
        $this->container['is_transport_icms_withheld'] = isset($data['is_transport_icms_withheld']) ? $data['is_transport_icms_withheld'] : null;
        $this->container['icms_tax_relief'] = isset($data['icms_tax_relief']) ? $data['icms_tax_relief'] : null;
        $this->container['export'] = isset($data['export']) ? $data['export'] : null;
        $this->container['di'] = isset($data['di']) ? $data['di'] : null;
        $this->container['calculated_tax'] = isset($data['calculated_tax']) ? $data['calculated_tax'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['line_code'] === null) {
            $invalid_properties[] = "'line_code' can't be null";
        }
        if ($this->container['item_code'] === null) {
            $invalid_properties[] = "'item_code' can't be null";
        }
        if ((strlen($this->container['item_code']) > 60)) {
            $invalid_properties[] = "invalid value for 'item_code', the character length must be smaller than or equal to 60.";
        }

        if ($this->container['number_of_items'] === null) {
            $invalid_properties[] = "'number_of_items' can't be null";
        }
        if ($this->container['line_amount'] === null) {
            $invalid_properties[] = "'line_amount' can't be null";
        }
        if ($this->container['item_description'] === null) {
            $invalid_properties[] = "'item_description' can't be null";
        }
        if ($this->container['use_type'] === null) {
            $invalid_properties[] = "'use_type' can't be null";
        }
        $allowed_values = ["use or consumption", "resale", "agricultural production", "production", "use or consumption on business establishment", "use or consumption on transporter service establishment", "use or consumption on communication service establishment", "use or consumption on demand by contract", "use or consumption on energy supplier establishment", "use or consumption of fuel transaction type exportation", "fixed assets", "resale export", "resale icms exempt", "resale buyer under the same icmsSt tax rule", "transport of goods that don't need invoice (nf)"];
        if (!in_array($this->container['use_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'use_type', must be one of #{allowed_values}.";
        }

        if ($this->container['process_scenario'] === null) {
            $invalid_properties[] = "'process_scenario' can't be null";
        }
        if ((strlen($this->container['process_scenario']) > 60)) {
            $invalid_properties[] = "invalid value for 'process_scenario', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['order_number']) && (strlen($this->container['order_number']) > 15)) {
            $invalid_properties[] = "invalid value for 'order_number', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['order_number']) && (strlen($this->container['order_number']) < 1)) {
            $invalid_properties[] = "invalid value for 'order_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['order_item_number']) && !preg_match("/[0-9]{1,6}/", $this->container['order_item_number'])) {
            $invalid_properties[] = "invalid value for 'order_item_number', must be conform to the pattern /[0-9]{1,6}/.";
        }

        if (!is_null($this->container['fci_number']) && !preg_match("/[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/", $this->container['fci_number'])) {
            $invalid_properties[] = "invalid value for 'fci_number', must be conform to the pattern /[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/.";
        }

        if (!is_null($this->container['recopi_number']) && (strlen($this->container['recopi_number']) > 20)) {
            $invalid_properties[] = "invalid value for 'recopi_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['recopi_number']) && !preg_match("/[0-9]{20}/", $this->container['recopi_number'])) {
            $invalid_properties[] = "invalid value for 'recopi_number', must be conform to the pattern /[0-9]{20}/.";
        }

        if (!is_null($this->container['inf_ad_prod']) && (strlen($this->container['inf_ad_prod']) > 500)) {
            $invalid_properties[] = "invalid value for 'inf_ad_prod', the character length must be smaller than or equal to 500.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['line_code'] === null) {
            return false;
        }
        if ($this->container['item_code'] === null) {
            return false;
        }
        if (strlen($this->container['item_code']) > 60) {
            return false;
        }
        if ($this->container['number_of_items'] === null) {
            return false;
        }
        if ($this->container['line_amount'] === null) {
            return false;
        }
        if ($this->container['item_description'] === null) {
            return false;
        }
        if ($this->container['use_type'] === null) {
            return false;
        }
        $allowed_values = ["use or consumption", "resale", "agricultural production", "production", "use or consumption on business establishment", "use or consumption on transporter service establishment", "use or consumption on communication service establishment", "use or consumption on demand by contract", "use or consumption on energy supplier establishment", "use or consumption of fuel transaction type exportation", "fixed assets", "resale export", "resale icms exempt", "resale buyer under the same icmsSt tax rule", "transport of goods that don't need invoice (nf)"];
        if (!in_array($this->container['use_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['process_scenario'] === null) {
            return false;
        }
        if (strlen($this->container['process_scenario']) > 60) {
            return false;
        }
        if (strlen($this->container['order_number']) > 15) {
            return false;
        }
        if (strlen($this->container['order_number']) < 1) {
            return false;
        }
        if (!preg_match("/[0-9]{1,6}/", $this->container['order_item_number'])) {
            return false;
        }
        if (!preg_match("/[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/", $this->container['fci_number'])) {
            return false;
        }
        if (strlen($this->container['recopi_number']) > 20) {
            return false;
        }
        if (!preg_match("/[0-9]{20}/", $this->container['recopi_number'])) {
            return false;
        }
        if (strlen($this->container['inf_ad_prod']) > 500) {
            return false;
        }
        return true;
    }


    /**
     * Gets line_code
     * @return int
     */
    public function getLineCode()
    {
        return $this->container['line_code'];
    }

    /**
     * Sets line_code
     * @param int $line_code This string is a unique identifier for this line in the transaction
     * @return $this
     */
    public function setLineCode($line_code)
    {
        $this->container['line_code'] = $line_code;

        return $this;
    }

    /**
     * Gets item_code
     * @return string
     */
    public function getItemCode()
    {
        return $this->container['item_code'];
    }

    /**
     * Sets item_code
     * @param string $item_code This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states.
     * @return $this
     */
    public function setItemCode($item_code)
    {
        if ((strlen($item_code) > 60)) {
            throw new \InvalidArgumentException('invalid length for $item_code when calling LineForGoods., must be smaller than or equal to 60.');
        }

        $this->container['item_code'] = $item_code;

        return $this;
    }

    /**
     * Gets avalara_goods_and_services_type
     * @return string
     */
    public function getAvalaraGoodsAndServicesType()
    {
        return $this->container['avalara_goods_and_services_type'];
    }

    /**
     * Sets avalara_goods_and_services_type
     * @param string $avalara_goods_and_services_type AGAST CODE for itemCode
     * @return $this
     */
    public function setAvalaraGoodsAndServicesType($avalara_goods_and_services_type)
    {
        $this->container['avalara_goods_and_services_type'] = $avalara_goods_and_services_type;

        return $this;
    }

    /**
     * Gets number_of_items
     * @return double
     */
    public function getNumberOfItems()
    {
        return $this->container['number_of_items'];
    }

    /**
     * Sets number_of_items
     * @param double $number_of_items This decimal 11 integers and 1 to 4 decimals captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1
     * @return $this
     */
    public function setNumberOfItems($number_of_items)
    {
        $this->container['number_of_items'] = $number_of_items;

        return $this;
    }

    /**
     * Gets returned_percentage_amount
     * @return double
     */
    public function getReturnedPercentageAmount()
    {
        return $this->container['returned_percentage_amount'];
    }

    /**
     * Sets returned_percentage_amount
     * @param double $returned_percentage_amount when is return operation this field inform the percentage of returned itens. This decimal max 3 integers and 2 decimals, v >=0.00 and v <= 100.00
     * @return $this
     */
    public function setReturnedPercentageAmount($returned_percentage_amount)
    {
        $this->container['returned_percentage_amount'] = $returned_percentage_amount;

        return $this;
    }

    /**
     * Gets line_unit_price
     * @return double
     */
    public function getLineUnitPrice()
    {
        return $this->container['line_unit_price'];
    }

    /**
     * Sets line_unit_price
     * @param double $line_unit_price This decimal 11 integers and 1 to 10 decimals captures the unit price of this line.
     * @return $this
     */
    public function setLineUnitPrice($line_unit_price)
    {
        $this->container['line_unit_price'] = $line_unit_price;

        return $this;
    }

    /**
     * Gets line_amount
     * @return double
     */
    public function getLineAmount()
    {
        return $this->container['line_amount'];
    }

    /**
     * Sets line_amount
     * @param double $line_amount In its simplest form lineAmount = (item price * numberOfItems). If taxIncluded is 'true', lineAmount = (item price * numberOfItems + tax).
     * @return $this
     */
    public function setLineAmount($line_amount)
    {
        $this->container['line_amount'] = $line_amount;

        return $this;
    }

    /**
     * Gets item_description
     * @return string
     */
    public function getItemDescription()
    {
        return $this->container['item_description'];
    }

    /**
     * Sets item_description
     * @param string $item_description This string captures the description of the item represented by this line, will be used LC 116
     * @return $this
     */
    public function setItemDescription($item_description)
    {
        $this->container['item_description'] = $item_description;

        return $this;
    }

    /**
     * Gets line_taxed_discount
     * @return double
     */
    public function getLineTaxedDiscount()
    {
        return $this->container['line_taxed_discount'];
    }

    /**
     * Sets line_taxed_discount
     * @param double $line_taxed_discount Discount conditional, This decimal 13 integers and 0 to 2 decimals
     * @return $this
     */
    public function setLineTaxedDiscount($line_taxed_discount)
    {
        $this->container['line_taxed_discount'] = $line_taxed_discount;

        return $this;
    }

    /**
     * Gets line_untaxed_discount
     * @return double
     */
    public function getLineUntaxedDiscount()
    {
        return $this->container['line_untaxed_discount'];
    }

    /**
     * Sets line_untaxed_discount
     * @param double $line_untaxed_discount discount unconditional, This decimal 13 integers and 0 to 2 decimals
     * @return $this
     */
    public function setLineUntaxedDiscount($line_untaxed_discount)
    {
        $this->container['line_untaxed_discount'] = $line_untaxed_discount;

        return $this;
    }

    /**
     * Gets use_type
     * @return string
     */
    public function getUseType()
    {
        return $this->container['use_type'];
    }

    /**
     * Sets use_type
     * @param string $use_type This is a enumeration folowing table
     * @return $this
     */
    public function setUseType($use_type)
    {
        $allowed_values = array('use or consumption', 'resale', 'agricultural production', 'production', 'use or consumption on business establishment', 'use or consumption on transporter service establishment', 'use or consumption on communication service establishment', 'use or consumption on demand by contract', 'use or consumption on energy supplier establishment', 'use or consumption of fuel transaction type exportation', 'fixed assets', 'resale export', 'resale icms exempt', 'resale buyer under the same icmsSt tax rule', 'transport of goods that don't need invoice (nf)');
        if ((!in_array($use_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'use_type', must be one of 'use or consumption', 'resale', 'agricultural production', 'production', 'use or consumption on business establishment', 'use or consumption on transporter service establishment', 'use or consumption on communication service establishment', 'use or consumption on demand by contract', 'use or consumption on energy supplier establishment', 'use or consumption of fuel transaction type exportation', 'fixed assets', 'resale export', 'resale icms exempt', 'resale buyer under the same icmsSt tax rule', 'transport of goods that don't need invoice (nf)'");
        }
        $this->container['use_type'] = $use_type;

        return $this;
    }

    /**
     * Gets process_scenario
     * @return string
     */
    public function getProcessScenario()
    {
        return $this->container['process_scenario'];
    }

    /**
     * Sets process_scenario
     * @param string $process_scenario Reference to process configurantion of this transaction, See ProcessScenario definition
     * @return $this
     */
    public function setProcessScenario($process_scenario)
    {
        if ((strlen($process_scenario) > 60)) {
            throw new \InvalidArgumentException('invalid length for $process_scenario when calling LineForGoods., must be smaller than or equal to 60.');
        }

        $this->container['process_scenario'] = $process_scenario;

        return $this;
    }

    /**
     * Gets cfop
     * @return int
     */
    public function getCfop()
    {
        return $this->container['cfop'];
    }

    /**
     * Sets cfop
     * @param int $cfop Fiscal Operation Code of transport service
     * @return $this
     */
    public function setCfop($cfop)
    {
        $this->container['cfop'] = $cfop;

        return $this;
    }

    /**
     * Gets has_stock_impact
     * @return bool
     */
    public function getHasStockImpact()
    {
        return $this->container['has_stock_impact'];
    }

    /**
     * Sets has_stock_impact
     * @param bool $has_stock_impact return if this transaction has stock impact for this process or CFOP
     * @return $this
     */
    public function setHasStockImpact($has_stock_impact)
    {
        $this->container['has_stock_impact'] = $has_stock_impact;

        return $this;
    }

    /**
     * Gets has_finantial_impact
     * @return bool
     */
    public function getHasFinantialImpact()
    {
        return $this->container['has_finantial_impact'];
    }

    /**
     * Sets has_finantial_impact
     * @param bool $has_finantial_impact return if this transaction has finantial impact for this process or CFOP
     * @return $this
     */
    public function setHasFinantialImpact($has_finantial_impact)
    {
        $this->container['has_finantial_impact'] = $has_finantial_impact;

        return $this;
    }

    /**
     * Gets freight_amount
     * @return double
     */
    public function getFreightAmount()
    {
        return $this->container['freight_amount'];
    }

    /**
     * Sets freight_amount
     * @param double $freight_amount This decimal 13 integers and 0 to 2 decimals
     * @return $this
     */
    public function setFreightAmount($freight_amount)
    {
        $this->container['freight_amount'] = $freight_amount;

        return $this;
    }

    /**
     * Gets insurance_amount
     * @return double
     */
    public function getInsuranceAmount()
    {
        return $this->container['insurance_amount'];
    }

    /**
     * Sets insurance_amount
     * @param double $insurance_amount This decimal 13 integers and 0 to 2 decimals
     * @return $this
     */
    public function setInsuranceAmount($insurance_amount)
    {
        $this->container['insurance_amount'] = $insurance_amount;

        return $this;
    }

    /**
     * Gets other_cost_amount
     * @return double
     */
    public function getOtherCostAmount()
    {
        return $this->container['other_cost_amount'];
    }

    /**
     * Sets other_cost_amount
     * @param double $other_cost_amount This decimal 13 integers and 0 to 2 decimals
     * @return $this
     */
    public function setOtherCostAmount($other_cost_amount)
    {
        $this->container['other_cost_amount'] = $other_cost_amount;

        return $this;
    }

    /**
     * Gets ind_tot_type
     * @return bool
     */
    public function getIndTotType()
    {
        return $this->container['ind_tot_type'];
    }

    /**
     * Sets ind_tot_type
     * @param bool $ind_tot_type The item value will compose the invoice total value.
     * @return $this
     */
    public function setIndTotType($ind_tot_type)
    {
        $this->container['ind_tot_type'] = $ind_tot_type;

        return $this;
    }

    /**
     * Gets order_number
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     * @param string $order_number order number, information used for B2B control process
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        if (!is_null($order_number) && (strlen($order_number) > 15)) {
            throw new \InvalidArgumentException('invalid length for $order_number when calling LineForGoods., must be smaller than or equal to 15.');
        }
        if (!is_null($order_number) && (strlen($order_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $order_number when calling LineForGoods., must be bigger than or equal to 1.');
        }

        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets order_item_number
     * @return string
     */
    public function getOrderItemNumber()
    {
        return $this->container['order_item_number'];
    }

    /**
     * Sets order_item_number
     * @param string $order_item_number number of the item from order number, information used for B2B control process
     * @return $this
     */
    public function setOrderItemNumber($order_item_number)
    {

        if (!is_null($order_item_number) && (!preg_match("/[0-9]{1,6}/", $order_item_number))) {
            throw new \InvalidArgumentException("invalid value for $order_item_number when calling LineForGoods., must conform to the pattern /[0-9]{1,6}/.");
        }

        $this->container['order_item_number'] = $order_item_number;

        return $this;
    }

    /**
     * Gets fci_number
     * @return string
     */
    public function getFciNumber()
    {
        return $this->container['fci_number'];
    }

    /**
     * Sets fci_number
     * @param string $fci_number Gloal Unique identifier (Importation form)
     * @return $this
     */
    public function setFciNumber($fci_number)
    {

        if (!is_null($fci_number) && (!preg_match("/[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/", $fci_number))) {
            throw new \InvalidArgumentException("invalid value for $fci_number when calling LineForGoods., must conform to the pattern /[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}/.");
        }

        $this->container['fci_number'] = $fci_number;

        return $this;
    }

    /**
     * Gets recopi_number
     * @return string
     */
    public function getRecopiNumber()
    {
        return $this->container['recopi_number'];
    }

    /**
     * Sets recopi_number
     * @param string $recopi_number RECOPI number
     * @return $this
     */
    public function setRecopiNumber($recopi_number)
    {
        if (!is_null($recopi_number) && (strlen($recopi_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $recopi_number when calling LineForGoods., must be smaller than or equal to 20.');
        }
        if (!is_null($recopi_number) && (!preg_match("/[0-9]{20}/", $recopi_number))) {
            throw new \InvalidArgumentException("invalid value for $recopi_number when calling LineForGoods., must conform to the pattern /[0-9]{20}/.");
        }

        $this->container['recopi_number'] = $recopi_number;

        return $this;
    }

    /**
     * Gets inf_ad_prod
     * @return string
     */
    public function getInfAdProd()
    {
        return $this->container['inf_ad_prod'];
    }

    /**
     * Sets inf_ad_prod
     * @param string $inf_ad_prod additional information about product (referenced standard, complementary info, etc)
     * @return $this
     */
    public function setInfAdProd($inf_ad_prod)
    {
        if (!is_null($inf_ad_prod) && (strlen($inf_ad_prod) > 500)) {
            throw new \InvalidArgumentException('invalid length for $inf_ad_prod when calling LineForGoods., must be smaller than or equal to 500.');
        }

        $this->container['inf_ad_prod'] = $inf_ad_prod;

        return $this;
    }

    /**
     * Gets vehicle
     * @return \Swagger\Client\Model\Vehicle
     */
    public function getVehicle()
    {
        return $this->container['vehicle'];
    }

    /**
     * Sets vehicle
     * @param \Swagger\Client\Model\Vehicle $vehicle
     * @return $this
     */
    public function setVehicle($vehicle)
    {
        $this->container['vehicle'] = $vehicle;

        return $this;
    }

    /**
     * Gets medicine
     * @return \Swagger\Client\Model\Medicine
     */
    public function getMedicine()
    {
        return $this->container['medicine'];
    }

    /**
     * Sets medicine
     * @param \Swagger\Client\Model\Medicine $medicine
     * @return $this
     */
    public function setMedicine($medicine)
    {
        $this->container['medicine'] = $medicine;

        return $this;
    }

    /**
     * Gets weapon
     * @return \Swagger\Client\Model\Weapon
     */
    public function getWeapon()
    {
        return $this->container['weapon'];
    }

    /**
     * Sets weapon
     * @param \Swagger\Client\Model\Weapon $weapon
     * @return $this
     */
    public function setWeapon($weapon)
    {
        $this->container['weapon'] = $weapon;

        return $this;
    }

    /**
     * Gets fuel
     * @return \Swagger\Client\Model\Fuel
     */
    public function getFuel()
    {
        return $this->container['fuel'];
    }

    /**
     * Sets fuel
     * @param \Swagger\Client\Model\Fuel $fuel
     * @return $this
     */
    public function setFuel($fuel)
    {
        $this->container['fuel'] = $fuel;

        return $this;
    }

    /**
     * Gets entity_is_icms_substitute
     * @return bool
     */
    public function getEntityIsIcmsSubstitute()
    {
        return $this->container['entity_is_icms_substitute'];
    }

    /**
     * Sets entity_is_icms_substitute
     * @param bool $entity_is_icms_substitute Inform that for this item the Entity referenced is ICMS Substitute
     * @return $this
     */
    public function setEntityIsIcmsSubstitute($entity_is_icms_substitute)
    {
        $this->container['entity_is_icms_substitute'] = $entity_is_icms_substitute;

        return $this;
    }

    /**
     * Gets is_transport_icms_withheld
     * @return bool
     */
    public function getIsTransportIcmsWithheld()
    {
        return $this->container['is_transport_icms_withheld'];
    }

    /**
     * Sets is_transport_icms_withheld
     * @param bool $is_transport_icms_withheld Inform that this item has ICMS withheld for transport value service.
     * @return $this
     */
    public function setIsTransportIcmsWithheld($is_transport_icms_withheld)
    {
        $this->container['is_transport_icms_withheld'] = $is_transport_icms_withheld;

        return $this;
    }

    /**
     * Gets icms_tax_relief
     * @return \Swagger\Client\Model\LineForGoodsIcmsTaxRelief
     */
    public function getIcmsTaxRelief()
    {
        return $this->container['icms_tax_relief'];
    }

    /**
     * Sets icms_tax_relief
     * @param \Swagger\Client\Model\LineForGoodsIcmsTaxRelief $icms_tax_relief
     * @return $this
     */
    public function setIcmsTaxRelief($icms_tax_relief)
    {
        $this->container['icms_tax_relief'] = $icms_tax_relief;

        return $this;
    }

    /**
     * Gets export
     * @return \Swagger\Client\Model\LineForGoodsExport[]
     */
    public function getExport()
    {
        return $this->container['export'];
    }

    /**
     * Sets export
     * @param \Swagger\Client\Model\LineForGoodsExport[] $export Exportation detail
     * @return $this
     */
    public function setExport($export)
    {
        $this->container['export'] = $export;

        return $this;
    }

    /**
     * Gets di
     * @return \Swagger\Client\Model\LineForGoodsDi[]
     */
    public function getDi()
    {
        return $this->container['di'];
    }

    /**
     * Sets di
     * @param \Swagger\Client\Model\LineForGoodsDi[] $di Import declaration
     * @return $this
     */
    public function setDi($di)
    {
        $this->container['di'] = $di;

        return $this;
    }

    /**
     * Gets calculated_tax
     * @return \Swagger\Client\Model\LineForGoodsCalculatedTax
     */
    public function getCalculatedTax()
    {
        return $this->container['calculated_tax'];
    }

    /**
     * Sets calculated_tax
     * @param \Swagger\Client\Model\LineForGoodsCalculatedTax $calculated_tax
     * @return $this
     */
    public function setCalculatedTax($calculated_tax)
    {
        $this->container['calculated_tax'] = $calculated_tax;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


