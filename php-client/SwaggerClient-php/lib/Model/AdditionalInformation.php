<?php
/**
 * AdditionalInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * AdditionalInformation Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AdditionalInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AdditionalInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fiscal_info' => 'string',
        'complementary_info' => 'string',
        'proc_ref' => '\Swagger\Client\Model\AdditionalInformationProcRef[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'fiscal_info' => 'fiscalInfo',
        'complementary_info' => 'complementaryInfo',
        'proc_ref' => 'procRef'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'fiscal_info' => 'setFiscalInfo',
        'complementary_info' => 'setComplementaryInfo',
        'proc_ref' => 'setProcRef'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'fiscal_info' => 'getFiscalInfo',
        'complementary_info' => 'getComplementaryInfo',
        'proc_ref' => 'getProcRef'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fiscal_info'] = isset($data['fiscal_info']) ? $data['fiscal_info'] : null;
        $this->container['complementary_info'] = isset($data['complementary_info']) ? $data['complementary_info'] : null;
        $this->container['proc_ref'] = isset($data['proc_ref']) ? $data['proc_ref'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['fiscal_info']) && (strlen($this->container['fiscal_info']) > 2000)) {
            $invalid_properties[] = "invalid value for 'fiscal_info', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['fiscal_info']) && !preg_match("/[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}/", $this->container['fiscal_info'])) {
            $invalid_properties[] = "invalid value for 'fiscal_info', must be conform to the pattern /[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}/.";
        }

        if (!is_null($this->container['complementary_info']) && (strlen($this->container['complementary_info']) > 5000)) {
            $invalid_properties[] = "invalid value for 'complementary_info', the character length must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['complementary_info']) && !preg_match("/[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}/", $this->container['complementary_info'])) {
            $invalid_properties[] = "invalid value for 'complementary_info', must be conform to the pattern /[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}/.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['fiscal_info']) > 2000) {
            return false;
        }
        if (!preg_match("/[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}/", $this->container['fiscal_info'])) {
            return false;
        }
        if (strlen($this->container['complementary_info']) > 5000) {
            return false;
        }
        if (!preg_match("/[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}/", $this->container['complementary_info'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets fiscal_info
     * @return string
     */
    public function getFiscalInfo()
    {
        return $this->container['fiscal_info'];
    }

    /**
     * Sets fiscal_info
     * @param string $fiscal_info Additional information of fiscal interest
     * @return $this
     */
    public function setFiscalInfo($fiscal_info)
    {
        if (!is_null($fiscal_info) && (strlen($fiscal_info) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $fiscal_info when calling AdditionalInformation., must be smaller than or equal to 2000.');
        }
        if (!is_null($fiscal_info) && (!preg_match("/[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}/", $fiscal_info))) {
            throw new \InvalidArgumentException("invalid value for $fiscal_info when calling AdditionalInformation., must conform to the pattern /[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}/.");
        }

        $this->container['fiscal_info'] = $fiscal_info;

        return $this;
    }

    /**
     * Gets complementary_info
     * @return string
     */
    public function getComplementaryInfo()
    {
        return $this->container['complementary_info'];
    }

    /**
     * Sets complementary_info
     * @param string $complementary_info Additional information of user interest
     * @return $this
     */
    public function setComplementaryInfo($complementary_info)
    {
        if (!is_null($complementary_info) && (strlen($complementary_info) > 5000)) {
            throw new \InvalidArgumentException('invalid length for $complementary_info when calling AdditionalInformation., must be smaller than or equal to 5000.');
        }
        if (!is_null($complementary_info) && (!preg_match("/[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}/", $complementary_info))) {
            throw new \InvalidArgumentException("invalid value for $complementary_info when calling AdditionalInformation., must conform to the pattern /[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}/.");
        }

        $this->container['complementary_info'] = $complementary_info;

        return $this;
    }

    /**
     * Gets proc_ref
     * @return \Swagger\Client\Model\AdditionalInformationProcRef[]
     */
    public function getProcRef()
    {
        return $this->container['proc_ref'];
    }

    /**
     * Sets proc_ref
     * @param \Swagger\Client\Model\AdditionalInformationProcRef[] $proc_ref Referenced Process
     * @return $this
     */
    public function setProcRef($proc_ref)
    {
        $this->container['proc_ref'] = $proc_ref;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


