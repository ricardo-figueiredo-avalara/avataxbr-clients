<?php
/**
 * DefaultLocations
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * DefaultLocations Class Doc Comment
 *
 * @category    Class */
 // @description This element contains a dictionary of locations such as the origin and destination addresses to be associated with this transaction. These locations may be overridden within each line item. The key for each location in the dictionary is the location &#39;purpose&#39;. Valid locations purposes are &#39;ShipFrom&#39;, &#39;ShipTo&#39;, &#39;POS&#39;, &#39;POM&#39;, &#39;POO&#39;, &#39;BillingLocation&#39;, &#39;CallPlaced&#39;, &#39;CallReceived&#39;, &#39;ServiceRendered&#39;, &#39;POA&#39; and &#39;FirstUse&#39;. There can only be one location of a given purpose in the dictionary.
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DefaultLocations implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DefaultLocations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'entity' => '\Swagger\Client\Model\EntityLocation',
        'company' => '\Swagger\Client\Model\EntityLocation',
        'transporter' => '\Swagger\Client\Model\EntityLocation',
        'delivery_location' => '\Swagger\Client\Model\EntityLocation',
        'pickup_location' => '\Swagger\Client\Model\EntityLocation'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'entity' => 'entity',
        'company' => 'company',
        'transporter' => 'transporter',
        'delivery_location' => 'deliveryLocation',
        'pickup_location' => 'pickupLocation'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'entity' => 'setEntity',
        'company' => 'setCompany',
        'transporter' => 'setTransporter',
        'delivery_location' => 'setDeliveryLocation',
        'pickup_location' => 'setPickupLocation'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'entity' => 'getEntity',
        'company' => 'getCompany',
        'transporter' => 'getTransporter',
        'delivery_location' => 'getDeliveryLocation',
        'pickup_location' => 'getPickupLocation'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entity'] = isset($data['entity']) ? $data['entity'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['transporter'] = isset($data['transporter']) ? $data['transporter'] : null;
        $this->container['delivery_location'] = isset($data['delivery_location']) ? $data['delivery_location'] : null;
        $this->container['pickup_location'] = isset($data['pickup_location']) ? $data['pickup_location'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets entity
     * @return \Swagger\Client\Model\EntityLocation
     */
    public function getEntity()
    {
        return $this->container['entity'];
    }

    /**
     * Sets entity
     * @param \Swagger\Client\Model\EntityLocation $entity
     * @return $this
     */
    public function setEntity($entity)
    {
        $this->container['entity'] = $entity;

        return $this;
    }

    /**
     * Gets company
     * @return \Swagger\Client\Model\EntityLocation
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param \Swagger\Client\Model\EntityLocation $company
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets transporter
     * @return \Swagger\Client\Model\EntityLocation
     */
    public function getTransporter()
    {
        return $this->container['transporter'];
    }

    /**
     * Sets transporter
     * @param \Swagger\Client\Model\EntityLocation $transporter
     * @return $this
     */
    public function setTransporter($transporter)
    {
        $this->container['transporter'] = $transporter;

        return $this;
    }

    /**
     * Gets delivery_location
     * @return \Swagger\Client\Model\EntityLocation
     */
    public function getDeliveryLocation()
    {
        return $this->container['delivery_location'];
    }

    /**
     * Sets delivery_location
     * @param \Swagger\Client\Model\EntityLocation $delivery_location
     * @return $this
     */
    public function setDeliveryLocation($delivery_location)
    {
        $this->container['delivery_location'] = $delivery_location;

        return $this;
    }

    /**
     * Gets pickup_location
     * @return \Swagger\Client\Model\EntityLocation
     */
    public function getPickupLocation()
    {
        return $this->container['pickup_location'];
    }

    /**
     * Sets pickup_location
     * @param \Swagger\Client\Model\EntityLocation $pickup_location
     * @return $this
     */
    public function setPickupLocation($pickup_location)
    {
        $this->container['pickup_location'] = $pickup_location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


