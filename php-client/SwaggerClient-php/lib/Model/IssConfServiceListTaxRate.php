<?php
/**
 * IssConfServiceListTaxRate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * IssConfServiceListTaxRate Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class IssConfServiceListTaxRate implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'IssConfServiceList_taxRate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'iss' => '\Swagger\Client\Model\ServiceItemTaxRate',
        'iss_rf' => '\Swagger\Client\Model\ServiceItemTaxRate',
        'iss_e' => '\Swagger\Client\Model\ServiceItemTaxRate',
        'iss_i' => '\Swagger\Client\Model\ServiceItemTaxRate',
        'ibpt' => '\Swagger\Client\Model\IssConfServiceListTaxRateIbpt'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'iss' => 'ISS',
        'iss_rf' => 'ISS_RF',
        'iss_e' => 'ISS_E',
        'iss_i' => 'ISS_I',
        'ibpt' => 'ibpt'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'iss' => 'setIss',
        'iss_rf' => 'setIssRf',
        'iss_e' => 'setIssE',
        'iss_i' => 'setIssI',
        'ibpt' => 'setIbpt'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'iss' => 'getIss',
        'iss_rf' => 'getIssRf',
        'iss_e' => 'getIssE',
        'iss_i' => 'getIssI',
        'ibpt' => 'getIbpt'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['iss'] = isset($data['iss']) ? $data['iss'] : null;
        $this->container['iss_rf'] = isset($data['iss_rf']) ? $data['iss_rf'] : null;
        $this->container['iss_e'] = isset($data['iss_e']) ? $data['iss_e'] : null;
        $this->container['iss_i'] = isset($data['iss_i']) ? $data['iss_i'] : null;
        $this->container['ibpt'] = isset($data['ibpt']) ? $data['ibpt'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets iss
     * @return \Swagger\Client\Model\ServiceItemTaxRate
     */
    public function getIss()
    {
        return $this->container['iss'];
    }

    /**
     * Sets iss
     * @param \Swagger\Client\Model\ServiceItemTaxRate $iss
     * @return $this
     */
    public function setIss($iss)
    {
        $this->container['iss'] = $iss;

        return $this;
    }

    /**
     * Gets iss_rf
     * @return \Swagger\Client\Model\ServiceItemTaxRate
     */
    public function getIssRf()
    {
        return $this->container['iss_rf'];
    }

    /**
     * Sets iss_rf
     * @param \Swagger\Client\Model\ServiceItemTaxRate $iss_rf
     * @return $this
     */
    public function setIssRf($iss_rf)
    {
        $this->container['iss_rf'] = $iss_rf;

        return $this;
    }

    /**
     * Gets iss_e
     * @return \Swagger\Client\Model\ServiceItemTaxRate
     */
    public function getIssE()
    {
        return $this->container['iss_e'];
    }

    /**
     * Sets iss_e
     * @param \Swagger\Client\Model\ServiceItemTaxRate $iss_e
     * @return $this
     */
    public function setIssE($iss_e)
    {
        $this->container['iss_e'] = $iss_e;

        return $this;
    }

    /**
     * Gets iss_i
     * @return \Swagger\Client\Model\ServiceItemTaxRate
     */
    public function getIssI()
    {
        return $this->container['iss_i'];
    }

    /**
     * Sets iss_i
     * @param \Swagger\Client\Model\ServiceItemTaxRate $iss_i
     * @return $this
     */
    public function setIssI($iss_i)
    {
        $this->container['iss_i'] = $iss_i;

        return $this;
    }

    /**
     * Gets ibpt
     * @return \Swagger\Client\Model\IssConfServiceListTaxRateIbpt
     */
    public function getIbpt()
    {
        return $this->container['ibpt'];
    }

    /**
     * Sets ibpt
     * @param \Swagger\Client\Model\IssConfServiceListTaxRateIbpt $ibpt
     * @return $this
     */
    public function setIbpt($ibpt)
    {
        $this->container['ibpt'] = $ibpt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


