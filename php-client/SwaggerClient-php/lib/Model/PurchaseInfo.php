<?php
/**
 * PurchaseInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PurchaseInfo Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PurchaseInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'government_order' => 'string',
        'order_number' => 'string',
        'contract_number' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'government_order' => 'governmentOrder',
        'order_number' => 'orderNumber',
        'contract_number' => 'contractNumber'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'government_order' => 'setGovernmentOrder',
        'order_number' => 'setOrderNumber',
        'contract_number' => 'setContractNumber'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'government_order' => 'getGovernmentOrder',
        'order_number' => 'getOrderNumber',
        'contract_number' => 'getContractNumber'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['government_order'] = isset($data['government_order']) ? $data['government_order'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['contract_number'] = isset($data['contract_number']) ? $data['contract_number'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['government_order']) && (strlen($this->container['government_order']) > 22)) {
            $invalid_properties[] = "invalid value for 'government_order', the character length must be smaller than or equal to 22.";
        }

        if (!is_null($this->container['government_order']) && (strlen($this->container['government_order']) < 1)) {
            $invalid_properties[] = "invalid value for 'government_order', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['order_number']) && (strlen($this->container['order_number']) > 60)) {
            $invalid_properties[] = "invalid value for 'order_number', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['order_number']) && (strlen($this->container['order_number']) < 1)) {
            $invalid_properties[] = "invalid value for 'order_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['contract_number']) && (strlen($this->container['contract_number']) > 60)) {
            $invalid_properties[] = "invalid value for 'contract_number', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['contract_number']) && (strlen($this->container['contract_number']) < 1)) {
            $invalid_properties[] = "invalid value for 'contract_number', the character length must be bigger than or equal to 1.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['government_order']) > 22) {
            return false;
        }
        if (strlen($this->container['government_order']) < 1) {
            return false;
        }
        if (strlen($this->container['order_number']) > 60) {
            return false;
        }
        if (strlen($this->container['order_number']) < 1) {
            return false;
        }
        if (strlen($this->container['contract_number']) > 60) {
            return false;
        }
        if (strlen($this->container['contract_number']) < 1) {
            return false;
        }
        return true;
    }


    /**
     * Gets government_order
     * @return string
     */
    public function getGovernmentOrder()
    {
        return $this->container['government_order'];
    }

    /**
     * Sets government_order
     * @param string $government_order Invoice info for government purchase orders Informação da Nota de Empenho de compras públicas
     * @return $this
     */
    public function setGovernmentOrder($government_order)
    {
        if (!is_null($government_order) && (strlen($government_order) > 22)) {
            throw new \InvalidArgumentException('invalid length for $government_order when calling PurchaseInfo., must be smaller than or equal to 22.');
        }
        if (!is_null($government_order) && (strlen($government_order) < 1)) {
            throw new \InvalidArgumentException('invalid length for $government_order when calling PurchaseInfo., must be bigger than or equal to 1.');
        }

        $this->container['government_order'] = $government_order;

        return $this;
    }

    /**
     * Gets order_number
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     * @param string $order_number Order info Informação do pedido
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        if (!is_null($order_number) && (strlen($order_number) > 60)) {
            throw new \InvalidArgumentException('invalid length for $order_number when calling PurchaseInfo., must be smaller than or equal to 60.');
        }
        if (!is_null($order_number) && (strlen($order_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $order_number when calling PurchaseInfo., must be bigger than or equal to 1.');
        }

        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets contract_number
     * @return string
     */
    public function getContractNumber()
    {
        return $this->container['contract_number'];
    }

    /**
     * Sets contract_number
     * @param string $contract_number Agreement info Informação do contrato
     * @return $this
     */
    public function setContractNumber($contract_number)
    {
        if (!is_null($contract_number) && (strlen($contract_number) > 60)) {
            throw new \InvalidArgumentException('invalid length for $contract_number when calling PurchaseInfo., must be smaller than or equal to 60.');
        }
        if (!is_null($contract_number) && (strlen($contract_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $contract_number when calling PurchaseInfo., must be bigger than or equal to 1.');
        }

        $this->container['contract_number'] = $contract_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


