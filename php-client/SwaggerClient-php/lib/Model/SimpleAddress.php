<?php
/**
 * SimpleAddress
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SimpleAddress Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SimpleAddress implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SimpleAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line1' => 'string',
        'line2' => 'string',
        'line3' => 'string',
        'city' => 'string',
        'zipcode' => 'string',
        'state' => '\Swagger\Client\Model\StateEnum',
        'country' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'line1' => 'line1',
        'line2' => 'line2',
        'line3' => 'line3',
        'city' => 'city',
        'zipcode' => 'zipcode',
        'state' => 'state',
        'country' => 'country'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'line1' => 'setLine1',
        'line2' => 'setLine2',
        'line3' => 'setLine3',
        'city' => 'setCity',
        'zipcode' => 'setZipcode',
        'state' => 'setState',
        'country' => 'setCountry'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'line1' => 'getLine1',
        'line2' => 'getLine2',
        'line3' => 'getLine3',
        'city' => 'getCity',
        'zipcode' => 'getZipcode',
        'state' => 'getState',
        'country' => 'getCountry'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line1'] = isset($data['line1']) ? $data['line1'] : null;
        $this->container['line2'] = isset($data['line2']) ? $data['line2'] : null;
        $this->container['line3'] = isset($data['line3']) ? $data['line3'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['zipcode'] = isset($data['zipcode']) ? $data['zipcode'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : 'BRA';
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['line1'] === null) {
            $invalid_properties[] = "'line1' can't be null";
        }
        if ((strlen($this->container['line1']) > 60)) {
            $invalid_properties[] = "invalid value for 'line1', the character length must be smaller than or equal to 60.";
        }

        if ($this->container['line2'] === null) {
            $invalid_properties[] = "'line2' can't be null";
        }
        if ((strlen($this->container['line2']) > 60)) {
            $invalid_properties[] = "invalid value for 'line2', the character length must be smaller than or equal to 60.";
        }

        if ($this->container['line3'] === null) {
            $invalid_properties[] = "'line3' can't be null";
        }
        if ((strlen($this->container['line3']) > 60)) {
            $invalid_properties[] = "invalid value for 'line3', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['city']) && (strlen($this->container['city']) > 60)) {
            $invalid_properties[] = "invalid value for 'city', the character length must be smaller than or equal to 60.";
        }

        if ($this->container['zipcode'] === null) {
            $invalid_properties[] = "'zipcode' can't be null";
        }
        if (!preg_match("/^(\\d{8}|\\d{5}\\-\\d{3})$/", $this->container['zipcode'])) {
            $invalid_properties[] = "invalid value for 'zipcode', must be conform to the pattern /^(\\d{8}|\\d{5}\\-\\d{3})$/.";
        }

        if ($this->container['country'] === null) {
            $invalid_properties[] = "'country' can't be null";
        }
        if ((strlen($this->container['country']) > 3)) {
            $invalid_properties[] = "invalid value for 'country', the character length must be smaller than or equal to 3.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['line1'] === null) {
            return false;
        }
        if (strlen($this->container['line1']) > 60) {
            return false;
        }
        if ($this->container['line2'] === null) {
            return false;
        }
        if (strlen($this->container['line2']) > 60) {
            return false;
        }
        if ($this->container['line3'] === null) {
            return false;
        }
        if (strlen($this->container['line3']) > 60) {
            return false;
        }
        if (strlen($this->container['city']) > 60) {
            return false;
        }
        if ($this->container['zipcode'] === null) {
            return false;
        }
        if (!preg_match("/^(\\d{8}|\\d{5}\\-\\d{3})$/", $this->container['zipcode'])) {
            return false;
        }
        if ($this->container['country'] === null) {
            return false;
        }
        if (strlen($this->container['country']) > 3) {
            return false;
        }
        return true;
    }


    /**
     * Gets line1
     * @return string
     */
    public function getLine1()
    {
        return $this->container['line1'];
    }

    /**
     * Sets line1
     * @param string $line1 Address
     * @return $this
     */
    public function setLine1($line1)
    {
        if ((strlen($line1) > 60)) {
            throw new \InvalidArgumentException('invalid length for $line1 when calling SimpleAddress., must be smaller than or equal to 60.');
        }

        $this->container['line1'] = $line1;

        return $this;
    }

    /**
     * Gets line2
     * @return string
     */
    public function getLine2()
    {
        return $this->container['line2'];
    }

    /**
     * Sets line2
     * @param string $line2 Number
     * @return $this
     */
    public function setLine2($line2)
    {
        if ((strlen($line2) > 60)) {
            throw new \InvalidArgumentException('invalid length for $line2 when calling SimpleAddress., must be smaller than or equal to 60.');
        }

        $this->container['line2'] = $line2;

        return $this;
    }

    /**
     * Gets line3
     * @return string
     */
    public function getLine3()
    {
        return $this->container['line3'];
    }

    /**
     * Sets line3
     * @param string $line3 District
     * @return $this
     */
    public function setLine3($line3)
    {
        if ((strlen($line3) > 60)) {
            throw new \InvalidArgumentException('invalid length for $line3 when calling SimpleAddress., must be smaller than or equal to 60.');
        }

        $this->container['line3'] = $line3;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (strlen($city) > 60)) {
            throw new \InvalidArgumentException('invalid length for $city when calling SimpleAddress., must be smaller than or equal to 60.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets zipcode
     * @return string
     */
    public function getZipcode()
    {
        return $this->container['zipcode'];
    }

    /**
     * Sets zipcode
     * @param string $zipcode Brazilian Zip Code
     * @return $this
     */
    public function setZipcode($zipcode)
    {

        if ((!preg_match("/^(\\d{8}|\\d{5}\\-\\d{3})$/", $zipcode))) {
            throw new \InvalidArgumentException("invalid value for $zipcode when calling SimpleAddress., must conform to the pattern /^(\\d{8}|\\d{5}\\-\\d{3})$/.");
        }

        $this->container['zipcode'] = $zipcode;

        return $this;
    }

    /**
     * Gets state
     * @return \Swagger\Client\Model\StateEnum
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param \Swagger\Client\Model\StateEnum $state
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country Use ISO 3166-1 alpha-3 codes
     * @return $this
     */
    public function setCountry($country)
    {
        if ((strlen($country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $country when calling SimpleAddress., must be smaller than or equal to 3.');
        }

        $this->container['country'] = $country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


