<?php
/**
 * LineForGoodsIcmsTaxRelief
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LineForGoodsIcmsTaxRelief Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LineForGoodsIcmsTaxRelief implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LineForGoods_icmsTaxRelief';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'reason_code' => 'string',
        'tax_base_discount' => 'double',
        'tax_amount' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'reason_code' => 'reasonCode',
        'tax_base_discount' => 'taxBaseDiscount',
        'tax_amount' => 'taxAmount'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'reason_code' => 'setReasonCode',
        'tax_base_discount' => 'setTaxBaseDiscount',
        'tax_amount' => 'setTaxAmount'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'reason_code' => 'getReasonCode',
        'tax_base_discount' => 'getTaxBaseDiscount',
        'tax_amount' => 'getTaxAmount'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const REASON_CODE__1 = '1';
    const REASON_CODE__3 = '3';
    const REASON_CODE__4 = '4';
    const REASON_CODE__5 = '5';
    const REASON_CODE__6 = '6';
    const REASON_CODE__7 = '7';
    const REASON_CODE__8 = '8';
    const REASON_CODE__9 = '9';
    const REASON_CODE__10 = '10';
    const REASON_CODE__11 = '11';
    const REASON_CODE__12 = '12';
    const REASON_CODE__16 = '16';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getReasonCodeAllowableValues()
    {
        return [
            self::REASON_CODE__1,
            self::REASON_CODE__3,
            self::REASON_CODE__4,
            self::REASON_CODE__5,
            self::REASON_CODE__6,
            self::REASON_CODE__7,
            self::REASON_CODE__8,
            self::REASON_CODE__9,
            self::REASON_CODE__10,
            self::REASON_CODE__11,
            self::REASON_CODE__12,
            self::REASON_CODE__16,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
        $this->container['tax_base_discount'] = isset($data['tax_base_discount']) ? $data['tax_base_discount'] : null;
        $this->container['tax_amount'] = isset($data['tax_amount']) ? $data['tax_amount'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['reason_code'] === null) {
            $invalid_properties[] = "'reason_code' can't be null";
        }
        $allowed_values = ["1", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "16"];
        if (!in_array($this->container['reason_code'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'reason_code', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['reason_code'] === null) {
            return false;
        }
        $allowed_values = ["1", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "16"];
        if (!in_array($this->container['reason_code'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets reason_code
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     * @param string $reason_code When item transaction subject to desoneration, this is the reason code - '1' # Táxi; - '3' # Produtor Agropecuário; - '4' # Frotista/Locadora; - '5' # Diplomático/Consular; - '6' # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações); - '7' # SUFRAMA; - '8' # Venda a órgão Público; - '9' # Outros - '10' # Deficiente Condutor - '11' # Deficiente não condutor - '12' # Fomento agropecuário - '16' # Olimpíadas Rio 2016
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $allowed_values = array('1', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '16');
        if ((!in_array($reason_code, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'reason_code', must be one of '1', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '16'");
        }
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets tax_base_discount
     * @return double
     */
    public function getTaxBaseDiscount()
    {
        return $this->container['tax_base_discount'];
    }

    /**
     * Sets tax_base_discount
     * @param double $tax_base_discount ICMS Tax base rate discount  (desconto na base do ICMS referetne a desoneração)
     * @return $this
     */
    public function setTaxBaseDiscount($tax_base_discount)
    {
        $this->container['tax_base_discount'] = $tax_base_discount;

        return $this;
    }

    /**
     * Gets tax_amount
     * @return double
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     * @param double $tax_amount Amount for Icms Relief (desoneração)
     * @return $this
     */
    public function setTaxAmount($tax_amount)
    {
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


