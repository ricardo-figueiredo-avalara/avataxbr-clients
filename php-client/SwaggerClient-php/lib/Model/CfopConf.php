<?php
/**
 * CfopConf
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CfopConf Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CfopConf implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CfopConf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'stock_impact' => 'bool',
        'financial_impact' => 'bool',
        'cst_ipi' => 'string',
        'ipi_legal_tax_class' => 'string',
        'accruable_pis_taxation' => 'string',
        'pis_exempt_legal_reason_code' => 'string',
        'pis_exempt_legal_reason' => 'string',
        'accruable_cofins_taxation' => 'string',
        'cofins_exempt_legal_reason_code' => 'string',
        'cofins_exempt_legal_reason' => 'string',
        'allow_ip_icredit_when_in_going' => 'bool',
        'icms_conf' => '\Swagger\Client\Model\IcmsTaxConf[]',
        'name' => 'string',
        'description' => 'string',
        'way_type' => 'string',
        'cod_in_state' => 'int',
        'cod_other_state' => 'int',
        'cod_other_country' => 'int',
        'cst_icms_same_state' => '\Swagger\Client\Model\CstIcmsEnum',
        'cst_icms_other_state' => '\Swagger\Client\Model\CstIcmsEnum',
        'cst_icms_other_country' => '\Swagger\Client\Model\CstIcmsEnum',
        'product_type' => 'string',
        'operation_to_tax_payer_other_state' => 'bool',
        'operation_with_st' => 'bool',
        'operation_to_free_zone' => 'bool',
        'specific_for_product_class' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'stock_impact' => 'stockImpact',
        'financial_impact' => 'financialImpact',
        'cst_ipi' => 'cstIPI',
        'ipi_legal_tax_class' => 'ipiLegalTaxClass',
        'accruable_pis_taxation' => 'accruablePISTaxation',
        'pis_exempt_legal_reason_code' => 'pisExemptLegalReasonCode',
        'pis_exempt_legal_reason' => 'pisExemptLegalReason',
        'accruable_cofins_taxation' => 'accruableCOFINSTaxation',
        'cofins_exempt_legal_reason_code' => 'cofinsExemptLegalReasonCode',
        'cofins_exempt_legal_reason' => 'cofinsExemptLegalReason',
        'allow_ip_icredit_when_in_going' => 'allowIPIcreditWhenInGoing',
        'icms_conf' => 'icmsConf',
        'name' => 'name',
        'description' => 'description',
        'way_type' => 'wayType',
        'cod_in_state' => 'codInState',
        'cod_other_state' => 'codOtherState',
        'cod_other_country' => 'codOtherCountry',
        'cst_icms_same_state' => 'cstICMSSameState',
        'cst_icms_other_state' => 'cstICMSOtherState',
        'cst_icms_other_country' => 'cstICMSOtherCountry',
        'product_type' => 'productType',
        'operation_to_tax_payer_other_state' => 'operationToTaxPayerOtherState',
        'operation_with_st' => 'operationWithST',
        'operation_to_free_zone' => 'operationToFreeZone',
        'specific_for_product_class' => 'specificForProductClass'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'stock_impact' => 'setStockImpact',
        'financial_impact' => 'setFinancialImpact',
        'cst_ipi' => 'setCstIpi',
        'ipi_legal_tax_class' => 'setIpiLegalTaxClass',
        'accruable_pis_taxation' => 'setAccruablePisTaxation',
        'pis_exempt_legal_reason_code' => 'setPisExemptLegalReasonCode',
        'pis_exempt_legal_reason' => 'setPisExemptLegalReason',
        'accruable_cofins_taxation' => 'setAccruableCofinsTaxation',
        'cofins_exempt_legal_reason_code' => 'setCofinsExemptLegalReasonCode',
        'cofins_exempt_legal_reason' => 'setCofinsExemptLegalReason',
        'allow_ip_icredit_when_in_going' => 'setAllowIpIcreditWhenInGoing',
        'icms_conf' => 'setIcmsConf',
        'name' => 'setName',
        'description' => 'setDescription',
        'way_type' => 'setWayType',
        'cod_in_state' => 'setCodInState',
        'cod_other_state' => 'setCodOtherState',
        'cod_other_country' => 'setCodOtherCountry',
        'cst_icms_same_state' => 'setCstIcmsSameState',
        'cst_icms_other_state' => 'setCstIcmsOtherState',
        'cst_icms_other_country' => 'setCstIcmsOtherCountry',
        'product_type' => 'setProductType',
        'operation_to_tax_payer_other_state' => 'setOperationToTaxPayerOtherState',
        'operation_with_st' => 'setOperationWithSt',
        'operation_to_free_zone' => 'setOperationToFreeZone',
        'specific_for_product_class' => 'setSpecificForProductClass'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'stock_impact' => 'getStockImpact',
        'financial_impact' => 'getFinancialImpact',
        'cst_ipi' => 'getCstIpi',
        'ipi_legal_tax_class' => 'getIpiLegalTaxClass',
        'accruable_pis_taxation' => 'getAccruablePisTaxation',
        'pis_exempt_legal_reason_code' => 'getPisExemptLegalReasonCode',
        'pis_exempt_legal_reason' => 'getPisExemptLegalReason',
        'accruable_cofins_taxation' => 'getAccruableCofinsTaxation',
        'cofins_exempt_legal_reason_code' => 'getCofinsExemptLegalReasonCode',
        'cofins_exempt_legal_reason' => 'getCofinsExemptLegalReason',
        'allow_ip_icredit_when_in_going' => 'getAllowIpIcreditWhenInGoing',
        'icms_conf' => 'getIcmsConf',
        'name' => 'getName',
        'description' => 'getDescription',
        'way_type' => 'getWayType',
        'cod_in_state' => 'getCodInState',
        'cod_other_state' => 'getCodOtherState',
        'cod_other_country' => 'getCodOtherCountry',
        'cst_icms_same_state' => 'getCstIcmsSameState',
        'cst_icms_other_state' => 'getCstIcmsOtherState',
        'cst_icms_other_country' => 'getCstIcmsOtherCountry',
        'product_type' => 'getProductType',
        'operation_to_tax_payer_other_state' => 'getOperationToTaxPayerOtherState',
        'operation_with_st' => 'getOperationWithSt',
        'operation_to_free_zone' => 'getOperationToFreeZone',
        'specific_for_product_class' => 'getSpecificForProductClass'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CST_IPI__50 = '50';
    const CST_IPI__51 = '51';
    const CST_IPI__52 = '52';
    const CST_IPI__53 = '53';
    const CST_IPI__54 = '54';
    const ACCRUABLE_PIS_TAXATION_T = 'T';
    const ACCRUABLE_PIS_TAXATION_Z = 'Z';
    const ACCRUABLE_PIS_TAXATION_E = 'E';
    const ACCRUABLE_PIS_TAXATION_H = 'H';
    const ACCRUABLE_PIS_TAXATION_N = 'N';
    const ACCRUABLE_COFINS_TAXATION_T = 'T';
    const ACCRUABLE_COFINS_TAXATION_Z = 'Z';
    const ACCRUABLE_COFINS_TAXATION_E = 'E';
    const ACCRUABLE_COFINS_TAXATION_H = 'H';
    const ACCRUABLE_COFINS_TAXATION_N = 'N';
    const WAY_TYPE_IN = 'in';
    const WAY_TYPE_OUT = 'out';
    const PRODUCT_TYPE_FOR_PRODUCT = 'FOR PRODUCT';
    const PRODUCT_TYPE_FOR_MERCHANDISE = 'FOR MERCHANDISE';
    const PRODUCT_TYPE_NO_RESTRICTION = 'NO RESTRICTION';
    const SPECIFIC_FOR_PRODUCT_CLASS_OTHERS = 'OTHERS';
    const SPECIFIC_FOR_PRODUCT_CLASS_COMMUNICATION = 'COMMUNICATION';
    const SPECIFIC_FOR_PRODUCT_CLASS_ENERGY = 'ENERGY';
    const SPECIFIC_FOR_PRODUCT_CLASS_TRANSPORT = 'TRANSPORT';
    const SPECIFIC_FOR_PRODUCT_CLASS_FUEL_AND_LUBRIFICANT = 'FUEL AND LUBRIFICANT';
    const SPECIFIC_FOR_PRODUCT_CLASS_VEHICLE = 'VEHICLE';
    const SPECIFIC_FOR_PRODUCT_CLASS_ALCOHOLIC_BEVERAGES = 'ALCOHOLIC BEVERAGES';
    const SPECIFIC_FOR_PRODUCT_CLASS_WEAPONS = 'WEAPONS';
    const SPECIFIC_FOR_PRODUCT_CLASS_AMMO = 'AMMO';
    const SPECIFIC_FOR_PRODUCT_CLASS_PERFUM = 'PERFUM';
    const SPECIFIC_FOR_PRODUCT_CLASS_TOBACCO = 'TOBACCO';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCstIpiAllowableValues()
    {
        return [
            self::CST_IPI__50,
            self::CST_IPI__51,
            self::CST_IPI__52,
            self::CST_IPI__53,
            self::CST_IPI__54,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAccruablePisTaxationAllowableValues()
    {
        return [
            self::ACCRUABLE_PIS_TAXATION_T,
            self::ACCRUABLE_PIS_TAXATION_Z,
            self::ACCRUABLE_PIS_TAXATION_E,
            self::ACCRUABLE_PIS_TAXATION_H,
            self::ACCRUABLE_PIS_TAXATION_N,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAccruableCofinsTaxationAllowableValues()
    {
        return [
            self::ACCRUABLE_COFINS_TAXATION_T,
            self::ACCRUABLE_COFINS_TAXATION_Z,
            self::ACCRUABLE_COFINS_TAXATION_E,
            self::ACCRUABLE_COFINS_TAXATION_H,
            self::ACCRUABLE_COFINS_TAXATION_N,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getWayTypeAllowableValues()
    {
        return [
            self::WAY_TYPE_IN,
            self::WAY_TYPE_OUT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getProductTypeAllowableValues()
    {
        return [
            self::PRODUCT_TYPE_FOR_PRODUCT,
            self::PRODUCT_TYPE_FOR_MERCHANDISE,
            self::PRODUCT_TYPE_NO_RESTRICTION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSpecificForProductClassAllowableValues()
    {
        return [
            self::SPECIFIC_FOR_PRODUCT_CLASS_OTHERS,
            self::SPECIFIC_FOR_PRODUCT_CLASS_COMMUNICATION,
            self::SPECIFIC_FOR_PRODUCT_CLASS_ENERGY,
            self::SPECIFIC_FOR_PRODUCT_CLASS_TRANSPORT,
            self::SPECIFIC_FOR_PRODUCT_CLASS_FUEL_AND_LUBRIFICANT,
            self::SPECIFIC_FOR_PRODUCT_CLASS_VEHICLE,
            self::SPECIFIC_FOR_PRODUCT_CLASS_ALCOHOLIC_BEVERAGES,
            self::SPECIFIC_FOR_PRODUCT_CLASS_WEAPONS,
            self::SPECIFIC_FOR_PRODUCT_CLASS_AMMO,
            self::SPECIFIC_FOR_PRODUCT_CLASS_PERFUM,
            self::SPECIFIC_FOR_PRODUCT_CLASS_TOBACCO,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['stock_impact'] = isset($data['stock_impact']) ? $data['stock_impact'] : null;
        $this->container['financial_impact'] = isset($data['financial_impact']) ? $data['financial_impact'] : null;
        $this->container['cst_ipi'] = isset($data['cst_ipi']) ? $data['cst_ipi'] : null;
        $this->container['ipi_legal_tax_class'] = isset($data['ipi_legal_tax_class']) ? $data['ipi_legal_tax_class'] : null;
        $this->container['accruable_pis_taxation'] = isset($data['accruable_pis_taxation']) ? $data['accruable_pis_taxation'] : null;
        $this->container['pis_exempt_legal_reason_code'] = isset($data['pis_exempt_legal_reason_code']) ? $data['pis_exempt_legal_reason_code'] : null;
        $this->container['pis_exempt_legal_reason'] = isset($data['pis_exempt_legal_reason']) ? $data['pis_exempt_legal_reason'] : null;
        $this->container['accruable_cofins_taxation'] = isset($data['accruable_cofins_taxation']) ? $data['accruable_cofins_taxation'] : null;
        $this->container['cofins_exempt_legal_reason_code'] = isset($data['cofins_exempt_legal_reason_code']) ? $data['cofins_exempt_legal_reason_code'] : null;
        $this->container['cofins_exempt_legal_reason'] = isset($data['cofins_exempt_legal_reason']) ? $data['cofins_exempt_legal_reason'] : null;
        $this->container['allow_ip_icredit_when_in_going'] = isset($data['allow_ip_icredit_when_in_going']) ? $data['allow_ip_icredit_when_in_going'] : null;
        $this->container['icms_conf'] = isset($data['icms_conf']) ? $data['icms_conf'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['way_type'] = isset($data['way_type']) ? $data['way_type'] : null;
        $this->container['cod_in_state'] = isset($data['cod_in_state']) ? $data['cod_in_state'] : null;
        $this->container['cod_other_state'] = isset($data['cod_other_state']) ? $data['cod_other_state'] : null;
        $this->container['cod_other_country'] = isset($data['cod_other_country']) ? $data['cod_other_country'] : null;
        $this->container['cst_icms_same_state'] = isset($data['cst_icms_same_state']) ? $data['cst_icms_same_state'] : null;
        $this->container['cst_icms_other_state'] = isset($data['cst_icms_other_state']) ? $data['cst_icms_other_state'] : null;
        $this->container['cst_icms_other_country'] = isset($data['cst_icms_other_country']) ? $data['cst_icms_other_country'] : null;
        $this->container['product_type'] = isset($data['product_type']) ? $data['product_type'] : null;
        $this->container['operation_to_tax_payer_other_state'] = isset($data['operation_to_tax_payer_other_state']) ? $data['operation_to_tax_payer_other_state'] : null;
        $this->container['operation_with_st'] = isset($data['operation_with_st']) ? $data['operation_with_st'] : null;
        $this->container['operation_to_free_zone'] = isset($data['operation_to_free_zone']) ? $data['operation_to_free_zone'] : null;
        $this->container['specific_for_product_class'] = isset($data['specific_for_product_class']) ? $data['specific_for_product_class'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['code'] === null) {
            $invalid_properties[] = "'code' can't be null";
        }
        if ((strlen($this->container['code']) > 40)) {
            $invalid_properties[] = "invalid value for 'code', the character length must be smaller than or equal to 40.";
        }

        $allowed_values = ["50", "51", "52", "53", "54"];
        if (!in_array($this->container['cst_ipi'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'cst_ipi', must be one of #{allowed_values}.";
        }

        $allowed_values = ["T", "Z", "E", "H", "N"];
        if (!in_array($this->container['accruable_pis_taxation'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'accruable_pis_taxation', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['pis_exempt_legal_reason_code']) && (strlen($this->container['pis_exempt_legal_reason_code']) > 3)) {
            $invalid_properties[] = "invalid value for 'pis_exempt_legal_reason_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['pis_exempt_legal_reason']) && (strlen($this->container['pis_exempt_legal_reason']) > 1024)) {
            $invalid_properties[] = "invalid value for 'pis_exempt_legal_reason', the character length must be smaller than or equal to 1024.";
        }

        $allowed_values = ["T", "Z", "E", "H", "N"];
        if (!in_array($this->container['accruable_cofins_taxation'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'accruable_cofins_taxation', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['cofins_exempt_legal_reason_code']) && (strlen($this->container['cofins_exempt_legal_reason_code']) > 3)) {
            $invalid_properties[] = "invalid value for 'cofins_exempt_legal_reason_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['cofins_exempt_legal_reason']) && (strlen($this->container['cofins_exempt_legal_reason']) > 1024)) {
            $invalid_properties[] = "invalid value for 'cofins_exempt_legal_reason', the character length must be smaller than or equal to 1024.";
        }

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 60)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['description']) && (strlen($this->container['description']) > 512)) {
            $invalid_properties[] = "invalid value for 'description', the character length must be smaller than or equal to 512.";
        }

        $allowed_values = ["in", "out"];
        if (!in_array($this->container['way_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'way_type', must be one of #{allowed_values}.";
        }

        $allowed_values = ["FOR PRODUCT", "FOR MERCHANDISE", "NO RESTRICTION"];
        if (!in_array($this->container['product_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'product_type', must be one of #{allowed_values}.";
        }

        $allowed_values = ["OTHERS", "COMMUNICATION", "ENERGY", "TRANSPORT", "FUEL AND LUBRIFICANT", "VEHICLE", "ALCOHOLIC BEVERAGES", "WEAPONS", "AMMO", "PERFUM", "TOBACCO"];
        if (!in_array($this->container['specific_for_product_class'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'specific_for_product_class', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['code'] === null) {
            return false;
        }
        if (strlen($this->container['code']) > 40) {
            return false;
        }
        $allowed_values = ["50", "51", "52", "53", "54"];
        if (!in_array($this->container['cst_ipi'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["T", "Z", "E", "H", "N"];
        if (!in_array($this->container['accruable_pis_taxation'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['pis_exempt_legal_reason_code']) > 3) {
            return false;
        }
        if (strlen($this->container['pis_exempt_legal_reason']) > 1024) {
            return false;
        }
        $allowed_values = ["T", "Z", "E", "H", "N"];
        if (!in_array($this->container['accruable_cofins_taxation'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['cofins_exempt_legal_reason_code']) > 3) {
            return false;
        }
        if (strlen($this->container['cofins_exempt_legal_reason']) > 1024) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 60) {
            return false;
        }
        if (strlen($this->container['description']) > 512) {
            return false;
        }
        $allowed_values = ["in", "out"];
        if (!in_array($this->container['way_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["FOR PRODUCT", "FOR MERCHANDISE", "NO RESTRICTION"];
        if (!in_array($this->container['product_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["OTHERS", "COMMUNICATION", "ENERGY", "TRANSPORT", "FUEL AND LUBRIFICANT", "VEHICLE", "ALCOHOLIC BEVERAGES", "WEAPONS", "AMMO", "PERFUM", "TOBACCO"];
        if (!in_array($this->container['specific_for_product_class'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code main unique identificator
     * @return $this
     */
    public function setCode($code)
    {
        if ((strlen($code) > 40)) {
            throw new \InvalidArgumentException('invalid length for $code when calling CfopConf., must be smaller than or equal to 40.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets stock_impact
     * @return bool
     */
    public function getStockImpact()
    {
        return $this->container['stock_impact'];
    }

    /**
     * Sets stock_impact
     * @param bool $stock_impact Inform that the process has inventory impact.
     * @return $this
     */
    public function setStockImpact($stock_impact)
    {
        $this->container['stock_impact'] = $stock_impact;

        return $this;
    }

    /**
     * Gets financial_impact
     * @return bool
     */
    public function getFinancialImpact()
    {
        return $this->container['financial_impact'];
    }

    /**
     * Sets financial_impact
     * @param bool $financial_impact Inform that the process has financial impact.
     * @return $this
     */
    public function setFinancialImpact($financial_impact)
    {
        $this->container['financial_impact'] = $financial_impact;

        return $this;
    }

    /**
     * Gets cst_ipi
     * @return string
     */
    public function getCstIpi()
    {
        return $this->container['cst_ipi'];
    }

    /**
     * Sets cst_ipi
     * @param string $cst_ipi Inform if this process is subject to IPI taxation on output process - '50' # Saída Tributada - '51' # Saída Tributável com Alíquota Zero - '52' # Saída Isenta - '53' # Saída Não-Tributada - '54' # Saída Imune
     * @return $this
     */
    public function setCstIpi($cst_ipi)
    {
        $allowed_values = array('50', '51', '52', '53', '54');
        if (!is_null($cst_ipi) && (!in_array($cst_ipi, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'cst_ipi', must be one of '50', '51', '52', '53', '54'");
        }
        $this->container['cst_ipi'] = $cst_ipi;

        return $this;
    }

    /**
     * Gets ipi_legal_tax_class
     * @return string
     */
    public function getIpiLegalTaxClass()
    {
        return $this->container['ipi_legal_tax_class'];
    }

    /**
     * Sets ipi_legal_tax_class
     * @param string $ipi_legal_tax_class Legal tax classificação for IPI (enquadramento) When the processo has CST IPI 52 or 54, is mandatory inform Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo=mCnJajU4BKU=
     * @return $this
     */
    public function setIpiLegalTaxClass($ipi_legal_tax_class)
    {
        $this->container['ipi_legal_tax_class'] = $ipi_legal_tax_class;

        return $this;
    }

    /**
     * Gets accruable_pis_taxation
     * @return string
     */
    public function getAccruablePisTaxation()
    {
        return $this->container['accruable_pis_taxation'];
    }

    /**
     * Sets accruable_pis_taxation
     * @param string $accruable_pis_taxation Inform if this item by nature is subject to PIS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE
     * @return $this
     */
    public function setAccruablePisTaxation($accruable_pis_taxation)
    {
        $allowed_values = array('T', 'Z', 'E', 'H', 'N');
        if (!is_null($accruable_pis_taxation) && (!in_array($accruable_pis_taxation, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'accruable_pis_taxation', must be one of 'T', 'Z', 'E', 'H', 'N'");
        }
        $this->container['accruable_pis_taxation'] = $accruable_pis_taxation;

        return $this;
    }

    /**
     * Gets pis_exempt_legal_reason_code
     * @return string
     */
    public function getPisExemptLegalReasonCode()
    {
        return $this->container['pis_exempt_legal_reason_code'];
    }

    /**
     * Sets pis_exempt_legal_reason_code
     * @param string $pis_exempt_legal_reason_code When exempt, taxable with zero, suspended, not taxable, this field holds the official code number
     * @return $this
     */
    public function setPisExemptLegalReasonCode($pis_exempt_legal_reason_code)
    {
        if (!is_null($pis_exempt_legal_reason_code) && (strlen($pis_exempt_legal_reason_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $pis_exempt_legal_reason_code when calling CfopConf., must be smaller than or equal to 3.');
        }

        $this->container['pis_exempt_legal_reason_code'] = $pis_exempt_legal_reason_code;

        return $this;
    }

    /**
     * Gets pis_exempt_legal_reason
     * @return string
     */
    public function getPisExemptLegalReason()
    {
        return $this->container['pis_exempt_legal_reason'];
    }

    /**
     * Sets pis_exempt_legal_reason
     * @param string $pis_exempt_legal_reason When specifi reason, this field has the description
     * @return $this
     */
    public function setPisExemptLegalReason($pis_exempt_legal_reason)
    {
        if (!is_null($pis_exempt_legal_reason) && (strlen($pis_exempt_legal_reason) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $pis_exempt_legal_reason when calling CfopConf., must be smaller than or equal to 1024.');
        }

        $this->container['pis_exempt_legal_reason'] = $pis_exempt_legal_reason;

        return $this;
    }

    /**
     * Gets accruable_cofins_taxation
     * @return string
     */
    public function getAccruableCofinsTaxation()
    {
        return $this->container['accruable_cofins_taxation'];
    }

    /**
     * Sets accruable_cofins_taxation
     * @param string $accruable_cofins_taxation Inform if this item by nature is subject to COFINS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE
     * @return $this
     */
    public function setAccruableCofinsTaxation($accruable_cofins_taxation)
    {
        $allowed_values = array('T', 'Z', 'E', 'H', 'N');
        if (!is_null($accruable_cofins_taxation) && (!in_array($accruable_cofins_taxation, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'accruable_cofins_taxation', must be one of 'T', 'Z', 'E', 'H', 'N'");
        }
        $this->container['accruable_cofins_taxation'] = $accruable_cofins_taxation;

        return $this;
    }

    /**
     * Gets cofins_exempt_legal_reason_code
     * @return string
     */
    public function getCofinsExemptLegalReasonCode()
    {
        return $this->container['cofins_exempt_legal_reason_code'];
    }

    /**
     * Sets cofins_exempt_legal_reason_code
     * @param string $cofins_exempt_legal_reason_code When exempt, taxable with zero, suspended, not taxable, this field holds the official code number
     * @return $this
     */
    public function setCofinsExemptLegalReasonCode($cofins_exempt_legal_reason_code)
    {
        if (!is_null($cofins_exempt_legal_reason_code) && (strlen($cofins_exempt_legal_reason_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $cofins_exempt_legal_reason_code when calling CfopConf., must be smaller than or equal to 3.');
        }

        $this->container['cofins_exempt_legal_reason_code'] = $cofins_exempt_legal_reason_code;

        return $this;
    }

    /**
     * Gets cofins_exempt_legal_reason
     * @return string
     */
    public function getCofinsExemptLegalReason()
    {
        return $this->container['cofins_exempt_legal_reason'];
    }

    /**
     * Sets cofins_exempt_legal_reason
     * @param string $cofins_exempt_legal_reason When specifi reason, this field has the description
     * @return $this
     */
    public function setCofinsExemptLegalReason($cofins_exempt_legal_reason)
    {
        if (!is_null($cofins_exempt_legal_reason) && (strlen($cofins_exempt_legal_reason) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $cofins_exempt_legal_reason when calling CfopConf., must be smaller than or equal to 1024.');
        }

        $this->container['cofins_exempt_legal_reason'] = $cofins_exempt_legal_reason;

        return $this;
    }

    /**
     * Gets allow_ip_icredit_when_in_going
     * @return bool
     */
    public function getAllowIpIcreditWhenInGoing()
    {
        return $this->container['allow_ip_icredit_when_in_going'];
    }

    /**
     * Sets allow_ip_icredit_when_in_going
     * @param bool $allow_ip_icredit_when_in_going Inform that the process allow IPI credit to Input process
     * @return $this
     */
    public function setAllowIpIcreditWhenInGoing($allow_ip_icredit_when_in_going)
    {
        $this->container['allow_ip_icredit_when_in_going'] = $allow_ip_icredit_when_in_going;

        return $this;
    }

    /**
     * Gets icms_conf
     * @return \Swagger\Client\Model\IcmsTaxConf[]
     */
    public function getIcmsConf()
    {
        return $this->container['icms_conf'];
    }

    /**
     * Sets icms_conf
     * @param \Swagger\Client\Model\IcmsTaxConf[] $icms_conf the map key is state code
     * @return $this
     */
    public function setIcmsConf($icms_conf)
    {
        $this->container['icms_conf'] = $icms_conf;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CfopConf., must be smaller than or equal to 60.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (strlen($description) > 512)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CfopConf., must be smaller than or equal to 512.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets way_type
     * @return string
     */
    public function getWayType()
    {
        return $this->container['way_type'];
    }

    /**
     * Sets way_type
     * @param string $way_type inform if the transaction is an operation to internalizing item or value
     * @return $this
     */
    public function setWayType($way_type)
    {
        $allowed_values = array('in', 'out');
        if (!is_null($way_type) && (!in_array($way_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'way_type', must be one of 'in', 'out'");
        }
        $this->container['way_type'] = $way_type;

        return $this;
    }

    /**
     * Gets cod_in_state
     * @return int
     */
    public function getCodInState()
    {
        return $this->container['cod_in_state'];
    }

    /**
     * Sets cod_in_state
     * @param int $cod_in_state CFOP code (tax code operation) when the transactions are within the same state.
     * @return $this
     */
    public function setCodInState($cod_in_state)
    {
        $this->container['cod_in_state'] = $cod_in_state;

        return $this;
    }

    /**
     * Gets cod_other_state
     * @return int
     */
    public function getCodOtherState()
    {
        return $this->container['cod_other_state'];
    }

    /**
     * Sets cod_other_state
     * @param int $cod_other_state CFOP code (tax code operation) when the transactions are to another state.
     * @return $this
     */
    public function setCodOtherState($cod_other_state)
    {
        $this->container['cod_other_state'] = $cod_other_state;

        return $this;
    }

    /**
     * Gets cod_other_country
     * @return int
     */
    public function getCodOtherCountry()
    {
        return $this->container['cod_other_country'];
    }

    /**
     * Sets cod_other_country
     * @param int $cod_other_country CFOP code (tax code operation) when the transactions are to another country.
     * @return $this
     */
    public function setCodOtherCountry($cod_other_country)
    {
        $this->container['cod_other_country'] = $cod_other_country;

        return $this;
    }

    /**
     * Gets cst_icms_same_state
     * @return \Swagger\Client\Model\CstIcmsEnum
     */
    public function getCstIcmsSameState()
    {
        return $this->container['cst_icms_same_state'];
    }

    /**
     * Sets cst_icms_same_state
     * @param \Swagger\Client\Model\CstIcmsEnum $cst_icms_same_state
     * @return $this
     */
    public function setCstIcmsSameState($cst_icms_same_state)
    {
        $this->container['cst_icms_same_state'] = $cst_icms_same_state;

        return $this;
    }

    /**
     * Gets cst_icms_other_state
     * @return \Swagger\Client\Model\CstIcmsEnum
     */
    public function getCstIcmsOtherState()
    {
        return $this->container['cst_icms_other_state'];
    }

    /**
     * Sets cst_icms_other_state
     * @param \Swagger\Client\Model\CstIcmsEnum $cst_icms_other_state
     * @return $this
     */
    public function setCstIcmsOtherState($cst_icms_other_state)
    {
        $this->container['cst_icms_other_state'] = $cst_icms_other_state;

        return $this;
    }

    /**
     * Gets cst_icms_other_country
     * @return \Swagger\Client\Model\CstIcmsEnum
     */
    public function getCstIcmsOtherCountry()
    {
        return $this->container['cst_icms_other_country'];
    }

    /**
     * Sets cst_icms_other_country
     * @param \Swagger\Client\Model\CstIcmsEnum $cst_icms_other_country
     * @return $this
     */
    public function setCstIcmsOtherCountry($cst_icms_other_country)
    {
        $this->container['cst_icms_other_country'] = $cst_icms_other_country;

        return $this;
    }

    /**
     * Gets product_type
     * @return string
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     * @param string $product_type this field is used to define right CFOP, one operation type can be specialized to item product, item merchandise or generic
     * @return $this
     */
    public function setProductType($product_type)
    {
        $allowed_values = array('FOR PRODUCT', 'FOR MERCHANDISE', 'NO RESTRICTION');
        if (!is_null($product_type) && (!in_array($product_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'product_type', must be one of 'FOR PRODUCT', 'FOR MERCHANDISE', 'NO RESTRICTION'");
        }
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets operation_to_tax_payer_other_state
     * @return bool
     */
    public function getOperationToTaxPayerOtherState()
    {
        return $this->container['operation_to_tax_payer_other_state'];
    }

    /**
     * Sets operation_to_tax_payer_other_state
     * @param bool $operation_to_tax_payer_other_state field used to indicate an operation to ICMS tax payer
     * @return $this
     */
    public function setOperationToTaxPayerOtherState($operation_to_tax_payer_other_state)
    {
        $this->container['operation_to_tax_payer_other_state'] = $operation_to_tax_payer_other_state;

        return $this;
    }

    /**
     * Gets operation_with_st
     * @return bool
     */
    public function getOperationWithSt()
    {
        return $this->container['operation_with_st'];
    }

    /**
     * Sets operation_with_st
     * @param bool $operation_with_st field used to indicate an operation to items sibject to ICMS-ST
     * @return $this
     */
    public function setOperationWithSt($operation_with_st)
    {
        $this->container['operation_with_st'] = $operation_with_st;

        return $this;
    }

    /**
     * Gets operation_to_free_zone
     * @return bool
     */
    public function getOperationToFreeZone()
    {
        return $this->container['operation_to_free_zone'];
    }

    /**
     * Sets operation_to_free_zone
     * @param bool $operation_to_free_zone field used to indicate an operation to free zone
     * @return $this
     */
    public function setOperationToFreeZone($operation_to_free_zone)
    {
        $this->container['operation_to_free_zone'] = $operation_to_free_zone;

        return $this;
    }

    /**
     * Gets specific_for_product_class
     * @return string
     */
    public function getSpecificForProductClass()
    {
        return $this->container['specific_for_product_class'];
    }

    /**
     * Sets specific_for_product_class
     * @param string $specific_for_product_class field used to indicate an operation to some product class specifically
     * @return $this
     */
    public function setSpecificForProductClass($specific_for_product_class)
    {
        $allowed_values = array('OTHERS', 'COMMUNICATION', 'ENERGY', 'TRANSPORT', 'FUEL AND LUBRIFICANT', 'VEHICLE', 'ALCOHOLIC BEVERAGES', 'WEAPONS', 'AMMO', 'PERFUM', 'TOBACCO');
        if (!is_null($specific_for_product_class) && (!in_array($specific_for_product_class, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'specific_for_product_class', must be one of 'OTHERS', 'COMMUNICATION', 'ENERGY', 'TRANSPORT', 'FUEL AND LUBRIFICANT', 'VEHICLE', 'ALCOHOLIC BEVERAGES', 'WEAPONS', 'AMMO', 'PERFUM', 'TOBACCO'");
        }
        $this->container['specific_for_product_class'] = $specific_for_product_class;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


