<?php
/**
 * SalesLinesIn
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SalesLinesIn Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SalesLinesIn implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SalesLinesIn';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_code' => 'int',
        'item_code' => 'string',
        'number_of_items' => 'double',
        'line_amount' => 'double',
        'item_description' => 'string',
        'line_taxed_discount' => 'double',
        'line_untaxed_discount' => 'double',
        'tax_deductions' => '\Swagger\Client\Model\SalesLinesInTaxDeductions'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'line_code' => 'lineCode',
        'item_code' => 'itemCode',
        'number_of_items' => 'numberOfItems',
        'line_amount' => 'lineAmount',
        'item_description' => 'itemDescription',
        'line_taxed_discount' => 'lineTaxedDiscount',
        'line_untaxed_discount' => 'lineUntaxedDiscount',
        'tax_deductions' => 'taxDeductions'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'line_code' => 'setLineCode',
        'item_code' => 'setItemCode',
        'number_of_items' => 'setNumberOfItems',
        'line_amount' => 'setLineAmount',
        'item_description' => 'setItemDescription',
        'line_taxed_discount' => 'setLineTaxedDiscount',
        'line_untaxed_discount' => 'setLineUntaxedDiscount',
        'tax_deductions' => 'setTaxDeductions'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'line_code' => 'getLineCode',
        'item_code' => 'getItemCode',
        'number_of_items' => 'getNumberOfItems',
        'line_amount' => 'getLineAmount',
        'item_description' => 'getItemDescription',
        'line_taxed_discount' => 'getLineTaxedDiscount',
        'line_untaxed_discount' => 'getLineUntaxedDiscount',
        'tax_deductions' => 'getTaxDeductions'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_code'] = isset($data['line_code']) ? $data['line_code'] : null;
        $this->container['item_code'] = isset($data['item_code']) ? $data['item_code'] : null;
        $this->container['number_of_items'] = isset($data['number_of_items']) ? $data['number_of_items'] : 1.0;
        $this->container['line_amount'] = isset($data['line_amount']) ? $data['line_amount'] : null;
        $this->container['item_description'] = isset($data['item_description']) ? $data['item_description'] : null;
        $this->container['line_taxed_discount'] = isset($data['line_taxed_discount']) ? $data['line_taxed_discount'] : null;
        $this->container['line_untaxed_discount'] = isset($data['line_untaxed_discount']) ? $data['line_untaxed_discount'] : null;
        $this->container['tax_deductions'] = isset($data['tax_deductions']) ? $data['tax_deductions'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['item_code'] === null) {
            $invalid_properties[] = "'item_code' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['item_code'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets line_code
     * @return int
     */
    public function getLineCode()
    {
        return $this->container['line_code'];
    }

    /**
     * Sets line_code
     * @param int $line_code This string is a unique identifier for this line in the transaction
     * @return $this
     */
    public function setLineCode($line_code)
    {
        $this->container['line_code'] = $line_code;

        return $this;
    }

    /**
     * Gets item_code
     * @return string
     */
    public function getItemCode()
    {
        return $this->container['item_code'];
    }

    /**
     * Sets item_code
     * @param string $item_code This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states.
     * @return $this
     */
    public function setItemCode($item_code)
    {
        $this->container['item_code'] = $item_code;

        return $this;
    }

    /**
     * Gets number_of_items
     * @return double
     */
    public function getNumberOfItems()
    {
        return $this->container['number_of_items'];
    }

    /**
     * Sets number_of_items
     * @param double $number_of_items This decimal captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1
     * @return $this
     */
    public function setNumberOfItems($number_of_items)
    {
        $this->container['number_of_items'] = $number_of_items;

        return $this;
    }

    /**
     * Gets line_amount
     * @return double
     */
    public function getLineAmount()
    {
        return $this->container['line_amount'];
    }

    /**
     * Sets line_amount
     * @param double $line_amount This decimal captures the total cost of this line. In its simplest form lineAmount = (item price * numberOfItems).
     * @return $this
     */
    public function setLineAmount($line_amount)
    {
        $this->container['line_amount'] = $line_amount;

        return $this;
    }

    /**
     * Gets item_description
     * @return string
     */
    public function getItemDescription()
    {
        return $this->container['item_description'];
    }

    /**
     * Sets item_description
     * @param string $item_description This string captures the description of the item represented by this line, will be used LC 116
     * @return $this
     */
    public function setItemDescription($item_description)
    {
        $this->container['item_description'] = $item_description;

        return $this;
    }

    /**
     * Gets line_taxed_discount
     * @return double
     */
    public function getLineTaxedDiscount()
    {
        return $this->container['line_taxed_discount'];
    }

    /**
     * Sets line_taxed_discount
     * @param double $line_taxed_discount Conditional discount
     * @return $this
     */
    public function setLineTaxedDiscount($line_taxed_discount)
    {
        $this->container['line_taxed_discount'] = $line_taxed_discount;

        return $this;
    }

    /**
     * Gets line_untaxed_discount
     * @return double
     */
    public function getLineUntaxedDiscount()
    {
        return $this->container['line_untaxed_discount'];
    }

    /**
     * Sets line_untaxed_discount
     * @param double $line_untaxed_discount Unconditional discount
     * @return $this
     */
    public function setLineUntaxedDiscount($line_untaxed_discount)
    {
        $this->container['line_untaxed_discount'] = $line_untaxed_discount;

        return $this;
    }

    /**
     * Gets tax_deductions
     * @return \Swagger\Client\Model\SalesLinesInTaxDeductions
     */
    public function getTaxDeductions()
    {
        return $this->container['tax_deductions'];
    }

    /**
     * Sets tax_deductions
     * @param \Swagger\Client\Model\SalesLinesInTaxDeductions $tax_deductions
     * @return $this
     */
    public function setTaxDeductions($tax_deductions)
    {
        $this->container['tax_deductions'] = $tax_deductions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


