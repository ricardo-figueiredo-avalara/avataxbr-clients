<?php
/**
 * Address
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Address Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Address implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'street' => 'string',
        'neighborhood' => 'string',
        'zipcode' => 'string',
        'city_code' => 'string',
        'city_name' => 'string',
        'state' => '\Swagger\Client\Model\StateEnum',
        'country_code' => 'string',
        'country' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'street' => 'street',
        'neighborhood' => 'neighborhood',
        'zipcode' => 'zipcode',
        'city_code' => 'cityCode',
        'city_name' => 'cityName',
        'state' => 'state',
        'country_code' => 'countryCode',
        'country' => 'country'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'street' => 'setStreet',
        'neighborhood' => 'setNeighborhood',
        'zipcode' => 'setZipcode',
        'city_code' => 'setCityCode',
        'city_name' => 'setCityName',
        'state' => 'setState',
        'country_code' => 'setCountryCode',
        'country' => 'setCountry'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'street' => 'getStreet',
        'neighborhood' => 'getNeighborhood',
        'zipcode' => 'getZipcode',
        'city_code' => 'getCityCode',
        'city_name' => 'getCityName',
        'state' => 'getState',
        'country_code' => 'getCountryCode',
        'country' => 'getCountry'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['neighborhood'] = isset($data['neighborhood']) ? $data['neighborhood'] : null;
        $this->container['zipcode'] = isset($data['zipcode']) ? $data['zipcode'] : null;
        $this->container['city_code'] = isset($data['city_code']) ? $data['city_code'] : null;
        $this->container['city_name'] = isset($data['city_name']) ? $data['city_name'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : '0';
        $this->container['country'] = isset($data['country']) ? $data['country'] : 'BRA';
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['street']) && (strlen($this->container['street']) > 60)) {
            $invalid_properties[] = "invalid value for 'street', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['neighborhood']) && (strlen($this->container['neighborhood']) > 60)) {
            $invalid_properties[] = "invalid value for 'neighborhood', the character length must be smaller than or equal to 60.";
        }

        if ($this->container['zipcode'] === null) {
            $invalid_properties[] = "'zipcode' can't be null";
        }
        if (!preg_match("/^(\\d{8}|\\d{5}\\-\\d{3})$/", $this->container['zipcode'])) {
            $invalid_properties[] = "invalid value for 'zipcode', must be conform to the pattern /^(\\d{8}|\\d{5}\\-\\d{3})$/.";
        }

        if (!is_null($this->container['city_code']) && !preg_match("/^(\\d{7})$/", $this->container['city_code'])) {
            $invalid_properties[] = "invalid value for 'city_code', must be conform to the pattern /^(\\d{7})$/.";
        }

        if (!is_null($this->container['city_name']) && (strlen($this->container['city_name']) > 60)) {
            $invalid_properties[] = "invalid value for 'city_name', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['country_code']) && !preg_match("/[0-9]{1,4}/", $this->container['country_code'])) {
            $invalid_properties[] = "invalid value for 'country_code', must be conform to the pattern /[0-9]{1,4}/.";
        }

        if (!is_null($this->container['country']) && (strlen($this->container['country']) > 3)) {
            $invalid_properties[] = "invalid value for 'country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['country']) && !preg_match("/^([A-Z]{3})$/", $this->container['country'])) {
            $invalid_properties[] = "invalid value for 'country', must be conform to the pattern /^([A-Z]{3})$/.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['street']) > 60) {
            return false;
        }
        if (strlen($this->container['neighborhood']) > 60) {
            return false;
        }
        if ($this->container['zipcode'] === null) {
            return false;
        }
        if (!preg_match("/^(\\d{8}|\\d{5}\\-\\d{3})$/", $this->container['zipcode'])) {
            return false;
        }
        if (!preg_match("/^(\\d{7})$/", $this->container['city_code'])) {
            return false;
        }
        if (strlen($this->container['city_name']) > 60) {
            return false;
        }
        if (!preg_match("/[0-9]{1,4}/", $this->container['country_code'])) {
            return false;
        }
        if (strlen($this->container['country']) > 3) {
            return false;
        }
        if (!preg_match("/^([A-Z]{3})$/", $this->container['country'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets street
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     * @param string $street Street Name
     * @return $this
     */
    public function setStreet($street)
    {
        if (!is_null($street) && (strlen($street) > 60)) {
            throw new \InvalidArgumentException('invalid length for $street when calling Address., must be smaller than or equal to 60.');
        }

        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets neighborhood
     * @return string
     */
    public function getNeighborhood()
    {
        return $this->container['neighborhood'];
    }

    /**
     * Sets neighborhood
     * @param string $neighborhood Neighborhood Name
     * @return $this
     */
    public function setNeighborhood($neighborhood)
    {
        if (!is_null($neighborhood) && (strlen($neighborhood) > 60)) {
            throw new \InvalidArgumentException('invalid length for $neighborhood when calling Address., must be smaller than or equal to 60.');
        }

        $this->container['neighborhood'] = $neighborhood;

        return $this;
    }

    /**
     * Gets zipcode
     * @return string
     */
    public function getZipcode()
    {
        return $this->container['zipcode'];
    }

    /**
     * Sets zipcode
     * @param string $zipcode Brazilian Zip Code
     * @return $this
     */
    public function setZipcode($zipcode)
    {

        if ((!preg_match("/^(\\d{8}|\\d{5}\\-\\d{3})$/", $zipcode))) {
            throw new \InvalidArgumentException("invalid value for $zipcode when calling Address., must conform to the pattern /^(\\d{8}|\\d{5}\\-\\d{3})$/.");
        }

        $this->container['zipcode'] = $zipcode;

        return $this;
    }

    /**
     * Gets city_code
     * @return string
     */
    public function getCityCode()
    {
        return $this->container['city_code'];
    }

    /**
     * Sets city_code
     * @param string $city_code City Code (IBGE)
     * @return $this
     */
    public function setCityCode($city_code)
    {

        if (!is_null($city_code) && (!preg_match("/^(\\d{7})$/", $city_code))) {
            throw new \InvalidArgumentException("invalid value for $city_code when calling Address., must conform to the pattern /^(\\d{7})$/.");
        }

        $this->container['city_code'] = $city_code;

        return $this;
    }

    /**
     * Gets city_name
     * @return string
     */
    public function getCityName()
    {
        return $this->container['city_name'];
    }

    /**
     * Sets city_name
     * @param string $city_name City Name
     * @return $this
     */
    public function setCityName($city_name)
    {
        if (!is_null($city_name) && (strlen($city_name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $city_name when calling Address., must be smaller than or equal to 60.');
        }

        $this->container['city_name'] = $city_name;

        return $this;
    }

    /**
     * Gets state
     * @return \Swagger\Client\Model\StateEnum
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param \Swagger\Client\Model\StateEnum $state
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets country_code
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     * @param string $country_code Country Code
     * @return $this
     */
    public function setCountryCode($country_code)
    {

        if (!is_null($country_code) && (!preg_match("/[0-9]{1,4}/", $country_code))) {
            throw new \InvalidArgumentException("invalid value for $country_code when calling Address., must conform to the pattern /[0-9]{1,4}/.");
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country Use ISO 3166-1 alpha-3 codes
     * @return $this
     */
    public function setCountry($country)
    {
        if (!is_null($country) && (strlen($country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $country when calling Address., must be smaller than or equal to 3.');
        }
        if (!is_null($country) && (!preg_match("/^([A-Z]{3})$/", $country))) {
            throw new \InvalidArgumentException("invalid value for $country when calling Address., must conform to the pattern /^([A-Z]{3})$/.");
        }

        $this->container['country'] = $country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


