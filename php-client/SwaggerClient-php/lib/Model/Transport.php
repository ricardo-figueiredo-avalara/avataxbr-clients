<?php
/**
 * Transport
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Transport Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Transport implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Transport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mod_freight' => 'string',
        'withhold_icms_transport' => 'bool',
        'volumes' => '\Swagger\Client\Model\TransportVolumes[]',
        'vehicle' => '\Swagger\Client\Model\VehicleTransp'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'mod_freight' => 'modFreight',
        'withhold_icms_transport' => 'withholdICMSTransport',
        'volumes' => 'volumes',
        'vehicle' => 'vehicle'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'mod_freight' => 'setModFreight',
        'withhold_icms_transport' => 'setWithholdIcmsTransport',
        'volumes' => 'setVolumes',
        'vehicle' => 'setVehicle'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'mod_freight' => 'getModFreight',
        'withhold_icms_transport' => 'getWithholdIcmsTransport',
        'volumes' => 'getVolumes',
        'vehicle' => 'getVehicle'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const MOD_FREIGHT_CIF = 'CIF';
    const MOD_FREIGHT_FOB = 'FOB';
    const MOD_FREIGHT_THRIDPARTY = 'Thridparty';
    const MOD_FREIGHT_FREE_SHIPPING = 'FreeShipping';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getModFreightAllowableValues()
    {
        return [
            self::MOD_FREIGHT_CIF,
            self::MOD_FREIGHT_FOB,
            self::MOD_FREIGHT_THRIDPARTY,
            self::MOD_FREIGHT_FREE_SHIPPING,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mod_freight'] = isset($data['mod_freight']) ? $data['mod_freight'] : null;
        $this->container['withhold_icms_transport'] = isset($data['withhold_icms_transport']) ? $data['withhold_icms_transport'] : null;
        $this->container['volumes'] = isset($data['volumes']) ? $data['volumes'] : null;
        $this->container['vehicle'] = isset($data['vehicle']) ? $data['vehicle'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['mod_freight'] === null) {
            $invalid_properties[] = "'mod_freight' can't be null";
        }
        $allowed_values = ["CIF", "FOB", "Thridparty", "FreeShipping"];
        if (!in_array($this->container['mod_freight'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'mod_freight', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['mod_freight'] === null) {
            return false;
        }
        $allowed_values = ["CIF", "FOB", "Thridparty", "FreeShipping"];
        if (!in_array($this->container['mod_freight'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets mod_freight
     * @return string
     */
    public function getModFreight()
    {
        return $this->container['mod_freight'];
    }

    /**
     * Sets mod_freight
     * @param string $mod_freight Freight model  - 0 - CIF,  - 1 - FOB,  - 2 - Thrid party, - 9 - Free shipping when 9 - Free shipping, the fields below will be ignored if present - 'transporter' - 'withholdICMSTransport' - 'volumes' - 'vehicle'
     * @return $this
     */
    public function setModFreight($mod_freight)
    {
        $allowed_values = array('CIF', 'FOB', 'Thridparty', 'FreeShipping');
        if ((!in_array($mod_freight, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'mod_freight', must be one of 'CIF', 'FOB', 'Thridparty', 'FreeShipping'");
        }
        $this->container['mod_freight'] = $mod_freight;

        return $this;
    }

    /**
     * Gets withhold_icms_transport
     * @return bool
     */
    public function getWithholdIcmsTransport()
    {
        return $this->container['withhold_icms_transport'];
    }

    /**
     * Sets withhold_icms_transport
     * @param bool $withhold_icms_transport Forces witholding of ICMS on transport amount (freight)
     * @return $this
     */
    public function setWithholdIcmsTransport($withhold_icms_transport)
    {
        $this->container['withhold_icms_transport'] = $withhold_icms_transport;

        return $this;
    }

    /**
     * Gets volumes
     * @return \Swagger\Client\Model\TransportVolumes[]
     */
    public function getVolumes()
    {
        return $this->container['volumes'];
    }

    /**
     * Sets volumes
     * @param \Swagger\Client\Model\TransportVolumes[] $volumes Packages
     * @return $this
     */
    public function setVolumes($volumes)
    {
        $this->container['volumes'] = $volumes;

        return $this;
    }

    /**
     * Gets vehicle
     * @return \Swagger\Client\Model\VehicleTransp
     */
    public function getVehicle()
    {
        return $this->container['vehicle'];
    }

    /**
     * Sets vehicle
     * @param \Swagger\Client\Model\VehicleTransp $vehicle
     * @return $this
     */
    public function setVehicle($vehicle)
    {
        $this->container['vehicle'] = $vehicle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


