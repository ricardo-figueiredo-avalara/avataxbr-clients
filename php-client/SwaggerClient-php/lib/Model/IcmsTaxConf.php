<?php
/**
 * IcmsTaxConf
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * IcmsTaxConf Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class IcmsTaxConf implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'IcmsTaxConf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'state' => '\Swagger\Client\Model\StateEnum',
        'icms_cst' => 'string',
        'message_code' => 'string',
        'relation_ship' => '\Swagger\Client\Model\IcmsTaxConfBase[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'state' => 'state',
        'icms_cst' => 'icmsCST',
        'message_code' => 'messageCode',
        'relation_ship' => 'relationShip'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'state' => 'setState',
        'icms_cst' => 'setIcmsCst',
        'message_code' => 'setMessageCode',
        'relation_ship' => 'setRelationShip'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'state' => 'getState',
        'icms_cst' => 'getIcmsCst',
        'message_code' => 'getMessageCode',
        'relation_ship' => 'getRelationShip'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const ICMS_CST__00 = '00';
    const ICMS_CST__20 = '20';
    const ICMS_CST__40 = '40';
    const ICMS_CST__41 = '41';
    const ICMS_CST__50 = '50';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getIcmsCstAllowableValues()
    {
        return [
            self::ICMS_CST__00,
            self::ICMS_CST__20,
            self::ICMS_CST__40,
            self::ICMS_CST__41,
            self::ICMS_CST__50,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['icms_cst'] = isset($data['icms_cst']) ? $data['icms_cst'] : null;
        $this->container['message_code'] = isset($data['message_code']) ? $data['message_code'] : null;
        $this->container['relation_ship'] = isset($data['relation_ship']) ? $data['relation_ship'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['state'] === null) {
            $invalid_properties[] = "'state' can't be null";
        }
        $allowed_values = ["00", "20", "40", "41", "50"];
        if (!in_array($this->container['icms_cst'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'icms_cst', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['message_code']) && (strlen($this->container['message_code']) > 60)) {
            $invalid_properties[] = "invalid value for 'message_code', the character length must be smaller than or equal to 60.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['state'] === null) {
            return false;
        }
        $allowed_values = ["00", "20", "40", "41", "50"];
        if (!in_array($this->container['icms_cst'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['message_code']) > 60) {
            return false;
        }
        return true;
    }


    /**
     * Gets state
     * @return \Swagger\Client\Model\StateEnum
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param \Swagger\Client\Model\StateEnum $state
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets icms_cst
     * @return string
     */
    public function getIcmsCst()
    {
        return $this->container['icms_cst'];
    }

    /**
     * Sets icms_cst
     * @param string $icms_cst On sales process inform the CST hat the item linked to this configuration is subject to - '00' # TAXABLE - '20' # TAXABLE WITH BASE DISCOUNT - '40' # EXEMPT - '41' # NOT TAXABLE - '50' # SUSPENDED
     * @return $this
     */
    public function setIcmsCst($icms_cst)
    {
        $allowed_values = array('00', '20', '40', '41', '50');
        if (!is_null($icms_cst) && (!in_array($icms_cst, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'icms_cst', must be one of '00', '20', '40', '41', '50'");
        }
        $this->container['icms_cst'] = $icms_cst;

        return $this;
    }

    /**
     * Gets message_code
     * @return string
     */
    public function getMessageCode()
    {
        return $this->container['message_code'];
    }

    /**
     * Sets message_code
     * @param string $message_code Message to add to NF when this configuration is used
     * @return $this
     */
    public function setMessageCode($message_code)
    {
        if (!is_null($message_code) && (strlen($message_code) > 60)) {
            throw new \InvalidArgumentException('invalid length for $message_code when calling IcmsTaxConf., must be smaller than or equal to 60.');
        }

        $this->container['message_code'] = $message_code;

        return $this;
    }

    /**
     * Gets relation_ship
     * @return \Swagger\Client\Model\IcmsTaxConfBase[]
     */
    public function getRelationShip()
    {
        return $this->container['relation_ship'];
    }

    /**
     * Sets relation_ship
     * @param \Swagger\Client\Model\IcmsTaxConfBase[] $relation_ship the mapping key is state code / A chave do mapeamento é o código do Estado.
     * @return $this
     */
    public function setRelationShip($relation_ship)
    {
        $this->container['relation_ship'] = $relation_ship;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


