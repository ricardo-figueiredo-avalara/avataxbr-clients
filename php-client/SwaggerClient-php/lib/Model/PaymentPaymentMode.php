<?php
/**
 * PaymentPaymentMode
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PaymentPaymentMode Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PaymentPaymentMode implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Payment_paymentMode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mode' => 'string',
        'value' => 'double',
        'card_tp_integration' => 'string',
        'card_cnpj' => 'string',
        'card_brand' => 'string',
        'card_authorization' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'mode' => 'mode',
        'value' => 'value',
        'card_tp_integration' => 'cardTpIntegration',
        'card_cnpj' => 'cardCNPJ',
        'card_brand' => 'cardBrand',
        'card_authorization' => 'cardAuthorization'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'mode' => 'setMode',
        'value' => 'setValue',
        'card_tp_integration' => 'setCardTpIntegration',
        'card_cnpj' => 'setCardCnpj',
        'card_brand' => 'setCardBrand',
        'card_authorization' => 'setCardAuthorization'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'mode' => 'getMode',
        'value' => 'getValue',
        'card_tp_integration' => 'getCardTpIntegration',
        'card_cnpj' => 'getCardCnpj',
        'card_brand' => 'getCardBrand',
        'card_authorization' => 'getCardAuthorization'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const MODE__01 = '01';
    const MODE__02 = '02';
    const MODE__03 = '03';
    const MODE__04 = '04';
    const MODE__05 = '05';
    const MODE__10 = '10';
    const MODE__11 = '11';
    const MODE__12 = '12';
    const MODE__13 = '13';
    const MODE__99 = '99';
    const CARD_TP_INTEGRATION__1 = '1';
    const CARD_TP_INTEGRATION__2 = '2';
    const CARD_BRAND__01 = '01';
    const CARD_BRAND__02 = '02';
    const CARD_BRAND__03 = '03';
    const CARD_BRAND__04 = '04';
    const CARD_BRAND__99 = '99';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE__01,
            self::MODE__02,
            self::MODE__03,
            self::MODE__04,
            self::MODE__05,
            self::MODE__10,
            self::MODE__11,
            self::MODE__12,
            self::MODE__13,
            self::MODE__99,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCardTpIntegrationAllowableValues()
    {
        return [
            self::CARD_TP_INTEGRATION__1,
            self::CARD_TP_INTEGRATION__2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCardBrandAllowableValues()
    {
        return [
            self::CARD_BRAND__01,
            self::CARD_BRAND__02,
            self::CARD_BRAND__03,
            self::CARD_BRAND__04,
            self::CARD_BRAND__99,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['card_tp_integration'] = isset($data['card_tp_integration']) ? $data['card_tp_integration'] : null;
        $this->container['card_cnpj'] = isset($data['card_cnpj']) ? $data['card_cnpj'] : null;
        $this->container['card_brand'] = isset($data['card_brand']) ? $data['card_brand'] : null;
        $this->container['card_authorization'] = isset($data['card_authorization']) ? $data['card_authorization'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['mode'] === null) {
            $invalid_properties[] = "'mode' can't be null";
        }
        $allowed_values = ["01", "02", "03", "04", "05", "10", "11", "12", "13", "99"];
        if (!in_array($this->container['mode'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'mode', must be one of #{allowed_values}.";
        }

        if ($this->container['value'] === null) {
            $invalid_properties[] = "'value' can't be null";
        }
        $allowed_values = ["1", "2"];
        if (!in_array($this->container['card_tp_integration'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'card_tp_integration', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['card_cnpj']) && !preg_match("/[0-9]{14}/", $this->container['card_cnpj'])) {
            $invalid_properties[] = "invalid value for 'card_cnpj', must be conform to the pattern /[0-9]{14}/.";
        }

        $allowed_values = ["01", "02", "03", "04", "99"];
        if (!in_array($this->container['card_brand'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'card_brand', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['card_authorization']) && (strlen($this->container['card_authorization']) > 20)) {
            $invalid_properties[] = "invalid value for 'card_authorization', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['card_authorization']) && (strlen($this->container['card_authorization']) < 1)) {
            $invalid_properties[] = "invalid value for 'card_authorization', the character length must be bigger than or equal to 1.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['mode'] === null) {
            return false;
        }
        $allowed_values = ["01", "02", "03", "04", "05", "10", "11", "12", "13", "99"];
        if (!in_array($this->container['mode'], $allowed_values)) {
            return false;
        }
        if ($this->container['value'] === null) {
            return false;
        }
        $allowed_values = ["1", "2"];
        if (!in_array($this->container['card_tp_integration'], $allowed_values)) {
            return false;
        }
        if (!preg_match("/[0-9]{14}/", $this->container['card_cnpj'])) {
            return false;
        }
        $allowed_values = ["01", "02", "03", "04", "99"];
        if (!in_array($this->container['card_brand'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['card_authorization']) > 20) {
            return false;
        }
        if (strlen($this->container['card_authorization']) < 1) {
            return false;
        }
        return true;
    }


    /**
     * Gets mode
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     * @param string $mode Payment mode - '01' # Dinheiro - '02' # Cheque - '03' # Cartão de Crédito - '04' # Cartão de Débito - '05' # Crédito Loja - '10' # Vale Alimentação - '11' # Vale Refeição - '12' # Vale Presente - '13' # Vale Combustível - '99' # Outros
     * @return $this
     */
    public function setMode($mode)
    {
        $allowed_values = array('01', '02', '03', '04', '05', '10', '11', '12', '13', '99');
        if ((!in_array($mode, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'mode', must be one of '01', '02', '03', '04', '05', '10', '11', '12', '13', '99'");
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets value
     * @return double
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     * @param double $value payment value
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets card_tp_integration
     * @return string
     */
    public function getCardTpIntegration()
    {
        return $this->container['card_tp_integration'];
    }

    /**
     * Sets card_tp_integration
     * @param string $card_tp_integration - '1' # Payment integrated with system, - '2' # Payment not integrated with system
     * @return $this
     */
    public function setCardTpIntegration($card_tp_integration)
    {
        $allowed_values = array('1', '2');
        if (!is_null($card_tp_integration) && (!in_array($card_tp_integration, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'card_tp_integration', must be one of '1', '2'");
        }
        $this->container['card_tp_integration'] = $card_tp_integration;

        return $this;
    }

    /**
     * Gets card_cnpj
     * @return string
     */
    public function getCardCnpj()
    {
        return $this->container['card_cnpj'];
    }

    /**
     * Sets card_cnpj
     * @param string $card_cnpj Federal tax id of accrediting card (credenciadora do cartão)
     * @return $this
     */
    public function setCardCnpj($card_cnpj)
    {

        if (!is_null($card_cnpj) && (!preg_match("/[0-9]{14}/", $card_cnpj))) {
            throw new \InvalidArgumentException("invalid value for $card_cnpj when calling PaymentPaymentMode., must conform to the pattern /[0-9]{14}/.");
        }

        $this->container['card_cnpj'] = $card_cnpj;

        return $this;
    }

    /**
     * Gets card_brand
     * @return string
     */
    public function getCardBrand()
    {
        return $this->container['card_brand'];
    }

    /**
     * Sets card_brand
     * @param string $card_brand card brand - '01' # Visa - '02' # Mastercard - '03' # American Express - '04' # Sorocred - '99' # Other
     * @return $this
     */
    public function setCardBrand($card_brand)
    {
        $allowed_values = array('01', '02', '03', '04', '99');
        if (!is_null($card_brand) && (!in_array($card_brand, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'card_brand', must be one of '01', '02', '03', '04', '99'");
        }
        $this->container['card_brand'] = $card_brand;

        return $this;
    }

    /**
     * Gets card_authorization
     * @return string
     */
    public function getCardAuthorization()
    {
        return $this->container['card_authorization'];
    }

    /**
     * Sets card_authorization
     * @param string $card_authorization transaction authorization number
     * @return $this
     */
    public function setCardAuthorization($card_authorization)
    {
        if (!is_null($card_authorization) && (strlen($card_authorization) > 20)) {
            throw new \InvalidArgumentException('invalid length for $card_authorization when calling PaymentPaymentMode., must be smaller than or equal to 20.');
        }
        if (!is_null($card_authorization) && (strlen($card_authorization) < 1)) {
            throw new \InvalidArgumentException('invalid length for $card_authorization when calling PaymentPaymentMode., must be bigger than or equal to 1.');
        }

        $this->container['card_authorization'] = $card_authorization;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


