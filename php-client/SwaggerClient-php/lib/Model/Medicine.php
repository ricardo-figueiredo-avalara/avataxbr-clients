<?php
/**
 * Medicine
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Medicine Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Medicine implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Medicine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lote_number' => 'string',
        'lote_quantity' => 'double',
        'manufactoty_date' => '\DateTime',
        'expiration_date' => '\DateTime',
        'max_value_to_end_user' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'lote_number' => 'loteNumber',
        'lote_quantity' => 'loteQuantity',
        'manufactoty_date' => 'manufactotyDate',
        'expiration_date' => 'expirationDate',
        'max_value_to_end_user' => 'maxValueToEndUser'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'lote_number' => 'setLoteNumber',
        'lote_quantity' => 'setLoteQuantity',
        'manufactoty_date' => 'setManufactotyDate',
        'expiration_date' => 'setExpirationDate',
        'max_value_to_end_user' => 'setMaxValueToEndUser'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'lote_number' => 'getLoteNumber',
        'lote_quantity' => 'getLoteQuantity',
        'manufactoty_date' => 'getManufactotyDate',
        'expiration_date' => 'getExpirationDate',
        'max_value_to_end_user' => 'getMaxValueToEndUser'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lote_number'] = isset($data['lote_number']) ? $data['lote_number'] : null;
        $this->container['lote_quantity'] = isset($data['lote_quantity']) ? $data['lote_quantity'] : null;
        $this->container['manufactoty_date'] = isset($data['manufactoty_date']) ? $data['manufactoty_date'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['max_value_to_end_user'] = isset($data['max_value_to_end_user']) ? $data['max_value_to_end_user'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['lote_number'] === null) {
            $invalid_properties[] = "'lote_number' can't be null";
        }
        if ((strlen($this->container['lote_number']) > 20)) {
            $invalid_properties[] = "invalid value for 'lote_number', the character length must be smaller than or equal to 20.";
        }

        if ($this->container['lote_quantity'] === null) {
            $invalid_properties[] = "'lote_quantity' can't be null";
        }
        if ($this->container['manufactoty_date'] === null) {
            $invalid_properties[] = "'manufactoty_date' can't be null";
        }
        if ($this->container['expiration_date'] === null) {
            $invalid_properties[] = "'expiration_date' can't be null";
        }
        if ($this->container['max_value_to_end_user'] === null) {
            $invalid_properties[] = "'max_value_to_end_user' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['lote_number'] === null) {
            return false;
        }
        if (strlen($this->container['lote_number']) > 20) {
            return false;
        }
        if ($this->container['lote_quantity'] === null) {
            return false;
        }
        if ($this->container['manufactoty_date'] === null) {
            return false;
        }
        if ($this->container['expiration_date'] === null) {
            return false;
        }
        if ($this->container['max_value_to_end_user'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets lote_number
     * @return string
     */
    public function getLoteNumber()
    {
        return $this->container['lote_number'];
    }

    /**
     * Sets lote_number
     * @param string $lote_number
     * @return $this
     */
    public function setLoteNumber($lote_number)
    {
        if ((strlen($lote_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $lote_number when calling Medicine., must be smaller than or equal to 20.');
        }

        $this->container['lote_number'] = $lote_number;

        return $this;
    }

    /**
     * Gets lote_quantity
     * @return double
     */
    public function getLoteQuantity()
    {
        return $this->container['lote_quantity'];
    }

    /**
     * Sets lote_quantity
     * @param double $lote_quantity This is a decimal type with 11 digits including 3 decimal positions.
     * @return $this
     */
    public function setLoteQuantity($lote_quantity)
    {
        $this->container['lote_quantity'] = $lote_quantity;

        return $this;
    }

    /**
     * Gets manufactoty_date
     * @return \DateTime
     */
    public function getManufactotyDate()
    {
        return $this->container['manufactoty_date'];
    }

    /**
     * Sets manufactoty_date
     * @param \DateTime $manufactoty_date
     * @return $this
     */
    public function setManufactotyDate($manufactoty_date)
    {
        $this->container['manufactoty_date'] = $manufactoty_date;

        return $this;
    }

    /**
     * Gets expiration_date
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     * @param \DateTime $expiration_date
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets max_value_to_end_user
     * @return double
     */
    public function getMaxValueToEndUser()
    {
        return $this->container['max_value_to_end_user'];
    }

    /**
     * Sets max_value_to_end_user
     * @param double $max_value_to_end_user This is a decimal type with 15 digits including 2 decimal positions.  Max value to end user.
     * @return $this
     */
    public function setMaxValueToEndUser($max_value_to_end_user)
    {
        $this->container['max_value_to_end_user'] = $max_value_to_end_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


