<?php
/**
 * Location
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Location Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Location implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Location';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'street' => 'string',
        'neighborhood' => 'string',
        'zipcode' => 'string',
        'city_code' => 'string',
        'city_name' => 'string',
        'state' => '\Swagger\Client\Model\StateEnum',
        'country_code' => 'string',
        'country' => 'string',
        'number' => 'string',
        'complement' => 'string',
        'phone' => 'string',
        'company_id' => 'string',
        'code' => 'string',
        'type' => 'string',
        'email' => 'string',
        'federal_tax_id' => 'string',
        'state_tax_id' => 'string',
        'secondary_state_tax_id' => '\Swagger\Client\Model\LocationSecondaryStateTaxId[]',
        'city_tax_id' => 'string',
        'suframa' => 'string',
        'main_activity' => 'string',
        'nfse_process_model' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'street' => 'street',
        'neighborhood' => 'neighborhood',
        'zipcode' => 'zipcode',
        'city_code' => 'cityCode',
        'city_name' => 'cityName',
        'state' => 'state',
        'country_code' => 'countryCode',
        'country' => 'country',
        'number' => 'number',
        'complement' => 'complement',
        'phone' => 'phone',
        'company_id' => 'companyId',
        'code' => 'code',
        'type' => 'type',
        'email' => 'email',
        'federal_tax_id' => 'federalTaxId',
        'state_tax_id' => 'stateTaxId',
        'secondary_state_tax_id' => 'secondaryStateTaxId',
        'city_tax_id' => 'cityTaxId',
        'suframa' => 'suframa',
        'main_activity' => 'mainActivity',
        'nfse_process_model' => 'nfseProcessModel'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'street' => 'setStreet',
        'neighborhood' => 'setNeighborhood',
        'zipcode' => 'setZipcode',
        'city_code' => 'setCityCode',
        'city_name' => 'setCityName',
        'state' => 'setState',
        'country_code' => 'setCountryCode',
        'country' => 'setCountry',
        'number' => 'setNumber',
        'complement' => 'setComplement',
        'phone' => 'setPhone',
        'company_id' => 'setCompanyId',
        'code' => 'setCode',
        'type' => 'setType',
        'email' => 'setEmail',
        'federal_tax_id' => 'setFederalTaxId',
        'state_tax_id' => 'setStateTaxId',
        'secondary_state_tax_id' => 'setSecondaryStateTaxId',
        'city_tax_id' => 'setCityTaxId',
        'suframa' => 'setSuframa',
        'main_activity' => 'setMainActivity',
        'nfse_process_model' => 'setNfseProcessModel'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'street' => 'getStreet',
        'neighborhood' => 'getNeighborhood',
        'zipcode' => 'getZipcode',
        'city_code' => 'getCityCode',
        'city_name' => 'getCityName',
        'state' => 'getState',
        'country_code' => 'getCountryCode',
        'country' => 'getCountry',
        'number' => 'getNumber',
        'complement' => 'getComplement',
        'phone' => 'getPhone',
        'company_id' => 'getCompanyId',
        'code' => 'getCode',
        'type' => 'getType',
        'email' => 'getEmail',
        'federal_tax_id' => 'getFederalTaxId',
        'state_tax_id' => 'getStateTaxId',
        'secondary_state_tax_id' => 'getSecondaryStateTaxId',
        'city_tax_id' => 'getCityTaxId',
        'suframa' => 'getSuframa',
        'main_activity' => 'getMainActivity',
        'nfse_process_model' => 'getNfseProcessModel'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_SHIP_FROM = 'ShipFrom';
    const TYPE_SHIP_TO = 'ShipTo';
    const TYPE_SERVICE_RENDERED = 'ServiceRendered';
    const MAIN_ACTIVITY_COMMERCE = 'commerce';
    const MAIN_ACTIVITY_INDUSTRY = 'industry';
    const MAIN_ACTIVITY_SERVICE = 'service';
    const NFSE_PROCESS_MODEL_EDI = 'edi';
    const NFSE_PROCESS_MODEL_XML = 'xml';
    const NFSE_PROCESS_MODEL_RPS = 'rps';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SHIP_FROM,
            self::TYPE_SHIP_TO,
            self::TYPE_SERVICE_RENDERED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getMainActivityAllowableValues()
    {
        return [
            self::MAIN_ACTIVITY_COMMERCE,
            self::MAIN_ACTIVITY_INDUSTRY,
            self::MAIN_ACTIVITY_SERVICE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getNfseProcessModelAllowableValues()
    {
        return [
            self::NFSE_PROCESS_MODEL_EDI,
            self::NFSE_PROCESS_MODEL_XML,
            self::NFSE_PROCESS_MODEL_RPS,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['neighborhood'] = isset($data['neighborhood']) ? $data['neighborhood'] : null;
        $this->container['zipcode'] = isset($data['zipcode']) ? $data['zipcode'] : null;
        $this->container['city_code'] = isset($data['city_code']) ? $data['city_code'] : null;
        $this->container['city_name'] = isset($data['city_name']) ? $data['city_name'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : '0';
        $this->container['country'] = isset($data['country']) ? $data['country'] : 'BRA';
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['complement'] = isset($data['complement']) ? $data['complement'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['federal_tax_id'] = isset($data['federal_tax_id']) ? $data['federal_tax_id'] : null;
        $this->container['state_tax_id'] = isset($data['state_tax_id']) ? $data['state_tax_id'] : null;
        $this->container['secondary_state_tax_id'] = isset($data['secondary_state_tax_id']) ? $data['secondary_state_tax_id'] : null;
        $this->container['city_tax_id'] = isset($data['city_tax_id']) ? $data['city_tax_id'] : null;
        $this->container['suframa'] = isset($data['suframa']) ? $data['suframa'] : null;
        $this->container['main_activity'] = isset($data['main_activity']) ? $data['main_activity'] : null;
        $this->container['nfse_process_model'] = isset($data['nfse_process_model']) ? $data['nfse_process_model'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['street']) && (strlen($this->container['street']) > 60)) {
            $invalid_properties[] = "invalid value for 'street', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['neighborhood']) && (strlen($this->container['neighborhood']) > 60)) {
            $invalid_properties[] = "invalid value for 'neighborhood', the character length must be smaller than or equal to 60.";
        }

        if ($this->container['zipcode'] === null) {
            $invalid_properties[] = "'zipcode' can't be null";
        }
        if (!preg_match("/^(\\d{8}|\\d{5}\\-\\d{3})$/", $this->container['zipcode'])) {
            $invalid_properties[] = "invalid value for 'zipcode', must be conform to the pattern /^(\\d{8}|\\d{5}\\-\\d{3})$/.";
        }

        if (!is_null($this->container['city_code']) && !preg_match("/^(\\d{7})$/", $this->container['city_code'])) {
            $invalid_properties[] = "invalid value for 'city_code', must be conform to the pattern /^(\\d{7})$/.";
        }

        if (!is_null($this->container['city_name']) && (strlen($this->container['city_name']) > 60)) {
            $invalid_properties[] = "invalid value for 'city_name', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['country_code']) && !preg_match("/[0-9]{1,4}/", $this->container['country_code'])) {
            $invalid_properties[] = "invalid value for 'country_code', must be conform to the pattern /[0-9]{1,4}/.";
        }

        if (!is_null($this->container['country']) && (strlen($this->container['country']) > 3)) {
            $invalid_properties[] = "invalid value for 'country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['country']) && !preg_match("/^([A-Z]{3})$/", $this->container['country'])) {
            $invalid_properties[] = "invalid value for 'country', must be conform to the pattern /^([A-Z]{3})$/.";
        }

        if (!is_null($this->container['number']) && (strlen($this->container['number']) > 60)) {
            $invalid_properties[] = "invalid value for 'number', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['complement']) && (strlen($this->container['complement']) > 60)) {
            $invalid_properties[] = "invalid value for 'complement', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['phone']) && !preg_match("/^(\\d{6,14}|\\(\\d{2}\\)\\s*\\d{4,5}-*\\d{4})$/", $this->container['phone'])) {
            $invalid_properties[] = "invalid value for 'phone', must be conform to the pattern /^(\\d{6,14}|\\(\\d{2}\\)\\s*\\d{4,5}-*\\d{4})$/.";
        }

        if ($this->container['company_id'] === null) {
            $invalid_properties[] = "'company_id' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalid_properties[] = "'code' can't be null";
        }
        if ((strlen($this->container['code']) > 60)) {
            $invalid_properties[] = "invalid value for 'code', the character length must be smaller than or equal to 60.";
        }

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = ["ShipFrom", "ShipTo", "ServiceRendered"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['email']) && (strlen($this->container['email']) > 60)) {
            $invalid_properties[] = "invalid value for 'email', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['federal_tax_id']) && !preg_match("/^(\\d{14}|\\d{2}\\.\\d{3}.\\d{3}/\\d{4}-\\d{2}|\\d{11}|\\d{3}\\.\\d{3}.\\d{3}-\\d{2})$/", $this->container['federal_tax_id'])) {
            $invalid_properties[] = "invalid value for 'federal_tax_id', must be conform to the pattern /^(\\d{14}|\\d{2}\\.\\d{3}.\\d{3}/\\d{4}-\\d{2}|\\d{11}|\\d{3}\\.\\d{3}.\\d{3}-\\d{2})$/.";
        }

        if (!is_null($this->container['state_tax_id']) && !preg_match("/^(\\d{9,14}|ISENTO)$/", $this->container['state_tax_id'])) {
            $invalid_properties[] = "invalid value for 'state_tax_id', must be conform to the pattern /^(\\d{9,14}|ISENTO)$/.";
        }

        if (!is_null($this->container['city_tax_id']) && (strlen($this->container['city_tax_id']) > 15)) {
            $invalid_properties[] = "invalid value for 'city_tax_id', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['suframa']) && !preg_match("/[0-9]{8,9}/", $this->container['suframa'])) {
            $invalid_properties[] = "invalid value for 'suframa', must be conform to the pattern /[0-9]{8,9}/.";
        }

        $allowed_values = ["commerce", "industry", "service"];
        if (!in_array($this->container['main_activity'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'main_activity', must be one of #{allowed_values}.";
        }

        $allowed_values = ["edi", "xml", "rps"];
        if (!in_array($this->container['nfse_process_model'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'nfse_process_model', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['street']) > 60) {
            return false;
        }
        if (strlen($this->container['neighborhood']) > 60) {
            return false;
        }
        if ($this->container['zipcode'] === null) {
            return false;
        }
        if (!preg_match("/^(\\d{8}|\\d{5}\\-\\d{3})$/", $this->container['zipcode'])) {
            return false;
        }
        if (!preg_match("/^(\\d{7})$/", $this->container['city_code'])) {
            return false;
        }
        if (strlen($this->container['city_name']) > 60) {
            return false;
        }
        if (!preg_match("/[0-9]{1,4}/", $this->container['country_code'])) {
            return false;
        }
        if (strlen($this->container['country']) > 3) {
            return false;
        }
        if (!preg_match("/^([A-Z]{3})$/", $this->container['country'])) {
            return false;
        }
        if (strlen($this->container['number']) > 60) {
            return false;
        }
        if (strlen($this->container['complement']) > 60) {
            return false;
        }
        if (!preg_match("/^(\\d{6,14}|\\(\\d{2}\\)\\s*\\d{4,5}-*\\d{4})$/", $this->container['phone'])) {
            return false;
        }
        if ($this->container['company_id'] === null) {
            return false;
        }
        if ($this->container['code'] === null) {
            return false;
        }
        if (strlen($this->container['code']) > 60) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = ["ShipFrom", "ShipTo", "ServiceRendered"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['email']) > 60) {
            return false;
        }
        if (!preg_match("/^(\\d{14}|\\d{2}\\.\\d{3}.\\d{3}/\\d{4}-\\d{2}|\\d{11}|\\d{3}\\.\\d{3}.\\d{3}-\\d{2})$/", $this->container['federal_tax_id'])) {
            return false;
        }
        if (!preg_match("/^(\\d{9,14}|ISENTO)$/", $this->container['state_tax_id'])) {
            return false;
        }
        if (strlen($this->container['city_tax_id']) > 15) {
            return false;
        }
        if (!preg_match("/[0-9]{8,9}/", $this->container['suframa'])) {
            return false;
        }
        $allowed_values = ["commerce", "industry", "service"];
        if (!in_array($this->container['main_activity'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["edi", "xml", "rps"];
        if (!in_array($this->container['nfse_process_model'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets street
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     * @param string $street Street Name
     * @return $this
     */
    public function setStreet($street)
    {
        if (!is_null($street) && (strlen($street) > 60)) {
            throw new \InvalidArgumentException('invalid length for $street when calling Location., must be smaller than or equal to 60.');
        }

        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets neighborhood
     * @return string
     */
    public function getNeighborhood()
    {
        return $this->container['neighborhood'];
    }

    /**
     * Sets neighborhood
     * @param string $neighborhood Neighborhood Name
     * @return $this
     */
    public function setNeighborhood($neighborhood)
    {
        if (!is_null($neighborhood) && (strlen($neighborhood) > 60)) {
            throw new \InvalidArgumentException('invalid length for $neighborhood when calling Location., must be smaller than or equal to 60.');
        }

        $this->container['neighborhood'] = $neighborhood;

        return $this;
    }

    /**
     * Gets zipcode
     * @return string
     */
    public function getZipcode()
    {
        return $this->container['zipcode'];
    }

    /**
     * Sets zipcode
     * @param string $zipcode Brazilian Zip Code
     * @return $this
     */
    public function setZipcode($zipcode)
    {

        if ((!preg_match("/^(\\d{8}|\\d{5}\\-\\d{3})$/", $zipcode))) {
            throw new \InvalidArgumentException("invalid value for $zipcode when calling Location., must conform to the pattern /^(\\d{8}|\\d{5}\\-\\d{3})$/.");
        }

        $this->container['zipcode'] = $zipcode;

        return $this;
    }

    /**
     * Gets city_code
     * @return string
     */
    public function getCityCode()
    {
        return $this->container['city_code'];
    }

    /**
     * Sets city_code
     * @param string $city_code City Code (IBGE)
     * @return $this
     */
    public function setCityCode($city_code)
    {

        if (!is_null($city_code) && (!preg_match("/^(\\d{7})$/", $city_code))) {
            throw new \InvalidArgumentException("invalid value for $city_code when calling Location., must conform to the pattern /^(\\d{7})$/.");
        }

        $this->container['city_code'] = $city_code;

        return $this;
    }

    /**
     * Gets city_name
     * @return string
     */
    public function getCityName()
    {
        return $this->container['city_name'];
    }

    /**
     * Sets city_name
     * @param string $city_name City Name
     * @return $this
     */
    public function setCityName($city_name)
    {
        if (!is_null($city_name) && (strlen($city_name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $city_name when calling Location., must be smaller than or equal to 60.');
        }

        $this->container['city_name'] = $city_name;

        return $this;
    }

    /**
     * Gets state
     * @return \Swagger\Client\Model\StateEnum
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param \Swagger\Client\Model\StateEnum $state
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets country_code
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     * @param string $country_code Country Code
     * @return $this
     */
    public function setCountryCode($country_code)
    {

        if (!is_null($country_code) && (!preg_match("/[0-9]{1,4}/", $country_code))) {
            throw new \InvalidArgumentException("invalid value for $country_code when calling Location., must conform to the pattern /[0-9]{1,4}/.");
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country Use ISO 3166-1 alpha-3 codes
     * @return $this
     */
    public function setCountry($country)
    {
        if (!is_null($country) && (strlen($country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $country when calling Location., must be smaller than or equal to 3.');
        }
        if (!is_null($country) && (!preg_match("/^([A-Z]{3})$/", $country))) {
            throw new \InvalidArgumentException("invalid value for $country when calling Location., must conform to the pattern /^([A-Z]{3})$/.");
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets number
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     * @param string $number House number
     * @return $this
     */
    public function setNumber($number)
    {
        if (!is_null($number) && (strlen($number) > 60)) {
            throw new \InvalidArgumentException('invalid length for $number when calling Location., must be smaller than or equal to 60.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets complement
     * @return string
     */
    public function getComplement()
    {
        return $this->container['complement'];
    }

    /**
     * Sets complement
     * @param string $complement Any other information about the address (Room, Suite, Floor, etc)).
     * @return $this
     */
    public function setComplement($complement)
    {
        if (!is_null($complement) && (strlen($complement) > 60)) {
            throw new \InvalidArgumentException('invalid length for $complement when calling Location., must be smaller than or equal to 60.');
        }

        $this->container['complement'] = $complement;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone Phone number
     * @return $this
     */
    public function setPhone($phone)
    {

        if (!is_null($phone) && (!preg_match("/^(\\d{6,14}|\\(\\d{2}\\)\\s*\\d{4,5}-*\\d{4})$/", $phone))) {
            throw new \InvalidArgumentException("invalid value for $phone when calling Location., must conform to the pattern /^(\\d{6,14}|\\(\\d{2}\\)\\s*\\d{4,5}-*\\d{4})$/.");
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets company_id
     * @return string
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     * @param string $company_id Company ID
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code this property identify the location, it is unique for this company
     * @return $this
     */
    public function setCode($code)
    {
        if ((strlen($code) > 60)) {
            throw new \InvalidArgumentException('invalid length for $code when calling Location., must be smaller than or equal to 60.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type this property identify the location, it is unique for this company
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('ShipFrom', 'ShipTo', 'ServiceRendered');
        if ((!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'ShipFrom', 'ShipTo', 'ServiceRendered'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Email
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (strlen($email) > 60)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Location., must be smaller than or equal to 60.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets federal_tax_id
     * @return string
     */
    public function getFederalTaxId()
    {
        return $this->container['federal_tax_id'];
    }

    /**
     * Sets federal_tax_id
     * @param string $federal_tax_id Federal tax id, CNPJ or CPF
     * @return $this
     */
    public function setFederalTaxId($federal_tax_id)
    {

        if (!is_null($federal_tax_id) && (!preg_match("/^(\\d{14}|\\d{2}\\.\\d{3}.\\d{3}/\\d{4}-\\d{2}|\\d{11}|\\d{3}\\.\\d{3}.\\d{3}-\\d{2})$/", $federal_tax_id))) {
            throw new \InvalidArgumentException("invalid value for $federal_tax_id when calling Location., must conform to the pattern /^(\\d{14}|\\d{2}\\.\\d{3}.\\d{3}/\\d{4}-\\d{2}|\\d{11}|\\d{3}\\.\\d{3}.\\d{3}-\\d{2})$/.");
        }

        $this->container['federal_tax_id'] = $federal_tax_id;

        return $this;
    }

    /**
     * Gets state_tax_id
     * @return string
     */
    public function getStateTaxId()
    {
        return $this->container['state_tax_id'];
    }

    /**
     * Sets state_tax_id
     * @param string $state_tax_id state tax id for this location
     * @return $this
     */
    public function setStateTaxId($state_tax_id)
    {

        if (!is_null($state_tax_id) && (!preg_match("/^(\\d{9,14}|ISENTO)$/", $state_tax_id))) {
            throw new \InvalidArgumentException("invalid value for $state_tax_id when calling Location., must conform to the pattern /^(\\d{9,14}|ISENTO)$/.");
        }

        $this->container['state_tax_id'] = $state_tax_id;

        return $this;
    }

    /**
     * Gets secondary_state_tax_id
     * @return \Swagger\Client\Model\LocationSecondaryStateTaxId[]
     */
    public function getSecondaryStateTaxId()
    {
        return $this->container['secondary_state_tax_id'];
    }

    /**
     * Sets secondary_state_tax_id
     * @param \Swagger\Client\Model\LocationSecondaryStateTaxId[] $secondary_state_tax_id
     * @return $this
     */
    public function setSecondaryStateTaxId($secondary_state_tax_id)
    {
        $this->container['secondary_state_tax_id'] = $secondary_state_tax_id;

        return $this;
    }

    /**
     * Gets city_tax_id
     * @return string
     */
    public function getCityTaxId()
    {
        return $this->container['city_tax_id'];
    }

    /**
     * Sets city_tax_id
     * @param string $city_tax_id City Tax ID
     * @return $this
     */
    public function setCityTaxId($city_tax_id)
    {
        if (!is_null($city_tax_id) && (strlen($city_tax_id) > 15)) {
            throw new \InvalidArgumentException('invalid length for $city_tax_id when calling Location., must be smaller than or equal to 15.');
        }

        $this->container['city_tax_id'] = $city_tax_id;

        return $this;
    }

    /**
     * Gets suframa
     * @return string
     */
    public function getSuframa()
    {
        return $this->container['suframa'];
    }

    /**
     * Sets suframa
     * @param string $suframa
     * @return $this
     */
    public function setSuframa($suframa)
    {

        if (!is_null($suframa) && (!preg_match("/[0-9]{8,9}/", $suframa))) {
            throw new \InvalidArgumentException("invalid value for $suframa when calling Location., must conform to the pattern /[0-9]{8,9}/.");
        }

        $this->container['suframa'] = $suframa;

        return $this;
    }

    /**
     * Gets main_activity
     * @return string
     */
    public function getMainActivity()
    {
        return $this->container['main_activity'];
    }

    /**
     * Sets main_activity
     * @param string $main_activity Main location activity
     * @return $this
     */
    public function setMainActivity($main_activity)
    {
        $allowed_values = array('commerce', 'industry', 'service');
        if (!is_null($main_activity) && (!in_array($main_activity, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'main_activity', must be one of 'commerce', 'industry', 'service'");
        }
        $this->container['main_activity'] = $main_activity;

        return $this;
    }

    /**
     * Gets nfse_process_model
     * @return string
     */
    public function getNfseProcessModel()
    {
        return $this->container['nfse_process_model'];
    }

    /**
     * Sets nfse_process_model
     * @param string $nfse_process_model - 'edi' # City hall has web service and the integration is automatic - 'xml' # Create RPS specific to City, bat does not have webservice integration - 'rps' # Create a generic RPS, NF is by hands
     * @return $this
     */
    public function setNfseProcessModel($nfse_process_model)
    {
        $allowed_values = array('edi', 'xml', 'rps');
        if (!is_null($nfse_process_model) && (!in_array($nfse_process_model, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'nfse_process_model', must be one of 'edi', 'xml', 'rps'");
        }
        $this->container['nfse_process_model'] = $nfse_process_model;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


