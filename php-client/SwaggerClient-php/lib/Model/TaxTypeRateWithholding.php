<?php
/**
 * TaxTypeRateWithholding
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * TaxTypeRateWithholding Class Doc Comment
 *
 * @category    Class */
 // @description Assign an empty object for simple withholding, null (no key) for no withholding. Detailed behaviors for specific targets may be set by using the available optional keys.
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TaxTypeRateWithholding implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TaxTypeRate_withholding';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'all' => '\Swagger\Client\Model\WithholdDef',
        'business' => '\Swagger\Client\Model\WithholdDef',
        'federal_government' => '\Swagger\Client\Model\WithholdDef',
        'state_government' => '\Swagger\Client\Model\WithholdDef',
        'city_government' => '\Swagger\Client\Model\WithholdDef'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'all' => 'all',
        'business' => 'business',
        'federal_government' => 'federalGovernment',
        'state_government' => 'stateGovernment',
        'city_government' => 'cityGovernment'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'all' => 'setAll',
        'business' => 'setBusiness',
        'federal_government' => 'setFederalGovernment',
        'state_government' => 'setStateGovernment',
        'city_government' => 'setCityGovernment'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'all' => 'getAll',
        'business' => 'getBusiness',
        'federal_government' => 'getFederalGovernment',
        'state_government' => 'getStateGovernment',
        'city_government' => 'getCityGovernment'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['all'] = isset($data['all']) ? $data['all'] : null;
        $this->container['business'] = isset($data['business']) ? $data['business'] : null;
        $this->container['federal_government'] = isset($data['federal_government']) ? $data['federal_government'] : null;
        $this->container['state_government'] = isset($data['state_government']) ? $data['state_government'] : null;
        $this->container['city_government'] = isset($data['city_government']) ? $data['city_government'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets all
     * @return \Swagger\Client\Model\WithholdDef
     */
    public function getAll()
    {
        return $this->container['all'];
    }

    /**
     * Sets all
     * @param \Swagger\Client\Model\WithholdDef $all
     * @return $this
     */
    public function setAll($all)
    {
        $this->container['all'] = $all;

        return $this;
    }

    /**
     * Gets business
     * @return \Swagger\Client\Model\WithholdDef
     */
    public function getBusiness()
    {
        return $this->container['business'];
    }

    /**
     * Sets business
     * @param \Swagger\Client\Model\WithholdDef $business
     * @return $this
     */
    public function setBusiness($business)
    {
        $this->container['business'] = $business;

        return $this;
    }

    /**
     * Gets federal_government
     * @return \Swagger\Client\Model\WithholdDef
     */
    public function getFederalGovernment()
    {
        return $this->container['federal_government'];
    }

    /**
     * Sets federal_government
     * @param \Swagger\Client\Model\WithholdDef $federal_government
     * @return $this
     */
    public function setFederalGovernment($federal_government)
    {
        $this->container['federal_government'] = $federal_government;

        return $this;
    }

    /**
     * Gets state_government
     * @return \Swagger\Client\Model\WithholdDef
     */
    public function getStateGovernment()
    {
        return $this->container['state_government'];
    }

    /**
     * Sets state_government
     * @param \Swagger\Client\Model\WithholdDef $state_government
     * @return $this
     */
    public function setStateGovernment($state_government)
    {
        $this->container['state_government'] = $state_government;

        return $this;
    }

    /**
     * Gets city_government
     * @return \Swagger\Client\Model\WithholdDef
     */
    public function getCityGovernment()
    {
        return $this->container['city_government'];
    }

    /**
     * Sets city_government
     * @param \Swagger\Client\Model\WithholdDef $city_government
     * @return $this
     */
    public function setCityGovernment($city_government)
    {
        $this->container['city_government'] = $city_government;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


