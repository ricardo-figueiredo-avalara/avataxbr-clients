<?php
/**
 * InstallmentComplete
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * InstallmentComplete Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InstallmentComplete implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'InstallmentComplete';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'document_number' => 'string',
        'date' => '\DateTime',
        'gross_value' => 'double',
        'net_value' => 'double',
        'withholding_mode' => '\Swagger\Client\Model\WithholdingMode',
        'withholding_pis' => 'double',
        'withholding_cofins' => 'double',
        'withholding_csll' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'document_number' => 'documentNumber',
        'date' => 'date',
        'gross_value' => 'grossValue',
        'net_value' => 'netValue',
        'withholding_mode' => 'withholdingMode',
        'withholding_pis' => 'withholdingPIS',
        'withholding_cofins' => 'withholdingCOFINS',
        'withholding_csll' => 'withholdingCSLL'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'document_number' => 'setDocumentNumber',
        'date' => 'setDate',
        'gross_value' => 'setGrossValue',
        'net_value' => 'setNetValue',
        'withholding_mode' => 'setWithholdingMode',
        'withholding_pis' => 'setWithholdingPis',
        'withholding_cofins' => 'setWithholdingCofins',
        'withholding_csll' => 'setWithholdingCsll'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'document_number' => 'getDocumentNumber',
        'date' => 'getDate',
        'gross_value' => 'getGrossValue',
        'net_value' => 'getNetValue',
        'withholding_mode' => 'getWithholdingMode',
        'withholding_pis' => 'getWithholdingPis',
        'withholding_cofins' => 'getWithholdingCofins',
        'withholding_csll' => 'getWithholdingCsll'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['document_number'] = isset($data['document_number']) ? $data['document_number'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['gross_value'] = isset($data['gross_value']) ? $data['gross_value'] : null;
        $this->container['net_value'] = isset($data['net_value']) ? $data['net_value'] : null;
        $this->container['withholding_mode'] = isset($data['withholding_mode']) ? $data['withholding_mode'] : null;
        $this->container['withholding_pis'] = isset($data['withholding_pis']) ? $data['withholding_pis'] : null;
        $this->container['withholding_cofins'] = isset($data['withholding_cofins']) ? $data['withholding_cofins'] : null;
        $this->container['withholding_csll'] = isset($data['withholding_csll']) ? $data['withholding_csll'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['document_number'] === null) {
            $invalid_properties[] = "'document_number' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalid_properties[] = "'date' can't be null";
        }
        if ($this->container['gross_value'] === null) {
            $invalid_properties[] = "'gross_value' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['document_number'] === null) {
            return false;
        }
        if ($this->container['date'] === null) {
            return false;
        }
        if ($this->container['gross_value'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets document_number
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     * @param string $document_number DOCNUMBER, ID OF THIS DOCUMENT FOR THIS transaction
     * @return $this
     */
    public function setDocumentNumber($document_number)
    {
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets date
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     * @param \DateTime $date installment Due Date
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets gross_value
     * @return double
     */
    public function getGrossValue()
    {
        return $this->container['gross_value'];
    }

    /**
     * Sets gross_value
     * @param double $gross_value Intallment amount, fraction of  ∑(lineAmount - lineTaxedDiscount)
     * @return $this
     */
    public function setGrossValue($gross_value)
    {
        $this->container['gross_value'] = $gross_value;

        return $this;
    }

    /**
     * Gets net_value
     * @return double
     */
    public function getNetValue()
    {
        return $this->container['net_value'];
    }

    /**
     * Sets net_value
     * @param double $net_value net amount due for this installment, grossValue - ∑ (withhold amounts)
     * @return $this
     */
    public function setNetValue($net_value)
    {
        $this->container['net_value'] = $net_value;

        return $this;
    }

    /**
     * Gets withholding_mode
     * @return \Swagger\Client\Model\WithholdingMode
     */
    public function getWithholdingMode()
    {
        return $this->container['withholding_mode'];
    }

    /**
     * Sets withholding_mode
     * @param \Swagger\Client\Model\WithholdingMode $withholding_mode Inform if this payment is subject to Pis, Cofins or CSLL
     * @return $this
     */
    public function setWithholdingMode($withholding_mode)
    {
        $this->container['withholding_mode'] = $withholding_mode;

        return $this;
    }

    /**
     * Gets withholding_pis
     * @return double
     */
    public function getWithholdingPis()
    {
        return $this->container['withholding_pis'];
    }

    /**
     * Sets withholding_pis
     * @param double $withholding_pis calculated PIS-RF tax for this payment
     * @return $this
     */
    public function setWithholdingPis($withholding_pis)
    {
        $this->container['withholding_pis'] = $withholding_pis;

        return $this;
    }

    /**
     * Gets withholding_cofins
     * @return double
     */
    public function getWithholdingCofins()
    {
        return $this->container['withholding_cofins'];
    }

    /**
     * Sets withholding_cofins
     * @param double $withholding_cofins calculated COFINS-RF tax for this payment
     * @return $this
     */
    public function setWithholdingCofins($withholding_cofins)
    {
        $this->container['withholding_cofins'] = $withholding_cofins;

        return $this;
    }

    /**
     * Gets withholding_csll
     * @return double
     */
    public function getWithholdingCsll()
    {
        return $this->container['withholding_csll'];
    }

    /**
     * Sets withholding_csll
     * @param double $withholding_csll calculated CSLL-RF tax for this payment
     * @return $this
     */
    public function setWithholdingCsll($withholding_csll)
    {
        $this->container['withholding_csll'] = $withholding_csll;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


