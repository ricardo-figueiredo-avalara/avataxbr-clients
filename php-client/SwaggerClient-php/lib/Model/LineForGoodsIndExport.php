<?php
/**
 * LineForGoodsIndExport
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax Brazil
 *
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LineForGoodsIndExport Class Doc Comment
 *
 * @category    Class */
 // @description indirect exportation
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LineForGoodsIndExport implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LineForGoods_indExport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'register_number' => 'string',
        'access_key' => 'string',
        'quantity' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'register_number' => 'registerNumber',
        'access_key' => 'accessKey',
        'quantity' => 'quantity'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'register_number' => 'setRegisterNumber',
        'access_key' => 'setAccessKey',
        'quantity' => 'setQuantity'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'register_number' => 'getRegisterNumber',
        'access_key' => 'getAccessKey',
        'quantity' => 'getQuantity'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['register_number'] = isset($data['register_number']) ? $data['register_number'] : null;
        $this->container['access_key'] = isset($data['access_key']) ? $data['access_key'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['register_number'] === null) {
            $invalid_properties[] = "'register_number' can't be null";
        }
        if ((strlen($this->container['register_number']) > 12)) {
            $invalid_properties[] = "invalid value for 'register_number', the character length must be smaller than or equal to 12.";
        }

        if (!preg_match("/[0-9]{0,12}/", $this->container['register_number'])) {
            $invalid_properties[] = "invalid value for 'register_number', must be conform to the pattern /[0-9]{0,12}/.";
        }

        if ($this->container['access_key'] === null) {
            $invalid_properties[] = "'access_key' can't be null";
        }
        if ((strlen($this->container['access_key']) > 44)) {
            $invalid_properties[] = "invalid value for 'access_key', the character length must be smaller than or equal to 44.";
        }

        if (!preg_match("/[0-9]{44}/", $this->container['access_key'])) {
            $invalid_properties[] = "invalid value for 'access_key', must be conform to the pattern /[0-9]{44}/.";
        }

        if ($this->container['quantity'] === null) {
            $invalid_properties[] = "'quantity' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['register_number'] === null) {
            return false;
        }
        if (strlen($this->container['register_number']) > 12) {
            return false;
        }
        if (!preg_match("/[0-9]{0,12}/", $this->container['register_number'])) {
            return false;
        }
        if ($this->container['access_key'] === null) {
            return false;
        }
        if (strlen($this->container['access_key']) > 44) {
            return false;
        }
        if (!preg_match("/[0-9]{44}/", $this->container['access_key'])) {
            return false;
        }
        if ($this->container['quantity'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets register_number
     * @return string
     */
    public function getRegisterNumber()
    {
        return $this->container['register_number'];
    }

    /**
     * Sets register_number
     * @param string $register_number Exportation register number
     * @return $this
     */
    public function setRegisterNumber($register_number)
    {
        if ((strlen($register_number) > 12)) {
            throw new \InvalidArgumentException('invalid length for $register_number when calling LineForGoodsIndExport., must be smaller than or equal to 12.');
        }
        if ((!preg_match("/[0-9]{0,12}/", $register_number))) {
            throw new \InvalidArgumentException("invalid value for $register_number when calling LineForGoodsIndExport., must conform to the pattern /[0-9]{0,12}/.");
        }

        $this->container['register_number'] = $register_number;

        return $this;
    }

    /**
     * Gets access_key
     * @return string
     */
    public function getAccessKey()
    {
        return $this->container['access_key'];
    }

    /**
     * Sets access_key
     * @param string $access_key invoice access key received to export
     * @return $this
     */
    public function setAccessKey($access_key)
    {
        if ((strlen($access_key) > 44)) {
            throw new \InvalidArgumentException('invalid length for $access_key when calling LineForGoodsIndExport., must be smaller than or equal to 44.');
        }
        if ((!preg_match("/[0-9]{44}/", $access_key))) {
            throw new \InvalidArgumentException("invalid value for $access_key when calling LineForGoodsIndExport., must conform to the pattern /[0-9]{44}/.");
        }

        $this->container['access_key'] = $access_key;

        return $this;
    }

    /**
     * Gets quantity
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param double $quantity This decimal 11 integers and 0 to 4 decimals, quantity exported in real
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


