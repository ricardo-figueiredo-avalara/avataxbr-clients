<?php
/**
 * AdditionalInformationProcRef
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * AdditionalInformationProcRef Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AdditionalInformationProcRef implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AdditionalInformation_procRef';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'n_proc' => 'string',
        'ind_proc' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'n_proc' => 'nProc',
        'ind_proc' => 'indProc'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'n_proc' => 'setNProc',
        'ind_proc' => 'setIndProc'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'n_proc' => 'getNProc',
        'ind_proc' => 'getIndProc'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const IND_PROC__0 = '0';
    const IND_PROC__1 = '1';
    const IND_PROC__2 = '2';
    const IND_PROC__3 = '3';
    const IND_PROC__9 = '9';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getIndProcAllowableValues()
    {
        return [
            self::IND_PROC__0,
            self::IND_PROC__1,
            self::IND_PROC__2,
            self::IND_PROC__3,
            self::IND_PROC__9,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['n_proc'] = isset($data['n_proc']) ? $data['n_proc'] : null;
        $this->container['ind_proc'] = isset($data['ind_proc']) ? $data['ind_proc'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['n_proc']) && (strlen($this->container['n_proc']) > 60)) {
            $invalid_properties[] = "invalid value for 'n_proc', the character length must be smaller than or equal to 60.";
        }

        $allowed_values = ["0", "1", "2", "3", "9"];
        if (!in_array($this->container['ind_proc'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'ind_proc', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['n_proc']) > 60) {
            return false;
        }
        $allowed_values = ["0", "1", "2", "3", "9"];
        if (!in_array($this->container['ind_proc'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets n_proc
     * @return string
     */
    public function getNProc()
    {
        return $this->container['n_proc'];
    }

    /**
     * Sets n_proc
     * @param string $n_proc Process Identifier
     * @return $this
     */
    public function setNProc($n_proc)
    {
        if (!is_null($n_proc) && (strlen($n_proc) > 60)) {
            throw new \InvalidArgumentException('invalid length for $n_proc when calling AdditionalInformationProcRef., must be smaller than or equal to 60.');
        }

        $this->container['n_proc'] = $n_proc;

        return $this;
    }

    /**
     * Gets ind_proc
     * @return string
     */
    public function getIndProc()
    {
        return $this->container['ind_proc'];
    }

    /**
     * Sets ind_proc
     * @param string $ind_proc Process Origin - '0' # SEFAZ; - '1' # Justiça Federal; - '2' # Justiça Estadual; - '3' # Secex/RFB; - '9' # Outros
     * @return $this
     */
    public function setIndProc($ind_proc)
    {
        $allowed_values = array('0', '1', '2', '3', '9');
        if (!is_null($ind_proc) && (!in_array($ind_proc, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'ind_proc', must be one of '0', '1', '2', '3', '9'");
        }
        $this->container['ind_proc'] = $ind_proc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


