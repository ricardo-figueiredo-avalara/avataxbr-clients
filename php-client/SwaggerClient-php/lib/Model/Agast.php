<?php
/**
 * Agast
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BR16 - API
 *
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Agast Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Agast implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Agast';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'description' => 'string',
        'hs_code' => 'string',
        'ex' => 'int',
        'cest' => 'string',
        'cean' => 'string',
        'code_type' => '\Swagger\Client\Model\AgastCodeType',
        'cst_ipi' => 'string',
        'ipi_legal_tax_class' => 'string',
        'pis_cofins_tax_reporting' => 'string',
        'accruable_pis_taxation' => 'string',
        'accruable_cofins_taxation' => 'string',
        'accruable_csll_taxation' => 'string',
        'iss_dueat_destination' => 'bool',
        'pis_cofins_credit_not_allowed' => 'bool',
        'iss_taxation' => 'string',
        'federal_tax_rate' => '\Swagger\Client\Model\TaxTypeRate[]',
        'special_product_class' => 'string',
        'icms_conf' => '\Swagger\Client\Model\AgastIcmsConf[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'description' => 'description',
        'hs_code' => 'hsCode',
        'ex' => 'ex',
        'cest' => 'cest',
        'cean' => 'cean',
        'code_type' => 'codeType',
        'cst_ipi' => 'cstIPI',
        'ipi_legal_tax_class' => 'ipiLegalTaxClass',
        'pis_cofins_tax_reporting' => 'pisCofinsTaxReporting',
        'accruable_pis_taxation' => 'accruablePISTaxation',
        'accruable_cofins_taxation' => 'accruableCOFINSTaxation',
        'accruable_csll_taxation' => 'accruableCSLLTaxation',
        'iss_dueat_destination' => 'issDueatDestination',
        'pis_cofins_credit_not_allowed' => 'pisCofinsCreditNotAllowed',
        'iss_taxation' => 'issTaxation',
        'federal_tax_rate' => 'federalTaxRate',
        'special_product_class' => 'specialProductClass',
        'icms_conf' => 'icmsConf'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'description' => 'setDescription',
        'hs_code' => 'setHsCode',
        'ex' => 'setEx',
        'cest' => 'setCest',
        'cean' => 'setCean',
        'code_type' => 'setCodeType',
        'cst_ipi' => 'setCstIpi',
        'ipi_legal_tax_class' => 'setIpiLegalTaxClass',
        'pis_cofins_tax_reporting' => 'setPisCofinsTaxReporting',
        'accruable_pis_taxation' => 'setAccruablePisTaxation',
        'accruable_cofins_taxation' => 'setAccruableCofinsTaxation',
        'accruable_csll_taxation' => 'setAccruableCsllTaxation',
        'iss_dueat_destination' => 'setIssDueatDestination',
        'pis_cofins_credit_not_allowed' => 'setPisCofinsCreditNotAllowed',
        'iss_taxation' => 'setIssTaxation',
        'federal_tax_rate' => 'setFederalTaxRate',
        'special_product_class' => 'setSpecialProductClass',
        'icms_conf' => 'setIcmsConf'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'description' => 'getDescription',
        'hs_code' => 'getHsCode',
        'ex' => 'getEx',
        'cest' => 'getCest',
        'cean' => 'getCean',
        'code_type' => 'getCodeType',
        'cst_ipi' => 'getCstIpi',
        'ipi_legal_tax_class' => 'getIpiLegalTaxClass',
        'pis_cofins_tax_reporting' => 'getPisCofinsTaxReporting',
        'accruable_pis_taxation' => 'getAccruablePisTaxation',
        'accruable_cofins_taxation' => 'getAccruableCofinsTaxation',
        'accruable_csll_taxation' => 'getAccruableCsllTaxation',
        'iss_dueat_destination' => 'getIssDueatDestination',
        'pis_cofins_credit_not_allowed' => 'getPisCofinsCreditNotAllowed',
        'iss_taxation' => 'getIssTaxation',
        'federal_tax_rate' => 'getFederalTaxRate',
        'special_product_class' => 'getSpecialProductClass',
        'icms_conf' => 'getIcmsConf'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CST_IPI__50 = '50';
    const CST_IPI__51 = '51';
    const CST_IPI__52 = '52';
    const CST_IPI__53 = '53';
    const CST_IPI__54 = '54';
    const PIS_COFINS_TAX_REPORTING_CUMULATIVE = 'cumulative';
    const PIS_COFINS_TAX_REPORTING_NO_CUMULATIVE = 'noCumulative';
    const ACCRUABLE_PIS_TAXATION_T = 'T';
    const ACCRUABLE_PIS_TAXATION_Z = 'Z';
    const ACCRUABLE_PIS_TAXATION_E = 'E';
    const ACCRUABLE_PIS_TAXATION_H = 'H';
    const ACCRUABLE_PIS_TAXATION_N = 'N';
    const ACCRUABLE_COFINS_TAXATION_T = 'T';
    const ACCRUABLE_COFINS_TAXATION_Z = 'Z';
    const ACCRUABLE_COFINS_TAXATION_E = 'E';
    const ACCRUABLE_COFINS_TAXATION_H = 'H';
    const ACCRUABLE_COFINS_TAXATION_N = 'N';
    const ACCRUABLE_CSLL_TAXATION_T = 'T';
    const ACCRUABLE_CSLL_TAXATION_E = 'E';
    const ISS_TAXATION_T = 'T';
    const ISS_TAXATION_E = 'E';
    const ISS_TAXATION_F = 'F';
    const ISS_TAXATION_A = 'A';
    const ISS_TAXATION_L = 'L';
    const ISS_TAXATION_I = 'I';
    const SPECIAL_PRODUCT_CLASS_OTHERS = 'OTHERS';
    const SPECIAL_PRODUCT_CLASS_COMMUNICATION = 'COMMUNICATION';
    const SPECIAL_PRODUCT_CLASS_ENERGY = 'ENERGY';
    const SPECIAL_PRODUCT_CLASS_TRANSPORT = 'TRANSPORT';
    const SPECIAL_PRODUCT_CLASS_FUEL_AND_LUBRIFICANT = 'FUEL AND LUBRIFICANT';
    const SPECIAL_PRODUCT_CLASS_VEHICLE = 'VEHICLE';
    const SPECIAL_PRODUCT_CLASS_ALCOHOLIC_BEVERAGES = 'ALCOHOLIC BEVERAGES';
    const SPECIAL_PRODUCT_CLASS_WEAPONS = 'WEAPONS';
    const SPECIAL_PRODUCT_CLASS_AMMO = 'AMMO';
    const SPECIAL_PRODUCT_CLASS_PERFUME = 'PERFUME';
    const SPECIAL_PRODUCT_CLASS_TOBACCO = 'TOBACCO';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCstIpiAllowableValues()
    {
        return [
            self::CST_IPI__50,
            self::CST_IPI__51,
            self::CST_IPI__52,
            self::CST_IPI__53,
            self::CST_IPI__54,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPisCofinsTaxReportingAllowableValues()
    {
        return [
            self::PIS_COFINS_TAX_REPORTING_CUMULATIVE,
            self::PIS_COFINS_TAX_REPORTING_NO_CUMULATIVE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAccruablePisTaxationAllowableValues()
    {
        return [
            self::ACCRUABLE_PIS_TAXATION_T,
            self::ACCRUABLE_PIS_TAXATION_Z,
            self::ACCRUABLE_PIS_TAXATION_E,
            self::ACCRUABLE_PIS_TAXATION_H,
            self::ACCRUABLE_PIS_TAXATION_N,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAccruableCofinsTaxationAllowableValues()
    {
        return [
            self::ACCRUABLE_COFINS_TAXATION_T,
            self::ACCRUABLE_COFINS_TAXATION_Z,
            self::ACCRUABLE_COFINS_TAXATION_E,
            self::ACCRUABLE_COFINS_TAXATION_H,
            self::ACCRUABLE_COFINS_TAXATION_N,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAccruableCsllTaxationAllowableValues()
    {
        return [
            self::ACCRUABLE_CSLL_TAXATION_T,
            self::ACCRUABLE_CSLL_TAXATION_E,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getIssTaxationAllowableValues()
    {
        return [
            self::ISS_TAXATION_T,
            self::ISS_TAXATION_E,
            self::ISS_TAXATION_F,
            self::ISS_TAXATION_A,
            self::ISS_TAXATION_L,
            self::ISS_TAXATION_I,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSpecialProductClassAllowableValues()
    {
        return [
            self::SPECIAL_PRODUCT_CLASS_OTHERS,
            self::SPECIAL_PRODUCT_CLASS_COMMUNICATION,
            self::SPECIAL_PRODUCT_CLASS_ENERGY,
            self::SPECIAL_PRODUCT_CLASS_TRANSPORT,
            self::SPECIAL_PRODUCT_CLASS_FUEL_AND_LUBRIFICANT,
            self::SPECIAL_PRODUCT_CLASS_VEHICLE,
            self::SPECIAL_PRODUCT_CLASS_ALCOHOLIC_BEVERAGES,
            self::SPECIAL_PRODUCT_CLASS_WEAPONS,
            self::SPECIAL_PRODUCT_CLASS_AMMO,
            self::SPECIAL_PRODUCT_CLASS_PERFUME,
            self::SPECIAL_PRODUCT_CLASS_TOBACCO,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['hs_code'] = isset($data['hs_code']) ? $data['hs_code'] : null;
        $this->container['ex'] = isset($data['ex']) ? $data['ex'] : null;
        $this->container['cest'] = isset($data['cest']) ? $data['cest'] : null;
        $this->container['cean'] = isset($data['cean']) ? $data['cean'] : null;
        $this->container['code_type'] = isset($data['code_type']) ? $data['code_type'] : null;
        $this->container['cst_ipi'] = isset($data['cst_ipi']) ? $data['cst_ipi'] : null;
        $this->container['ipi_legal_tax_class'] = isset($data['ipi_legal_tax_class']) ? $data['ipi_legal_tax_class'] : null;
        $this->container['pis_cofins_tax_reporting'] = isset($data['pis_cofins_tax_reporting']) ? $data['pis_cofins_tax_reporting'] : null;
        $this->container['accruable_pis_taxation'] = isset($data['accruable_pis_taxation']) ? $data['accruable_pis_taxation'] : null;
        $this->container['accruable_cofins_taxation'] = isset($data['accruable_cofins_taxation']) ? $data['accruable_cofins_taxation'] : null;
        $this->container['accruable_csll_taxation'] = isset($data['accruable_csll_taxation']) ? $data['accruable_csll_taxation'] : null;
        $this->container['iss_dueat_destination'] = isset($data['iss_dueat_destination']) ? $data['iss_dueat_destination'] : null;
        $this->container['pis_cofins_credit_not_allowed'] = isset($data['pis_cofins_credit_not_allowed']) ? $data['pis_cofins_credit_not_allowed'] : null;
        $this->container['iss_taxation'] = isset($data['iss_taxation']) ? $data['iss_taxation'] : null;
        $this->container['federal_tax_rate'] = isset($data['federal_tax_rate']) ? $data['federal_tax_rate'] : null;
        $this->container['special_product_class'] = isset($data['special_product_class']) ? $data['special_product_class'] : null;
        $this->container['icms_conf'] = isset($data['icms_conf']) ? $data['icms_conf'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['code'] === null) {
            $invalid_properties[] = "'code' can't be null";
        }
        if (!is_null($this->container['description']) && (strlen($this->container['description']) > 200)) {
            $invalid_properties[] = "invalid value for 'description', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['hs_code']) && (strlen($this->container['hs_code']) > 8)) {
            $invalid_properties[] = "invalid value for 'hs_code', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['cest']) && !preg_match("/[0-9]{7}/", $this->container['cest'])) {
            $invalid_properties[] = "invalid value for 'cest', must be conform to the pattern /[0-9]{7}/.";
        }

        if (!is_null($this->container['cean']) && !preg_match("/[0-9]{0}|[0-9]{8}|[0-9]{12,14}/", $this->container['cean'])) {
            $invalid_properties[] = "invalid value for 'cean', must be conform to the pattern /[0-9]{0}|[0-9]{8}|[0-9]{12,14}/.";
        }

        $allowed_values = ["50", "51", "52", "53", "54"];
        if (!in_array($this->container['cst_ipi'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'cst_ipi', must be one of #{allowed_values}.";
        }

        $allowed_values = ["cumulative", "noCumulative"];
        if (!in_array($this->container['pis_cofins_tax_reporting'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'pis_cofins_tax_reporting', must be one of #{allowed_values}.";
        }

        $allowed_values = ["T", "Z", "E", "H", "N"];
        if (!in_array($this->container['accruable_pis_taxation'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'accruable_pis_taxation', must be one of #{allowed_values}.";
        }

        $allowed_values = ["T", "Z", "E", "H", "N"];
        if (!in_array($this->container['accruable_cofins_taxation'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'accruable_cofins_taxation', must be one of #{allowed_values}.";
        }

        $allowed_values = ["T", "E"];
        if (!in_array($this->container['accruable_csll_taxation'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'accruable_csll_taxation', must be one of #{allowed_values}.";
        }

        $allowed_values = ["T", "E", "F", "A", "L", "I"];
        if (!in_array($this->container['iss_taxation'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'iss_taxation', must be one of #{allowed_values}.";
        }

        $allowed_values = ["OTHERS", "COMMUNICATION", "ENERGY", "TRANSPORT", "FUEL AND LUBRIFICANT", "VEHICLE", "ALCOHOLIC BEVERAGES", "WEAPONS", "AMMO", "PERFUME", "TOBACCO"];
        if (!in_array($this->container['special_product_class'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'special_product_class', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['code'] === null) {
            return false;
        }
        if (strlen($this->container['description']) > 200) {
            return false;
        }
        if (strlen($this->container['hs_code']) > 8) {
            return false;
        }
        if (!preg_match("/[0-9]{7}/", $this->container['cest'])) {
            return false;
        }
        if (!preg_match("/[0-9]{0}|[0-9]{8}|[0-9]{12,14}/", $this->container['cean'])) {
            return false;
        }
        $allowed_values = ["50", "51", "52", "53", "54"];
        if (!in_array($this->container['cst_ipi'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["cumulative", "noCumulative"];
        if (!in_array($this->container['pis_cofins_tax_reporting'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["T", "Z", "E", "H", "N"];
        if (!in_array($this->container['accruable_pis_taxation'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["T", "Z", "E", "H", "N"];
        if (!in_array($this->container['accruable_cofins_taxation'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["T", "E"];
        if (!in_array($this->container['accruable_csll_taxation'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["T", "E", "F", "A", "L", "I"];
        if (!in_array($this->container['iss_taxation'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["OTHERS", "COMMUNICATION", "ENERGY", "TRANSPORT", "FUEL AND LUBRIFICANT", "VEHICLE", "ALCOHOLIC BEVERAGES", "WEAPONS", "AMMO", "PERFUME", "TOBACCO"];
        if (!in_array($this->container['special_product_class'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code Agast Code. AGAST (Avalara Goods and Services Types) are preset products with default tax definitions available to be used as provided or copied to create an specific comapany item.
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Agast Description
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (strlen($description) > 200)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Agast., must be smaller than or equal to 200.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets hs_code
     * @return string
     */
    public function getHsCode()
    {
        return $this->container['hs_code'];
    }

    /**
     * Sets hs_code
     * @param string $hs_code harmonized code, NCM or LC 116
     * @return $this
     */
    public function setHsCode($hs_code)
    {
        if (!is_null($hs_code) && (strlen($hs_code) > 8)) {
            throw new \InvalidArgumentException('invalid length for $hs_code when calling Agast., must be smaller than or equal to 8.');
        }

        $this->container['hs_code'] = $hs_code;

        return $this;
    }

    /**
     * Gets ex
     * @return int
     */
    public function getEx()
    {
        return $this->container['ex'];
    }

    /**
     * Sets ex
     * @param int $ex hsCode Exception for IPI tax
     * @return $this
     */
    public function setEx($ex)
    {
        $this->container['ex'] = $ex;

        return $this;
    }

    /**
     * Gets cest
     * @return string
     */
    public function getCest()
    {
        return $this->container['cest'];
    }

    /**
     * Sets cest
     * @param string $cest tax substitution code - Codigo especificador da Substuicao Tributaria
     * @return $this
     */
    public function setCest($cest)
    {

        if (!is_null($cest) && (!preg_match("/[0-9]{7}/", $cest))) {
            throw new \InvalidArgumentException("invalid value for $cest when calling Agast., must conform to the pattern /[0-9]{7}/.");
        }

        $this->container['cest'] = $cest;

        return $this;
    }

    /**
     * Gets cean
     * @return string
     */
    public function getCean()
    {
        return $this->container['cean'];
    }

    /**
     * Sets cean
     * @param string $cean GTIN NUMBER
     * @return $this
     */
    public function setCean($cean)
    {

        if (!is_null($cean) && (!preg_match("/[0-9]{0}|[0-9]{8}|[0-9]{12,14}/", $cean))) {
            throw new \InvalidArgumentException("invalid value for $cean when calling Agast., must conform to the pattern /[0-9]{0}|[0-9]{8}|[0-9]{12,14}/.");
        }

        $this->container['cean'] = $cean;

        return $this;
    }

    /**
     * Gets code_type
     * @return \Swagger\Client\Model\AgastCodeType
     */
    public function getCodeType()
    {
        return $this->container['code_type'];
    }

    /**
     * Sets code_type
     * @param \Swagger\Client\Model\AgastCodeType $code_type
     * @return $this
     */
    public function setCodeType($code_type)
    {
        $this->container['code_type'] = $code_type;

        return $this;
    }

    /**
     * Gets cst_ipi
     * @return string
     */
    public function getCstIpi()
    {
        return $this->container['cst_ipi'];
    }

    /**
     * Sets cst_ipi
     * @param string $cst_ipi Inform if this process is subject to IPI taxation on output process - '50' # Saída Tributada - '51' # Saída Tributável com Alíquota Zero - '52' # Saída Isenta - '53' # Saída Não-Tributada - '54' # Saída Imune
     * @return $this
     */
    public function setCstIpi($cst_ipi)
    {
        $allowed_values = array('50', '51', '52', '53', '54');
        if (!is_null($cst_ipi) && (!in_array($cst_ipi, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'cst_ipi', must be one of '50', '51', '52', '53', '54'");
        }
        $this->container['cst_ipi'] = $cst_ipi;

        return $this;
    }

    /**
     * Gets ipi_legal_tax_class
     * @return string
     */
    public function getIpiLegalTaxClass()
    {
        return $this->container['ipi_legal_tax_class'];
    }

    /**
     * Sets ipi_legal_tax_class
     * @param string $ipi_legal_tax_class Legal tax classificação for IPI (enquadramento tributário) When the process has CST IPI 52 or 54, it is mandatory to inform a Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo=mCnJajU4BKU=
     * @return $this
     */
    public function setIpiLegalTaxClass($ipi_legal_tax_class)
    {
        $this->container['ipi_legal_tax_class'] = $ipi_legal_tax_class;

        return $this;
    }

    /**
     * Gets pis_cofins_tax_reporting
     * @return string
     */
    public function getPisCofinsTaxReporting()
    {
        return $this->container['pis_cofins_tax_reporting'];
    }

    /**
     * Sets pis_cofins_tax_reporting
     * @param string $pis_cofins_tax_reporting when the company is Real Profit inform if this item is cumulative or no cumulative by default
     * @return $this
     */
    public function setPisCofinsTaxReporting($pis_cofins_tax_reporting)
    {
        $allowed_values = array('cumulative', 'noCumulative');
        if (!is_null($pis_cofins_tax_reporting) && (!in_array($pis_cofins_tax_reporting, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'pis_cofins_tax_reporting', must be one of 'cumulative', 'noCumulative'");
        }
        $this->container['pis_cofins_tax_reporting'] = $pis_cofins_tax_reporting;

        return $this;
    }

    /**
     * Gets accruable_pis_taxation
     * @return string
     */
    public function getAccruablePisTaxation()
    {
        return $this->container['accruable_pis_taxation'];
    }

    /**
     * Sets accruable_pis_taxation
     * @param string $accruable_pis_taxation Inform if this item by nature is subject to PIS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE
     * @return $this
     */
    public function setAccruablePisTaxation($accruable_pis_taxation)
    {
        $allowed_values = array('T', 'Z', 'E', 'H', 'N');
        if (!is_null($accruable_pis_taxation) && (!in_array($accruable_pis_taxation, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'accruable_pis_taxation', must be one of 'T', 'Z', 'E', 'H', 'N'");
        }
        $this->container['accruable_pis_taxation'] = $accruable_pis_taxation;

        return $this;
    }

    /**
     * Gets accruable_cofins_taxation
     * @return string
     */
    public function getAccruableCofinsTaxation()
    {
        return $this->container['accruable_cofins_taxation'];
    }

    /**
     * Sets accruable_cofins_taxation
     * @param string $accruable_cofins_taxation Inform if this item by nature is subject to COFINS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE
     * @return $this
     */
    public function setAccruableCofinsTaxation($accruable_cofins_taxation)
    {
        $allowed_values = array('T', 'Z', 'E', 'H', 'N');
        if (!is_null($accruable_cofins_taxation) && (!in_array($accruable_cofins_taxation, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'accruable_cofins_taxation', must be one of 'T', 'Z', 'E', 'H', 'N'");
        }
        $this->container['accruable_cofins_taxation'] = $accruable_cofins_taxation;

        return $this;
    }

    /**
     * Gets accruable_csll_taxation
     * @return string
     */
    public function getAccruableCsllTaxation()
    {
        return $this->container['accruable_csll_taxation'];
    }

    /**
     * Sets accruable_csll_taxation
     * @param string $accruable_csll_taxation Inform if this item by nature is subject to CSLL taxation or exempt - 'T' # TAXABLE - 'E' # EXEMPT
     * @return $this
     */
    public function setAccruableCsllTaxation($accruable_csll_taxation)
    {
        $allowed_values = array('T', 'E');
        if (!is_null($accruable_csll_taxation) && (!in_array($accruable_csll_taxation, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'accruable_csll_taxation', must be one of 'T', 'E'");
        }
        $this->container['accruable_csll_taxation'] = $accruable_csll_taxation;

        return $this;
    }

    /**
     * Gets iss_dueat_destination
     * @return bool
     */
    public function getIssDueatDestination()
    {
        return $this->container['iss_dueat_destination'];
    }

    /**
     * Sets iss_dueat_destination
     * @param bool $iss_dueat_destination for service items with City Jurisdiction, inform where the ISS tax is due
     * @return $this
     */
    public function setIssDueatDestination($iss_dueat_destination)
    {
        $this->container['iss_dueat_destination'] = $iss_dueat_destination;

        return $this;
    }

    /**
     * Gets pis_cofins_credit_not_allowed
     * @return bool
     */
    public function getPisCofinsCreditNotAllowed()
    {
        return $this->container['pis_cofins_credit_not_allowed'];
    }

    /**
     * Sets pis_cofins_credit_not_allowed
     * @param bool $pis_cofins_credit_not_allowed on Real Profit Purchase transaction, inform if this item allows tax credits when it is non-cumulative
     * @return $this
     */
    public function setPisCofinsCreditNotAllowed($pis_cofins_credit_not_allowed)
    {
        $this->container['pis_cofins_credit_not_allowed'] = $pis_cofins_credit_not_allowed;

        return $this;
    }

    /**
     * Gets iss_taxation
     * @return string
     */
    public function getIssTaxation()
    {
        return $this->container['iss_taxation'];
    }

    /**
     * Sets iss_taxation
     * @param string $iss_taxation - 'T' # TAXABLE - TRIBUTÁVEL INCLUSIVE PARA EXPORTAÇÃO' - 'E' # TAXABLE WITH EXEMPTION FOR EXPORTS - ISENTO PARA SERVIÇOS PRESTADOS AO EXTERIOR (DEFAULT) - 'F' # EXEMPT - 'A' # SUSPENDED FOR ADMINISTRATIVE REASON - 'L' # SUSPENDED FOR LEGAL DECISION - 'I' # IMMUNE
     * @return $this
     */
    public function setIssTaxation($iss_taxation)
    {
        $allowed_values = array('T', 'E', 'F', 'A', 'L', 'I');
        if (!is_null($iss_taxation) && (!in_array($iss_taxation, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'iss_taxation', must be one of 'T', 'E', 'F', 'A', 'L', 'I'");
        }
        $this->container['iss_taxation'] = $iss_taxation;

        return $this;
    }

    /**
     * Gets federal_tax_rate
     * @return \Swagger\Client\Model\TaxTypeRate[]
     */
    public function getFederalTaxRate()
    {
        return $this->container['federal_tax_rate'];
    }

    /**
     * Sets federal_tax_rate
     * @param \Swagger\Client\Model\TaxTypeRate[] $federal_tax_rate This is an array of tax object related to an agast.
     * @return $this
     */
    public function setFederalTaxRate($federal_tax_rate)
    {
        $this->container['federal_tax_rate'] = $federal_tax_rate;

        return $this;
    }

    /**
     * Gets special_product_class
     * @return string
     */
    public function getSpecialProductClass()
    {
        return $this->container['special_product_class'];
    }

    /**
     * Sets special_product_class
     * @param string $special_product_class
     * @return $this
     */
    public function setSpecialProductClass($special_product_class)
    {
        $allowed_values = array('OTHERS', 'COMMUNICATION', 'ENERGY', 'TRANSPORT', 'FUEL AND LUBRIFICANT', 'VEHICLE', 'ALCOHOLIC BEVERAGES', 'WEAPONS', 'AMMO', 'PERFUME', 'TOBACCO');
        if (!is_null($special_product_class) && (!in_array($special_product_class, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'special_product_class', must be one of 'OTHERS', 'COMMUNICATION', 'ENERGY', 'TRANSPORT', 'FUEL AND LUBRIFICANT', 'VEHICLE', 'ALCOHOLIC BEVERAGES', 'WEAPONS', 'AMMO', 'PERFUME', 'TOBACCO'");
        }
        $this->container['special_product_class'] = $special_product_class;

        return $this;
    }

    /**
     * Gets icms_conf
     * @return \Swagger\Client\Model\AgastIcmsConf[]
     */
    public function getIcmsConf()
    {
        return $this->container['icms_conf'];
    }

    /**
     * Sets icms_conf
     * @param \Swagger\Client\Model\AgastIcmsConf[] $icms_conf One per State
     * @return $this
     */
    public function setIcmsConf($icms_conf)
    {
        $this->container['icms_conf'] = $icms_conf;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


