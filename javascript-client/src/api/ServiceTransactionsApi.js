/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Message', 'model/PaymentTransactionIn', 'model/PaymentTransactionOut', 'model/PurchaseTransactionIn', 'model/PurchaseTransactionOut', 'model/ReceiptTransactionIn', 'model/ReceiptTransactionOut', 'model/SalesTransactionIn', 'model/SalesTransactionOut', 'model/StateTransition', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Message'), require('../model/PaymentTransactionIn'), require('../model/PaymentTransactionOut'), require('../model/PurchaseTransactionIn'), require('../model/PurchaseTransactionOut'), require('../model/ReceiptTransactionIn'), require('../model/ReceiptTransactionOut'), require('../model/SalesTransactionIn'), require('../model/SalesTransactionOut'), require('../model/StateTransition'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.AvaTaxBrazil) {
      root.AvaTaxBrazil = {};
    }
    root.AvaTaxBrazil.ServiceTransactionsApi = factory(root.AvaTaxBrazil.ApiClient, root.AvaTaxBrazil.Message, root.AvaTaxBrazil.PaymentTransactionIn, root.AvaTaxBrazil.PaymentTransactionOut, root.AvaTaxBrazil.PurchaseTransactionIn, root.AvaTaxBrazil.PurchaseTransactionOut, root.AvaTaxBrazil.ReceiptTransactionIn, root.AvaTaxBrazil.ReceiptTransactionOut, root.AvaTaxBrazil.SalesTransactionIn, root.AvaTaxBrazil.SalesTransactionOut, root.AvaTaxBrazil.StateTransition, root.AvaTaxBrazil.ValidationError);
  }
}(this, function(ApiClient, Message, PaymentTransactionIn, PaymentTransactionOut, PurchaseTransactionIn, PurchaseTransactionOut, ReceiptTransactionIn, ReceiptTransactionOut, SalesTransactionIn, SalesTransactionOut, StateTransition, ValidationError) {
  'use strict';

  /**
   * ServiceTransactions service.
   * @module api/ServiceTransactionsApi
   * @version 1.0
   */

  /**
   * Constructs a new ServiceTransactionsApi. 
   * @alias module:api/ServiceTransactionsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the retrieveServiceTransactions operation.
     * @callback module:api/ServiceTransactionsApi~retrieveServiceTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve service transactions
     * Retrieve a list of transactions
     * @param {String} authorization Bearer {auth}
     * @param {module:model/String} transactionType Transaction Type (sale, purchase, receipts or payment)
     * @param {module:api/ServiceTransactionsApi~retrieveServiceTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.retrieveServiceTransactions = function(authorization, transactionType, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling retrieveServiceTransactions");
      }

      // verify the required parameter 'transactionType' is set
      if (transactionType == undefined || transactionType == null) {
        throw new Error("Missing the required parameter 'transactionType' when calling retrieveServiceTransactions");
      }


      var pathParams = {
        'transactionType': transactionType
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/transactions/service/{transactionType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the singleServiceTransaction operation.
     * @callback module:api/ServiceTransactionsApi~singleServiceTransactionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve service transactions
     * Retrieve a single transaction
     * @param {String} authorization Bearer {auth}
     * @param {module:model/String} transactionType Transaction Type (sale, purchase, receipts or payment)
     * @param {String} documentCode Document Code
     * @param {module:api/ServiceTransactionsApi~singleServiceTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.singleServiceTransaction = function(authorization, transactionType, documentCode, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling singleServiceTransaction");
      }

      // verify the required parameter 'transactionType' is set
      if (transactionType == undefined || transactionType == null) {
        throw new Error("Missing the required parameter 'transactionType' when calling singleServiceTransaction");
      }

      // verify the required parameter 'documentCode' is set
      if (documentCode == undefined || documentCode == null) {
        throw new Error("Missing the required parameter 'documentCode' when calling singleServiceTransaction");
      }


      var pathParams = {
        'transactionType': transactionType,
        'documentCode': documentCode
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/transactions/service/{transactionType}/{documentCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionServicePayment operation.
     * @callback module:api/ServiceTransactionsApi~transactionServicePaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentTransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param {String} authorization Bearer {auth}
     * @param {module:model/PaymentTransactionIn} body Transaction Message
     * @param {module:api/ServiceTransactionsApi~transactionServicePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentTransactionOut}
     */
    this.transactionServicePayment = function(authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling transactionServicePayment");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling transactionServicePayment");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PaymentTransactionOut;

      return this.apiClient.callApi(
        '/transactions?service-payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionServiceReceipt operation.
     * @callback module:api/ServiceTransactionsApi~transactionServiceReceiptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceiptTransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param {String} authorization Bearer {auth}
     * @param {module:model/ReceiptTransactionIn} body Transaction Message
     * @param {module:api/ServiceTransactionsApi~transactionServiceReceiptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceiptTransactionOut}
     */
    this.transactionServiceReceipt = function(authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling transactionServiceReceipt");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling transactionServiceReceipt");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReceiptTransactionOut;

      return this.apiClient.callApi(
        '/transactions?service-receipt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionServiceSales operation.
     * @callback module:api/ServiceTransactionsApi~transactionServiceSalesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseTransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param {String} authorization Bearer {auth}
     * @param {module:model/PurchaseTransactionIn} body Transaction Message
     * @param {module:api/ServiceTransactionsApi~transactionServiceSalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseTransactionOut}
     */
    this.transactionServiceSales = function(authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling transactionServiceSales");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling transactionServiceSales");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PurchaseTransactionOut;

      return this.apiClient.callApi(
        '/transactions?service-purchase', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionServiceStateTransaction operation.
     * @callback module:api/ServiceTransactionsApi~transactionServiceStateTransactionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transaction State Transition
     * Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
     * @param {String} authorization Bearer {auth}
     * @param {module:model/String} transactionType Transaction Type (sale, purchase, receipts or payment)
     * @param {String} documentCode Document Code
     * @param {module:model/StateTransition} body Transaction Message
     * @param {module:api/ServiceTransactionsApi~transactionServiceStateTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.transactionServiceStateTransaction = function(authorization, transactionType, documentCode, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling transactionServiceStateTransaction");
      }

      // verify the required parameter 'transactionType' is set
      if (transactionType == undefined || transactionType == null) {
        throw new Error("Missing the required parameter 'transactionType' when calling transactionServiceStateTransaction");
      }

      // verify the required parameter 'documentCode' is set
      if (documentCode == undefined || documentCode == null) {
        throw new Error("Missing the required parameter 'documentCode' when calling transactionServiceStateTransaction");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling transactionServiceStateTransaction");
      }


      var pathParams = {
        'transactionType': transactionType,
        'documentCode': documentCode
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/transactions/service/{transactionType}/{documentCode}/stateTransitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionServicesSales operation.
     * @callback module:api/ServiceTransactionsApi~transactionServicesSalesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SalesTransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param {String} authorization Bearer {auth}
     * @param {module:model/SalesTransactionIn} body Transaction Message
     * @param {module:api/ServiceTransactionsApi~transactionServicesSalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SalesTransactionOut}
     */
    this.transactionServicesSales = function(authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling transactionServicesSales");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling transactionServicesSales");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SalesTransactionOut;

      return this.apiClient.callApi(
        '/transactions?service-sales', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
