/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Message', 'model/TransactionForGoodsIn', 'model/TransactionForGoodsOut', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Message'), require('../model/TransactionForGoodsIn'), require('../model/TransactionForGoodsOut'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.AvaTaxBrazil) {
      root.AvaTaxBrazil = {};
    }
    root.AvaTaxBrazil.GoodsCalculationsApi = factory(root.AvaTaxBrazil.ApiClient, root.AvaTaxBrazil.Message, root.AvaTaxBrazil.TransactionForGoodsIn, root.AvaTaxBrazil.TransactionForGoodsOut, root.AvaTaxBrazil.ValidationError);
  }
}(this, function(ApiClient, Message, TransactionForGoodsIn, TransactionForGoodsOut, ValidationError) {
  'use strict';

  /**
   * GoodsCalculations service.
   * @module api/GoodsCalculationsApi
   * @version 1.0
   */

  /**
   * Constructs a new GoodsCalculationsApi. 
   * @alias module:api/GoodsCalculationsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the calculationGood operation.
     * @callback module:api/GoodsCalculationsApi~calculationGoodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionForGoodsOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculation Method
     * This method has more the one operation model, (a) simple calculation, this mode has a minimal validation and mandatory field, only enough for calc; (b) full calculation, simulation, this mode the system will check all atributes and calc all taxes for that transaction; (c) full calculation, starting process to transform this this request into transaction (for NFe, NFCe, CT-e need government authorization); (d) ASIS, the sistem receive the message, store and try get authorization, model valid only form NFe, NFCe and CT-e. 
     * @param {String} authorization Bearer {auth}
     * @param {module:model/TransactionForGoodsIn} body Transaction Message
     * @param {Object} opts Optional parameters
     * @param {String} opts.noPersist Do not save this calculation
     * @param {module:api/GoodsCalculationsApi~calculationGoodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionForGoodsOut}
     */
    this.calculationGood = function(authorization, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling calculationGood");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling calculationGood");
      }


      var pathParams = {
      };
      var queryParams = {
        'noPersist': opts['noPersist']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TransactionForGoodsOut;

      return this.apiClient.callApi(
        '/calculations?goods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
