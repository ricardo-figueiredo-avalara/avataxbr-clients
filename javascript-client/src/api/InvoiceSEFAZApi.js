/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Message', 'model/SefazDisableRangeIn', 'model/SefazInvoiceBasicStatus', 'model/SefazItDeleteIn', 'model/SefazItGetOut', 'model/SefazItPutIn', 'model/SefazPostOut', 'model/TransactionForSefazGoods', 'model/TransactionForSefazGoodsList', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Message'), require('../model/SefazDisableRangeIn'), require('../model/SefazInvoiceBasicStatus'), require('../model/SefazItDeleteIn'), require('../model/SefazItGetOut'), require('../model/SefazItPutIn'), require('../model/SefazPostOut'), require('../model/TransactionForSefazGoods'), require('../model/TransactionForSefazGoodsList'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.AvaTaxBrazil) {
      root.AvaTaxBrazil = {};
    }
    root.AvaTaxBrazil.InvoiceSEFAZApi = factory(root.AvaTaxBrazil.ApiClient, root.AvaTaxBrazil.Message, root.AvaTaxBrazil.SefazDisableRangeIn, root.AvaTaxBrazil.SefazInvoiceBasicStatus, root.AvaTaxBrazil.SefazItDeleteIn, root.AvaTaxBrazil.SefazItGetOut, root.AvaTaxBrazil.SefazItPutIn, root.AvaTaxBrazil.SefazPostOut, root.AvaTaxBrazil.TransactionForSefazGoods, root.AvaTaxBrazil.TransactionForSefazGoodsList, root.AvaTaxBrazil.ValidationError);
  }
}(this, function(ApiClient, Message, SefazDisableRangeIn, SefazInvoiceBasicStatus, SefazItDeleteIn, SefazItGetOut, SefazItPutIn, SefazPostOut, TransactionForSefazGoods, TransactionForSefazGoodsList, ValidationError) {
  'use strict';

  /**
   * InvoiceSEFAZ service.
   * @module api/InvoiceSEFAZApi
   * @version 1.0
   */

  /**
   * Constructs a new InvoiceSEFAZApi. 
   * @alias module:api/InvoiceSEFAZApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the invoicesSefazDelete operation.
     * @callback module:api/InvoiceSEFAZApi~invoicesSefazDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SefazInvoiceBasicStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable Range e-Invoice
     * Send disable range of NFes to SEFAZ 
     * @param {String} authorization Bearer {auth}
     * @param {module:model/SefazDisableRangeIn} body Disable Range e-Invoice
     * @param {module:api/InvoiceSEFAZApi~invoicesSefazDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SefazInvoiceBasicStatus}
     */
    this.invoicesSefazDelete = function(authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling invoicesSefazDelete");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling invoicesSefazDelete");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SefazInvoiceBasicStatus;

      return this.apiClient.callApi(
        '/invoices/sefaz', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoicesSefazKeyDelete operation.
     * @callback module:api/InvoiceSEFAZApi~invoicesSefazKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SefazInvoiceBasicStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel invoice
     * Cancel the invoice
     * @param {String} authorization Bearer {auth}
     * @param {String} key Invoice Key
     * @param {module:model/SefazItDeleteIn} body Cancel Message
     * @param {module:api/InvoiceSEFAZApi~invoicesSefazKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SefazInvoiceBasicStatus}
     */
    this.invoicesSefazKeyDelete = function(authorization, key, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling invoicesSefazKeyDelete");
      }

      // verify the required parameter 'key' is set
      if (key == undefined || key == null) {
        throw new Error("Missing the required parameter 'key' when calling invoicesSefazKeyDelete");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling invoicesSefazKeyDelete");
      }


      var pathParams = {
        'key': key
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SefazInvoiceBasicStatus;

      return this.apiClient.callApi(
        '/invoices/sefaz/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoicesSefazKeyGet operation.
     * @callback module:api/InvoiceSEFAZApi~invoicesSefazKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SefazItGetOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve invoice
     * Retrieve the invoice
     * @param {String} authorization Bearer {auth}
     * @param {String} key Invoice Key
     * @param {module:api/InvoiceSEFAZApi~invoicesSefazKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SefazItGetOut}
     */
    this.invoicesSefazKeyGet = function(authorization, key, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling invoicesSefazKeyGet");
      }

      // verify the required parameter 'key' is set
      if (key == undefined || key == null) {
        throw new Error("Missing the required parameter 'key' when calling invoicesSefazKeyGet");
      }


      var pathParams = {
        'key': key
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SefazItGetOut;

      return this.apiClient.callApi(
        '/invoices/sefaz/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoicesSefazKeyLookupGet operation.
     * @callback module:api/InvoiceSEFAZApi~invoicesSefazKeyLookupGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionForSefazGoodsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve invoice
     * Retrieve the invoice
     * @param {String} authorization Bearer {auth}
     * @param {String} key Invoice Key
     * @param {module:api/InvoiceSEFAZApi~invoicesSefazKeyLookupGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionForSefazGoodsList}
     */
    this.invoicesSefazKeyLookupGet = function(authorization, key, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling invoicesSefazKeyLookupGet");
      }

      // verify the required parameter 'key' is set
      if (key == undefined || key == null) {
        throw new Error("Missing the required parameter 'key' when calling invoicesSefazKeyLookupGet");
      }


      var pathParams = {
        'key': key
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TransactionForSefazGoodsList;

      return this.apiClient.callApi(
        '/invoices/sefaz/{key}/lookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoicesSefazKeyPut operation.
     * @callback module:api/InvoiceSEFAZApi~invoicesSefazKeyPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SefazInvoiceBasicStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fix Letter
     * Fix Letter
     * @param {String} authorization Bearer {auth}
     * @param {String} key Invoice Key
     * @param {module:model/SefazItPutIn} body Fix Message
     * @param {module:api/InvoiceSEFAZApi~invoicesSefazKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SefazInvoiceBasicStatus}
     */
    this.invoicesSefazKeyPut = function(authorization, key, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling invoicesSefazKeyPut");
      }

      // verify the required parameter 'key' is set
      if (key == undefined || key == null) {
        throw new Error("Missing the required parameter 'key' when calling invoicesSefazKeyPut");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling invoicesSefazKeyPut");
      }


      var pathParams = {
        'key': key
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SefazInvoiceBasicStatus;

      return this.apiClient.callApi(
        '/invoices/sefaz/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoicesSefazPost operation.
     * @callback module:api/InvoiceSEFAZApi~invoicesSefazPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SefazPostOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an e-Invoice
     * Send a invoice to SEFAZ 
     * @param {String} authorization Bearer {auth}
     * @param {Array.<module:model/TransactionForSefazGoods>} body Invoices
     * @param {module:api/InvoiceSEFAZApi~invoicesSefazPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SefazPostOut}
     */
    this.invoicesSefazPost = function(authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling invoicesSefazPost");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling invoicesSefazPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SefazPostOut;

      return this.apiClient.callApi(
        '/invoices/sefaz', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invoicesSefazStatusGet operation.
     * @callback module:api/InvoiceSEFAZApi~invoicesSefazStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Status of SEFAZ Server
     * Retrieve Status of SEFAZ Server
     * @param {String} authorization Bearer {auth}
     * @param {module:api/InvoiceSEFAZApi~invoicesSefazStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.invoicesSefazStatusGet = function(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling invoicesSefazStatusGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/invoices/sefaz/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
