/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Message', 'model/PaymentTransactionIn', 'model/PaymentTransactionOut', 'model/PurchaseTransactionIn', 'model/PurchaseTransactionOut', 'model/ReceiptTransactionIn', 'model/ReceiptTransactionOut', 'model/SalesTransactionIn', 'model/SalesTransactionOut', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Message'), require('../model/PaymentTransactionIn'), require('../model/PaymentTransactionOut'), require('../model/PurchaseTransactionIn'), require('../model/PurchaseTransactionOut'), require('../model/ReceiptTransactionIn'), require('../model/ReceiptTransactionOut'), require('../model/SalesTransactionIn'), require('../model/SalesTransactionOut'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.AvaTaxBrazil) {
      root.AvaTaxBrazil = {};
    }
    root.AvaTaxBrazil.ServiceCalculationsApi = factory(root.AvaTaxBrazil.ApiClient, root.AvaTaxBrazil.Message, root.AvaTaxBrazil.PaymentTransactionIn, root.AvaTaxBrazil.PaymentTransactionOut, root.AvaTaxBrazil.PurchaseTransactionIn, root.AvaTaxBrazil.PurchaseTransactionOut, root.AvaTaxBrazil.ReceiptTransactionIn, root.AvaTaxBrazil.ReceiptTransactionOut, root.AvaTaxBrazil.SalesTransactionIn, root.AvaTaxBrazil.SalesTransactionOut, root.AvaTaxBrazil.ValidationError);
  }
}(this, function(ApiClient, Message, PaymentTransactionIn, PaymentTransactionOut, PurchaseTransactionIn, PurchaseTransactionOut, ReceiptTransactionIn, ReceiptTransactionOut, SalesTransactionIn, SalesTransactionOut, ValidationError) {
  'use strict';

  /**
   * ServiceCalculations service.
   * @module api/ServiceCalculationsApi
   * @version 1.0
   */

  /**
   * Constructs a new ServiceCalculationsApi. 
   * @alias module:api/ServiceCalculationsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet operation.
     * @callback module:api/ServiceCalculationsApi~calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve transactions
     * Retrieve a single transaction
     * @param {String} authorization Bearer {auth}
     * @param {String} accountId Account ID
     * @param {String} companyCode Company Code
     * @param {module:model/String} transactionType Transaction Type (sale, purchase, receipts or payment)
     * @param {String} documentCode Document Code
     * @param {module:api/ServiceCalculationsApi~calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet = function(authorization, accountId, companyCode, transactionType, documentCode, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
      }

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw new Error("Missing the required parameter 'accountId' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
      }

      // verify the required parameter 'companyCode' is set
      if (companyCode == undefined || companyCode == null) {
        throw new Error("Missing the required parameter 'companyCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
      }

      // verify the required parameter 'transactionType' is set
      if (transactionType == undefined || transactionType == null) {
        throw new Error("Missing the required parameter 'transactionType' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
      }

      // verify the required parameter 'documentCode' is set
      if (documentCode == undefined || documentCode == null) {
        throw new Error("Missing the required parameter 'documentCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet");
      }


      var pathParams = {
        'accountId': accountId,
        'companyCode': companyCode,
        'transactionType': transactionType,
        'documentCode': documentCode
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost operation.
     * @callback module:api/ServiceCalculationsApi~calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Promote a calculation to transaction
     * Promote a calculation to transaction
     * @param {String} authorization Bearer {auth}
     * @param {String} accountId Account ID
     * @param {String} companyCode Company Code
     * @param {module:model/String} transactionType Transaction Type (sale, purchase, receipts or payment)
     * @param {String} documentCode Document Code
     * @param {module:api/ServiceCalculationsApi~calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost = function(authorization, accountId, companyCode, transactionType, documentCode, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost");
      }

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw new Error("Missing the required parameter 'accountId' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost");
      }

      // verify the required parameter 'companyCode' is set
      if (companyCode == undefined || companyCode == null) {
        throw new Error("Missing the required parameter 'companyCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost");
      }

      // verify the required parameter 'transactionType' is set
      if (transactionType == undefined || transactionType == null) {
        throw new Error("Missing the required parameter 'transactionType' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost");
      }

      // verify the required parameter 'documentCode' is set
      if (documentCode == undefined || documentCode == null) {
        throw new Error("Missing the required parameter 'documentCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost");
      }


      var pathParams = {
        'accountId': accountId,
        'companyCode': companyCode,
        'transactionType': transactionType,
        'documentCode': documentCode
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet operation.
     * @callback module:api/ServiceCalculationsApi~calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve transactions
     * Retrieve a list of transactions
     * @param {String} authorization Bearer {auth}
     * @param {String} accountId Account ID
     * @param {String} companyCode Company Code
     * @param {module:model/String} transactionType Transaction Type (sale, purchase, receipts or payment)
     * @param {module:api/ServiceCalculationsApi~calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet = function(authorization, accountId, companyCode, transactionType, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");
      }

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw new Error("Missing the required parameter 'accountId' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");
      }

      // verify the required parameter 'companyCode' is set
      if (companyCode == undefined || companyCode == null) {
        throw new Error("Missing the required parameter 'companyCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");
      }

      // verify the required parameter 'transactionType' is set
      if (transactionType == undefined || transactionType == null) {
        throw new Error("Missing the required parameter 'transactionType' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet");
      }


      var pathParams = {
        'accountId': accountId,
        'companyCode': companyCode,
        'transactionType': transactionType
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/calculations/account/{accountId}/company/{companyCode}/{transactionType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calculationsservicePaymentPost operation.
     * @callback module:api/ServiceCalculationsApi~calculationsservicePaymentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentTransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param {String} authorization Bearer {auth}
     * @param {module:model/PaymentTransactionIn} body Transaction Message
     * @param {module:api/ServiceCalculationsApi~calculationsservicePaymentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentTransactionOut}
     */
    this.calculationsservicePaymentPost = function(authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling calculationsservicePaymentPost");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling calculationsservicePaymentPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PaymentTransactionOut;

      return this.apiClient.callApi(
        '/calculations?service-payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calculationsservicePurchasePost operation.
     * @callback module:api/ServiceCalculationsApi~calculationsservicePurchasePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseTransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param {String} authorization Bearer {auth}
     * @param {module:model/PurchaseTransactionIn} body Transaction Message
     * @param {module:api/ServiceCalculationsApi~calculationsservicePurchasePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseTransactionOut}
     */
    this.calculationsservicePurchasePost = function(authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling calculationsservicePurchasePost");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling calculationsservicePurchasePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PurchaseTransactionOut;

      return this.apiClient.callApi(
        '/calculations?service-purchase', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calculationsserviceReceiptPost operation.
     * @callback module:api/ServiceCalculationsApi~calculationsserviceReceiptPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceiptTransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param {String} authorization Bearer {auth}
     * @param {module:model/ReceiptTransactionIn} body Transaction Message
     * @param {module:api/ServiceCalculationsApi~calculationsserviceReceiptPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceiptTransactionOut}
     */
    this.calculationsserviceReceiptPost = function(authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling calculationsserviceReceiptPost");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling calculationsserviceReceiptPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReceiptTransactionOut;

      return this.apiClient.callApi(
        '/calculations?service-receipt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calculationsserviceSalesPost operation.
     * @callback module:api/ServiceCalculationsApi~calculationsserviceSalesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SalesTransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
     * @param {String} authorization Bearer {auth}
     * @param {module:model/SalesTransactionIn} body Transaction Message
     * @param {module:api/ServiceCalculationsApi~calculationsserviceSalesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SalesTransactionOut}
     */
    this.calculationsserviceSalesPost = function(authorization, body, callback) {
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling calculationsserviceSalesPost");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling calculationsserviceSalesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SalesTransactionOut;

      return this.apiClient.callApi(
        '/calculations?service-sales', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
