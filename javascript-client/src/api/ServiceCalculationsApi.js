/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Message', 'model/PaymentTransactionIn', 'model/PaymentTransactionOut', 'model/PurchaseTransactionIn', 'model/PurchaseTransactionOut', 'model/ReceiptTransactionIn', 'model/ReceiptTransactionOut', 'model/SalesTransactionIn', 'model/SalesTransactionOut', 'model/TransactionForGoodsIn', 'model/ValidationError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Message'), require('../model/PaymentTransactionIn'), require('../model/PaymentTransactionOut'), require('../model/PurchaseTransactionIn'), require('../model/PurchaseTransactionOut'), require('../model/ReceiptTransactionIn'), require('../model/ReceiptTransactionOut'), require('../model/SalesTransactionIn'), require('../model/SalesTransactionOut'), require('../model/TransactionForGoodsIn'), require('../model/ValidationError'));
  } else {
    // Browser globals (root is window)
    if (!root.AvaTaxBrazil) {
      root.AvaTaxBrazil = {};
    }
    root.AvaTaxBrazil.ServiceCalculationsApi = factory(root.AvaTaxBrazil.ApiClient, root.AvaTaxBrazil.Message, root.AvaTaxBrazil.PaymentTransactionIn, root.AvaTaxBrazil.PaymentTransactionOut, root.AvaTaxBrazil.PurchaseTransactionIn, root.AvaTaxBrazil.PurchaseTransactionOut, root.AvaTaxBrazil.ReceiptTransactionIn, root.AvaTaxBrazil.ReceiptTransactionOut, root.AvaTaxBrazil.SalesTransactionIn, root.AvaTaxBrazil.SalesTransactionOut, root.AvaTaxBrazil.TransactionForGoodsIn, root.AvaTaxBrazil.ValidationError);
  }
}(this, function(ApiClient, Message, PaymentTransactionIn, PaymentTransactionOut, PurchaseTransactionIn, PurchaseTransactionOut, ReceiptTransactionIn, ReceiptTransactionOut, SalesTransactionIn, SalesTransactionOut, TransactionForGoodsIn, ValidationError) {
  'use strict';

  /**
   * ServiceCalculations service.
   * @module api/ServiceCalculationsApi
   * @version 1.0
   */

  /**
   * Constructs a new ServiceCalculationsApi. 
   * @alias module:api/ServiceCalculationsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the calculationServicePayment operation.
     * @callback module:api/ServiceCalculationsApi~calculationServicePaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentTransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param {String} authorization Bearer {auth}
     * @param {module:model/PaymentTransactionIn} body Transaction Message
     * @param {Object} opts Optional parameters
     * @param {String} opts.noPersist Do not save this calculation
     * @param {module:api/ServiceCalculationsApi~calculationServicePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentTransactionOut}
     */
    this.calculationServicePayment = function(authorization, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling calculationServicePayment");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling calculationServicePayment");
      }


      var pathParams = {
      };
      var queryParams = {
        'noPersist': opts['noPersist']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PaymentTransactionOut;

      return this.apiClient.callApi(
        '/calculations?service-payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calculationServicePurchase operation.
     * @callback module:api/ServiceCalculationsApi~calculationServicePurchaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseTransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param {String} authorization Bearer {auth}
     * @param {module:model/PurchaseTransactionIn} body Transaction Message
     * @param {Object} opts Optional parameters
     * @param {String} opts.noPersist Do not save this calculation
     * @param {module:api/ServiceCalculationsApi~calculationServicePurchaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseTransactionOut}
     */
    this.calculationServicePurchase = function(authorization, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling calculationServicePurchase");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling calculationServicePurchase");
      }


      var pathParams = {
      };
      var queryParams = {
        'noPersist': opts['noPersist']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PurchaseTransactionOut;

      return this.apiClient.callApi(
        '/calculations?service-purchase', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calculationServiceReceipt operation.
     * @callback module:api/ServiceCalculationsApi~calculationServiceReceiptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceiptTransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param {String} authorization Bearer {auth}
     * @param {module:model/ReceiptTransactionIn} body Transaction Message
     * @param {Object} opts Optional parameters
     * @param {String} opts.noPersist Do not save this calculation
     * @param {module:api/ServiceCalculationsApi~calculationServiceReceiptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceiptTransactionOut}
     */
    this.calculationServiceReceipt = function(authorization, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling calculationServiceReceipt");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling calculationServiceReceipt");
      }


      var pathParams = {
      };
      var queryParams = {
        'noPersist': opts['noPersist']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReceiptTransactionOut;

      return this.apiClient.callApi(
        '/calculations?service-receipt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calculationServiceSales operation.
     * @callback module:api/ServiceCalculationsApi~calculationServiceSalesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SalesTransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
     * @param {String} authorization Bearer {auth}
     * @param {module:model/SalesTransactionIn} body Transaction Message
     * @param {Object} opts Optional parameters
     * @param {String} opts.noPersist Do not save this calculation
     * @param {module:api/ServiceCalculationsApi~calculationServiceSalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SalesTransactionOut}
     */
    this.calculationServiceSales = function(authorization, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling calculationServiceSales");
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling calculationServiceSales");
      }


      var pathParams = {
      };
      var queryParams = {
        'noPersist': opts['noPersist']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SalesTransactionOut;

      return this.apiClient.callApi(
        '/calculations?service-sales', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the convertServiceCalculatioToTransaction operation.
     * @callback module:api/ServiceCalculationsApi~convertServiceCalculatioToTransactionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Promote a calculation to transaction
     * Promote a calculation to transaction
     * @param {String} authorization Bearer {auth}
     * @param {module:model/String} transactionType Transaction Type (sale, purchase, receipts or payment)
     * @param {String} documentCode Document Code
     * @param {module:api/ServiceCalculationsApi~convertServiceCalculatioToTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.convertServiceCalculatioToTransaction = function(authorization, transactionType, documentCode, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling convertServiceCalculatioToTransaction");
      }

      // verify the required parameter 'transactionType' is set
      if (transactionType == undefined || transactionType == null) {
        throw new Error("Missing the required parameter 'transactionType' when calling convertServiceCalculatioToTransaction");
      }

      // verify the required parameter 'documentCode' is set
      if (documentCode == undefined || documentCode == null) {
        throw new Error("Missing the required parameter 'documentCode' when calling convertServiceCalculatioToTransaction");
      }


      var pathParams = {
        'transactionType': transactionType,
        'documentCode': documentCode
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/calculations/service/{transactionType}/{documentCode}/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveGoodsTransactions operation.
     * @callback module:api/ServiceCalculationsApi~retrieveGoodsTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransactionForGoodsIn>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve goods transactions
     * Retrieve a list of transactions
     * @param {String} authorization Bearer {auth}
     * @param {module:model/String} transactionType Transaction Type
     * @param {module:api/ServiceCalculationsApi~retrieveGoodsTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransactionForGoodsIn>}
     */
    this.retrieveGoodsTransactions = function(authorization, transactionType, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling retrieveGoodsTransactions");
      }

      // verify the required parameter 'transactionType' is set
      if (transactionType == undefined || transactionType == null) {
        throw new Error("Missing the required parameter 'transactionType' when calling retrieveGoodsTransactions");
      }


      var pathParams = {
        'transactionType': transactionType
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TransactionForGoodsIn];

      return this.apiClient.callApi(
        '/calculations/goods/{transactionType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveServiceTransactionDocument operation.
     * @callback module:api/ServiceCalculationsApi~retrieveServiceTransactionDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve service transactions
     * Retrieve a single transaction
     * @param {String} authorization Bearer {auth}
     * @param {module:model/String} transactionType Transaction Type (sale, purchase, receipts or payment)
     * @param {String} documentCode Document Code
     * @param {module:api/ServiceCalculationsApi~retrieveServiceTransactionDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.retrieveServiceTransactionDocument = function(authorization, transactionType, documentCode, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling retrieveServiceTransactionDocument");
      }

      // verify the required parameter 'transactionType' is set
      if (transactionType == undefined || transactionType == null) {
        throw new Error("Missing the required parameter 'transactionType' when calling retrieveServiceTransactionDocument");
      }

      // verify the required parameter 'documentCode' is set
      if (documentCode == undefined || documentCode == null) {
        throw new Error("Missing the required parameter 'documentCode' when calling retrieveServiceTransactionDocument");
      }


      var pathParams = {
        'transactionType': transactionType,
        'documentCode': documentCode
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/calculations/service/{transactionType}/{documentCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveServiceTransactions operation.
     * @callback module:api/ServiceCalculationsApi~retrieveServiceTransactionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve service transactions
     * Retrieve a list of transactions
     * @param {String} authorization Bearer {auth}
     * @param {module:model/String} transactionType Transaction Type (sale, purchase, receipts or payment)
     * @param {module:api/ServiceCalculationsApi~retrieveServiceTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.retrieveServiceTransactions = function(authorization, transactionType, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling retrieveServiceTransactions");
      }

      // verify the required parameter 'transactionType' is set
      if (transactionType == undefined || transactionType == null) {
        throw new Error("Missing the required parameter 'transactionType' when calling retrieveServiceTransactions");
      }


      var pathParams = {
        'transactionType': transactionType
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/calculations/service/{transactionType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
