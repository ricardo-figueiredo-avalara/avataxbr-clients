/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/NRefRefECF', 'model/NRefRefFarmerNF', 'model/NRefRefNF'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./NRefRefECF'), require('./NRefRefFarmerNF'), require('./NRefRefNF'));
  } else {
    // Browser globals (root is window)
    if (!root.AvaTaxBrazil) {
      root.AvaTaxBrazil = {};
    }
    root.AvaTaxBrazil.NRef = factory(root.AvaTaxBrazil.ApiClient, root.AvaTaxBrazil.NRefRefECF, root.AvaTaxBrazil.NRefRefFarmerNF, root.AvaTaxBrazil.NRefRefNF);
  }
}(this, function(ApiClient, NRefRefECF, NRefRefFarmerNF, NRefRefNF) {
  'use strict';




  /**
   * The NRef model module.
   * @module model/NRef
   * @version 1.0
   */

  /**
   * Constructs a new <code>NRef</code>.
   * Referenced Invoices The invoice can be one of this types, - &#39;refNFe - Eletronic Invoice&#39; - &#39;refCTE - Transport Invoice&#39; - &#39;refECF - Reatail Cupom&#39; - &#39;refNF  - Invoice model 1 or 1A&#39; - &#39;refFarmerNF - farmer invoice&#39; 
   * @alias module:model/NRef
   * @class
   */
  var exports = function() {
    var _this = this;







  };

  /**
   * Constructs a <code>NRef</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/NRef} obj Optional instance to populate.
   * @return {module:model/NRef} The populated <code>NRef</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('refNFe')) {
        obj['refNFe'] = ApiClient.convertToType(data['refNFe'], 'String');
      }
      if (data.hasOwnProperty('refCTe')) {
        obj['refCTe'] = ApiClient.convertToType(data['refCTe'], 'String');
      }
      if (data.hasOwnProperty('refECF')) {
        obj['refECF'] = NRefRefECF.constructFromObject(data['refECF']);
      }
      if (data.hasOwnProperty('refNF')) {
        obj['refNF'] = NRefRefNF.constructFromObject(data['refNF']);
      }
      if (data.hasOwnProperty('refFarmerNF')) {
        obj['refFarmerNF'] = NRefRefFarmerNF.constructFromObject(data['refFarmerNF']);
      }
    }
    return obj;
  }

  /**
   * @member {module:model/NRef.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * @member {String} refNFe
   */
  exports.prototype['refNFe'] = undefined;
  /**
   * @member {String} refCTe
   */
  exports.prototype['refCTe'] = undefined;
  /**
   * @member {module:model/NRefRefECF} refECF
   */
  exports.prototype['refECF'] = undefined;
  /**
   * @member {module:model/NRefRefNF} refNF
   */
  exports.prototype['refNF'] = undefined;
  /**
   * @member {module:model/NRefRefFarmerNF} refFarmerNF
   */
  exports.prototype['refFarmerNF'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "refNFe"
     * @const
     */
    "refNFe": "refNFe",
    /**
     * value: "refCTE"
     * @const
     */
    "refCTE": "refCTE",
    /**
     * value: "refECF"
     * @const
     */
    "refECF": "refECF",
    /**
     * value: "refNF"
     * @const
     */
    "refNF": "refNF",
    /**
     * value: "refFarmerNF"
     * @const
     */
    "refFarmerNF": "refFarmerNF"  };


  return exports;
}));


