/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InstallmentComplete', 'model/PaymentTerms', 'model/WithholdingMode'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./InstallmentComplete'), require('./PaymentTerms'), require('./WithholdingMode'));
  } else {
    // Browser globals (root is window)
    if (!root.Br16Api) {
      root.Br16Api = {};
    }
    root.Br16Api.SalesHeaderOutPayment = factory(root.Br16Api.ApiClient, root.Br16Api.InstallmentComplete, root.Br16Api.PaymentTerms, root.Br16Api.WithholdingMode);
  }
}(this, function(ApiClient, InstallmentComplete, PaymentTerms, WithholdingMode) {
  'use strict';




  /**
   * The SalesHeaderOutPayment model module.
   * @module model/SalesHeaderOutPayment
   * @version 1.0
   */

  /**
   * Constructs a new <code>SalesHeaderOutPayment</code>.
   * @alias module:model/SalesHeaderOutPayment
   * @class
   */
  var exports = function() {
    var _this = this;




  };

  /**
   * Constructs a <code>SalesHeaderOutPayment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SalesHeaderOutPayment} obj Optional instance to populate.
   * @return {module:model/SalesHeaderOutPayment} The populated <code>SalesHeaderOutPayment</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('terms')) {
        obj['terms'] = PaymentTerms.constructFromObject(data['terms']);
      }
      if (data.hasOwnProperty('withholdingMode')) {
        obj['withholdingMode'] = WithholdingMode.constructFromObject(data['withholdingMode']);
      }
      if (data.hasOwnProperty('installments')) {
        obj['installments'] = ApiClient.convertToType(data['installments'], [InstallmentComplete]);
      }
    }
    return obj;
  }

  /**
   * @member {module:model/PaymentTerms} terms
   */
  exports.prototype['terms'] = undefined;
  /**
   * To avoid having to verify multiple attributes from a Invoice at the time of funds collection which subject to Tax Withholding, this attribute will allow a referenced Invoice to be quickly checked for withholdings during the cash transaction. This is an SALES.Transaction attribute to be consisted in the Tax Engine that can be used during the receivable process. The values are enumeration where each letter identify if that tax has been withheld PCC,xxx, PCx, PxC ...
   * @member {module:model/WithholdingMode} withholdingMode
   */
  exports.prototype['withholdingMode'] = undefined;
  /**
   * installments
   * @member {Array.<module:model/InstallmentComplete>} installments
   */
  exports.prototype['installments'] = undefined;



  return exports;
}));


