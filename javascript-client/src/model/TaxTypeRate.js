/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/TaxType'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./TaxType'));
  } else {
    // Browser globals (root is window)
    if (!root.AvaTaxBrazil) {
      root.AvaTaxBrazil = {};
    }
    root.AvaTaxBrazil.TaxTypeRate = factory(root.AvaTaxBrazil.ApiClient, root.AvaTaxBrazil.TaxType);
  }
}(this, function(ApiClient, TaxType) {
  'use strict';




  /**
   * The TaxTypeRate model module.
   * @module model/TaxTypeRate
   * @version 1.0
   */

  /**
   * Constructs a new <code>TaxTypeRate</code>.
   * @alias module:model/TaxTypeRate
   * @class
   * @param taxType {module:model/TaxType} 
   * @param taxModel {module:model/TaxTypeRate.TaxModelEnum} Tax can be calculated by rate or by quantity
   */
  var exports = function(taxType, taxModel) {
    var _this = this;

    _this['taxType'] = taxType;
    _this['taxModel'] = taxModel;




  };

  /**
   * Constructs a <code>TaxTypeRate</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TaxTypeRate} obj Optional instance to populate.
   * @return {module:model/TaxTypeRate} The populated <code>TaxTypeRate</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('taxType')) {
        obj['taxType'] = TaxType.constructFromObject(data['taxType']);
      }
      if (data.hasOwnProperty('taxModel')) {
        obj['taxModel'] = ApiClient.convertToType(data['taxModel'], 'String');
      }
      if (data.hasOwnProperty('rate')) {
        obj['rate'] = ApiClient.convertToType(data['rate'], 'Number');
      }
      if (data.hasOwnProperty('srvAmount')) {
        obj['srvAmount'] = ApiClient.convertToType(data['srvAmount'], 'Number');
      }
      if (data.hasOwnProperty('quantityUnidBase')) {
        obj['quantityUnidBase'] = ApiClient.convertToType(data['quantityUnidBase'], 'String');
      }
      if (data.hasOwnProperty('specializationType')) {
        obj['specializationType'] = ApiClient.convertToType(data['specializationType'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {module:model/TaxType} taxType
   */
  exports.prototype['taxType'] = undefined;
  /**
   * Tax can be calculated by rate or by quantity
   * @member {module:model/TaxTypeRate.TaxModelEnum} taxModel
   */
  exports.prototype['taxModel'] = undefined;
  /**
   * Specific tax rate ex 3.5 (3.5%)
   * @member {Number} rate
   */
  exports.prototype['rate'] = undefined;
  /**
   * Specific tax rate ex 3.5 (3.5%)
   * @member {Number} srvAmount
   */
  exports.prototype['srvAmount'] = undefined;
  /**
   * @member {String} quantityUnidBase
   */
  exports.prototype['quantityUnidBase'] = undefined;
  /**
   * @member {module:model/TaxTypeRate.SpecializationTypeEnum} specializationType
   */
  exports.prototype['specializationType'] = undefined;


  /**
   * Allowed values for the <code>taxModel</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TaxModelEnum = {
    /**
     * value: "rate"
     * @const
     */
    "rate": "rate",
    /**
     * value: "srf"
     * @const
     */
    "srf": "srf"  };

  /**
   * Allowed values for the <code>specializationType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SpecializationTypeEnum = {
    /**
     * value: "basic"
     * @const
     */
    "basic": "basic",
    /**
     * value: "monophase"
     * @const
     */
    "monophase": "monophase",
    /**
     * value: "taxSubstitution"
     * @const
     */
    "taxSubstitution": "taxSubstitution"  };


  return exports;
}));


