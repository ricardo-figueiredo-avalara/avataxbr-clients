/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Address', 'model/LocationSecondaryStateTaxId', 'model/StateEnum'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Address'), require('./LocationSecondaryStateTaxId'), require('./StateEnum'));
  } else {
    // Browser globals (root is window)
    if (!root.Br16Api) {
      root.Br16Api = {};
    }
    root.Br16Api.Location = factory(root.Br16Api.ApiClient, root.Br16Api.Address, root.Br16Api.LocationSecondaryStateTaxId, root.Br16Api.StateEnum);
  }
}(this, function(ApiClient, Address, LocationSecondaryStateTaxId, StateEnum) {
  'use strict';




  /**
   * The Location model module.
   * @module model/Location
   * @version 1.0
   */

  /**
   * Constructs a new <code>Location</code>.
   * @alias module:model/Location
   * @class
   * @implements module:model/Address
   * @param zipcode {} Brazilian Zip Code
   * @param companyId {String} Company ID
   * @param code {String} this property identify the location, it is unique for this company
   * @param type {module:model/Location.TypeEnum} this property identify the location, it is unique for this company
   */
  var exports = function(zipcode, companyId, code, type) {
    var _this = this;

    Address.call(_this, zipcode);
    _this['companyId'] = companyId;
    _this['code'] = code;
    _this['type'] = type;








  };

  /**
   * Constructs a <code>Location</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Location} obj Optional instance to populate.
   * @return {module:model/Location} The populated <code>Location</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      Address.constructFromObject(data, obj);
      if (data.hasOwnProperty('companyId')) {
        obj['companyId'] = ApiClient.convertToType(data['companyId'], 'String');
      }
      if (data.hasOwnProperty('code')) {
        obj['code'] = ApiClient.convertToType(data['code'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('email')) {
        obj['email'] = ApiClient.convertToType(data['email'], 'String');
      }
      if (data.hasOwnProperty('federalTaxId')) {
        obj['federalTaxId'] = ApiClient.convertToType(data['federalTaxId'], 'String');
      }
      if (data.hasOwnProperty('stateTaxId')) {
        obj['stateTaxId'] = ApiClient.convertToType(data['stateTaxId'], 'String');
      }
      if (data.hasOwnProperty('secondaryStateTaxId')) {
        obj['secondaryStateTaxId'] = ApiClient.convertToType(data['secondaryStateTaxId'], [LocationSecondaryStateTaxId]);
      }
      if (data.hasOwnProperty('cityTaxId')) {
        obj['cityTaxId'] = ApiClient.convertToType(data['cityTaxId'], 'String');
      }
      if (data.hasOwnProperty('suframa')) {
        obj['suframa'] = ApiClient.convertToType(data['suframa'], 'String');
      }
      if (data.hasOwnProperty('mainActivity')) {
        obj['mainActivity'] = ApiClient.convertToType(data['mainActivity'], 'String');
      }
      if (data.hasOwnProperty('nfseProcessModel')) {
        obj['nfseProcessModel'] = ApiClient.convertToType(data['nfseProcessModel'], 'String');
      }
    }
    return obj;
  }

  /**
   * Company ID
   * @member {String} companyId
   */
  exports.prototype['companyId'] = undefined;
  /**
   * this property identify the location, it is unique for this company
   * @member {String} code
   */
  exports.prototype['code'] = undefined;
  /**
   * this property identify the location, it is unique for this company
   * @member {module:model/Location.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Email
   * @member {String} email
   */
  exports.prototype['email'] = undefined;
  /**
   * Federal tax id, CNPJ or CPF
   * @member {String} federalTaxId
   */
  exports.prototype['federalTaxId'] = undefined;
  /**
   * state tax id for this location
   * @member {String} stateTaxId
   */
  exports.prototype['stateTaxId'] = undefined;
  /**
   * @member {Array.<module:model/LocationSecondaryStateTaxId>} secondaryStateTaxId
   */
  exports.prototype['secondaryStateTaxId'] = undefined;
  /**
   * City Tax ID
   * @member {String} cityTaxId
   */
  exports.prototype['cityTaxId'] = undefined;
  /**
   * @member {String} suframa
   */
  exports.prototype['suframa'] = undefined;
  /**
   * Main location activity
   * @member {module:model/Location.MainActivityEnum} mainActivity
   */
  exports.prototype['mainActivity'] = undefined;
  /**
   * - 'edi' # City hall has web service and the integration is automatic - 'xml' # Create RPS specific to City, bat does not have webservice integration - 'rps' # Create a generic RPS, NF is by hands 
   * @member {module:model/Location.NfseProcessModelEnum} nfseProcessModel
   */
  exports.prototype['nfseProcessModel'] = undefined;

  // Implement Address interface:
  /**
   * Street Name
   * @member {String} street
   */
exports.prototype['street'] = undefined;

  /**
   * Neighborhood Name
   * @member {String} neighborhood
   */
exports.prototype['neighborhood'] = undefined;

  /**
   * Brazilian Zip Code
   * @member {String} zipcode
   */
exports.prototype['zipcode'] = undefined;

  /**
   * City Code (IBGE)
   * @member {String} cityCode
   */
exports.prototype['cityCode'] = undefined;

  /**
   * City Name
   * @member {String} cityName
   */
exports.prototype['cityName'] = undefined;

  /**
   * @member {module:model/StateEnum} state
   */
exports.prototype['state'] = undefined;

  /**
   * Country Code
   * @member {String} countryCode
   * @default '0'
   */
exports.prototype['countryCode'] = '0';

  /**
   * Use ISO 3166-1 alpha-3 codes
   * @member {String} country
   * @default 'BRA'
   */
exports.prototype['country'] = 'BRA';


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "ShipFrom"
     * @const
     */
    "ShipFrom": "ShipFrom",
    /**
     * value: "ShipTo"
     * @const
     */
    "ShipTo": "ShipTo",
    /**
     * value: "ServiceRendered"
     * @const
     */
    "ServiceRendered": "ServiceRendered"  };

  /**
   * Allowed values for the <code>mainActivity</code> property.
   * @enum {String}
   * @readonly
   */
  exports.MainActivityEnum = {
    /**
     * value: "commerce"
     * @const
     */
    "commerce": "commerce",
    /**
     * value: "industry"
     * @const
     */
    "industry": "industry",
    /**
     * value: "service"
     * @const
     */
    "service": "service"  };

  /**
   * Allowed values for the <code>nfseProcessModel</code> property.
   * @enum {String}
   * @readonly
   */
  exports.NfseProcessModelEnum = {
    /**
     * value: "edi"
     * @const
     */
    "edi": "edi",
    /**
     * value: "xml"
     * @const
     */
    "xml": "xml",
    /**
     * value: "rps"
     * @const
     */
    "rps": "rps"  };


  return exports;
}));


