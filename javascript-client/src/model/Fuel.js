/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FuelCide', 'model/FuelPumpNumber', 'model/StateEnum'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./FuelCide'), require('./FuelPumpNumber'), require('./StateEnum'));
  } else {
    // Browser globals (root is window)
    if (!root.AvaTaxBrazil) {
      root.AvaTaxBrazil = {};
    }
    root.AvaTaxBrazil.Fuel = factory(root.AvaTaxBrazil.ApiClient, root.AvaTaxBrazil.FuelCide, root.AvaTaxBrazil.FuelPumpNumber, root.AvaTaxBrazil.StateEnum);
  }
}(this, function(ApiClient, FuelCide, FuelPumpNumber, StateEnum) {
  'use strict';




  /**
   * The Fuel model module.
   * @module model/Fuel
   * @version 1.0
   */

  /**
   * Constructs a new <code>Fuel</code>.
   * @alias module:model/Fuel
   * @class
   * @param prodANPCode {String} 
   * @param stateCodeOfUndUser {module:model/StateEnum} state where fuel was used
   */
  var exports = function(prodANPCode, stateCodeOfUndUser) {
    var _this = this;

    _this['prodANPCode'] = prodANPCode;



    _this['stateCodeOfUndUser'] = stateCodeOfUndUser;


  };

  /**
   * Constructs a <code>Fuel</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Fuel} obj Optional instance to populate.
   * @return {module:model/Fuel} The populated <code>Fuel</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('prodANPCode')) {
        obj['prodANPCode'] = ApiClient.convertToType(data['prodANPCode'], 'String');
      }
      if (data.hasOwnProperty('perMixGN')) {
        obj['perMixGN'] = ApiClient.convertToType(data['perMixGN'], 'Number');
      }
      if (data.hasOwnProperty('authorizationCodeCODIF')) {
        obj['authorizationCodeCODIF'] = ApiClient.convertToType(data['authorizationCodeCODIF'], 'String');
      }
      if (data.hasOwnProperty('quantityOnRoomTemperature')) {
        obj['quantityOnRoomTemperature'] = ApiClient.convertToType(data['quantityOnRoomTemperature'], 'Number');
      }
      if (data.hasOwnProperty('stateCodeOfUndUser')) {
        obj['stateCodeOfUndUser'] = StateEnum.constructFromObject(data['stateCodeOfUndUser']);
      }
      if (data.hasOwnProperty('cide')) {
        obj['cide'] = FuelCide.constructFromObject(data['cide']);
      }
      if (data.hasOwnProperty('pumpNumber')) {
        obj['pumpNumber'] = FuelPumpNumber.constructFromObject(data['pumpNumber']);
      }
    }
    return obj;
  }

  /**
   * @member {String} prodANPCode
   */
  exports.prototype['prodANPCode'] = undefined;
  /**
   * percentage of natural gas (GLP)
   * @member {Number} perMixGN
   */
  exports.prototype['perMixGN'] = undefined;
  /**
   * @member {String} authorizationCodeCODIF
   */
  exports.prototype['authorizationCodeCODIF'] = undefined;
  /**
   * This decimal 12 integers and 0 to 4 decimals Quantidade de combustível faturada à temperatura ambiente. Informar quando a quantidade faturada informada no campo qCom (I10) tiver sido ajustada para uma temperatura diferente da ambiente. 
   * @member {Number} quantityOnRoomTemperature
   */
  exports.prototype['quantityOnRoomTemperature'] = undefined;
  /**
   * state where fuel was used
   * @member {module:model/StateEnum} stateCodeOfUndUser
   */
  exports.prototype['stateCodeOfUndUser'] = undefined;
  /**
   * @member {module:model/FuelCide} cide
   */
  exports.prototype['cide'] = undefined;
  /**
   * @member {module:model/FuelPumpNumber} pumpNumber
   */
  exports.prototype['pumpNumber'] = undefined;



  return exports;
}));


