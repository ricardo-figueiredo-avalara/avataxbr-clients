/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LineForGoodsAdi', 'model/StateEnum'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./LineForGoodsAdi'), require('./StateEnum'));
  } else {
    // Browser globals (root is window)
    if (!root.AvaTaxBrazil) {
      root.AvaTaxBrazil = {};
    }
    root.AvaTaxBrazil.LineForGoodsDi = factory(root.AvaTaxBrazil.ApiClient, root.AvaTaxBrazil.LineForGoodsAdi, root.AvaTaxBrazil.StateEnum);
  }
}(this, function(ApiClient, LineForGoodsAdi, StateEnum) {
  'use strict';




  /**
   * The LineForGoodsDi model module.
   * @module model/LineForGoodsDi
   * @version 1.0
   */

  /**
   * Constructs a new <code>LineForGoodsDi</code>.
   * @alias module:model/LineForGoodsDi
   * @class
   * @param diNumber {String} Import declaration number, DI/DSI/DA/DRI-E (DI/DSI/DA/DRI-E)
   * @param registerDateDI {Date} Register date of import declaration number, DI/DSI/DA/DRI-E (DI/DSI/DA/DRI-E)
   * @param clearanceSite {String} Clerance Site Local do desembaraço aduaneiro 
   * @param clearanceState {module:model/StateEnum} Clerance Site State Estado onde ocorrreu o desembaraço aduaneiro 
   * @param transportDIType {module:model/LineForGoodsDi.TransportDITypeEnum} - '1' # Maritima - '2' # Fluvial - '3' # Lacustre - '4' # Aerea - '5' # Postal - '6' # Ferroviaria - '7' # Rodoviaria - '8' # Conduto - '9' # Meios Proprios - '10' # Entrada/Saida Ficta 
   * @param intermediateType {module:model/LineForGoodsDi.IntermediateTypeEnum} - '1' # On One's Own [1-por conta propria] - '2' # On Behalf And Order [2-por conta e ordem] - '3' # Order [3-encomenda] 
   * @param adi {Array.<module:model/LineForGoodsAdi>} aditional import declaration
   */
  var exports = function(diNumber, registerDateDI, clearanceSite, clearanceState, transportDIType, intermediateType, adi) {
    var _this = this;


    _this['diNumber'] = diNumber;
    _this['registerDateDI'] = registerDateDI;
    _this['clearanceSite'] = clearanceSite;
    _this['clearanceState'] = clearanceState;

    _this['transportDIType'] = transportDIType;

    _this['intermediateType'] = intermediateType;



    _this['adi'] = adi;
  };

  /**
   * Constructs a <code>LineForGoodsDi</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/LineForGoodsDi} obj Optional instance to populate.
   * @return {module:model/LineForGoodsDi} The populated <code>LineForGoodsDi</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('customsValue')) {
        obj['customsValue'] = ApiClient.convertToType(data['customsValue'], 'Number');
      }
      if (data.hasOwnProperty('diNumber')) {
        obj['diNumber'] = ApiClient.convertToType(data['diNumber'], 'String');
      }
      if (data.hasOwnProperty('registerDateDI')) {
        obj['registerDateDI'] = ApiClient.convertToType(data['registerDateDI'], 'Date');
      }
      if (data.hasOwnProperty('clearanceSite')) {
        obj['clearanceSite'] = ApiClient.convertToType(data['clearanceSite'], 'String');
      }
      if (data.hasOwnProperty('clearanceState')) {
        obj['clearanceState'] = StateEnum.constructFromObject(data['clearanceState']);
      }
      if (data.hasOwnProperty('clearanceDate')) {
        obj['clearanceDate'] = ApiClient.convertToType(data['clearanceDate'], 'Date');
      }
      if (data.hasOwnProperty('transportDIType')) {
        obj['transportDIType'] = ApiClient.convertToType(data['transportDIType'], 'String');
      }
      if (data.hasOwnProperty('afrmmValue')) {
        obj['afrmmValue'] = ApiClient.convertToType(data['afrmmValue'], 'Number');
      }
      if (data.hasOwnProperty('intermediateType')) {
        obj['intermediateType'] = ApiClient.convertToType(data['intermediateType'], 'String');
      }
      if (data.hasOwnProperty('buyerFederalTaxID')) {
        obj['buyerFederalTaxID'] = ApiClient.convertToType(data['buyerFederalTaxID'], 'String');
      }
      if (data.hasOwnProperty('buyerState')) {
        obj['buyerState'] = StateEnum.constructFromObject(data['buyerState']);
      }
      if (data.hasOwnProperty('exporterCode')) {
        obj['exporterCode'] = ApiClient.convertToType(data['exporterCode'], 'String');
      }
      if (data.hasOwnProperty('adi')) {
        obj['adi'] = ApiClient.convertToType(data['adi'], [LineForGoodsAdi]);
      }
    }
    return obj;
  }

  /**
   * customs value, valor aduaneiro (II Block of NFe)
   * @member {Number} customsValue
   */
  exports.prototype['customsValue'] = undefined;
  /**
   * Import declaration number, DI/DSI/DA/DRI-E (DI/DSI/DA/DRI-E)
   * @member {String} diNumber
   */
  exports.prototype['diNumber'] = undefined;
  /**
   * Register date of import declaration number, DI/DSI/DA/DRI-E (DI/DSI/DA/DRI-E)
   * @member {Date} registerDateDI
   */
  exports.prototype['registerDateDI'] = undefined;
  /**
   * Clerance Site Local do desembaraço aduaneiro 
   * @member {String} clearanceSite
   */
  exports.prototype['clearanceSite'] = undefined;
  /**
   * Clerance Site State Estado onde ocorrreu o desembaraço aduaneiro 
   * @member {module:model/StateEnum} clearanceState
   */
  exports.prototype['clearanceState'] = undefined;
  /**
   * Clerance date
   * @member {Date} clearanceDate
   */
  exports.prototype['clearanceDate'] = undefined;
  /**
   * - '1' # Maritima - '2' # Fluvial - '3' # Lacustre - '4' # Aerea - '5' # Postal - '6' # Ferroviaria - '7' # Rodoviaria - '8' # Conduto - '9' # Meios Proprios - '10' # Entrada/Saida Ficta 
   * @member {module:model/LineForGoodsDi.TransportDITypeEnum} transportDIType
   */
  exports.prototype['transportDIType'] = undefined;
  /**
   * Aditional amount to freight to renew merchant marine, This decimal 13 integers and 2 decimals [Valor Adicional ao frete para renovação de marinha mercante] 
   * @member {Number} afrmmValue
   */
  exports.prototype['afrmmValue'] = undefined;
  /**
   * - '1' # On One's Own [1-por conta propria] - '2' # On Behalf And Order [2-por conta e ordem] - '3' # Order [3-encomenda] 
   * @member {module:model/LineForGoodsDi.IntermediateTypeEnum} intermediateType
   */
  exports.prototype['intermediateType'] = undefined;
  /**
   * Buyer federal tax id CNPJ do comprador ou encomendante 
   * @member {String} buyerFederalTaxID
   */
  exports.prototype['buyerFederalTaxID'] = undefined;
  /**
   * Buyer sate Estado do comprador ou encomendante 
   * @member {module:model/StateEnum} buyerState
   */
  exports.prototype['buyerState'] = undefined;
  /**
   * Exporter code
   * @member {String} exporterCode
   */
  exports.prototype['exporterCode'] = undefined;
  /**
   * aditional import declaration
   * @member {Array.<module:model/LineForGoodsAdi>} adi
   */
  exports.prototype['adi'] = undefined;


  /**
   * Allowed values for the <code>transportDIType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TransportDITypeEnum = {
    /**
     * value: "1"
     * @const
     */
    "1": "1",
    /**
     * value: "2"
     * @const
     */
    "2": "2",
    /**
     * value: "3"
     * @const
     */
    "3": "3",
    /**
     * value: "4"
     * @const
     */
    "4": "4",
    /**
     * value: "5"
     * @const
     */
    "5": "5",
    /**
     * value: "6"
     * @const
     */
    "6": "6",
    /**
     * value: "7"
     * @const
     */
    "7": "7",
    /**
     * value: "8"
     * @const
     */
    "8": "8",
    /**
     * value: "9"
     * @const
     */
    "9": "9",
    /**
     * value: "10"
     * @const
     */
    "10": "10"  };

  /**
   * Allowed values for the <code>intermediateType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.IntermediateTypeEnum = {
    /**
     * value: "1"
     * @const
     */
    "1": "1",
    /**
     * value: "2"
     * @const
     */
    "2": "2",
    /**
     * value: "3"
     * @const
     */
    "3": "3"  };


  return exports;
}));


