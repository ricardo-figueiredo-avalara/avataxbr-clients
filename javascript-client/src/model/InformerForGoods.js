/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EntityInformerForGoods', 'model/HeaderForGoods', 'model/InformerForGoodsCsts', 'model/LineForGoods'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./EntityInformerForGoods'), require('./HeaderForGoods'), require('./InformerForGoodsCsts'), require('./LineForGoods'));
  } else {
    // Browser globals (root is window)
    if (!root.AvaTaxBrazil) {
      root.AvaTaxBrazil = {};
    }
    root.AvaTaxBrazil.InformerForGoods = factory(root.AvaTaxBrazil.ApiClient, root.AvaTaxBrazil.EntityInformerForGoods, root.AvaTaxBrazil.HeaderForGoods, root.AvaTaxBrazil.InformerForGoodsCsts, root.AvaTaxBrazil.LineForGoods);
  }
}(this, function(ApiClient, EntityInformerForGoods, HeaderForGoods, InformerForGoodsCsts, LineForGoods) {
  'use strict';




  /**
   * The InformerForGoods model module.
   * @module model/InformerForGoods
   * @version 1.0
   */

  /**
   * Constructs a new <code>InformerForGoods</code>.
   * Internal Type used to references all taxes.
   * @alias module:model/InformerForGoods
   * @class
   */
  var exports = function() {
    var _this = this;

















  };

  /**
   * Constructs a <code>InformerForGoods</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/InformerForGoods} obj Optional instance to populate.
   * @return {module:model/InformerForGoods} The populated <code>InformerForGoods</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('header')) {
        obj['header'] = HeaderForGoods.constructFromObject(data['header']);
      }
      if (data.hasOwnProperty('line')) {
        obj['line'] = LineForGoods.constructFromObject(data['line']);
      }
      if (data.hasOwnProperty('_company')) {
        obj['_company'] = EntityInformerForGoods.constructFromObject(data['_company']);
      }
      if (data.hasOwnProperty('_entity')) {
        obj['_entity'] = EntityInformerForGoods.constructFromObject(data['_entity']);
      }
      if (data.hasOwnProperty('emitter')) {
        obj['emitter'] = EntityInformerForGoods.constructFromObject(data['emitter']);
      }
      if (data.hasOwnProperty('receiver')) {
        obj['receiver'] = EntityInformerForGoods.constructFromObject(data['receiver']);
      }
      if (data.hasOwnProperty('transporter')) {
        obj['transporter'] = EntityInformerForGoods.constructFromObject(data['transporter']);
      }
      if (data.hasOwnProperty('csts')) {
        obj['csts'] = InformerForGoodsCsts.constructFromObject(data['csts']);
      }
      if (data.hasOwnProperty('amount')) {
        obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
      }
      if (data.hasOwnProperty('discount')) {
        obj['discount'] = ApiClient.convertToType(data['discount'], 'Number');
      }
      if (data.hasOwnProperty('quantity')) {
        obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
      }
      if (data.hasOwnProperty('unitPrice')) {
        obj['unitPrice'] = ApiClient.convertToType(data['unitPrice'], 'Number');
      }
      if (data.hasOwnProperty('freightAmount')) {
        obj['freightAmount'] = ApiClient.convertToType(data['freightAmount'], 'Number');
      }
      if (data.hasOwnProperty('insuranceAmount')) {
        obj['insuranceAmount'] = ApiClient.convertToType(data['insuranceAmount'], 'Number');
      }
      if (data.hasOwnProperty('otherCostAmount')) {
        obj['otherCostAmount'] = ApiClient.convertToType(data['otherCostAmount'], 'Number');
      }
      if (data.hasOwnProperty('exemptValue')) {
        obj['exemptValue'] = ApiClient.convertToType(data['exemptValue'], 'Number');
      }
    }
    return obj;
  }

  /**
   * @member {module:model/HeaderForGoods} header
   */
  exports.prototype['header'] = undefined;
  /**
   * @member {module:model/LineForGoods} line
   */
  exports.prototype['line'] = undefined;
  /**
   * @member {module:model/EntityInformerForGoods} _company
   */
  exports.prototype['_company'] = undefined;
  /**
   * @member {module:model/EntityInformerForGoods} _entity
   */
  exports.prototype['_entity'] = undefined;
  /**
   * @member {module:model/EntityInformerForGoods} emitter
   */
  exports.prototype['emitter'] = undefined;
  /**
   * @member {module:model/EntityInformerForGoods} receiver
   */
  exports.prototype['receiver'] = undefined;
  /**
   * @member {module:model/EntityInformerForGoods} transporter
   */
  exports.prototype['transporter'] = undefined;
  /**
   * @member {module:model/InformerForGoodsCsts} csts
   */
  exports.prototype['csts'] = undefined;
  /**
   * @member {Number} amount
   */
  exports.prototype['amount'] = undefined;
  /**
   * @member {Number} discount
   */
  exports.prototype['discount'] = undefined;
  /**
   * @member {Number} quantity
   */
  exports.prototype['quantity'] = undefined;
  /**
   * @member {Number} unitPrice
   */
  exports.prototype['unitPrice'] = undefined;
  /**
   * @member {Number} freightAmount
   */
  exports.prototype['freightAmount'] = undefined;
  /**
   * @member {Number} insuranceAmount
   */
  exports.prototype['insuranceAmount'] = undefined;
  /**
   * @member {Number} otherCostAmount
   */
  exports.prototype['otherCostAmount'] = undefined;
  /**
   * @member {Number} exemptValue
   */
  exports.prototype['exemptValue'] = undefined;



  return exports;
}));


