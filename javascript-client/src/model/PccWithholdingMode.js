/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/TaxByTypeTax'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./TaxByTypeTax'));
  } else {
    // Browser globals (root is window)
    if (!root.Br16Api) {
      root.Br16Api = {};
    }
    root.Br16Api.PccWithholdingMode = factory(root.Br16Api.ApiClient, root.Br16Api.TaxByTypeTax);
  }
}(this, function(ApiClient, TaxByTypeTax) {
  'use strict';




  /**
   * The PccWithholdingMode model module.
   * @module model/PccWithholdingMode
   * @version 1.0
   */

  /**
   * Constructs a new <code>PccWithholdingMode</code>.
   * @alias module:model/PccWithholdingMode
   * @class
   */
  var exports = function() {
    var _this = this;






  };

  /**
   * Constructs a <code>PccWithholdingMode</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PccWithholdingMode} obj Optional instance to populate.
   * @return {module:model/PccWithholdingMode} The populated <code>PccWithholdingMode</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('totalTax')) {
        obj['totalTax'] = ApiClient.convertToType(data['totalTax'], 'Number');
      }
      if (data.hasOwnProperty('pisRf')) {
        obj['pisRf'] = TaxByTypeTax.constructFromObject(data['pisRf']);
      }
      if (data.hasOwnProperty('cofinsRf')) {
        obj['cofinsRf'] = TaxByTypeTax.constructFromObject(data['cofinsRf']);
      }
      if (data.hasOwnProperty('csllRf')) {
        obj['csllRf'] = TaxByTypeTax.constructFromObject(data['csllRf']);
      }
    }
    return obj;
  }

  /**
   * Inform if this group of tax are calculated considering the threashold by PCC or Individualy (each tax separately)
   * @member {module:model/PccWithholdingMode.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * this attribute occurs only for CSRF type, When CRSF mode, this is sum of pisRf, CofinsRf and CsllRf
   * @member {Number} totalTax
   */
  exports.prototype['totalTax'] = undefined;
  /**
   * @member {module:model/TaxByTypeTax} pisRf
   */
  exports.prototype['pisRf'] = undefined;
  /**
   * @member {module:model/TaxByTypeTax} cofinsRf
   */
  exports.prototype['cofinsRf'] = undefined;
  /**
   * @member {module:model/TaxByTypeTax} csllRf
   */
  exports.prototype['csllRf'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "CSRF"
     * @const
     */
    "CSRF": "CSRF",
    /**
     * value: "individual"
     * @const
     */
    "individual": "individual"  };


  return exports;
}));


