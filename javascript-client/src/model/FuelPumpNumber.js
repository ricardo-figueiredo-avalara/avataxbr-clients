/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Br16Api) {
      root.Br16Api = {};
    }
    root.Br16Api.FuelPumpNumber = factory(root.Br16Api.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The FuelPumpNumber model module.
   * @module model/FuelPumpNumber
   * @version 1.0
   */

  /**
   * Constructs a new <code>FuelPumpNumber</code>.
   * @alias module:model/FuelPumpNumber
   * @class
   * @param nozzleNumberFuelSupply {String} Identification number of nozzle used in the dispensing process.   Numero de identificação do Bico utilizado no abastecimento 
   * @param fuelPumpNumber {String} Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado 
   * @param fuelTankNumber {String} Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado 
   * @param startValueOfPumpNumber {Number} Valor do Encerrante no ínicio do abastecimento.  Reading of auto-counter (encerrante) at the start of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$ 
   * @param endValueOfPumpNumber {Number} Valor do Encerrante no final do abastecimento.  Reading of auto-counter (encerrante) at the end of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$ 
   */
  var exports = function(nozzleNumberFuelSupply, fuelPumpNumber, fuelTankNumber, startValueOfPumpNumber, endValueOfPumpNumber) {
    var _this = this;

    _this['nozzleNumberFuelSupply'] = nozzleNumberFuelSupply;
    _this['fuelPumpNumber'] = fuelPumpNumber;
    _this['fuelTankNumber'] = fuelTankNumber;
    _this['startValueOfPumpNumber'] = startValueOfPumpNumber;
    _this['endValueOfPumpNumber'] = endValueOfPumpNumber;
  };

  /**
   * Constructs a <code>FuelPumpNumber</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FuelPumpNumber} obj Optional instance to populate.
   * @return {module:model/FuelPumpNumber} The populated <code>FuelPumpNumber</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('nozzleNumberFuelSupply')) {
        obj['nozzleNumberFuelSupply'] = ApiClient.convertToType(data['nozzleNumberFuelSupply'], 'String');
      }
      if (data.hasOwnProperty('fuelPumpNumber')) {
        obj['fuelPumpNumber'] = ApiClient.convertToType(data['fuelPumpNumber'], 'String');
      }
      if (data.hasOwnProperty('fuelTankNumber')) {
        obj['fuelTankNumber'] = ApiClient.convertToType(data['fuelTankNumber'], 'String');
      }
      if (data.hasOwnProperty('startValueOfPumpNumber')) {
        obj['startValueOfPumpNumber'] = ApiClient.convertToType(data['startValueOfPumpNumber'], 'Number');
      }
      if (data.hasOwnProperty('endValueOfPumpNumber')) {
        obj['endValueOfPumpNumber'] = ApiClient.convertToType(data['endValueOfPumpNumber'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Identification number of nozzle used in the dispensing process.   Numero de identificação do Bico utilizado no abastecimento 
   * @member {String} nozzleNumberFuelSupply
   */
  exports.prototype['nozzleNumberFuelSupply'] = undefined;
  /**
   * Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado 
   * @member {String} fuelPumpNumber
   */
  exports.prototype['fuelPumpNumber'] = undefined;
  /**
   * Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado 
   * @member {String} fuelTankNumber
   */
  exports.prototype['fuelTankNumber'] = undefined;
  /**
   * Valor do Encerrante no ínicio do abastecimento.  Reading of auto-counter (encerrante) at the start of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$ 
   * @member {Number} startValueOfPumpNumber
   */
  exports.prototype['startValueOfPumpNumber'] = undefined;
  /**
   * Valor do Encerrante no final do abastecimento.  Reading of auto-counter (encerrante) at the end of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$ 
   * @member {Number} endValueOfPumpNumber
   */
  exports.prototype['endValueOfPumpNumber'] = undefined;



  return exports;
}));


