/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LegalReasonReferencedProcesses', 'model/LegalReasonTaxScope'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./LegalReasonReferencedProcesses'), require('./LegalReasonTaxScope'));
  } else {
    // Browser globals (root is window)
    if (!root.AvaTaxBrazil) {
      root.AvaTaxBrazil = {};
    }
    root.AvaTaxBrazil.LegalReason = factory(root.AvaTaxBrazil.ApiClient, root.AvaTaxBrazil.LegalReasonReferencedProcesses, root.AvaTaxBrazil.LegalReasonTaxScope);
  }
}(this, function(ApiClient, LegalReasonReferencedProcesses, LegalReasonTaxScope) {
  'use strict';




  /**
   * The LegalReason model module.
   * @module model/LegalReason
   * @version 1.0
   */

  /**
   * Constructs a new <code>LegalReason</code>.
   * Legal Reason (Fundamentação Legal): - &#39;name&#39; - &#39;description&#39; - &#39;scope&#39; 
   * @alias module:model/LegalReason
   * @class
   * @param scope {module:model/LegalReason.ScopeEnum} Message scope. May be one of these. general - This message is not linked to any entity (agast/process/cfop) and will be applied to any item in a transacition. (Esta mensagem tem escopo geral, nao está relacionadas diretamente qualquer objeto.); linkedTo - This message is linked to an entity, and its processing will only occur when the context involves it. (Esta mensagens estão relacionadas diretamente a algum objeto como um AGAST por exemplo, um Processo ou uma CFOP.); 
   * @param description {String} Legal reason textual description;
   * @param name {String} Short name to this message
   */
  var exports = function(scope, description, name) {
    var _this = this;


    _this['scope'] = scope;

    _this['description'] = description;
    _this['name'] = name;




  };

  /**
   * Constructs a <code>LegalReason</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/LegalReason} obj Optional instance to populate.
   * @return {module:model/LegalReason} The populated <code>LegalReason</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('scope')) {
        obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
      }
      if (data.hasOwnProperty('disable')) {
        obj['disable'] = ApiClient.convertToType(data['disable'], 'Boolean');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('legalCode')) {
        obj['legalCode'] = ApiClient.convertToType(data['legalCode'], 'String');
      }
      if (data.hasOwnProperty('showInInvoice')) {
        obj['showInInvoice'] = ApiClient.convertToType(data['showInInvoice'], 'String');
      }
      if (data.hasOwnProperty('referencedProcesses')) {
        obj['referencedProcesses'] = ApiClient.convertToType(data['referencedProcesses'], [LegalReasonReferencedProcesses]);
      }
      if (data.hasOwnProperty('taxScope')) {
        obj['taxScope'] = LegalReasonTaxScope.constructFromObject(data['taxScope']);
      }
    }
    return obj;
  }

  /**
   * Internal ID
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Message scope. May be one of these. general - This message is not linked to any entity (agast/process/cfop) and will be applied to any item in a transacition. (Esta mensagem tem escopo geral, nao está relacionadas diretamente qualquer objeto.); linkedTo - This message is linked to an entity, and its processing will only occur when the context involves it. (Esta mensagens estão relacionadas diretamente a algum objeto como um AGAST por exemplo, um Processo ou uma CFOP.); 
   * @member {module:model/LegalReason.ScopeEnum} scope
   */
  exports.prototype['scope'] = undefined;
  /**
   * Set this message as no longer valid
   * @member {Boolean} disable
   */
  exports.prototype['disable'] = undefined;
  /**
   * Legal reason textual description;
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * Short name to this message
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * this field inform the official code number
   * @member {String} legalCode
   */
  exports.prototype['legalCode'] = undefined;
  /**
   * Optional. Show this message when used in Invoice (NFe, NFCe, others...). Where to show this.
   * @member {module:model/LegalReason.ShowInInvoiceEnum} showInInvoice
   */
  exports.prototype['showInInvoice'] = undefined;
  /**
   * Referenced Process
   * @member {Array.<module:model/LegalReasonReferencedProcesses>} referencedProcesses
   */
  exports.prototype['referencedProcesses'] = undefined;
  /**
   * @member {module:model/LegalReasonTaxScope} taxScope
   */
  exports.prototype['taxScope'] = undefined;


  /**
   * Allowed values for the <code>scope</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ScopeEnum = {
    /**
     * value: "general"
     * @const
     */
    "general": "general",
    /**
     * value: "linkedTo"
     * @const
     */
    "linkedTo": "linkedTo"  };

  /**
   * Allowed values for the <code>showInInvoice</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ShowInInvoiceEnum = {
    /**
     * value: "complementaryInfoMessage"
     * @const
     */
    "complementaryInfoMessage": "complementaryInfoMessage",
    /**
     * value: "fiscalInfoMessage"
     * @const
     */
    "fiscalInfoMessage": "fiscalInfoMessage",
    /**
     * value: "itemInfoMessage"
     * @const
     */
    "itemInfoMessage": "itemInfoMessage"  };


  return exports;
}));


