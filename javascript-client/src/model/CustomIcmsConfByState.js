/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/IcmsConfByState', 'model/IcmsConfByStateIcmsSTConf', 'model/IcmsConfInterState', 'model/StateEnum'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./IcmsConfByState'), require('./IcmsConfByStateIcmsSTConf'), require('./IcmsConfInterState'), require('./StateEnum'));
  } else {
    // Browser globals (root is window)
    if (!root.Br16Api) {
      root.Br16Api = {};
    }
    root.Br16Api.CustomIcmsConfByState = factory(root.Br16Api.ApiClient, root.Br16Api.IcmsConfByState, root.Br16Api.IcmsConfByStateIcmsSTConf, root.Br16Api.IcmsConfInterState, root.Br16Api.StateEnum);
  }
}(this, function(ApiClient, IcmsConfByState, IcmsConfByStateIcmsSTConf, IcmsConfInterState, StateEnum) {
  'use strict';




  /**
   * The CustomIcmsConfByState model module.
   * @module model/CustomIcmsConfByState
   * @version 1.0
   */

  /**
   * Constructs a new <code>CustomIcmsConfByState</code>.
   * @alias module:model/CustomIcmsConfByState
   * @class
   * @implements module:model/IcmsConfByState
   * @param code {String} Identify the IcmsConfState in namespace
   * @param state {module:model/StateEnum} 
   * @param companyId {String} Company ID
   */
  var exports = function(code, state, companyId) {
    var _this = this;

    IcmsConfByState.call(_this, code, state);
    _this['companyId'] = companyId;
  };

  /**
   * Constructs a <code>CustomIcmsConfByState</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CustomIcmsConfByState} obj Optional instance to populate.
   * @return {module:model/CustomIcmsConfByState} The populated <code>CustomIcmsConfByState</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      IcmsConfByState.constructFromObject(data, obj);
      if (data.hasOwnProperty('companyId')) {
        obj['companyId'] = ApiClient.convertToType(data['companyId'], 'String');
      }
    }
    return obj;
  }

  /**
   * Company ID
   * @member {String} companyId
   */
  exports.prototype['companyId'] = undefined;

  // Implement IcmsConfByState interface:
  /**
   * Identify the IcmsConfState in namespace
   * @member {String} code
   */
exports.prototype['code'] = undefined;

  /**
   * @member {module:model/StateEnum} state
   */
exports.prototype['state'] = undefined;

  /**
   * name for this configuration
   * @member {String} name
   */
exports.prototype['name'] = undefined;

  /**
   * date when this configuration values starts
   * @member {Date} startDate
   */
exports.prototype['startDate'] = undefined;

  /**
   * date when this configuration values expire
   * @member {Date} expirationDate
   */
exports.prototype['expirationDate'] = undefined;

  /**
   * set this configuration to Inactive
   * @member {Boolean} inactive
   */
exports.prototype['inactive'] = undefined;

  /**
   * inform that the item linked to this configuration is subject to ICMS ST on this state
   * @member {Boolean} subjectToST
   */
exports.prototype['subjectToST'] = undefined;

  /**
   * On sales process inform the CST hat the item linked to this configuration is subject to for the own ICMS - '00' # TAXABLE - '20' # TAXABLE WITH BASE DISCOUNT - '40' # EXEMPT - '41' # NOT TAXABLE - '50' # SUSPENDED 
   * @member {module:model/IcmsConfByState.IcmsCSTEnum} icmsCST
   */
exports.prototype['icmsCST'] = undefined;

  /**
   * how this ICMS will be calculed for itens linked to this configuration
   * @member {module:model/IcmsConfByState.CalcModeEnum} calcMode
   */
exports.prototype['calcMode'] = undefined;

  /**
   * discount if the item is subject to monophase PIS/COFINS for transactions inside state
   * @member {Number} discountRateForMonoPhase
   */
exports.prototype['discountRateForMonoPhase'] = undefined;

  /**
   * ICMS rate
   * @member {Number} rate
   */
exports.prototype['rate'] = undefined;

  /**
   * ICMS rate
   * @member {Number} icmsBaseDiscount
   */
exports.prototype['icmsBaseDiscount'] = undefined;

  /**
   * SRP or MMSRP amount base for this icms configuration
   * @member {Number} msrp
   */
exports.prototype['msrp'] = undefined;

  /**
   * ICMS mva rate to define calc base
   * @member {Number} mvaRate
   */
exports.prototype['mvaRate'] = undefined;

  /**
   * unit used to SRP amount value
   * @member {String} msrpUnit
   */
exports.prototype['msrpUnit'] = undefined;

  /**
   * Code for the ICM legal reason, this message will be placed on invoice.
   * @member {String} icmsLegalReason
   */
exports.prototype['icmsLegalReason'] = undefined;

  /**
   * Fundo de Combate Ã  pobreza / Fund Against Poverty
   * @member {Number} fcpRate
   */
exports.prototype['fcpRate'] = undefined;

  /**
   * @member {module:model/IcmsConfByStateIcmsSTConf} icmsSTConf
   */
exports.prototype['icmsSTConf'] = undefined;

  /**
   * the map key is state code
   * @member {Array.<module:model/IcmsConfInterState>} icmsInterStateConf
   */
exports.prototype['icmsInterStateConf'] = undefined;



  return exports;
}));


