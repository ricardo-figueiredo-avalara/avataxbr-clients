/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/IcmsConfInterStateIcmsSTConf', 'model/StateEnum'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./IcmsConfInterStateIcmsSTConf'), require('./StateEnum'));
  } else {
    // Browser globals (root is window)
    if (!root.Br16Api) {
      root.Br16Api = {};
    }
    root.Br16Api.IcmsConfInterState = factory(root.Br16Api.ApiClient, root.Br16Api.IcmsConfInterStateIcmsSTConf, root.Br16Api.StateEnum);
  }
}(this, function(ApiClient, IcmsConfInterStateIcmsSTConf, StateEnum) {
  'use strict';




  /**
   * The IcmsConfInterState model module.
   * @module model/IcmsConfInterState
   * @version 1.0
   */

  /**
   * Constructs a new <code>IcmsConfInterState</code>.
   * @alias module:model/IcmsConfInterState
   * @class
   */
  var exports = function() {
    var _this = this;












  };

  /**
   * Constructs a <code>IcmsConfInterState</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IcmsConfInterState} obj Optional instance to populate.
   * @return {module:model/IcmsConfInterState} The populated <code>IcmsConfInterState</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('state')) {
        obj['state'] = StateEnum.constructFromObject(data['state']);
      }
      if (data.hasOwnProperty('calcMode')) {
        obj['calcMode'] = ApiClient.convertToType(data['calcMode'], 'String');
      }
      if (data.hasOwnProperty('discountRateForMonoPhase')) {
        obj['discountRateForMonoPhase'] = ApiClient.convertToType(data['discountRateForMonoPhase'], 'Number');
      }
      if (data.hasOwnProperty('rate')) {
        obj['rate'] = ApiClient.convertToType(data['rate'], 'Number');
      }
      if (data.hasOwnProperty('fcpRate')) {
        obj['fcpRate'] = ApiClient.convertToType(data['fcpRate'], 'Number');
      }
      if (data.hasOwnProperty('icmsBaseDiscount')) {
        obj['icmsBaseDiscount'] = ApiClient.convertToType(data['icmsBaseDiscount'], 'Number');
      }
      if (data.hasOwnProperty('msrp')) {
        obj['msrp'] = ApiClient.convertToType(data['msrp'], 'Number');
      }
      if (data.hasOwnProperty('mvaRate')) {
        obj['mvaRate'] = ApiClient.convertToType(data['mvaRate'], 'Number');
      }
      if (data.hasOwnProperty('msrpUnit')) {
        obj['msrpUnit'] = ApiClient.convertToType(data['msrpUnit'], 'String');
      }
      if (data.hasOwnProperty('icmsLegalReason')) {
        obj['icmsLegalReason'] = ApiClient.convertToType(data['icmsLegalReason'], 'String');
      }
      if (data.hasOwnProperty('icmsSTConf')) {
        obj['icmsSTConf'] = IcmsConfInterStateIcmsSTConf.constructFromObject(data['icmsSTConf']);
      }
    }
    return obj;
  }

  /**
   * @member {module:model/StateEnum} state
   */
  exports.prototype['state'] = undefined;
  /**
   * how this ICMS will be calculed for itens linked to this configuration
   * @member {module:model/IcmsConfInterState.CalcModeEnum} calcMode
   */
  exports.prototype['calcMode'] = undefined;
  /**
   * discount if the item is subject to monophase PIS/COFINS when operation interstate
   * @member {Number} discountRateForMonoPhase
   */
  exports.prototype['discountRateForMonoPhase'] = undefined;
  /**
   * ICMS rate
   * @member {Number} rate
   */
  exports.prototype['rate'] = undefined;
  /**
   * FCP rate (Fundo de Combate Ã  Probreza / Fund Against Poverty
   * @member {Number} fcpRate
   */
  exports.prototype['fcpRate'] = undefined;
  /**
   * ICMS rate
   * @member {Number} icmsBaseDiscount
   */
  exports.prototype['icmsBaseDiscount'] = undefined;
  /**
   * SRP or MMSRP amount base for this icms configuration
   * @member {Number} msrp
   */
  exports.prototype['msrp'] = undefined;
  /**
   * ICMS MVA rate to define calc base
   * @member {Number} mvaRate
   */
  exports.prototype['mvaRate'] = undefined;
  /**
   * unit used to SRP amount value
   * @member {String} msrpUnit
   */
  exports.prototype['msrpUnit'] = undefined;
  /**
   * Code for the ICM legal reason, this message will be placed on invoice.
   * @member {String} icmsLegalReason
   */
  exports.prototype['icmsLegalReason'] = undefined;
  /**
   * @member {module:model/IcmsConfInterStateIcmsSTConf} icmsSTConf
   */
  exports.prototype['icmsSTConf'] = undefined;


  /**
   * Allowed values for the <code>calcMode</code> property.
   * @enum {String}
   * @readonly
   */
  exports.CalcModeEnum = {
    /**
     * value: "BYMVARATE"
     * @const
     */
    "BYMVARATE": "BYMVARATE",
    /**
     * value: "SRP"
     * @const
     */
    "SRP": "SRP",
    /**
     * value: "MMSRP"
     * @const
     */
    "MMSRP": "MMSRP",
    /**
     * value: "OPERATIONAMOUNT"
     * @const
     */
    "OPERATIONAMOUNT": "OPERATIONAMOUNT"  };


  return exports;
}));


