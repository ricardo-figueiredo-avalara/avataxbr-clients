/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EntityType', 'model/FederalTaxRegime'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./EntityType'), require('./FederalTaxRegime'));
  } else {
    // Browser globals (root is window)
    if (!root.AvaTaxBrazil) {
      root.AvaTaxBrazil = {};
    }
    root.AvaTaxBrazil.SalesEntity = factory(root.AvaTaxBrazil.ApiClient, root.AvaTaxBrazil.EntityType, root.AvaTaxBrazil.FederalTaxRegime);
  }
}(this, function(ApiClient, EntityType, FederalTaxRegime) {
  'use strict';




  /**
   * The SalesEntity model module.
   * @module model/SalesEntity
   * @version 1.0
   */

  /**
   * Constructs a new <code>SalesEntity</code>.
   * @alias module:model/SalesEntity
   * @class
   * @param type {module:model/EntityType} 
   * @param taxRegime {module:model/FederalTaxRegime} 
   */
  var exports = function(type, taxRegime) {
    var _this = this;


    _this['type'] = type;






    _this['taxRegime'] = taxRegime;






  };

  /**
   * Constructs a <code>SalesEntity</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SalesEntity} obj Optional instance to populate.
   * @return {module:model/SalesEntity} The populated <code>SalesEntity</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = EntityType.constructFromObject(data['type']);
      }
      if (data.hasOwnProperty('email')) {
        obj['email'] = ApiClient.convertToType(data['email'], 'String');
      }
      if (data.hasOwnProperty('cnpjcpf')) {
        obj['cnpjcpf'] = ApiClient.convertToType(data['cnpjcpf'], 'String');
      }
      if (data.hasOwnProperty('cityTaxId')) {
        obj['cityTaxId'] = ApiClient.convertToType(data['cityTaxId'], 'String');
      }
      if (data.hasOwnProperty('stateTaxId')) {
        obj['stateTaxId'] = ApiClient.convertToType(data['stateTaxId'], 'String');
      }
      if (data.hasOwnProperty('suframa')) {
        obj['suframa'] = ApiClient.convertToType(data['suframa'], 'String');
      }
      if (data.hasOwnProperty('phone')) {
        obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
      }
      if (data.hasOwnProperty('taxRegime')) {
        obj['taxRegime'] = FederalTaxRegime.constructFromObject(data['taxRegime']);
      }
      if (data.hasOwnProperty('specialTaxRegime')) {
        obj['specialTaxRegime'] = ApiClient.convertToType(data['specialTaxRegime'], 'String');
      }
      if (data.hasOwnProperty('subjectToSRF1234')) {
        obj['subjectToSRF1234'] = ApiClient.convertToType(data['subjectToSRF1234'], 'Boolean');
      }
      if (data.hasOwnProperty('requiredWithholdingISS')) {
        obj['requiredWithholdingISS'] = ApiClient.convertToType(data['requiredWithholdingISS'], 'Boolean');
      }
      if (data.hasOwnProperty('art')) {
        obj['art'] = ApiClient.convertToType(data['art'], 'String');
      }
      if (data.hasOwnProperty('adminProcess')) {
        obj['adminProcess'] = ApiClient.convertToType(data['adminProcess'], 'String');
      }
      if (data.hasOwnProperty('buildCode')) {
        obj['buildCode'] = ApiClient.convertToType(data['buildCode'], 'String');
      }
    }
    return obj;
  }

  /**
   * SERVICE BUYER NAME OFFICIAL
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * @member {module:model/EntityType} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Entity Email
   * @member {String} email
   */
  exports.prototype['email'] = undefined;
  /**
   * CNPJ/CPF of Sales Buyer, if CPF pattern is '[0-9]{11}' if CNPJ pattern is '[0-9]{14}'
   * @member {String} cnpjcpf
   */
  exports.prototype['cnpjcpf'] = undefined;
  /**
   * City Tax ID
   * @member {String} cityTaxId
   */
  exports.prototype['cityTaxId'] = undefined;
  /**
   * State Tax ID
   * @member {String} stateTaxId
   */
  exports.prototype['stateTaxId'] = undefined;
  /**
   * Suframa ID
   * @member {String} suframa
   */
  exports.prototype['suframa'] = undefined;
  /**
   * Entity Phone
   * @member {String} phone
   */
  exports.prototype['phone'] = undefined;
  /**
   * @member {module:model/FederalTaxRegime} taxRegime
   */
  exports.prototype['taxRegime'] = undefined;
  /**
   * Entity Special Tax Regime  - 'MEM' # Microempresa municipal - 'EST' # Estimativa - 'SPR' # Sociedade de profissionais - 'COP' # Cooperativa - 'MEI' # Microempresário Individual (MEI) - 'MPP' # Microempresário e Empresa de Pequeno Porte (ME EPP) 
   * @member {module:model/SalesEntity.SpecialTaxRegimeEnum} specialTaxRegime
   */
  exports.prototype['specialTaxRegime'] = undefined;
  /**
   * Companies subject to rule follow same rule of Government
   * @member {Boolean} subjectToSRF1234
   */
  exports.prototype['subjectToSRF1234'] = undefined;
  /**
   * If Withholding ISS is required, independently the rules applied.
   * @member {Boolean} requiredWithholdingISS
   */
  exports.prototype['requiredWithholdingISS'] = undefined;
  /**
   * technical note. Anota\\u00e7\\u00e3o de Responsabilidade T\\u00e9cnica-ART, estabelece que todos os contratos referentes à  execu\\u00e7\\u00e3o de servi\\u00e7os ou obras de Engenharia, Agronomia, Geologia, Geografia ou Meteorologia dever\\u00e3o ser objeto de anota\\u00e7\\u00e3o no Conselho Regional de Engenharia e Agronomia
   * @member {String} art
   */
  exports.prototype['art'] = undefined;
  /**
   * PROCESS NUMBER TO ISS SUSPENDED FOR ADMINISTRATIVE PROCESS
   * @member {String} adminProcess
   */
  exports.prototype['adminProcess'] = undefined;
  /**
   * Business code. Código da obra OBRA
   * @member {String} buildCode
   */
  exports.prototype['buildCode'] = undefined;


  /**
   * Allowed values for the <code>specialTaxRegime</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SpecialTaxRegimeEnum = {
    /**
     * value: "MEM"
     * @const
     */
    "MEM": "MEM",
    /**
     * value: "EST"
     * @const
     */
    "EST": "EST",
    /**
     * value: "SPR"
     * @const
     */
    "SPR": "SPR",
    /**
     * value: "COP"
     * @const
     */
    "COP": "COP",
    /**
     * value: "MEI"
     * @const
     */
    "MEI": "MEI",
    /**
     * value: "MPP"
     * @const
     */
    "MPP": "MPP"  };


  return exports;
}));


