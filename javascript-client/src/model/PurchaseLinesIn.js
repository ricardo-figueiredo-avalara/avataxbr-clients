/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SalesLinesOutTaxDeductions'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./SalesLinesOutTaxDeductions'));
  } else {
    // Browser globals (root is window)
    if (!root.Br16Api) {
      root.Br16Api = {};
    }
    root.Br16Api.PurchaseLinesIn = factory(root.Br16Api.ApiClient, root.Br16Api.SalesLinesOutTaxDeductions);
  }
}(this, function(ApiClient, SalesLinesOutTaxDeductions) {
  'use strict';




  /**
   * The PurchaseLinesIn model module.
   * @module model/PurchaseLinesIn
   * @version 1.0
   */

  /**
   * Constructs a new <code>PurchaseLinesIn</code>.
   * @alias module:model/PurchaseLinesIn
   * @class
   * @param itemCode {String} This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states.
   */
  var exports = function(itemCode) {
    var _this = this;


    _this['itemCode'] = itemCode;







  };

  /**
   * Constructs a <code>PurchaseLinesIn</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PurchaseLinesIn} obj Optional instance to populate.
   * @return {module:model/PurchaseLinesIn} The populated <code>PurchaseLinesIn</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('lineCode')) {
        obj['lineCode'] = ApiClient.convertToType(data['lineCode'], 'Number');
      }
      if (data.hasOwnProperty('itemCode')) {
        obj['itemCode'] = ApiClient.convertToType(data['itemCode'], 'String');
      }
      if (data.hasOwnProperty('numberOfItems')) {
        obj['numberOfItems'] = ApiClient.convertToType(data['numberOfItems'], 'Number');
      }
      if (data.hasOwnProperty('lineAmount')) {
        obj['lineAmount'] = ApiClient.convertToType(data['lineAmount'], 'Number');
      }
      if (data.hasOwnProperty('itemDescription')) {
        obj['itemDescription'] = ApiClient.convertToType(data['itemDescription'], 'String');
      }
      if (data.hasOwnProperty('lineTaxedDiscount')) {
        obj['lineTaxedDiscount'] = ApiClient.convertToType(data['lineTaxedDiscount'], 'Number');
      }
      if (data.hasOwnProperty('lineUntaxedDiscount')) {
        obj['lineUntaxedDiscount'] = ApiClient.convertToType(data['lineUntaxedDiscount'], 'Number');
      }
      if (data.hasOwnProperty('useType')) {
        obj['useType'] = ApiClient.convertToType(data['useType'], 'String');
      }
      if (data.hasOwnProperty('taxDeductions')) {
        obj['taxDeductions'] = SalesLinesOutTaxDeductions.constructFromObject(data['taxDeductions']);
      }
    }
    return obj;
  }

  /**
   * This string is a unique identifier for this line in the transaction
   * @member {Number} lineCode
   */
  exports.prototype['lineCode'] = undefined;
  /**
   * This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states.
   * @member {String} itemCode
   */
  exports.prototype['itemCode'] = undefined;
  /**
   * This decimal captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1
   * @member {Number} numberOfItems
   * @default 1.0
   */
  exports.prototype['numberOfItems'] = 1.0;
  /**
   * This decimal captures the total cost of this line. In its simplest form lineAmount = (item price * numberOfItems).
   * @member {Number} lineAmount
   */
  exports.prototype['lineAmount'] = undefined;
  /**
   * This string captures the description of the item represented by this line, will be used LC 116
   * @member {String} itemDescription
   */
  exports.prototype['itemDescription'] = undefined;
  /**
   * Conditional discount
   * @member {Number} lineTaxedDiscount
   */
  exports.prototype['lineTaxedDiscount'] = undefined;
  /**
   * Unconditional discount
   * @member {Number} lineUntaxedDiscount
   */
  exports.prototype['lineUntaxedDiscount'] = undefined;
  /**
   * Type of entity use associated with this line - 'resale' - 'production' - 'use or consumption' - 'fixed assets' 
   * @member {module:model/PurchaseLinesIn.UseTypeEnum} useType
   */
  exports.prototype['useType'] = undefined;
  /**
   * @member {module:model/SalesLinesOutTaxDeductions} taxDeductions
   */
  exports.prototype['taxDeductions'] = undefined;


  /**
   * Allowed values for the <code>useType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.UseTypeEnum = {
    /**
     * value: "resale"
     * @const
     */
    "resale": "resale",
    /**
     * value: "production"
     * @const
     */
    "production": "production",
    /**
     * value: "use or consumption"
     * @const
     */
    "use or consumption": "use or consumption",
    /**
     * value: "fixed assets"
     * @const
     */
    "fixed assets": "fixed assets"  };


  return exports;
}));


