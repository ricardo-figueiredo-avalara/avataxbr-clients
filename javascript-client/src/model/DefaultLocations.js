/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EntityLocation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./EntityLocation'));
  } else {
    // Browser globals (root is window)
    if (!root.AvaTaxBrazil) {
      root.AvaTaxBrazil = {};
    }
    root.AvaTaxBrazil.DefaultLocations = factory(root.AvaTaxBrazil.ApiClient, root.AvaTaxBrazil.EntityLocation);
  }
}(this, function(ApiClient, EntityLocation) {
  'use strict';




  /**
   * The DefaultLocations model module.
   * @module model/DefaultLocations
   * @version 1.0
   */

  /**
   * Constructs a new <code>DefaultLocations</code>.
   * This element contains a dictionary of locations such as the origin and destination addresses to be associated with this transaction. These locations may be overridden within each line item. The key for each location in the dictionary is the location &#39;purpose&#39;. Valid locations purposes are &#39;ShipFrom&#39;, &#39;ShipTo&#39;, &#39;POS&#39;, &#39;POM&#39;, &#39;POO&#39;, &#39;BillingLocation&#39;, &#39;CallPlaced&#39;, &#39;CallReceived&#39;, &#39;ServiceRendered&#39;, &#39;POA&#39; and &#39;FirstUse&#39;. There can only be one location of a given purpose in the dictionary.
   * @alias module:model/DefaultLocations
   * @class
   */
  var exports = function() {
    var _this = this;






  };

  /**
   * Constructs a <code>DefaultLocations</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DefaultLocations} obj Optional instance to populate.
   * @return {module:model/DefaultLocations} The populated <code>DefaultLocations</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('entity')) {
        obj['entity'] = EntityLocation.constructFromObject(data['entity']);
      }
      if (data.hasOwnProperty('company')) {
        obj['company'] = EntityLocation.constructFromObject(data['company']);
      }
      if (data.hasOwnProperty('transporter')) {
        obj['transporter'] = EntityLocation.constructFromObject(data['transporter']);
      }
      if (data.hasOwnProperty('deliveryLocation')) {
        obj['deliveryLocation'] = EntityLocation.constructFromObject(data['deliveryLocation']);
      }
      if (data.hasOwnProperty('pickupLocation')) {
        obj['pickupLocation'] = EntityLocation.constructFromObject(data['pickupLocation']);
      }
    }
    return obj;
  }

  /**
   * @member {module:model/EntityLocation} entity
   */
  exports.prototype['entity'] = undefined;
  /**
   * @member {module:model/EntityLocation} company
   */
  exports.prototype['company'] = undefined;
  /**
   * @member {module:model/EntityLocation} transporter
   */
  exports.prototype['transporter'] = undefined;
  /**
   * @member {module:model/EntityLocation} deliveryLocation
   */
  exports.prototype['deliveryLocation'] = undefined;
  /**
   * @member {module:model/EntityLocation} pickupLocation
   */
  exports.prototype['pickupLocation'] = undefined;



  return exports;
}));


