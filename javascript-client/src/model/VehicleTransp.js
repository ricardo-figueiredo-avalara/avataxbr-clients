/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/VehicleID'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./VehicleID'));
  } else {
    // Browser globals (root is window)
    if (!root.Br16Api) {
      root.Br16Api = {};
    }
    root.Br16Api.VehicleTransp = factory(root.Br16Api.ApiClient, root.Br16Api.VehicleID);
  }
}(this, function(ApiClient, VehicleID) {
  'use strict';




  /**
   * The VehicleTransp model module.
   * @module model/VehicleTransp
   * @version 1.0
   */

  /**
   * Constructs a new <code>VehicleTransp</code>.
   * Identify type of vehicle used to transport the attributes, except atribute type,  follow rule allOf then only one of this atributes will be informed. 
   * @alias module:model/VehicleTransp
   * @class
   */
  var exports = function() {
    var _this = this;






  };

  /**
   * Constructs a <code>VehicleTransp</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VehicleTransp} obj Optional instance to populate.
   * @return {module:model/VehicleTransp} The populated <code>VehicleTransp</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('automobile')) {
        obj['automobile'] = VehicleID.constructFromObject(data['automobile']);
      }
      if (data.hasOwnProperty('trailer')) {
        obj['trailer'] = ApiClient.convertToType(data['trailer'], [VehicleID]);
      }
      if (data.hasOwnProperty('wagon')) {
        obj['wagon'] = ApiClient.convertToType(data['wagon'], 'String');
      }
      if (data.hasOwnProperty('ferry')) {
        obj['ferry'] = ApiClient.convertToType(data['ferry'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {module:model/VehicleTransp.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * @member {module:model/VehicleID} automobile
   */
  exports.prototype['automobile'] = undefined;
  /**
   * Trailer
   * @member {Array.<module:model/VehicleID>} trailer
   */
  exports.prototype['trailer'] = undefined;
  /**
   * @member {String} wagon
   */
  exports.prototype['wagon'] = undefined;
  /**
   * Ferry
   * @member {String} ferry
   */
  exports.prototype['ferry'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "automobile"
     * @const
     */
    "automobile": "automobile",
    /**
     * value: "wagon"
     * @const
     */
    "wagon": "wagon",
    /**
     * value: "ferry"
     * @const
     */
    "ferry": "ferry",
    /**
     * value: "trailer"
     * @const
     */
    "trailer": "trailer"  };


  return exports;
}));


