/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Br16Api) {
      root.Br16Api = {};
    }
    root.Br16Api.IcmsConfInterStateIcmsSTConf = factory(root.Br16Api.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The IcmsConfInterStateIcmsSTConf model module.
   * @module model/IcmsConfInterStateIcmsSTConf
   * @version 1.0
   */

  /**
   * Constructs a new <code>IcmsConfInterStateIcmsSTConf</code>.
   * @alias module:model/IcmsConfInterStateIcmsSTConf
   * @class
   */
  var exports = function() {
    var _this = this;









  };

  /**
   * Constructs a <code>IcmsConfInterStateIcmsSTConf</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IcmsConfInterStateIcmsSTConf} obj Optional instance to populate.
   * @return {module:model/IcmsConfInterStateIcmsSTConf} The populated <code>IcmsConfInterStateIcmsSTConf</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('protocolType')) {
        obj['protocolType'] = ApiClient.convertToType(data['protocolType'], 'String');
      }
      if (data.hasOwnProperty('hasReductionOfMVAForSimples')) {
        obj['hasReductionOfMVAForSimples'] = ApiClient.convertToType(data['hasReductionOfMVAForSimples'], 'Boolean');
      }
      if (data.hasOwnProperty('reductionOfMVAForSimples')) {
        obj['reductionOfMVAForSimples'] = ApiClient.convertToType(data['reductionOfMVAForSimples'], 'Number');
      }
      if (data.hasOwnProperty('calcMode')) {
        obj['calcMode'] = ApiClient.convertToType(data['calcMode'], 'String');
      }
      if (data.hasOwnProperty('icmsStBaseDiscount')) {
        obj['icmsStBaseDiscount'] = ApiClient.convertToType(data['icmsStBaseDiscount'], 'Number');
      }
      if (data.hasOwnProperty('mvaRate')) {
        obj['mvaRate'] = ApiClient.convertToType(data['mvaRate'], 'Number');
      }
      if (data.hasOwnProperty('srp')) {
        obj['srp'] = ApiClient.convertToType(data['srp'], 'Number');
      }
      if (data.hasOwnProperty('srpUnit')) {
        obj['srpUnit'] = ApiClient.convertToType(data['srpUnit'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {module:model/IcmsConfInterStateIcmsSTConf.ProtocolTypeEnum} protocolType
   */
  exports.prototype['protocolType'] = undefined;
  /**
   * inform that substituted is tax regime Simplified the operation MVA will be reduced
   * @member {Boolean} hasReductionOfMVAForSimples
   */
  exports.prototype['hasReductionOfMVAForSimples'] = undefined;
  /**
   * MVA reduction when substituted is tax regime Simplified.
   * @member {Number} reductionOfMVAForSimples
   */
  exports.prototype['reductionOfMVAForSimples'] = undefined;
  /**
   * how this ICMS-ST will be calculed for itens linked to this configuration
   * @member {module:model/IcmsConfInterStateIcmsSTConf.CalcModeEnum} calcMode
   */
  exports.prototype['calcMode'] = undefined;
  /**
   * ICMS rate - Redução da BC ICMS ST (%)
   * @member {Number} icmsStBaseDiscount
   */
  exports.prototype['icmsStBaseDiscount'] = undefined;
  /**
   * ICMS-ST MVA rate to define calc base
   * @member {Number} mvaRate
   */
  exports.prototype['mvaRate'] = undefined;
  /**
   * SRP or MSRP amount base for this ICMS-ST configuration
   * @member {Number} srp
   */
  exports.prototype['srp'] = undefined;
  /**
   * unit used to SRP amount value
   * @member {String} srpUnit
   */
  exports.prototype['srpUnit'] = undefined;


  /**
   * Allowed values for the <code>protocolType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ProtocolTypeEnum = {
    /**
     * value: "COVENANT"
     * @const
     */
    "COVENANT": "COVENANT",
    /**
     * value: "PROTOCOL"
     * @const
     */
    "PROTOCOL": "PROTOCOL",
    /**
     * value: "NOTHING"
     * @const
     */
    "NOTHING": "NOTHING"  };

  /**
   * Allowed values for the <code>calcMode</code> property.
   * @enum {String}
   * @readonly
   */
  exports.CalcModeEnum = {
    /**
     * value: "BYMVARATE"
     * @const
     */
    "BYMVARATE": "BYMVARATE",
    /**
     * value: "SRP"
     * @const
     */
    "SRP": "SRP",
    /**
     * value: "MSRP"
     * @const
     */
    "MSRP": "MSRP"  };


  return exports;
}));


