/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Fuel', 'model/LineForGoodsCalculatedTax', 'model/LineForGoodsDi', 'model/LineForGoodsExport', 'model/LineForGoodsIcmsTaxRelief', 'model/Medicine', 'model/Vehicle', 'model/Weapon'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Fuel'), require('./LineForGoodsCalculatedTax'), require('./LineForGoodsDi'), require('./LineForGoodsExport'), require('./LineForGoodsIcmsTaxRelief'), require('./Medicine'), require('./Vehicle'), require('./Weapon'));
  } else {
    // Browser globals (root is window)
    if (!root.Br16Api) {
      root.Br16Api = {};
    }
    root.Br16Api.LineForGoods = factory(root.Br16Api.ApiClient, root.Br16Api.Fuel, root.Br16Api.LineForGoodsCalculatedTax, root.Br16Api.LineForGoodsDi, root.Br16Api.LineForGoodsExport, root.Br16Api.LineForGoodsIcmsTaxRelief, root.Br16Api.Medicine, root.Br16Api.Vehicle, root.Br16Api.Weapon);
  }
}(this, function(ApiClient, Fuel, LineForGoodsCalculatedTax, LineForGoodsDi, LineForGoodsExport, LineForGoodsIcmsTaxRelief, Medicine, Vehicle, Weapon) {
  'use strict';




  /**
   * The LineForGoods model module.
   * @module model/LineForGoods
   * @version 1.0
   */

  /**
   * Constructs a new <code>LineForGoods</code>.
   * @alias module:model/LineForGoods
   * @class
   * @param lineCode {Number} This string is a unique identifier for this line in the transaction
   * @param itemCode {String} This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states.
   * @param numberOfItems {Number} This decimal 11 integers and 1 to 4 decimals captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1
   * @param lineAmount {Number} In its simplest form lineAmount = (item price * numberOfItems). If taxIncluded is 'true', lineAmount = (item price * numberOfItems + tax).
   * @param itemDescription {String} This string captures the description of the item represented by this line, will be used LC 116
   * @param useType {module:model/LineForGoods.UseTypeEnum} This is a enumeration folowing table
   * @param processScenario {String} Reference to process configurantion of this transaction, See ProcessScenario definition
   */
  var exports = function(lineCode, itemCode, numberOfItems, lineAmount, itemDescription, useType, processScenario) {
    var _this = this;

    _this['lineCode'] = lineCode;
    _this['itemCode'] = itemCode;

    _this['numberOfItems'] = numberOfItems;


    _this['lineAmount'] = lineAmount;
    _this['itemDescription'] = itemDescription;


    _this['useType'] = useType;
    _this['processScenario'] = processScenario;






















  };

  /**
   * Constructs a <code>LineForGoods</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/LineForGoods} obj Optional instance to populate.
   * @return {module:model/LineForGoods} The populated <code>LineForGoods</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('lineCode')) {
        obj['lineCode'] = ApiClient.convertToType(data['lineCode'], 'Number');
      }
      if (data.hasOwnProperty('itemCode')) {
        obj['itemCode'] = ApiClient.convertToType(data['itemCode'], 'String');
      }
      if (data.hasOwnProperty('avalaraGoodsAndServicesType')) {
        obj['avalaraGoodsAndServicesType'] = ApiClient.convertToType(data['avalaraGoodsAndServicesType'], 'String');
      }
      if (data.hasOwnProperty('numberOfItems')) {
        obj['numberOfItems'] = ApiClient.convertToType(data['numberOfItems'], 'Number');
      }
      if (data.hasOwnProperty('returnedPercentageAmount')) {
        obj['returnedPercentageAmount'] = ApiClient.convertToType(data['returnedPercentageAmount'], 'Number');
      }
      if (data.hasOwnProperty('lineUnitPrice')) {
        obj['lineUnitPrice'] = ApiClient.convertToType(data['lineUnitPrice'], 'Number');
      }
      if (data.hasOwnProperty('lineAmount')) {
        obj['lineAmount'] = ApiClient.convertToType(data['lineAmount'], 'Number');
      }
      if (data.hasOwnProperty('itemDescription')) {
        obj['itemDescription'] = ApiClient.convertToType(data['itemDescription'], 'String');
      }
      if (data.hasOwnProperty('lineTaxedDiscount')) {
        obj['lineTaxedDiscount'] = ApiClient.convertToType(data['lineTaxedDiscount'], 'Number');
      }
      if (data.hasOwnProperty('lineUntaxedDiscount')) {
        obj['lineUntaxedDiscount'] = ApiClient.convertToType(data['lineUntaxedDiscount'], 'Number');
      }
      if (data.hasOwnProperty('useType')) {
        obj['useType'] = ApiClient.convertToType(data['useType'], 'String');
      }
      if (data.hasOwnProperty('processScenario')) {
        obj['processScenario'] = ApiClient.convertToType(data['processScenario'], 'String');
      }
      if (data.hasOwnProperty('cfop')) {
        obj['cfop'] = ApiClient.convertToType(data['cfop'], 'Number');
      }
      if (data.hasOwnProperty('hasStockImpact')) {
        obj['hasStockImpact'] = ApiClient.convertToType(data['hasStockImpact'], 'Boolean');
      }
      if (data.hasOwnProperty('hasFinantialImpact')) {
        obj['hasFinantialImpact'] = ApiClient.convertToType(data['hasFinantialImpact'], 'Boolean');
      }
      if (data.hasOwnProperty('freightAmount')) {
        obj['freightAmount'] = ApiClient.convertToType(data['freightAmount'], 'Number');
      }
      if (data.hasOwnProperty('insuranceAmount')) {
        obj['insuranceAmount'] = ApiClient.convertToType(data['insuranceAmount'], 'Number');
      }
      if (data.hasOwnProperty('otherCostAmount')) {
        obj['otherCostAmount'] = ApiClient.convertToType(data['otherCostAmount'], 'Number');
      }
      if (data.hasOwnProperty('indTotType')) {
        obj['indTotType'] = ApiClient.convertToType(data['indTotType'], 'Boolean');
      }
      if (data.hasOwnProperty('orderNumber')) {
        obj['orderNumber'] = ApiClient.convertToType(data['orderNumber'], 'String');
      }
      if (data.hasOwnProperty('orderItemNumber')) {
        obj['orderItemNumber'] = ApiClient.convertToType(data['orderItemNumber'], 'String');
      }
      if (data.hasOwnProperty('fciNumber')) {
        obj['fciNumber'] = ApiClient.convertToType(data['fciNumber'], 'String');
      }
      if (data.hasOwnProperty('recopiNumber')) {
        obj['recopiNumber'] = ApiClient.convertToType(data['recopiNumber'], 'String');
      }
      if (data.hasOwnProperty('infAdProd')) {
        obj['infAdProd'] = ApiClient.convertToType(data['infAdProd'], 'String');
      }
      if (data.hasOwnProperty('vehicle')) {
        obj['vehicle'] = Vehicle.constructFromObject(data['vehicle']);
      }
      if (data.hasOwnProperty('medicine')) {
        obj['medicine'] = Medicine.constructFromObject(data['medicine']);
      }
      if (data.hasOwnProperty('weapon')) {
        obj['weapon'] = Weapon.constructFromObject(data['weapon']);
      }
      if (data.hasOwnProperty('fuel')) {
        obj['fuel'] = Fuel.constructFromObject(data['fuel']);
      }
      if (data.hasOwnProperty('entityIsIcmsSubstitute')) {
        obj['entityIsIcmsSubstitute'] = ApiClient.convertToType(data['entityIsIcmsSubstitute'], 'Boolean');
      }
      if (data.hasOwnProperty('isTransportIcmsWithheld')) {
        obj['isTransportIcmsWithheld'] = ApiClient.convertToType(data['isTransportIcmsWithheld'], 'Boolean');
      }
      if (data.hasOwnProperty('icmsTaxRelief')) {
        obj['icmsTaxRelief'] = LineForGoodsIcmsTaxRelief.constructFromObject(data['icmsTaxRelief']);
      }
      if (data.hasOwnProperty('export')) {
        obj['export'] = ApiClient.convertToType(data['export'], [LineForGoodsExport]);
      }
      if (data.hasOwnProperty('di')) {
        obj['di'] = ApiClient.convertToType(data['di'], [LineForGoodsDi]);
      }
      if (data.hasOwnProperty('calculatedTax')) {
        obj['calculatedTax'] = LineForGoodsCalculatedTax.constructFromObject(data['calculatedTax']);
      }
    }
    return obj;
  }

  /**
   * This string is a unique identifier for this line in the transaction
   * @member {Number} lineCode
   */
  exports.prototype['lineCode'] = undefined;
  /**
   * This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states.
   * @member {String} itemCode
   */
  exports.prototype['itemCode'] = undefined;
  /**
   * AGAST CODE for itemCode
   * @member {String} avalaraGoodsAndServicesType
   */
  exports.prototype['avalaraGoodsAndServicesType'] = undefined;
  /**
   * This decimal 11 integers and 1 to 4 decimals captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1
   * @member {Number} numberOfItems
   * @default 1.0
   */
  exports.prototype['numberOfItems'] = 1.0;
  /**
   * when is return operation this field inform the percentage of returned itens. This decimal max 3 integers and 2 decimals, v >=0.00 and v <= 100.00
   * @member {Number} returnedPercentageAmount
   */
  exports.prototype['returnedPercentageAmount'] = undefined;
  /**
   * This decimal 11 integers and 1 to 10 decimals captures the unit price of this line.
   * @member {Number} lineUnitPrice
   */
  exports.prototype['lineUnitPrice'] = undefined;
  /**
   * In its simplest form lineAmount = (item price * numberOfItems). If taxIncluded is 'true', lineAmount = (item price * numberOfItems + tax).
   * @member {Number} lineAmount
   */
  exports.prototype['lineAmount'] = undefined;
  /**
   * This string captures the description of the item represented by this line, will be used LC 116
   * @member {String} itemDescription
   */
  exports.prototype['itemDescription'] = undefined;
  /**
   * Discount conditional, This decimal 13 integers and 0 to 2 decimals
   * @member {Number} lineTaxedDiscount
   */
  exports.prototype['lineTaxedDiscount'] = undefined;
  /**
   * discount unconditional, This decimal 13 integers and 0 to 2 decimals
   * @member {Number} lineUntaxedDiscount
   */
  exports.prototype['lineUntaxedDiscount'] = undefined;
  /**
   * This is a enumeration folowing table
   * @member {module:model/LineForGoods.UseTypeEnum} useType
   */
  exports.prototype['useType'] = undefined;
  /**
   * Reference to process configurantion of this transaction, See ProcessScenario definition
   * @member {String} processScenario
   */
  exports.prototype['processScenario'] = undefined;
  /**
   * Fiscal Operation Code of transport service
   * @member {Number} cfop
   */
  exports.prototype['cfop'] = undefined;
  /**
   * return if this transaction has stock impact for this process or CFOP
   * @member {Boolean} hasStockImpact
   */
  exports.prototype['hasStockImpact'] = undefined;
  /**
   * return if this transaction has finantial impact for this process or CFOP
   * @member {Boolean} hasFinantialImpact
   */
  exports.prototype['hasFinantialImpact'] = undefined;
  /**
   * This decimal 13 integers and 0 to 2 decimals
   * @member {Number} freightAmount
   */
  exports.prototype['freightAmount'] = undefined;
  /**
   * This decimal 13 integers and 0 to 2 decimals
   * @member {Number} insuranceAmount
   */
  exports.prototype['insuranceAmount'] = undefined;
  /**
   * This decimal 13 integers and 0 to 2 decimals
   * @member {Number} otherCostAmount
   */
  exports.prototype['otherCostAmount'] = undefined;
  /**
   * The item value will compose the invoice total value.
   * @member {Boolean} indTotType
   * @default true
   */
  exports.prototype['indTotType'] = true;
  /**
   * order number, information used for B2B control process
   * @member {String} orderNumber
   */
  exports.prototype['orderNumber'] = undefined;
  /**
   * number of the item from order number, information used for B2B control process
   * @member {String} orderItemNumber
   */
  exports.prototype['orderItemNumber'] = undefined;
  /**
   * Gloal Unique identifier (Importation form)
   * @member {String} fciNumber
   */
  exports.prototype['fciNumber'] = undefined;
  /**
   * RECOPI number
   * @member {String} recopiNumber
   */
  exports.prototype['recopiNumber'] = undefined;
  /**
   * additional information about product (referenced standard, complementary info, etc)
   * @member {String} infAdProd
   */
  exports.prototype['infAdProd'] = undefined;
  /**
   * @member {module:model/Vehicle} vehicle
   */
  exports.prototype['vehicle'] = undefined;
  /**
   * @member {module:model/Medicine} medicine
   */
  exports.prototype['medicine'] = undefined;
  /**
   * @member {module:model/Weapon} weapon
   */
  exports.prototype['weapon'] = undefined;
  /**
   * @member {module:model/Fuel} fuel
   */
  exports.prototype['fuel'] = undefined;
  /**
   * Inform that for this item the Entity referenced is ICMS Substitute
   * @member {Boolean} entityIsIcmsSubstitute
   */
  exports.prototype['entityIsIcmsSubstitute'] = undefined;
  /**
   * Inform that this item has ICMS withheld for transport value service.
   * @member {Boolean} isTransportIcmsWithheld
   */
  exports.prototype['isTransportIcmsWithheld'] = undefined;
  /**
   * @member {module:model/LineForGoodsIcmsTaxRelief} icmsTaxRelief
   */
  exports.prototype['icmsTaxRelief'] = undefined;
  /**
   * Exportation detail
   * @member {Array.<module:model/LineForGoodsExport>} export
   */
  exports.prototype['export'] = undefined;
  /**
   * Import declaration
   * @member {Array.<module:model/LineForGoodsDi>} di
   */
  exports.prototype['di'] = undefined;
  /**
   * @member {module:model/LineForGoodsCalculatedTax} calculatedTax
   */
  exports.prototype['calculatedTax'] = undefined;


  /**
   * Allowed values for the <code>useType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.UseTypeEnum = {
    /**
     * value: "use or consumption"
     * @const
     */
    "use or consumption": "use or consumption",
    /**
     * value: "resale"
     * @const
     */
    "resale": "resale",
    /**
     * value: "agricultural production"
     * @const
     */
    "agricultural production": "agricultural production",
    /**
     * value: "production"
     * @const
     */
    "production": "production",
    /**
     * value: "use or consumption on business establishment"
     * @const
     */
    "use or consumption on business establishment": "use or consumption on business establishment",
    /**
     * value: "use or consumption on transporter service establishment"
     * @const
     */
    "use or consumption on transporter service establishment": "use or consumption on transporter service establishment",
    /**
     * value: "use or consumption on communication service establishment"
     * @const
     */
    "use or consumption on communication service establishment": "use or consumption on communication service establishment",
    /**
     * value: "use or consumption on demand by contract"
     * @const
     */
    "use or consumption on demand by contract": "use or consumption on demand by contract",
    /**
     * value: "use or consumption on energy supplier establishment"
     * @const
     */
    "use or consumption on energy supplier establishment": "use or consumption on energy supplier establishment",
    /**
     * value: "use or consumption of fuel transaction type exportation"
     * @const
     */
    "use or consumption of fuel transaction type exportation": "use or consumption of fuel transaction type exportation",
    /**
     * value: "fixed assets"
     * @const
     */
    "fixed assets": "fixed assets",
    /**
     * value: "resale export"
     * @const
     */
    "resale export": "resale export",
    /**
     * value: "resale icms exempt"
     * @const
     */
    "resale icms exempt": "resale icms exempt",
    /**
     * value: "resale buyer under the same icmsSt tax rule"
     * @const
     */
    "resale buyer under the same icmsSt tax rule": "resale buyer under the same icmsSt tax rule",
    /**
     * value: "transport of goods that don't need invoice (nf)"
     * @const
     */
    "transport of goods that don&#39;t need invoice (nf)": "transport of goods that don't need invoice (nf)"  };


  return exports;
}));


