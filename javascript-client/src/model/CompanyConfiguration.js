/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Br16Api) {
      root.Br16Api = {};
    }
    root.Br16Api.CompanyConfiguration = factory(root.Br16Api.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The CompanyConfiguration model module.
   * @module model/CompanyConfiguration
   * @version 1.0
   */

  /**
   * Constructs a new <code>CompanyConfiguration</code>.
   * @alias module:model/CompanyConfiguration
   * @class
   */
  var exports = function() {
    var _this = this;







  };

  /**
   * Constructs a <code>CompanyConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CompanyConfiguration} obj Optional instance to populate.
   * @return {module:model/CompanyConfiguration} The populated <code>CompanyConfiguration</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('certificate')) {
        obj['certificate'] = ApiClient.convertToType(data['certificate'], 'String');
      }
      if (data.hasOwnProperty('certificatepwd')) {
        obj['certificatepwd'] = ApiClient.convertToType(data['certificatepwd'], 'String');
      }
      if (data.hasOwnProperty('certificateexpiration')) {
        obj['certificateexpiration'] = ApiClient.convertToType(data['certificateexpiration'], 'Date');
      }
      if (data.hasOwnProperty('logo')) {
        obj['logo'] = ApiClient.convertToType(data['logo'], 'String');
      }
      if (data.hasOwnProperty('tpImpNFe')) {
        obj['tpImpNFe'] = ApiClient.convertToType(data['tpImpNFe'], 'String');
      }
      if (data.hasOwnProperty('tpImpNFCe')) {
        obj['tpImpNFCe'] = ApiClient.convertToType(data['tpImpNFCe'], 'String');
      }
    }
    return obj;
  }

  /**
   * digital certificate A1 model, p12, encoded by base64
   * @member {String} certificate
   */
  exports.prototype['certificate'] = undefined;
  /**
   * certificate password
   * @member {String} certificatepwd
   */
  exports.prototype['certificatepwd'] = undefined;
  /**
   * expiration date of this certificate
   * @member {Date} certificateexpiration
   */
  exports.prototype['certificateexpiration'] = undefined;
  /**
   * company logo image encoded by base64
   * @member {String} logo
   */
  exports.prototype['logo'] = undefined;
  /**
   * how the document will be printed - '0' # without DANFE; - '1' # DANFe Letter; - '2' # DANFe Landscape; 
   * @member {module:model/CompanyConfiguration.TpImpNFeEnum} tpImpNFe
   */
  exports.prototype['tpImpNFe'] = undefined;
  /**
   * how the document will be printed - '0' # without DANFE; - '4' # DANFe NFC-e; - '5' # DANFe NFC-e e-mail 
   * @member {module:model/CompanyConfiguration.TpImpNFCeEnum} tpImpNFCe
   */
  exports.prototype['tpImpNFCe'] = undefined;


  /**
   * Allowed values for the <code>tpImpNFe</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TpImpNFeEnum = {
    /**
     * value: "0"
     * @const
     */
    "0": "0",
    /**
     * value: "1"
     * @const
     */
    "1": "1",
    /**
     * value: "2"
     * @const
     */
    "2": "2"  };

  /**
   * Allowed values for the <code>tpImpNFCe</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TpImpNFCeEnum = {
    /**
     * value: "0"
     * @const
     */
    "0": "0",
    /**
     * value: "4"
     * @const
     */
    "4": "4",
    /**
     * value: "5"
     * @const
     */
    "5": "5"  };


  return exports;
}));


