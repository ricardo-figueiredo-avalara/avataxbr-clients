/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CSTTableAEnum', 'model/CSTTableBEnum', 'model/CalcModelEnum', 'model/DetailsCalculatedTax', 'model/ICMSSesonReason', 'model/StateEnum'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CSTTableAEnum'), require('./CSTTableBEnum'), require('./CalcModelEnum'), require('./DetailsCalculatedTax'), require('./ICMSSesonReason'), require('./StateEnum'));
  } else {
    // Browser globals (root is window)
    if (!root.AvaTaxBrazil) {
      root.AvaTaxBrazil = {};
    }
    root.AvaTaxBrazil.DetailsCalculatedTaxItem = factory(root.AvaTaxBrazil.ApiClient, root.AvaTaxBrazil.CSTTableAEnum, root.AvaTaxBrazil.CSTTableBEnum, root.AvaTaxBrazil.CalcModelEnum, root.AvaTaxBrazil.DetailsCalculatedTax, root.AvaTaxBrazil.ICMSSesonReason, root.AvaTaxBrazil.StateEnum);
  }
}(this, function(ApiClient, CSTTableAEnum, CSTTableBEnum, CalcModelEnum, DetailsCalculatedTax, ICMSSesonReason, StateEnum) {
  'use strict';




  /**
   * The DetailsCalculatedTaxItem model module.
   * @module model/DetailsCalculatedTaxItem
   * @version 1.0
   */

  /**
   * Constructs a new <code>DetailsCalculatedTaxItem</code>.
   * @alias module:model/DetailsCalculatedTaxItem
   * @class
   * @implements module:model/DetailsCalculatedTax
   */
  var exports = function() {
    var _this = this;

    DetailsCalculatedTax.call(_this);

















  };

  /**
   * Constructs a <code>DetailsCalculatedTaxItem</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DetailsCalculatedTaxItem} obj Optional instance to populate.
   * @return {module:model/DetailsCalculatedTaxItem} The populated <code>DetailsCalculatedTaxItem</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      DetailsCalculatedTax.constructFromObject(data, obj);
      if (data.hasOwnProperty('source')) {
        obj['source'] = CSTTableAEnum.constructFromObject(data['source']);
      }
      if (data.hasOwnProperty('cstB')) {
        obj['cstB'] = CSTTableBEnum.constructFromObject(data['cstB']);
      }
      if (data.hasOwnProperty('cst')) {
        obj['cst'] = ApiClient.convertToType(data['cst'], 'String');
      }
      if (data.hasOwnProperty('modBC')) {
        obj['modBC'] = ApiClient.convertToType(data['modBC'], 'String');
      }
      if (data.hasOwnProperty('pMVA')) {
        obj['pMVA'] = ApiClient.convertToType(data['pMVA'], 'Number');
      }
      if (data.hasOwnProperty('pRedBC')) {
        obj['pRedBC'] = ApiClient.convertToType(data['pRedBC'], 'Number');
      }
      if (data.hasOwnProperty('pBCOp')) {
        obj['pBCOp'] = ApiClient.convertToType(data['pBCOp'], 'Number');
      }
      if (data.hasOwnProperty('ufst')) {
        obj['ufst'] = StateEnum.constructFromObject(data['ufst']);
      }
      if (data.hasOwnProperty('calcMode')) {
        obj['calcMode'] = CalcModelEnum.constructFromObject(data['calcMode']);
      }
      if (data.hasOwnProperty('legalTaxClass')) {
        obj['legalTaxClass'] = ApiClient.convertToType(data['legalTaxClass'], 'Number');
      }
      if (data.hasOwnProperty('legalTaxClassDC')) {
        obj['legalTaxClassDC'] = ApiClient.convertToType(data['legalTaxClassDC'], 'Number');
      }
      if (data.hasOwnProperty('cnpjProd')) {
        obj['cnpjProd'] = ApiClient.convertToType(data['cnpjProd'], 'String');
      }
      if (data.hasOwnProperty('sealCode')) {
        obj['sealCode'] = ApiClient.convertToType(data['sealCode'], 'String');
      }
      if (data.hasOwnProperty('sealQuantity')) {
        obj['sealQuantity'] = ApiClient.convertToType(data['sealQuantity'], 'String');
      }
      if (data.hasOwnProperty('icmsInterPartRate')) {
        obj['icmsInterPartRate'] = ApiClient.convertToType(data['icmsInterPartRate'], 'Number');
      }
      if (data.hasOwnProperty('icmsSesonReason')) {
        obj['icmsSesonReason'] = ICMSSesonReason.constructFromObject(data['icmsSesonReason']);
      }
      if (data.hasOwnProperty('perQuantityReturned')) {
        obj['perQuantityReturned'] = ApiClient.convertToType(data['perQuantityReturned'], 'Number');
      }
    }
    return obj;
  }

  /**
   * @member {module:model/CSTTableAEnum} source
   */
  exports.prototype['source'] = undefined;
  /**
   * @member {module:model/CSTTableBEnum} cstB
   */
  exports.prototype['cstB'] = undefined;
  /**
   * @member {String} cst
   */
  exports.prototype['cst'] = undefined;
  /**
   * @member {String} modBC
   */
  exports.prototype['modBC'] = undefined;
  /**
   * Percent of Value-added margin (%)
   * @member {Number} pMVA
   */
  exports.prototype['pMVA'] = undefined;
  /**
   * calc base percent of discount
   * @member {Number} pRedBC
   */
  exports.prototype['pRedBC'] = undefined;
  /**
   * percent of calc base of own icms
   * @member {Number} pBCOp
   */
  exports.prototype['pBCOp'] = undefined;
  /**
   * @member {module:model/StateEnum} ufst
   */
  exports.prototype['ufst'] = undefined;
  /**
   * @member {module:model/CalcModelEnum} calcMode
   */
  exports.prototype['calcMode'] = undefined;
  /**
   * Legal tax classificação for IPI (enquadramento tributário)
   * @member {Number} legalTaxClass
   */
  exports.prototype['legalTaxClass'] = undefined;
  /**
   * Legal tax classificação for IPI (enquadramento) for Drinks and Cigarettes
   * @member {Number} legalTaxClassDC
   */
  exports.prototype['legalTaxClassDC'] = undefined;
  /**
   * CNPJ/CPF of Sales Buyer, if CPF pattern is '[0-9]{11}' if CNPJ pattern is '[0-9]{14}' Federal tax ID of real manufacturer, nly for exportation 
   * @member {String} cnpjProd
   */
  exports.prototype['cnpjProd'] = undefined;
  /**
   * Seal Code for ipi tax control (código do selo para controle de IPI)
   * @member {String} sealCode
   */
  exports.prototype['sealCode'] = undefined;
  /**
   * Seal Code for ipi tax control (código do selo para controle de IPI)
   * @member {String} sealQuantity
   */
  exports.prototype['sealQuantity'] = undefined;
  /**
   * percent of icms apportionment between two states
   * @member {Number} icmsInterPartRate
   */
  exports.prototype['icmsInterPartRate'] = undefined;
  /**
   * @member {module:model/ICMSSesonReason} icmsSesonReason
   */
  exports.prototype['icmsSesonReason'] = undefined;
  /**
   * percent of merchandise returned
   * @member {Number} perQuantityReturned
   */
  exports.prototype['perQuantityReturned'] = undefined;

  // Implement DetailsCalculatedTax interface:
  /**
   * This string captures the applicable location type. Location used for calc. Buyer or Seller
   * @member {String} locationType
   */
exports.prototype['locationType'] = undefined;

  /**
   * Jurisdiction used for calctax amount
   * @member {String} jurisdictionName
   */
exports.prototype['jurisdictionName'] = undefined;

  /**
   * Type of jurisdiction - 'City' - 'State' - 'Country' 
   * @member {module:model/DetailsCalculatedTax.JurisdictionTypeEnum} jurisdictionType
   * @default 'Country'
   */
exports.prototype['jurisdictionType'] = 'Country';

  /**
   * Tax identificator
   * @member {module:model/DetailsCalculatedTax.TaxTypeEnum} taxType
   */
exports.prototype['taxType'] = undefined;

  /**
   * Name of configuration rate
   * @member {String} rateType
   */
exports.prototype['rateType'] = undefined;

  /**
   * This string captures the transaction scenario used to calculate the tax for this tax type. Scenarios are specific to the tax type. This field provides information about how the tax engine interpreted the transaction information that was passed in.
   * @member {String} scenario
   */
exports.prototype['scenario'] = undefined;

  /**
   * This decimal captures how much of the lineAmount was taxable by this tax, calc base
   * @member {Number} subtotalTaxable
   */
exports.prototype['subtotalTaxable'] = undefined;

  /**
   * This decimal captures the tax rate for this tax.3.00 (3%)
   * @member {Number} rate
   */
exports.prototype['rate'] = undefined;

  /**
   * This decimal captures how much of the lineAmount was taxable by this tax
   * @member {Number} tax
   */
exports.prototype['tax'] = undefined;

  /**
   * This string is required if is exempt
   * @member {String} exemptionCode
   */
exports.prototype['exemptionCode'] = undefined;

  /**
   * This element captures the list of locations that contributed to the tax determination. for Service is Buyer and Seller Address
   * @member {Array.<String>} significantLocations
   */
exports.prototype['significantLocations'] = undefined;

  /**
   * This string with type of rule
   * @member {module:model/DetailsCalculatedTax.TaxRuleTypeEnum} taxRuleType
   */
exports.prototype['taxRuleType'] = undefined;



  return exports;
}));


