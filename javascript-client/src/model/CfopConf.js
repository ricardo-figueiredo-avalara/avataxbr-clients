/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CstIcmsEnum', 'model/IcmsTaxConf', 'model/TaxConf'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CstIcmsEnum'), require('./IcmsTaxConf'), require('./TaxConf'));
  } else {
    // Browser globals (root is window)
    if (!root.AvaTaxBrazil) {
      root.AvaTaxBrazil = {};
    }
    root.AvaTaxBrazil.CfopConf = factory(root.AvaTaxBrazil.ApiClient, root.AvaTaxBrazil.CstIcmsEnum, root.AvaTaxBrazil.IcmsTaxConf, root.AvaTaxBrazil.TaxConf);
  }
}(this, function(ApiClient, CstIcmsEnum, IcmsTaxConf, TaxConf) {
  'use strict';




  /**
   * The CfopConf model module.
   * @module model/CfopConf
   * @version 1.0
   */

  /**
   * Constructs a new <code>CfopConf</code>.
   * @alias module:model/CfopConf
   * @class
   * @implements module:model/TaxConf
   * @param code {String} main unique identificator
   * @param name {String} 
   */
  var exports = function(code, name) {
    var _this = this;

    TaxConf.call(_this, code);
    _this['name'] = name;













  };

  /**
   * Constructs a <code>CfopConf</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CfopConf} obj Optional instance to populate.
   * @return {module:model/CfopConf} The populated <code>CfopConf</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      TaxConf.constructFromObject(data, obj);
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('wayType')) {
        obj['wayType'] = ApiClient.convertToType(data['wayType'], 'String');
      }
      if (data.hasOwnProperty('codInState')) {
        obj['codInState'] = ApiClient.convertToType(data['codInState'], 'Number');
      }
      if (data.hasOwnProperty('codOtherState')) {
        obj['codOtherState'] = ApiClient.convertToType(data['codOtherState'], 'Number');
      }
      if (data.hasOwnProperty('codOtherCountry')) {
        obj['codOtherCountry'] = ApiClient.convertToType(data['codOtherCountry'], 'Number');
      }
      if (data.hasOwnProperty('cstICMSSameState')) {
        obj['cstICMSSameState'] = CstIcmsEnum.constructFromObject(data['cstICMSSameState']);
      }
      if (data.hasOwnProperty('cstICMSOtherState')) {
        obj['cstICMSOtherState'] = CstIcmsEnum.constructFromObject(data['cstICMSOtherState']);
      }
      if (data.hasOwnProperty('cstICMSOtherCountry')) {
        obj['cstICMSOtherCountry'] = CstIcmsEnum.constructFromObject(data['cstICMSOtherCountry']);
      }
      if (data.hasOwnProperty('productType')) {
        obj['productType'] = ApiClient.convertToType(data['productType'], 'String');
      }
      if (data.hasOwnProperty('operationToTaxPayerOtherState')) {
        obj['operationToTaxPayerOtherState'] = ApiClient.convertToType(data['operationToTaxPayerOtherState'], 'Boolean');
      }
      if (data.hasOwnProperty('operationWithST')) {
        obj['operationWithST'] = ApiClient.convertToType(data['operationWithST'], 'Boolean');
      }
      if (data.hasOwnProperty('operationToFreeZone')) {
        obj['operationToFreeZone'] = ApiClient.convertToType(data['operationToFreeZone'], 'Boolean');
      }
      if (data.hasOwnProperty('specificForProductClass')) {
        obj['specificForProductClass'] = ApiClient.convertToType(data['specificForProductClass'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * inform if the transaction is an operation to internalizing item or value
   * @member {module:model/CfopConf.WayTypeEnum} wayType
   */
  exports.prototype['wayType'] = undefined;
  /**
   * CFOP code (tax code operation) when the transactions are within the same state.
   * @member {Number} codInState
   */
  exports.prototype['codInState'] = undefined;
  /**
   * CFOP code (tax code operation) when the transactions are to another state.
   * @member {Number} codOtherState
   */
  exports.prototype['codOtherState'] = undefined;
  /**
   * CFOP code (tax code operation) when the transactions are to another country.
   * @member {Number} codOtherCountry
   */
  exports.prototype['codOtherCountry'] = undefined;
  /**
   * @member {module:model/CstIcmsEnum} cstICMSSameState
   */
  exports.prototype['cstICMSSameState'] = undefined;
  /**
   * @member {module:model/CstIcmsEnum} cstICMSOtherState
   */
  exports.prototype['cstICMSOtherState'] = undefined;
  /**
   * @member {module:model/CstIcmsEnum} cstICMSOtherCountry
   */
  exports.prototype['cstICMSOtherCountry'] = undefined;
  /**
   * this field is used to define right CFOP, one operation type can be specialized to item product, item merchandise or generic
   * @member {module:model/CfopConf.ProductTypeEnum} productType
   */
  exports.prototype['productType'] = undefined;
  /**
   * field used to indicate an operation to ICMS tax payer
   * @member {Boolean} operationToTaxPayerOtherState
   */
  exports.prototype['operationToTaxPayerOtherState'] = undefined;
  /**
   * field used to indicate an operation to items sibject to ICMS-ST
   * @member {Boolean} operationWithST
   */
  exports.prototype['operationWithST'] = undefined;
  /**
   * field used to indicate an operation to free zone
   * @member {Boolean} operationToFreeZone
   */
  exports.prototype['operationToFreeZone'] = undefined;
  /**
   * field used to indicate an operation to some product class specifically
   * @member {module:model/CfopConf.SpecificForProductClassEnum} specificForProductClass
   */
  exports.prototype['specificForProductClass'] = undefined;

  // Implement TaxConf interface:
  /**
   * main unique identificator
   * @member {String} code
   */
exports.prototype['code'] = undefined;

  /**
   * Inform that the process has inventory impact.
   * @member {Boolean} stockImpact
   */
exports.prototype['stockImpact'] = undefined;

  /**
   * Inform that the process has financial impact.
   * @member {Boolean} financialImpact
   */
exports.prototype['financialImpact'] = undefined;

  /**
   * Inform if this process is subject to IPI taxation on output process - 'T'  # TAXABLE - 'Z'  # TAXABLE WITH RATE=0.00 - 'E'  # EXEMPT - 'H'  # SUSPENDED - 'N'  # NO TAXABLE     - 'I'  # IMMUNE - 'O'  # OTHER - 'OZ' # OTHER AND ZERO VALUES 
   * @member {module:model/TaxConf.CstIPIEnum} cstIPI
   */
exports.prototype['cstIPI'] = undefined;

  /**
   * Legal tax classificação for IPI (enquadramento) When the processo has CST IPI 52 or 54, is mandatory inform Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo=mCnJajU4BKU= 
   * @member {String} ipiLegalTaxClass
   */
exports.prototype['ipiLegalTaxClass'] = undefined;

  /**
   * Inform if this item by nature is subject to PIS taxation or exempt - 'T' # TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'N' # NO TAXABLE - 'O' # OTHER - 'OZ'# OTHER AND ZERO VALUES 
   * @member {module:model/TaxConf.AccruablePISTaxationEnum} accruablePISTaxation
   */
exports.prototype['accruablePISTaxation'] = undefined;

  /**
   * Reference to a tax reason record ID.
   * @member {String} pisExemptLegalReasonCode
   */
exports.prototype['pisExemptLegalReasonCode'] = undefined;

  /**
   * When specifi reason, this field has the description
   * @member {String} pisExemptLegalReason
   */
exports.prototype['pisExemptLegalReason'] = undefined;

  /**
   * Inform if this item by nature is subject to COFINS taxation or exempt - 'T'  # TAXABLE - 'Z'  # TAXABLE WITH RATE=0.00 - 'E'  # EXEMPT - 'H'  # SUSPENDED - 'N'  # NO TAXABLE     - 'O'  # OTHER - 'OZ' # OTHER AND ZERO VALUES 
   * @member {module:model/TaxConf.AccruableCOFINSTaxationEnum} accruableCOFINSTaxation
   */
exports.prototype['accruableCOFINSTaxation'] = undefined;

  /**
   * When exempt, taxable with zero, suspended, not taxable, this field holds the official code number
   * @member {String} cofinsExemptLegalReasonCode
   */
exports.prototype['cofinsExemptLegalReasonCode'] = undefined;

  /**
   * When specifi reason, this field has the description
   * @member {String} cofinsExemptLegalReason
   */
exports.prototype['cofinsExemptLegalReason'] = undefined;

  /**
   * Inform that the process allow IPI credit to Input process
   * @member {Boolean} allowIPIcreditWhenInGoing
   */
exports.prototype['allowIPIcreditWhenInGoing'] = undefined;

  /**
   * the map key is state code
   * @member {Array.<module:model/IcmsTaxConf>} icmsConf
   */
exports.prototype['icmsConf'] = undefined;


  /**
   * Allowed values for the <code>wayType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.WayTypeEnum = {
    /**
     * value: "in"
     * @const
     */
    "in": "in",
    /**
     * value: "out"
     * @const
     */
    "out": "out"  };

  /**
   * Allowed values for the <code>productType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ProductTypeEnum = {
    /**
     * value: "FOR PRODUCT"
     * @const
     */
    "FOR PRODUCT": "FOR PRODUCT",
    /**
     * value: "FOR MERCHANDISE"
     * @const
     */
    "FOR MERCHANDISE": "FOR MERCHANDISE",
    /**
     * value: "NO RESTRICTION"
     * @const
     */
    "NO RESTRICTION": "NO RESTRICTION"  };

  /**
   * Allowed values for the <code>specificForProductClass</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SpecificForProductClassEnum = {
    /**
     * value: "OTHERS"
     * @const
     */
    "OTHERS": "OTHERS",
    /**
     * value: "COMMUNICATION"
     * @const
     */
    "COMMUNICATION": "COMMUNICATION",
    /**
     * value: "ENERGY"
     * @const
     */
    "ENERGY": "ENERGY",
    /**
     * value: "TRANSPORT"
     * @const
     */
    "TRANSPORT": "TRANSPORT",
    /**
     * value: "FUEL AND LUBRICANT"
     * @const
     */
    "FUEL AND LUBRICANT": "FUEL AND LUBRICANT",
    /**
     * value: "VEHICLE"
     * @const
     */
    "VEHICLE": "VEHICLE",
    /**
     * value: "ALCOHOLIC BEVERAGES"
     * @const
     */
    "ALCOHOLIC BEVERAGES": "ALCOHOLIC BEVERAGES",
    /**
     * value: "WEAPONS"
     * @const
     */
    "WEAPONS": "WEAPONS",
    /**
     * value: "AMMO"
     * @const
     */
    "AMMO": "AMMO",
    /**
     * value: "PERFUME"
     * @const
     */
    "PERFUME": "PERFUME",
    /**
     * value: "TOBACCO"
     * @const
     */
    "TOBACCO": "TOBACCO"  };


  return exports;
}));


