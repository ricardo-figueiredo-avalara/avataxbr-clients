/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/IcmsTaxConfBase', 'model/StateEnum'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./IcmsTaxConfBase'), require('./StateEnum'));
  } else {
    // Browser globals (root is window)
    if (!root.AvaTaxBrazil) {
      root.AvaTaxBrazil = {};
    }
    root.AvaTaxBrazil.IcmsTaxConf = factory(root.AvaTaxBrazil.ApiClient, root.AvaTaxBrazil.IcmsTaxConfBase, root.AvaTaxBrazil.StateEnum);
  }
}(this, function(ApiClient, IcmsTaxConfBase, StateEnum) {
  'use strict';




  /**
   * The IcmsTaxConf model module.
   * @module model/IcmsTaxConf
   * @version 1.0
   */

  /**
   * Constructs a new <code>IcmsTaxConf</code>.
   * @alias module:model/IcmsTaxConf
   * @class
   * @implements module:model/IcmsTaxConfBase
   * @param state {module:model/StateEnum} 
   */
  var exports = function(state) {
    var _this = this;

    IcmsTaxConfBase.call(_this, state);

  };

  /**
   * Constructs a <code>IcmsTaxConf</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IcmsTaxConf} obj Optional instance to populate.
   * @return {module:model/IcmsTaxConf} The populated <code>IcmsTaxConf</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      IcmsTaxConfBase.constructFromObject(data, obj);
      if (data.hasOwnProperty('relationShip')) {
        obj['relationShip'] = ApiClient.convertToType(data['relationShip'], [IcmsTaxConfBase]);
      }
    }
    return obj;
  }

  /**
   * the mapping key is state code / A chave do mapeamento é o código do Estado.
   * @member {Array.<module:model/IcmsTaxConfBase>} relationShip
   */
  exports.prototype['relationShip'] = undefined;

  // Implement IcmsTaxConfBase interface:
  /**
   * @member {module:model/StateEnum} state
   */
exports.prototype['state'] = undefined;

  /**
   * On sales process inform the CST hat the item linked to this configuration is subject to - '00' # TAXABLE - '20' # TAXABLE WITH BASE DISCOUNT - '40' # EXEMPT - '41' # NOT TAXABLE - '50' # SUSPENDED 
   * @member {module:model/IcmsTaxConfBase.IcmsCSTEnum} icmsCST
   */
exports.prototype['icmsCST'] = undefined;

  /**
   * Message to add to NF when this configuration is used
   * @member {String} messageCode
   */
exports.prototype['messageCode'] = undefined;



  return exports;
}));


