/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.AvaTaxBrazil) {
      root.AvaTaxBrazil = {};
    }
    root.AvaTaxBrazil.Vehicle = factory(root.AvaTaxBrazil.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Vehicle model module.
   * @module model/Vehicle
   * @version 1.0
   */

  /**
   * Constructs a new <code>Vehicle</code>.
   * @alias module:model/Vehicle
   * @class
   * @param tpOp {Number} - 1 # Sales by car dealership - 2 # Direct billing - 3 # Direct sales - 0 # Other 
   * @param chassisNumber {String} 
   * @param colorCode {String} color code used by factory
   * @param colorName {String} color name
   * @param cvPower {String} Power using CV unid
   * @param cylinderVolumCC {String} engine size in cubic centimeters
   * @param netWeight {String} net weight
   * @param grossWeight {String} gross weight
   * @param serialNumber {String} serie
   * @param fuelType {module:model/Vehicle.FuelTypeEnum} - '01' # Alcohol - '02' # Gas - '03' # Diesel - '16' # Alcohol/Gas - '17' # Gas/Alcohol/GNV - '18' # Gas/Electric 
   * @param engineNumber {String} engine number
   * @param cmt {String} traction capacity, tonne
   * @param lengthBetweenAxis {String} length between axis
   * @param modelYear {String} model year
   * @param manufactoryYear {String} year of factory
   * @param paintType {String} paynt type
   * @param vehicleRENAVAMType {String} 
   * @param specieRENAVAMType {String} 
   * @param modelRENAVAMCode {String} 
   * @param colorDENATRANCode {module:model/Vehicle.ColorDENATRANCodeEnum} - '01' # YELLOW - '02' # BLUE - '03' # BEIGE - '04' # WHITE - '05' # GRAY - '06' # GOLDEN - '07' # GRENA - '08' # ORANGE - '09' # BROWN - '10' # SILVER - '11' # BLACK - '12' # PINK - '13' # PURPLE - '14' # GREEN - '15' # RED - '16' # FANTASY 
   * @param vin {module:model/Vehicle.VinEnum} chassis condition original or modified (remarcado)
   * @param vehicleManufactoryStatus {module:model/Vehicle.VehicleManufactoryStatusEnum} - '1' # Finished(Done) - '2' # Not finished - '3' # Semi-finished 
   * @param maxOccupantsQuantity {String} max number of sit occupants
   * @param restrictionType {module:model/Vehicle.RestrictionTypeEnum} Lien/restriction type - '0' # No one; - '1' # Alienação Fiduciária; - '2' # Arrendamento Mercantil; - '3' # Reserva de Domínio; - '4' # Penhor de Veículos; - '9' # Other. 
   */
  var exports = function(tpOp, chassisNumber, colorCode, colorName, cvPower, cylinderVolumCC, netWeight, grossWeight, serialNumber, fuelType, engineNumber, cmt, lengthBetweenAxis, modelYear, manufactoryYear, paintType, vehicleRENAVAMType, specieRENAVAMType, modelRENAVAMCode, colorDENATRANCode, vin, vehicleManufactoryStatus, maxOccupantsQuantity, restrictionType) {
    var _this = this;

    _this['tpOp'] = tpOp;
    _this['chassisNumber'] = chassisNumber;
    _this['colorCode'] = colorCode;
    _this['colorName'] = colorName;
    _this['cvPower'] = cvPower;
    _this['cylinderVolumCC'] = cylinderVolumCC;
    _this['netWeight'] = netWeight;
    _this['grossWeight'] = grossWeight;
    _this['serialNumber'] = serialNumber;
    _this['fuelType'] = fuelType;
    _this['engineNumber'] = engineNumber;
    _this['cmt'] = cmt;
    _this['lengthBetweenAxis'] = lengthBetweenAxis;
    _this['modelYear'] = modelYear;
    _this['manufactoryYear'] = manufactoryYear;
    _this['paintType'] = paintType;
    _this['vehicleRENAVAMType'] = vehicleRENAVAMType;
    _this['specieRENAVAMType'] = specieRENAVAMType;
    _this['modelRENAVAMCode'] = modelRENAVAMCode;
    _this['colorDENATRANCode'] = colorDENATRANCode;
    _this['vin'] = vin;
    _this['vehicleManufactoryStatus'] = vehicleManufactoryStatus;
    _this['maxOccupantsQuantity'] = maxOccupantsQuantity;
    _this['restrictionType'] = restrictionType;
  };

  /**
   * Constructs a <code>Vehicle</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Vehicle} obj Optional instance to populate.
   * @return {module:model/Vehicle} The populated <code>Vehicle</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('tpOp')) {
        obj['tpOp'] = ApiClient.convertToType(data['tpOp'], 'Number');
      }
      if (data.hasOwnProperty('chassisNumber')) {
        obj['chassisNumber'] = ApiClient.convertToType(data['chassisNumber'], 'String');
      }
      if (data.hasOwnProperty('colorCode')) {
        obj['colorCode'] = ApiClient.convertToType(data['colorCode'], 'String');
      }
      if (data.hasOwnProperty('colorName')) {
        obj['colorName'] = ApiClient.convertToType(data['colorName'], 'String');
      }
      if (data.hasOwnProperty('cvPower')) {
        obj['cvPower'] = ApiClient.convertToType(data['cvPower'], 'String');
      }
      if (data.hasOwnProperty('cylinderVolumCC')) {
        obj['cylinderVolumCC'] = ApiClient.convertToType(data['cylinderVolumCC'], 'String');
      }
      if (data.hasOwnProperty('netWeight')) {
        obj['netWeight'] = ApiClient.convertToType(data['netWeight'], 'String');
      }
      if (data.hasOwnProperty('grossWeight')) {
        obj['grossWeight'] = ApiClient.convertToType(data['grossWeight'], 'String');
      }
      if (data.hasOwnProperty('serialNumber')) {
        obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
      }
      if (data.hasOwnProperty('fuelType')) {
        obj['fuelType'] = ApiClient.convertToType(data['fuelType'], 'String');
      }
      if (data.hasOwnProperty('engineNumber')) {
        obj['engineNumber'] = ApiClient.convertToType(data['engineNumber'], 'String');
      }
      if (data.hasOwnProperty('cmt')) {
        obj['cmt'] = ApiClient.convertToType(data['cmt'], 'String');
      }
      if (data.hasOwnProperty('lengthBetweenAxis')) {
        obj['lengthBetweenAxis'] = ApiClient.convertToType(data['lengthBetweenAxis'], 'String');
      }
      if (data.hasOwnProperty('modelYear')) {
        obj['modelYear'] = ApiClient.convertToType(data['modelYear'], 'String');
      }
      if (data.hasOwnProperty('manufactoryYear')) {
        obj['manufactoryYear'] = ApiClient.convertToType(data['manufactoryYear'], 'String');
      }
      if (data.hasOwnProperty('paintType')) {
        obj['paintType'] = ApiClient.convertToType(data['paintType'], 'String');
      }
      if (data.hasOwnProperty('vehicleRENAVAMType')) {
        obj['vehicleRENAVAMType'] = ApiClient.convertToType(data['vehicleRENAVAMType'], 'String');
      }
      if (data.hasOwnProperty('specieRENAVAMType')) {
        obj['specieRENAVAMType'] = ApiClient.convertToType(data['specieRENAVAMType'], 'String');
      }
      if (data.hasOwnProperty('modelRENAVAMCode')) {
        obj['modelRENAVAMCode'] = ApiClient.convertToType(data['modelRENAVAMCode'], 'String');
      }
      if (data.hasOwnProperty('colorDENATRANCode')) {
        obj['colorDENATRANCode'] = ApiClient.convertToType(data['colorDENATRANCode'], 'String');
      }
      if (data.hasOwnProperty('vin')) {
        obj['vin'] = ApiClient.convertToType(data['vin'], 'String');
      }
      if (data.hasOwnProperty('vehicleManufactoryStatus')) {
        obj['vehicleManufactoryStatus'] = ApiClient.convertToType(data['vehicleManufactoryStatus'], 'String');
      }
      if (data.hasOwnProperty('maxOccupantsQuantity')) {
        obj['maxOccupantsQuantity'] = ApiClient.convertToType(data['maxOccupantsQuantity'], 'String');
      }
      if (data.hasOwnProperty('restrictionType')) {
        obj['restrictionType'] = ApiClient.convertToType(data['restrictionType'], 'String');
      }
    }
    return obj;
  }

  /**
   * - 1 # Sales by car dealership - 2 # Direct billing - 3 # Direct sales - 0 # Other 
   * @member {Number} tpOp
   */
  exports.prototype['tpOp'] = undefined;
  /**
   * @member {String} chassisNumber
   */
  exports.prototype['chassisNumber'] = undefined;
  /**
   * color code used by factory
   * @member {String} colorCode
   */
  exports.prototype['colorCode'] = undefined;
  /**
   * color name
   * @member {String} colorName
   */
  exports.prototype['colorName'] = undefined;
  /**
   * Power using CV unid
   * @member {String} cvPower
   */
  exports.prototype['cvPower'] = undefined;
  /**
   * engine size in cubic centimeters
   * @member {String} cylinderVolumCC
   */
  exports.prototype['cylinderVolumCC'] = undefined;
  /**
   * net weight
   * @member {String} netWeight
   */
  exports.prototype['netWeight'] = undefined;
  /**
   * gross weight
   * @member {String} grossWeight
   */
  exports.prototype['grossWeight'] = undefined;
  /**
   * serie
   * @member {String} serialNumber
   */
  exports.prototype['serialNumber'] = undefined;
  /**
   * - '01' # Alcohol - '02' # Gas - '03' # Diesel - '16' # Alcohol/Gas - '17' # Gas/Alcohol/GNV - '18' # Gas/Electric 
   * @member {module:model/Vehicle.FuelTypeEnum} fuelType
   */
  exports.prototype['fuelType'] = undefined;
  /**
   * engine number
   * @member {String} engineNumber
   */
  exports.prototype['engineNumber'] = undefined;
  /**
   * traction capacity, tonne
   * @member {String} cmt
   */
  exports.prototype['cmt'] = undefined;
  /**
   * length between axis
   * @member {String} lengthBetweenAxis
   */
  exports.prototype['lengthBetweenAxis'] = undefined;
  /**
   * model year
   * @member {String} modelYear
   */
  exports.prototype['modelYear'] = undefined;
  /**
   * year of factory
   * @member {String} manufactoryYear
   */
  exports.prototype['manufactoryYear'] = undefined;
  /**
   * paynt type
   * @member {String} paintType
   */
  exports.prototype['paintType'] = undefined;
  /**
   * @member {String} vehicleRENAVAMType
   */
  exports.prototype['vehicleRENAVAMType'] = undefined;
  /**
   * @member {String} specieRENAVAMType
   */
  exports.prototype['specieRENAVAMType'] = undefined;
  /**
   * @member {String} modelRENAVAMCode
   */
  exports.prototype['modelRENAVAMCode'] = undefined;
  /**
   * - '01' # YELLOW - '02' # BLUE - '03' # BEIGE - '04' # WHITE - '05' # GRAY - '06' # GOLDEN - '07' # GRENA - '08' # ORANGE - '09' # BROWN - '10' # SILVER - '11' # BLACK - '12' # PINK - '13' # PURPLE - '14' # GREEN - '15' # RED - '16' # FANTASY 
   * @member {module:model/Vehicle.ColorDENATRANCodeEnum} colorDENATRANCode
   */
  exports.prototype['colorDENATRANCode'] = undefined;
  /**
   * chassis condition original or modified (remarcado)
   * @member {module:model/Vehicle.VinEnum} vin
   */
  exports.prototype['vin'] = undefined;
  /**
   * - '1' # Finished(Done) - '2' # Not finished - '3' # Semi-finished 
   * @member {module:model/Vehicle.VehicleManufactoryStatusEnum} vehicleManufactoryStatus
   */
  exports.prototype['vehicleManufactoryStatus'] = undefined;
  /**
   * max number of sit occupants
   * @member {String} maxOccupantsQuantity
   */
  exports.prototype['maxOccupantsQuantity'] = undefined;
  /**
   * Lien/restriction type - '0' # No one; - '1' # Alienação Fiduciária; - '2' # Arrendamento Mercantil; - '3' # Reserva de Domínio; - '4' # Penhor de Veículos; - '9' # Other. 
   * @member {module:model/Vehicle.RestrictionTypeEnum} restrictionType
   */
  exports.prototype['restrictionType'] = undefined;


  /**
   * Allowed values for the <code>fuelType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.FuelTypeEnum = {
    /**
     * value: "01"
     * @const
     */
    "01": "01",
    /**
     * value: "02"
     * @const
     */
    "02": "02",
    /**
     * value: "03"
     * @const
     */
    "03": "03",
    /**
     * value: "16"
     * @const
     */
    "16": "16",
    /**
     * value: "17"
     * @const
     */
    "17": "17",
    /**
     * value: "18"
     * @const
     */
    "18": "18"  };

  /**
   * Allowed values for the <code>colorDENATRANCode</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ColorDENATRANCodeEnum = {
    /**
     * value: "01"
     * @const
     */
    "01": "01",
    /**
     * value: "02"
     * @const
     */
    "02": "02",
    /**
     * value: "03"
     * @const
     */
    "03": "03",
    /**
     * value: "04"
     * @const
     */
    "04": "04",
    /**
     * value: "05"
     * @const
     */
    "05": "05",
    /**
     * value: "06"
     * @const
     */
    "06": "06",
    /**
     * value: "07"
     * @const
     */
    "07": "07",
    /**
     * value: "08"
     * @const
     */
    "08": "08",
    /**
     * value: "09"
     * @const
     */
    "09": "09",
    /**
     * value: "10"
     * @const
     */
    "10": "10",
    /**
     * value: "11"
     * @const
     */
    "11": "11",
    /**
     * value: "12"
     * @const
     */
    "12": "12",
    /**
     * value: "13"
     * @const
     */
    "13": "13",
    /**
     * value: "14"
     * @const
     */
    "14": "14",
    /**
     * value: "15"
     * @const
     */
    "15": "15",
    /**
     * value: "16"
     * @const
     */
    "16": "16"  };

  /**
   * Allowed values for the <code>vin</code> property.
   * @enum {String}
   * @readonly
   */
  exports.VinEnum = {
    /**
     * value: "R"
     * @const
     */
    "R": "R",
    /**
     * value: "N"
     * @const
     */
    "N": "N"  };

  /**
   * Allowed values for the <code>vehicleManufactoryStatus</code> property.
   * @enum {String}
   * @readonly
   */
  exports.VehicleManufactoryStatusEnum = {
    /**
     * value: "1"
     * @const
     */
    "1": "1",
    /**
     * value: "2"
     * @const
     */
    "2": "2",
    /**
     * value: "3"
     * @const
     */
    "3": "3"  };

  /**
   * Allowed values for the <code>restrictionType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.RestrictionTypeEnum = {
    /**
     * value: "0"
     * @const
     */
    "0": "0",
    /**
     * value: "1"
     * @const
     */
    "1": "1",
    /**
     * value: "2"
     * @const
     */
    "2": "2",
    /**
     * value: "3"
     * @const
     */
    "3": "3",
    /**
     * value: "4"
     * @const
     */
    "4": "4",
    /**
     * value: "9"
     * @const
     */
    "9": "9"  };


  return exports;
}));


