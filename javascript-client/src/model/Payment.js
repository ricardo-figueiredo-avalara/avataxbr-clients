/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PaymentBill', 'model/PaymentInstallment', 'model/PaymentPaymentMode'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./PaymentBill'), require('./PaymentInstallment'), require('./PaymentPaymentMode'));
  } else {
    // Browser globals (root is window)
    if (!root.AvaTaxBrazil) {
      root.AvaTaxBrazil = {};
    }
    root.AvaTaxBrazil.Payment = factory(root.AvaTaxBrazil.ApiClient, root.AvaTaxBrazil.PaymentBill, root.AvaTaxBrazil.PaymentInstallment, root.AvaTaxBrazil.PaymentPaymentMode);
  }
}(this, function(ApiClient, PaymentBill, PaymentInstallment, PaymentPaymentMode) {
  'use strict';




  /**
   * The Payment model module.
   * @module model/Payment
   * @version 1.0
   */

  /**
   * Constructs a new <code>Payment</code>.
   * @alias module:model/Payment
   * @class
   */
  var exports = function() {
    var _this = this;





  };

  /**
   * Constructs a <code>Payment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Payment} obj Optional instance to populate.
   * @return {module:model/Payment} The populated <code>Payment</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('installmentsTerms')) {
        obj['installmentsTerms'] = ApiClient.convertToType(data['installmentsTerms'], 'Number');
      }
      if (data.hasOwnProperty('bill')) {
        obj['bill'] = PaymentBill.constructFromObject(data['bill']);
      }
      if (data.hasOwnProperty('installment')) {
        obj['installment'] = ApiClient.convertToType(data['installment'], [PaymentInstallment]);
      }
      if (data.hasOwnProperty('paymentMode')) {
        obj['paymentMode'] = ApiClient.convertToType(data['paymentMode'], [PaymentPaymentMode]);
      }
    }
    return obj;
  }

  /**
   * Installment terms - 0 # cash - 1 # on terms - 2 # other 
   * @member {Number} installmentsTerms
   */
  exports.prototype['installmentsTerms'] = undefined;
  /**
   * @member {module:model/PaymentBill} bill
   */
  exports.prototype['bill'] = undefined;
  /**
   * @member {Array.<module:model/PaymentInstallment>} installment
   */
  exports.prototype['installment'] = undefined;
  /**
   * @member {Array.<module:model/PaymentPaymentMode>} paymentMode
   */
  exports.prototype['paymentMode'] = undefined;



  return exports;
}));


