/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AvaTaxBrazil);
  }
}(this, function(expect, AvaTaxBrazil) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AvaTaxBrazil.Company();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Company', function() {
    it('should create an instance of Company', function() {
      // uncomment below and update the code to test Company
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be.a(AvaTaxBrazil.Company);
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

    it('should have the property officialName (base name: "officialName")', function() {
      // uncomment below and update the code to test the property officialName
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

    it('should have the property entityType (base name: "entityType")', function() {
      // uncomment below and update the code to test the property entityType
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

    it('should have the property subjectToSRF1234 (base name: "subjectToSRF1234")', function() {
      // uncomment below and update the code to test the property subjectToSRF1234
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

    it('should have the property federalTaxRegime (base name: "federalTaxRegime")', function() {
      // uncomment below and update the code to test the property federalTaxRegime
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

    it('should have the property pisSubjectTo (base name: "pisSubjectTo")', function() {
      // uncomment below and update the code to test the property pisSubjectTo
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

    it('should have the property cofinsSubjectTo (base name: "cofinsSubjectTo")', function() {
      // uncomment below and update the code to test the property cofinsSubjectTo
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

    it('should have the property csllSubjectTo (base name: "csllSubjectTo")', function() {
      // uncomment below and update the code to test the property csllSubjectTo
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

    it('should have the property receiptsAreFullNoCumulativePisCofins (base name: "receiptsAreFullNoCumulativePisCofins")', function() {
      // uncomment below and update the code to test the property receiptsAreFullNoCumulativePisCofins
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

    it('should have the property inssWithholdSubjectTo (base name: "inssWithholdSubjectTo")', function() {
      // uncomment below and update the code to test the property inssWithholdSubjectTo
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

    it('should have the property issWithholdSubjectTo (base name: "issWithholdSubjectTo")', function() {
      // uncomment below and update the code to test the property issWithholdSubjectTo
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

    it('should have the property irrfWithholdSubjectTo (base name: "irrfWithholdSubjectTo")', function() {
      // uncomment below and update the code to test the property irrfWithholdSubjectTo
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

    it('should have the property icmsRateForSimplestaxregime (base name: "icmsRateForSimplestaxregime")', function() {
      // uncomment below and update the code to test the property icmsRateForSimplestaxregime
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

    it('should have the property isExemptByGrossRevenueForSimplestaxregime (base name: "isExemptByGrossRevenueForSimplestaxregime")', function() {
      // uncomment below and update the code to test the property isExemptByGrossRevenueForSimplestaxregime
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

    it('should have the property subjectToPayrollExemption (base name: "subjectToPayrollExemption")', function() {
      // uncomment below and update the code to test the property subjectToPayrollExemption
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

    it('should have the property configuration (base name: "configuration")', function() {
      // uncomment below and update the code to test the property configuration
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

    it('should have the property mailServer (base name: "mailServer")', function() {
      // uncomment below and update the code to test the property mailServer
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

    it('should have the property authorizedToDownloadNFe (base name: "authorizedToDownloadNFe")', function() {
      // uncomment below and update the code to test the property authorizedToDownloadNFe
      //var instane = new AvaTaxBrazil.Company();
      //expect(instance).to.be();
    });

  });

}));
