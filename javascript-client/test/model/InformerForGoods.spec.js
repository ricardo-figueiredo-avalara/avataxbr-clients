/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Br16Api);
  }
}(this, function(expect, Br16Api) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Br16Api.InformerForGoods();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InformerForGoods', function() {
    it('should create an instance of InformerForGoods', function() {
      // uncomment below and update the code to test InformerForGoods
      //var instane = new Br16Api.InformerForGoods();
      //expect(instance).to.be.a(Br16Api.InformerForGoods);
    });

    it('should have the property header (base name: "header")', function() {
      // uncomment below and update the code to test the property header
      //var instane = new Br16Api.InformerForGoods();
      //expect(instance).to.be();
    });

    it('should have the property line (base name: "line")', function() {
      // uncomment below and update the code to test the property line
      //var instane = new Br16Api.InformerForGoods();
      //expect(instance).to.be();
    });

    it('should have the property company (base name: "_company")', function() {
      // uncomment below and update the code to test the property company
      //var instane = new Br16Api.InformerForGoods();
      //expect(instance).to.be();
    });

    it('should have the property entity (base name: "_entity")', function() {
      // uncomment below and update the code to test the property entity
      //var instane = new Br16Api.InformerForGoods();
      //expect(instance).to.be();
    });

    it('should have the property emitter (base name: "emitter")', function() {
      // uncomment below and update the code to test the property emitter
      //var instane = new Br16Api.InformerForGoods();
      //expect(instance).to.be();
    });

    it('should have the property receiver (base name: "receiver")', function() {
      // uncomment below and update the code to test the property receiver
      //var instane = new Br16Api.InformerForGoods();
      //expect(instance).to.be();
    });

    it('should have the property transporter (base name: "transporter")', function() {
      // uncomment below and update the code to test the property transporter
      //var instane = new Br16Api.InformerForGoods();
      //expect(instance).to.be();
    });

    it('should have the property csts (base name: "csts")', function() {
      // uncomment below and update the code to test the property csts
      //var instane = new Br16Api.InformerForGoods();
      //expect(instance).to.be();
    });

    it('should have the property amount (base name: "amount")', function() {
      // uncomment below and update the code to test the property amount
      //var instane = new Br16Api.InformerForGoods();
      //expect(instance).to.be();
    });

    it('should have the property discount (base name: "discount")', function() {
      // uncomment below and update the code to test the property discount
      //var instane = new Br16Api.InformerForGoods();
      //expect(instance).to.be();
    });

    it('should have the property quantity (base name: "quantity")', function() {
      // uncomment below and update the code to test the property quantity
      //var instane = new Br16Api.InformerForGoods();
      //expect(instance).to.be();
    });

    it('should have the property unitPrice (base name: "unitPrice")', function() {
      // uncomment below and update the code to test the property unitPrice
      //var instane = new Br16Api.InformerForGoods();
      //expect(instance).to.be();
    });

    it('should have the property freightAmount (base name: "freightAmount")', function() {
      // uncomment below and update the code to test the property freightAmount
      //var instane = new Br16Api.InformerForGoods();
      //expect(instance).to.be();
    });

    it('should have the property insuranceAmount (base name: "insuranceAmount")', function() {
      // uncomment below and update the code to test the property insuranceAmount
      //var instane = new Br16Api.InformerForGoods();
      //expect(instance).to.be();
    });

    it('should have the property otherCostAmount (base name: "otherCostAmount")', function() {
      // uncomment below and update the code to test the property otherCostAmount
      //var instane = new Br16Api.InformerForGoods();
      //expect(instance).to.be();
    });

    it('should have the property exemptValue (base name: "exemptValue")', function() {
      // uncomment below and update the code to test the property exemptValue
      //var instane = new Br16Api.InformerForGoods();
      //expect(instance).to.be();
    });

  });

}));
