/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AvaTaxBrazil);
  }
}(this, function(expect, AvaTaxBrazil) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AvaTaxBrazil.Agast();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Agast', function() {
    it('should create an instance of Agast', function() {
      // uncomment below and update the code to test Agast
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be.a(AvaTaxBrazil.Agast);
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property hsCode (base name: "hsCode")', function() {
      // uncomment below and update the code to test the property hsCode
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property ex (base name: "ex")', function() {
      // uncomment below and update the code to test the property ex
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property cest (base name: "cest")', function() {
      // uncomment below and update the code to test the property cest
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property cean (base name: "cean")', function() {
      // uncomment below and update the code to test the property cean
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property codeType (base name: "codeType")', function() {
      // uncomment below and update the code to test the property codeType
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property cstIPI (base name: "cstIPI")', function() {
      // uncomment below and update the code to test the property cstIPI
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property ipiLegalTaxClass (base name: "ipiLegalTaxClass")', function() {
      // uncomment below and update the code to test the property ipiLegalTaxClass
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property pisCofinsTaxReporting (base name: "pisCofinsTaxReporting")', function() {
      // uncomment below and update the code to test the property pisCofinsTaxReporting
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property accruablePISTaxation (base name: "accruablePISTaxation")', function() {
      // uncomment below and update the code to test the property accruablePISTaxation
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property pisExemptLegalReasonCode (base name: "pisExemptLegalReasonCode")', function() {
      // uncomment below and update the code to test the property pisExemptLegalReasonCode
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property pisExemptLegalReason (base name: "pisExemptLegalReason")', function() {
      // uncomment below and update the code to test the property pisExemptLegalReason
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property accruableCOFINSTaxation (base name: "accruableCOFINSTaxation")', function() {
      // uncomment below and update the code to test the property accruableCOFINSTaxation
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property cofinsExemptLegalReasonCode (base name: "cofinsExemptLegalReasonCode")', function() {
      // uncomment below and update the code to test the property cofinsExemptLegalReasonCode
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property cofinsExemptLegalReason (base name: "cofinsExemptLegalReason")', function() {
      // uncomment below and update the code to test the property cofinsExemptLegalReason
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property accruableCSLLTaxation (base name: "accruableCSLLTaxation")', function() {
      // uncomment below and update the code to test the property accruableCSLLTaxation
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property csllExemptLegalReason (base name: "csllExemptLegalReason")', function() {
      // uncomment below and update the code to test the property csllExemptLegalReason
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property csllExemptLegalReasonCode (base name: "csllExemptLegalReasonCode")', function() {
      // uncomment below and update the code to test the property csllExemptLegalReasonCode
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property withholding (base name: "withholding")', function() {
      // uncomment below and update the code to test the property withholding
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property issDueatDestination (base name: "issDueatDestination")', function() {
      // uncomment below and update the code to test the property issDueatDestination
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property pisCofinsCreditNotAllowed (base name: "pisCofinsCreditNotAllowed")', function() {
      // uncomment below and update the code to test the property pisCofinsCreditNotAllowed
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property issTaxation (base name: "issTaxation")', function() {
      // uncomment below and update the code to test the property issTaxation
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property federalTaxRate (base name: "federalTaxRate")', function() {
      // uncomment below and update the code to test the property federalTaxRate
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property specialProductClass (base name: "specialProductClass")', function() {
      // uncomment below and update the code to test the property specialProductClass
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property icmsConf (base name: "icmsConf")', function() {
      // uncomment below and update the code to test the property icmsConf
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

    it('should have the property subjectToPayrollExemption (base name: "subjectToPayrollExemption")', function() {
      // uncomment below and update the code to test the property subjectToPayrollExemption
      //var instane = new AvaTaxBrazil.Agast();
      //expect(instance).to.be();
    });

  });

}));
