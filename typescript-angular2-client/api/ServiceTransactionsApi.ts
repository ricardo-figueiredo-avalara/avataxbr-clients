/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class ServiceTransactionsApi {
    protected basePath = 'https://br16-dev-app03.br.avalara.com/v2';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                (objA as any)[key] = (objB as any)[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * Retrieve transactions
     * Retrieve a single transaction
     * @param authorization Bearer {auth}
     * @param accountId Account ID
     * @param companyCode Company Code
     * @param transactionType Transaction Type (sale, purchase, receipts or payment)
     * @param documentCode Document Code
     */
    public transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(authorization: string, accountId: string, companyCode: string, transactionType: string, documentCode: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithHttpInfo(authorization, accountId, companyCode, transactionType, documentCode, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Transaction State Transition
     * Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
     * @param authorization Bearer {auth}
     * @param accountId Account ID
     * @param companyCode Company Code
     * @param transactionType Transaction Type (sale, purchase, receipts or payment)
     * @param documentCode Document Code
     * @param body Transaction Message
     */
    public transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost(authorization: string, accountId: string, companyCode: string, transactionType: string, documentCode: string, body: models.StateTransition, extraHttpRequestParams?: any): Observable<{}> {
        return this.transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostWithHttpInfo(authorization, accountId, companyCode, transactionType, documentCode, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Retrieve transactions
     * Retrieve a list of transactions
     * @param authorization Bearer {auth}
     * @param accountId Account ID
     * @param companyCode Company Code
     * @param transactionType Transaction Type (sale, purchase, receipts or payment)
     */
    public transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(authorization: string, accountId: string, companyCode: string, transactionType: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithHttpInfo(authorization, accountId, companyCode, transactionType, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth}
     * @param body Transaction Message
     */
    public transactionsservicePaymentPost(authorization: string, body: models.PaymentTransactionIn, extraHttpRequestParams?: any): Observable<models.PaymentTransactionOut> {
        return this.transactionsservicePaymentPostWithHttpInfo(authorization, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth}
     * @param body Transaction Message
     */
    public transactionsservicePurchasePost(authorization: string, body: models.PurchaseTransactionIn, extraHttpRequestParams?: any): Observable<models.PurchaseTransactionOut> {
        return this.transactionsservicePurchasePostWithHttpInfo(authorization, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth}
     * @param body Transaction Message
     */
    public transactionsserviceReceiptPost(authorization: string, body: models.ReceiptTransactionIn, extraHttpRequestParams?: any): Observable<models.ReceiptTransactionOut> {
        return this.transactionsserviceReceiptPostWithHttpInfo(authorization, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth}
     * @param body Transaction Message
     */
    public transactionsserviceSalesPost(authorization: string, body: models.SalesTransactionIn, extraHttpRequestParams?: any): Observable<models.SalesTransactionOut> {
        return this.transactionsserviceSalesPostWithHttpInfo(authorization, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Retrieve transactions
     * Retrieve a single transaction
     * @param authorization Bearer {auth}
     * @param accountId Account ID
     * @param companyCode Company Code
     * @param transactionType Transaction Type (sale, purchase, receipts or payment)
     * @param documentCode Document Code
     */
    public transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithHttpInfo(authorization: string, accountId: string, companyCode: string, transactionType: string, documentCode: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/transactions/account/${accountId}/company/${companyCode}/${transactionType}/${documentCode}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
        }
        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
        }
        // verify required parameter 'companyCode' is not null or undefined
        if (companyCode === null || companyCode === undefined) {
            throw new Error('Required parameter companyCode was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
        }
        // verify required parameter 'transactionType' is not null or undefined
        if (transactionType === null || transactionType === undefined) {
            throw new Error('Required parameter transactionType was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
        }
        // verify required parameter 'documentCode' is not null or undefined
        if (documentCode === null || documentCode === undefined) {
            throw new Error('Required parameter documentCode was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
        }

        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Transaction State Transition
     * Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
     * @param authorization Bearer {auth}
     * @param accountId Account ID
     * @param companyCode Company Code
     * @param transactionType Transaction Type (sale, purchase, receipts or payment)
     * @param documentCode Document Code
     * @param body Transaction Message
     */
    public transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostWithHttpInfo(authorization: string, accountId: string, companyCode: string, transactionType: string, documentCode: string, body: models.StateTransition, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/transactions/account/${accountId}/company/${companyCode}/${transactionType}/${documentCode}/stateTransitions`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost.');
        }
        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost.');
        }
        // verify required parameter 'companyCode' is not null or undefined
        if (companyCode === null || companyCode === undefined) {
            throw new Error('Required parameter companyCode was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost.');
        }
        // verify required parameter 'transactionType' is not null or undefined
        if (transactionType === null || transactionType === undefined) {
            throw new Error('Required parameter transactionType was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost.');
        }
        // verify required parameter 'documentCode' is not null or undefined
        if (documentCode === null || documentCode === undefined) {
            throw new Error('Required parameter documentCode was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost.');
        }

        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Retrieve transactions
     * Retrieve a list of transactions
     * @param authorization Bearer {auth}
     * @param accountId Account ID
     * @param companyCode Company Code
     * @param transactionType Transaction Type (sale, purchase, receipts or payment)
     */
    public transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithHttpInfo(authorization: string, accountId: string, companyCode: string, transactionType: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/transactions/account/${accountId}/company/${companyCode}/${transactionType}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet.');
        }
        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet.');
        }
        // verify required parameter 'companyCode' is not null or undefined
        if (companyCode === null || companyCode === undefined) {
            throw new Error('Required parameter companyCode was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet.');
        }
        // verify required parameter 'transactionType' is not null or undefined
        if (transactionType === null || transactionType === undefined) {
            throw new Error('Required parameter transactionType was null or undefined when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet.');
        }

        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth}
     * @param body Transaction Message
     */
    public transactionsservicePaymentPostWithHttpInfo(authorization: string, body: models.PaymentTransactionIn, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/transactions?service-payment`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling transactionsservicePaymentPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling transactionsservicePaymentPost.');
        }

        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth}
     * @param body Transaction Message
     */
    public transactionsservicePurchasePostWithHttpInfo(authorization: string, body: models.PurchaseTransactionIn, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/transactions?service-purchase`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling transactionsservicePurchasePost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling transactionsservicePurchasePost.');
        }

        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth}
     * @param body Transaction Message
     */
    public transactionsserviceReceiptPostWithHttpInfo(authorization: string, body: models.ReceiptTransactionIn, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/transactions?service-receipt`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling transactionsserviceReceiptPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling transactionsserviceReceiptPost.');
        }

        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth}
     * @param body Transaction Message
     */
    public transactionsserviceSalesPostWithHttpInfo(authorization: string, body: models.SalesTransactionIn, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/transactions?service-sales`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling transactionsserviceSalesPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling transactionsserviceSalesPost.');
        }

        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
