/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class ServiceCalculationsApi {
    protected basePath = 'http://avataxbr-sandbox.avalarabrasil.com.br/v2';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                (objA as any)[key] = (objB as any)[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * Retrieve transactions
     * Retrieve a single transaction
     * @param authorization Bearer {auth}
     * @param accountId Account ID
     * @param companyCode Company Code
     * @param transactionType Transaction Type (sale, purchase, receipts or payment)
     * @param documentCode Document Code
     */
    public calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(authorization: string, accountId: string, companyCode: string, transactionType: string, documentCode: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithHttpInfo(authorization, accountId, companyCode, transactionType, documentCode, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Promote a calculation to transaction
     * Promote a calculation to transaction
     * @param authorization Bearer {auth}
     * @param accountId Account ID
     * @param companyCode Company Code
     * @param transactionType Transaction Type (sale, purchase, receipts or payment)
     * @param documentCode Document Code
     */
    public calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost(authorization: string, accountId: string, companyCode: string, transactionType: string, documentCode: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostWithHttpInfo(authorization, accountId, companyCode, transactionType, documentCode, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Retrieve transactions
     * Retrieve a list of transactions
     * @param authorization Bearer {auth}
     * @param accountId Account ID
     * @param companyCode Company Code
     * @param transactionType Transaction Type (sale, purchase, receipts or payment)
     */
    public calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(authorization: string, accountId: string, companyCode: string, transactionType: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithHttpInfo(authorization, accountId, companyCode, transactionType, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth}
     * @param body Transaction Message
     */
    public calculationsservicePaymentPost(authorization: string, body: models.PaymentTransactionIn, extraHttpRequestParams?: any): Observable<models.PaymentTransactionOut> {
        return this.calculationsservicePaymentPostWithHttpInfo(authorization, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth}
     * @param body Transaction Message
     */
    public calculationsservicePurchasePost(authorization: string, body: models.PurchaseTransactionIn, extraHttpRequestParams?: any): Observable<models.PurchaseTransactionOut> {
        return this.calculationsservicePurchasePostWithHttpInfo(authorization, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth}
     * @param body Transaction Message
     */
    public calculationsserviceReceiptPost(authorization: string, body: models.ReceiptTransactionIn, extraHttpRequestParams?: any): Observable<models.ReceiptTransactionOut> {
        return this.calculationsserviceReceiptPostWithHttpInfo(authorization, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
     * @param authorization Bearer {auth}
     * @param body Transaction Message
     */
    public calculationsserviceSalesPost(authorization: string, body: models.SalesTransactionIn, extraHttpRequestParams?: any): Observable<models.SalesTransactionOut> {
        return this.calculationsserviceSalesPostWithHttpInfo(authorization, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Retrieve transactions
     * Retrieve a single transaction
     * @param authorization Bearer {auth}
     * @param accountId Account ID
     * @param companyCode Company Code
     * @param transactionType Transaction Type (sale, purchase, receipts or payment)
     * @param documentCode Document Code
     */
    public calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithHttpInfo(authorization: string, accountId: string, companyCode: string, transactionType: string, documentCode: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/calculations/account/${accountId}/company/${companyCode}/${transactionType}/${documentCode}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
        }
        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
        }
        // verify required parameter 'companyCode' is not null or undefined
        if (companyCode === null || companyCode === undefined) {
            throw new Error('Required parameter companyCode was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
        }
        // verify required parameter 'transactionType' is not null or undefined
        if (transactionType === null || transactionType === undefined) {
            throw new Error('Required parameter transactionType was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
        }
        // verify required parameter 'documentCode' is not null or undefined
        if (documentCode === null || documentCode === undefined) {
            throw new Error('Required parameter documentCode was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet.');
        }

        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Promote a calculation to transaction
     * Promote a calculation to transaction
     * @param authorization Bearer {auth}
     * @param accountId Account ID
     * @param companyCode Company Code
     * @param transactionType Transaction Type (sale, purchase, receipts or payment)
     * @param documentCode Document Code
     */
    public calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPostWithHttpInfo(authorization: string, accountId: string, companyCode: string, transactionType: string, documentCode: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/calculations/account/${accountId}/company/${companyCode}/${transactionType}/${documentCode}/transactions`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost.');
        }
        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost.');
        }
        // verify required parameter 'companyCode' is not null or undefined
        if (companyCode === null || companyCode === undefined) {
            throw new Error('Required parameter companyCode was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost.');
        }
        // verify required parameter 'transactionType' is not null or undefined
        if (transactionType === null || transactionType === undefined) {
            throw new Error('Required parameter transactionType was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost.');
        }
        // verify required parameter 'documentCode' is not null or undefined
        if (documentCode === null || documentCode === undefined) {
            throw new Error('Required parameter documentCode was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost.');
        }

        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Retrieve transactions
     * Retrieve a list of transactions
     * @param authorization Bearer {auth}
     * @param accountId Account ID
     * @param companyCode Company Code
     * @param transactionType Transaction Type (sale, purchase, receipts or payment)
     */
    public calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithHttpInfo(authorization: string, accountId: string, companyCode: string, transactionType: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/calculations/account/${accountId}/company/${companyCode}/${transactionType}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet.');
        }
        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet.');
        }
        // verify required parameter 'companyCode' is not null or undefined
        if (companyCode === null || companyCode === undefined) {
            throw new Error('Required parameter companyCode was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet.');
        }
        // verify required parameter 'transactionType' is not null or undefined
        if (transactionType === null || transactionType === undefined) {
            throw new Error('Required parameter transactionType was null or undefined when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet.');
        }

        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth}
     * @param body Transaction Message
     */
    public calculationsservicePaymentPostWithHttpInfo(authorization: string, body: models.PaymentTransactionIn, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/calculations?service-payment`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling calculationsservicePaymentPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling calculationsservicePaymentPost.');
        }

        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth}
     * @param body Transaction Message
     */
    public calculationsservicePurchasePostWithHttpInfo(authorization: string, body: models.PurchaseTransactionIn, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/calculations?service-purchase`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling calculationsservicePurchasePost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling calculationsservicePurchasePost.');
        }

        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     * @param authorization Bearer {auth}
     * @param body Transaction Message
     */
    public calculationsserviceReceiptPostWithHttpInfo(authorization: string, body: models.ReceiptTransactionIn, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/calculations?service-receipt`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling calculationsserviceReceiptPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling calculationsserviceReceiptPost.');
        }

        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Calculation Method
     * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
     * @param authorization Bearer {auth}
     * @param body Transaction Message
     */
    public calculationsserviceSalesPostWithHttpInfo(authorization: string, body: models.SalesTransactionIn, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/calculations?service-sales`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling calculationsserviceSalesPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling calculationsserviceSalesPost.');
        }

        headers.set('Authorization', String(authorization));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
