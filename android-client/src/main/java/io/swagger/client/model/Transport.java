/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.client.model.TransportVolumes;
import io.swagger.client.model.VehicleTransp;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class Transport {
  
  public enum ModFreightEnum {
     CIF,  FOB,  Thridparty,  FreeShipping, 
  };
  @SerializedName("modFreight")
  private ModFreightEnum modFreight = null;
  @SerializedName("withholdICMSTransport")
  private Boolean withholdICMSTransport = null;
  @SerializedName("volumes")
  private List<TransportVolumes> volumes = null;
  @SerializedName("vehicle")
  private VehicleTransp vehicle = null;

  /**
   * Freight model  - 0 - CIF,  - 1 - FOB,  - 2 - Thrid party, - 9 - Free shipping when 9 - Free shipping, the fields below will be ignored if present - 'transporter' - 'withholdICMSTransport' - 'volumes' - 'vehicle' 
   **/
  @ApiModelProperty(required = true, value = "Freight model  - 0 - CIF,  - 1 - FOB,  - 2 - Thrid party, - 9 - Free shipping when 9 - Free shipping, the fields below will be ignored if present - 'transporter' - 'withholdICMSTransport' - 'volumes' - 'vehicle' ")
  public ModFreightEnum getModFreight() {
    return modFreight;
  }
  public void setModFreight(ModFreightEnum modFreight) {
    this.modFreight = modFreight;
  }

  /**
   * Forces witholding of ICMS on transport amount (freight)
   **/
  @ApiModelProperty(value = "Forces witholding of ICMS on transport amount (freight)")
  public Boolean getWithholdICMSTransport() {
    return withholdICMSTransport;
  }
  public void setWithholdICMSTransport(Boolean withholdICMSTransport) {
    this.withholdICMSTransport = withholdICMSTransport;
  }

  /**
   * Packages
   **/
  @ApiModelProperty(value = "Packages")
  public List<TransportVolumes> getVolumes() {
    return volumes;
  }
  public void setVolumes(List<TransportVolumes> volumes) {
    this.volumes = volumes;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public VehicleTransp getVehicle() {
    return vehicle;
  }
  public void setVehicle(VehicleTransp vehicle) {
    this.vehicle = vehicle;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transport transport = (Transport) o;
    return (this.modFreight == null ? transport.modFreight == null : this.modFreight.equals(transport.modFreight)) &&
        (this.withholdICMSTransport == null ? transport.withholdICMSTransport == null : this.withholdICMSTransport.equals(transport.withholdICMSTransport)) &&
        (this.volumes == null ? transport.volumes == null : this.volumes.equals(transport.volumes)) &&
        (this.vehicle == null ? transport.vehicle == null : this.vehicle.equals(transport.vehicle));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.modFreight == null ? 0: this.modFreight.hashCode());
    result = 31 * result + (this.withholdICMSTransport == null ? 0: this.withholdICMSTransport.hashCode());
    result = 31 * result + (this.volumes == null ? 0: this.volumes.hashCode());
    result = 31 * result + (this.vehicle == null ? 0: this.vehicle.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transport {\n");
    
    sb.append("  modFreight: ").append(modFreight).append("\n");
    sb.append("  withholdICMSTransport: ").append(withholdICMSTransport).append("\n");
    sb.append("  volumes: ").append(volumes).append("\n");
    sb.append("  vehicle: ").append(vehicle).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
