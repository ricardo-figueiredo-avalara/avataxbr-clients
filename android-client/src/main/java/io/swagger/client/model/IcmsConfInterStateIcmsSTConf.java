/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class IcmsConfInterStateIcmsSTConf {
  
  public enum ProtocolTypeEnum {
     COVENANT,  PROTOCOL,  NOTHING, 
  };
  @SerializedName("protocolType")
  private ProtocolTypeEnum protocolType = null;
  @SerializedName("hasReductionOfMVAForSimples")
  private Boolean hasReductionOfMVAForSimples = null;
  @SerializedName("reductionOfMVAForSimples")
  private Double reductionOfMVAForSimples = null;
  public enum CalcModeEnum {
     BYMVARATE,  SRP,  MSRP, 
  };
  @SerializedName("calcMode")
  private CalcModeEnum calcMode = null;
  @SerializedName("icmsStBaseDiscount")
  private Double icmsStBaseDiscount = null;
  @SerializedName("mvaRate")
  private Double mvaRate = null;
  @SerializedName("srp")
  private Double srp = null;
  @SerializedName("srpUnit")
  private String srpUnit = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public ProtocolTypeEnum getProtocolType() {
    return protocolType;
  }
  public void setProtocolType(ProtocolTypeEnum protocolType) {
    this.protocolType = protocolType;
  }

  /**
   * inform that substituted is tax regime Simplified the operation MVA will be reduced
   **/
  @ApiModelProperty(value = "inform that substituted is tax regime Simplified the operation MVA will be reduced")
  public Boolean getHasReductionOfMVAForSimples() {
    return hasReductionOfMVAForSimples;
  }
  public void setHasReductionOfMVAForSimples(Boolean hasReductionOfMVAForSimples) {
    this.hasReductionOfMVAForSimples = hasReductionOfMVAForSimples;
  }

  /**
   * MVA reduction when substituted is tax regime Simplified.
   **/
  @ApiModelProperty(value = "MVA reduction when substituted is tax regime Simplified.")
  public Double getReductionOfMVAForSimples() {
    return reductionOfMVAForSimples;
  }
  public void setReductionOfMVAForSimples(Double reductionOfMVAForSimples) {
    this.reductionOfMVAForSimples = reductionOfMVAForSimples;
  }

  /**
   * how this ICMS-ST will be calculed for itens linked to this configuration
   **/
  @ApiModelProperty(value = "how this ICMS-ST will be calculed for itens linked to this configuration")
  public CalcModeEnum getCalcMode() {
    return calcMode;
  }
  public void setCalcMode(CalcModeEnum calcMode) {
    this.calcMode = calcMode;
  }

  /**
   * ICMS rate - Redução da BC ICMS ST (%)
   **/
  @ApiModelProperty(value = "ICMS rate - Redução da BC ICMS ST (%)")
  public Double getIcmsStBaseDiscount() {
    return icmsStBaseDiscount;
  }
  public void setIcmsStBaseDiscount(Double icmsStBaseDiscount) {
    this.icmsStBaseDiscount = icmsStBaseDiscount;
  }

  /**
   * ICMS-ST MVA rate to define calc base
   **/
  @ApiModelProperty(value = "ICMS-ST MVA rate to define calc base")
  public Double getMvaRate() {
    return mvaRate;
  }
  public void setMvaRate(Double mvaRate) {
    this.mvaRate = mvaRate;
  }

  /**
   * SRP or MSRP amount base for this ICMS-ST configuration
   **/
  @ApiModelProperty(value = "SRP or MSRP amount base for this ICMS-ST configuration")
  public Double getSrp() {
    return srp;
  }
  public void setSrp(Double srp) {
    this.srp = srp;
  }

  /**
   * unit used to SRP amount value
   **/
  @ApiModelProperty(value = "unit used to SRP amount value")
  public String getSrpUnit() {
    return srpUnit;
  }
  public void setSrpUnit(String srpUnit) {
    this.srpUnit = srpUnit;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IcmsConfInterStateIcmsSTConf icmsConfInterStateIcmsSTConf = (IcmsConfInterStateIcmsSTConf) o;
    return (this.protocolType == null ? icmsConfInterStateIcmsSTConf.protocolType == null : this.protocolType.equals(icmsConfInterStateIcmsSTConf.protocolType)) &&
        (this.hasReductionOfMVAForSimples == null ? icmsConfInterStateIcmsSTConf.hasReductionOfMVAForSimples == null : this.hasReductionOfMVAForSimples.equals(icmsConfInterStateIcmsSTConf.hasReductionOfMVAForSimples)) &&
        (this.reductionOfMVAForSimples == null ? icmsConfInterStateIcmsSTConf.reductionOfMVAForSimples == null : this.reductionOfMVAForSimples.equals(icmsConfInterStateIcmsSTConf.reductionOfMVAForSimples)) &&
        (this.calcMode == null ? icmsConfInterStateIcmsSTConf.calcMode == null : this.calcMode.equals(icmsConfInterStateIcmsSTConf.calcMode)) &&
        (this.icmsStBaseDiscount == null ? icmsConfInterStateIcmsSTConf.icmsStBaseDiscount == null : this.icmsStBaseDiscount.equals(icmsConfInterStateIcmsSTConf.icmsStBaseDiscount)) &&
        (this.mvaRate == null ? icmsConfInterStateIcmsSTConf.mvaRate == null : this.mvaRate.equals(icmsConfInterStateIcmsSTConf.mvaRate)) &&
        (this.srp == null ? icmsConfInterStateIcmsSTConf.srp == null : this.srp.equals(icmsConfInterStateIcmsSTConf.srp)) &&
        (this.srpUnit == null ? icmsConfInterStateIcmsSTConf.srpUnit == null : this.srpUnit.equals(icmsConfInterStateIcmsSTConf.srpUnit));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.protocolType == null ? 0: this.protocolType.hashCode());
    result = 31 * result + (this.hasReductionOfMVAForSimples == null ? 0: this.hasReductionOfMVAForSimples.hashCode());
    result = 31 * result + (this.reductionOfMVAForSimples == null ? 0: this.reductionOfMVAForSimples.hashCode());
    result = 31 * result + (this.calcMode == null ? 0: this.calcMode.hashCode());
    result = 31 * result + (this.icmsStBaseDiscount == null ? 0: this.icmsStBaseDiscount.hashCode());
    result = 31 * result + (this.mvaRate == null ? 0: this.mvaRate.hashCode());
    result = 31 * result + (this.srp == null ? 0: this.srp.hashCode());
    result = 31 * result + (this.srpUnit == null ? 0: this.srpUnit.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class IcmsConfInterStateIcmsSTConf {\n");
    
    sb.append("  protocolType: ").append(protocolType).append("\n");
    sb.append("  hasReductionOfMVAForSimples: ").append(hasReductionOfMVAForSimples).append("\n");
    sb.append("  reductionOfMVAForSimples: ").append(reductionOfMVAForSimples).append("\n");
    sb.append("  calcMode: ").append(calcMode).append("\n");
    sb.append("  icmsStBaseDiscount: ").append(icmsStBaseDiscount).append("\n");
    sb.append("  mvaRate: ").append(mvaRate).append("\n");
    sb.append("  srp: ").append(srp).append("\n");
    sb.append("  srpUnit: ").append(srpUnit).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
