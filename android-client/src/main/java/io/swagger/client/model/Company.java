/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.client.model.CompanyAuthorizedToDownloadNFe;
import io.swagger.client.model.CompanyConfiguration;
import io.swagger.client.model.CompanyMailServer;
import io.swagger.client.model.EntityType;
import io.swagger.client.model.FederalTaxRegime;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class Company {
  
  @SerializedName("code")
  private String code = null;
  @SerializedName("officialName")
  private String officialName = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("entityType")
  private EntityType entityType = null;
  @SerializedName("subjectToSRF1234")
  private Boolean subjectToSRF1234 = null;
  @SerializedName("federalTaxRegime")
  private FederalTaxRegime federalTaxRegime = null;
  public enum PisSubjectToEnum {
     TAXABLE,  NOT TAXABLE,  EXEMPT, 
  };
  @SerializedName("pisSubjectTo")
  private PisSubjectToEnum pisSubjectTo = null;
  public enum CofinsSubjectToEnum {
     TAXABLE,  NOT TAXABLE,  EXEMPT, 
  };
  @SerializedName("cofinsSubjectTo")
  private CofinsSubjectToEnum cofinsSubjectTo = null;
  public enum CsllSubjectToEnum {
     TAXABLE,  NOT TAXABLE,  EXEMPT, 
  };
  @SerializedName("csllSubjectTo")
  private CsllSubjectToEnum csllSubjectTo = null;
  @SerializedName("receiptsAreFullNoCumulativePisCofins")
  private Boolean receiptsAreFullNoCumulativePisCofins = null;
  @SerializedName("inssWithholdSubjectTo")
  private Boolean inssWithholdSubjectTo = null;
  @SerializedName("issWithholdSubjectTo")
  private Boolean issWithholdSubjectTo = null;
  @SerializedName("irrfWithholdSubjectTo")
  private Boolean irrfWithholdSubjectTo = null;
  @SerializedName("icmsRateForSimplestaxregime")
  private Double icmsRateForSimplestaxregime = null;
  @SerializedName("isExemptByGrossRevenueForSimplestaxregime")
  private Boolean isExemptByGrossRevenueForSimplestaxregime = null;
  @SerializedName("configuration")
  private CompanyConfiguration configuration = null;
  @SerializedName("mailServer")
  private CompanyMailServer mailServer = null;
  @SerializedName("authorizedToDownloadNFe")
  private List<CompanyAuthorizedToDownloadNFe> authorizedToDownloadNFe = null;

  /**
   * string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company
   **/
  @ApiModelProperty(required = true, value = "string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company")
  public String getCode() {
    return code;
  }
  public void setCode(String code) {
    this.code = code;
  }

  /**
   * Official Company name (Razão Social)
   **/
  @ApiModelProperty(required = true, value = "Official Company name (Razão Social)")
  public String getOfficialName() {
    return officialName;
  }
  public void setOfficialName(String officialName) {
    this.officialName = officialName;
  }

  /**
   * Company name (DBA - Nome de Fantasia),  Used to identify branches/subsidiaries with same name
   **/
  @ApiModelProperty(required = true, value = "Company name (DBA - Nome de Fantasia),  Used to identify branches/subsidiaries with same name")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public EntityType getEntityType() {
    return entityType;
  }
  public void setEntityType(EntityType entityType) {
    this.entityType = entityType;
  }

  /**
   * Company has participation of state-owned capital (it will be considerated like a government entity)
   **/
  @ApiModelProperty(value = "Company has participation of state-owned capital (it will be considerated like a government entity)")
  public Boolean getSubjectToSRF1234() {
    return subjectToSRF1234;
  }
  public void setSubjectToSRF1234(Boolean subjectToSRF1234) {
    this.subjectToSRF1234 = subjectToSRF1234;
  }

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public FederalTaxRegime getFederalTaxRegime() {
    return federalTaxRegime;
  }
  public void setFederalTaxRegime(FederalTaxRegime federalTaxRegime) {
    this.federalTaxRegime = federalTaxRegime;
  }

  /**
   * this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 
   **/
  @ApiModelProperty(value = "this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. ")
  public PisSubjectToEnum getPisSubjectTo() {
    return pisSubjectTo;
  }
  public void setPisSubjectTo(PisSubjectToEnum pisSubjectTo) {
    this.pisSubjectTo = pisSubjectTo;
  }

  /**
   * this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 
   **/
  @ApiModelProperty(value = "this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. ")
  public CofinsSubjectToEnum getCofinsSubjectTo() {
    return cofinsSubjectTo;
  }
  public void setCofinsSubjectTo(CofinsSubjectToEnum cofinsSubjectTo) {
    this.cofinsSubjectTo = cofinsSubjectTo;
  }

  /**
   * this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 
   **/
  @ApiModelProperty(value = "this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. ")
  public CsllSubjectToEnum getCsllSubjectTo() {
    return csllSubjectTo;
  }
  public void setCsllSubjectTo(CsllSubjectToEnum csllSubjectTo) {
    this.csllSubjectTo = csllSubjectTo;
  }

  /**
   * When th company is REAL PROFIT usually it operates under a Non-Cumulative PIS/COFINS regime But exist some services that are always Cumulative regime. If the company has all receipts from Non-Cumulative services this flag will be set to True. This flag informs special conditions to credit of PIS/COFINS when this company is out of Free zone and  purchases from Free Zone Company Quando uma empresa fora da Zona Franca adquire uma produto ou serviço de uma empresa situada na Zona Franca de Manaus, o crédito de PIS E COFINS segue estas aliquotas diferenciadas. Fundamentação, art. 5º da Instrução Normativa SRF nº 546/2005; art. 3º, § 12 da Lei nº 10.637/2002; art. 3º, § 17 da Lei nº 10.833/2003; art. 4º da Lei nº 11.307/2006. DESTINATÁRIO ALÍQUOTAS PIS COFINS a) Venda efetuada a pessoa jurídica estabelecida fora da Zona Franca de Manaus, que apure a Contribuição para o PIS/PASEP no regime de não-cumulatividade débito 0,65% 3% crédito 1% 4,6% c) Venda efetuada a pessoa jurídica estabelecida fora da Zona Franca de Manaus, que apure o imposto de renda com base no lucro real e que tenha sua receita, total ou parcialmente, excluída do regime de incidência não-cumulativa da Contribuição para o PIS/PASEP débito 1,3% 6% crédito 1,65% 7,6% 
   **/
  @ApiModelProperty(value = "When th company is REAL PROFIT usually it operates under a Non-Cumulative PIS/COFINS regime But exist some services that are always Cumulative regime. If the company has all receipts from Non-Cumulative services this flag will be set to True. This flag informs special conditions to credit of PIS/COFINS when this company is out of Free zone and  purchases from Free Zone Company Quando uma empresa fora da Zona Franca adquire uma produto ou serviço de uma empresa situada na Zona Franca de Manaus, o crédito de PIS E COFINS segue estas aliquotas diferenciadas. Fundamentação, art. 5º da Instrução Normativa SRF nº 546/2005; art. 3º, § 12 da Lei nº 10.637/2002; art. 3º, § 17 da Lei nº 10.833/2003; art. 4º da Lei nº 11.307/2006. DESTINATÁRIO ALÍQUOTAS PIS COFINS a) Venda efetuada a pessoa jurídica estabelecida fora da Zona Franca de Manaus, que apure a Contribuição para o PIS/PASEP no regime de não-cumulatividade débito 0,65% 3% crédito 1% 4,6% c) Venda efetuada a pessoa jurídica estabelecida fora da Zona Franca de Manaus, que apure o imposto de renda com base no lucro real e que tenha sua receita, total ou parcialmente, excluída do regime de incidência não-cumulativa da Contribuição para o PIS/PASEP débito 1,3% 6% crédito 1,65% 7,6% ")
  public Boolean getReceiptsAreFullNoCumulativePisCofins() {
    return receiptsAreFullNoCumulativePisCofins;
  }
  public void setReceiptsAreFullNoCumulativePisCofins(Boolean receiptsAreFullNoCumulativePisCofins) {
    this.receiptsAreFullNoCumulativePisCofins = receiptsAreFullNoCumulativePisCofins;
  }

  /**
   * On purchase transaction, to force withholding INSS this Flag can be set to True
   **/
  @ApiModelProperty(value = "On purchase transaction, to force withholding INSS this Flag can be set to True")
  public Boolean getInssWithholdSubjectTo() {
    return inssWithholdSubjectTo;
  }
  public void setInssWithholdSubjectTo(Boolean inssWithholdSubjectTo) {
    this.inssWithholdSubjectTo = inssWithholdSubjectTo;
  }

  /**
   * On purchase transaction, to force withhold ISS this Flag can be set to True
   **/
  @ApiModelProperty(value = "On purchase transaction, to force withhold ISS this Flag can be set to True")
  public Boolean getIssWithholdSubjectTo() {
    return issWithholdSubjectTo;
  }
  public void setIssWithholdSubjectTo(Boolean issWithholdSubjectTo) {
    this.issWithholdSubjectTo = issWithholdSubjectTo;
  }

  /**
   * On purchase transaction, if this flag is FALSE, the system will not withhold IRRF. if this flag is TRUE the system will analise other rules to define if will have witholding 
   **/
  @ApiModelProperty(value = "On purchase transaction, if this flag is FALSE, the system will not withhold IRRF. if this flag is TRUE the system will analise other rules to define if will have witholding ")
  public Boolean getIrrfWithholdSubjectTo() {
    return irrfWithholdSubjectTo;
  }
  public void setIrrfWithholdSubjectTo(Boolean irrfWithholdSubjectTo) {
    this.irrfWithholdSubjectTo = irrfWithholdSubjectTo;
  }

  /**
   * Actual ICMS Rate for this company (if the company is Tax Regime Simplified). Aliquota de ICMS da companhia caso Optante do Simples 
   **/
  @ApiModelProperty(value = "Actual ICMS Rate for this company (if the company is Tax Regime Simplified). Aliquota de ICMS da companhia caso Optante do Simples ")
  public Double getIcmsRateForSimplestaxregime() {
    return icmsRateForSimplestaxregime;
  }
  public void setIcmsRateForSimplestaxregime(Double icmsRateForSimplestaxregime) {
    this.icmsRateForSimplestaxregime = icmsRateForSimplestaxregime;
  }

  /**
   * ICMS Exempt when Tax Regime is Simplified because total gross revenue is bellow amount defined by state (see PARANÁ State) Isenção do ICMS no Simples Nacional para faixa de receita bruta 
   **/
  @ApiModelProperty(value = "ICMS Exempt when Tax Regime is Simplified because total gross revenue is bellow amount defined by state (see PARANÁ State) Isenção do ICMS no Simples Nacional para faixa de receita bruta ")
  public Boolean getIsExemptByGrossRevenueForSimplestaxregime() {
    return isExemptByGrossRevenueForSimplestaxregime;
  }
  public void setIsExemptByGrossRevenueForSimplestaxregime(Boolean isExemptByGrossRevenueForSimplestaxregime) {
    this.isExemptByGrossRevenueForSimplestaxregime = isExemptByGrossRevenueForSimplestaxregime;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public CompanyConfiguration getConfiguration() {
    return configuration;
  }
  public void setConfiguration(CompanyConfiguration configuration) {
    this.configuration = configuration;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public CompanyMailServer getMailServer() {
    return mailServer;
  }
  public void setMailServer(CompanyMailServer mailServer) {
    this.mailServer = mailServer;
  }

  /**
   * Person or company authorized to downloadNFe
   **/
  @ApiModelProperty(value = "Person or company authorized to downloadNFe")
  public List<CompanyAuthorizedToDownloadNFe> getAuthorizedToDownloadNFe() {
    return authorizedToDownloadNFe;
  }
  public void setAuthorizedToDownloadNFe(List<CompanyAuthorizedToDownloadNFe> authorizedToDownloadNFe) {
    this.authorizedToDownloadNFe = authorizedToDownloadNFe;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Company company = (Company) o;
    return (this.code == null ? company.code == null : this.code.equals(company.code)) &&
        (this.officialName == null ? company.officialName == null : this.officialName.equals(company.officialName)) &&
        (this.name == null ? company.name == null : this.name.equals(company.name)) &&
        (this.entityType == null ? company.entityType == null : this.entityType.equals(company.entityType)) &&
        (this.subjectToSRF1234 == null ? company.subjectToSRF1234 == null : this.subjectToSRF1234.equals(company.subjectToSRF1234)) &&
        (this.federalTaxRegime == null ? company.federalTaxRegime == null : this.federalTaxRegime.equals(company.federalTaxRegime)) &&
        (this.pisSubjectTo == null ? company.pisSubjectTo == null : this.pisSubjectTo.equals(company.pisSubjectTo)) &&
        (this.cofinsSubjectTo == null ? company.cofinsSubjectTo == null : this.cofinsSubjectTo.equals(company.cofinsSubjectTo)) &&
        (this.csllSubjectTo == null ? company.csllSubjectTo == null : this.csllSubjectTo.equals(company.csllSubjectTo)) &&
        (this.receiptsAreFullNoCumulativePisCofins == null ? company.receiptsAreFullNoCumulativePisCofins == null : this.receiptsAreFullNoCumulativePisCofins.equals(company.receiptsAreFullNoCumulativePisCofins)) &&
        (this.inssWithholdSubjectTo == null ? company.inssWithholdSubjectTo == null : this.inssWithholdSubjectTo.equals(company.inssWithholdSubjectTo)) &&
        (this.issWithholdSubjectTo == null ? company.issWithholdSubjectTo == null : this.issWithholdSubjectTo.equals(company.issWithholdSubjectTo)) &&
        (this.irrfWithholdSubjectTo == null ? company.irrfWithholdSubjectTo == null : this.irrfWithholdSubjectTo.equals(company.irrfWithholdSubjectTo)) &&
        (this.icmsRateForSimplestaxregime == null ? company.icmsRateForSimplestaxregime == null : this.icmsRateForSimplestaxregime.equals(company.icmsRateForSimplestaxregime)) &&
        (this.isExemptByGrossRevenueForSimplestaxregime == null ? company.isExemptByGrossRevenueForSimplestaxregime == null : this.isExemptByGrossRevenueForSimplestaxregime.equals(company.isExemptByGrossRevenueForSimplestaxregime)) &&
        (this.configuration == null ? company.configuration == null : this.configuration.equals(company.configuration)) &&
        (this.mailServer == null ? company.mailServer == null : this.mailServer.equals(company.mailServer)) &&
        (this.authorizedToDownloadNFe == null ? company.authorizedToDownloadNFe == null : this.authorizedToDownloadNFe.equals(company.authorizedToDownloadNFe));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.code == null ? 0: this.code.hashCode());
    result = 31 * result + (this.officialName == null ? 0: this.officialName.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.entityType == null ? 0: this.entityType.hashCode());
    result = 31 * result + (this.subjectToSRF1234 == null ? 0: this.subjectToSRF1234.hashCode());
    result = 31 * result + (this.federalTaxRegime == null ? 0: this.federalTaxRegime.hashCode());
    result = 31 * result + (this.pisSubjectTo == null ? 0: this.pisSubjectTo.hashCode());
    result = 31 * result + (this.cofinsSubjectTo == null ? 0: this.cofinsSubjectTo.hashCode());
    result = 31 * result + (this.csllSubjectTo == null ? 0: this.csllSubjectTo.hashCode());
    result = 31 * result + (this.receiptsAreFullNoCumulativePisCofins == null ? 0: this.receiptsAreFullNoCumulativePisCofins.hashCode());
    result = 31 * result + (this.inssWithholdSubjectTo == null ? 0: this.inssWithholdSubjectTo.hashCode());
    result = 31 * result + (this.issWithholdSubjectTo == null ? 0: this.issWithholdSubjectTo.hashCode());
    result = 31 * result + (this.irrfWithholdSubjectTo == null ? 0: this.irrfWithholdSubjectTo.hashCode());
    result = 31 * result + (this.icmsRateForSimplestaxregime == null ? 0: this.icmsRateForSimplestaxregime.hashCode());
    result = 31 * result + (this.isExemptByGrossRevenueForSimplestaxregime == null ? 0: this.isExemptByGrossRevenueForSimplestaxregime.hashCode());
    result = 31 * result + (this.configuration == null ? 0: this.configuration.hashCode());
    result = 31 * result + (this.mailServer == null ? 0: this.mailServer.hashCode());
    result = 31 * result + (this.authorizedToDownloadNFe == null ? 0: this.authorizedToDownloadNFe.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Company {\n");
    
    sb.append("  code: ").append(code).append("\n");
    sb.append("  officialName: ").append(officialName).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  entityType: ").append(entityType).append("\n");
    sb.append("  subjectToSRF1234: ").append(subjectToSRF1234).append("\n");
    sb.append("  federalTaxRegime: ").append(federalTaxRegime).append("\n");
    sb.append("  pisSubjectTo: ").append(pisSubjectTo).append("\n");
    sb.append("  cofinsSubjectTo: ").append(cofinsSubjectTo).append("\n");
    sb.append("  csllSubjectTo: ").append(csllSubjectTo).append("\n");
    sb.append("  receiptsAreFullNoCumulativePisCofins: ").append(receiptsAreFullNoCumulativePisCofins).append("\n");
    sb.append("  inssWithholdSubjectTo: ").append(inssWithholdSubjectTo).append("\n");
    sb.append("  issWithholdSubjectTo: ").append(issWithholdSubjectTo).append("\n");
    sb.append("  irrfWithholdSubjectTo: ").append(irrfWithholdSubjectTo).append("\n");
    sb.append("  icmsRateForSimplestaxregime: ").append(icmsRateForSimplestaxregime).append("\n");
    sb.append("  isExemptByGrossRevenueForSimplestaxregime: ").append(isExemptByGrossRevenueForSimplestaxregime).append("\n");
    sb.append("  configuration: ").append(configuration).append("\n");
    sb.append("  mailServer: ").append(mailServer).append("\n");
    sb.append("  authorizedToDownloadNFe: ").append(authorizedToDownloadNFe).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
