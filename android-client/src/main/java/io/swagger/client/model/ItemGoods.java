/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.client.model.ItemSimple;
import java.util.UUID;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class ItemGoods {
  
  @SerializedName("companyId")
  private UUID companyId = null;
  @SerializedName("code")
  private String code = null;
  @SerializedName("agast")
  private String agast = null;
  @SerializedName("description")
  private String description = null;
  @SerializedName("sealCode")
  private String sealCode = null;
  @SerializedName("nFCI")
  private String nFCI = null;
  @SerializedName("isIcmsStSubstitute")
  private Boolean isIcmsStSubstitute = null;
  public enum SourceEnum {
     0,  1,  2,  3,  4,  5,  6,  7,  8, 
  };
  @SerializedName("source")
  private SourceEnum source = null;
  public enum ProductTypeEnum {
     FOR PRODUCT,  FOR MERCHANDISE,  NO RESTRICTION,  SERVICE,  FEEDSTOCK,  FIXED ASSETS, 
  };
  @SerializedName("productType")
  private ProductTypeEnum productType = null;
  @SerializedName("manufacturerEquivalent")
  private Boolean manufacturerEquivalent = null;
  @SerializedName("appropriateIPIcreditWhenInGoing")
  private Boolean appropriateIPIcreditWhenInGoing = null;
  @SerializedName("usuallyAppropriatePISCOFINSCredit")
  private Boolean usuallyAppropriatePISCOFINSCredit = null;
  @SerializedName("isPisCofinsEstimatedCredit")
  private Boolean isPisCofinsEstimatedCredit = null;
  public enum PiscofinsRevenueTypeEnum {
     01,  02,  03,  04,  05,  06,  07, 
  };
  @SerializedName("piscofinsRevenueType")
  private PiscofinsRevenueTypeEnum piscofinsRevenueType = null;
  @SerializedName("icmsBaseDiscountForMonoPhaseSocialContr")
  private Double icmsBaseDiscountForMonoPhaseSocialContr = null;
  @SerializedName("cean")
  private String cean = null;
  @SerializedName("nve")
  private String nve = null;
  @SerializedName("salesUnit")
  private String salesUnit = null;
  @SerializedName("salesUnitIPIfactor")
  private Double salesUnitIPIfactor = null;
  @SerializedName("salesUnitIcmsfactor")
  private Double salesUnitIcmsfactor = null;
  @SerializedName("salesUnitIcmsStfactor")
  private Double salesUnitIcmsStfactor = null;
  @SerializedName("salesUnitPisCofinsfactor")
  private Double salesUnitPisCofinsfactor = null;
  @SerializedName("purchaseUnit")
  private String purchaseUnit = null;
  @SerializedName("purchaseUnitIPIfactor")
  private Double purchaseUnitIPIfactor = null;
  @SerializedName("purchaseUnitIcmsfactor")
  private Double purchaseUnitIcmsfactor = null;
  @SerializedName("purchaseUnitIcmsStfactor")
  private Double purchaseUnitIcmsStfactor = null;
  @SerializedName("purchaseUnitPisCofinsfactor")
  private Double purchaseUnitPisCofinsfactor = null;
  @SerializedName("firstUse")
  private Boolean firstUse = null;

  /**
   * Company ID
   **/
  @ApiModelProperty(required = true, value = "Company ID")
  public UUID getCompanyId() {
    return companyId;
  }
  public void setCompanyId(UUID companyId) {
    this.companyId = companyId;
  }

  /**
   * ERP Code
   **/
  @ApiModelProperty(required = true, value = "ERP Code")
  public String getCode() {
    return code;
  }
  public void setCode(String code) {
    this.code = code;
  }

  /**
   * Agast Code
   **/
  @ApiModelProperty(required = true, value = "Agast Code")
  public String getAgast() {
    return agast;
  }
  public void setAgast(String agast) {
    this.agast = agast;
  }

  /**
   * Item Description
   **/
  @ApiModelProperty(value = "Item Description")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * Seal Code for ipi tax control (código do selo para controle de IPI)
   **/
  @ApiModelProperty(required = true, value = "Seal Code for ipi tax control (código do selo para controle de IPI)")
  public String getSealCode() {
    return sealCode;
  }
  public void setSealCode(String sealCode) {
    this.sealCode = sealCode;
  }

  /**
   * Importation content form number (Número de controle da FCI - Ficha de Conteúdo de Importação)
   **/
  @ApiModelProperty(value = "Importation content form number (Número de controle da FCI - Ficha de Conteúdo de Importação)")
  public String getNFCI() {
    return nFCI;
  }
  public void setNFCI(String nFCI) {
    this.nFCI = nFCI;
  }

  /**
   * this field inform that this merchandise or product is ICMS Substitute Must be used when the item is for resale and the company will assume the role of ICMS Substitute (wholesaler, retailer, distributor). Example: when Importing some product the company does not pay IcmsSt at the time of customs clearance but when selling sale the item. Deverá ser utilizado quando a empresa que irá vender a mercadoria sujeita ao ICMS ST for o SUBSTITUTO TRIBUTÁRIO (Distribuidor, atacadista e varejista), como por exemplo das mercadorias IMPORTADAS, neste sentido, a empresa não irá pagar o ICMS ST no desembaraço aduaneiro e irá recolher quando for vender as mesmas. 
   **/
  @ApiModelProperty(value = "this field inform that this merchandise or product is ICMS Substitute Must be used when the item is for resale and the company will assume the role of ICMS Substitute (wholesaler, retailer, distributor). Example: when Importing some product the company does not pay IcmsSt at the time of customs clearance but when selling sale the item. Deverá ser utilizado quando a empresa que irá vender a mercadoria sujeita ao ICMS ST for o SUBSTITUTO TRIBUTÁRIO (Distribuidor, atacadista e varejista), como por exemplo das mercadorias IMPORTADAS, neste sentido, a empresa não irá pagar o ICMS ST no desembaraço aduaneiro e irá recolher quando for vender as mesmas. ")
  public Boolean getIsIcmsStSubstitute() {
    return isIcmsStSubstitute;
  }
  public void setIsIcmsStSubstitute(Boolean isIcmsStSubstitute) {
    this.isIcmsStSubstitute = isIcmsStSubstitute;
  }

  /**
   * - '0' # National goods - except those treated in codes 3,4, 5 and 8 - '1' # Foreign goods - Imported directly by seller, except those in code 6 - '2' # Foreign goods - Acquired in the internal market (inside Brazil), except those in code 7 - '3' # National goods - Merchandise or goods with imported content above 40% and with less than or equal to 70% - '4' # National goods from production following 'standard basic processes' as stablished by legislation (standard basic processes are devised to separate simple assembly from manufaturing processes) - '5' # National goods - Merchandise or goods with imported content equal or below 40% - '6' # Foreign goods - Directly imported by Seller, without a National Equivalent as listed by Comex and natural gas - '7' # Foreign goods - Acquired inside Brazil, without a National Equivalent  as listed by Comex and natural gas - '8' # National goods - Merchandise or goods with imported content above 70% 
   **/
  @ApiModelProperty(value = "- '0' # National goods - except those treated in codes 3,4, 5 and 8 - '1' # Foreign goods - Imported directly by seller, except those in code 6 - '2' # Foreign goods - Acquired in the internal market (inside Brazil), except those in code 7 - '3' # National goods - Merchandise or goods with imported content above 40% and with less than or equal to 70% - '4' # National goods from production following 'standard basic processes' as stablished by legislation (standard basic processes are devised to separate simple assembly from manufaturing processes) - '5' # National goods - Merchandise or goods with imported content equal or below 40% - '6' # Foreign goods - Directly imported by Seller, without a National Equivalent as listed by Comex and natural gas - '7' # Foreign goods - Acquired inside Brazil, without a National Equivalent  as listed by Comex and natural gas - '8' # National goods - Merchandise or goods with imported content above 70% ")
  public SourceEnum getSource() {
    return source;
  }
  public void setSource(SourceEnum source) {
    this.source = source;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ProductTypeEnum getProductType() {
    return productType;
  }
  public void setProductType(ProductTypeEnum productType) {
    this.productType = productType;
  }

  /**
   * Item is merchandise but will be considered product
   **/
  @ApiModelProperty(value = "Item is merchandise but will be considered product")
  public Boolean getManufacturerEquivalent() {
    return manufacturerEquivalent;
  }
  public void setManufacturerEquivalent(Boolean manufacturerEquivalent) {
    this.manufacturerEquivalent = manufacturerEquivalent;
  }

  /**
   * Inform that this item will have rights to aprropriate IPI credit
   **/
  @ApiModelProperty(value = "Inform that this item will have rights to aprropriate IPI credit")
  public Boolean getAppropriateIPIcreditWhenInGoing() {
    return appropriateIPIcreditWhenInGoing;
  }
  public void setAppropriateIPIcreditWhenInGoing(Boolean appropriateIPIcreditWhenInGoing) {
    this.appropriateIPIcreditWhenInGoing = appropriateIPIcreditWhenInGoing;
  }

  /**
   * Subject to appropriate PIS/COFINS credit, when NO CUMULATIVE
   **/
  @ApiModelProperty(value = "Subject to appropriate PIS/COFINS credit, when NO CUMULATIVE")
  public Boolean getUsuallyAppropriatePISCOFINSCredit() {
    return usuallyAppropriatePISCOFINSCredit;
  }
  public void setUsuallyAppropriatePISCOFINSCredit(Boolean usuallyAppropriatePISCOFINSCredit) {
    this.usuallyAppropriatePISCOFINSCredit = usuallyAppropriatePISCOFINSCredit;
  }

  /**
   * The credit PIS/COFINS is subject to purchase form companies, but exist some exceptions, when the credit will be a estimated amount
   **/
  @ApiModelProperty(value = "The credit PIS/COFINS is subject to purchase form companies, but exist some exceptions, when the credit will be a estimated amount")
  public Boolean getIsPisCofinsEstimatedCredit() {
    return isPisCofinsEstimatedCredit;
  }
  public void setIsPisCofinsEstimatedCredit(Boolean isPisCofinsEstimatedCredit) {
    this.isPisCofinsEstimatedCredit = isPisCofinsEstimatedCredit;
  }

  /**
   * - '01' # Vinculada Exclusivamente a Receita Tributada no Mercado Interno - '02' # Exclusivamente a Receita Não Tributada no Mercado Interno - '03' # Exclusivamente a Receita de Exportação - '04' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno - '05' # Vinculada a Receitas Tributadas no Mercado Interno e de Exportação - '06' # Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação - '07' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação 
   **/
  @ApiModelProperty(value = "- '01' # Vinculada Exclusivamente a Receita Tributada no Mercado Interno - '02' # Exclusivamente a Receita Não Tributada no Mercado Interno - '03' # Exclusivamente a Receita de Exportação - '04' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno - '05' # Vinculada a Receitas Tributadas no Mercado Interno e de Exportação - '06' # Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação - '07' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação ")
  public PiscofinsRevenueTypeEnum getPiscofinsRevenueType() {
    return piscofinsRevenueType;
  }
  public void setPiscofinsRevenueType(PiscofinsRevenueTypeEnum piscofinsRevenueType) {
    this.piscofinsRevenueType = piscofinsRevenueType;
  }

  /**
   * Discount allowed on icms base when PIS/COFINS are Monophase
   **/
  @ApiModelProperty(value = "Discount allowed on icms base when PIS/COFINS are Monophase")
  public Double getIcmsBaseDiscountForMonoPhaseSocialContr() {
    return icmsBaseDiscountForMonoPhaseSocialContr;
  }
  public void setIcmsBaseDiscountForMonoPhaseSocialContr(Double icmsBaseDiscountForMonoPhaseSocialContr) {
    this.icmsBaseDiscountForMonoPhaseSocialContr = icmsBaseDiscountForMonoPhaseSocialContr;
  }

  /**
   * GTIN NUMBER
   **/
  @ApiModelProperty(value = "GTIN NUMBER")
  public String getCean() {
    return cean;
  }
  public void setCean(String cean) {
    this.cean = cean;
  }

  /**
   * Nomenclatura de Valor aduaneio e Estatístico - NCM extension code
   **/
  @ApiModelProperty(value = "Nomenclatura de Valor aduaneio e Estatístico - NCM extension code")
  public String getNve() {
    return nve;
  }
  public void setNve(String nve) {
    this.nve = nve;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getSalesUnit() {
    return salesUnit;
  }
  public void setSalesUnit(String salesUnit) {
    this.salesUnit = salesUnit;
  }

  /**
   * factor to convert sales quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)
   **/
  @ApiModelProperty(value = "factor to convert sales quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)")
  public Double getSalesUnitIPIfactor() {
    return salesUnitIPIfactor;
  }
  public void setSalesUnitIPIfactor(Double salesUnitIPIfactor) {
    this.salesUnitIPIfactor = salesUnitIPIfactor;
  }

  /**
   * factor to convert sales quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
   **/
  @ApiModelProperty(value = "factor to convert sales quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)")
  public Double getSalesUnitIcmsfactor() {
    return salesUnitIcmsfactor;
  }
  public void setSalesUnitIcmsfactor(Double salesUnitIcmsfactor) {
    this.salesUnitIcmsfactor = salesUnitIcmsfactor;
  }

  /**
   * factor to convert sales quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)
   **/
  @ApiModelProperty(value = "factor to convert sales quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)")
  public Double getSalesUnitIcmsStfactor() {
    return salesUnitIcmsStfactor;
  }
  public void setSalesUnitIcmsStfactor(Double salesUnitIcmsStfactor) {
    this.salesUnitIcmsStfactor = salesUnitIcmsStfactor;
  }

  /**
   * factor to convert sales quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
   **/
  @ApiModelProperty(value = "factor to convert sales quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)")
  public Double getSalesUnitPisCofinsfactor() {
    return salesUnitPisCofinsfactor;
  }
  public void setSalesUnitPisCofinsfactor(Double salesUnitPisCofinsfactor) {
    this.salesUnitPisCofinsfactor = salesUnitPisCofinsfactor;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getPurchaseUnit() {
    return purchaseUnit;
  }
  public void setPurchaseUnit(String purchaseUnit) {
    this.purchaseUnit = purchaseUnit;
  }

  /**
   * factor to convert purchase quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)
   **/
  @ApiModelProperty(value = "factor to convert purchase quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)")
  public Double getPurchaseUnitIPIfactor() {
    return purchaseUnitIPIfactor;
  }
  public void setPurchaseUnitIPIfactor(Double purchaseUnitIPIfactor) {
    this.purchaseUnitIPIfactor = purchaseUnitIPIfactor;
  }

  /**
   * factor to convert purchase quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
   **/
  @ApiModelProperty(value = "factor to convert purchase quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)")
  public Double getPurchaseUnitIcmsfactor() {
    return purchaseUnitIcmsfactor;
  }
  public void setPurchaseUnitIcmsfactor(Double purchaseUnitIcmsfactor) {
    this.purchaseUnitIcmsfactor = purchaseUnitIcmsfactor;
  }

  /**
   * factor to convert purchase quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)
   **/
  @ApiModelProperty(value = "factor to convert purchase quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)")
  public Double getPurchaseUnitIcmsStfactor() {
    return purchaseUnitIcmsStfactor;
  }
  public void setPurchaseUnitIcmsStfactor(Double purchaseUnitIcmsStfactor) {
    this.purchaseUnitIcmsStfactor = purchaseUnitIcmsStfactor;
  }

  /**
   * factor to convert purchase quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
   **/
  @ApiModelProperty(value = "factor to convert purchase quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)")
  public Double getPurchaseUnitPisCofinsfactor() {
    return purchaseUnitPisCofinsfactor;
  }
  public void setPurchaseUnitPisCofinsfactor(Double purchaseUnitPisCofinsfactor) {
    this.purchaseUnitPisCofinsfactor = purchaseUnitPisCofinsfactor;
  }

  /**
   * When the product is new, and will be retail, firt time that it exit it is subject to IPI
   **/
  @ApiModelProperty(value = "When the product is new, and will be retail, firt time that it exit it is subject to IPI")
  public Boolean getFirstUse() {
    return firstUse;
  }
  public void setFirstUse(Boolean firstUse) {
    this.firstUse = firstUse;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemGoods itemGoods = (ItemGoods) o;
    return (this.companyId == null ? itemGoods.companyId == null : this.companyId.equals(itemGoods.companyId)) &&
        (this.code == null ? itemGoods.code == null : this.code.equals(itemGoods.code)) &&
        (this.agast == null ? itemGoods.agast == null : this.agast.equals(itemGoods.agast)) &&
        (this.description == null ? itemGoods.description == null : this.description.equals(itemGoods.description)) &&
        (this.sealCode == null ? itemGoods.sealCode == null : this.sealCode.equals(itemGoods.sealCode)) &&
        (this.nFCI == null ? itemGoods.nFCI == null : this.nFCI.equals(itemGoods.nFCI)) &&
        (this.isIcmsStSubstitute == null ? itemGoods.isIcmsStSubstitute == null : this.isIcmsStSubstitute.equals(itemGoods.isIcmsStSubstitute)) &&
        (this.source == null ? itemGoods.source == null : this.source.equals(itemGoods.source)) &&
        (this.productType == null ? itemGoods.productType == null : this.productType.equals(itemGoods.productType)) &&
        (this.manufacturerEquivalent == null ? itemGoods.manufacturerEquivalent == null : this.manufacturerEquivalent.equals(itemGoods.manufacturerEquivalent)) &&
        (this.appropriateIPIcreditWhenInGoing == null ? itemGoods.appropriateIPIcreditWhenInGoing == null : this.appropriateIPIcreditWhenInGoing.equals(itemGoods.appropriateIPIcreditWhenInGoing)) &&
        (this.usuallyAppropriatePISCOFINSCredit == null ? itemGoods.usuallyAppropriatePISCOFINSCredit == null : this.usuallyAppropriatePISCOFINSCredit.equals(itemGoods.usuallyAppropriatePISCOFINSCredit)) &&
        (this.isPisCofinsEstimatedCredit == null ? itemGoods.isPisCofinsEstimatedCredit == null : this.isPisCofinsEstimatedCredit.equals(itemGoods.isPisCofinsEstimatedCredit)) &&
        (this.piscofinsRevenueType == null ? itemGoods.piscofinsRevenueType == null : this.piscofinsRevenueType.equals(itemGoods.piscofinsRevenueType)) &&
        (this.icmsBaseDiscountForMonoPhaseSocialContr == null ? itemGoods.icmsBaseDiscountForMonoPhaseSocialContr == null : this.icmsBaseDiscountForMonoPhaseSocialContr.equals(itemGoods.icmsBaseDiscountForMonoPhaseSocialContr)) &&
        (this.cean == null ? itemGoods.cean == null : this.cean.equals(itemGoods.cean)) &&
        (this.nve == null ? itemGoods.nve == null : this.nve.equals(itemGoods.nve)) &&
        (this.salesUnit == null ? itemGoods.salesUnit == null : this.salesUnit.equals(itemGoods.salesUnit)) &&
        (this.salesUnitIPIfactor == null ? itemGoods.salesUnitIPIfactor == null : this.salesUnitIPIfactor.equals(itemGoods.salesUnitIPIfactor)) &&
        (this.salesUnitIcmsfactor == null ? itemGoods.salesUnitIcmsfactor == null : this.salesUnitIcmsfactor.equals(itemGoods.salesUnitIcmsfactor)) &&
        (this.salesUnitIcmsStfactor == null ? itemGoods.salesUnitIcmsStfactor == null : this.salesUnitIcmsStfactor.equals(itemGoods.salesUnitIcmsStfactor)) &&
        (this.salesUnitPisCofinsfactor == null ? itemGoods.salesUnitPisCofinsfactor == null : this.salesUnitPisCofinsfactor.equals(itemGoods.salesUnitPisCofinsfactor)) &&
        (this.purchaseUnit == null ? itemGoods.purchaseUnit == null : this.purchaseUnit.equals(itemGoods.purchaseUnit)) &&
        (this.purchaseUnitIPIfactor == null ? itemGoods.purchaseUnitIPIfactor == null : this.purchaseUnitIPIfactor.equals(itemGoods.purchaseUnitIPIfactor)) &&
        (this.purchaseUnitIcmsfactor == null ? itemGoods.purchaseUnitIcmsfactor == null : this.purchaseUnitIcmsfactor.equals(itemGoods.purchaseUnitIcmsfactor)) &&
        (this.purchaseUnitIcmsStfactor == null ? itemGoods.purchaseUnitIcmsStfactor == null : this.purchaseUnitIcmsStfactor.equals(itemGoods.purchaseUnitIcmsStfactor)) &&
        (this.purchaseUnitPisCofinsfactor == null ? itemGoods.purchaseUnitPisCofinsfactor == null : this.purchaseUnitPisCofinsfactor.equals(itemGoods.purchaseUnitPisCofinsfactor)) &&
        (this.firstUse == null ? itemGoods.firstUse == null : this.firstUse.equals(itemGoods.firstUse));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.companyId == null ? 0: this.companyId.hashCode());
    result = 31 * result + (this.code == null ? 0: this.code.hashCode());
    result = 31 * result + (this.agast == null ? 0: this.agast.hashCode());
    result = 31 * result + (this.description == null ? 0: this.description.hashCode());
    result = 31 * result + (this.sealCode == null ? 0: this.sealCode.hashCode());
    result = 31 * result + (this.nFCI == null ? 0: this.nFCI.hashCode());
    result = 31 * result + (this.isIcmsStSubstitute == null ? 0: this.isIcmsStSubstitute.hashCode());
    result = 31 * result + (this.source == null ? 0: this.source.hashCode());
    result = 31 * result + (this.productType == null ? 0: this.productType.hashCode());
    result = 31 * result + (this.manufacturerEquivalent == null ? 0: this.manufacturerEquivalent.hashCode());
    result = 31 * result + (this.appropriateIPIcreditWhenInGoing == null ? 0: this.appropriateIPIcreditWhenInGoing.hashCode());
    result = 31 * result + (this.usuallyAppropriatePISCOFINSCredit == null ? 0: this.usuallyAppropriatePISCOFINSCredit.hashCode());
    result = 31 * result + (this.isPisCofinsEstimatedCredit == null ? 0: this.isPisCofinsEstimatedCredit.hashCode());
    result = 31 * result + (this.piscofinsRevenueType == null ? 0: this.piscofinsRevenueType.hashCode());
    result = 31 * result + (this.icmsBaseDiscountForMonoPhaseSocialContr == null ? 0: this.icmsBaseDiscountForMonoPhaseSocialContr.hashCode());
    result = 31 * result + (this.cean == null ? 0: this.cean.hashCode());
    result = 31 * result + (this.nve == null ? 0: this.nve.hashCode());
    result = 31 * result + (this.salesUnit == null ? 0: this.salesUnit.hashCode());
    result = 31 * result + (this.salesUnitIPIfactor == null ? 0: this.salesUnitIPIfactor.hashCode());
    result = 31 * result + (this.salesUnitIcmsfactor == null ? 0: this.salesUnitIcmsfactor.hashCode());
    result = 31 * result + (this.salesUnitIcmsStfactor == null ? 0: this.salesUnitIcmsStfactor.hashCode());
    result = 31 * result + (this.salesUnitPisCofinsfactor == null ? 0: this.salesUnitPisCofinsfactor.hashCode());
    result = 31 * result + (this.purchaseUnit == null ? 0: this.purchaseUnit.hashCode());
    result = 31 * result + (this.purchaseUnitIPIfactor == null ? 0: this.purchaseUnitIPIfactor.hashCode());
    result = 31 * result + (this.purchaseUnitIcmsfactor == null ? 0: this.purchaseUnitIcmsfactor.hashCode());
    result = 31 * result + (this.purchaseUnitIcmsStfactor == null ? 0: this.purchaseUnitIcmsStfactor.hashCode());
    result = 31 * result + (this.purchaseUnitPisCofinsfactor == null ? 0: this.purchaseUnitPisCofinsfactor.hashCode());
    result = 31 * result + (this.firstUse == null ? 0: this.firstUse.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemGoods {\n");
    
    sb.append("  companyId: ").append(companyId).append("\n");
    sb.append("  code: ").append(code).append("\n");
    sb.append("  agast: ").append(agast).append("\n");
    sb.append("  description: ").append(description).append("\n");
    sb.append("  sealCode: ").append(sealCode).append("\n");
    sb.append("  nFCI: ").append(nFCI).append("\n");
    sb.append("  isIcmsStSubstitute: ").append(isIcmsStSubstitute).append("\n");
    sb.append("  source: ").append(source).append("\n");
    sb.append("  productType: ").append(productType).append("\n");
    sb.append("  manufacturerEquivalent: ").append(manufacturerEquivalent).append("\n");
    sb.append("  appropriateIPIcreditWhenInGoing: ").append(appropriateIPIcreditWhenInGoing).append("\n");
    sb.append("  usuallyAppropriatePISCOFINSCredit: ").append(usuallyAppropriatePISCOFINSCredit).append("\n");
    sb.append("  isPisCofinsEstimatedCredit: ").append(isPisCofinsEstimatedCredit).append("\n");
    sb.append("  piscofinsRevenueType: ").append(piscofinsRevenueType).append("\n");
    sb.append("  icmsBaseDiscountForMonoPhaseSocialContr: ").append(icmsBaseDiscountForMonoPhaseSocialContr).append("\n");
    sb.append("  cean: ").append(cean).append("\n");
    sb.append("  nve: ").append(nve).append("\n");
    sb.append("  salesUnit: ").append(salesUnit).append("\n");
    sb.append("  salesUnitIPIfactor: ").append(salesUnitIPIfactor).append("\n");
    sb.append("  salesUnitIcmsfactor: ").append(salesUnitIcmsfactor).append("\n");
    sb.append("  salesUnitIcmsStfactor: ").append(salesUnitIcmsStfactor).append("\n");
    sb.append("  salesUnitPisCofinsfactor: ").append(salesUnitPisCofinsfactor).append("\n");
    sb.append("  purchaseUnit: ").append(purchaseUnit).append("\n");
    sb.append("  purchaseUnitIPIfactor: ").append(purchaseUnitIPIfactor).append("\n");
    sb.append("  purchaseUnitIcmsfactor: ").append(purchaseUnitIcmsfactor).append("\n");
    sb.append("  purchaseUnitIcmsStfactor: ").append(purchaseUnitIcmsStfactor).append("\n");
    sb.append("  purchaseUnitPisCofinsfactor: ").append(purchaseUnitPisCofinsfactor).append("\n");
    sb.append("  firstUse: ").append(firstUse).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
