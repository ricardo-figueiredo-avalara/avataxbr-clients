/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class LineForGoodsIcmsTaxRelief {
  
  public enum ReasonCodeEnum {
     1,  3,  4,  5,  6,  7,  8,  9,  10,  11,  12,  16, 
  };
  @SerializedName("reasonCode")
  private ReasonCodeEnum reasonCode = null;
  @SerializedName("taxBaseDiscount")
  private Double taxBaseDiscount = null;
  @SerializedName("taxAmount")
  private Double taxAmount = null;

  /**
   * When item transaction subject to desoneration, this is the reason code - '1' # Táxi; - '3' # Produtor Agropecuário; - '4' # Frotista/Locadora; - '5' # Diplomático/Consular; - '6' # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações); - '7' # SUFRAMA; - '8' # Venda a órgão Público; - '9' # Outros - '10' # Deficiente Condutor - '11' # Deficiente não condutor - '12' # Fomento agropecuário - '16' # Olimpíadas Rio 2016 
   **/
  @ApiModelProperty(required = true, value = "When item transaction subject to desoneration, this is the reason code - '1' # Táxi; - '3' # Produtor Agropecuário; - '4' # Frotista/Locadora; - '5' # Diplomático/Consular; - '6' # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações); - '7' # SUFRAMA; - '8' # Venda a órgão Público; - '9' # Outros - '10' # Deficiente Condutor - '11' # Deficiente não condutor - '12' # Fomento agropecuário - '16' # Olimpíadas Rio 2016 ")
  public ReasonCodeEnum getReasonCode() {
    return reasonCode;
  }
  public void setReasonCode(ReasonCodeEnum reasonCode) {
    this.reasonCode = reasonCode;
  }

  /**
   * ICMS Tax base rate discount  (desconto na base do ICMS referetne a desoneração)
   **/
  @ApiModelProperty(value = "ICMS Tax base rate discount  (desconto na base do ICMS referetne a desoneração)")
  public Double getTaxBaseDiscount() {
    return taxBaseDiscount;
  }
  public void setTaxBaseDiscount(Double taxBaseDiscount) {
    this.taxBaseDiscount = taxBaseDiscount;
  }

  /**
   * Amount for Icms Relief (desoneração)
   **/
  @ApiModelProperty(value = "Amount for Icms Relief (desoneração)")
  public Double getTaxAmount() {
    return taxAmount;
  }
  public void setTaxAmount(Double taxAmount) {
    this.taxAmount = taxAmount;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineForGoodsIcmsTaxRelief lineForGoodsIcmsTaxRelief = (LineForGoodsIcmsTaxRelief) o;
    return (this.reasonCode == null ? lineForGoodsIcmsTaxRelief.reasonCode == null : this.reasonCode.equals(lineForGoodsIcmsTaxRelief.reasonCode)) &&
        (this.taxBaseDiscount == null ? lineForGoodsIcmsTaxRelief.taxBaseDiscount == null : this.taxBaseDiscount.equals(lineForGoodsIcmsTaxRelief.taxBaseDiscount)) &&
        (this.taxAmount == null ? lineForGoodsIcmsTaxRelief.taxAmount == null : this.taxAmount.equals(lineForGoodsIcmsTaxRelief.taxAmount));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.reasonCode == null ? 0: this.reasonCode.hashCode());
    result = 31 * result + (this.taxBaseDiscount == null ? 0: this.taxBaseDiscount.hashCode());
    result = 31 * result + (this.taxAmount == null ? 0: this.taxAmount.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineForGoodsIcmsTaxRelief {\n");
    
    sb.append("  reasonCode: ").append(reasonCode).append("\n");
    sb.append("  taxBaseDiscount: ").append(taxBaseDiscount).append("\n");
    sb.append("  taxAmount: ").append(taxAmount).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
