/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Filter this message application to specified tax cases. - taxtype - jurisdictionType 
 **/
@ApiModel(description = "Filter this message application to specified tax cases. - taxtype - jurisdictionType ")
public class LegalReasonTaxScope {
  
  public enum TaxTypeEnum {
     NONE,  INSS,  IRRF,  IRPJ,  PIS,  COFINS,  CSLL,  IPI,  ICMS,  II,  IOF,  ISS,  APROXTOTALTAX, 
  };
  @SerializedName("taxType")
  private TaxTypeEnum taxType = null;
  public enum SpecializedTaxTypeEnum {
     icms,  icmsSt,  icmsStSd,  icmsPartOwn,  icmsPartDest,  icmsDifaFCP,  icmsDifaDest,  icmsDifaRemet,  icmsRf,  icmsDeson,  icmsCredsn,  pis,  pisSt,  cofins,  cofinsSt,  ipi,  ipiReturned,  ii,  iof, 
  };
  @SerializedName("specializedTaxType")
  private SpecializedTaxTypeEnum specializedTaxType = null;
  public enum JurisdictionTypeEnum {
     NONE,  City,  State,  Country, 
  };
  @SerializedName("jurisdictionType")
  private JurisdictionTypeEnum jurisdictionType = null;
  @SerializedName("jurisdictionIbgeCode")
  private String jurisdictionIbgeCode = null;

  /**
   * This is the Tax Type to apply legal messages. - 'NONE' - 'INSS' - 'IRRF' - 'IRPJ' - 'PIS' - 'COFINS' - 'CSLL' - 'IPI' - 'ICMS' - 'II' - 'IOF' - 'ISS' - 'APROXTOTALTAX' 
   **/
  @ApiModelProperty(required = true, value = "This is the Tax Type to apply legal messages. - 'NONE' - 'INSS' - 'IRRF' - 'IRPJ' - 'PIS' - 'COFINS' - 'CSLL' - 'IPI' - 'ICMS' - 'II' - 'IOF' - 'ISS' - 'APROXTOTALTAX' ")
  public TaxTypeEnum getTaxType() {
    return taxType;
  }
  public void setTaxType(TaxTypeEnum taxType) {
    this.taxType = taxType;
  }

  /**
   * These are the specific tax types to which a message may be applied - 'icms' - 'icmsSt' - 'icmsStSd' - 'icmsPartOwn' - 'icmsPartDest' - 'icmsDifaFCP' - 'icmsDifaDest' - 'icmsDifaRemet' - 'icmsRf' - 'icmsDeson' - 'icmsCredsn' - 'pis' - 'pisSt' - 'cofins' - 'cofinsSt' - 'ipi' - 'ipiReturned' - 'ii' - 'iof' 
   **/
  @ApiModelProperty(value = "These are the specific tax types to which a message may be applied - 'icms' - 'icmsSt' - 'icmsStSd' - 'icmsPartOwn' - 'icmsPartDest' - 'icmsDifaFCP' - 'icmsDifaDest' - 'icmsDifaRemet' - 'icmsRf' - 'icmsDeson' - 'icmsCredsn' - 'pis' - 'pisSt' - 'cofins' - 'cofinsSt' - 'ipi' - 'ipiReturned' - 'ii' - 'iof' ")
  public SpecializedTaxTypeEnum getSpecializedTaxType() {
    return specializedTaxType;
  }
  public void setSpecializedTaxType(SpecializedTaxTypeEnum specializedTaxType) {
    this.specializedTaxType = specializedTaxType;
  }

  /**
   * Types of jurisdiction - 'NONE' - 'City' - 'State' - 'Country' 
   **/
  @ApiModelProperty(required = true, value = "Types of jurisdiction - 'NONE' - 'City' - 'State' - 'Country' ")
  public JurisdictionTypeEnum getJurisdictionType() {
    return jurisdictionType;
  }
  public void setJurisdictionType(JurisdictionTypeEnum jurisdictionType) {
    this.jurisdictionType = jurisdictionType;
  }

  /**
   * Code to identify the Jurisdiction
   **/
  @ApiModelProperty(value = "Code to identify the Jurisdiction")
  public String getJurisdictionIbgeCode() {
    return jurisdictionIbgeCode;
  }
  public void setJurisdictionIbgeCode(String jurisdictionIbgeCode) {
    this.jurisdictionIbgeCode = jurisdictionIbgeCode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalReasonTaxScope legalReasonTaxScope = (LegalReasonTaxScope) o;
    return (this.taxType == null ? legalReasonTaxScope.taxType == null : this.taxType.equals(legalReasonTaxScope.taxType)) &&
        (this.specializedTaxType == null ? legalReasonTaxScope.specializedTaxType == null : this.specializedTaxType.equals(legalReasonTaxScope.specializedTaxType)) &&
        (this.jurisdictionType == null ? legalReasonTaxScope.jurisdictionType == null : this.jurisdictionType.equals(legalReasonTaxScope.jurisdictionType)) &&
        (this.jurisdictionIbgeCode == null ? legalReasonTaxScope.jurisdictionIbgeCode == null : this.jurisdictionIbgeCode.equals(legalReasonTaxScope.jurisdictionIbgeCode));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.taxType == null ? 0: this.taxType.hashCode());
    result = 31 * result + (this.specializedTaxType == null ? 0: this.specializedTaxType.hashCode());
    result = 31 * result + (this.jurisdictionType == null ? 0: this.jurisdictionType.hashCode());
    result = 31 * result + (this.jurisdictionIbgeCode == null ? 0: this.jurisdictionIbgeCode.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalReasonTaxScope {\n");
    
    sb.append("  taxType: ").append(taxType).append("\n");
    sb.append("  specializedTaxType: ").append(specializedTaxType).append("\n");
    sb.append("  jurisdictionType: ").append(jurisdictionType).append("\n");
    sb.append("  jurisdictionIbgeCode: ").append(jurisdictionIbgeCode).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
