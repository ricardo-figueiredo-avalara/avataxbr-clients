/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.client.model.SalesCalculatedTaxSummaryForServiceTaxByType;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class SalesCalculatedTaxSummaryForService {
  
  @SerializedName("numberOfLines")
  private Integer numberOfLines = null;
  @SerializedName("subtotal")
  private Double subtotal = null;
  @SerializedName("totalTax")
  private Double totalTax = null;
  @SerializedName("grandTotal")
  private Double grandTotal = null;
  @SerializedName("taxByType")
  private SalesCalculatedTaxSummaryForServiceTaxByType taxByType = null;

  /**
   * Count of lines
   **/
  @ApiModelProperty(value = "Count of lines")
  public Integer getNumberOfLines() {
    return numberOfLines;
  }
  public void setNumberOfLines(Integer numberOfLines) {
    this.numberOfLines = numberOfLines;
  }

  /**
   * sum of all line tax attribute
   **/
  @ApiModelProperty(value = "sum of all line tax attribute")
  public Double getSubtotal() {
    return subtotal;
  }
  public void setSubtotal(Double subtotal) {
    this.subtotal = subtotal;
  }

  /**
   * sum of all line lineAmount attribute
   **/
  @ApiModelProperty(value = "sum of all line lineAmount attribute")
  public Double getTotalTax() {
    return totalTax;
  }
  public void setTotalTax(Double totalTax) {
    this.totalTax = totalTax;
  }

  /**
   * sum of all line lineAmount attribute - sum of all line tax attribute - sum of all line lineTaxedDiscount attribute
   **/
  @ApiModelProperty(value = "sum of all line lineAmount attribute - sum of all line tax attribute - sum of all line lineTaxedDiscount attribute")
  public Double getGrandTotal() {
    return grandTotal;
  }
  public void setGrandTotal(Double grandTotal) {
    this.grandTotal = grandTotal;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public SalesCalculatedTaxSummaryForServiceTaxByType getTaxByType() {
    return taxByType;
  }
  public void setTaxByType(SalesCalculatedTaxSummaryForServiceTaxByType taxByType) {
    this.taxByType = taxByType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesCalculatedTaxSummaryForService salesCalculatedTaxSummaryForService = (SalesCalculatedTaxSummaryForService) o;
    return (this.numberOfLines == null ? salesCalculatedTaxSummaryForService.numberOfLines == null : this.numberOfLines.equals(salesCalculatedTaxSummaryForService.numberOfLines)) &&
        (this.subtotal == null ? salesCalculatedTaxSummaryForService.subtotal == null : this.subtotal.equals(salesCalculatedTaxSummaryForService.subtotal)) &&
        (this.totalTax == null ? salesCalculatedTaxSummaryForService.totalTax == null : this.totalTax.equals(salesCalculatedTaxSummaryForService.totalTax)) &&
        (this.grandTotal == null ? salesCalculatedTaxSummaryForService.grandTotal == null : this.grandTotal.equals(salesCalculatedTaxSummaryForService.grandTotal)) &&
        (this.taxByType == null ? salesCalculatedTaxSummaryForService.taxByType == null : this.taxByType.equals(salesCalculatedTaxSummaryForService.taxByType));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.numberOfLines == null ? 0: this.numberOfLines.hashCode());
    result = 31 * result + (this.subtotal == null ? 0: this.subtotal.hashCode());
    result = 31 * result + (this.totalTax == null ? 0: this.totalTax.hashCode());
    result = 31 * result + (this.grandTotal == null ? 0: this.grandTotal.hashCode());
    result = 31 * result + (this.taxByType == null ? 0: this.taxByType.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesCalculatedTaxSummaryForService {\n");
    
    sb.append("  numberOfLines: ").append(numberOfLines).append("\n");
    sb.append("  subtotal: ").append(subtotal).append("\n");
    sb.append("  totalTax: ").append(totalTax).append("\n");
    sb.append("  grandTotal: ").append(grandTotal).append("\n");
    sb.append("  taxByType: ").append(taxByType).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
