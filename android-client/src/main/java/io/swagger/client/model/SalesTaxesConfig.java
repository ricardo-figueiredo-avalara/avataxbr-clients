/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class SalesTaxesConfig {
  
  public enum AccruableCOFINSTaxationEnum {
     T,  N,  Z,  E,  H,  S, 
  };
  @SerializedName("accruableCOFINSTaxation")
  private AccruableCOFINSTaxationEnum accruableCOFINSTaxation = null;
  public enum AccruableCSLLTaxationEnum {
     T,  E, 
  };
  @SerializedName("accruableCSLLTaxation")
  private AccruableCSLLTaxationEnum accruableCSLLTaxation = null;
  public enum AccruablePISTaxationEnum {
     T,  N,  Z,  E,  H,  S, 
  };
  @SerializedName("accruablePISTaxation")
  private AccruablePISTaxationEnum accruablePISTaxation = null;
  @SerializedName("accruableCOFINSExempCodeTaxation")
  private String accruableCOFINSExempCodeTaxation = null;
  @SerializedName("accruablePISExempCodeTaxation")
  private String accruablePISExempCodeTaxation = null;
  @SerializedName("withholdingCOFINS")
  private Boolean withholdingCOFINS = null;
  @SerializedName("withholdingCSLL")
  private Boolean withholdingCSLL = null;
  @SerializedName("withholdingIRRF")
  private Boolean withholdingIRRF = null;
  @SerializedName("withholdingPIS")
  private Boolean withholdingPIS = null;
  @SerializedName("withholdIRRFExemptReasonTaxation")
  private String withholdIRRFExemptReasonTaxation = null;

  /**
   * There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE 
   **/
  @ApiModelProperty(value = "There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE ")
  public AccruableCOFINSTaxationEnum getAccruableCOFINSTaxation() {
    return accruableCOFINSTaxation;
  }
  public void setAccruableCOFINSTaxation(AccruableCOFINSTaxationEnum accruableCOFINSTaxation) {
    this.accruableCOFINSTaxation = accruableCOFINSTaxation;
  }

  /**
   * There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT 
   **/
  @ApiModelProperty(value = "There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT ")
  public AccruableCSLLTaxationEnum getAccruableCSLLTaxation() {
    return accruableCSLLTaxation;
  }
  public void setAccruableCSLLTaxation(AccruableCSLLTaxationEnum accruableCSLLTaxation) {
    this.accruableCSLLTaxation = accruableCSLLTaxation;
  }

  /**
   * There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE 
   **/
  @ApiModelProperty(value = "There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - 'T' # TAXABLE - 'N' # NOT TAXABLE - 'Z' # TAXABLE WITH RATE=0.00 - 'E' # EXEMPT - 'H' # SUSPENDED - 'S' # SPECIFIC RATE ")
  public AccruablePISTaxationEnum getAccruablePISTaxation() {
    return accruablePISTaxation;
  }
  public void setAccruablePISTaxation(AccruablePISTaxationEnum accruablePISTaxation) {
    this.accruablePISTaxation = accruablePISTaxation;
  }

  /**
   * This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption
   **/
  @ApiModelProperty(value = "This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption")
  public String getAccruableCOFINSExempCodeTaxation() {
    return accruableCOFINSExempCodeTaxation;
  }
  public void setAccruableCOFINSExempCodeTaxation(String accruableCOFINSExempCodeTaxation) {
    this.accruableCOFINSExempCodeTaxation = accruableCOFINSExempCodeTaxation;
  }

  /**
   * This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption
   **/
  @ApiModelProperty(value = "This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption")
  public String getAccruablePISExempCodeTaxation() {
    return accruablePISExempCodeTaxation;
  }
  public void setAccruablePISExempCodeTaxation(String accruablePISExempCodeTaxation) {
    this.accruablePISExempCodeTaxation = accruablePISExempCodeTaxation;
  }

  /**
   * Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
   **/
  @ApiModelProperty(value = "Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.")
  public Boolean getWithholdingCOFINS() {
    return withholdingCOFINS;
  }
  public void setWithholdingCOFINS(Boolean withholdingCOFINS) {
    this.withholdingCOFINS = withholdingCOFINS;
  }

  /**
   * Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
   **/
  @ApiModelProperty(value = "Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.")
  public Boolean getWithholdingCSLL() {
    return withholdingCSLL;
  }
  public void setWithholdingCSLL(Boolean withholdingCSLL) {
    this.withholdingCSLL = withholdingCSLL;
  }

  /**
   * Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
   **/
  @ApiModelProperty(value = "Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.")
  public Boolean getWithholdingIRRF() {
    return withholdingIRRF;
  }
  public void setWithholdingIRRF(Boolean withholdingIRRF) {
    this.withholdingIRRF = withholdingIRRF;
  }

  /**
   * Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
   **/
  @ApiModelProperty(value = "Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.")
  public Boolean getWithholdingPIS() {
    return withholdingPIS;
  }
  public void setWithholdingPIS(Boolean withholdingPIS) {
    this.withholdingPIS = withholdingPIS;
  }

  /**
   * When property withholdingIRRF is false is mandatory inform the reason
   **/
  @ApiModelProperty(value = "When property withholdingIRRF is false is mandatory inform the reason")
  public String getWithholdIRRFExemptReasonTaxation() {
    return withholdIRRFExemptReasonTaxation;
  }
  public void setWithholdIRRFExemptReasonTaxation(String withholdIRRFExemptReasonTaxation) {
    this.withholdIRRFExemptReasonTaxation = withholdIRRFExemptReasonTaxation;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesTaxesConfig salesTaxesConfig = (SalesTaxesConfig) o;
    return (this.accruableCOFINSTaxation == null ? salesTaxesConfig.accruableCOFINSTaxation == null : this.accruableCOFINSTaxation.equals(salesTaxesConfig.accruableCOFINSTaxation)) &&
        (this.accruableCSLLTaxation == null ? salesTaxesConfig.accruableCSLLTaxation == null : this.accruableCSLLTaxation.equals(salesTaxesConfig.accruableCSLLTaxation)) &&
        (this.accruablePISTaxation == null ? salesTaxesConfig.accruablePISTaxation == null : this.accruablePISTaxation.equals(salesTaxesConfig.accruablePISTaxation)) &&
        (this.accruableCOFINSExempCodeTaxation == null ? salesTaxesConfig.accruableCOFINSExempCodeTaxation == null : this.accruableCOFINSExempCodeTaxation.equals(salesTaxesConfig.accruableCOFINSExempCodeTaxation)) &&
        (this.accruablePISExempCodeTaxation == null ? salesTaxesConfig.accruablePISExempCodeTaxation == null : this.accruablePISExempCodeTaxation.equals(salesTaxesConfig.accruablePISExempCodeTaxation)) &&
        (this.withholdingCOFINS == null ? salesTaxesConfig.withholdingCOFINS == null : this.withholdingCOFINS.equals(salesTaxesConfig.withholdingCOFINS)) &&
        (this.withholdingCSLL == null ? salesTaxesConfig.withholdingCSLL == null : this.withholdingCSLL.equals(salesTaxesConfig.withholdingCSLL)) &&
        (this.withholdingIRRF == null ? salesTaxesConfig.withholdingIRRF == null : this.withholdingIRRF.equals(salesTaxesConfig.withholdingIRRF)) &&
        (this.withholdingPIS == null ? salesTaxesConfig.withholdingPIS == null : this.withholdingPIS.equals(salesTaxesConfig.withholdingPIS)) &&
        (this.withholdIRRFExemptReasonTaxation == null ? salesTaxesConfig.withholdIRRFExemptReasonTaxation == null : this.withholdIRRFExemptReasonTaxation.equals(salesTaxesConfig.withholdIRRFExemptReasonTaxation));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.accruableCOFINSTaxation == null ? 0: this.accruableCOFINSTaxation.hashCode());
    result = 31 * result + (this.accruableCSLLTaxation == null ? 0: this.accruableCSLLTaxation.hashCode());
    result = 31 * result + (this.accruablePISTaxation == null ? 0: this.accruablePISTaxation.hashCode());
    result = 31 * result + (this.accruableCOFINSExempCodeTaxation == null ? 0: this.accruableCOFINSExempCodeTaxation.hashCode());
    result = 31 * result + (this.accruablePISExempCodeTaxation == null ? 0: this.accruablePISExempCodeTaxation.hashCode());
    result = 31 * result + (this.withholdingCOFINS == null ? 0: this.withholdingCOFINS.hashCode());
    result = 31 * result + (this.withholdingCSLL == null ? 0: this.withholdingCSLL.hashCode());
    result = 31 * result + (this.withholdingIRRF == null ? 0: this.withholdingIRRF.hashCode());
    result = 31 * result + (this.withholdingPIS == null ? 0: this.withholdingPIS.hashCode());
    result = 31 * result + (this.withholdIRRFExemptReasonTaxation == null ? 0: this.withholdIRRFExemptReasonTaxation.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesTaxesConfig {\n");
    
    sb.append("  accruableCOFINSTaxation: ").append(accruableCOFINSTaxation).append("\n");
    sb.append("  accruableCSLLTaxation: ").append(accruableCSLLTaxation).append("\n");
    sb.append("  accruablePISTaxation: ").append(accruablePISTaxation).append("\n");
    sb.append("  accruableCOFINSExempCodeTaxation: ").append(accruableCOFINSExempCodeTaxation).append("\n");
    sb.append("  accruablePISExempCodeTaxation: ").append(accruablePISExempCodeTaxation).append("\n");
    sb.append("  withholdingCOFINS: ").append(withholdingCOFINS).append("\n");
    sb.append("  withholdingCSLL: ").append(withholdingCSLL).append("\n");
    sb.append("  withholdingIRRF: ").append(withholdingIRRF).append("\n");
    sb.append("  withholdingPIS: ").append(withholdingPIS).append("\n");
    sb.append("  withholdIRRFExemptReasonTaxation: ").append(withholdIRRFExemptReasonTaxation).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
