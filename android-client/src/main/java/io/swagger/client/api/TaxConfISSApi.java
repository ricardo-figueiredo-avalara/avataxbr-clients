/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.math.BigDecimal;
import java.util.Date;
import io.swagger.client.model.InlineResponse201;
import io.swagger.client.model.IssConfByCity;
import io.swagger.client.model.Message;
import io.swagger.client.model.ValidationError;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class TaxConfISSApi {
  String basePath = "http://avataxbr-sandbox.avalarabrasil.com.br/v2";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * create a new ISS Configuration
  * 
   * @param issConfByCity The pet JSON you want to post
   * @return InlineResponse201
  */
  public InlineResponse201 createIssConfByCity (IssConfByCity issConfByCity) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = issConfByCity;
    // verify the required parameter 'issConfByCity' is set
    if (issConfByCity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'issConfByCity' when calling createIssConfByCity",
        new ApiException(400, "Missing the required parameter 'issConfByCity' when calling createIssConfByCity"));
    }

    // create path and map variables
    String path = "/taxconf/iss".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse201) ApiInvoker.deserialize(localVarResponse, "", InlineResponse201.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * create a new ISS Configuration
   * 
   * @param issConfByCity The pet JSON you want to post
  */
  public void createIssConfByCity (IssConfByCity issConfByCity, final Response.Listener<InlineResponse201> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = issConfByCity;

  
    // verify the required parameter 'issConfByCity' is set
    if (issConfByCity == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'issConfByCity' when calling createIssConfByCity",
         new ApiException(400, "Missing the required parameter 'issConfByCity' when calling createIssConfByCity"));
    }
    

    // create path and map variables
    String path = "/taxconf/iss".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse201) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse201.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * disable a ISS by City Code.
  * 
   * @param cityCode City Code
   * @return void
  */
  public void deleteIssConf (BigDecimal cityCode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'cityCode' is set
    if (cityCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cityCode' when calling deleteIssConf",
        new ApiException(400, "Missing the required parameter 'cityCode' when calling deleteIssConf"));
    }

    // create path and map variables
    String path = "/taxconf/iss/{cityCode}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cityCode" + "\\}", apiInvoker.escapeString(cityCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * disable a ISS by City Code.
   * 
   * @param cityCode City Code
  */
  public void deleteIssConf (BigDecimal cityCode, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'cityCode' is set
    if (cityCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'cityCode' when calling deleteIssConf",
         new ApiException(400, "Missing the required parameter 'cityCode' when calling deleteIssConf"));
    }
    

    // create path and map variables
    String path = "/taxconf/iss/{cityCode}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cityCode" + "\\}", apiInvoker.escapeString(cityCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * get ISS information by City Code.
  * This operation return configurations of ISS that match with parameters queries 
   * @param cityCode City Code
   * @param code Identificator of this configuration, it is unique for account or standard namedspace 
   * @param date When informed return valid version configuration for this date 
   * @param inactive return the inctives versions too 
   * @return List<IssConfByCity>
  */
  public List<IssConfByCity> getIssConfByCity (BigDecimal cityCode, String code, Date date, Boolean inactive) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'cityCode' is set
    if (cityCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cityCode' when calling getIssConfByCity",
        new ApiException(400, "Missing the required parameter 'cityCode' when calling getIssConfByCity"));
    }

    // create path and map variables
    String path = "/taxconf/iss/{cityCode}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cityCode" + "\\}", apiInvoker.escapeString(cityCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "code", code));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "inactive", inactive));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<IssConfByCity>) ApiInvoker.deserialize(localVarResponse, "array", IssConfByCity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * get ISS information by City Code.
   * This operation return configurations of ISS that match with parameters queries 
   * @param cityCode City Code   * @param code Identificator of this configuration, it is unique for account or standard namedspace    * @param date When informed return valid version configuration for this date    * @param inactive return the inctives versions too 
  */
  public void getIssConfByCity (BigDecimal cityCode, String code, Date date, Boolean inactive, final Response.Listener<List<IssConfByCity>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'cityCode' is set
    if (cityCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'cityCode' when calling getIssConfByCity",
         new ApiException(400, "Missing the required parameter 'cityCode' when calling getIssConfByCity"));
    }
    

    // create path and map variables
    String path = "/taxconf/iss/{cityCode}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cityCode" + "\\}", apiInvoker.escapeString(cityCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "code", code));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "inactive", inactive));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<IssConfByCity>) ApiInvoker.deserialize(localVarResponse,  "array", IssConfByCity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * retrive list of ISS
  * This operation return ISS configurations that match with parameters queries 
   * @param suffixcode Identify this ISS 
   * @param date When informed return valid version configuration for this date 
   * @param inactive return the inactive versions too 
   * @return List<IssConfByCity>
  */
  public List<IssConfByCity> getIssList (String suffixcode, Date date, Boolean inactive) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/taxconf/iss".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "suffixcode", suffixcode));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "inactive", inactive));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<IssConfByCity>) ApiInvoker.deserialize(localVarResponse, "array", IssConfByCity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * retrive list of ISS
   * This operation return ISS configurations that match with parameters queries 
   * @param suffixcode Identify this ISS    * @param date When informed return valid version configuration for this date    * @param inactive return the inactive versions too 
  */
  public void getIssList (String suffixcode, Date date, Boolean inactive, final Response.Listener<List<IssConfByCity>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/taxconf/iss".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "suffixcode", suffixcode));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "inactive", inactive));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<IssConfByCity>) ApiInvoker.deserialize(localVarResponse,  "array", IssConfByCity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * update a ISS by City Code.
  * 
   * @param cityCode City Code
   * @param issConfByCity The pet JSON you want to post
   * @return void
  */
  public void updateIssConfByCity (BigDecimal cityCode, IssConfByCity issConfByCity) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = issConfByCity;
    // verify the required parameter 'cityCode' is set
    if (cityCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cityCode' when calling updateIssConfByCity",
        new ApiException(400, "Missing the required parameter 'cityCode' when calling updateIssConfByCity"));
    }
    // verify the required parameter 'issConfByCity' is set
    if (issConfByCity == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'issConfByCity' when calling updateIssConfByCity",
        new ApiException(400, "Missing the required parameter 'issConfByCity' when calling updateIssConfByCity"));
    }

    // create path and map variables
    String path = "/taxconf/iss/{cityCode}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cityCode" + "\\}", apiInvoker.escapeString(cityCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * update a ISS by City Code.
   * 
   * @param cityCode City Code   * @param issConfByCity The pet JSON you want to post
  */
  public void updateIssConfByCity (BigDecimal cityCode, IssConfByCity issConfByCity, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = issConfByCity;

  
    // verify the required parameter 'cityCode' is set
    if (cityCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'cityCode' when calling updateIssConfByCity",
         new ApiException(400, "Missing the required parameter 'cityCode' when calling updateIssConfByCity"));
    }
    
    // verify the required parameter 'issConfByCity' is set
    if (issConfByCity == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'issConfByCity' when calling updateIssConfByCity",
         new ApiException(400, "Missing the required parameter 'issConfByCity' when calling updateIssConfByCity"));
    }
    

    // create path and map variables
    String path = "/taxconf/iss/{cityCode}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cityCode" + "\\}", apiInvoker.escapeString(cityCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
