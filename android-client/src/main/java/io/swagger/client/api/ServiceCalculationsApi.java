/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.Message;
import io.swagger.client.model.PaymentTransactionIn;
import io.swagger.client.model.PaymentTransactionOut;
import io.swagger.client.model.PurchaseTransactionIn;
import io.swagger.client.model.PurchaseTransactionOut;
import io.swagger.client.model.ReceiptTransactionIn;
import io.swagger.client.model.ReceiptTransactionOut;
import io.swagger.client.model.SalesTransactionIn;
import io.swagger.client.model.SalesTransactionOut;
import java.util.UUID;
import io.swagger.client.model.ValidationError;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ServiceCalculationsApi {
  String basePath = "https://br16-dev-app03.br.avalara.com/v2";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Retrieve transactions
  * Retrieve a single transaction
   * @param authorization Bearer {auth}
   * @param accountId Account ID
   * @param companyCode Company Code
   * @param transactionType Transaction Type (sale, purchase, receipts or payment)
   * @param documentCode Document Code
   * @return void
  */
  public void calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet (String authorization, UUID accountId, String companyCode, String transactionType, String documentCode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
        new ApiException(400, "Missing the required parameter 'authorization' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }
    // verify the required parameter 'companyCode' is set
    if (companyCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'companyCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
        new ApiException(400, "Missing the required parameter 'companyCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }
    // verify the required parameter 'transactionType' is set
    if (transactionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transactionType' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
        new ApiException(400, "Missing the required parameter 'transactionType' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }
    // verify the required parameter 'documentCode' is set
    if (documentCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'documentCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
        new ApiException(400, "Missing the required parameter 'documentCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }

    // create path and map variables
    String path = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "companyCode" + "\\}", apiInvoker.escapeString(companyCode.toString())).replaceAll("\\{" + "transactionType" + "\\}", apiInvoker.escapeString(transactionType.toString())).replaceAll("\\{" + "documentCode" + "\\}", apiInvoker.escapeString(documentCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Retrieve transactions
   * Retrieve a single transaction
   * @param authorization Bearer {auth}   * @param accountId Account ID   * @param companyCode Company Code   * @param transactionType Transaction Type (sale, purchase, receipts or payment)   * @param documentCode Document Code
  */
  public void calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet (String authorization, UUID accountId, String companyCode, String transactionType, String documentCode, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
         new ApiException(400, "Missing the required parameter 'authorization' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
         new ApiException(400, "Missing the required parameter 'accountId' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }
    
    // verify the required parameter 'companyCode' is set
    if (companyCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'companyCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
         new ApiException(400, "Missing the required parameter 'companyCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }
    
    // verify the required parameter 'transactionType' is set
    if (transactionType == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'transactionType' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
         new ApiException(400, "Missing the required parameter 'transactionType' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }
    
    // verify the required parameter 'documentCode' is set
    if (documentCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'documentCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
         new ApiException(400, "Missing the required parameter 'documentCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }
    

    // create path and map variables
    String path = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "companyCode" + "\\}", apiInvoker.escapeString(companyCode.toString())).replaceAll("\\{" + "transactionType" + "\\}", apiInvoker.escapeString(transactionType.toString())).replaceAll("\\{" + "documentCode" + "\\}", apiInvoker.escapeString(documentCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Promote a calculation to transaction
  * Promote a calculation to transaction
   * @param authorization Bearer {auth}
   * @param accountId Account ID
   * @param companyCode Company Code
   * @param transactionType Transaction Type (sale, purchase, receipts or payment)
   * @param documentCode Document Code
   * @return void
  */
  public void calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost (String authorization, UUID accountId, String companyCode, String transactionType, String documentCode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost",
        new ApiException(400, "Missing the required parameter 'authorization' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost"));
    }
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost",
        new ApiException(400, "Missing the required parameter 'accountId' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost"));
    }
    // verify the required parameter 'companyCode' is set
    if (companyCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'companyCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost",
        new ApiException(400, "Missing the required parameter 'companyCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost"));
    }
    // verify the required parameter 'transactionType' is set
    if (transactionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transactionType' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost",
        new ApiException(400, "Missing the required parameter 'transactionType' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost"));
    }
    // verify the required parameter 'documentCode' is set
    if (documentCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'documentCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost",
        new ApiException(400, "Missing the required parameter 'documentCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost"));
    }

    // create path and map variables
    String path = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/transactions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "companyCode" + "\\}", apiInvoker.escapeString(companyCode.toString())).replaceAll("\\{" + "transactionType" + "\\}", apiInvoker.escapeString(transactionType.toString())).replaceAll("\\{" + "documentCode" + "\\}", apiInvoker.escapeString(documentCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Promote a calculation to transaction
   * Promote a calculation to transaction
   * @param authorization Bearer {auth}   * @param accountId Account ID   * @param companyCode Company Code   * @param transactionType Transaction Type (sale, purchase, receipts or payment)   * @param documentCode Document Code
  */
  public void calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost (String authorization, UUID accountId, String companyCode, String transactionType, String documentCode, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost",
         new ApiException(400, "Missing the required parameter 'authorization' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost"));
    }
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost",
         new ApiException(400, "Missing the required parameter 'accountId' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost"));
    }
    
    // verify the required parameter 'companyCode' is set
    if (companyCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'companyCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost",
         new ApiException(400, "Missing the required parameter 'companyCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost"));
    }
    
    // verify the required parameter 'transactionType' is set
    if (transactionType == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'transactionType' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost",
         new ApiException(400, "Missing the required parameter 'transactionType' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost"));
    }
    
    // verify the required parameter 'documentCode' is set
    if (documentCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'documentCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost",
         new ApiException(400, "Missing the required parameter 'documentCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeTransactionsPost"));
    }
    

    // create path and map variables
    String path = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/transactions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "companyCode" + "\\}", apiInvoker.escapeString(companyCode.toString())).replaceAll("\\{" + "transactionType" + "\\}", apiInvoker.escapeString(transactionType.toString())).replaceAll("\\{" + "documentCode" + "\\}", apiInvoker.escapeString(documentCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve transactions
  * Retrieve a list of transactions
   * @param authorization Bearer {auth}
   * @param accountId Account ID
   * @param companyCode Company Code
   * @param transactionType Transaction Type (sale, purchase, receipts or payment)
   * @return void
  */
  public void calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet (String authorization, UUID accountId, String companyCode, String transactionType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet",
        new ApiException(400, "Missing the required parameter 'authorization' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet"));
    }
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet"));
    }
    // verify the required parameter 'companyCode' is set
    if (companyCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'companyCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet",
        new ApiException(400, "Missing the required parameter 'companyCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet"));
    }
    // verify the required parameter 'transactionType' is set
    if (transactionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transactionType' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet",
        new ApiException(400, "Missing the required parameter 'transactionType' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet"));
    }

    // create path and map variables
    String path = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "companyCode" + "\\}", apiInvoker.escapeString(companyCode.toString())).replaceAll("\\{" + "transactionType" + "\\}", apiInvoker.escapeString(transactionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Retrieve transactions
   * Retrieve a list of transactions
   * @param authorization Bearer {auth}   * @param accountId Account ID   * @param companyCode Company Code   * @param transactionType Transaction Type (sale, purchase, receipts or payment)
  */
  public void calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet (String authorization, UUID accountId, String companyCode, String transactionType, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet",
         new ApiException(400, "Missing the required parameter 'authorization' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet"));
    }
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet",
         new ApiException(400, "Missing the required parameter 'accountId' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet"));
    }
    
    // verify the required parameter 'companyCode' is set
    if (companyCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'companyCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet",
         new ApiException(400, "Missing the required parameter 'companyCode' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet"));
    }
    
    // verify the required parameter 'transactionType' is set
    if (transactionType == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'transactionType' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet",
         new ApiException(400, "Missing the required parameter 'transactionType' when calling calculationsAccountAccountIdCompanyCompanyCodeTransactionTypeGet"));
    }
    

    // create path and map variables
    String path = "/calculations/account/{accountId}/company/{companyCode}/{transactionType}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "companyCode" + "\\}", apiInvoker.escapeString(companyCode.toString())).replaceAll("\\{" + "transactionType" + "\\}", apiInvoker.escapeString(transactionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Calculation Method
  * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
   * @param authorization Bearer {auth}
   * @param body Transaction Message
   * @return PaymentTransactionOut
  */
  public PaymentTransactionOut calculationsservicePaymentPost (String authorization, PaymentTransactionIn body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling calculationsservicePaymentPost",
        new ApiException(400, "Missing the required parameter 'authorization' when calling calculationsservicePaymentPost"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling calculationsservicePaymentPost",
        new ApiException(400, "Missing the required parameter 'body' when calling calculationsservicePaymentPost"));
    }

    // create path and map variables
    String path = "/calculations?service-payment".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PaymentTransactionOut) ApiInvoker.deserialize(localVarResponse, "", PaymentTransactionOut.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Calculation Method
   * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
   * @param authorization Bearer {auth}   * @param body Transaction Message
  */
  public void calculationsservicePaymentPost (String authorization, PaymentTransactionIn body, final Response.Listener<PaymentTransactionOut> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling calculationsservicePaymentPost",
         new ApiException(400, "Missing the required parameter 'authorization' when calling calculationsservicePaymentPost"));
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'body' when calling calculationsservicePaymentPost",
         new ApiException(400, "Missing the required parameter 'body' when calling calculationsservicePaymentPost"));
    }
    

    // create path and map variables
    String path = "/calculations?service-payment".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PaymentTransactionOut) ApiInvoker.deserialize(localVarResponse,  "", PaymentTransactionOut.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Calculation Method
  * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
   * @param authorization Bearer {auth}
   * @param body Transaction Message
   * @return PurchaseTransactionOut
  */
  public PurchaseTransactionOut calculationsservicePurchasePost (String authorization, PurchaseTransactionIn body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling calculationsservicePurchasePost",
        new ApiException(400, "Missing the required parameter 'authorization' when calling calculationsservicePurchasePost"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling calculationsservicePurchasePost",
        new ApiException(400, "Missing the required parameter 'body' when calling calculationsservicePurchasePost"));
    }

    // create path and map variables
    String path = "/calculations?service-purchase".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PurchaseTransactionOut) ApiInvoker.deserialize(localVarResponse, "", PurchaseTransactionOut.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Calculation Method
   * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
   * @param authorization Bearer {auth}   * @param body Transaction Message
  */
  public void calculationsservicePurchasePost (String authorization, PurchaseTransactionIn body, final Response.Listener<PurchaseTransactionOut> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling calculationsservicePurchasePost",
         new ApiException(400, "Missing the required parameter 'authorization' when calling calculationsservicePurchasePost"));
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'body' when calling calculationsservicePurchasePost",
         new ApiException(400, "Missing the required parameter 'body' when calling calculationsservicePurchasePost"));
    }
    

    // create path and map variables
    String path = "/calculations?service-purchase".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PurchaseTransactionOut) ApiInvoker.deserialize(localVarResponse,  "", PurchaseTransactionOut.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Calculation Method
  * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
   * @param authorization Bearer {auth}
   * @param body Transaction Message
   * @return ReceiptTransactionOut
  */
  public ReceiptTransactionOut calculationsserviceReceiptPost (String authorization, ReceiptTransactionIn body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling calculationsserviceReceiptPost",
        new ApiException(400, "Missing the required parameter 'authorization' when calling calculationsserviceReceiptPost"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling calculationsserviceReceiptPost",
        new ApiException(400, "Missing the required parameter 'body' when calling calculationsserviceReceiptPost"));
    }

    // create path and map variables
    String path = "/calculations?service-receipt".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ReceiptTransactionOut) ApiInvoker.deserialize(localVarResponse, "", ReceiptTransactionOut.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Calculation Method
   * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
   * @param authorization Bearer {auth}   * @param body Transaction Message
  */
  public void calculationsserviceReceiptPost (String authorization, ReceiptTransactionIn body, final Response.Listener<ReceiptTransactionOut> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling calculationsserviceReceiptPost",
         new ApiException(400, "Missing the required parameter 'authorization' when calling calculationsserviceReceiptPost"));
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'body' when calling calculationsserviceReceiptPost",
         new ApiException(400, "Missing the required parameter 'body' when calling calculationsserviceReceiptPost"));
    }
    

    // create path and map variables
    String path = "/calculations?service-receipt".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ReceiptTransactionOut) ApiInvoker.deserialize(localVarResponse,  "", ReceiptTransactionOut.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Calculation Method
  * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
   * @param authorization Bearer {auth}
   * @param body Transaction Message
   * @return SalesTransactionOut
  */
  public SalesTransactionOut calculationsserviceSalesPost (String authorization, SalesTransactionIn body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling calculationsserviceSalesPost",
        new ApiException(400, "Missing the required parameter 'authorization' when calling calculationsserviceSalesPost"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling calculationsserviceSalesPost",
        new ApiException(400, "Missing the required parameter 'body' when calling calculationsserviceSalesPost"));
    }

    // create path and map variables
    String path = "/calculations?service-sales".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SalesTransactionOut) ApiInvoker.deserialize(localVarResponse, "", SalesTransactionOut.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Calculation Method
   * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each &#39;calculations-&lt;type&gt;&#39;.
   * @param authorization Bearer {auth}   * @param body Transaction Message
  */
  public void calculationsserviceSalesPost (String authorization, SalesTransactionIn body, final Response.Listener<SalesTransactionOut> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling calculationsserviceSalesPost",
         new ApiException(400, "Missing the required parameter 'authorization' when calling calculationsserviceSalesPost"));
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'body' when calling calculationsserviceSalesPost",
         new ApiException(400, "Missing the required parameter 'body' when calling calculationsserviceSalesPost"));
    }
    

    // create path and map variables
    String path = "/calculations?service-sales".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SalesTransactionOut) ApiInvoker.deserialize(localVarResponse,  "", SalesTransactionOut.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
