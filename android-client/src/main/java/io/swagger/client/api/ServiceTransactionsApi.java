/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.Message;
import io.swagger.client.model.PaymentTransactionIn;
import io.swagger.client.model.PaymentTransactionOut;
import io.swagger.client.model.PurchaseTransactionIn;
import io.swagger.client.model.PurchaseTransactionOut;
import io.swagger.client.model.ReceiptTransactionIn;
import io.swagger.client.model.ReceiptTransactionOut;
import io.swagger.client.model.SalesTransactionIn;
import io.swagger.client.model.SalesTransactionOut;
import io.swagger.client.model.StateTransition;
import java.util.UUID;
import io.swagger.client.model.ValidationError;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ServiceTransactionsApi {
  String basePath = "http://avataxbr-sandbox.avalarabrasil.com.br/v2";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Retrieve transactions
  * Retrieve a single transaction
   * @param authorization Bearer {auth}
   * @param accountId Account ID
   * @param companyCode Company Code
   * @param transactionType Transaction Type (sale, purchase, receipts or payment)
   * @param documentCode Document Code
   * @return void
  */
  public void transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet (String authorization, UUID accountId, String companyCode, String transactionType, String documentCode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
        new ApiException(400, "Missing the required parameter 'authorization' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }
    // verify the required parameter 'companyCode' is set
    if (companyCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'companyCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
        new ApiException(400, "Missing the required parameter 'companyCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }
    // verify the required parameter 'transactionType' is set
    if (transactionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transactionType' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
        new ApiException(400, "Missing the required parameter 'transactionType' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }
    // verify the required parameter 'documentCode' is set
    if (documentCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'documentCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
        new ApiException(400, "Missing the required parameter 'documentCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }

    // create path and map variables
    String path = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "companyCode" + "\\}", apiInvoker.escapeString(companyCode.toString())).replaceAll("\\{" + "transactionType" + "\\}", apiInvoker.escapeString(transactionType.toString())).replaceAll("\\{" + "documentCode" + "\\}", apiInvoker.escapeString(documentCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Retrieve transactions
   * Retrieve a single transaction
   * @param authorization Bearer {auth}   * @param accountId Account ID   * @param companyCode Company Code   * @param transactionType Transaction Type (sale, purchase, receipts or payment)   * @param documentCode Document Code
  */
  public void transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet (String authorization, UUID accountId, String companyCode, String transactionType, String documentCode, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
         new ApiException(400, "Missing the required parameter 'authorization' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
         new ApiException(400, "Missing the required parameter 'accountId' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }
    
    // verify the required parameter 'companyCode' is set
    if (companyCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'companyCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
         new ApiException(400, "Missing the required parameter 'companyCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }
    
    // verify the required parameter 'transactionType' is set
    if (transactionType == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'transactionType' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
         new ApiException(400, "Missing the required parameter 'transactionType' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }
    
    // verify the required parameter 'documentCode' is set
    if (documentCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'documentCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet",
         new ApiException(400, "Missing the required parameter 'documentCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet"));
    }
    

    // create path and map variables
    String path = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "companyCode" + "\\}", apiInvoker.escapeString(companyCode.toString())).replaceAll("\\{" + "transactionType" + "\\}", apiInvoker.escapeString(transactionType.toString())).replaceAll("\\{" + "documentCode" + "\\}", apiInvoker.escapeString(documentCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Transaction State Transition
  * Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
   * @param authorization Bearer {auth}
   * @param accountId Account ID
   * @param companyCode Company Code
   * @param transactionType Transaction Type (sale, purchase, receipts or payment)
   * @param documentCode Document Code
   * @param body Transaction Message
   * @return void
  */
  public void transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost (String authorization, UUID accountId, String companyCode, String transactionType, String documentCode, StateTransition body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost",
        new ApiException(400, "Missing the required parameter 'authorization' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost"));
    }
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost",
        new ApiException(400, "Missing the required parameter 'accountId' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost"));
    }
    // verify the required parameter 'companyCode' is set
    if (companyCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'companyCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost",
        new ApiException(400, "Missing the required parameter 'companyCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost"));
    }
    // verify the required parameter 'transactionType' is set
    if (transactionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transactionType' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost",
        new ApiException(400, "Missing the required parameter 'transactionType' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost"));
    }
    // verify the required parameter 'documentCode' is set
    if (documentCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'documentCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost",
        new ApiException(400, "Missing the required parameter 'documentCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost",
        new ApiException(400, "Missing the required parameter 'body' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost"));
    }

    // create path and map variables
    String path = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/stateTransitions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "companyCode" + "\\}", apiInvoker.escapeString(companyCode.toString())).replaceAll("\\{" + "transactionType" + "\\}", apiInvoker.escapeString(transactionType.toString())).replaceAll("\\{" + "documentCode" + "\\}", apiInvoker.escapeString(documentCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Transaction State Transition
   * Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
   * @param authorization Bearer {auth}   * @param accountId Account ID   * @param companyCode Company Code   * @param transactionType Transaction Type (sale, purchase, receipts or payment)   * @param documentCode Document Code   * @param body Transaction Message
  */
  public void transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost (String authorization, UUID accountId, String companyCode, String transactionType, String documentCode, StateTransition body, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost",
         new ApiException(400, "Missing the required parameter 'authorization' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost"));
    }
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost",
         new ApiException(400, "Missing the required parameter 'accountId' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost"));
    }
    
    // verify the required parameter 'companyCode' is set
    if (companyCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'companyCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost",
         new ApiException(400, "Missing the required parameter 'companyCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost"));
    }
    
    // verify the required parameter 'transactionType' is set
    if (transactionType == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'transactionType' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost",
         new ApiException(400, "Missing the required parameter 'transactionType' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost"));
    }
    
    // verify the required parameter 'documentCode' is set
    if (documentCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'documentCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost",
         new ApiException(400, "Missing the required parameter 'documentCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost"));
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'body' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost",
         new ApiException(400, "Missing the required parameter 'body' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost"));
    }
    

    // create path and map variables
    String path = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/stateTransitions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "companyCode" + "\\}", apiInvoker.escapeString(companyCode.toString())).replaceAll("\\{" + "transactionType" + "\\}", apiInvoker.escapeString(transactionType.toString())).replaceAll("\\{" + "documentCode" + "\\}", apiInvoker.escapeString(documentCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve transactions
  * Retrieve a list of transactions
   * @param authorization Bearer {auth}
   * @param accountId Account ID
   * @param companyCode Company Code
   * @param transactionType Transaction Type (sale, purchase, receipts or payment)
   * @return void
  */
  public void transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet (String authorization, UUID accountId, String companyCode, String transactionType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet",
        new ApiException(400, "Missing the required parameter 'authorization' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet"));
    }
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet",
        new ApiException(400, "Missing the required parameter 'accountId' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet"));
    }
    // verify the required parameter 'companyCode' is set
    if (companyCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'companyCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet",
        new ApiException(400, "Missing the required parameter 'companyCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet"));
    }
    // verify the required parameter 'transactionType' is set
    if (transactionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transactionType' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet",
        new ApiException(400, "Missing the required parameter 'transactionType' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet"));
    }

    // create path and map variables
    String path = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "companyCode" + "\\}", apiInvoker.escapeString(companyCode.toString())).replaceAll("\\{" + "transactionType" + "\\}", apiInvoker.escapeString(transactionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Retrieve transactions
   * Retrieve a list of transactions
   * @param authorization Bearer {auth}   * @param accountId Account ID   * @param companyCode Company Code   * @param transactionType Transaction Type (sale, purchase, receipts or payment)
  */
  public void transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet (String authorization, UUID accountId, String companyCode, String transactionType, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet",
         new ApiException(400, "Missing the required parameter 'authorization' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet"));
    }
    
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet",
         new ApiException(400, "Missing the required parameter 'accountId' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet"));
    }
    
    // verify the required parameter 'companyCode' is set
    if (companyCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'companyCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet",
         new ApiException(400, "Missing the required parameter 'companyCode' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet"));
    }
    
    // verify the required parameter 'transactionType' is set
    if (transactionType == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'transactionType' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet",
         new ApiException(400, "Missing the required parameter 'transactionType' when calling transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet"));
    }
    

    // create path and map variables
    String path = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "accountId" + "\\}", apiInvoker.escapeString(accountId.toString())).replaceAll("\\{" + "companyCode" + "\\}", apiInvoker.escapeString(companyCode.toString())).replaceAll("\\{" + "transactionType" + "\\}", apiInvoker.escapeString(transactionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Calculation Method
  * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
   * @param authorization Bearer {auth}
   * @param body Transaction Message
   * @return PaymentTransactionOut
  */
  public PaymentTransactionOut transactionsservicePaymentPost (String authorization, PaymentTransactionIn body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling transactionsservicePaymentPost",
        new ApiException(400, "Missing the required parameter 'authorization' when calling transactionsservicePaymentPost"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling transactionsservicePaymentPost",
        new ApiException(400, "Missing the required parameter 'body' when calling transactionsservicePaymentPost"));
    }

    // create path and map variables
    String path = "/transactions?service-payment".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PaymentTransactionOut) ApiInvoker.deserialize(localVarResponse, "", PaymentTransactionOut.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Calculation Method
   * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
   * @param authorization Bearer {auth}   * @param body Transaction Message
  */
  public void transactionsservicePaymentPost (String authorization, PaymentTransactionIn body, final Response.Listener<PaymentTransactionOut> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling transactionsservicePaymentPost",
         new ApiException(400, "Missing the required parameter 'authorization' when calling transactionsservicePaymentPost"));
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'body' when calling transactionsservicePaymentPost",
         new ApiException(400, "Missing the required parameter 'body' when calling transactionsservicePaymentPost"));
    }
    

    // create path and map variables
    String path = "/transactions?service-payment".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PaymentTransactionOut) ApiInvoker.deserialize(localVarResponse,  "", PaymentTransactionOut.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Calculation Method
  * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
   * @param authorization Bearer {auth}
   * @param body Transaction Message
   * @return PurchaseTransactionOut
  */
  public PurchaseTransactionOut transactionsservicePurchasePost (String authorization, PurchaseTransactionIn body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling transactionsservicePurchasePost",
        new ApiException(400, "Missing the required parameter 'authorization' when calling transactionsservicePurchasePost"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling transactionsservicePurchasePost",
        new ApiException(400, "Missing the required parameter 'body' when calling transactionsservicePurchasePost"));
    }

    // create path and map variables
    String path = "/transactions?service-purchase".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PurchaseTransactionOut) ApiInvoker.deserialize(localVarResponse, "", PurchaseTransactionOut.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Calculation Method
   * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
   * @param authorization Bearer {auth}   * @param body Transaction Message
  */
  public void transactionsservicePurchasePost (String authorization, PurchaseTransactionIn body, final Response.Listener<PurchaseTransactionOut> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling transactionsservicePurchasePost",
         new ApiException(400, "Missing the required parameter 'authorization' when calling transactionsservicePurchasePost"));
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'body' when calling transactionsservicePurchasePost",
         new ApiException(400, "Missing the required parameter 'body' when calling transactionsservicePurchasePost"));
    }
    

    // create path and map variables
    String path = "/transactions?service-purchase".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PurchaseTransactionOut) ApiInvoker.deserialize(localVarResponse,  "", PurchaseTransactionOut.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Calculation Method
  * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
   * @param authorization Bearer {auth}
   * @param body Transaction Message
   * @return ReceiptTransactionOut
  */
  public ReceiptTransactionOut transactionsserviceReceiptPost (String authorization, ReceiptTransactionIn body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling transactionsserviceReceiptPost",
        new ApiException(400, "Missing the required parameter 'authorization' when calling transactionsserviceReceiptPost"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling transactionsserviceReceiptPost",
        new ApiException(400, "Missing the required parameter 'body' when calling transactionsserviceReceiptPost"));
    }

    // create path and map variables
    String path = "/transactions?service-receipt".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ReceiptTransactionOut) ApiInvoker.deserialize(localVarResponse, "", ReceiptTransactionOut.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Calculation Method
   * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
   * @param authorization Bearer {auth}   * @param body Transaction Message
  */
  public void transactionsserviceReceiptPost (String authorization, ReceiptTransactionIn body, final Response.Listener<ReceiptTransactionOut> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling transactionsserviceReceiptPost",
         new ApiException(400, "Missing the required parameter 'authorization' when calling transactionsserviceReceiptPost"));
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'body' when calling transactionsserviceReceiptPost",
         new ApiException(400, "Missing the required parameter 'body' when calling transactionsserviceReceiptPost"));
    }
    

    // create path and map variables
    String path = "/transactions?service-receipt".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ReceiptTransactionOut) ApiInvoker.deserialize(localVarResponse,  "", ReceiptTransactionOut.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Calculation Method
  * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
   * @param authorization Bearer {auth}
   * @param body Transaction Message
   * @return SalesTransactionOut
  */
  public SalesTransactionOut transactionsserviceSalesPost (String authorization, SalesTransactionIn body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling transactionsserviceSalesPost",
        new ApiException(400, "Missing the required parameter 'authorization' when calling transactionsserviceSalesPost"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling transactionsserviceSalesPost",
        new ApiException(400, "Missing the required parameter 'body' when calling transactionsserviceSalesPost"));
    }

    // create path and map variables
    String path = "/transactions?service-sales".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SalesTransactionOut) ApiInvoker.deserialize(localVarResponse, "", SalesTransactionOut.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Calculation Method
   * Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
   * @param authorization Bearer {auth}   * @param body Transaction Message
  */
  public void transactionsserviceSalesPost (String authorization, SalesTransactionIn body, final Response.Listener<SalesTransactionOut> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling transactionsserviceSalesPost",
         new ApiException(400, "Missing the required parameter 'authorization' when calling transactionsserviceSalesPost"));
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'body' when calling transactionsserviceSalesPost",
         new ApiException(400, "Missing the required parameter 'body' when calling transactionsserviceSalesPost"));
    }
    

    // create path and map variables
    String path = "/transactions?service-sales".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SalesTransactionOut) ApiInvoker.deserialize(localVarResponse,  "", SalesTransactionOut.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
