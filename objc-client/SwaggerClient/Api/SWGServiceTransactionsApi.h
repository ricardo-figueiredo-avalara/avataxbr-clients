#import <Foundation/Foundation.h>
#import "SWGMessage.h"
#import "SWGPaymentTransactionIn.h"
#import "SWGPaymentTransactionOut.h"
#import "SWGPurchaseTransactionIn.h"
#import "SWGPurchaseTransactionOut.h"
#import "SWGReceiptTransactionIn.h"
#import "SWGReceiptTransactionOut.h"
#import "SWGSalesTransactionIn.h"
#import "SWGSalesTransactionOut.h"
#import "SWGStateTransition.h"
#import "SWGValidationError.h"
#import "SWGApi.h"

/**
* BR16 - API
* This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
*
* OpenAPI spec version: 1.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGServiceTransactionsApi: NSObject <SWGApi>

extern NSString* kSWGServiceTransactionsApiErrorDomain;
extern NSInteger kSWGServiceTransactionsApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Retrieve transactions
/// Retrieve a single transaction
///
/// @param authorization Bearer {auth}
/// @param accountId Account ID
/// @param companyCode Company Code
/// @param transactionType Transaction Type (sale, purchase, receipts or payment)
/// @param documentCode Document Code
///  code:200 message:"List of transaction",
///  code:400 message:"The request was invalid or cannot be otherwise served.",
///  code:401 message:"Authentication credentials were missing or incorrect.",
///  code:403 message:"The request is understood, but it has been refused or access is not allowed.",
///  code:404 message:"The URI requested is invalid or the resource requested does not exists.",
///  code:429 message:"The request cannot be served due to the application’s rate limit having been exhausted for the resource.",
///  code:500 message:"Something is broken.",
///  code:503 message:"The server is up, but overloaded with requests. Try again later."
-(NSNumber*) transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithAuthorization: (NSString*) authorization
    accountId: (NSString*) accountId
    companyCode: (NSString*) companyCode
    transactionType: (NSString*) transactionType
    documentCode: (NSString*) documentCode
    completionHandler: (void (^)(NSError* error)) handler;

/// Transaction State Transition
/// Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -> Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -> Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -> Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -> Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -> Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -> Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -> FiledByAvalara 
///
/// @param authorization Bearer {auth}
/// @param accountId Account ID
/// @param companyCode Company Code
/// @param transactionType Transaction Type (sale, purchase, receipts or payment)
/// @param documentCode Document Code
/// @param body Transaction Message
///  code:200 message:"Transaction Out",
///  code:400 message:"The request was invalid or cannot be otherwise served.",
///  code:401 message:"Authentication credentials were missing or incorrect.",
///  code:403 message:"The request is understood, but it has been refused or access is not allowed.",
///  code:404 message:"The URI requested is invalid or the resource requested does not exists.",
///  code:429 message:"The request cannot be served due to the application’s rate limit having been exhausted for the resource.",
///  code:500 message:"Something is broken.",
///  code:503 message:"The server is up, but overloaded with requests. Try again later."
-(NSNumber*) transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostWithAuthorization: (NSString*) authorization
    accountId: (NSString*) accountId
    companyCode: (NSString*) companyCode
    transactionType: (NSString*) transactionType
    documentCode: (NSString*) documentCode
    body: (SWGStateTransition*) body
    completionHandler: (void (^)(NSError* error)) handler;

/// Retrieve transactions
/// Retrieve a list of transactions
///
/// @param authorization Bearer {auth}
/// @param accountId Account ID
/// @param companyCode Company Code
/// @param transactionType Transaction Type (sale, purchase, receipts or payment)
///  code:200 message:"List of transaction",
///  code:400 message:"The request was invalid or cannot be otherwise served.",
///  code:401 message:"Authentication credentials were missing or incorrect.",
///  code:403 message:"The request is understood, but it has been refused or access is not allowed.",
///  code:404 message:"The URI requested is invalid or the resource requested does not exists.",
///  code:429 message:"The request cannot be served due to the application’s rate limit having been exhausted for the resource.",
///  code:500 message:"Something is broken.",
///  code:503 message:"The server is up, but overloaded with requests. Try again later."
-(NSNumber*) transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithAuthorization: (NSString*) authorization
    accountId: (NSString*) accountId
    companyCode: (NSString*) companyCode
    transactionType: (NSString*) transactionType
    completionHandler: (void (^)(NSError* error)) handler;

/// Calculation Method
/// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
///
/// @param authorization Bearer {auth}
/// @param body Transaction Message
///  code:200 message:"Transaction Out",
///  code:400 message:"The request was invalid or cannot be otherwise served.",
///  code:401 message:"Authentication credentials were missing or incorrect.",
///  code:403 message:"The request is understood, but it has been refused or access is not allowed.",
///  code:404 message:"The URI requested is invalid or the resource requested does not exists.",
///  code:429 message:"The request cannot be served due to the application’s rate limit having been exhausted for the resource.",
///  code:500 message:"Something is broken.",
///  code:503 message:"The server is up, but overloaded with requests. Try again later."
/// @return SWGPaymentTransactionOut*
-(NSNumber*) transactionsservicePaymentPostWithAuthorization: (NSString*) authorization
    body: (SWGPaymentTransactionIn*) body
    completionHandler: (void (^)(SWGPaymentTransactionOut* output, NSError* error)) handler;

/// Calculation Method
/// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
///
/// @param authorization Bearer {auth}
/// @param body Transaction Message
///  code:200 message:"Transaction Out",
///  code:400 message:"The request was invalid or cannot be otherwise served.",
///  code:401 message:"Authentication credentials were missing or incorrect.",
///  code:403 message:"The request is understood, but it has been refused or access is not allowed.",
///  code:404 message:"The URI requested is invalid or the resource requested does not exists.",
///  code:429 message:"The request cannot be served due to the application’s rate limit having been exhausted for the resource.",
///  code:500 message:"Something is broken.",
///  code:503 message:"The server is up, but overloaded with requests. Try again later."
/// @return SWGPurchaseTransactionOut*
-(NSNumber*) transactionsservicePurchasePostWithAuthorization: (NSString*) authorization
    body: (SWGPurchaseTransactionIn*) body
    completionHandler: (void (^)(SWGPurchaseTransactionOut* output, NSError* error)) handler;

/// Calculation Method
/// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
///
/// @param authorization Bearer {auth}
/// @param body Transaction Message
///  code:200 message:"Transaction Out",
///  code:400 message:"The request was invalid or cannot be otherwise served.",
///  code:401 message:"Authentication credentials were missing or incorrect.",
///  code:403 message:"The request is understood, but it has been refused or access is not allowed.",
///  code:404 message:"The URI requested is invalid or the resource requested does not exists.",
///  code:429 message:"The request cannot be served due to the application’s rate limit having been exhausted for the resource.",
///  code:500 message:"Something is broken.",
///  code:503 message:"The server is up, but overloaded with requests. Try again later."
/// @return SWGReceiptTransactionOut*
-(NSNumber*) transactionsserviceReceiptPostWithAuthorization: (NSString*) authorization
    body: (SWGReceiptTransactionIn*) body
    completionHandler: (void (^)(SWGReceiptTransactionOut* output, NSError* error)) handler;

/// Calculation Method
/// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
///
/// @param authorization Bearer {auth}
/// @param body Transaction Message
///  code:200 message:"Transaction Out",
///  code:400 message:"The request was invalid or cannot be otherwise served.",
///  code:401 message:"Authentication credentials were missing or incorrect.",
///  code:403 message:"The request is understood, but it has been refused or access is not allowed.",
///  code:404 message:"The URI requested is invalid or the resource requested does not exists.",
///  code:429 message:"The request cannot be served due to the application’s rate limit having been exhausted for the resource.",
///  code:500 message:"Something is broken.",
///  code:503 message:"The server is up, but overloaded with requests. Try again later."
/// @return SWGSalesTransactionOut*
-(NSNumber*) transactionsserviceSalesPostWithAuthorization: (NSString*) authorization
    body: (SWGSalesTransactionIn*) body
    completionHandler: (void (^)(SWGSalesTransactionOut* output, NSError* error)) handler;


@end
