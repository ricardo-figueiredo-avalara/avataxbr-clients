/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * CompanyApi.h
 *
 * 
 */

#ifndef CompanyApi_H_
#define CompanyApi_H_


#include "ApiClient.h"

#include "Company.h"
#include "Message.h"
#include "UUID.h"
#include "ValidationError.h"

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  CompanyApi
{
public:
    CompanyApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~CompanyApi();
    /// <summary>
    /// Retrieve Companies by account
    /// </summary>
    /// <remarks>
    /// Retrieve list companies of one account
    /// </remarks>
    
    pplx::task<std::vector<std::shared_ptr<Company>>> companiesGet();
    /// <summary>
    /// Create company and your data configuration
    /// </summary>
    /// <remarks>
    /// This method operation create a company for a account 
    /// </remarks>
    /// <param name="body">Transaction Message</param>
    pplx::task<std::shared_ptr<Company>> createCompany(std::shared_ptr<Company> body);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="accountId">Account ID</param>/// <param name="companyId">Company ID</param>
    pplx::task<void> deleteAccountCompany(std::shared_ptr<UUID> accountId, std::shared_ptr<UUID> companyId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="companyId">Company ID</param>/// <param name="companyId2">Company ID</param>
    pplx::task<void> deleteCompany(std::shared_ptr<UUID> companyId, std::shared_ptr<UUID> companyId2);
    /// <summary>
    /// Get company information and your data configuration
    /// </summary>
    /// <remarks>
    /// This method operation get a company for a account 
    /// </remarks>
    /// <param name="companyId">Company ID</param>
    pplx::task<std::shared_ptr<Company>> infoCompany(std::shared_ptr<UUID> companyId);
    /// <summary>
    /// Update company information and your data configuration
    /// </summary>
    /// <remarks>
    /// This method operation create a company for a account 
    /// </remarks>
    /// <param name="companyId">Company ID</param>/// <param name="body">Transaction Message</param>
    pplx::task<void> updateCompany(std::shared_ptr<UUID> companyId, std::shared_ptr<Company> body);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* CompanyApi_H_ */

