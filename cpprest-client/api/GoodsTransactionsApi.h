/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * GoodsTransactionsApi.h
 *
 * 
 */

#ifndef GoodsTransactionsApi_H_
#define GoodsTransactionsApi_H_


#include "ApiClient.h"

#include "Message.h"
#include "TransactionForGoodsIn.h"
#include "TransactionForGoodsOut.h"
#include "ValidationError.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  GoodsTransactionsApi
{
public:
    GoodsTransactionsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~GoodsTransactionsApi();
    /// <summary>
    /// Transaction Method
    /// </summary>
    /// <remarks>
    /// This method has more then one operation model, (a) AS IS, the system only stores the transaction; (b) Full Calculation, the system calculates taxes, validates fileds, stores with transaction state, but doesn&#39;t try get government authorization; (c) Full Sync, the system calculates taxes, validates fileds, gets government authorization, stores with transaction state when authorized, used for NFCe. 
    /// </remarks>
    /// <param name="authorization">Bearer {auth}</param>/// <param name="body">Transaction Message</param>
    pplx::task<std::shared_ptr<TransactionForGoodsOut>> transactionsgoodsPurchasePost(utility::string_t authorization, std::shared_ptr<TransactionForGoodsIn> body);
    /// <summary>
    /// Transaction Method
    /// </summary>
    /// <remarks>
    /// This method has more then one operation model, (a) AS IS, the system only stores the transaction; (b) Full Calculation, the system calculates taxes, validates fields, stores with transaction state, but doesn&#39;t try get government authorization; (c) Full Sync, the system calculates the taxes, validates fileds, gets government authorization, stores with transaction state when authorized, used for NFCe. 
    /// </remarks>
    /// <param name="authorization">Bearer {auth}</param>/// <param name="body">Transaction Message</param>
    pplx::task<std::shared_ptr<TransactionForGoodsOut>> transactionsgoodsSalesPost(utility::string_t authorization, std::shared_ptr<TransactionForGoodsIn> body);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* GoodsTransactionsApi_H_ */

