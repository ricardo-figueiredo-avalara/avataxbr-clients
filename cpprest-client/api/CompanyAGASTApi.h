/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * CompanyAGASTApi.h
 *
 * 
 */

#ifndef CompanyAGASTApi_H_
#define CompanyAGASTApi_H_


#include "ApiClient.h"

#include "CustomAgast.h"
#include "Inline_response_200_1.h"
#include "Inline_response_201.h"
#include "Message.h"
#include "UUID.h"
#include "ValidationError.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  CompanyAGASTApi
{
public:
    CompanyAGASTApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~CompanyAGASTApi();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This operation return custom agast configurations that match with parameters queries - Alannes. 
    /// </remarks>
    /// <param name="companyId">Company ID</param>/// <param name="code">Agast Code</param>/// <param name="parent">Agast parent code, means that this agast is a specialization of parent agast  (optional)</param>
    pplx::task<std::shared_ptr<CustomAgast>> companiesCompanyIdAgastsCodeGet(std::shared_ptr<UUID> companyId, utility::string_t code, utility::string_t parent);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This operation return custom agast configurations that match with parameters queries 
    /// </remarks>
    /// <param name="companyId">Company ID</param>/// <param name="text">Text query (optional)</param>/// <param name="xPaginationLimit">The per page limit. Currently set to 10 but subject to change at any time (max 100). (optional, default to 10)</param>/// <param name="xPaginationCurrentPage">The current page. Defaults to 1. (optional, default to 1)</param>/// <param name="xPaginationSort"> (optional)</param>/// <param name="agast">Custom Agast Code (optional)</param>/// <param name="parent">Agast Code (optional)</param>
    pplx::task<std::vector<std::shared_ptr<Inline_response_200_1>>> companiesCompanyIdAgastsGet(std::shared_ptr<UUID> companyId, utility::string_t text, int32_t xPaginationLimit, int32_t xPaginationCurrentPage, utility::string_t xPaginationSort, utility::string_t agast, utility::string_t parent);
    /// <summary>
    /// Create custom agast for one company
    /// </summary>
    /// <remarks>
    /// This method operation create a custom agast for one company 
    /// </remarks>
    /// <param name="companyId">Company ID</param>/// <param name="body">Transaction Message</param>/// <param name="text">Text query (optional)</param>
    pplx::task<std::shared_ptr<Inline_response_201>> createCustomAgast(std::shared_ptr<UUID> companyId, std::shared_ptr<CustomAgast> body, utility::string_t text);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="companyId">Company ID</param>/// <param name="code">Agast Code</param>
    pplx::task<void> deleteAgast(std::shared_ptr<UUID> companyId, utility::string_t code);
    /// <summary>
    /// Update custom agast for one company
    /// </summary>
    /// <remarks>
    /// This method operation create a custom agast for one company 
    /// </remarks>
    /// <param name="companyId">Company ID</param>/// <param name="code">Agast Code</param>/// <param name="body">Transaction Message</param>
    pplx::task<void> updateCustomAgast(std::shared_ptr<UUID> companyId, utility::string_t code, std::shared_ptr<CustomAgast> body);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* CompanyAGASTApi_H_ */

