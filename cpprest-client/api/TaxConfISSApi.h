/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * TaxConfISSApi.h
 *
 * 
 */

#ifndef TaxConfISSApi_H_
#define TaxConfISSApi_H_


#include "ApiClient.h"

#include "Inline_response_201.h"
#include "IssConfByCity.h"
#include "Message.h"
#include "Number.h"
#include "ValidationError.h"
#include <cpprest/details/basic_types.h>
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  TaxConfISSApi
{
public:
    TaxConfISSApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~TaxConfISSApi();
    /// <summary>
    /// create a new ISS Configuration
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="issConfByCity">The pet JSON you want to post</param>
    pplx::task<std::shared_ptr<Inline_response_201>> createIssConfByCity(std::shared_ptr<IssConfByCity> issConfByCity);
    /// <summary>
    /// disable a ISS by City Code.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="cityCode">City Code</param>
    pplx::task<void> deleteIssConf(std::shared_ptr<Number> cityCode);
    /// <summary>
    /// get ISS information by City Code.
    /// </summary>
    /// <remarks>
    /// This operation return configurations of ISS that match with parameters queries 
    /// </remarks>
    /// <param name="cityCode">City Code</param>/// <param name="code">Identificator of this configuration, it is unique for account or standard namedspace  (optional)</param>/// <param name="date">When informed return valid version configuration for this date  (optional)</param>/// <param name="inactive">return the inctives versions too  (optional)</param>
    pplx::task<std::vector<std::shared_ptr<IssConfByCity>>> getIssConfByCity(std::shared_ptr<Number> cityCode, utility::string_t code, utility::datetime date, bool inactive);
    /// <summary>
    /// retrive list of ISS
    /// </summary>
    /// <remarks>
    /// This operation return ISS configurations that match with parameters queries 
    /// </remarks>
    /// <param name="suffixcode">Identify this ISS  (optional)</param>/// <param name="date">When informed return valid version configuration for this date  (optional)</param>/// <param name="inactive">return the inactive versions too  (optional)</param>
    pplx::task<std::vector<std::shared_ptr<IssConfByCity>>> getIssList(utility::string_t suffixcode, utility::datetime date, bool inactive);
    /// <summary>
    /// update a ISS by City Code.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="cityCode">City Code</param>/// <param name="issConfByCity">The pet JSON you want to post</param>
    pplx::task<void> updateIssConfByCity(std::shared_ptr<Number> cityCode, std::shared_ptr<IssConfByCity> issConfByCity);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* TaxConfISSApi_H_ */

