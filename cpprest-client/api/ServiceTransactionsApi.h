/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ServiceTransactionsApi.h
 *
 * 
 */

#ifndef ServiceTransactionsApi_H_
#define ServiceTransactionsApi_H_


#include "ApiClient.h"

#include "Message.h"
#include "PaymentTransactionIn.h"
#include "PaymentTransactionOut.h"
#include "PurchaseTransactionIn.h"
#include "PurchaseTransactionOut.h"
#include "ReceiptTransactionIn.h"
#include "ReceiptTransactionOut.h"
#include "SalesTransactionIn.h"
#include "SalesTransactionOut.h"
#include "StateTransition.h"
#include "UUID.h"
#include "ValidationError.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  ServiceTransactionsApi
{
public:
    ServiceTransactionsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~ServiceTransactionsApi();
    /// <summary>
    /// Retrieve transactions
    /// </summary>
    /// <remarks>
    /// Retrieve a single transaction
    /// </remarks>
    /// <param name="authorization">Bearer {auth}</param>/// <param name="accountId">Account ID</param>/// <param name="companyCode">Company Code</param>/// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>/// <param name="documentCode">Document Code</param>
    pplx::task<void> transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(utility::string_t authorization, std::shared_ptr<UUID> accountId, utility::string_t companyCode, utility::string_t transactionType, utility::string_t documentCode);
    /// <summary>
    /// Transaction State Transition
    /// </summary>
    /// <remarks>
    /// Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -&gt; Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -&gt; Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -&gt; Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -&gt; Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -&gt; Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -&gt; Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -&gt; FiledByAvalara 
    /// </remarks>
    /// <param name="authorization">Bearer {auth}</param>/// <param name="accountId">Account ID</param>/// <param name="companyCode">Company Code</param>/// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>/// <param name="documentCode">Document Code</param>/// <param name="body">Transaction Message</param>
    pplx::task<void> transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost(utility::string_t authorization, std::shared_ptr<UUID> accountId, utility::string_t companyCode, utility::string_t transactionType, utility::string_t documentCode, std::shared_ptr<StateTransition> body);
    /// <summary>
    /// Retrieve transactions
    /// </summary>
    /// <remarks>
    /// Retrieve a list of transactions
    /// </remarks>
    /// <param name="authorization">Bearer {auth}</param>/// <param name="accountId">Account ID</param>/// <param name="companyCode">Company Code</param>/// <param name="transactionType">Transaction Type (sale, purchase, receipts or payment)</param>
    pplx::task<void> transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(utility::string_t authorization, std::shared_ptr<UUID> accountId, utility::string_t companyCode, utility::string_t transactionType);
    /// <summary>
    /// Calculation Method
    /// </summary>
    /// <remarks>
    /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
    /// </remarks>
    /// <param name="authorization">Bearer {auth}</param>/// <param name="body">Transaction Message</param>
    pplx::task<std::shared_ptr<PaymentTransactionOut>> transactionsservicePaymentPost(utility::string_t authorization, std::shared_ptr<PaymentTransactionIn> body);
    /// <summary>
    /// Calculation Method
    /// </summary>
    /// <remarks>
    /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
    /// </remarks>
    /// <param name="authorization">Bearer {auth}</param>/// <param name="body">Transaction Message</param>
    pplx::task<std::shared_ptr<PurchaseTransactionOut>> transactionsservicePurchasePost(utility::string_t authorization, std::shared_ptr<PurchaseTransactionIn> body);
    /// <summary>
    /// Calculation Method
    /// </summary>
    /// <remarks>
    /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
    /// </remarks>
    /// <param name="authorization">Bearer {auth}</param>/// <param name="body">Transaction Message</param>
    pplx::task<std::shared_ptr<ReceiptTransactionOut>> transactionsserviceReceiptPost(utility::string_t authorization, std::shared_ptr<ReceiptTransactionIn> body);
    /// <summary>
    /// Calculation Method
    /// </summary>
    /// <remarks>
    /// Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
    /// </remarks>
    /// <param name="authorization">Bearer {auth}</param>/// <param name="body">Transaction Message</param>
    pplx::task<std::shared_ptr<SalesTransactionOut>> transactionsserviceSalesPost(utility::string_t authorization, std::shared_ptr<SalesTransactionIn> body);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ServiceTransactionsApi_H_ */

