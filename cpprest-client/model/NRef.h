/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * NRef.h
 *
 * Referenced Invoices The invoice can be one of this types, - &#39;refNFe - Eletronic Invoice&#39; - &#39;refCTE - Transport Invoice&#39; - &#39;refECF - Reatail Cupom&#39; - &#39;refNF  - Invoice model 1 or 1A&#39; - &#39;refFarmerNF - farmer invoice&#39; 
 */

#ifndef NRef_H_
#define NRef_H_


#include "ModelBase.h"

#include "NRef_refFarmerNF.h"
#include "NRef_refNF.h"
#include <cpprest/details/basic_types.h>
#include "NRef_refECF.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Referenced Invoices The invoice can be one of this types, - &#39;refNFe - Eletronic Invoice&#39; - &#39;refCTE - Transport Invoice&#39; - &#39;refECF - Reatail Cupom&#39; - &#39;refNF  - Invoice model 1 or 1A&#39; - &#39;refFarmerNF - farmer invoice&#39; 
/// </summary>
class  NRef
    : public ModelBase
{
public:
    NRef();
    virtual ~NRef();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// NRef members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    void setType(utility::string_t value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRefNFe() const;
    void setRefNFe(utility::string_t value);
    bool refNFeIsSet() const;
    void unsetRefNFe();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRefCTe() const;
    void setRefCTe(utility::string_t value);
    bool refCTeIsSet() const;
    void unsetRefCTe();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NRef_refECF> getRefECF() const;
    void setRefECF(std::shared_ptr<NRef_refECF> value);
    bool refECFIsSet() const;
    void unsetRefECF();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NRef_refNF> getRefNF() const;
    void setRefNF(std::shared_ptr<NRef_refNF> value);
    bool refNFIsSet() const;
    void unsetRefNF();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NRef_refFarmerNF> getRefFarmerNF() const;
    void setRefFarmerNF(std::shared_ptr<NRef_refFarmerNF> value);
    bool refFarmerNFIsSet() const;
    void unsetRefFarmerNF();

protected:
    utility::string_t m_Type;
    bool m_TypeIsSet;
utility::string_t m_RefNFe;
    bool m_RefNFeIsSet;
utility::string_t m_RefCTe;
    bool m_RefCTeIsSet;
std::shared_ptr<NRef_refECF> m_RefECF;
    bool m_RefECFIsSet;
std::shared_ptr<NRef_refNF> m_RefNF;
    bool m_RefNFIsSet;
std::shared_ptr<NRef_refFarmerNF> m_RefFarmerNF;
    bool m_RefFarmerNFIsSet;
};

}
}
}
}

#endif /* NRef_H_ */
