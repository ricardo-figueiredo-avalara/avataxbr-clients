/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PurchaseEntity.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PurchaseEntity::PurchaseEntity()
{
    m_Name = U("");
    m_NameIsSet = false;
    m_TypeIsSet = false;
    m_Email = U("");
    m_EmailIsSet = false;
    m_Cnpjcpf = U("");
    m_CnpjcpfIsSet = false;
    m_CityTaxId = U("");
    m_CityTaxIdIsSet = false;
    m_StateTaxId = U("");
    m_StateTaxIdIsSet = false;
    m_Suframa = U("");
    m_SuframaIsSet = false;
    m_Phone = U("");
    m_PhoneIsSet = false;
    m_TaxRegimeIsSet = false;
    m_HasCpom = false;
    m_HasCpomIsSet = false;
    m_SubjectWithholdingIrrf = false;
    m_SubjectWithholdingIrrfIsSet = false;
    m_InssPreviousContrib = 0.0;
    m_InssPreviousContribIsSet = false;
    m_InssBasisDiscount = 0.0;
    m_InssBasisDiscountIsSet = false;
    m_IssRfRate = 0.0;
    m_IssRfRateIsSet = false;
    
}

PurchaseEntity::~PurchaseEntity()
{
}

void PurchaseEntity::validate()
{
    // TODO: implement validation
}

web::json::value PurchaseEntity::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_TypeIsSet)
    {
        val[U("type")] = ModelBase::toJson(m_Type);
    }
    if(m_EmailIsSet)
    {
        val[U("email")] = ModelBase::toJson(m_Email);
    }
    if(m_CnpjcpfIsSet)
    {
        val[U("cnpjcpf")] = ModelBase::toJson(m_Cnpjcpf);
    }
    if(m_CityTaxIdIsSet)
    {
        val[U("cityTaxId")] = ModelBase::toJson(m_CityTaxId);
    }
    if(m_StateTaxIdIsSet)
    {
        val[U("stateTaxId")] = ModelBase::toJson(m_StateTaxId);
    }
    if(m_SuframaIsSet)
    {
        val[U("suframa")] = ModelBase::toJson(m_Suframa);
    }
    if(m_PhoneIsSet)
    {
        val[U("phone")] = ModelBase::toJson(m_Phone);
    }
    if(m_TaxRegimeIsSet)
    {
        val[U("taxRegime")] = ModelBase::toJson(m_TaxRegime);
    }
    if(m_HasCpomIsSet)
    {
        val[U("hasCpom")] = ModelBase::toJson(m_HasCpom);
    }
    if(m_SubjectWithholdingIrrfIsSet)
    {
        val[U("subjectWithholdingIrrf")] = ModelBase::toJson(m_SubjectWithholdingIrrf);
    }
    if(m_InssPreviousContribIsSet)
    {
        val[U("inssPreviousContrib")] = ModelBase::toJson(m_InssPreviousContrib);
    }
    if(m_InssBasisDiscountIsSet)
    {
        val[U("inssBasisDiscount")] = ModelBase::toJson(m_InssBasisDiscount);
    }
    if(m_IssRfRateIsSet)
    {
        val[U("issRfRate")] = ModelBase::toJson(m_IssRfRate);
    }
    

    return val;
}

void PurchaseEntity::fromJson(web::json::value& val)
{
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
        
    }
    if(val.has_field(U("type")))
    {
        if(!val[U("type")].is_null())
        {
            std::shared_ptr<EntityType> newItem(new EntityType());
            newItem->fromJson(val[U("type")]);
            setType( newItem );
        }
        
    }
    if(val.has_field(U("email")))
    {
        setEmail(ModelBase::stringFromJson(val[U("email")]));
        
    }
    if(val.has_field(U("cnpjcpf")))
    {
        setCnpjcpf(ModelBase::stringFromJson(val[U("cnpjcpf")]));
        
    }
    if(val.has_field(U("cityTaxId")))
    {
        setCityTaxId(ModelBase::stringFromJson(val[U("cityTaxId")]));
        
    }
    if(val.has_field(U("stateTaxId")))
    {
        setStateTaxId(ModelBase::stringFromJson(val[U("stateTaxId")]));
        
    }
    if(val.has_field(U("suframa")))
    {
        setSuframa(ModelBase::stringFromJson(val[U("suframa")]));
        
    }
    if(val.has_field(U("phone")))
    {
        setPhone(ModelBase::stringFromJson(val[U("phone")]));
        
    }
    if(val.has_field(U("taxRegime")))
    {
        if(!val[U("taxRegime")].is_null())
        {
            std::shared_ptr<FederalTaxRegime> newItem(new FederalTaxRegime());
            newItem->fromJson(val[U("taxRegime")]);
            setTaxRegime( newItem );
        }
        
    }
    if(val.has_field(U("hasCpom")))
    {
        setHasCpom(ModelBase::boolFromJson(val[U("hasCpom")]));
    }
    if(val.has_field(U("subjectWithholdingIrrf")))
    {
        setSubjectWithholdingIrrf(ModelBase::boolFromJson(val[U("subjectWithholdingIrrf")]));
    }
    if(val.has_field(U("inssPreviousContrib")))
    {
        setInssPreviousContrib(ModelBase::doubleFromJson(val[U("inssPreviousContrib")]));
    }
    if(val.has_field(U("inssBasisDiscount")))
    {
        setInssBasisDiscount(ModelBase::doubleFromJson(val[U("inssBasisDiscount")]));
    }
    if(val.has_field(U("issRfRate")))
    {
        setIssRfRate(ModelBase::doubleFromJson(val[U("issRfRate")]));
    }
    
}

void PurchaseEntity::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_TypeIsSet)
    {
        if (m_Type.get())
        {
            m_Type->toMultipart(multipart, U("type."));
        }
        
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("email"), m_Email));
        
    }
    if(m_CnpjcpfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cnpjcpf"), m_Cnpjcpf));
        
    }
    if(m_CityTaxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cityTaxId"), m_CityTaxId));
        
    }
    if(m_StateTaxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("stateTaxId"), m_StateTaxId));
        
    }
    if(m_SuframaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("suframa"), m_Suframa));
        
    }
    if(m_PhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("phone"), m_Phone));
        
    }
    if(m_TaxRegimeIsSet)
    {
        if (m_TaxRegime.get())
        {
            m_TaxRegime->toMultipart(multipart, U("taxRegime."));
        }
        
    }
    if(m_HasCpomIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("hasCpom"), m_HasCpom));
    }
    if(m_SubjectWithholdingIrrfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("subjectWithholdingIrrf"), m_SubjectWithholdingIrrf));
    }
    if(m_InssPreviousContribIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("inssPreviousContrib"), m_InssPreviousContrib));
    }
    if(m_InssBasisDiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("inssBasisDiscount"), m_InssBasisDiscount));
    }
    if(m_IssRfRateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("issRfRate"), m_IssRfRate));
    }
    
}

void PurchaseEntity::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
        
    }
    if(multipart->hasContent(U("type")))
    {
        if(multipart->hasContent(U("type")))
        {
            std::shared_ptr<EntityType> newItem(new EntityType());
            newItem->fromMultiPart(multipart, U("type."));
            setType( newItem );
        }
        
    }
    if(multipart->hasContent(U("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("email"))));
        
    }
    if(multipart->hasContent(U("cnpjcpf")))
    {
        setCnpjcpf(ModelBase::stringFromHttpContent(multipart->getContent(U("cnpjcpf"))));
        
    }
    if(multipart->hasContent(U("cityTaxId")))
    {
        setCityTaxId(ModelBase::stringFromHttpContent(multipart->getContent(U("cityTaxId"))));
        
    }
    if(multipart->hasContent(U("stateTaxId")))
    {
        setStateTaxId(ModelBase::stringFromHttpContent(multipart->getContent(U("stateTaxId"))));
        
    }
    if(multipart->hasContent(U("suframa")))
    {
        setSuframa(ModelBase::stringFromHttpContent(multipart->getContent(U("suframa"))));
        
    }
    if(multipart->hasContent(U("phone")))
    {
        setPhone(ModelBase::stringFromHttpContent(multipart->getContent(U("phone"))));
        
    }
    if(multipart->hasContent(U("taxRegime")))
    {
        if(multipart->hasContent(U("taxRegime")))
        {
            std::shared_ptr<FederalTaxRegime> newItem(new FederalTaxRegime());
            newItem->fromMultiPart(multipart, U("taxRegime."));
            setTaxRegime( newItem );
        }
        
    }
    if(multipart->hasContent(U("hasCpom")))
    {
        setHasCpom(ModelBase::boolFromHttpContent(multipart->getContent(U("hasCpom"))));
    }
    if(multipart->hasContent(U("subjectWithholdingIrrf")))
    {
        setSubjectWithholdingIrrf(ModelBase::boolFromHttpContent(multipart->getContent(U("subjectWithholdingIrrf"))));
    }
    if(multipart->hasContent(U("inssPreviousContrib")))
    {
        setInssPreviousContrib(ModelBase::doubleFromHttpContent(multipart->getContent(U("inssPreviousContrib"))));
    }
    if(multipart->hasContent(U("inssBasisDiscount")))
    {
        setInssBasisDiscount(ModelBase::doubleFromHttpContent(multipart->getContent(U("inssBasisDiscount"))));
    }
    if(multipart->hasContent(U("issRfRate")))
    {
        setIssRfRate(ModelBase::doubleFromHttpContent(multipart->getContent(U("issRfRate"))));
    }
    
}


utility::string_t PurchaseEntity::getName() const
{
    return m_Name;
}
void PurchaseEntity::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool PurchaseEntity::nameIsSet() const
{
    return m_NameIsSet;
}
void PurchaseEntity::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<EntityType> PurchaseEntity::getType() const
{
    return m_Type;
}
void PurchaseEntity::setType(std::shared_ptr<EntityType> value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool PurchaseEntity::typeIsSet() const
{
    return m_TypeIsSet;
}
void PurchaseEntity::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t PurchaseEntity::getEmail() const
{
    return m_Email;
}
void PurchaseEntity::setEmail(utility::string_t value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool PurchaseEntity::emailIsSet() const
{
    return m_EmailIsSet;
}
void PurchaseEntity::unsetEmail()
{
    m_EmailIsSet = false;
}
utility::string_t PurchaseEntity::getCnpjcpf() const
{
    return m_Cnpjcpf;
}
void PurchaseEntity::setCnpjcpf(utility::string_t value)
{
    m_Cnpjcpf = value;
    m_CnpjcpfIsSet = true;
}
bool PurchaseEntity::cnpjcpfIsSet() const
{
    return m_CnpjcpfIsSet;
}
void PurchaseEntity::unsetCnpjcpf()
{
    m_CnpjcpfIsSet = false;
}
utility::string_t PurchaseEntity::getCityTaxId() const
{
    return m_CityTaxId;
}
void PurchaseEntity::setCityTaxId(utility::string_t value)
{
    m_CityTaxId = value;
    m_CityTaxIdIsSet = true;
}
bool PurchaseEntity::cityTaxIdIsSet() const
{
    return m_CityTaxIdIsSet;
}
void PurchaseEntity::unsetCityTaxId()
{
    m_CityTaxIdIsSet = false;
}
utility::string_t PurchaseEntity::getStateTaxId() const
{
    return m_StateTaxId;
}
void PurchaseEntity::setStateTaxId(utility::string_t value)
{
    m_StateTaxId = value;
    m_StateTaxIdIsSet = true;
}
bool PurchaseEntity::stateTaxIdIsSet() const
{
    return m_StateTaxIdIsSet;
}
void PurchaseEntity::unsetStateTaxId()
{
    m_StateTaxIdIsSet = false;
}
utility::string_t PurchaseEntity::getSuframa() const
{
    return m_Suframa;
}
void PurchaseEntity::setSuframa(utility::string_t value)
{
    m_Suframa = value;
    m_SuframaIsSet = true;
}
bool PurchaseEntity::suframaIsSet() const
{
    return m_SuframaIsSet;
}
void PurchaseEntity::unsetSuframa()
{
    m_SuframaIsSet = false;
}
utility::string_t PurchaseEntity::getPhone() const
{
    return m_Phone;
}
void PurchaseEntity::setPhone(utility::string_t value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}
bool PurchaseEntity::phoneIsSet() const
{
    return m_PhoneIsSet;
}
void PurchaseEntity::unsetPhone()
{
    m_PhoneIsSet = false;
}
std::shared_ptr<FederalTaxRegime> PurchaseEntity::getTaxRegime() const
{
    return m_TaxRegime;
}
void PurchaseEntity::setTaxRegime(std::shared_ptr<FederalTaxRegime> value)
{
    m_TaxRegime = value;
    m_TaxRegimeIsSet = true;
}
bool PurchaseEntity::taxRegimeIsSet() const
{
    return m_TaxRegimeIsSet;
}
void PurchaseEntity::unsetTaxRegime()
{
    m_TaxRegimeIsSet = false;
}
bool PurchaseEntity::getHasCpom() const
{
    return m_HasCpom;
}
void PurchaseEntity::setHasCpom(bool value)
{
    m_HasCpom = value;
    m_HasCpomIsSet = true;
}
bool PurchaseEntity::hasCpomIsSet() const
{
    return m_HasCpomIsSet;
}
void PurchaseEntity::unsetHasCpom()
{
    m_HasCpomIsSet = false;
}
bool PurchaseEntity::getSubjectWithholdingIrrf() const
{
    return m_SubjectWithholdingIrrf;
}
void PurchaseEntity::setSubjectWithholdingIrrf(bool value)
{
    m_SubjectWithholdingIrrf = value;
    m_SubjectWithholdingIrrfIsSet = true;
}
bool PurchaseEntity::subjectWithholdingIrrfIsSet() const
{
    return m_SubjectWithholdingIrrfIsSet;
}
void PurchaseEntity::unsetSubjectWithholdingIrrf()
{
    m_SubjectWithholdingIrrfIsSet = false;
}
double PurchaseEntity::getInssPreviousContrib() const
{
    return m_InssPreviousContrib;
}
void PurchaseEntity::setInssPreviousContrib(double value)
{
    m_InssPreviousContrib = value;
    m_InssPreviousContribIsSet = true;
}
bool PurchaseEntity::inssPreviousContribIsSet() const
{
    return m_InssPreviousContribIsSet;
}
void PurchaseEntity::unsetInssPreviousContrib()
{
    m_InssPreviousContribIsSet = false;
}
double PurchaseEntity::getInssBasisDiscount() const
{
    return m_InssBasisDiscount;
}
void PurchaseEntity::setInssBasisDiscount(double value)
{
    m_InssBasisDiscount = value;
    m_InssBasisDiscountIsSet = true;
}
bool PurchaseEntity::inssBasisDiscountIsSet() const
{
    return m_InssBasisDiscountIsSet;
}
void PurchaseEntity::unsetInssBasisDiscount()
{
    m_InssBasisDiscountIsSet = false;
}
double PurchaseEntity::getIssRfRate() const
{
    return m_IssRfRate;
}
void PurchaseEntity::setIssRfRate(double value)
{
    m_IssRfRate = value;
    m_IssRfRateIsSet = true;
}
bool PurchaseEntity::issRfRateIsSet() const
{
    return m_IssRfRateIsSet;
}
void PurchaseEntity::unsetIssRfRate()
{
    m_IssRfRateIsSet = false;
}

}
}
}
}

