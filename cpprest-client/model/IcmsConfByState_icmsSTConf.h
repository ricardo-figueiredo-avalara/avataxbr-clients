/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * IcmsConfByState_icmsSTConf.h
 *
 * 
 */

#ifndef IcmsConfByState_icmsSTConf_H_
#define IcmsConfByState_icmsSTConf_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  IcmsConfByState_icmsSTConf
    : public ModelBase
{
public:
    IcmsConfByState_icmsSTConf();
    virtual ~IcmsConfByState_icmsSTConf();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// IcmsConfByState_icmsSTConf members

    /// <summary>
    /// inform that substituted is tax regime Simplified the operation MVA will be reduced
    /// </summary>
    bool getHasReductionOfMVAForSimples() const;
    void setHasReductionOfMVAForSimples(bool value);
    bool hasReductionOfMVAForSimplesIsSet() const;
    void unsetHasReductionOfMVAForSimples();
    /// <summary>
    /// mva reduction when substituted is tax regime Simplified.
    /// </summary>
    double getReductionOfMVAForSimples() const;
    void setReductionOfMVAForSimples(double value);
    bool reductionOfMVAForSimplesIsSet() const;
    void unsetReductionOfMVAForSimples();
    /// <summary>
    /// how this ICMS-ST will be calculed for itens linked to this configuration
    /// </summary>
    utility::string_t getCalcMode() const;
    void setCalcMode(utility::string_t value);
    bool calcModeIsSet() const;
    void unsetCalcMode();
    /// <summary>
    /// ICMS-ST mva rate to define calc base
    /// </summary>
    double getMvaRate() const;
    void setMvaRate(double value);
    bool mvaRateIsSet() const;
    void unsetMvaRate();
    /// <summary>
    /// ICMS rate - Redução da BC ICMS ST (%)
    /// </summary>
    double getIcmsStBaseDiscount() const;
    void setIcmsStBaseDiscount(double value);
    bool icmsStBaseDiscountIsSet() const;
    void unsetIcmsStBaseDiscount();
    /// <summary>
    /// SRP or MSRP amount base for this ICMS-ST configuration
    /// </summary>
    double getSrp() const;
    void setSrp(double value);
    bool srpIsSet() const;
    void unsetSrp();
    /// <summary>
    /// unit used to srv amount value
    /// </summary>
    utility::string_t getSrpUnit() const;
    void setSrpUnit(utility::string_t value);
    bool srpUnitIsSet() const;
    void unsetSrpUnit();

protected:
    bool m_HasReductionOfMVAForSimples;
    bool m_HasReductionOfMVAForSimplesIsSet;
double m_ReductionOfMVAForSimples;
    bool m_ReductionOfMVAForSimplesIsSet;
utility::string_t m_CalcMode;
    bool m_CalcModeIsSet;
double m_MvaRate;
    bool m_MvaRateIsSet;
double m_IcmsStBaseDiscount;
    bool m_IcmsStBaseDiscountIsSet;
double m_Srp;
    bool m_SrpIsSet;
utility::string_t m_SrpUnit;
    bool m_SrpUnitIsSet;
};

}
}
}
}

#endif /* IcmsConfByState_icmsSTConf_H_ */
