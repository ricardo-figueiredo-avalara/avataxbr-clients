/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * CalculatedTaxSummaryForGoods_taxByType.h
 *
 * 
 */

#ifndef CalculatedTaxSummaryForGoods_taxByType_H_
#define CalculatedTaxSummaryForGoods_taxByType_H_


#include "ModelBase.h"

#include "TaxByTypeSummaryForGoods.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  CalculatedTaxSummaryForGoods_taxByType
    : public ModelBase
{
public:
    CalculatedTaxSummaryForGoods_taxByType();
    virtual ~CalculatedTaxSummaryForGoods_taxByType();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CalculatedTaxSummaryForGoods_taxByType members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getIcms() const;
    void setIcms(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool icmsIsSet() const;
    void unsetIcms();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getIcmsSt() const;
    void setIcmsSt(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool icmsStIsSet() const;
    void unsetIcmsSt();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getIcmsStSd() const;
    void setIcmsStSd(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool icmsStSdIsSet() const;
    void unsetIcmsStSd();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getIcmsPartOwn() const;
    void setIcmsPartOwn(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool icmsPartOwnIsSet() const;
    void unsetIcmsPartOwn();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getIcmsPartDest() const;
    void setIcmsPartDest(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool icmsPartDestIsSet() const;
    void unsetIcmsPartDest();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getIcmsDifaFCP() const;
    void setIcmsDifaFCP(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool icmsDifaFCPIsSet() const;
    void unsetIcmsDifaFCP();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getIcmsDifaDest() const;
    void setIcmsDifaDest(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool icmsDifaDestIsSet() const;
    void unsetIcmsDifaDest();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getIcmsDifaRemet() const;
    void setIcmsDifaRemet(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool icmsDifaRemetIsSet() const;
    void unsetIcmsDifaRemet();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getIcmsRf() const;
    void setIcmsRf(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool icmsRfIsSet() const;
    void unsetIcmsRf();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getIcmsDeson() const;
    void setIcmsDeson(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool icmsDesonIsSet() const;
    void unsetIcmsDeson();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getIcmsCredsn() const;
    void setIcmsCredsn(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool icmsCredsnIsSet() const;
    void unsetIcmsCredsn();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getPis() const;
    void setPis(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool pisIsSet() const;
    void unsetPis();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getPisSt() const;
    void setPisSt(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool pisStIsSet() const;
    void unsetPisSt();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getCofins() const;
    void setCofins(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool cofinsIsSet() const;
    void unsetCofins();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getCofinsSt() const;
    void setCofinsSt(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool cofinsStIsSet() const;
    void unsetCofinsSt();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getIpi() const;
    void setIpi(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool ipiIsSet() const;
    void unsetIpi();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getIpiReturned() const;
    void setIpiReturned(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool ipiReturnedIsSet() const;
    void unsetIpiReturned();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getIi() const;
    void setIi(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool iiIsSet() const;
    void unsetIi();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getIof() const;
    void setIof(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool iofIsSet() const;
    void unsetIof();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getAproxtribState() const;
    void setAproxtribState(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool aproxtribStateIsSet() const;
    void unsetAproxtribState();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForGoods> getAproxtribFed() const;
    void setAproxtribFed(std::shared_ptr<TaxByTypeSummaryForGoods> value);
    bool aproxtribFedIsSet() const;
    void unsetAproxtribFed();

protected:
    std::shared_ptr<TaxByTypeSummaryForGoods> m_Icms;
    bool m_IcmsIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_IcmsSt;
    bool m_IcmsStIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_IcmsStSd;
    bool m_IcmsStSdIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_IcmsPartOwn;
    bool m_IcmsPartOwnIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_IcmsPartDest;
    bool m_IcmsPartDestIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_IcmsDifaFCP;
    bool m_IcmsDifaFCPIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_IcmsDifaDest;
    bool m_IcmsDifaDestIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_IcmsDifaRemet;
    bool m_IcmsDifaRemetIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_IcmsRf;
    bool m_IcmsRfIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_IcmsDeson;
    bool m_IcmsDesonIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_IcmsCredsn;
    bool m_IcmsCredsnIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_Pis;
    bool m_PisIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_PisSt;
    bool m_PisStIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_Cofins;
    bool m_CofinsIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_CofinsSt;
    bool m_CofinsStIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_Ipi;
    bool m_IpiIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_IpiReturned;
    bool m_IpiReturnedIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_Ii;
    bool m_IiIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_Iof;
    bool m_IofIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_AproxtribState;
    bool m_AproxtribStateIsSet;
std::shared_ptr<TaxByTypeSummaryForGoods> m_AproxtribFed;
    bool m_AproxtribFedIsSet;
};

}
}
}
}

#endif /* CalculatedTaxSummaryForGoods_taxByType_H_ */
