/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * PurchaseTransactionOut.h
 *
 * 
 */

#ifndef PurchaseTransactionOut_H_
#define PurchaseTransactionOut_H_


#include "ModelBase.h"

#include "PurchaseHeaderOut.h"
#include "PurchaseCalculatedTaxSummaryForService.h"
#include "PurchaseLinesOut.h"
#include <vector>
#include "ProcessingInfo.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  PurchaseTransactionOut
    : public ModelBase
{
public:
    PurchaseTransactionOut();
    virtual ~PurchaseTransactionOut();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PurchaseTransactionOut members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PurchaseHeaderOut> getHeader() const;
    void setHeader(std::shared_ptr<PurchaseHeaderOut> value);
        /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<PurchaseLinesOut>>& getLines();
        /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PurchaseCalculatedTaxSummaryForService> getCalculatedTaxSummary() const;
    void setCalculatedTaxSummary(std::shared_ptr<PurchaseCalculatedTaxSummaryForService> value);
        /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ProcessingInfo> getProcessingInfo() const;
    void setProcessingInfo(std::shared_ptr<ProcessingInfo> value);
    
protected:
    std::shared_ptr<PurchaseHeaderOut> m_Header;
    std::vector<std::shared_ptr<PurchaseLinesOut>> m_Lines;
    std::shared_ptr<PurchaseCalculatedTaxSummaryForService> m_CalculatedTaxSummary;
    std::shared_ptr<ProcessingInfo> m_ProcessingInfo;
    };

}
}
}
}

#endif /* PurchaseTransactionOut_H_ */
