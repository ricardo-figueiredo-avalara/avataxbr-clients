/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Agast_withholding_CSLL.h
 *
 * inform if this item is subject to withholding CSLL on service Transactions, by entity type, default true
 */

#ifndef Agast_withholding_CSLL_H_
#define Agast_withholding_CSLL_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// inform if this item is subject to withholding CSLL on service Transactions, by entity type, default true
/// </summary>
class  Agast_withholding_CSLL
    : public ModelBase
{
public:
    Agast_withholding_CSLL();
    virtual ~Agast_withholding_CSLL();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Agast_withholding_CSLL members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLegalReason() const;
    void setLegalReason(utility::string_t value);
    bool legalReasonIsSet() const;
    void unsetLegalReason();
    /// <summary>
    /// 
    /// </summary>
    bool getBusiness() const;
    void setBusiness(bool value);
    bool businessIsSet() const;
    void unsetBusiness();
    /// <summary>
    /// reference id to TaxLegalReason
    /// </summary>
    utility::string_t getBusinessLegalReason() const;
    void setBusinessLegalReason(utility::string_t value);
    bool businessLegalReasonIsSet() const;
    void unsetBusinessLegalReason();
    /// <summary>
    /// 
    /// </summary>
    bool getFederalGovernment() const;
    void setFederalGovernment(bool value);
    bool federalGovernmentIsSet() const;
    void unsetFederalGovernment();
    /// <summary>
    /// reference id to TaxLegalReason
    /// </summary>
    utility::string_t getFederalGovernmentLegalReason() const;
    void setFederalGovernmentLegalReason(utility::string_t value);
    bool federalGovernmentLegalReasonIsSet() const;
    void unsetFederalGovernmentLegalReason();
    /// <summary>
    /// 
    /// </summary>
    bool getStateGovernment() const;
    void setStateGovernment(bool value);
    bool stateGovernmentIsSet() const;
    void unsetStateGovernment();
    /// <summary>
    /// reference id to TaxLegalReason
    /// </summary>
    utility::string_t getStateGovernmentLegalReason() const;
    void setStateGovernmentLegalReason(utility::string_t value);
    bool stateGovernmentLegalReasonIsSet() const;
    void unsetStateGovernmentLegalReason();
    /// <summary>
    /// 
    /// </summary>
    bool getCityGovernment() const;
    void setCityGovernment(bool value);
    bool cityGovernmentIsSet() const;
    void unsetCityGovernment();
    /// <summary>
    /// reference id to TaxLegalReason
    /// </summary>
    utility::string_t getCityGovernmentLegalReason() const;
    void setCityGovernmentLegalReason(utility::string_t value);
    bool cityGovernmentLegalReasonIsSet() const;
    void unsetCityGovernmentLegalReason();

protected:
    utility::string_t m_LegalReason;
    bool m_LegalReasonIsSet;
bool m_Business;
    bool m_BusinessIsSet;
utility::string_t m_BusinessLegalReason;
    bool m_BusinessLegalReasonIsSet;
bool m_FederalGovernment;
    bool m_FederalGovernmentIsSet;
utility::string_t m_FederalGovernmentLegalReason;
    bool m_FederalGovernmentLegalReasonIsSet;
bool m_StateGovernment;
    bool m_StateGovernmentIsSet;
utility::string_t m_StateGovernmentLegalReason;
    bool m_StateGovernmentLegalReasonIsSet;
bool m_CityGovernment;
    bool m_CityGovernmentIsSet;
utility::string_t m_CityGovernmentLegalReason;
    bool m_CityGovernmentLegalReasonIsSet;
};

}
}
}
}

#endif /* Agast_withholding_CSLL_H_ */
