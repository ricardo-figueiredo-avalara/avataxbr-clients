/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Payment_installment.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Payment_installment::Payment_installment()
{
    m_DocumentNumber = U("");
    m_DocumentNumberIsSet = false;
    m_dateIsSet = false;
    m_GrossValue = 0.0;
    
}

Payment_installment::~Payment_installment()
{
}

void Payment_installment::validate()
{
    // TODO: implement validation
}

web::json::value Payment_installment::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DocumentNumberIsSet)
    {
        val[U("documentNumber")] = ModelBase::toJson(m_DocumentNumber);
    }
    if(m_dateIsSet)
    {
        val[U("date")] = ModelBase::toJson(m_date);
    }
    val[U("grossValue")] = ModelBase::toJson(m_GrossValue);
    

    return val;
}

void Payment_installment::fromJson(web::json::value& val)
{
    if(val.has_field(U("documentNumber")))
    {
        setDocumentNumber(ModelBase::stringFromJson(val[U("documentNumber")]));
        
    }
    if(val.has_field(U("date")))
    {
        if(!val[U("date")].is_null())
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromJson(val[U("date")]);
            setDate( newItem );
        }
        
    }
    setGrossValue(ModelBase::doubleFromJson(val[U("grossValue")]));
    
}

void Payment_installment::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_DocumentNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("documentNumber"), m_DocumentNumber));
        
    }
    if(m_dateIsSet)
    {
        if (m_date.get())
        {
            m_date->toMultipart(multipart, U("date."));
        }
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("grossValue"), m_GrossValue));
    
}

void Payment_installment::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("documentNumber")))
    {
        setDocumentNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("documentNumber"))));
        
    }
    if(multipart->hasContent(U("date")))
    {
        if(multipart->hasContent(U("date")))
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromMultiPart(multipart, U("date."));
            setDate( newItem );
        }
        
    }
    setGrossValue(ModelBase::doubleFromHttpContent(multipart->getContent(U("grossValue"))));
    
}


utility::string_t Payment_installment::getDocumentNumber() const
{
    return m_DocumentNumber;
}
void Payment_installment::setDocumentNumber(utility::string_t value)
{
    m_DocumentNumber = value;
    m_DocumentNumberIsSet = true;
}
bool Payment_installment::documentNumberIsSet() const
{
    return m_DocumentNumberIsSet;
}
void Payment_installment::unsetDocumentNumber()
{
    m_DocumentNumberIsSet = false;
}
utility::datetime Payment_installment::getDate() const
{
    return m_date;
}
void Payment_installment::setDate(utility::datetime value)
{
    m_date = value;
    m_dateIsSet = true;
}
bool Payment_installment::dateIsSet() const
{
    return m_dateIsSet;
}
void Payment_installment::unsetdate()
{
    m_dateIsSet = false;
}
double Payment_installment::getGrossValue() const
{
    return m_GrossValue;
}
void Payment_installment::setGrossValue(double value)
{
    m_GrossValue = value;
    
}

}
}
}
}

