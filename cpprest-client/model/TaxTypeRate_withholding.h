/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * TaxTypeRate_withholding.h
 *
 * Assign an empty object for simple withholding, null (no key) for no withholding. Detailed behaviors for specific targets may be set by using the available optional keys. 
 */

#ifndef TaxTypeRate_withholding_H_
#define TaxTypeRate_withholding_H_


#include "ModelBase.h"

#include "WithholdDef.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Assign an empty object for simple withholding, null (no key) for no withholding. Detailed behaviors for specific targets may be set by using the available optional keys. 
/// </summary>
class  TaxTypeRate_withholding
    : public ModelBase
{
public:
    TaxTypeRate_withholding();
    virtual ~TaxTypeRate_withholding();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// TaxTypeRate_withholding members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<WithholdDef> getAll() const;
    void setAll(std::shared_ptr<WithholdDef> value);
    bool allIsSet() const;
    void unsetAll();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<WithholdDef> getBusiness() const;
    void setBusiness(std::shared_ptr<WithholdDef> value);
    bool businessIsSet() const;
    void unsetBusiness();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<WithholdDef> getFederalGovernment() const;
    void setFederalGovernment(std::shared_ptr<WithholdDef> value);
    bool federalGovernmentIsSet() const;
    void unsetFederalGovernment();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<WithholdDef> getStateGovernment() const;
    void setStateGovernment(std::shared_ptr<WithholdDef> value);
    bool stateGovernmentIsSet() const;
    void unsetStateGovernment();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<WithholdDef> getCityGovernment() const;
    void setCityGovernment(std::shared_ptr<WithholdDef> value);
    bool cityGovernmentIsSet() const;
    void unsetCityGovernment();

protected:
    std::shared_ptr<WithholdDef> m_All;
    bool m_AllIsSet;
std::shared_ptr<WithholdDef> m_Business;
    bool m_BusinessIsSet;
std::shared_ptr<WithholdDef> m_FederalGovernment;
    bool m_FederalGovernmentIsSet;
std::shared_ptr<WithholdDef> m_StateGovernment;
    bool m_StateGovernmentIsSet;
std::shared_ptr<WithholdDef> m_CityGovernment;
    bool m_CityGovernmentIsSet;
};

}
}
}
}

#endif /* TaxTypeRate_withholding_H_ */
