/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PurchaseTaxesConfig.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PurchaseTaxesConfig::PurchaseTaxesConfig()
{
    m_EntityAccruableCOFINSTaxation = U("");
    m_EntityAccruableCOFINSTaxationIsSet = false;
    m_EntityAccruableCSLLTaxation = U("");
    m_EntityAccruableCSLLTaxationIsSet = false;
    m_EntityAccruablePISTaxation = U("");
    m_EntityAccruablePISTaxationIsSet = false;
    m_AccruableCOFINSExempCodeTaxation = U("");
    m_AccruableCOFINSExempCodeTaxationIsSet = false;
    m_AccruablePISExempCodeTaxation = U("");
    m_AccruablePISExempCodeTaxationIsSet = false;
    m_AccruablePISExemptReasonTaxation = U("");
    m_AccruablePISExemptReasonTaxationIsSet = false;
    m_AccruableCOFINSExemptReasonTaxation = U("");
    m_AccruableCOFINSExemptReasonTaxationIsSet = false;
    m_AccruableCSLLExemptReasonTaxation = U("");
    m_AccruableCSLLExemptReasonTaxationIsSet = false;
    m_WithholdingPIS = false;
    m_WithholdingPISIsSet = false;
    m_WithholdingCOFINS = false;
    m_WithholdingCOFINSIsSet = false;
    m_WithholdingCSLL = false;
    m_WithholdingCSLLIsSet = false;
    m_WithholdingIRRF = false;
    m_WithholdingIRRFIsSet = false;
    m_WithholdCOFINSExemptReasonTaxation = U("");
    m_WithholdCOFINSExemptReasonTaxationIsSet = false;
    m_WithholdCSLLExemptReasonTaxation = U("");
    m_WithholdCSLLExemptReasonTaxationIsSet = false;
    m_WithholdPISExemptReasonTaxation = U("");
    m_WithholdPISExemptReasonTaxationIsSet = false;
    
}

PurchaseTaxesConfig::~PurchaseTaxesConfig()
{
}

void PurchaseTaxesConfig::validate()
{
    // TODO: implement validation
}

web::json::value PurchaseTaxesConfig::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EntityAccruableCOFINSTaxationIsSet)
    {
        val[U("entityAccruableCOFINSTaxation")] = ModelBase::toJson(m_EntityAccruableCOFINSTaxation);
    }
    if(m_EntityAccruableCSLLTaxationIsSet)
    {
        val[U("entityAccruableCSLLTaxation")] = ModelBase::toJson(m_EntityAccruableCSLLTaxation);
    }
    if(m_EntityAccruablePISTaxationIsSet)
    {
        val[U("entityAccruablePISTaxation")] = ModelBase::toJson(m_EntityAccruablePISTaxation);
    }
    if(m_AccruableCOFINSExempCodeTaxationIsSet)
    {
        val[U("accruableCOFINSExempCodeTaxation")] = ModelBase::toJson(m_AccruableCOFINSExempCodeTaxation);
    }
    if(m_AccruablePISExempCodeTaxationIsSet)
    {
        val[U("accruablePISExempCodeTaxation")] = ModelBase::toJson(m_AccruablePISExempCodeTaxation);
    }
    if(m_AccruablePISExemptReasonTaxationIsSet)
    {
        val[U("accruablePISExemptReasonTaxation")] = ModelBase::toJson(m_AccruablePISExemptReasonTaxation);
    }
    if(m_AccruableCOFINSExemptReasonTaxationIsSet)
    {
        val[U("accruableCOFINSExemptReasonTaxation")] = ModelBase::toJson(m_AccruableCOFINSExemptReasonTaxation);
    }
    if(m_AccruableCSLLExemptReasonTaxationIsSet)
    {
        val[U("accruableCSLLExemptReasonTaxation")] = ModelBase::toJson(m_AccruableCSLLExemptReasonTaxation);
    }
    if(m_WithholdingPISIsSet)
    {
        val[U("withholdingPIS")] = ModelBase::toJson(m_WithholdingPIS);
    }
    if(m_WithholdingCOFINSIsSet)
    {
        val[U("withholdingCOFINS")] = ModelBase::toJson(m_WithholdingCOFINS);
    }
    if(m_WithholdingCSLLIsSet)
    {
        val[U("withholdingCSLL")] = ModelBase::toJson(m_WithholdingCSLL);
    }
    if(m_WithholdingIRRFIsSet)
    {
        val[U("withholdingIRRF")] = ModelBase::toJson(m_WithholdingIRRF);
    }
    if(m_WithholdCOFINSExemptReasonTaxationIsSet)
    {
        val[U("withholdCOFINSExemptReasonTaxation")] = ModelBase::toJson(m_WithholdCOFINSExemptReasonTaxation);
    }
    if(m_WithholdCSLLExemptReasonTaxationIsSet)
    {
        val[U("withholdCSLLExemptReasonTaxation")] = ModelBase::toJson(m_WithholdCSLLExemptReasonTaxation);
    }
    if(m_WithholdPISExemptReasonTaxationIsSet)
    {
        val[U("withholdPISExemptReasonTaxation")] = ModelBase::toJson(m_WithholdPISExemptReasonTaxation);
    }
    

    return val;
}

void PurchaseTaxesConfig::fromJson(web::json::value& val)
{
    if(val.has_field(U("entityAccruableCOFINSTaxation")))
    {
        setEntityAccruableCOFINSTaxation(ModelBase::stringFromJson(val[U("entityAccruableCOFINSTaxation")]));
        
    }
    if(val.has_field(U("entityAccruableCSLLTaxation")))
    {
        setEntityAccruableCSLLTaxation(ModelBase::stringFromJson(val[U("entityAccruableCSLLTaxation")]));
        
    }
    if(val.has_field(U("entityAccruablePISTaxation")))
    {
        setEntityAccruablePISTaxation(ModelBase::stringFromJson(val[U("entityAccruablePISTaxation")]));
        
    }
    if(val.has_field(U("accruableCOFINSExempCodeTaxation")))
    {
        setAccruableCOFINSExempCodeTaxation(ModelBase::stringFromJson(val[U("accruableCOFINSExempCodeTaxation")]));
        
    }
    if(val.has_field(U("accruablePISExempCodeTaxation")))
    {
        setAccruablePISExempCodeTaxation(ModelBase::stringFromJson(val[U("accruablePISExempCodeTaxation")]));
        
    }
    if(val.has_field(U("accruablePISExemptReasonTaxation")))
    {
        setAccruablePISExemptReasonTaxation(ModelBase::stringFromJson(val[U("accruablePISExemptReasonTaxation")]));
        
    }
    if(val.has_field(U("accruableCOFINSExemptReasonTaxation")))
    {
        setAccruableCOFINSExemptReasonTaxation(ModelBase::stringFromJson(val[U("accruableCOFINSExemptReasonTaxation")]));
        
    }
    if(val.has_field(U("accruableCSLLExemptReasonTaxation")))
    {
        setAccruableCSLLExemptReasonTaxation(ModelBase::stringFromJson(val[U("accruableCSLLExemptReasonTaxation")]));
        
    }
    if(val.has_field(U("withholdingPIS")))
    {
        setWithholdingPIS(ModelBase::boolFromJson(val[U("withholdingPIS")]));
    }
    if(val.has_field(U("withholdingCOFINS")))
    {
        setWithholdingCOFINS(ModelBase::boolFromJson(val[U("withholdingCOFINS")]));
    }
    if(val.has_field(U("withholdingCSLL")))
    {
        setWithholdingCSLL(ModelBase::boolFromJson(val[U("withholdingCSLL")]));
    }
    if(val.has_field(U("withholdingIRRF")))
    {
        setWithholdingIRRF(ModelBase::boolFromJson(val[U("withholdingIRRF")]));
    }
    if(val.has_field(U("withholdCOFINSExemptReasonTaxation")))
    {
        setWithholdCOFINSExemptReasonTaxation(ModelBase::stringFromJson(val[U("withholdCOFINSExemptReasonTaxation")]));
        
    }
    if(val.has_field(U("withholdCSLLExemptReasonTaxation")))
    {
        setWithholdCSLLExemptReasonTaxation(ModelBase::stringFromJson(val[U("withholdCSLLExemptReasonTaxation")]));
        
    }
    if(val.has_field(U("withholdPISExemptReasonTaxation")))
    {
        setWithholdPISExemptReasonTaxation(ModelBase::stringFromJson(val[U("withholdPISExemptReasonTaxation")]));
        
    }
    
}

void PurchaseTaxesConfig::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_EntityAccruableCOFINSTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("entityAccruableCOFINSTaxation"), m_EntityAccruableCOFINSTaxation));
        
    }
    if(m_EntityAccruableCSLLTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("entityAccruableCSLLTaxation"), m_EntityAccruableCSLLTaxation));
        
    }
    if(m_EntityAccruablePISTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("entityAccruablePISTaxation"), m_EntityAccruablePISTaxation));
        
    }
    if(m_AccruableCOFINSExempCodeTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("accruableCOFINSExempCodeTaxation"), m_AccruableCOFINSExempCodeTaxation));
        
    }
    if(m_AccruablePISExempCodeTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("accruablePISExempCodeTaxation"), m_AccruablePISExempCodeTaxation));
        
    }
    if(m_AccruablePISExemptReasonTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("accruablePISExemptReasonTaxation"), m_AccruablePISExemptReasonTaxation));
        
    }
    if(m_AccruableCOFINSExemptReasonTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("accruableCOFINSExemptReasonTaxation"), m_AccruableCOFINSExemptReasonTaxation));
        
    }
    if(m_AccruableCSLLExemptReasonTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("accruableCSLLExemptReasonTaxation"), m_AccruableCSLLExemptReasonTaxation));
        
    }
    if(m_WithholdingPISIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("withholdingPIS"), m_WithholdingPIS));
    }
    if(m_WithholdingCOFINSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("withholdingCOFINS"), m_WithholdingCOFINS));
    }
    if(m_WithholdingCSLLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("withholdingCSLL"), m_WithholdingCSLL));
    }
    if(m_WithholdingIRRFIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("withholdingIRRF"), m_WithholdingIRRF));
    }
    if(m_WithholdCOFINSExemptReasonTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("withholdCOFINSExemptReasonTaxation"), m_WithholdCOFINSExemptReasonTaxation));
        
    }
    if(m_WithholdCSLLExemptReasonTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("withholdCSLLExemptReasonTaxation"), m_WithholdCSLLExemptReasonTaxation));
        
    }
    if(m_WithholdPISExemptReasonTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("withholdPISExemptReasonTaxation"), m_WithholdPISExemptReasonTaxation));
        
    }
    
}

void PurchaseTaxesConfig::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("entityAccruableCOFINSTaxation")))
    {
        setEntityAccruableCOFINSTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("entityAccruableCOFINSTaxation"))));
        
    }
    if(multipart->hasContent(U("entityAccruableCSLLTaxation")))
    {
        setEntityAccruableCSLLTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("entityAccruableCSLLTaxation"))));
        
    }
    if(multipart->hasContent(U("entityAccruablePISTaxation")))
    {
        setEntityAccruablePISTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("entityAccruablePISTaxation"))));
        
    }
    if(multipart->hasContent(U("accruableCOFINSExempCodeTaxation")))
    {
        setAccruableCOFINSExempCodeTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("accruableCOFINSExempCodeTaxation"))));
        
    }
    if(multipart->hasContent(U("accruablePISExempCodeTaxation")))
    {
        setAccruablePISExempCodeTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("accruablePISExempCodeTaxation"))));
        
    }
    if(multipart->hasContent(U("accruablePISExemptReasonTaxation")))
    {
        setAccruablePISExemptReasonTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("accruablePISExemptReasonTaxation"))));
        
    }
    if(multipart->hasContent(U("accruableCOFINSExemptReasonTaxation")))
    {
        setAccruableCOFINSExemptReasonTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("accruableCOFINSExemptReasonTaxation"))));
        
    }
    if(multipart->hasContent(U("accruableCSLLExemptReasonTaxation")))
    {
        setAccruableCSLLExemptReasonTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("accruableCSLLExemptReasonTaxation"))));
        
    }
    if(multipart->hasContent(U("withholdingPIS")))
    {
        setWithholdingPIS(ModelBase::boolFromHttpContent(multipart->getContent(U("withholdingPIS"))));
    }
    if(multipart->hasContent(U("withholdingCOFINS")))
    {
        setWithholdingCOFINS(ModelBase::boolFromHttpContent(multipart->getContent(U("withholdingCOFINS"))));
    }
    if(multipart->hasContent(U("withholdingCSLL")))
    {
        setWithholdingCSLL(ModelBase::boolFromHttpContent(multipart->getContent(U("withholdingCSLL"))));
    }
    if(multipart->hasContent(U("withholdingIRRF")))
    {
        setWithholdingIRRF(ModelBase::boolFromHttpContent(multipart->getContent(U("withholdingIRRF"))));
    }
    if(multipart->hasContent(U("withholdCOFINSExemptReasonTaxation")))
    {
        setWithholdCOFINSExemptReasonTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("withholdCOFINSExemptReasonTaxation"))));
        
    }
    if(multipart->hasContent(U("withholdCSLLExemptReasonTaxation")))
    {
        setWithholdCSLLExemptReasonTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("withholdCSLLExemptReasonTaxation"))));
        
    }
    if(multipart->hasContent(U("withholdPISExemptReasonTaxation")))
    {
        setWithholdPISExemptReasonTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("withholdPISExemptReasonTaxation"))));
        
    }
    
}


utility::string_t PurchaseTaxesConfig::getEntityAccruableCOFINSTaxation() const
{
    return m_EntityAccruableCOFINSTaxation;
}
void PurchaseTaxesConfig::setEntityAccruableCOFINSTaxation(utility::string_t value)
{
    m_EntityAccruableCOFINSTaxation = value;
    m_EntityAccruableCOFINSTaxationIsSet = true;
}
bool PurchaseTaxesConfig::entityAccruableCOFINSTaxationIsSet() const
{
    return m_EntityAccruableCOFINSTaxationIsSet;
}
void PurchaseTaxesConfig::unsetEntityAccruableCOFINSTaxation()
{
    m_EntityAccruableCOFINSTaxationIsSet = false;
}
utility::string_t PurchaseTaxesConfig::getEntityAccruableCSLLTaxation() const
{
    return m_EntityAccruableCSLLTaxation;
}
void PurchaseTaxesConfig::setEntityAccruableCSLLTaxation(utility::string_t value)
{
    m_EntityAccruableCSLLTaxation = value;
    m_EntityAccruableCSLLTaxationIsSet = true;
}
bool PurchaseTaxesConfig::entityAccruableCSLLTaxationIsSet() const
{
    return m_EntityAccruableCSLLTaxationIsSet;
}
void PurchaseTaxesConfig::unsetEntityAccruableCSLLTaxation()
{
    m_EntityAccruableCSLLTaxationIsSet = false;
}
utility::string_t PurchaseTaxesConfig::getEntityAccruablePISTaxation() const
{
    return m_EntityAccruablePISTaxation;
}
void PurchaseTaxesConfig::setEntityAccruablePISTaxation(utility::string_t value)
{
    m_EntityAccruablePISTaxation = value;
    m_EntityAccruablePISTaxationIsSet = true;
}
bool PurchaseTaxesConfig::entityAccruablePISTaxationIsSet() const
{
    return m_EntityAccruablePISTaxationIsSet;
}
void PurchaseTaxesConfig::unsetEntityAccruablePISTaxation()
{
    m_EntityAccruablePISTaxationIsSet = false;
}
utility::string_t PurchaseTaxesConfig::getAccruableCOFINSExempCodeTaxation() const
{
    return m_AccruableCOFINSExempCodeTaxation;
}
void PurchaseTaxesConfig::setAccruableCOFINSExempCodeTaxation(utility::string_t value)
{
    m_AccruableCOFINSExempCodeTaxation = value;
    m_AccruableCOFINSExempCodeTaxationIsSet = true;
}
bool PurchaseTaxesConfig::accruableCOFINSExempCodeTaxationIsSet() const
{
    return m_AccruableCOFINSExempCodeTaxationIsSet;
}
void PurchaseTaxesConfig::unsetAccruableCOFINSExempCodeTaxation()
{
    m_AccruableCOFINSExempCodeTaxationIsSet = false;
}
utility::string_t PurchaseTaxesConfig::getAccruablePISExempCodeTaxation() const
{
    return m_AccruablePISExempCodeTaxation;
}
void PurchaseTaxesConfig::setAccruablePISExempCodeTaxation(utility::string_t value)
{
    m_AccruablePISExempCodeTaxation = value;
    m_AccruablePISExempCodeTaxationIsSet = true;
}
bool PurchaseTaxesConfig::accruablePISExempCodeTaxationIsSet() const
{
    return m_AccruablePISExempCodeTaxationIsSet;
}
void PurchaseTaxesConfig::unsetAccruablePISExempCodeTaxation()
{
    m_AccruablePISExempCodeTaxationIsSet = false;
}
utility::string_t PurchaseTaxesConfig::getAccruablePISExemptReasonTaxation() const
{
    return m_AccruablePISExemptReasonTaxation;
}
void PurchaseTaxesConfig::setAccruablePISExemptReasonTaxation(utility::string_t value)
{
    m_AccruablePISExemptReasonTaxation = value;
    m_AccruablePISExemptReasonTaxationIsSet = true;
}
bool PurchaseTaxesConfig::accruablePISExemptReasonTaxationIsSet() const
{
    return m_AccruablePISExemptReasonTaxationIsSet;
}
void PurchaseTaxesConfig::unsetAccruablePISExemptReasonTaxation()
{
    m_AccruablePISExemptReasonTaxationIsSet = false;
}
utility::string_t PurchaseTaxesConfig::getAccruableCOFINSExemptReasonTaxation() const
{
    return m_AccruableCOFINSExemptReasonTaxation;
}
void PurchaseTaxesConfig::setAccruableCOFINSExemptReasonTaxation(utility::string_t value)
{
    m_AccruableCOFINSExemptReasonTaxation = value;
    m_AccruableCOFINSExemptReasonTaxationIsSet = true;
}
bool PurchaseTaxesConfig::accruableCOFINSExemptReasonTaxationIsSet() const
{
    return m_AccruableCOFINSExemptReasonTaxationIsSet;
}
void PurchaseTaxesConfig::unsetAccruableCOFINSExemptReasonTaxation()
{
    m_AccruableCOFINSExemptReasonTaxationIsSet = false;
}
utility::string_t PurchaseTaxesConfig::getAccruableCSLLExemptReasonTaxation() const
{
    return m_AccruableCSLLExemptReasonTaxation;
}
void PurchaseTaxesConfig::setAccruableCSLLExemptReasonTaxation(utility::string_t value)
{
    m_AccruableCSLLExemptReasonTaxation = value;
    m_AccruableCSLLExemptReasonTaxationIsSet = true;
}
bool PurchaseTaxesConfig::accruableCSLLExemptReasonTaxationIsSet() const
{
    return m_AccruableCSLLExemptReasonTaxationIsSet;
}
void PurchaseTaxesConfig::unsetAccruableCSLLExemptReasonTaxation()
{
    m_AccruableCSLLExemptReasonTaxationIsSet = false;
}
bool PurchaseTaxesConfig::getWithholdingPIS() const
{
    return m_WithholdingPIS;
}
void PurchaseTaxesConfig::setWithholdingPIS(bool value)
{
    m_WithholdingPIS = value;
    m_WithholdingPISIsSet = true;
}
bool PurchaseTaxesConfig::withholdingPISIsSet() const
{
    return m_WithholdingPISIsSet;
}
void PurchaseTaxesConfig::unsetWithholdingPIS()
{
    m_WithholdingPISIsSet = false;
}
bool PurchaseTaxesConfig::getWithholdingCOFINS() const
{
    return m_WithholdingCOFINS;
}
void PurchaseTaxesConfig::setWithholdingCOFINS(bool value)
{
    m_WithholdingCOFINS = value;
    m_WithholdingCOFINSIsSet = true;
}
bool PurchaseTaxesConfig::withholdingCOFINSIsSet() const
{
    return m_WithholdingCOFINSIsSet;
}
void PurchaseTaxesConfig::unsetWithholdingCOFINS()
{
    m_WithholdingCOFINSIsSet = false;
}
bool PurchaseTaxesConfig::getWithholdingCSLL() const
{
    return m_WithholdingCSLL;
}
void PurchaseTaxesConfig::setWithholdingCSLL(bool value)
{
    m_WithholdingCSLL = value;
    m_WithholdingCSLLIsSet = true;
}
bool PurchaseTaxesConfig::withholdingCSLLIsSet() const
{
    return m_WithholdingCSLLIsSet;
}
void PurchaseTaxesConfig::unsetWithholdingCSLL()
{
    m_WithholdingCSLLIsSet = false;
}
bool PurchaseTaxesConfig::getWithholdingIRRF() const
{
    return m_WithholdingIRRF;
}
void PurchaseTaxesConfig::setWithholdingIRRF(bool value)
{
    m_WithholdingIRRF = value;
    m_WithholdingIRRFIsSet = true;
}
bool PurchaseTaxesConfig::withholdingIRRFIsSet() const
{
    return m_WithholdingIRRFIsSet;
}
void PurchaseTaxesConfig::unsetWithholdingIRRF()
{
    m_WithholdingIRRFIsSet = false;
}
utility::string_t PurchaseTaxesConfig::getWithholdCOFINSExemptReasonTaxation() const
{
    return m_WithholdCOFINSExemptReasonTaxation;
}
void PurchaseTaxesConfig::setWithholdCOFINSExemptReasonTaxation(utility::string_t value)
{
    m_WithholdCOFINSExemptReasonTaxation = value;
    m_WithholdCOFINSExemptReasonTaxationIsSet = true;
}
bool PurchaseTaxesConfig::withholdCOFINSExemptReasonTaxationIsSet() const
{
    return m_WithholdCOFINSExemptReasonTaxationIsSet;
}
void PurchaseTaxesConfig::unsetWithholdCOFINSExemptReasonTaxation()
{
    m_WithholdCOFINSExemptReasonTaxationIsSet = false;
}
utility::string_t PurchaseTaxesConfig::getWithholdCSLLExemptReasonTaxation() const
{
    return m_WithholdCSLLExemptReasonTaxation;
}
void PurchaseTaxesConfig::setWithholdCSLLExemptReasonTaxation(utility::string_t value)
{
    m_WithholdCSLLExemptReasonTaxation = value;
    m_WithholdCSLLExemptReasonTaxationIsSet = true;
}
bool PurchaseTaxesConfig::withholdCSLLExemptReasonTaxationIsSet() const
{
    return m_WithholdCSLLExemptReasonTaxationIsSet;
}
void PurchaseTaxesConfig::unsetWithholdCSLLExemptReasonTaxation()
{
    m_WithholdCSLLExemptReasonTaxationIsSet = false;
}
utility::string_t PurchaseTaxesConfig::getWithholdPISExemptReasonTaxation() const
{
    return m_WithholdPISExemptReasonTaxation;
}
void PurchaseTaxesConfig::setWithholdPISExemptReasonTaxation(utility::string_t value)
{
    m_WithholdPISExemptReasonTaxation = value;
    m_WithholdPISExemptReasonTaxationIsSet = true;
}
bool PurchaseTaxesConfig::withholdPISExemptReasonTaxationIsSet() const
{
    return m_WithholdPISExemptReasonTaxationIsSet;
}
void PurchaseTaxesConfig::unsetWithholdPISExemptReasonTaxation()
{
    m_WithholdPISExemptReasonTaxationIsSet = false;
}

}
}
}
}

