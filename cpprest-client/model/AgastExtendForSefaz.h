/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * AgastExtendForSefaz.h
 *
 * 
 */

#ifndef AgastExtendForSefaz_H_
#define AgastExtendForSefaz_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  AgastExtendForSefaz
    : public ModelBase
{
public:
    AgastExtendForSefaz();
    virtual ~AgastExtendForSefaz();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AgastExtendForSefaz members

    /// <summary>
    /// harmonized code, NCM or LC 116
    /// </summary>
    utility::string_t getHsCode() const;
    void setHsCode(utility::string_t value);
    bool hsCodeIsSet() const;
    void unsetHsCode();
    /// <summary>
    /// hsCode Exception for IPI tax
    /// </summary>
    int32_t getEx() const;
    void setEx(int32_t value);
    bool exIsSet() const;
    void unsetEx();
    /// <summary>
    /// tax substitution code - Codigo especificador da Substuicao Tributaria
    /// </summary>
    utility::string_t getCest() const;
    void setCest(utility::string_t value);
    bool cestIsSet() const;
    void unsetCest();
    /// <summary>
    /// GTIN NUMBER
    /// </summary>
    utility::string_t getCean() const;
    void setCean(utility::string_t value);
    bool ceanIsSet() const;
    void unsetCean();
    /// <summary>
    /// Nomenclatura de Valor aduaneio e Estatístico - NCM extension code
    /// </summary>
    utility::string_t getNve() const;
    void setNve(utility::string_t value);
    bool nveIsSet() const;
    void unsetNve();
    /// <summary>
    /// Sales Unit
    /// </summary>
    utility::string_t getUnit() const;
    void setUnit(utility::string_t value);
    bool unitIsSet() const;
    void unsetUnit();
    /// <summary>
    /// Sales Taxable Unit
    /// </summary>
    utility::string_t getUnitTaxable() const;
    void setUnitTaxable(utility::string_t value);
    bool unitTaxableIsSet() const;
    void unsetUnitTaxable();
    /// <summary>
    /// Importation content form number (Número de controle da FCI - Ficha de Conteúdo de Importação)
    /// </summary>
    utility::string_t getNFCI() const;
    void setNFCI(utility::string_t value);
    bool nFCIIsSet() const;
    void unsetNFCI();

protected:
    utility::string_t m_HsCode;
    bool m_HsCodeIsSet;
int32_t m_Ex;
    bool m_ExIsSet;
utility::string_t m_Cest;
    bool m_CestIsSet;
utility::string_t m_Cean;
    bool m_CeanIsSet;
utility::string_t m_Nve;
    bool m_NveIsSet;
utility::string_t m_Unit;
    bool m_UnitIsSet;
utility::string_t m_UnitTaxable;
    bool m_UnitTaxableIsSet;
utility::string_t m_NFCI;
    bool m_NFCIIsSet;
};

}
}
}
}

#endif /* AgastExtendForSefaz_H_ */
