/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "EntityLocation.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

EntityLocation::EntityLocation()
{
    m_Street = U("");
    m_StreetIsSet = false;
    m_Neighborhood = U("");
    m_NeighborhoodIsSet = false;
    m_Zipcode = U("");
    m_CityCode = U("");
    m_CityCodeIsSet = false;
    m_CityName = U("");
    m_CityNameIsSet = false;
    m_StateIsSet = false;
    m_CountryCode = U("");
    m_CountryCodeIsSet = false;
    m_Country = U("");
    m_CountryIsSet = false;
    
}

EntityLocation::~EntityLocation()
{
}

void EntityLocation::validate()
{
    // TODO: implement validation
}

web::json::value EntityLocation::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_StreetIsSet)
    {
        val[U("street")] = ModelBase::toJson(m_Street);
    }
    if(m_NeighborhoodIsSet)
    {
        val[U("neighborhood")] = ModelBase::toJson(m_Neighborhood);
    }
    val[U("zipcode")] = ModelBase::toJson(m_Zipcode);
    if(m_CityCodeIsSet)
    {
        val[U("cityCode")] = ModelBase::toJson(m_CityCode);
    }
    if(m_CityNameIsSet)
    {
        val[U("cityName")] = ModelBase::toJson(m_CityName);
    }
    if(m_StateIsSet)
    {
        val[U("state")] = ModelBase::toJson(m_State);
    }
    if(m_CountryCodeIsSet)
    {
        val[U("countryCode")] = ModelBase::toJson(m_CountryCode);
    }
    if(m_CountryIsSet)
    {
        val[U("country")] = ModelBase::toJson(m_Country);
    }
    

    return val;
}

void EntityLocation::fromJson(web::json::value& val)
{
    if(val.has_field(U("street")))
    {
        setStreet(ModelBase::stringFromJson(val[U("street")]));
        
    }
    if(val.has_field(U("neighborhood")))
    {
        setNeighborhood(ModelBase::stringFromJson(val[U("neighborhood")]));
        
    }
    setZipcode(ModelBase::stringFromJson(val[U("zipcode")]));
    if(val.has_field(U("cityCode")))
    {
        setCityCode(ModelBase::stringFromJson(val[U("cityCode")]));
        
    }
    if(val.has_field(U("cityName")))
    {
        setCityName(ModelBase::stringFromJson(val[U("cityName")]));
        
    }
    if(val.has_field(U("state")))
    {
        if(!val[U("state")].is_null())
        {
            std::shared_ptr<StateEnum> newItem(new StateEnum());
            newItem->fromJson(val[U("state")]);
            setState( newItem );
        }
        
    }
    if(val.has_field(U("countryCode")))
    {
        setCountryCode(ModelBase::stringFromJson(val[U("countryCode")]));
        
    }
    if(val.has_field(U("country")))
    {
        setCountry(ModelBase::stringFromJson(val[U("country")]));
        
    }
    
}

void EntityLocation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_StreetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("street"), m_Street));
        
    }
    if(m_NeighborhoodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("neighborhood"), m_Neighborhood));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("zipcode"), m_Zipcode));
    if(m_CityCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cityCode"), m_CityCode));
        
    }
    if(m_CityNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cityName"), m_CityName));
        
    }
    if(m_StateIsSet)
    {
        if (m_State.get())
        {
            m_State->toMultipart(multipart, U("state."));
        }
        
    }
    if(m_CountryCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("countryCode"), m_CountryCode));
        
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("country"), m_Country));
        
    }
    
}

void EntityLocation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("street")))
    {
        setStreet(ModelBase::stringFromHttpContent(multipart->getContent(U("street"))));
        
    }
    if(multipart->hasContent(U("neighborhood")))
    {
        setNeighborhood(ModelBase::stringFromHttpContent(multipart->getContent(U("neighborhood"))));
        
    }
    setZipcode(ModelBase::stringFromHttpContent(multipart->getContent(U("zipcode"))));
    if(multipart->hasContent(U("cityCode")))
    {
        setCityCode(ModelBase::stringFromHttpContent(multipart->getContent(U("cityCode"))));
        
    }
    if(multipart->hasContent(U("cityName")))
    {
        setCityName(ModelBase::stringFromHttpContent(multipart->getContent(U("cityName"))));
        
    }
    if(multipart->hasContent(U("state")))
    {
        if(multipart->hasContent(U("state")))
        {
            std::shared_ptr<StateEnum> newItem(new StateEnum());
            newItem->fromMultiPart(multipart, U("state."));
            setState( newItem );
        }
        
    }
    if(multipart->hasContent(U("countryCode")))
    {
        setCountryCode(ModelBase::stringFromHttpContent(multipart->getContent(U("countryCode"))));
        
    }
    if(multipart->hasContent(U("country")))
    {
        setCountry(ModelBase::stringFromHttpContent(multipart->getContent(U("country"))));
        
    }
    
}


utility::string_t EntityLocation::getStreet() const
{
    return m_Street;
}
void EntityLocation::setStreet(utility::string_t value)
{
    m_Street = value;
    m_StreetIsSet = true;
}
bool EntityLocation::streetIsSet() const
{
    return m_StreetIsSet;
}
void EntityLocation::unsetStreet()
{
    m_StreetIsSet = false;
}
utility::string_t EntityLocation::getNeighborhood() const
{
    return m_Neighborhood;
}
void EntityLocation::setNeighborhood(utility::string_t value)
{
    m_Neighborhood = value;
    m_NeighborhoodIsSet = true;
}
bool EntityLocation::neighborhoodIsSet() const
{
    return m_NeighborhoodIsSet;
}
void EntityLocation::unsetNeighborhood()
{
    m_NeighborhoodIsSet = false;
}
utility::string_t EntityLocation::getZipcode() const
{
    return m_Zipcode;
}
void EntityLocation::setZipcode(utility::string_t value)
{
    m_Zipcode = value;
    
}
utility::string_t EntityLocation::getCityCode() const
{
    return m_CityCode;
}
void EntityLocation::setCityCode(utility::string_t value)
{
    m_CityCode = value;
    m_CityCodeIsSet = true;
}
bool EntityLocation::cityCodeIsSet() const
{
    return m_CityCodeIsSet;
}
void EntityLocation::unsetCityCode()
{
    m_CityCodeIsSet = false;
}
utility::string_t EntityLocation::getCityName() const
{
    return m_CityName;
}
void EntityLocation::setCityName(utility::string_t value)
{
    m_CityName = value;
    m_CityNameIsSet = true;
}
bool EntityLocation::cityNameIsSet() const
{
    return m_CityNameIsSet;
}
void EntityLocation::unsetCityName()
{
    m_CityNameIsSet = false;
}
std::shared_ptr<StateEnum> EntityLocation::getState() const
{
    return m_State;
}
void EntityLocation::setState(std::shared_ptr<StateEnum> value)
{
    m_State = value;
    m_StateIsSet = true;
}
bool EntityLocation::stateIsSet() const
{
    return m_StateIsSet;
}
void EntityLocation::unsetState()
{
    m_StateIsSet = false;
}
utility::string_t EntityLocation::getCountryCode() const
{
    return m_CountryCode;
}
void EntityLocation::setCountryCode(utility::string_t value)
{
    m_CountryCode = value;
    m_CountryCodeIsSet = true;
}
bool EntityLocation::countryCodeIsSet() const
{
    return m_CountryCodeIsSet;
}
void EntityLocation::unsetCountryCode()
{
    m_CountryCodeIsSet = false;
}
utility::string_t EntityLocation::getCountry() const
{
    return m_Country;
}
void EntityLocation::setCountry(utility::string_t value)
{
    m_Country = value;
    m_CountryIsSet = true;
}
bool EntityLocation::countryIsSet() const
{
    return m_CountryIsSet;
}
void EntityLocation::unsetCountry()
{
    m_CountryIsSet = false;
}

}
}
}
}

