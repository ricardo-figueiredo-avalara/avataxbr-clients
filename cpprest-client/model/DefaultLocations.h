/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * DefaultLocations.h
 *
 * This element contains a dictionary of locations such as the origin and destination addresses to be associated with this transaction. These locations may be overridden within each line item. The key for each location in the dictionary is the location &#39;purpose&#39;. Valid locations purposes are &#39;ShipFrom&#39;, &#39;ShipTo&#39;, &#39;POS&#39;, &#39;POM&#39;, &#39;POO&#39;, &#39;BillingLocation&#39;, &#39;CallPlaced&#39;, &#39;CallReceived&#39;, &#39;ServiceRendered&#39;, &#39;POA&#39; and &#39;FirstUse&#39;. There can only be one location of a given purpose in the dictionary.
 */

#ifndef DefaultLocations_H_
#define DefaultLocations_H_


#include "ModelBase.h"

#include "EntityLocation.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// This element contains a dictionary of locations such as the origin and destination addresses to be associated with this transaction. These locations may be overridden within each line item. The key for each location in the dictionary is the location &#39;purpose&#39;. Valid locations purposes are &#39;ShipFrom&#39;, &#39;ShipTo&#39;, &#39;POS&#39;, &#39;POM&#39;, &#39;POO&#39;, &#39;BillingLocation&#39;, &#39;CallPlaced&#39;, &#39;CallReceived&#39;, &#39;ServiceRendered&#39;, &#39;POA&#39; and &#39;FirstUse&#39;. There can only be one location of a given purpose in the dictionary.
/// </summary>
class  DefaultLocations
    : public ModelBase
{
public:
    DefaultLocations();
    virtual ~DefaultLocations();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DefaultLocations members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityLocation> getEntity() const;
    void setEntity(std::shared_ptr<EntityLocation> value);
    bool entityIsSet() const;
    void unsetEntity();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityLocation> getCompany() const;
    void setCompany(std::shared_ptr<EntityLocation> value);
    bool companyIsSet() const;
    void unsetCompany();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityLocation> getTransporter() const;
    void setTransporter(std::shared_ptr<EntityLocation> value);
    bool transporterIsSet() const;
    void unsetTransporter();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityLocation> getDeliveryLocation() const;
    void setDeliveryLocation(std::shared_ptr<EntityLocation> value);
    bool deliveryLocationIsSet() const;
    void unsetDeliveryLocation();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityLocation> getPickupLocation() const;
    void setPickupLocation(std::shared_ptr<EntityLocation> value);
    bool pickupLocationIsSet() const;
    void unsetPickupLocation();

protected:
    std::shared_ptr<EntityLocation> m_Entity;
    bool m_EntityIsSet;
std::shared_ptr<EntityLocation> m_Company;
    bool m_CompanyIsSet;
std::shared_ptr<EntityLocation> m_Transporter;
    bool m_TransporterIsSet;
std::shared_ptr<EntityLocation> m_DeliveryLocation;
    bool m_DeliveryLocationIsSet;
std::shared_ptr<EntityLocation> m_PickupLocation;
    bool m_PickupLocationIsSet;
};

}
}
}
}

#endif /* DefaultLocations_H_ */
