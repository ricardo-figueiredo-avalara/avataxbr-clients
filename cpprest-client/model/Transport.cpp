/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Transport.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Transport::Transport()
{
    m_ModFreight = U("");
    m_WithholdICMSTransport = false;
    m_WithholdICMSTransportIsSet = false;
    m_VolumesIsSet = false;
    m_VehicleIsSet = false;
    
}

Transport::~Transport()
{
}

void Transport::validate()
{
    // TODO: implement validation
}

web::json::value Transport::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("modFreight")] = ModelBase::toJson(m_ModFreight);
    if(m_WithholdICMSTransportIsSet)
    {
        val[U("withholdICMSTransport")] = ModelBase::toJson(m_WithholdICMSTransport);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Volumes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("volumes")] = web::json::value::array(jsonArray);
        }
    }
    if(m_VehicleIsSet)
    {
        val[U("vehicle")] = ModelBase::toJson(m_Vehicle);
    }
    

    return val;
}

void Transport::fromJson(web::json::value& val)
{
    setModFreight(ModelBase::stringFromJson(val[U("modFreight")]));
    if(val.has_field(U("withholdICMSTransport")))
    {
        setWithholdICMSTransport(ModelBase::boolFromJson(val[U("withholdICMSTransport")]));
    }
    {
        m_Volumes.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("volumes")))
        {
        for( auto& item : val[U("volumes")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Volumes.push_back( std::shared_ptr<Transport_volumes>(nullptr) );
            }
            else
            {
                std::shared_ptr<Transport_volumes> newItem(new Transport_volumes());
                newItem->fromJson(item);
                m_Volumes.push_back( newItem );
            }
            
        }
        }
    }
    if(val.has_field(U("vehicle")))
    {
        if(!val[U("vehicle")].is_null())
        {
            std::shared_ptr<VehicleTransp> newItem(new VehicleTransp());
            newItem->fromJson(val[U("vehicle")]);
            setVehicle( newItem );
        }
        
    }
    
}

void Transport::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("modFreight"), m_ModFreight));
    if(m_WithholdICMSTransportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("withholdICMSTransport"), m_WithholdICMSTransport));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Volumes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("volumes"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_VehicleIsSet)
    {
        if (m_Vehicle.get())
        {
            m_Vehicle->toMultipart(multipart, U("vehicle."));
        }
        
    }
    
}

void Transport::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setModFreight(ModelBase::stringFromHttpContent(multipart->getContent(U("modFreight"))));
    if(multipart->hasContent(U("withholdICMSTransport")))
    {
        setWithholdICMSTransport(ModelBase::boolFromHttpContent(multipart->getContent(U("withholdICMSTransport"))));
    }
    {
        m_Volumes.clear();
        if(multipart->hasContent(U("volumes")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("volumes"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Volumes.push_back( std::shared_ptr<Transport_volumes>(nullptr) );
            }
            else
            {
                std::shared_ptr<Transport_volumes> newItem(new Transport_volumes());
                newItem->fromJson(item);
                m_Volumes.push_back( newItem );
            }
            
        }
        }
    }
    if(multipart->hasContent(U("vehicle")))
    {
        if(multipart->hasContent(U("vehicle")))
        {
            std::shared_ptr<VehicleTransp> newItem(new VehicleTransp());
            newItem->fromMultiPart(multipart, U("vehicle."));
            setVehicle( newItem );
        }
        
    }
    
}


utility::string_t Transport::getModFreight() const
{
    return m_ModFreight;
}
void Transport::setModFreight(utility::string_t value)
{
    m_ModFreight = value;
    
}
bool Transport::getWithholdICMSTransport() const
{
    return m_WithholdICMSTransport;
}
void Transport::setWithholdICMSTransport(bool value)
{
    m_WithholdICMSTransport = value;
    m_WithholdICMSTransportIsSet = true;
}
bool Transport::withholdICMSTransportIsSet() const
{
    return m_WithholdICMSTransportIsSet;
}
void Transport::unsetWithholdICMSTransport()
{
    m_WithholdICMSTransportIsSet = false;
}
std::vector<std::shared_ptr<Transport_volumes>>& Transport::getVolumes()
{
    return m_Volumes;
}
bool Transport::volumesIsSet() const
{
    return m_VolumesIsSet;
}
void Transport::unsetVolumes()
{
    m_VolumesIsSet = false;
}
std::shared_ptr<VehicleTransp> Transport::getVehicle() const
{
    return m_Vehicle;
}
void Transport::setVehicle(std::shared_ptr<VehicleTransp> value)
{
    m_Vehicle = value;
    m_VehicleIsSet = true;
}
bool Transport::vehicleIsSet() const
{
    return m_VehicleIsSet;
}
void Transport::unsetVehicle()
{
    m_VehicleIsSet = false;
}

}
}
}
}

