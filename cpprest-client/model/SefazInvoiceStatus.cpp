/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SefazInvoiceStatus.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SefazInvoiceStatus::SefazInvoiceStatus()
{
    m_Code = U("");
    m_CodeIsSet = false;
    m_Desc = U("");
    m_DescIsSet = false;
    m_Protocol = U("");
    m_ProtocolIsSet = false;
    m_Rec = U("");
    m_RecIsSet = false;
    m_date = utility::datetime();
    m_dateIsSet = false;
    m_Environment = U("");
    m_EnvironmentIsSet = false;
    m_AppVersion = U("");
    m_AppVersionIsSet = false;
    
}

SefazInvoiceStatus::~SefazInvoiceStatus()
{
}

void SefazInvoiceStatus::validate()
{
    // TODO: implement validation
}

web::json::value SefazInvoiceStatus::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CodeIsSet)
    {
        val[U("code")] = ModelBase::toJson(m_Code);
    }
    if(m_DescIsSet)
    {
        val[U("desc")] = ModelBase::toJson(m_Desc);
    }
    if(m_ProtocolIsSet)
    {
        val[U("protocol")] = ModelBase::toJson(m_Protocol);
    }
    if(m_RecIsSet)
    {
        val[U("rec")] = ModelBase::toJson(m_Rec);
    }
    if(m_dateIsSet)
    {
        val[U("date")] = ModelBase::toJson(m_date);
    }
    if(m_EnvironmentIsSet)
    {
        val[U("environment")] = ModelBase::toJson(m_Environment);
    }
    if(m_AppVersionIsSet)
    {
        val[U("appVersion")] = ModelBase::toJson(m_AppVersion);
    }
    

    return val;
}

void SefazInvoiceStatus::fromJson(web::json::value& val)
{
    if(val.has_field(U("code")))
    {
        setCode(ModelBase::stringFromJson(val[U("code")]));
        
    }
    if(val.has_field(U("desc")))
    {
        setDesc(ModelBase::stringFromJson(val[U("desc")]));
        
    }
    if(val.has_field(U("protocol")))
    {
        setProtocol(ModelBase::stringFromJson(val[U("protocol")]));
        
    }
    if(val.has_field(U("rec")))
    {
        setRec(ModelBase::stringFromJson(val[U("rec")]));
        
    }
    if(val.has_field(U("date")))
    {
        setDate(ModelBase::dateFromJson(val[U("date")]));
        
    }
    if(val.has_field(U("environment")))
    {
        setEnvironment(ModelBase::stringFromJson(val[U("environment")]));
        
    }
    if(val.has_field(U("appVersion")))
    {
        setAppVersion(ModelBase::stringFromJson(val[U("appVersion")]));
        
    }
    
}

void SefazInvoiceStatus::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("code"), m_Code));
        
    }
    if(m_DescIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("desc"), m_Desc));
        
    }
    if(m_ProtocolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("protocol"), m_Protocol));
        
    }
    if(m_RecIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("rec"), m_Rec));
        
    }
    if(m_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("date"), m_date));
        
    }
    if(m_EnvironmentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("environment"), m_Environment));
        
    }
    if(m_AppVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("appVersion"), m_AppVersion));
        
    }
    
}

void SefazInvoiceStatus::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("code")))
    {
        setCode(ModelBase::stringFromHttpContent(multipart->getContent(U("code"))));
        
    }
    if(multipart->hasContent(U("desc")))
    {
        setDesc(ModelBase::stringFromHttpContent(multipart->getContent(U("desc"))));
        
    }
    if(multipart->hasContent(U("protocol")))
    {
        setProtocol(ModelBase::stringFromHttpContent(multipart->getContent(U("protocol"))));
        
    }
    if(multipart->hasContent(U("rec")))
    {
        setRec(ModelBase::stringFromHttpContent(multipart->getContent(U("rec"))));
        
    }
    if(multipart->hasContent(U("date")))
    {
        setDate(ModelBase::dateFromHttpContent(multipart->getContent(U("date"))));
        
    }
    if(multipart->hasContent(U("environment")))
    {
        setEnvironment(ModelBase::stringFromHttpContent(multipart->getContent(U("environment"))));
        
    }
    if(multipart->hasContent(U("appVersion")))
    {
        setAppVersion(ModelBase::stringFromHttpContent(multipart->getContent(U("appVersion"))));
        
    }
    
}


utility::string_t SefazInvoiceStatus::getCode() const
{
    return m_Code;
}
void SefazInvoiceStatus::setCode(utility::string_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}
bool SefazInvoiceStatus::codeIsSet() const
{
    return m_CodeIsSet;
}
void SefazInvoiceStatus::unsetCode()
{
    m_CodeIsSet = false;
}
utility::string_t SefazInvoiceStatus::getDesc() const
{
    return m_Desc;
}
void SefazInvoiceStatus::setDesc(utility::string_t value)
{
    m_Desc = value;
    m_DescIsSet = true;
}
bool SefazInvoiceStatus::descIsSet() const
{
    return m_DescIsSet;
}
void SefazInvoiceStatus::unsetDesc()
{
    m_DescIsSet = false;
}
utility::string_t SefazInvoiceStatus::getProtocol() const
{
    return m_Protocol;
}
void SefazInvoiceStatus::setProtocol(utility::string_t value)
{
    m_Protocol = value;
    m_ProtocolIsSet = true;
}
bool SefazInvoiceStatus::protocolIsSet() const
{
    return m_ProtocolIsSet;
}
void SefazInvoiceStatus::unsetProtocol()
{
    m_ProtocolIsSet = false;
}
utility::string_t SefazInvoiceStatus::getRec() const
{
    return m_Rec;
}
void SefazInvoiceStatus::setRec(utility::string_t value)
{
    m_Rec = value;
    m_RecIsSet = true;
}
bool SefazInvoiceStatus::recIsSet() const
{
    return m_RecIsSet;
}
void SefazInvoiceStatus::unsetRec()
{
    m_RecIsSet = false;
}
utility::datetime SefazInvoiceStatus::getDate() const
{
    return m_date;
}
void SefazInvoiceStatus::setDate(utility::datetime value)
{
    m_date = value;
    m_dateIsSet = true;
}
bool SefazInvoiceStatus::dateIsSet() const
{
    return m_dateIsSet;
}
void SefazInvoiceStatus::unsetdate()
{
    m_dateIsSet = false;
}
utility::string_t SefazInvoiceStatus::getEnvironment() const
{
    return m_Environment;
}
void SefazInvoiceStatus::setEnvironment(utility::string_t value)
{
    m_Environment = value;
    m_EnvironmentIsSet = true;
}
bool SefazInvoiceStatus::environmentIsSet() const
{
    return m_EnvironmentIsSet;
}
void SefazInvoiceStatus::unsetEnvironment()
{
    m_EnvironmentIsSet = false;
}
utility::string_t SefazInvoiceStatus::getAppVersion() const
{
    return m_AppVersion;
}
void SefazInvoiceStatus::setAppVersion(utility::string_t value)
{
    m_AppVersion = value;
    m_AppVersionIsSet = true;
}
bool SefazInvoiceStatus::appVersionIsSet() const
{
    return m_AppVersionIsSet;
}
void SefazInvoiceStatus::unsetAppVersion()
{
    m_AppVersionIsSet = false;
}

}
}
}
}

