/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Company_mailServer.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Company_mailServer::Company_mailServer()
{
    m_User = U("");
    m_UserIsSet = false;
    m_Password = U("");
    m_PasswordIsSet = false;
    m_SmtpAddress = U("");
    m_SmtpAddressIsSet = false;
    m_Port = 0;
    m_PortIsSet = false;
    m_EmailFrom = U("");
    m_EmailFromIsSet = false;
    m_Protocol = U("");
    m_ProtocolIsSet = false;
    m_TemplatemessageToEmail = U("");
    m_TemplatemessageToEmailIsSet = false;
    
}

Company_mailServer::~Company_mailServer()
{
}

void Company_mailServer::validate()
{
    // TODO: implement validation
}

web::json::value Company_mailServer::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_UserIsSet)
    {
        val[U("user")] = ModelBase::toJson(m_User);
    }
    if(m_PasswordIsSet)
    {
        val[U("password")] = ModelBase::toJson(m_Password);
    }
    if(m_SmtpAddressIsSet)
    {
        val[U("smtpAddress")] = ModelBase::toJson(m_SmtpAddress);
    }
    if(m_PortIsSet)
    {
        val[U("port")] = ModelBase::toJson(m_Port);
    }
    if(m_EmailFromIsSet)
    {
        val[U("emailFrom")] = ModelBase::toJson(m_EmailFrom);
    }
    if(m_ProtocolIsSet)
    {
        val[U("protocol")] = ModelBase::toJson(m_Protocol);
    }
    if(m_TemplatemessageToEmailIsSet)
    {
        val[U("templatemessageToEmail")] = ModelBase::toJson(m_TemplatemessageToEmail);
    }
    

    return val;
}

void Company_mailServer::fromJson(web::json::value& val)
{
    if(val.has_field(U("user")))
    {
        setUser(ModelBase::stringFromJson(val[U("user")]));
        
    }
    if(val.has_field(U("password")))
    {
        setPassword(ModelBase::stringFromJson(val[U("password")]));
        
    }
    if(val.has_field(U("smtpAddress")))
    {
        setSmtpAddress(ModelBase::stringFromJson(val[U("smtpAddress")]));
        
    }
    if(val.has_field(U("port")))
    {
        setPort(ModelBase::int32_tFromJson(val[U("port")]));
    }
    if(val.has_field(U("emailFrom")))
    {
        setEmailFrom(ModelBase::stringFromJson(val[U("emailFrom")]));
        
    }
    if(val.has_field(U("protocol")))
    {
        setProtocol(ModelBase::stringFromJson(val[U("protocol")]));
        
    }
    if(val.has_field(U("templatemessageToEmail")))
    {
        setTemplatemessageToEmail(ModelBase::stringFromJson(val[U("templatemessageToEmail")]));
        
    }
    
}

void Company_mailServer::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("user"), m_User));
        
    }
    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("password"), m_Password));
        
    }
    if(m_SmtpAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("smtpAddress"), m_SmtpAddress));
        
    }
    if(m_PortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("port"), m_Port));
    }
    if(m_EmailFromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("emailFrom"), m_EmailFrom));
        
    }
    if(m_ProtocolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("protocol"), m_Protocol));
        
    }
    if(m_TemplatemessageToEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("templatemessageToEmail"), m_TemplatemessageToEmail));
        
    }
    
}

void Company_mailServer::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("user")))
    {
        setUser(ModelBase::stringFromHttpContent(multipart->getContent(U("user"))));
        
    }
    if(multipart->hasContent(U("password")))
    {
        setPassword(ModelBase::stringFromHttpContent(multipart->getContent(U("password"))));
        
    }
    if(multipart->hasContent(U("smtpAddress")))
    {
        setSmtpAddress(ModelBase::stringFromHttpContent(multipart->getContent(U("smtpAddress"))));
        
    }
    if(multipart->hasContent(U("port")))
    {
        setPort(ModelBase::int32_tFromHttpContent(multipart->getContent(U("port"))));
    }
    if(multipart->hasContent(U("emailFrom")))
    {
        setEmailFrom(ModelBase::stringFromHttpContent(multipart->getContent(U("emailFrom"))));
        
    }
    if(multipart->hasContent(U("protocol")))
    {
        setProtocol(ModelBase::stringFromHttpContent(multipart->getContent(U("protocol"))));
        
    }
    if(multipart->hasContent(U("templatemessageToEmail")))
    {
        setTemplatemessageToEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("templatemessageToEmail"))));
        
    }
    
}


utility::string_t Company_mailServer::getUser() const
{
    return m_User;
}
void Company_mailServer::setUser(utility::string_t value)
{
    m_User = value;
    m_UserIsSet = true;
}
bool Company_mailServer::userIsSet() const
{
    return m_UserIsSet;
}
void Company_mailServer::unsetUser()
{
    m_UserIsSet = false;
}
utility::string_t Company_mailServer::getPassword() const
{
    return m_Password;
}
void Company_mailServer::setPassword(utility::string_t value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}
bool Company_mailServer::passwordIsSet() const
{
    return m_PasswordIsSet;
}
void Company_mailServer::unsetPassword()
{
    m_PasswordIsSet = false;
}
utility::string_t Company_mailServer::getSmtpAddress() const
{
    return m_SmtpAddress;
}
void Company_mailServer::setSmtpAddress(utility::string_t value)
{
    m_SmtpAddress = value;
    m_SmtpAddressIsSet = true;
}
bool Company_mailServer::smtpAddressIsSet() const
{
    return m_SmtpAddressIsSet;
}
void Company_mailServer::unsetSmtpAddress()
{
    m_SmtpAddressIsSet = false;
}
int32_t Company_mailServer::getPort() const
{
    return m_Port;
}
void Company_mailServer::setPort(int32_t value)
{
    m_Port = value;
    m_PortIsSet = true;
}
bool Company_mailServer::portIsSet() const
{
    return m_PortIsSet;
}
void Company_mailServer::unsetPort()
{
    m_PortIsSet = false;
}
utility::string_t Company_mailServer::getEmailFrom() const
{
    return m_EmailFrom;
}
void Company_mailServer::setEmailFrom(utility::string_t value)
{
    m_EmailFrom = value;
    m_EmailFromIsSet = true;
}
bool Company_mailServer::emailFromIsSet() const
{
    return m_EmailFromIsSet;
}
void Company_mailServer::unsetEmailFrom()
{
    m_EmailFromIsSet = false;
}
utility::string_t Company_mailServer::getProtocol() const
{
    return m_Protocol;
}
void Company_mailServer::setProtocol(utility::string_t value)
{
    m_Protocol = value;
    m_ProtocolIsSet = true;
}
bool Company_mailServer::protocolIsSet() const
{
    return m_ProtocolIsSet;
}
void Company_mailServer::unsetProtocol()
{
    m_ProtocolIsSet = false;
}
utility::string_t Company_mailServer::getTemplatemessageToEmail() const
{
    return m_TemplatemessageToEmail;
}
void Company_mailServer::setTemplatemessageToEmail(utility::string_t value)
{
    m_TemplatemessageToEmail = value;
    m_TemplatemessageToEmailIsSet = true;
}
bool Company_mailServer::templatemessageToEmailIsSet() const
{
    return m_TemplatemessageToEmailIsSet;
}
void Company_mailServer::unsetTemplatemessageToEmail()
{
    m_TemplatemessageToEmailIsSet = false;
}

}
}
}
}

