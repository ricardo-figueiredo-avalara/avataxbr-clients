/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "AdditionalInformation.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

AdditionalInformation::AdditionalInformation()
{
    m_FiscalInfo = U("");
    m_FiscalInfoIsSet = false;
    m_ComplementaryInfo = U("");
    m_ComplementaryInfoIsSet = false;
    m_ProcRefIsSet = false;
    
}

AdditionalInformation::~AdditionalInformation()
{
}

void AdditionalInformation::validate()
{
    // TODO: implement validation
}

web::json::value AdditionalInformation::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_FiscalInfoIsSet)
    {
        val[U("fiscalInfo")] = ModelBase::toJson(m_FiscalInfo);
    }
    if(m_ComplementaryInfoIsSet)
    {
        val[U("complementaryInfo")] = ModelBase::toJson(m_ComplementaryInfo);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_ProcRef )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("procRef")] = web::json::value::array(jsonArray);
        }
    }
    

    return val;
}

void AdditionalInformation::fromJson(web::json::value& val)
{
    if(val.has_field(U("fiscalInfo")))
    {
        setFiscalInfo(ModelBase::stringFromJson(val[U("fiscalInfo")]));
        
    }
    if(val.has_field(U("complementaryInfo")))
    {
        setComplementaryInfo(ModelBase::stringFromJson(val[U("complementaryInfo")]));
        
    }
    {
        m_ProcRef.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("procRef")))
        {
        for( auto& item : val[U("procRef")].as_array() )
        {
            
            if(item.is_null())
            {
                m_ProcRef.push_back( std::shared_ptr<AdditionalInformation_procRef>(nullptr) );
            }
            else
            {
                std::shared_ptr<AdditionalInformation_procRef> newItem(new AdditionalInformation_procRef());
                newItem->fromJson(item);
                m_ProcRef.push_back( newItem );
            }
            
        }
        }
    }
    
}

void AdditionalInformation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_FiscalInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("fiscalInfo"), m_FiscalInfo));
        
    }
    if(m_ComplementaryInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("complementaryInfo"), m_ComplementaryInfo));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_ProcRef )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("procRef"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    
}

void AdditionalInformation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("fiscalInfo")))
    {
        setFiscalInfo(ModelBase::stringFromHttpContent(multipart->getContent(U("fiscalInfo"))));
        
    }
    if(multipart->hasContent(U("complementaryInfo")))
    {
        setComplementaryInfo(ModelBase::stringFromHttpContent(multipart->getContent(U("complementaryInfo"))));
        
    }
    {
        m_ProcRef.clear();
        if(multipart->hasContent(U("procRef")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("procRef"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_ProcRef.push_back( std::shared_ptr<AdditionalInformation_procRef>(nullptr) );
            }
            else
            {
                std::shared_ptr<AdditionalInformation_procRef> newItem(new AdditionalInformation_procRef());
                newItem->fromJson(item);
                m_ProcRef.push_back( newItem );
            }
            
        }
        }
    }
    
}


utility::string_t AdditionalInformation::getFiscalInfo() const
{
    return m_FiscalInfo;
}
void AdditionalInformation::setFiscalInfo(utility::string_t value)
{
    m_FiscalInfo = value;
    m_FiscalInfoIsSet = true;
}
bool AdditionalInformation::fiscalInfoIsSet() const
{
    return m_FiscalInfoIsSet;
}
void AdditionalInformation::unsetFiscalInfo()
{
    m_FiscalInfoIsSet = false;
}
utility::string_t AdditionalInformation::getComplementaryInfo() const
{
    return m_ComplementaryInfo;
}
void AdditionalInformation::setComplementaryInfo(utility::string_t value)
{
    m_ComplementaryInfo = value;
    m_ComplementaryInfoIsSet = true;
}
bool AdditionalInformation::complementaryInfoIsSet() const
{
    return m_ComplementaryInfoIsSet;
}
void AdditionalInformation::unsetComplementaryInfo()
{
    m_ComplementaryInfoIsSet = false;
}
std::vector<std::shared_ptr<AdditionalInformation_procRef>>& AdditionalInformation::getProcRef()
{
    return m_ProcRef;
}
bool AdditionalInformation::procRefIsSet() const
{
    return m_ProcRefIsSet;
}
void AdditionalInformation::unsetProcRef()
{
    m_ProcRefIsSet = false;
}

}
}
}
}

