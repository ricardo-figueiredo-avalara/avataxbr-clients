/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PointOfOrderOrigin.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PointOfOrderOrigin::PointOfOrderOrigin()
{
    m_AddressIsSet = false;
    
}

PointOfOrderOrigin::~PointOfOrderOrigin()
{
}

void PointOfOrderOrigin::validate()
{
    // TODO: implement validation
}

web::json::value PointOfOrderOrigin::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AddressIsSet)
    {
        val[U("address")] = ModelBase::toJson(m_Address);
    }
    

    return val;
}

void PointOfOrderOrigin::fromJson(web::json::value& val)
{
    if(val.has_field(U("address")))
    {
        if(!val[U("address")].is_null())
        {
            std::shared_ptr<SimpleAddress> newItem(new SimpleAddress());
            newItem->fromJson(val[U("address")]);
            setAddress( newItem );
        }
        
    }
    
}

void PointOfOrderOrigin::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_AddressIsSet)
    {
        if (m_Address.get())
        {
            m_Address->toMultipart(multipart, U("address."));
        }
        
    }
    
}

void PointOfOrderOrigin::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("address")))
    {
        if(multipart->hasContent(U("address")))
        {
            std::shared_ptr<SimpleAddress> newItem(new SimpleAddress());
            newItem->fromMultiPart(multipart, U("address."));
            setAddress( newItem );
        }
        
    }
    
}


std::shared_ptr<SimpleAddress> PointOfOrderOrigin::getAddress() const
{
    return m_Address;
}
void PointOfOrderOrigin::setAddress(std::shared_ptr<SimpleAddress> value)
{
    m_Address = value;
    m_AddressIsSet = true;
}
bool PointOfOrderOrigin::addressIsSet() const
{
    return m_AddressIsSet;
}
void PointOfOrderOrigin::unsetAddress()
{
    m_AddressIsSet = false;
}

}
}
}
}

