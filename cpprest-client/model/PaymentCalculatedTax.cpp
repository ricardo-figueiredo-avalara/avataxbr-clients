/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PaymentCalculatedTax.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PaymentCalculatedTax::PaymentCalculatedTax()
{
    m_TaxByTypeIsSet = false;
    m_Tax = 0.0;
    m_TaxIsSet = false;
    
}

PaymentCalculatedTax::~PaymentCalculatedTax()
{
}

void PaymentCalculatedTax::validate()
{
    // TODO: implement validation
}

web::json::value PaymentCalculatedTax::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TaxByTypeIsSet)
    {
        val[U("taxByType")] = ModelBase::toJson(m_TaxByType);
    }
    if(m_TaxIsSet)
    {
        val[U("tax")] = ModelBase::toJson(m_Tax);
    }
    

    return val;
}

void PaymentCalculatedTax::fromJson(web::json::value& val)
{
    if(val.has_field(U("taxByType")))
    {
        if(!val[U("taxByType")].is_null())
        {
            std::shared_ptr<PaymentTaxByType> newItem(new PaymentTaxByType());
            newItem->fromJson(val[U("taxByType")]);
            setTaxByType( newItem );
        }
        
    }
    if(val.has_field(U("tax")))
    {
        setTax(ModelBase::doubleFromJson(val[U("tax")]));
    }
    
}

void PaymentCalculatedTax::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_TaxByTypeIsSet)
    {
        if (m_TaxByType.get())
        {
            m_TaxByType->toMultipart(multipart, U("taxByType."));
        }
        
    }
    if(m_TaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("tax"), m_Tax));
    }
    
}

void PaymentCalculatedTax::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("taxByType")))
    {
        if(multipart->hasContent(U("taxByType")))
        {
            std::shared_ptr<PaymentTaxByType> newItem(new PaymentTaxByType());
            newItem->fromMultiPart(multipart, U("taxByType."));
            setTaxByType( newItem );
        }
        
    }
    if(multipart->hasContent(U("tax")))
    {
        setTax(ModelBase::doubleFromHttpContent(multipart->getContent(U("tax"))));
    }
    
}


std::shared_ptr<PaymentTaxByType> PaymentCalculatedTax::getTaxByType() const
{
    return m_TaxByType;
}
void PaymentCalculatedTax::setTaxByType(std::shared_ptr<PaymentTaxByType> value)
{
    m_TaxByType = value;
    m_TaxByTypeIsSet = true;
}
bool PaymentCalculatedTax::taxByTypeIsSet() const
{
    return m_TaxByTypeIsSet;
}
void PaymentCalculatedTax::unsetTaxByType()
{
    m_TaxByTypeIsSet = false;
}
double PaymentCalculatedTax::getTax() const
{
    return m_Tax;
}
void PaymentCalculatedTax::setTax(double value)
{
    m_Tax = value;
    m_TaxIsSet = true;
}
bool PaymentCalculatedTax::taxIsSet() const
{
    return m_TaxIsSet;
}
void PaymentCalculatedTax::unsetTax()
{
    m_TaxIsSet = false;
}

}
}
}
}

