/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Vehicle.h
 *
 * 
 */

#ifndef Vehicle_H_
#define Vehicle_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Vehicle
    : public ModelBase
{
public:
    Vehicle();
    virtual ~Vehicle();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Vehicle members

    /// <summary>
    /// - 1 # Sales by car dealership - 2 # Direct billing - 3 # Direct sales - 0 # Other 
    /// </summary>
    int32_t getTpOp() const;
    void setTpOp(int32_t value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getChassisNumber() const;
    void setChassisNumber(utility::string_t value);
        /// <summary>
    /// color code used by factory
    /// </summary>
    utility::string_t getColorCode() const;
    void setColorCode(utility::string_t value);
        /// <summary>
    /// color name
    /// </summary>
    utility::string_t getColorName() const;
    void setColorName(utility::string_t value);
        /// <summary>
    /// Power using CV unid
    /// </summary>
    utility::string_t getCvPower() const;
    void setCvPower(utility::string_t value);
        /// <summary>
    /// engine size in cubic centimeters
    /// </summary>
    utility::string_t getCylinderVolumCC() const;
    void setCylinderVolumCC(utility::string_t value);
        /// <summary>
    /// net weight
    /// </summary>
    utility::string_t getNetWeight() const;
    void setNetWeight(utility::string_t value);
        /// <summary>
    /// gross weight
    /// </summary>
    utility::string_t getGrossWeight() const;
    void setGrossWeight(utility::string_t value);
        /// <summary>
    /// serie
    /// </summary>
    utility::string_t getSerialNumber() const;
    void setSerialNumber(utility::string_t value);
        /// <summary>
    /// - &#39;01&#39; # Alcohol - &#39;02&#39; # Gas - &#39;03&#39; # Diesel - &#39;16&#39; # Alcohol/Gas - &#39;17&#39; # Gas/Alcohol/GNV - &#39;18&#39; # Gas/Electric 
    /// </summary>
    utility::string_t getFuelType() const;
    void setFuelType(utility::string_t value);
        /// <summary>
    /// engine number
    /// </summary>
    utility::string_t getEngineNumber() const;
    void setEngineNumber(utility::string_t value);
        /// <summary>
    /// traction capacity, tonne
    /// </summary>
    utility::string_t getCmt() const;
    void setCmt(utility::string_t value);
        /// <summary>
    /// length between axis
    /// </summary>
    utility::string_t getLengthBetweenAxis() const;
    void setLengthBetweenAxis(utility::string_t value);
        /// <summary>
    /// model year
    /// </summary>
    utility::string_t getModelYear() const;
    void setModelYear(utility::string_t value);
        /// <summary>
    /// year of factory
    /// </summary>
    utility::string_t getManufactoryYear() const;
    void setManufactoryYear(utility::string_t value);
        /// <summary>
    /// paynt type
    /// </summary>
    utility::string_t getPaintType() const;
    void setPaintType(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getVehicleRENAVAMType() const;
    void setVehicleRENAVAMType(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getSpecieRENAVAMType() const;
    void setSpecieRENAVAMType(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getModelRENAVAMCode() const;
    void setModelRENAVAMCode(utility::string_t value);
        /// <summary>
    /// - &#39;01&#39; # YELLOW - &#39;02&#39; # BLUE - &#39;03&#39; # BEIGE - &#39;04&#39; # WHITE - &#39;05&#39; # GRAY - &#39;06&#39; # GOLDEN - &#39;07&#39; # GRENA - &#39;08&#39; # ORANGE - &#39;09&#39; # BROWN - &#39;10&#39; # SILVER - &#39;11&#39; # BLACK - &#39;12&#39; # PINK - &#39;13&#39; # PURPLE - &#39;14&#39; # GREEN - &#39;15&#39; # RED - &#39;16&#39; # FANTASY 
    /// </summary>
    utility::string_t getColorDENATRANCode() const;
    void setColorDENATRANCode(utility::string_t value);
        /// <summary>
    /// chassis condition original or modified (remarcado)
    /// </summary>
    utility::string_t getVin() const;
    void setVin(utility::string_t value);
        /// <summary>
    /// - &#39;1&#39; # Finished(Done) - &#39;2&#39; # Not finished - &#39;3&#39; # Semi-finished 
    /// </summary>
    utility::string_t getVehicleManufactoryStatus() const;
    void setVehicleManufactoryStatus(utility::string_t value);
        /// <summary>
    /// max number of sit occupants
    /// </summary>
    utility::string_t getMaxOccupantsQuantity() const;
    void setMaxOccupantsQuantity(utility::string_t value);
        /// <summary>
    /// Lien/restriction type - &#39;0&#39; # No one; - &#39;1&#39; # Alienação Fiduciária; - &#39;2&#39; # Arrendamento Mercantil; - &#39;3&#39; # Reserva de Domínio; - &#39;4&#39; # Penhor de Veículos; - &#39;9&#39; # Other. 
    /// </summary>
    utility::string_t getRestrictionType() const;
    void setRestrictionType(utility::string_t value);
    
protected:
    int32_t m_TpOp;
    utility::string_t m_ChassisNumber;
    utility::string_t m_ColorCode;
    utility::string_t m_ColorName;
    utility::string_t m_CvPower;
    utility::string_t m_CylinderVolumCC;
    utility::string_t m_NetWeight;
    utility::string_t m_GrossWeight;
    utility::string_t m_SerialNumber;
    utility::string_t m_FuelType;
    utility::string_t m_EngineNumber;
    utility::string_t m_Cmt;
    utility::string_t m_LengthBetweenAxis;
    utility::string_t m_ModelYear;
    utility::string_t m_ManufactoryYear;
    utility::string_t m_PaintType;
    utility::string_t m_VehicleRENAVAMType;
    utility::string_t m_SpecieRENAVAMType;
    utility::string_t m_ModelRENAVAMCode;
    utility::string_t m_ColorDENATRANCode;
    utility::string_t m_Vin;
    utility::string_t m_VehicleManufactoryStatus;
    utility::string_t m_MaxOccupantsQuantity;
    utility::string_t m_RestrictionType;
    };

}
}
}
}

#endif /* Vehicle_H_ */
