/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * IcmsTaxConfBase.h
 *
 * 
 */

#ifndef IcmsTaxConfBase_H_
#define IcmsTaxConfBase_H_


#include "ModelBase.h"

#include "StateEnum.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  IcmsTaxConfBase
    : public ModelBase
{
public:
    IcmsTaxConfBase();
    virtual ~IcmsTaxConfBase();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// IcmsTaxConfBase members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<StateEnum> getState() const;
    void setState(std::shared_ptr<StateEnum> value);
        /// <summary>
    /// On sales process inform the CST hat the item linked to this configuration is subject to - &#39;00&#39; # TAXABLE - &#39;20&#39; # TAXABLE WITH BASE DISCOUNT - &#39;40&#39; # EXEMPT - &#39;41&#39; # NOT TAXABLE - &#39;50&#39; # SUSPENDED 
    /// </summary>
    utility::string_t getIcmsCST() const;
    void setIcmsCST(utility::string_t value);
    bool icmsCSTIsSet() const;
    void unsetIcmsCST();
    /// <summary>
    /// Message to add to NF when this configuration is used
    /// </summary>
    utility::string_t getMessageCode() const;
    void setMessageCode(utility::string_t value);
    bool messageCodeIsSet() const;
    void unsetMessageCode();

protected:
    std::shared_ptr<StateEnum> m_State;
    utility::string_t m_IcmsCST;
    bool m_IcmsCSTIsSet;
utility::string_t m_MessageCode;
    bool m_MessageCodeIsSet;
};

}
}
}
}

#endif /* IcmsTaxConfBase_H_ */
