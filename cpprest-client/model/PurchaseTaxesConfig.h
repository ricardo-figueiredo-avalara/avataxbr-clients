/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * PurchaseTaxesConfig.h
 *
 * 
 */

#ifndef PurchaseTaxesConfig_H_
#define PurchaseTaxesConfig_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  PurchaseTaxesConfig
    : public ModelBase
{
public:
    PurchaseTaxesConfig();
    virtual ~PurchaseTaxesConfig();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PurchaseTaxesConfig members

    /// <summary>
    /// ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE&#x3D;0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - &#39;T&#39; # TAXABLE - &#39;N&#39; # NOT TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;S&#39; # SPECIFIC RATE 
    /// </summary>
    utility::string_t getEntityAccruableCOFINSTaxation() const;
    void setEntityAccruableCOFINSTaxation(utility::string_t value);
    bool entityAccruableCOFINSTaxationIsSet() const;
    void unsetEntityAccruableCOFINSTaxation();
    /// <summary>
    /// ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.   This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT 
    /// </summary>
    utility::string_t getEntityAccruableCSLLTaxation() const;
    void setEntityAccruableCSLLTaxation(utility::string_t value);
    bool entityAccruableCSLLTaxationIsSet() const;
    void unsetEntityAccruableCSLLTaxation();
    /// <summary>
    /// ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE&#x3D;0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE - &#39;T&#39; # TAXABLE - &#39;N&#39; # NOT TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;S&#39; # SPECIFIC RATE 
    /// </summary>
    utility::string_t getEntityAccruablePISTaxation() const;
    void setEntityAccruablePISTaxation(utility::string_t value);
    bool entityAccruablePISTaxationIsSet() const;
    void unsetEntityAccruablePISTaxation();
    /// <summary>
    /// This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption. When not Taxable of Seller point of view this field has the reason code.
    /// </summary>
    utility::string_t getAccruableCOFINSExempCodeTaxation() const;
    void setAccruableCOFINSExempCodeTaxation(utility::string_t value);
    bool accruableCOFINSExempCodeTaxationIsSet() const;
    void unsetAccruableCOFINSExempCodeTaxation();
    /// <summary>
    /// This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption. When not Taxable of Seller point of view this field has the reason code.
    /// </summary>
    utility::string_t getAccruablePISExempCodeTaxation() const;
    void setAccruablePISExempCodeTaxation(utility::string_t value);
    bool accruablePISExempCodeTaxationIsSet() const;
    void unsetAccruablePISExempCodeTaxation();
    /// <summary>
    /// When Code is 999 the user system need send the custom reason to Exemption
    /// </summary>
    utility::string_t getAccruablePISExemptReasonTaxation() const;
    void setAccruablePISExemptReasonTaxation(utility::string_t value);
    bool accruablePISExemptReasonTaxationIsSet() const;
    void unsetAccruablePISExemptReasonTaxation();
    /// <summary>
    /// When Code is 999 the user system need send the custom reason to Exemption
    /// </summary>
    utility::string_t getAccruableCOFINSExemptReasonTaxation() const;
    void setAccruableCOFINSExemptReasonTaxation(utility::string_t value);
    bool accruableCOFINSExemptReasonTaxationIsSet() const;
    void unsetAccruableCOFINSExemptReasonTaxation();
    /// <summary>
    /// CSLL no withholding Custom Reason
    /// </summary>
    utility::string_t getAccruableCSLLExemptReasonTaxation() const;
    void setAccruableCSLLExemptReasonTaxation(utility::string_t value);
    bool accruableCSLLExemptReasonTaxationIsSet() const;
    void unsetAccruableCSLLExemptReasonTaxation();
    /// <summary>
    /// Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
    /// </summary>
    bool getWithholdingPIS() const;
    void setWithholdingPIS(bool value);
    bool withholdingPISIsSet() const;
    void unsetWithholdingPIS();
    /// <summary>
    /// Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
    /// </summary>
    bool getWithholdingCOFINS() const;
    void setWithholdingCOFINS(bool value);
    bool withholdingCOFINSIsSet() const;
    void unsetWithholdingCOFINS();
    /// <summary>
    /// Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
    /// </summary>
    bool getWithholdingCSLL() const;
    void setWithholdingCSLL(bool value);
    bool withholdingCSLLIsSet() const;
    void unsetWithholdingCSLL();
    /// <summary>
    /// Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
    /// </summary>
    bool getWithholdingIRRF() const;
    void setWithholdingIRRF(bool value);
    bool withholdingIRRFIsSet() const;
    void unsetWithholdingIRRF();
    /// <summary>
    /// COFINS no withholding Custom Reason
    /// </summary>
    utility::string_t getWithholdCOFINSExemptReasonTaxation() const;
    void setWithholdCOFINSExemptReasonTaxation(utility::string_t value);
    bool withholdCOFINSExemptReasonTaxationIsSet() const;
    void unsetWithholdCOFINSExemptReasonTaxation();
    /// <summary>
    /// CSLL no withholding Custom Reason
    /// </summary>
    utility::string_t getWithholdCSLLExemptReasonTaxation() const;
    void setWithholdCSLLExemptReasonTaxation(utility::string_t value);
    bool withholdCSLLExemptReasonTaxationIsSet() const;
    void unsetWithholdCSLLExemptReasonTaxation();
    /// <summary>
    /// PIS no withholding Custom Reason
    /// </summary>
    utility::string_t getWithholdPISExemptReasonTaxation() const;
    void setWithholdPISExemptReasonTaxation(utility::string_t value);
    bool withholdPISExemptReasonTaxationIsSet() const;
    void unsetWithholdPISExemptReasonTaxation();

protected:
    utility::string_t m_EntityAccruableCOFINSTaxation;
    bool m_EntityAccruableCOFINSTaxationIsSet;
utility::string_t m_EntityAccruableCSLLTaxation;
    bool m_EntityAccruableCSLLTaxationIsSet;
utility::string_t m_EntityAccruablePISTaxation;
    bool m_EntityAccruablePISTaxationIsSet;
utility::string_t m_AccruableCOFINSExempCodeTaxation;
    bool m_AccruableCOFINSExempCodeTaxationIsSet;
utility::string_t m_AccruablePISExempCodeTaxation;
    bool m_AccruablePISExempCodeTaxationIsSet;
utility::string_t m_AccruablePISExemptReasonTaxation;
    bool m_AccruablePISExemptReasonTaxationIsSet;
utility::string_t m_AccruableCOFINSExemptReasonTaxation;
    bool m_AccruableCOFINSExemptReasonTaxationIsSet;
utility::string_t m_AccruableCSLLExemptReasonTaxation;
    bool m_AccruableCSLLExemptReasonTaxationIsSet;
bool m_WithholdingPIS;
    bool m_WithholdingPISIsSet;
bool m_WithholdingCOFINS;
    bool m_WithholdingCOFINSIsSet;
bool m_WithholdingCSLL;
    bool m_WithholdingCSLLIsSet;
bool m_WithholdingIRRF;
    bool m_WithholdingIRRFIsSet;
utility::string_t m_WithholdCOFINSExemptReasonTaxation;
    bool m_WithholdCOFINSExemptReasonTaxationIsSet;
utility::string_t m_WithholdCSLLExemptReasonTaxation;
    bool m_WithholdCSLLExemptReasonTaxationIsSet;
utility::string_t m_WithholdPISExemptReasonTaxation;
    bool m_WithholdPISExemptReasonTaxationIsSet;
};

}
}
}
}

#endif /* PurchaseTaxesConfig_H_ */
