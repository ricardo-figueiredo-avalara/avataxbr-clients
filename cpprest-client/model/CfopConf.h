/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * CfopConf.h
 *
 * 
 */

#ifndef CfopConf_H_
#define CfopConf_H_


#include "ModelBase.h"

#include "IcmsTaxConf.h"
#include "TaxConf.h"
#include <cpprest/details/basic_types.h>
#include "CstIcmsEnum.h"
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  CfopConf
    : public ModelBase
{
public:
    CfopConf();
    virtual ~CfopConf();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CfopConf members

    /// <summary>
    /// main unique identificator
    /// </summary>
    utility::string_t getCode() const;
    void setCode(utility::string_t value);
        /// <summary>
    /// Inform that the process has inventory impact.
    /// </summary>
    bool getStockImpact() const;
    void setStockImpact(bool value);
    bool stockImpactIsSet() const;
    void unsetStockImpact();
    /// <summary>
    /// Inform that the process has financial impact.
    /// </summary>
    bool getFinancialImpact() const;
    void setFinancialImpact(bool value);
    bool financialImpactIsSet() const;
    void unsetFinancialImpact();
    /// <summary>
    /// Inform if this process is subject to IPI taxation on output process - &#39;T&#39;  # TAXABLE - &#39;Z&#39;  # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39;  # EXEMPT - &#39;H&#39;  # SUSPENDED - &#39;N&#39;  # NO TAXABLE     - &#39;I&#39;  # IMMUNE - &#39;O&#39;  # OTHER - &#39;OZ&#39; # OTHER AND ZERO VALUES 
    /// </summary>
    utility::string_t getCstIPI() const;
    void setCstIPI(utility::string_t value);
    bool cstIPIIsSet() const;
    void unsetCstIPI();
    /// <summary>
    /// Legal tax classificação for IPI (enquadramento) When the processo has CST IPI 52 or 54, is mandatory inform Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo&#x3D;mCnJajU4BKU&#x3D; 
    /// </summary>
    utility::string_t getIpiLegalTaxClass() const;
    void setIpiLegalTaxClass(utility::string_t value);
    bool ipiLegalTaxClassIsSet() const;
    void unsetIpiLegalTaxClass();
    /// <summary>
    /// Inform if this item by nature is subject to PIS taxation or exempt - &#39;T&#39; # TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;N&#39; # NO TAXABLE - &#39;O&#39; # OTHER - &#39;OZ&#39;# OTHER AND ZERO VALUES 
    /// </summary>
    utility::string_t getAccruablePISTaxation() const;
    void setAccruablePISTaxation(utility::string_t value);
    bool accruablePISTaxationIsSet() const;
    void unsetAccruablePISTaxation();
    /// <summary>
    /// When exempt, taxable with zero, suspended, not taxable, this field holds the official code number
    /// </summary>
    utility::string_t getPisExemptLegalReasonCode() const;
    void setPisExemptLegalReasonCode(utility::string_t value);
    bool pisExemptLegalReasonCodeIsSet() const;
    void unsetPisExemptLegalReasonCode();
    /// <summary>
    /// When specifi reason, this field has the description
    /// </summary>
    utility::string_t getPisExemptLegalReason() const;
    void setPisExemptLegalReason(utility::string_t value);
    bool pisExemptLegalReasonIsSet() const;
    void unsetPisExemptLegalReason();
    /// <summary>
    /// Inform if this item by nature is subject to COFINS taxation or exempt - &#39;T&#39;  # TAXABLE - &#39;Z&#39;  # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39;  # EXEMPT - &#39;H&#39;  # SUSPENDED - &#39;N&#39;  # NO TAXABLE     - &#39;O&#39;  # OTHER - &#39;OZ&#39; # OTHER AND ZERO VALUES 
    /// </summary>
    utility::string_t getAccruableCOFINSTaxation() const;
    void setAccruableCOFINSTaxation(utility::string_t value);
    bool accruableCOFINSTaxationIsSet() const;
    void unsetAccruableCOFINSTaxation();
    /// <summary>
    /// When exempt, taxable with zero, suspended, not taxable, this field holds the official code number
    /// </summary>
    utility::string_t getCofinsExemptLegalReasonCode() const;
    void setCofinsExemptLegalReasonCode(utility::string_t value);
    bool cofinsExemptLegalReasonCodeIsSet() const;
    void unsetCofinsExemptLegalReasonCode();
    /// <summary>
    /// When specifi reason, this field has the description
    /// </summary>
    utility::string_t getCofinsExemptLegalReason() const;
    void setCofinsExemptLegalReason(utility::string_t value);
    bool cofinsExemptLegalReasonIsSet() const;
    void unsetCofinsExemptLegalReason();
    /// <summary>
    /// Inform that the process allow IPI credit to Input process
    /// </summary>
    bool getAllowIPIcreditWhenInGoing() const;
    void setAllowIPIcreditWhenInGoing(bool value);
    bool allowIPIcreditWhenInGoingIsSet() const;
    void unsetAllowIPIcreditWhenInGoing();
    /// <summary>
    /// the map key is state code
    /// </summary>
    std::vector<std::shared_ptr<IcmsTaxConf>>& getIcmsConf();
    bool icmsConfIsSet() const;
    void unsetIcmsConf();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    void setDescription(utility::string_t value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// inform if the transaction is an operation to internalizing item or value
    /// </summary>
    utility::string_t getWayType() const;
    void setWayType(utility::string_t value);
    bool wayTypeIsSet() const;
    void unsetWayType();
    /// <summary>
    /// CFOP code (tax code operation) when the transactions are within the same state.
    /// </summary>
    int32_t getCodInState() const;
    void setCodInState(int32_t value);
    bool codInStateIsSet() const;
    void unsetCodInState();
    /// <summary>
    /// CFOP code (tax code operation) when the transactions are to another state.
    /// </summary>
    int32_t getCodOtherState() const;
    void setCodOtherState(int32_t value);
    bool codOtherStateIsSet() const;
    void unsetCodOtherState();
    /// <summary>
    /// CFOP code (tax code operation) when the transactions are to another country.
    /// </summary>
    int32_t getCodOtherCountry() const;
    void setCodOtherCountry(int32_t value);
    bool codOtherCountryIsSet() const;
    void unsetCodOtherCountry();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CstIcmsEnum> getCstICMSSameState() const;
    void setCstICMSSameState(std::shared_ptr<CstIcmsEnum> value);
    bool cstICMSSameStateIsSet() const;
    void unsetCstICMSSameState();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CstIcmsEnum> getCstICMSOtherState() const;
    void setCstICMSOtherState(std::shared_ptr<CstIcmsEnum> value);
    bool cstICMSOtherStateIsSet() const;
    void unsetCstICMSOtherState();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CstIcmsEnum> getCstICMSOtherCountry() const;
    void setCstICMSOtherCountry(std::shared_ptr<CstIcmsEnum> value);
    bool cstICMSOtherCountryIsSet() const;
    void unsetCstICMSOtherCountry();
    /// <summary>
    /// this field is used to define right CFOP, one operation type can be specialized to item product, item merchandise or generic
    /// </summary>
    utility::string_t getProductType() const;
    void setProductType(utility::string_t value);
    bool productTypeIsSet() const;
    void unsetProductType();
    /// <summary>
    /// field used to indicate an operation to ICMS tax payer
    /// </summary>
    bool getOperationToTaxPayerOtherState() const;
    void setOperationToTaxPayerOtherState(bool value);
    bool operationToTaxPayerOtherStateIsSet() const;
    void unsetOperationToTaxPayerOtherState();
    /// <summary>
    /// field used to indicate an operation to items sibject to ICMS-ST
    /// </summary>
    bool getOperationWithST() const;
    void setOperationWithST(bool value);
    bool operationWithSTIsSet() const;
    void unsetOperationWithST();
    /// <summary>
    /// field used to indicate an operation to free zone
    /// </summary>
    bool getOperationToFreeZone() const;
    void setOperationToFreeZone(bool value);
    bool operationToFreeZoneIsSet() const;
    void unsetOperationToFreeZone();
    /// <summary>
    /// field used to indicate an operation to some product class specifically
    /// </summary>
    utility::string_t getSpecificForProductClass() const;
    void setSpecificForProductClass(utility::string_t value);
    bool specificForProductClassIsSet() const;
    void unsetSpecificForProductClass();

protected:
    utility::string_t m_Code;
    bool m_StockImpact;
    bool m_StockImpactIsSet;
bool m_FinancialImpact;
    bool m_FinancialImpactIsSet;
utility::string_t m_CstIPI;
    bool m_CstIPIIsSet;
utility::string_t m_IpiLegalTaxClass;
    bool m_IpiLegalTaxClassIsSet;
utility::string_t m_AccruablePISTaxation;
    bool m_AccruablePISTaxationIsSet;
utility::string_t m_PisExemptLegalReasonCode;
    bool m_PisExemptLegalReasonCodeIsSet;
utility::string_t m_PisExemptLegalReason;
    bool m_PisExemptLegalReasonIsSet;
utility::string_t m_AccruableCOFINSTaxation;
    bool m_AccruableCOFINSTaxationIsSet;
utility::string_t m_CofinsExemptLegalReasonCode;
    bool m_CofinsExemptLegalReasonCodeIsSet;
utility::string_t m_CofinsExemptLegalReason;
    bool m_CofinsExemptLegalReasonIsSet;
bool m_AllowIPIcreditWhenInGoing;
    bool m_AllowIPIcreditWhenInGoingIsSet;
std::vector<std::shared_ptr<IcmsTaxConf>> m_IcmsConf;
    bool m_IcmsConfIsSet;
utility::string_t m_Name;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
utility::string_t m_WayType;
    bool m_WayTypeIsSet;
int32_t m_CodInState;
    bool m_CodInStateIsSet;
int32_t m_CodOtherState;
    bool m_CodOtherStateIsSet;
int32_t m_CodOtherCountry;
    bool m_CodOtherCountryIsSet;
std::shared_ptr<CstIcmsEnum> m_CstICMSSameState;
    bool m_CstICMSSameStateIsSet;
std::shared_ptr<CstIcmsEnum> m_CstICMSOtherState;
    bool m_CstICMSOtherStateIsSet;
std::shared_ptr<CstIcmsEnum> m_CstICMSOtherCountry;
    bool m_CstICMSOtherCountryIsSet;
utility::string_t m_ProductType;
    bool m_ProductTypeIsSet;
bool m_OperationToTaxPayerOtherState;
    bool m_OperationToTaxPayerOtherStateIsSet;
bool m_OperationWithST;
    bool m_OperationWithSTIsSet;
bool m_OperationToFreeZone;
    bool m_OperationToFreeZoneIsSet;
utility::string_t m_SpecificForProductClass;
    bool m_SpecificForProductClassIsSet;
};

}
}
}
}

#endif /* CfopConf_H_ */
