/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ItemGoods.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ItemGoods::ItemGoods()
{
    m_CompanyId = nullptr;
    m_Code = U("");
    m_Agast = U("");
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_SealCode = U("");
    m_NFCI = U("");
    m_NFCIIsSet = false;
    m_IsIcmsStSubstitute = false;
    m_IsIcmsStSubstituteIsSet = false;
    m_Source = U("");
    m_SourceIsSet = false;
    m_ProductType = U("");
    m_ProductTypeIsSet = false;
    m_ManufacturerEquivalent = false;
    m_ManufacturerEquivalentIsSet = false;
    m_AppropriateIPIcreditWhenInGoing = false;
    m_AppropriateIPIcreditWhenInGoingIsSet = false;
    m_UsuallyAppropriatePISCOFINSCredit = false;
    m_UsuallyAppropriatePISCOFINSCreditIsSet = false;
    m_IsPisCofinsEstimatedCredit = false;
    m_IsPisCofinsEstimatedCreditIsSet = false;
    m_PiscofinsRevenueType = U("");
    m_PiscofinsRevenueTypeIsSet = false;
    m_IcmsBaseDiscountForMonoPhaseSocialContr = 0.0;
    m_IcmsBaseDiscountForMonoPhaseSocialContrIsSet = false;
    m_Cean = U("");
    m_CeanIsSet = false;
    m_Nve = U("");
    m_NveIsSet = false;
    m_SalesUnit = U("");
    m_SalesUnitIsSet = false;
    m_SalesUnitIPIfactor = 0.0;
    m_SalesUnitIPIfactorIsSet = false;
    m_SalesUnitIcmsfactor = 0.0;
    m_SalesUnitIcmsfactorIsSet = false;
    m_SalesUnitIcmsStfactor = 0.0;
    m_SalesUnitIcmsStfactorIsSet = false;
    m_SalesUnitPisCofinsfactor = 0.0;
    m_SalesUnitPisCofinsfactorIsSet = false;
    m_PurchaseUnit = U("");
    m_PurchaseUnitIsSet = false;
    m_PurchaseUnitIPIfactor = 0.0;
    m_PurchaseUnitIPIfactorIsSet = false;
    m_PurchaseUnitIcmsfactor = 0.0;
    m_PurchaseUnitIcmsfactorIsSet = false;
    m_PurchaseUnitIcmsStfactor = 0.0;
    m_PurchaseUnitIcmsStfactorIsSet = false;
    m_PurchaseUnitPisCofinsfactor = 0.0;
    m_PurchaseUnitPisCofinsfactorIsSet = false;
    m_FirstUse = false;
    m_FirstUseIsSet = false;
    
}

ItemGoods::~ItemGoods()
{
}

void ItemGoods::validate()
{
    // TODO: implement validation
}

web::json::value ItemGoods::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("companyId")] = ModelBase::toJson(m_CompanyId);
    val[U("code")] = ModelBase::toJson(m_Code);
    val[U("agast")] = ModelBase::toJson(m_Agast);
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    val[U("sealCode")] = ModelBase::toJson(m_SealCode);
    if(m_NFCIIsSet)
    {
        val[U("nFCI")] = ModelBase::toJson(m_NFCI);
    }
    if(m_IsIcmsStSubstituteIsSet)
    {
        val[U("isIcmsStSubstitute")] = ModelBase::toJson(m_IsIcmsStSubstitute);
    }
    if(m_SourceIsSet)
    {
        val[U("source")] = ModelBase::toJson(m_Source);
    }
    if(m_ProductTypeIsSet)
    {
        val[U("productType")] = ModelBase::toJson(m_ProductType);
    }
    if(m_ManufacturerEquivalentIsSet)
    {
        val[U("manufacturerEquivalent")] = ModelBase::toJson(m_ManufacturerEquivalent);
    }
    if(m_AppropriateIPIcreditWhenInGoingIsSet)
    {
        val[U("appropriateIPIcreditWhenInGoing")] = ModelBase::toJson(m_AppropriateIPIcreditWhenInGoing);
    }
    if(m_UsuallyAppropriatePISCOFINSCreditIsSet)
    {
        val[U("usuallyAppropriatePISCOFINSCredit")] = ModelBase::toJson(m_UsuallyAppropriatePISCOFINSCredit);
    }
    if(m_IsPisCofinsEstimatedCreditIsSet)
    {
        val[U("isPisCofinsEstimatedCredit")] = ModelBase::toJson(m_IsPisCofinsEstimatedCredit);
    }
    if(m_PiscofinsRevenueTypeIsSet)
    {
        val[U("piscofinsRevenueType")] = ModelBase::toJson(m_PiscofinsRevenueType);
    }
    if(m_IcmsBaseDiscountForMonoPhaseSocialContrIsSet)
    {
        val[U("icmsBaseDiscountForMonoPhaseSocialContr")] = ModelBase::toJson(m_IcmsBaseDiscountForMonoPhaseSocialContr);
    }
    if(m_CeanIsSet)
    {
        val[U("cean")] = ModelBase::toJson(m_Cean);
    }
    if(m_NveIsSet)
    {
        val[U("nve")] = ModelBase::toJson(m_Nve);
    }
    if(m_SalesUnitIsSet)
    {
        val[U("salesUnit")] = ModelBase::toJson(m_SalesUnit);
    }
    if(m_SalesUnitIPIfactorIsSet)
    {
        val[U("salesUnitIPIfactor")] = ModelBase::toJson(m_SalesUnitIPIfactor);
    }
    if(m_SalesUnitIcmsfactorIsSet)
    {
        val[U("salesUnitIcmsfactor")] = ModelBase::toJson(m_SalesUnitIcmsfactor);
    }
    if(m_SalesUnitIcmsStfactorIsSet)
    {
        val[U("salesUnitIcmsStfactor")] = ModelBase::toJson(m_SalesUnitIcmsStfactor);
    }
    if(m_SalesUnitPisCofinsfactorIsSet)
    {
        val[U("salesUnitPisCofinsfactor")] = ModelBase::toJson(m_SalesUnitPisCofinsfactor);
    }
    if(m_PurchaseUnitIsSet)
    {
        val[U("purchaseUnit")] = ModelBase::toJson(m_PurchaseUnit);
    }
    if(m_PurchaseUnitIPIfactorIsSet)
    {
        val[U("purchaseUnitIPIfactor")] = ModelBase::toJson(m_PurchaseUnitIPIfactor);
    }
    if(m_PurchaseUnitIcmsfactorIsSet)
    {
        val[U("purchaseUnitIcmsfactor")] = ModelBase::toJson(m_PurchaseUnitIcmsfactor);
    }
    if(m_PurchaseUnitIcmsStfactorIsSet)
    {
        val[U("purchaseUnitIcmsStfactor")] = ModelBase::toJson(m_PurchaseUnitIcmsStfactor);
    }
    if(m_PurchaseUnitPisCofinsfactorIsSet)
    {
        val[U("purchaseUnitPisCofinsfactor")] = ModelBase::toJson(m_PurchaseUnitPisCofinsfactor);
    }
    if(m_FirstUseIsSet)
    {
        val[U("firstUse")] = ModelBase::toJson(m_FirstUse);
    }
    

    return val;
}

void ItemGoods::fromJson(web::json::value& val)
{
    setCompanyId(ModelBase::stringFromJson(val[U("companyId")]));
    setCode(ModelBase::stringFromJson(val[U("code")]));
    setAgast(ModelBase::stringFromJson(val[U("agast")]));
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
        
    }
    setSealCode(ModelBase::stringFromJson(val[U("sealCode")]));
    if(val.has_field(U("nFCI")))
    {
        setNFCI(ModelBase::stringFromJson(val[U("nFCI")]));
        
    }
    if(val.has_field(U("isIcmsStSubstitute")))
    {
        setIsIcmsStSubstitute(ModelBase::boolFromJson(val[U("isIcmsStSubstitute")]));
    }
    if(val.has_field(U("source")))
    {
        setSource(ModelBase::stringFromJson(val[U("source")]));
        
    }
    if(val.has_field(U("productType")))
    {
        setProductType(ModelBase::stringFromJson(val[U("productType")]));
        
    }
    if(val.has_field(U("manufacturerEquivalent")))
    {
        setManufacturerEquivalent(ModelBase::boolFromJson(val[U("manufacturerEquivalent")]));
    }
    if(val.has_field(U("appropriateIPIcreditWhenInGoing")))
    {
        setAppropriateIPIcreditWhenInGoing(ModelBase::boolFromJson(val[U("appropriateIPIcreditWhenInGoing")]));
    }
    if(val.has_field(U("usuallyAppropriatePISCOFINSCredit")))
    {
        setUsuallyAppropriatePISCOFINSCredit(ModelBase::boolFromJson(val[U("usuallyAppropriatePISCOFINSCredit")]));
    }
    if(val.has_field(U("isPisCofinsEstimatedCredit")))
    {
        setIsPisCofinsEstimatedCredit(ModelBase::boolFromJson(val[U("isPisCofinsEstimatedCredit")]));
    }
    if(val.has_field(U("piscofinsRevenueType")))
    {
        setPiscofinsRevenueType(ModelBase::stringFromJson(val[U("piscofinsRevenueType")]));
        
    }
    if(val.has_field(U("icmsBaseDiscountForMonoPhaseSocialContr")))
    {
        setIcmsBaseDiscountForMonoPhaseSocialContr(ModelBase::doubleFromJson(val[U("icmsBaseDiscountForMonoPhaseSocialContr")]));
    }
    if(val.has_field(U("cean")))
    {
        setCean(ModelBase::stringFromJson(val[U("cean")]));
        
    }
    if(val.has_field(U("nve")))
    {
        setNve(ModelBase::stringFromJson(val[U("nve")]));
        
    }
    if(val.has_field(U("salesUnit")))
    {
        setSalesUnit(ModelBase::stringFromJson(val[U("salesUnit")]));
        
    }
    if(val.has_field(U("salesUnitIPIfactor")))
    {
        setSalesUnitIPIfactor(ModelBase::doubleFromJson(val[U("salesUnitIPIfactor")]));
    }
    if(val.has_field(U("salesUnitIcmsfactor")))
    {
        setSalesUnitIcmsfactor(ModelBase::doubleFromJson(val[U("salesUnitIcmsfactor")]));
    }
    if(val.has_field(U("salesUnitIcmsStfactor")))
    {
        setSalesUnitIcmsStfactor(ModelBase::doubleFromJson(val[U("salesUnitIcmsStfactor")]));
    }
    if(val.has_field(U("salesUnitPisCofinsfactor")))
    {
        setSalesUnitPisCofinsfactor(ModelBase::doubleFromJson(val[U("salesUnitPisCofinsfactor")]));
    }
    if(val.has_field(U("purchaseUnit")))
    {
        setPurchaseUnit(ModelBase::stringFromJson(val[U("purchaseUnit")]));
        
    }
    if(val.has_field(U("purchaseUnitIPIfactor")))
    {
        setPurchaseUnitIPIfactor(ModelBase::doubleFromJson(val[U("purchaseUnitIPIfactor")]));
    }
    if(val.has_field(U("purchaseUnitIcmsfactor")))
    {
        setPurchaseUnitIcmsfactor(ModelBase::doubleFromJson(val[U("purchaseUnitIcmsfactor")]));
    }
    if(val.has_field(U("purchaseUnitIcmsStfactor")))
    {
        setPurchaseUnitIcmsStfactor(ModelBase::doubleFromJson(val[U("purchaseUnitIcmsStfactor")]));
    }
    if(val.has_field(U("purchaseUnitPisCofinsfactor")))
    {
        setPurchaseUnitPisCofinsfactor(ModelBase::doubleFromJson(val[U("purchaseUnitPisCofinsfactor")]));
    }
    if(val.has_field(U("firstUse")))
    {
        setFirstUse(ModelBase::boolFromJson(val[U("firstUse")]));
    }
    
}

void ItemGoods::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("companyId"), m_CompanyId));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("code"), m_Code));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("agast"), m_Agast));
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("sealCode"), m_SealCode));
    if(m_NFCIIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("nFCI"), m_NFCI));
        
    }
    if(m_IsIcmsStSubstituteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("isIcmsStSubstitute"), m_IsIcmsStSubstitute));
    }
    if(m_SourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("source"), m_Source));
        
    }
    if(m_ProductTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("productType"), m_ProductType));
        
    }
    if(m_ManufacturerEquivalentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("manufacturerEquivalent"), m_ManufacturerEquivalent));
    }
    if(m_AppropriateIPIcreditWhenInGoingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("appropriateIPIcreditWhenInGoing"), m_AppropriateIPIcreditWhenInGoing));
    }
    if(m_UsuallyAppropriatePISCOFINSCreditIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("usuallyAppropriatePISCOFINSCredit"), m_UsuallyAppropriatePISCOFINSCredit));
    }
    if(m_IsPisCofinsEstimatedCreditIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("isPisCofinsEstimatedCredit"), m_IsPisCofinsEstimatedCredit));
    }
    if(m_PiscofinsRevenueTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("piscofinsRevenueType"), m_PiscofinsRevenueType));
        
    }
    if(m_IcmsBaseDiscountForMonoPhaseSocialContrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("icmsBaseDiscountForMonoPhaseSocialContr"), m_IcmsBaseDiscountForMonoPhaseSocialContr));
    }
    if(m_CeanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cean"), m_Cean));
        
    }
    if(m_NveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("nve"), m_Nve));
        
    }
    if(m_SalesUnitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("salesUnit"), m_SalesUnit));
        
    }
    if(m_SalesUnitIPIfactorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("salesUnitIPIfactor"), m_SalesUnitIPIfactor));
    }
    if(m_SalesUnitIcmsfactorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("salesUnitIcmsfactor"), m_SalesUnitIcmsfactor));
    }
    if(m_SalesUnitIcmsStfactorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("salesUnitIcmsStfactor"), m_SalesUnitIcmsStfactor));
    }
    if(m_SalesUnitPisCofinsfactorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("salesUnitPisCofinsfactor"), m_SalesUnitPisCofinsfactor));
    }
    if(m_PurchaseUnitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("purchaseUnit"), m_PurchaseUnit));
        
    }
    if(m_PurchaseUnitIPIfactorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("purchaseUnitIPIfactor"), m_PurchaseUnitIPIfactor));
    }
    if(m_PurchaseUnitIcmsfactorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("purchaseUnitIcmsfactor"), m_PurchaseUnitIcmsfactor));
    }
    if(m_PurchaseUnitIcmsStfactorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("purchaseUnitIcmsStfactor"), m_PurchaseUnitIcmsStfactor));
    }
    if(m_PurchaseUnitPisCofinsfactorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("purchaseUnitPisCofinsfactor"), m_PurchaseUnitPisCofinsfactor));
    }
    if(m_FirstUseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("firstUse"), m_FirstUse));
    }
    
}

void ItemGoods::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setCompanyId(ModelBase::stringFromHttpContent(multipart->getContent(U("companyId"))));
    setCode(ModelBase::stringFromHttpContent(multipart->getContent(U("code"))));
    setAgast(ModelBase::stringFromHttpContent(multipart->getContent(U("agast"))));
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
        
    }
    setSealCode(ModelBase::stringFromHttpContent(multipart->getContent(U("sealCode"))));
    if(multipart->hasContent(U("nFCI")))
    {
        setNFCI(ModelBase::stringFromHttpContent(multipart->getContent(U("nFCI"))));
        
    }
    if(multipart->hasContent(U("isIcmsStSubstitute")))
    {
        setIsIcmsStSubstitute(ModelBase::boolFromHttpContent(multipart->getContent(U("isIcmsStSubstitute"))));
    }
    if(multipart->hasContent(U("source")))
    {
        setSource(ModelBase::stringFromHttpContent(multipart->getContent(U("source"))));
        
    }
    if(multipart->hasContent(U("productType")))
    {
        setProductType(ModelBase::stringFromHttpContent(multipart->getContent(U("productType"))));
        
    }
    if(multipart->hasContent(U("manufacturerEquivalent")))
    {
        setManufacturerEquivalent(ModelBase::boolFromHttpContent(multipart->getContent(U("manufacturerEquivalent"))));
    }
    if(multipart->hasContent(U("appropriateIPIcreditWhenInGoing")))
    {
        setAppropriateIPIcreditWhenInGoing(ModelBase::boolFromHttpContent(multipart->getContent(U("appropriateIPIcreditWhenInGoing"))));
    }
    if(multipart->hasContent(U("usuallyAppropriatePISCOFINSCredit")))
    {
        setUsuallyAppropriatePISCOFINSCredit(ModelBase::boolFromHttpContent(multipart->getContent(U("usuallyAppropriatePISCOFINSCredit"))));
    }
    if(multipart->hasContent(U("isPisCofinsEstimatedCredit")))
    {
        setIsPisCofinsEstimatedCredit(ModelBase::boolFromHttpContent(multipart->getContent(U("isPisCofinsEstimatedCredit"))));
    }
    if(multipart->hasContent(U("piscofinsRevenueType")))
    {
        setPiscofinsRevenueType(ModelBase::stringFromHttpContent(multipart->getContent(U("piscofinsRevenueType"))));
        
    }
    if(multipart->hasContent(U("icmsBaseDiscountForMonoPhaseSocialContr")))
    {
        setIcmsBaseDiscountForMonoPhaseSocialContr(ModelBase::doubleFromHttpContent(multipart->getContent(U("icmsBaseDiscountForMonoPhaseSocialContr"))));
    }
    if(multipart->hasContent(U("cean")))
    {
        setCean(ModelBase::stringFromHttpContent(multipart->getContent(U("cean"))));
        
    }
    if(multipart->hasContent(U("nve")))
    {
        setNve(ModelBase::stringFromHttpContent(multipart->getContent(U("nve"))));
        
    }
    if(multipart->hasContent(U("salesUnit")))
    {
        setSalesUnit(ModelBase::stringFromHttpContent(multipart->getContent(U("salesUnit"))));
        
    }
    if(multipart->hasContent(U("salesUnitIPIfactor")))
    {
        setSalesUnitIPIfactor(ModelBase::doubleFromHttpContent(multipart->getContent(U("salesUnitIPIfactor"))));
    }
    if(multipart->hasContent(U("salesUnitIcmsfactor")))
    {
        setSalesUnitIcmsfactor(ModelBase::doubleFromHttpContent(multipart->getContent(U("salesUnitIcmsfactor"))));
    }
    if(multipart->hasContent(U("salesUnitIcmsStfactor")))
    {
        setSalesUnitIcmsStfactor(ModelBase::doubleFromHttpContent(multipart->getContent(U("salesUnitIcmsStfactor"))));
    }
    if(multipart->hasContent(U("salesUnitPisCofinsfactor")))
    {
        setSalesUnitPisCofinsfactor(ModelBase::doubleFromHttpContent(multipart->getContent(U("salesUnitPisCofinsfactor"))));
    }
    if(multipart->hasContent(U("purchaseUnit")))
    {
        setPurchaseUnit(ModelBase::stringFromHttpContent(multipart->getContent(U("purchaseUnit"))));
        
    }
    if(multipart->hasContent(U("purchaseUnitIPIfactor")))
    {
        setPurchaseUnitIPIfactor(ModelBase::doubleFromHttpContent(multipart->getContent(U("purchaseUnitIPIfactor"))));
    }
    if(multipart->hasContent(U("purchaseUnitIcmsfactor")))
    {
        setPurchaseUnitIcmsfactor(ModelBase::doubleFromHttpContent(multipart->getContent(U("purchaseUnitIcmsfactor"))));
    }
    if(multipart->hasContent(U("purchaseUnitIcmsStfactor")))
    {
        setPurchaseUnitIcmsStfactor(ModelBase::doubleFromHttpContent(multipart->getContent(U("purchaseUnitIcmsStfactor"))));
    }
    if(multipart->hasContent(U("purchaseUnitPisCofinsfactor")))
    {
        setPurchaseUnitPisCofinsfactor(ModelBase::doubleFromHttpContent(multipart->getContent(U("purchaseUnitPisCofinsfactor"))));
    }
    if(multipart->hasContent(U("firstUse")))
    {
        setFirstUse(ModelBase::boolFromHttpContent(multipart->getContent(U("firstUse"))));
    }
    
}


std::shared_ptr<UUID> ItemGoods::getCompanyId() const
{
    return m_CompanyId;
}
void ItemGoods::setCompanyId(std::shared_ptr<UUID> value)
{
    m_CompanyId = value;
    
}
utility::string_t ItemGoods::getCode() const
{
    return m_Code;
}
void ItemGoods::setCode(utility::string_t value)
{
    m_Code = value;
    
}
utility::string_t ItemGoods::getAgast() const
{
    return m_Agast;
}
void ItemGoods::setAgast(utility::string_t value)
{
    m_Agast = value;
    
}
utility::string_t ItemGoods::getDescription() const
{
    return m_Description;
}
void ItemGoods::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool ItemGoods::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void ItemGoods::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t ItemGoods::getSealCode() const
{
    return m_SealCode;
}
void ItemGoods::setSealCode(utility::string_t value)
{
    m_SealCode = value;
    
}
utility::string_t ItemGoods::getNFCI() const
{
    return m_NFCI;
}
void ItemGoods::setNFCI(utility::string_t value)
{
    m_NFCI = value;
    m_NFCIIsSet = true;
}
bool ItemGoods::nFCIIsSet() const
{
    return m_NFCIIsSet;
}
void ItemGoods::unsetNFCI()
{
    m_NFCIIsSet = false;
}
bool ItemGoods::getIsIcmsStSubstitute() const
{
    return m_IsIcmsStSubstitute;
}
void ItemGoods::setIsIcmsStSubstitute(bool value)
{
    m_IsIcmsStSubstitute = value;
    m_IsIcmsStSubstituteIsSet = true;
}
bool ItemGoods::isIcmsStSubstituteIsSet() const
{
    return m_IsIcmsStSubstituteIsSet;
}
void ItemGoods::unsetIsIcmsStSubstitute()
{
    m_IsIcmsStSubstituteIsSet = false;
}
utility::string_t ItemGoods::getSource() const
{
    return m_Source;
}
void ItemGoods::setSource(utility::string_t value)
{
    m_Source = value;
    m_SourceIsSet = true;
}
bool ItemGoods::sourceIsSet() const
{
    return m_SourceIsSet;
}
void ItemGoods::unsetSource()
{
    m_SourceIsSet = false;
}
utility::string_t ItemGoods::getProductType() const
{
    return m_ProductType;
}
void ItemGoods::setProductType(utility::string_t value)
{
    m_ProductType = value;
    m_ProductTypeIsSet = true;
}
bool ItemGoods::productTypeIsSet() const
{
    return m_ProductTypeIsSet;
}
void ItemGoods::unsetProductType()
{
    m_ProductTypeIsSet = false;
}
bool ItemGoods::getManufacturerEquivalent() const
{
    return m_ManufacturerEquivalent;
}
void ItemGoods::setManufacturerEquivalent(bool value)
{
    m_ManufacturerEquivalent = value;
    m_ManufacturerEquivalentIsSet = true;
}
bool ItemGoods::manufacturerEquivalentIsSet() const
{
    return m_ManufacturerEquivalentIsSet;
}
void ItemGoods::unsetManufacturerEquivalent()
{
    m_ManufacturerEquivalentIsSet = false;
}
bool ItemGoods::getAppropriateIPIcreditWhenInGoing() const
{
    return m_AppropriateIPIcreditWhenInGoing;
}
void ItemGoods::setAppropriateIPIcreditWhenInGoing(bool value)
{
    m_AppropriateIPIcreditWhenInGoing = value;
    m_AppropriateIPIcreditWhenInGoingIsSet = true;
}
bool ItemGoods::appropriateIPIcreditWhenInGoingIsSet() const
{
    return m_AppropriateIPIcreditWhenInGoingIsSet;
}
void ItemGoods::unsetAppropriateIPIcreditWhenInGoing()
{
    m_AppropriateIPIcreditWhenInGoingIsSet = false;
}
bool ItemGoods::getUsuallyAppropriatePISCOFINSCredit() const
{
    return m_UsuallyAppropriatePISCOFINSCredit;
}
void ItemGoods::setUsuallyAppropriatePISCOFINSCredit(bool value)
{
    m_UsuallyAppropriatePISCOFINSCredit = value;
    m_UsuallyAppropriatePISCOFINSCreditIsSet = true;
}
bool ItemGoods::usuallyAppropriatePISCOFINSCreditIsSet() const
{
    return m_UsuallyAppropriatePISCOFINSCreditIsSet;
}
void ItemGoods::unsetUsuallyAppropriatePISCOFINSCredit()
{
    m_UsuallyAppropriatePISCOFINSCreditIsSet = false;
}
bool ItemGoods::getIsPisCofinsEstimatedCredit() const
{
    return m_IsPisCofinsEstimatedCredit;
}
void ItemGoods::setIsPisCofinsEstimatedCredit(bool value)
{
    m_IsPisCofinsEstimatedCredit = value;
    m_IsPisCofinsEstimatedCreditIsSet = true;
}
bool ItemGoods::isPisCofinsEstimatedCreditIsSet() const
{
    return m_IsPisCofinsEstimatedCreditIsSet;
}
void ItemGoods::unsetIsPisCofinsEstimatedCredit()
{
    m_IsPisCofinsEstimatedCreditIsSet = false;
}
utility::string_t ItemGoods::getPiscofinsRevenueType() const
{
    return m_PiscofinsRevenueType;
}
void ItemGoods::setPiscofinsRevenueType(utility::string_t value)
{
    m_PiscofinsRevenueType = value;
    m_PiscofinsRevenueTypeIsSet = true;
}
bool ItemGoods::piscofinsRevenueTypeIsSet() const
{
    return m_PiscofinsRevenueTypeIsSet;
}
void ItemGoods::unsetPiscofinsRevenueType()
{
    m_PiscofinsRevenueTypeIsSet = false;
}
double ItemGoods::getIcmsBaseDiscountForMonoPhaseSocialContr() const
{
    return m_IcmsBaseDiscountForMonoPhaseSocialContr;
}
void ItemGoods::setIcmsBaseDiscountForMonoPhaseSocialContr(double value)
{
    m_IcmsBaseDiscountForMonoPhaseSocialContr = value;
    m_IcmsBaseDiscountForMonoPhaseSocialContrIsSet = true;
}
bool ItemGoods::icmsBaseDiscountForMonoPhaseSocialContrIsSet() const
{
    return m_IcmsBaseDiscountForMonoPhaseSocialContrIsSet;
}
void ItemGoods::unsetIcmsBaseDiscountForMonoPhaseSocialContr()
{
    m_IcmsBaseDiscountForMonoPhaseSocialContrIsSet = false;
}
utility::string_t ItemGoods::getCean() const
{
    return m_Cean;
}
void ItemGoods::setCean(utility::string_t value)
{
    m_Cean = value;
    m_CeanIsSet = true;
}
bool ItemGoods::ceanIsSet() const
{
    return m_CeanIsSet;
}
void ItemGoods::unsetCean()
{
    m_CeanIsSet = false;
}
utility::string_t ItemGoods::getNve() const
{
    return m_Nve;
}
void ItemGoods::setNve(utility::string_t value)
{
    m_Nve = value;
    m_NveIsSet = true;
}
bool ItemGoods::nveIsSet() const
{
    return m_NveIsSet;
}
void ItemGoods::unsetNve()
{
    m_NveIsSet = false;
}
utility::string_t ItemGoods::getSalesUnit() const
{
    return m_SalesUnit;
}
void ItemGoods::setSalesUnit(utility::string_t value)
{
    m_SalesUnit = value;
    m_SalesUnitIsSet = true;
}
bool ItemGoods::salesUnitIsSet() const
{
    return m_SalesUnitIsSet;
}
void ItemGoods::unsetSalesUnit()
{
    m_SalesUnitIsSet = false;
}
double ItemGoods::getSalesUnitIPIfactor() const
{
    return m_SalesUnitIPIfactor;
}
void ItemGoods::setSalesUnitIPIfactor(double value)
{
    m_SalesUnitIPIfactor = value;
    m_SalesUnitIPIfactorIsSet = true;
}
bool ItemGoods::salesUnitIPIfactorIsSet() const
{
    return m_SalesUnitIPIfactorIsSet;
}
void ItemGoods::unsetSalesUnitIPIfactor()
{
    m_SalesUnitIPIfactorIsSet = false;
}
double ItemGoods::getSalesUnitIcmsfactor() const
{
    return m_SalesUnitIcmsfactor;
}
void ItemGoods::setSalesUnitIcmsfactor(double value)
{
    m_SalesUnitIcmsfactor = value;
    m_SalesUnitIcmsfactorIsSet = true;
}
bool ItemGoods::salesUnitIcmsfactorIsSet() const
{
    return m_SalesUnitIcmsfactorIsSet;
}
void ItemGoods::unsetSalesUnitIcmsfactor()
{
    m_SalesUnitIcmsfactorIsSet = false;
}
double ItemGoods::getSalesUnitIcmsStfactor() const
{
    return m_SalesUnitIcmsStfactor;
}
void ItemGoods::setSalesUnitIcmsStfactor(double value)
{
    m_SalesUnitIcmsStfactor = value;
    m_SalesUnitIcmsStfactorIsSet = true;
}
bool ItemGoods::salesUnitIcmsStfactorIsSet() const
{
    return m_SalesUnitIcmsStfactorIsSet;
}
void ItemGoods::unsetSalesUnitIcmsStfactor()
{
    m_SalesUnitIcmsStfactorIsSet = false;
}
double ItemGoods::getSalesUnitPisCofinsfactor() const
{
    return m_SalesUnitPisCofinsfactor;
}
void ItemGoods::setSalesUnitPisCofinsfactor(double value)
{
    m_SalesUnitPisCofinsfactor = value;
    m_SalesUnitPisCofinsfactorIsSet = true;
}
bool ItemGoods::salesUnitPisCofinsfactorIsSet() const
{
    return m_SalesUnitPisCofinsfactorIsSet;
}
void ItemGoods::unsetSalesUnitPisCofinsfactor()
{
    m_SalesUnitPisCofinsfactorIsSet = false;
}
utility::string_t ItemGoods::getPurchaseUnit() const
{
    return m_PurchaseUnit;
}
void ItemGoods::setPurchaseUnit(utility::string_t value)
{
    m_PurchaseUnit = value;
    m_PurchaseUnitIsSet = true;
}
bool ItemGoods::purchaseUnitIsSet() const
{
    return m_PurchaseUnitIsSet;
}
void ItemGoods::unsetPurchaseUnit()
{
    m_PurchaseUnitIsSet = false;
}
double ItemGoods::getPurchaseUnitIPIfactor() const
{
    return m_PurchaseUnitIPIfactor;
}
void ItemGoods::setPurchaseUnitIPIfactor(double value)
{
    m_PurchaseUnitIPIfactor = value;
    m_PurchaseUnitIPIfactorIsSet = true;
}
bool ItemGoods::purchaseUnitIPIfactorIsSet() const
{
    return m_PurchaseUnitIPIfactorIsSet;
}
void ItemGoods::unsetPurchaseUnitIPIfactor()
{
    m_PurchaseUnitIPIfactorIsSet = false;
}
double ItemGoods::getPurchaseUnitIcmsfactor() const
{
    return m_PurchaseUnitIcmsfactor;
}
void ItemGoods::setPurchaseUnitIcmsfactor(double value)
{
    m_PurchaseUnitIcmsfactor = value;
    m_PurchaseUnitIcmsfactorIsSet = true;
}
bool ItemGoods::purchaseUnitIcmsfactorIsSet() const
{
    return m_PurchaseUnitIcmsfactorIsSet;
}
void ItemGoods::unsetPurchaseUnitIcmsfactor()
{
    m_PurchaseUnitIcmsfactorIsSet = false;
}
double ItemGoods::getPurchaseUnitIcmsStfactor() const
{
    return m_PurchaseUnitIcmsStfactor;
}
void ItemGoods::setPurchaseUnitIcmsStfactor(double value)
{
    m_PurchaseUnitIcmsStfactor = value;
    m_PurchaseUnitIcmsStfactorIsSet = true;
}
bool ItemGoods::purchaseUnitIcmsStfactorIsSet() const
{
    return m_PurchaseUnitIcmsStfactorIsSet;
}
void ItemGoods::unsetPurchaseUnitIcmsStfactor()
{
    m_PurchaseUnitIcmsStfactorIsSet = false;
}
double ItemGoods::getPurchaseUnitPisCofinsfactor() const
{
    return m_PurchaseUnitPisCofinsfactor;
}
void ItemGoods::setPurchaseUnitPisCofinsfactor(double value)
{
    m_PurchaseUnitPisCofinsfactor = value;
    m_PurchaseUnitPisCofinsfactorIsSet = true;
}
bool ItemGoods::purchaseUnitPisCofinsfactorIsSet() const
{
    return m_PurchaseUnitPisCofinsfactorIsSet;
}
void ItemGoods::unsetPurchaseUnitPisCofinsfactor()
{
    m_PurchaseUnitPisCofinsfactorIsSet = false;
}
bool ItemGoods::getFirstUse() const
{
    return m_FirstUse;
}
void ItemGoods::setFirstUse(bool value)
{
    m_FirstUse = value;
    m_FirstUseIsSet = true;
}
bool ItemGoods::firstUseIsSet() const
{
    return m_FirstUseIsSet;
}
void ItemGoods::unsetFirstUse()
{
    m_FirstUseIsSet = false;
}

}
}
}
}

