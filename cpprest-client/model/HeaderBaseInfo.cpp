/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "HeaderBaseInfo.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

HeaderBaseInfo::HeaderBaseInfo()
{
    m_AccountId = U("");
    m_CompanyCode = U("");
    m_TransactionType = U("");
    m_DocumentCode = U("");
    m_DocumentCodeIsSet = false;
    m_Currency = U("");
    m_TaxCalculationDateIsSet = false;
    m_CompanyLocation = U("");
    
}

HeaderBaseInfo::~HeaderBaseInfo()
{
}

void HeaderBaseInfo::validate()
{
    // TODO: implement validation
}

web::json::value HeaderBaseInfo::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("accountId")] = ModelBase::toJson(m_AccountId);
    val[U("companyCode")] = ModelBase::toJson(m_CompanyCode);
    val[U("transactionType")] = ModelBase::toJson(m_TransactionType);
    if(m_DocumentCodeIsSet)
    {
        val[U("documentCode")] = ModelBase::toJson(m_DocumentCode);
    }
    val[U("currency")] = ModelBase::toJson(m_Currency);
    val[U("transactionDate")] = ModelBase::toJson(m_TransactionDate);
    if(m_TaxCalculationDateIsSet)
    {
        val[U("taxCalculationDate")] = ModelBase::toJson(m_TaxCalculationDate);
    }
    val[U("companyLocation")] = ModelBase::toJson(m_CompanyLocation);
    

    return val;
}

void HeaderBaseInfo::fromJson(web::json::value& val)
{
    setAccountId(ModelBase::stringFromJson(val[U("accountId")]));
    setCompanyCode(ModelBase::stringFromJson(val[U("companyCode")]));
    setTransactionType(ModelBase::stringFromJson(val[U("transactionType")]));
    if(val.has_field(U("documentCode")))
    {
        setDocumentCode(ModelBase::stringFromJson(val[U("documentCode")]));
        
    }
    setCurrency(ModelBase::stringFromJson(val[U("currency")]));
    utility::datetime newTransactionDate(utility::datetime());
    newTransactionDate->fromJson(val[U("transactionDate")]);
    setTransactionDate( newItem );
    if(val.has_field(U("taxCalculationDate")))
    {
        if(!val[U("taxCalculationDate")].is_null())
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromJson(val[U("taxCalculationDate")]);
            setTaxCalculationDate( newItem );
        }
        
    }
    setCompanyLocation(ModelBase::stringFromJson(val[U("companyLocation")]));
    
}

void HeaderBaseInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("accountId"), m_AccountId));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("companyCode"), m_CompanyCode));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("transactionType"), m_TransactionType));
    if(m_DocumentCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("documentCode"), m_DocumentCode));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("currency"), m_Currency));
    m_TransactionDate->toMultipart(multipart, U("transactionDate."));
    if(m_TaxCalculationDateIsSet)
    {
        if (m_TaxCalculationDate.get())
        {
            m_TaxCalculationDate->toMultipart(multipart, U("taxCalculationDate."));
        }
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("companyLocation"), m_CompanyLocation));
    
}

void HeaderBaseInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setAccountId(ModelBase::stringFromHttpContent(multipart->getContent(U("accountId"))));
    setCompanyCode(ModelBase::stringFromHttpContent(multipart->getContent(U("companyCode"))));
    setTransactionType(ModelBase::stringFromHttpContent(multipart->getContent(U("transactionType"))));
    if(multipart->hasContent(U("documentCode")))
    {
        setDocumentCode(ModelBase::stringFromHttpContent(multipart->getContent(U("documentCode"))));
        
    }
    setCurrency(ModelBase::stringFromHttpContent(multipart->getContent(U("currency"))));
    utility::datetime newTransactionDate(utility::datetime());
    newTransactionDate->fromMultiPart(multipart, U("transactionDate."));
    setTransactionDate( newTransactionDate );
    if(multipart->hasContent(U("taxCalculationDate")))
    {
        if(multipart->hasContent(U("taxCalculationDate")))
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromMultiPart(multipart, U("taxCalculationDate."));
            setTaxCalculationDate( newItem );
        }
        
    }
    setCompanyLocation(ModelBase::stringFromHttpContent(multipart->getContent(U("companyLocation"))));
    
}


utility::string_t HeaderBaseInfo::getAccountId() const
{
    return m_AccountId;
}
void HeaderBaseInfo::setAccountId(utility::string_t value)
{
    m_AccountId = value;
    
}
utility::string_t HeaderBaseInfo::getCompanyCode() const
{
    return m_CompanyCode;
}
void HeaderBaseInfo::setCompanyCode(utility::string_t value)
{
    m_CompanyCode = value;
    
}
utility::string_t HeaderBaseInfo::getTransactionType() const
{
    return m_TransactionType;
}
void HeaderBaseInfo::setTransactionType(utility::string_t value)
{
    m_TransactionType = value;
    
}
utility::string_t HeaderBaseInfo::getDocumentCode() const
{
    return m_DocumentCode;
}
void HeaderBaseInfo::setDocumentCode(utility::string_t value)
{
    m_DocumentCode = value;
    m_DocumentCodeIsSet = true;
}
bool HeaderBaseInfo::documentCodeIsSet() const
{
    return m_DocumentCodeIsSet;
}
void HeaderBaseInfo::unsetDocumentCode()
{
    m_DocumentCodeIsSet = false;
}
utility::string_t HeaderBaseInfo::getCurrency() const
{
    return m_Currency;
}
void HeaderBaseInfo::setCurrency(utility::string_t value)
{
    m_Currency = value;
    
}
utility::datetime HeaderBaseInfo::getTransactionDate() const
{
    return m_TransactionDate;
}
void HeaderBaseInfo::setTransactionDate(utility::datetime value)
{
    m_TransactionDate = value;
    
}
utility::datetime HeaderBaseInfo::getTaxCalculationDate() const
{
    return m_TaxCalculationDate;
}
void HeaderBaseInfo::setTaxCalculationDate(utility::datetime value)
{
    m_TaxCalculationDate = value;
    m_TaxCalculationDateIsSet = true;
}
bool HeaderBaseInfo::taxCalculationDateIsSet() const
{
    return m_TaxCalculationDateIsSet;
}
void HeaderBaseInfo::unsetTaxCalculationDate()
{
    m_TaxCalculationDateIsSet = false;
}
utility::string_t HeaderBaseInfo::getCompanyLocation() const
{
    return m_CompanyLocation;
}
void HeaderBaseInfo::setCompanyLocation(utility::string_t value)
{
    m_CompanyLocation = value;
    
}

}
}
}
}

