/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Company.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Company::Company()
{
    m_Code = U("");
    m_OfficialName = U("");
    m_Name = U("");
    m_SubjectToSRF1234 = false;
    m_SubjectToSRF1234IsSet = false;
    m_PisSubjectTo = U("");
    m_PisSubjectToIsSet = false;
    m_CofinsSubjectTo = U("");
    m_CofinsSubjectToIsSet = false;
    m_CsllSubjectTo = U("");
    m_CsllSubjectToIsSet = false;
    m_ReceiptsAreFullNoCumulativePisCofins = false;
    m_ReceiptsAreFullNoCumulativePisCofinsIsSet = false;
    m_InssWithholdSubjectTo = false;
    m_InssWithholdSubjectToIsSet = false;
    m_IssWithholdSubjectTo = false;
    m_IssWithholdSubjectToIsSet = false;
    m_IrrfWithholdSubjectTo = false;
    m_IrrfWithholdSubjectToIsSet = false;
    m_IcmsRateForSimplestaxregime = 0.0;
    m_IcmsRateForSimplestaxregimeIsSet = false;
    m_IsExemptByGrossRevenueForSimplestaxregime = false;
    m_IsExemptByGrossRevenueForSimplestaxregimeIsSet = false;
    m_ConfigurationIsSet = false;
    m_MailServerIsSet = false;
    m_AuthorizedToDownloadNFeIsSet = false;
    
}

Company::~Company()
{
}

void Company::validate()
{
    // TODO: implement validation
}

web::json::value Company::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("code")] = ModelBase::toJson(m_Code);
    val[U("officialName")] = ModelBase::toJson(m_OfficialName);
    val[U("name")] = ModelBase::toJson(m_Name);
    val[U("entityType")] = ModelBase::toJson(m_EntityType);
    if(m_SubjectToSRF1234IsSet)
    {
        val[U("subjectToSRF1234")] = ModelBase::toJson(m_SubjectToSRF1234);
    }
    val[U("federalTaxRegime")] = ModelBase::toJson(m_FederalTaxRegime);
    if(m_PisSubjectToIsSet)
    {
        val[U("pisSubjectTo")] = ModelBase::toJson(m_PisSubjectTo);
    }
    if(m_CofinsSubjectToIsSet)
    {
        val[U("cofinsSubjectTo")] = ModelBase::toJson(m_CofinsSubjectTo);
    }
    if(m_CsllSubjectToIsSet)
    {
        val[U("csllSubjectTo")] = ModelBase::toJson(m_CsllSubjectTo);
    }
    if(m_ReceiptsAreFullNoCumulativePisCofinsIsSet)
    {
        val[U("receiptsAreFullNoCumulativePisCofins")] = ModelBase::toJson(m_ReceiptsAreFullNoCumulativePisCofins);
    }
    if(m_InssWithholdSubjectToIsSet)
    {
        val[U("inssWithholdSubjectTo")] = ModelBase::toJson(m_InssWithholdSubjectTo);
    }
    if(m_IssWithholdSubjectToIsSet)
    {
        val[U("issWithholdSubjectTo")] = ModelBase::toJson(m_IssWithholdSubjectTo);
    }
    if(m_IrrfWithholdSubjectToIsSet)
    {
        val[U("irrfWithholdSubjectTo")] = ModelBase::toJson(m_IrrfWithholdSubjectTo);
    }
    if(m_IcmsRateForSimplestaxregimeIsSet)
    {
        val[U("icmsRateForSimplestaxregime")] = ModelBase::toJson(m_IcmsRateForSimplestaxregime);
    }
    if(m_IsExemptByGrossRevenueForSimplestaxregimeIsSet)
    {
        val[U("isExemptByGrossRevenueForSimplestaxregime")] = ModelBase::toJson(m_IsExemptByGrossRevenueForSimplestaxregime);
    }
    if(m_ConfigurationIsSet)
    {
        val[U("configuration")] = ModelBase::toJson(m_Configuration);
    }
    if(m_MailServerIsSet)
    {
        val[U("mailServer")] = ModelBase::toJson(m_MailServer);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_AuthorizedToDownloadNFe )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("authorizedToDownloadNFe")] = web::json::value::array(jsonArray);
        }
    }
    

    return val;
}

void Company::fromJson(web::json::value& val)
{
    setCode(ModelBase::stringFromJson(val[U("code")]));
    setOfficialName(ModelBase::stringFromJson(val[U("officialName")]));
    setName(ModelBase::stringFromJson(val[U("name")]));
    std::shared_ptr<EntityType> newEntityType(new EntityType());
    newEntityType->fromJson(val[U("entityType")]);
    setEntityType( newItem );
    if(val.has_field(U("subjectToSRF1234")))
    {
        setSubjectToSRF1234(ModelBase::boolFromJson(val[U("subjectToSRF1234")]));
    }
    std::shared_ptr<FederalTaxRegime> newFederalTaxRegime(new FederalTaxRegime());
    newFederalTaxRegime->fromJson(val[U("federalTaxRegime")]);
    setFederalTaxRegime( newItem );
    if(val.has_field(U("pisSubjectTo")))
    {
        setPisSubjectTo(ModelBase::stringFromJson(val[U("pisSubjectTo")]));
        
    }
    if(val.has_field(U("cofinsSubjectTo")))
    {
        setCofinsSubjectTo(ModelBase::stringFromJson(val[U("cofinsSubjectTo")]));
        
    }
    if(val.has_field(U("csllSubjectTo")))
    {
        setCsllSubjectTo(ModelBase::stringFromJson(val[U("csllSubjectTo")]));
        
    }
    if(val.has_field(U("receiptsAreFullNoCumulativePisCofins")))
    {
        setReceiptsAreFullNoCumulativePisCofins(ModelBase::boolFromJson(val[U("receiptsAreFullNoCumulativePisCofins")]));
    }
    if(val.has_field(U("inssWithholdSubjectTo")))
    {
        setInssWithholdSubjectTo(ModelBase::boolFromJson(val[U("inssWithholdSubjectTo")]));
    }
    if(val.has_field(U("issWithholdSubjectTo")))
    {
        setIssWithholdSubjectTo(ModelBase::boolFromJson(val[U("issWithholdSubjectTo")]));
    }
    if(val.has_field(U("irrfWithholdSubjectTo")))
    {
        setIrrfWithholdSubjectTo(ModelBase::boolFromJson(val[U("irrfWithholdSubjectTo")]));
    }
    if(val.has_field(U("icmsRateForSimplestaxregime")))
    {
        setIcmsRateForSimplestaxregime(ModelBase::doubleFromJson(val[U("icmsRateForSimplestaxregime")]));
    }
    if(val.has_field(U("isExemptByGrossRevenueForSimplestaxregime")))
    {
        setIsExemptByGrossRevenueForSimplestaxregime(ModelBase::boolFromJson(val[U("isExemptByGrossRevenueForSimplestaxregime")]));
    }
    if(val.has_field(U("configuration")))
    {
        if(!val[U("configuration")].is_null())
        {
            std::shared_ptr<Company_configuration> newItem(new Company_configuration());
            newItem->fromJson(val[U("configuration")]);
            setConfiguration( newItem );
        }
        
    }
    if(val.has_field(U("mailServer")))
    {
        if(!val[U("mailServer")].is_null())
        {
            std::shared_ptr<Company_mailServer> newItem(new Company_mailServer());
            newItem->fromJson(val[U("mailServer")]);
            setMailServer( newItem );
        }
        
    }
    {
        m_AuthorizedToDownloadNFe.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("authorizedToDownloadNFe")))
        {
        for( auto& item : val[U("authorizedToDownloadNFe")].as_array() )
        {
            
            if(item.is_null())
            {
                m_AuthorizedToDownloadNFe.push_back( std::shared_ptr<Company_authorizedToDownloadNFe>(nullptr) );
            }
            else
            {
                std::shared_ptr<Company_authorizedToDownloadNFe> newItem(new Company_authorizedToDownloadNFe());
                newItem->fromJson(item);
                m_AuthorizedToDownloadNFe.push_back( newItem );
            }
            
        }
        }
    }
    
}

void Company::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("code"), m_Code));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("officialName"), m_OfficialName));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    m_EntityType->toMultipart(multipart, U("entityType."));
    if(m_SubjectToSRF1234IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("subjectToSRF1234"), m_SubjectToSRF1234));
    }
    m_FederalTaxRegime->toMultipart(multipart, U("federalTaxRegime."));
    if(m_PisSubjectToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("pisSubjectTo"), m_PisSubjectTo));
        
    }
    if(m_CofinsSubjectToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cofinsSubjectTo"), m_CofinsSubjectTo));
        
    }
    if(m_CsllSubjectToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("csllSubjectTo"), m_CsllSubjectTo));
        
    }
    if(m_ReceiptsAreFullNoCumulativePisCofinsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("receiptsAreFullNoCumulativePisCofins"), m_ReceiptsAreFullNoCumulativePisCofins));
    }
    if(m_InssWithholdSubjectToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("inssWithholdSubjectTo"), m_InssWithholdSubjectTo));
    }
    if(m_IssWithholdSubjectToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("issWithholdSubjectTo"), m_IssWithholdSubjectTo));
    }
    if(m_IrrfWithholdSubjectToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("irrfWithholdSubjectTo"), m_IrrfWithholdSubjectTo));
    }
    if(m_IcmsRateForSimplestaxregimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("icmsRateForSimplestaxregime"), m_IcmsRateForSimplestaxregime));
    }
    if(m_IsExemptByGrossRevenueForSimplestaxregimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("isExemptByGrossRevenueForSimplestaxregime"), m_IsExemptByGrossRevenueForSimplestaxregime));
    }
    if(m_ConfigurationIsSet)
    {
        if (m_Configuration.get())
        {
            m_Configuration->toMultipart(multipart, U("configuration."));
        }
        
    }
    if(m_MailServerIsSet)
    {
        if (m_MailServer.get())
        {
            m_MailServer->toMultipart(multipart, U("mailServer."));
        }
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_AuthorizedToDownloadNFe )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("authorizedToDownloadNFe"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    
}

void Company::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setCode(ModelBase::stringFromHttpContent(multipart->getContent(U("code"))));
    setOfficialName(ModelBase::stringFromHttpContent(multipart->getContent(U("officialName"))));
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    std::shared_ptr<EntityType> newEntityType(new EntityType());
    newEntityType->fromMultiPart(multipart, U("entityType."));
    setEntityType( newEntityType );
    if(multipart->hasContent(U("subjectToSRF1234")))
    {
        setSubjectToSRF1234(ModelBase::boolFromHttpContent(multipart->getContent(U("subjectToSRF1234"))));
    }
    std::shared_ptr<FederalTaxRegime> newFederalTaxRegime(new FederalTaxRegime());
    newFederalTaxRegime->fromMultiPart(multipart, U("federalTaxRegime."));
    setFederalTaxRegime( newFederalTaxRegime );
    if(multipart->hasContent(U("pisSubjectTo")))
    {
        setPisSubjectTo(ModelBase::stringFromHttpContent(multipart->getContent(U("pisSubjectTo"))));
        
    }
    if(multipart->hasContent(U("cofinsSubjectTo")))
    {
        setCofinsSubjectTo(ModelBase::stringFromHttpContent(multipart->getContent(U("cofinsSubjectTo"))));
        
    }
    if(multipart->hasContent(U("csllSubjectTo")))
    {
        setCsllSubjectTo(ModelBase::stringFromHttpContent(multipart->getContent(U("csllSubjectTo"))));
        
    }
    if(multipart->hasContent(U("receiptsAreFullNoCumulativePisCofins")))
    {
        setReceiptsAreFullNoCumulativePisCofins(ModelBase::boolFromHttpContent(multipart->getContent(U("receiptsAreFullNoCumulativePisCofins"))));
    }
    if(multipart->hasContent(U("inssWithholdSubjectTo")))
    {
        setInssWithholdSubjectTo(ModelBase::boolFromHttpContent(multipart->getContent(U("inssWithholdSubjectTo"))));
    }
    if(multipart->hasContent(U("issWithholdSubjectTo")))
    {
        setIssWithholdSubjectTo(ModelBase::boolFromHttpContent(multipart->getContent(U("issWithholdSubjectTo"))));
    }
    if(multipart->hasContent(U("irrfWithholdSubjectTo")))
    {
        setIrrfWithholdSubjectTo(ModelBase::boolFromHttpContent(multipart->getContent(U("irrfWithholdSubjectTo"))));
    }
    if(multipart->hasContent(U("icmsRateForSimplestaxregime")))
    {
        setIcmsRateForSimplestaxregime(ModelBase::doubleFromHttpContent(multipart->getContent(U("icmsRateForSimplestaxregime"))));
    }
    if(multipart->hasContent(U("isExemptByGrossRevenueForSimplestaxregime")))
    {
        setIsExemptByGrossRevenueForSimplestaxregime(ModelBase::boolFromHttpContent(multipart->getContent(U("isExemptByGrossRevenueForSimplestaxregime"))));
    }
    if(multipart->hasContent(U("configuration")))
    {
        if(multipart->hasContent(U("configuration")))
        {
            std::shared_ptr<Company_configuration> newItem(new Company_configuration());
            newItem->fromMultiPart(multipart, U("configuration."));
            setConfiguration( newItem );
        }
        
    }
    if(multipart->hasContent(U("mailServer")))
    {
        if(multipart->hasContent(U("mailServer")))
        {
            std::shared_ptr<Company_mailServer> newItem(new Company_mailServer());
            newItem->fromMultiPart(multipart, U("mailServer."));
            setMailServer( newItem );
        }
        
    }
    {
        m_AuthorizedToDownloadNFe.clear();
        if(multipart->hasContent(U("authorizedToDownloadNFe")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("authorizedToDownloadNFe"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_AuthorizedToDownloadNFe.push_back( std::shared_ptr<Company_authorizedToDownloadNFe>(nullptr) );
            }
            else
            {
                std::shared_ptr<Company_authorizedToDownloadNFe> newItem(new Company_authorizedToDownloadNFe());
                newItem->fromJson(item);
                m_AuthorizedToDownloadNFe.push_back( newItem );
            }
            
        }
        }
    }
    
}


utility::string_t Company::getCode() const
{
    return m_Code;
}
void Company::setCode(utility::string_t value)
{
    m_Code = value;
    
}
utility::string_t Company::getOfficialName() const
{
    return m_OfficialName;
}
void Company::setOfficialName(utility::string_t value)
{
    m_OfficialName = value;
    
}
utility::string_t Company::getName() const
{
    return m_Name;
}
void Company::setName(utility::string_t value)
{
    m_Name = value;
    
}
std::shared_ptr<EntityType> Company::getEntityType() const
{
    return m_EntityType;
}
void Company::setEntityType(std::shared_ptr<EntityType> value)
{
    m_EntityType = value;
    
}
bool Company::getSubjectToSRF1234() const
{
    return m_SubjectToSRF1234;
}
void Company::setSubjectToSRF1234(bool value)
{
    m_SubjectToSRF1234 = value;
    m_SubjectToSRF1234IsSet = true;
}
bool Company::subjectToSRF1234IsSet() const
{
    return m_SubjectToSRF1234IsSet;
}
void Company::unsetSubjectToSRF1234()
{
    m_SubjectToSRF1234IsSet = false;
}
std::shared_ptr<FederalTaxRegime> Company::getFederalTaxRegime() const
{
    return m_FederalTaxRegime;
}
void Company::setFederalTaxRegime(std::shared_ptr<FederalTaxRegime> value)
{
    m_FederalTaxRegime = value;
    
}
utility::string_t Company::getPisSubjectTo() const
{
    return m_PisSubjectTo;
}
void Company::setPisSubjectTo(utility::string_t value)
{
    m_PisSubjectTo = value;
    m_PisSubjectToIsSet = true;
}
bool Company::pisSubjectToIsSet() const
{
    return m_PisSubjectToIsSet;
}
void Company::unsetPisSubjectTo()
{
    m_PisSubjectToIsSet = false;
}
utility::string_t Company::getCofinsSubjectTo() const
{
    return m_CofinsSubjectTo;
}
void Company::setCofinsSubjectTo(utility::string_t value)
{
    m_CofinsSubjectTo = value;
    m_CofinsSubjectToIsSet = true;
}
bool Company::cofinsSubjectToIsSet() const
{
    return m_CofinsSubjectToIsSet;
}
void Company::unsetCofinsSubjectTo()
{
    m_CofinsSubjectToIsSet = false;
}
utility::string_t Company::getCsllSubjectTo() const
{
    return m_CsllSubjectTo;
}
void Company::setCsllSubjectTo(utility::string_t value)
{
    m_CsllSubjectTo = value;
    m_CsllSubjectToIsSet = true;
}
bool Company::csllSubjectToIsSet() const
{
    return m_CsllSubjectToIsSet;
}
void Company::unsetCsllSubjectTo()
{
    m_CsllSubjectToIsSet = false;
}
bool Company::getReceiptsAreFullNoCumulativePisCofins() const
{
    return m_ReceiptsAreFullNoCumulativePisCofins;
}
void Company::setReceiptsAreFullNoCumulativePisCofins(bool value)
{
    m_ReceiptsAreFullNoCumulativePisCofins = value;
    m_ReceiptsAreFullNoCumulativePisCofinsIsSet = true;
}
bool Company::receiptsAreFullNoCumulativePisCofinsIsSet() const
{
    return m_ReceiptsAreFullNoCumulativePisCofinsIsSet;
}
void Company::unsetReceiptsAreFullNoCumulativePisCofins()
{
    m_ReceiptsAreFullNoCumulativePisCofinsIsSet = false;
}
bool Company::getInssWithholdSubjectTo() const
{
    return m_InssWithholdSubjectTo;
}
void Company::setInssWithholdSubjectTo(bool value)
{
    m_InssWithholdSubjectTo = value;
    m_InssWithholdSubjectToIsSet = true;
}
bool Company::inssWithholdSubjectToIsSet() const
{
    return m_InssWithholdSubjectToIsSet;
}
void Company::unsetInssWithholdSubjectTo()
{
    m_InssWithholdSubjectToIsSet = false;
}
bool Company::getIssWithholdSubjectTo() const
{
    return m_IssWithholdSubjectTo;
}
void Company::setIssWithholdSubjectTo(bool value)
{
    m_IssWithholdSubjectTo = value;
    m_IssWithholdSubjectToIsSet = true;
}
bool Company::issWithholdSubjectToIsSet() const
{
    return m_IssWithholdSubjectToIsSet;
}
void Company::unsetIssWithholdSubjectTo()
{
    m_IssWithholdSubjectToIsSet = false;
}
bool Company::getIrrfWithholdSubjectTo() const
{
    return m_IrrfWithholdSubjectTo;
}
void Company::setIrrfWithholdSubjectTo(bool value)
{
    m_IrrfWithholdSubjectTo = value;
    m_IrrfWithholdSubjectToIsSet = true;
}
bool Company::irrfWithholdSubjectToIsSet() const
{
    return m_IrrfWithholdSubjectToIsSet;
}
void Company::unsetIrrfWithholdSubjectTo()
{
    m_IrrfWithholdSubjectToIsSet = false;
}
double Company::getIcmsRateForSimplestaxregime() const
{
    return m_IcmsRateForSimplestaxregime;
}
void Company::setIcmsRateForSimplestaxregime(double value)
{
    m_IcmsRateForSimplestaxregime = value;
    m_IcmsRateForSimplestaxregimeIsSet = true;
}
bool Company::icmsRateForSimplestaxregimeIsSet() const
{
    return m_IcmsRateForSimplestaxregimeIsSet;
}
void Company::unsetIcmsRateForSimplestaxregime()
{
    m_IcmsRateForSimplestaxregimeIsSet = false;
}
bool Company::getIsExemptByGrossRevenueForSimplestaxregime() const
{
    return m_IsExemptByGrossRevenueForSimplestaxregime;
}
void Company::setIsExemptByGrossRevenueForSimplestaxregime(bool value)
{
    m_IsExemptByGrossRevenueForSimplestaxregime = value;
    m_IsExemptByGrossRevenueForSimplestaxregimeIsSet = true;
}
bool Company::isExemptByGrossRevenueForSimplestaxregimeIsSet() const
{
    return m_IsExemptByGrossRevenueForSimplestaxregimeIsSet;
}
void Company::unsetIsExemptByGrossRevenueForSimplestaxregime()
{
    m_IsExemptByGrossRevenueForSimplestaxregimeIsSet = false;
}
std::shared_ptr<Company_configuration> Company::getConfiguration() const
{
    return m_Configuration;
}
void Company::setConfiguration(std::shared_ptr<Company_configuration> value)
{
    m_Configuration = value;
    m_ConfigurationIsSet = true;
}
bool Company::configurationIsSet() const
{
    return m_ConfigurationIsSet;
}
void Company::unsetConfiguration()
{
    m_ConfigurationIsSet = false;
}
std::shared_ptr<Company_mailServer> Company::getMailServer() const
{
    return m_MailServer;
}
void Company::setMailServer(std::shared_ptr<Company_mailServer> value)
{
    m_MailServer = value;
    m_MailServerIsSet = true;
}
bool Company::mailServerIsSet() const
{
    return m_MailServerIsSet;
}
void Company::unsetMailServer()
{
    m_MailServerIsSet = false;
}
std::vector<std::shared_ptr<Company_authorizedToDownloadNFe>>& Company::getAuthorizedToDownloadNFe()
{
    return m_AuthorizedToDownloadNFe;
}
bool Company::authorizedToDownloadNFeIsSet() const
{
    return m_AuthorizedToDownloadNFeIsSet;
}
void Company::unsetAuthorizedToDownloadNFe()
{
    m_AuthorizedToDownloadNFeIsSet = false;
}

}
}
}
}

