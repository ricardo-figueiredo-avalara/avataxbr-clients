/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CfopConf.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

CfopConf::CfopConf()
{
    m_Code = U("");
    m_StockImpact = false;
    m_StockImpactIsSet = false;
    m_FinancialImpact = false;
    m_FinancialImpactIsSet = false;
    m_CstIPI = U("");
    m_CstIPIIsSet = false;
    m_IpiLegalTaxClass = U("");
    m_IpiLegalTaxClassIsSet = false;
    m_AccruablePISTaxation = U("");
    m_AccruablePISTaxationIsSet = false;
    m_PisExemptLegalReasonCode = U("");
    m_PisExemptLegalReasonCodeIsSet = false;
    m_PisExemptLegalReason = U("");
    m_PisExemptLegalReasonIsSet = false;
    m_AccruableCOFINSTaxation = U("");
    m_AccruableCOFINSTaxationIsSet = false;
    m_CofinsExemptLegalReasonCode = U("");
    m_CofinsExemptLegalReasonCodeIsSet = false;
    m_CofinsExemptLegalReason = U("");
    m_CofinsExemptLegalReasonIsSet = false;
    m_AllowIPIcreditWhenInGoing = false;
    m_AllowIPIcreditWhenInGoingIsSet = false;
    m_IcmsConfIsSet = false;
    m_Name = U("");
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_WayType = U("");
    m_WayTypeIsSet = false;
    m_CodInState = 0;
    m_CodInStateIsSet = false;
    m_CodOtherState = 0;
    m_CodOtherStateIsSet = false;
    m_CodOtherCountry = 0;
    m_CodOtherCountryIsSet = false;
    m_CstICMSSameStateIsSet = false;
    m_CstICMSOtherStateIsSet = false;
    m_CstICMSOtherCountryIsSet = false;
    m_ProductType = U("");
    m_ProductTypeIsSet = false;
    m_OperationToTaxPayerOtherState = false;
    m_OperationToTaxPayerOtherStateIsSet = false;
    m_OperationWithST = false;
    m_OperationWithSTIsSet = false;
    m_OperationToFreeZone = false;
    m_OperationToFreeZoneIsSet = false;
    m_SpecificForProductClass = U("");
    m_SpecificForProductClassIsSet = false;
    
}

CfopConf::~CfopConf()
{
}

void CfopConf::validate()
{
    // TODO: implement validation
}

web::json::value CfopConf::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("code")] = ModelBase::toJson(m_Code);
    if(m_StockImpactIsSet)
    {
        val[U("stockImpact")] = ModelBase::toJson(m_StockImpact);
    }
    if(m_FinancialImpactIsSet)
    {
        val[U("financialImpact")] = ModelBase::toJson(m_FinancialImpact);
    }
    if(m_CstIPIIsSet)
    {
        val[U("cstIPI")] = ModelBase::toJson(m_CstIPI);
    }
    if(m_IpiLegalTaxClassIsSet)
    {
        val[U("ipiLegalTaxClass")] = ModelBase::toJson(m_IpiLegalTaxClass);
    }
    if(m_AccruablePISTaxationIsSet)
    {
        val[U("accruablePISTaxation")] = ModelBase::toJson(m_AccruablePISTaxation);
    }
    if(m_PisExemptLegalReasonCodeIsSet)
    {
        val[U("pisExemptLegalReasonCode")] = ModelBase::toJson(m_PisExemptLegalReasonCode);
    }
    if(m_PisExemptLegalReasonIsSet)
    {
        val[U("pisExemptLegalReason")] = ModelBase::toJson(m_PisExemptLegalReason);
    }
    if(m_AccruableCOFINSTaxationIsSet)
    {
        val[U("accruableCOFINSTaxation")] = ModelBase::toJson(m_AccruableCOFINSTaxation);
    }
    if(m_CofinsExemptLegalReasonCodeIsSet)
    {
        val[U("cofinsExemptLegalReasonCode")] = ModelBase::toJson(m_CofinsExemptLegalReasonCode);
    }
    if(m_CofinsExemptLegalReasonIsSet)
    {
        val[U("cofinsExemptLegalReason")] = ModelBase::toJson(m_CofinsExemptLegalReason);
    }
    if(m_AllowIPIcreditWhenInGoingIsSet)
    {
        val[U("allowIPIcreditWhenInGoing")] = ModelBase::toJson(m_AllowIPIcreditWhenInGoing);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_IcmsConf )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("icmsConf")] = web::json::value::array(jsonArray);
        }
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_WayTypeIsSet)
    {
        val[U("wayType")] = ModelBase::toJson(m_WayType);
    }
    if(m_CodInStateIsSet)
    {
        val[U("codInState")] = ModelBase::toJson(m_CodInState);
    }
    if(m_CodOtherStateIsSet)
    {
        val[U("codOtherState")] = ModelBase::toJson(m_CodOtherState);
    }
    if(m_CodOtherCountryIsSet)
    {
        val[U("codOtherCountry")] = ModelBase::toJson(m_CodOtherCountry);
    }
    if(m_CstICMSSameStateIsSet)
    {
        val[U("cstICMSSameState")] = ModelBase::toJson(m_CstICMSSameState);
    }
    if(m_CstICMSOtherStateIsSet)
    {
        val[U("cstICMSOtherState")] = ModelBase::toJson(m_CstICMSOtherState);
    }
    if(m_CstICMSOtherCountryIsSet)
    {
        val[U("cstICMSOtherCountry")] = ModelBase::toJson(m_CstICMSOtherCountry);
    }
    if(m_ProductTypeIsSet)
    {
        val[U("productType")] = ModelBase::toJson(m_ProductType);
    }
    if(m_OperationToTaxPayerOtherStateIsSet)
    {
        val[U("operationToTaxPayerOtherState")] = ModelBase::toJson(m_OperationToTaxPayerOtherState);
    }
    if(m_OperationWithSTIsSet)
    {
        val[U("operationWithST")] = ModelBase::toJson(m_OperationWithST);
    }
    if(m_OperationToFreeZoneIsSet)
    {
        val[U("operationToFreeZone")] = ModelBase::toJson(m_OperationToFreeZone);
    }
    if(m_SpecificForProductClassIsSet)
    {
        val[U("specificForProductClass")] = ModelBase::toJson(m_SpecificForProductClass);
    }
    

    return val;
}

void CfopConf::fromJson(web::json::value& val)
{
    setCode(ModelBase::stringFromJson(val[U("code")]));
    if(val.has_field(U("stockImpact")))
    {
        setStockImpact(ModelBase::boolFromJson(val[U("stockImpact")]));
    }
    if(val.has_field(U("financialImpact")))
    {
        setFinancialImpact(ModelBase::boolFromJson(val[U("financialImpact")]));
    }
    if(val.has_field(U("cstIPI")))
    {
        setCstIPI(ModelBase::stringFromJson(val[U("cstIPI")]));
        
    }
    if(val.has_field(U("ipiLegalTaxClass")))
    {
        setIpiLegalTaxClass(ModelBase::stringFromJson(val[U("ipiLegalTaxClass")]));
        
    }
    if(val.has_field(U("accruablePISTaxation")))
    {
        setAccruablePISTaxation(ModelBase::stringFromJson(val[U("accruablePISTaxation")]));
        
    }
    if(val.has_field(U("pisExemptLegalReasonCode")))
    {
        setPisExemptLegalReasonCode(ModelBase::stringFromJson(val[U("pisExemptLegalReasonCode")]));
        
    }
    if(val.has_field(U("pisExemptLegalReason")))
    {
        setPisExemptLegalReason(ModelBase::stringFromJson(val[U("pisExemptLegalReason")]));
        
    }
    if(val.has_field(U("accruableCOFINSTaxation")))
    {
        setAccruableCOFINSTaxation(ModelBase::stringFromJson(val[U("accruableCOFINSTaxation")]));
        
    }
    if(val.has_field(U("cofinsExemptLegalReasonCode")))
    {
        setCofinsExemptLegalReasonCode(ModelBase::stringFromJson(val[U("cofinsExemptLegalReasonCode")]));
        
    }
    if(val.has_field(U("cofinsExemptLegalReason")))
    {
        setCofinsExemptLegalReason(ModelBase::stringFromJson(val[U("cofinsExemptLegalReason")]));
        
    }
    if(val.has_field(U("allowIPIcreditWhenInGoing")))
    {
        setAllowIPIcreditWhenInGoing(ModelBase::boolFromJson(val[U("allowIPIcreditWhenInGoing")]));
    }
    {
        m_IcmsConf.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("icmsConf")))
        {
        for( auto& item : val[U("icmsConf")].as_array() )
        {
            
            if(item.is_null())
            {
                m_IcmsConf.push_back( std::shared_ptr<IcmsTaxConf>(nullptr) );
            }
            else
            {
                std::shared_ptr<IcmsTaxConf> newItem(new IcmsTaxConf());
                newItem->fromJson(item);
                m_IcmsConf.push_back( newItem );
            }
            
        }
        }
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
        
    }
    if(val.has_field(U("wayType")))
    {
        setWayType(ModelBase::stringFromJson(val[U("wayType")]));
        
    }
    if(val.has_field(U("codInState")))
    {
        setCodInState(ModelBase::int32_tFromJson(val[U("codInState")]));
    }
    if(val.has_field(U("codOtherState")))
    {
        setCodOtherState(ModelBase::int32_tFromJson(val[U("codOtherState")]));
    }
    if(val.has_field(U("codOtherCountry")))
    {
        setCodOtherCountry(ModelBase::int32_tFromJson(val[U("codOtherCountry")]));
    }
    if(val.has_field(U("cstICMSSameState")))
    {
        if(!val[U("cstICMSSameState")].is_null())
        {
            std::shared_ptr<CstIcmsEnum> newItem(new CstIcmsEnum());
            newItem->fromJson(val[U("cstICMSSameState")]);
            setCstICMSSameState( newItem );
        }
        
    }
    if(val.has_field(U("cstICMSOtherState")))
    {
        if(!val[U("cstICMSOtherState")].is_null())
        {
            std::shared_ptr<CstIcmsEnum> newItem(new CstIcmsEnum());
            newItem->fromJson(val[U("cstICMSOtherState")]);
            setCstICMSOtherState( newItem );
        }
        
    }
    if(val.has_field(U("cstICMSOtherCountry")))
    {
        if(!val[U("cstICMSOtherCountry")].is_null())
        {
            std::shared_ptr<CstIcmsEnum> newItem(new CstIcmsEnum());
            newItem->fromJson(val[U("cstICMSOtherCountry")]);
            setCstICMSOtherCountry( newItem );
        }
        
    }
    if(val.has_field(U("productType")))
    {
        setProductType(ModelBase::stringFromJson(val[U("productType")]));
        
    }
    if(val.has_field(U("operationToTaxPayerOtherState")))
    {
        setOperationToTaxPayerOtherState(ModelBase::boolFromJson(val[U("operationToTaxPayerOtherState")]));
    }
    if(val.has_field(U("operationWithST")))
    {
        setOperationWithST(ModelBase::boolFromJson(val[U("operationWithST")]));
    }
    if(val.has_field(U("operationToFreeZone")))
    {
        setOperationToFreeZone(ModelBase::boolFromJson(val[U("operationToFreeZone")]));
    }
    if(val.has_field(U("specificForProductClass")))
    {
        setSpecificForProductClass(ModelBase::stringFromJson(val[U("specificForProductClass")]));
        
    }
    
}

void CfopConf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("code"), m_Code));
    if(m_StockImpactIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("stockImpact"), m_StockImpact));
    }
    if(m_FinancialImpactIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("financialImpact"), m_FinancialImpact));
    }
    if(m_CstIPIIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cstIPI"), m_CstIPI));
        
    }
    if(m_IpiLegalTaxClassIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ipiLegalTaxClass"), m_IpiLegalTaxClass));
        
    }
    if(m_AccruablePISTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("accruablePISTaxation"), m_AccruablePISTaxation));
        
    }
    if(m_PisExemptLegalReasonCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("pisExemptLegalReasonCode"), m_PisExemptLegalReasonCode));
        
    }
    if(m_PisExemptLegalReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("pisExemptLegalReason"), m_PisExemptLegalReason));
        
    }
    if(m_AccruableCOFINSTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("accruableCOFINSTaxation"), m_AccruableCOFINSTaxation));
        
    }
    if(m_CofinsExemptLegalReasonCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cofinsExemptLegalReasonCode"), m_CofinsExemptLegalReasonCode));
        
    }
    if(m_CofinsExemptLegalReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cofinsExemptLegalReason"), m_CofinsExemptLegalReason));
        
    }
    if(m_AllowIPIcreditWhenInGoingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("allowIPIcreditWhenInGoing"), m_AllowIPIcreditWhenInGoing));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_IcmsConf )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("icmsConf"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_WayTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("wayType"), m_WayType));
        
    }
    if(m_CodInStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("codInState"), m_CodInState));
    }
    if(m_CodOtherStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("codOtherState"), m_CodOtherState));
    }
    if(m_CodOtherCountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("codOtherCountry"), m_CodOtherCountry));
    }
    if(m_CstICMSSameStateIsSet)
    {
        if (m_CstICMSSameState.get())
        {
            m_CstICMSSameState->toMultipart(multipart, U("cstICMSSameState."));
        }
        
    }
    if(m_CstICMSOtherStateIsSet)
    {
        if (m_CstICMSOtherState.get())
        {
            m_CstICMSOtherState->toMultipart(multipart, U("cstICMSOtherState."));
        }
        
    }
    if(m_CstICMSOtherCountryIsSet)
    {
        if (m_CstICMSOtherCountry.get())
        {
            m_CstICMSOtherCountry->toMultipart(multipart, U("cstICMSOtherCountry."));
        }
        
    }
    if(m_ProductTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("productType"), m_ProductType));
        
    }
    if(m_OperationToTaxPayerOtherStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("operationToTaxPayerOtherState"), m_OperationToTaxPayerOtherState));
    }
    if(m_OperationWithSTIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("operationWithST"), m_OperationWithST));
    }
    if(m_OperationToFreeZoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("operationToFreeZone"), m_OperationToFreeZone));
    }
    if(m_SpecificForProductClassIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("specificForProductClass"), m_SpecificForProductClass));
        
    }
    
}

void CfopConf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setCode(ModelBase::stringFromHttpContent(multipart->getContent(U("code"))));
    if(multipart->hasContent(U("stockImpact")))
    {
        setStockImpact(ModelBase::boolFromHttpContent(multipart->getContent(U("stockImpact"))));
    }
    if(multipart->hasContent(U("financialImpact")))
    {
        setFinancialImpact(ModelBase::boolFromHttpContent(multipart->getContent(U("financialImpact"))));
    }
    if(multipart->hasContent(U("cstIPI")))
    {
        setCstIPI(ModelBase::stringFromHttpContent(multipart->getContent(U("cstIPI"))));
        
    }
    if(multipart->hasContent(U("ipiLegalTaxClass")))
    {
        setIpiLegalTaxClass(ModelBase::stringFromHttpContent(multipart->getContent(U("ipiLegalTaxClass"))));
        
    }
    if(multipart->hasContent(U("accruablePISTaxation")))
    {
        setAccruablePISTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("accruablePISTaxation"))));
        
    }
    if(multipart->hasContent(U("pisExemptLegalReasonCode")))
    {
        setPisExemptLegalReasonCode(ModelBase::stringFromHttpContent(multipart->getContent(U("pisExemptLegalReasonCode"))));
        
    }
    if(multipart->hasContent(U("pisExemptLegalReason")))
    {
        setPisExemptLegalReason(ModelBase::stringFromHttpContent(multipart->getContent(U("pisExemptLegalReason"))));
        
    }
    if(multipart->hasContent(U("accruableCOFINSTaxation")))
    {
        setAccruableCOFINSTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("accruableCOFINSTaxation"))));
        
    }
    if(multipart->hasContent(U("cofinsExemptLegalReasonCode")))
    {
        setCofinsExemptLegalReasonCode(ModelBase::stringFromHttpContent(multipart->getContent(U("cofinsExemptLegalReasonCode"))));
        
    }
    if(multipart->hasContent(U("cofinsExemptLegalReason")))
    {
        setCofinsExemptLegalReason(ModelBase::stringFromHttpContent(multipart->getContent(U("cofinsExemptLegalReason"))));
        
    }
    if(multipart->hasContent(U("allowIPIcreditWhenInGoing")))
    {
        setAllowIPIcreditWhenInGoing(ModelBase::boolFromHttpContent(multipart->getContent(U("allowIPIcreditWhenInGoing"))));
    }
    {
        m_IcmsConf.clear();
        if(multipart->hasContent(U("icmsConf")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("icmsConf"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_IcmsConf.push_back( std::shared_ptr<IcmsTaxConf>(nullptr) );
            }
            else
            {
                std::shared_ptr<IcmsTaxConf> newItem(new IcmsTaxConf());
                newItem->fromJson(item);
                m_IcmsConf.push_back( newItem );
            }
            
        }
        }
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
        
    }
    if(multipart->hasContent(U("wayType")))
    {
        setWayType(ModelBase::stringFromHttpContent(multipart->getContent(U("wayType"))));
        
    }
    if(multipart->hasContent(U("codInState")))
    {
        setCodInState(ModelBase::int32_tFromHttpContent(multipart->getContent(U("codInState"))));
    }
    if(multipart->hasContent(U("codOtherState")))
    {
        setCodOtherState(ModelBase::int32_tFromHttpContent(multipart->getContent(U("codOtherState"))));
    }
    if(multipart->hasContent(U("codOtherCountry")))
    {
        setCodOtherCountry(ModelBase::int32_tFromHttpContent(multipart->getContent(U("codOtherCountry"))));
    }
    if(multipart->hasContent(U("cstICMSSameState")))
    {
        if(multipart->hasContent(U("cstICMSSameState")))
        {
            std::shared_ptr<CstIcmsEnum> newItem(new CstIcmsEnum());
            newItem->fromMultiPart(multipart, U("cstICMSSameState."));
            setCstICMSSameState( newItem );
        }
        
    }
    if(multipart->hasContent(U("cstICMSOtherState")))
    {
        if(multipart->hasContent(U("cstICMSOtherState")))
        {
            std::shared_ptr<CstIcmsEnum> newItem(new CstIcmsEnum());
            newItem->fromMultiPart(multipart, U("cstICMSOtherState."));
            setCstICMSOtherState( newItem );
        }
        
    }
    if(multipart->hasContent(U("cstICMSOtherCountry")))
    {
        if(multipart->hasContent(U("cstICMSOtherCountry")))
        {
            std::shared_ptr<CstIcmsEnum> newItem(new CstIcmsEnum());
            newItem->fromMultiPart(multipart, U("cstICMSOtherCountry."));
            setCstICMSOtherCountry( newItem );
        }
        
    }
    if(multipart->hasContent(U("productType")))
    {
        setProductType(ModelBase::stringFromHttpContent(multipart->getContent(U("productType"))));
        
    }
    if(multipart->hasContent(U("operationToTaxPayerOtherState")))
    {
        setOperationToTaxPayerOtherState(ModelBase::boolFromHttpContent(multipart->getContent(U("operationToTaxPayerOtherState"))));
    }
    if(multipart->hasContent(U("operationWithST")))
    {
        setOperationWithST(ModelBase::boolFromHttpContent(multipart->getContent(U("operationWithST"))));
    }
    if(multipart->hasContent(U("operationToFreeZone")))
    {
        setOperationToFreeZone(ModelBase::boolFromHttpContent(multipart->getContent(U("operationToFreeZone"))));
    }
    if(multipart->hasContent(U("specificForProductClass")))
    {
        setSpecificForProductClass(ModelBase::stringFromHttpContent(multipart->getContent(U("specificForProductClass"))));
        
    }
    
}


utility::string_t CfopConf::getCode() const
{
    return m_Code;
}
void CfopConf::setCode(utility::string_t value)
{
    m_Code = value;
    
}
bool CfopConf::getStockImpact() const
{
    return m_StockImpact;
}
void CfopConf::setStockImpact(bool value)
{
    m_StockImpact = value;
    m_StockImpactIsSet = true;
}
bool CfopConf::stockImpactIsSet() const
{
    return m_StockImpactIsSet;
}
void CfopConf::unsetStockImpact()
{
    m_StockImpactIsSet = false;
}
bool CfopConf::getFinancialImpact() const
{
    return m_FinancialImpact;
}
void CfopConf::setFinancialImpact(bool value)
{
    m_FinancialImpact = value;
    m_FinancialImpactIsSet = true;
}
bool CfopConf::financialImpactIsSet() const
{
    return m_FinancialImpactIsSet;
}
void CfopConf::unsetFinancialImpact()
{
    m_FinancialImpactIsSet = false;
}
utility::string_t CfopConf::getCstIPI() const
{
    return m_CstIPI;
}
void CfopConf::setCstIPI(utility::string_t value)
{
    m_CstIPI = value;
    m_CstIPIIsSet = true;
}
bool CfopConf::cstIPIIsSet() const
{
    return m_CstIPIIsSet;
}
void CfopConf::unsetCstIPI()
{
    m_CstIPIIsSet = false;
}
utility::string_t CfopConf::getIpiLegalTaxClass() const
{
    return m_IpiLegalTaxClass;
}
void CfopConf::setIpiLegalTaxClass(utility::string_t value)
{
    m_IpiLegalTaxClass = value;
    m_IpiLegalTaxClassIsSet = true;
}
bool CfopConf::ipiLegalTaxClassIsSet() const
{
    return m_IpiLegalTaxClassIsSet;
}
void CfopConf::unsetIpiLegalTaxClass()
{
    m_IpiLegalTaxClassIsSet = false;
}
utility::string_t CfopConf::getAccruablePISTaxation() const
{
    return m_AccruablePISTaxation;
}
void CfopConf::setAccruablePISTaxation(utility::string_t value)
{
    m_AccruablePISTaxation = value;
    m_AccruablePISTaxationIsSet = true;
}
bool CfopConf::accruablePISTaxationIsSet() const
{
    return m_AccruablePISTaxationIsSet;
}
void CfopConf::unsetAccruablePISTaxation()
{
    m_AccruablePISTaxationIsSet = false;
}
utility::string_t CfopConf::getPisExemptLegalReasonCode() const
{
    return m_PisExemptLegalReasonCode;
}
void CfopConf::setPisExemptLegalReasonCode(utility::string_t value)
{
    m_PisExemptLegalReasonCode = value;
    m_PisExemptLegalReasonCodeIsSet = true;
}
bool CfopConf::pisExemptLegalReasonCodeIsSet() const
{
    return m_PisExemptLegalReasonCodeIsSet;
}
void CfopConf::unsetPisExemptLegalReasonCode()
{
    m_PisExemptLegalReasonCodeIsSet = false;
}
utility::string_t CfopConf::getPisExemptLegalReason() const
{
    return m_PisExemptLegalReason;
}
void CfopConf::setPisExemptLegalReason(utility::string_t value)
{
    m_PisExemptLegalReason = value;
    m_PisExemptLegalReasonIsSet = true;
}
bool CfopConf::pisExemptLegalReasonIsSet() const
{
    return m_PisExemptLegalReasonIsSet;
}
void CfopConf::unsetPisExemptLegalReason()
{
    m_PisExemptLegalReasonIsSet = false;
}
utility::string_t CfopConf::getAccruableCOFINSTaxation() const
{
    return m_AccruableCOFINSTaxation;
}
void CfopConf::setAccruableCOFINSTaxation(utility::string_t value)
{
    m_AccruableCOFINSTaxation = value;
    m_AccruableCOFINSTaxationIsSet = true;
}
bool CfopConf::accruableCOFINSTaxationIsSet() const
{
    return m_AccruableCOFINSTaxationIsSet;
}
void CfopConf::unsetAccruableCOFINSTaxation()
{
    m_AccruableCOFINSTaxationIsSet = false;
}
utility::string_t CfopConf::getCofinsExemptLegalReasonCode() const
{
    return m_CofinsExemptLegalReasonCode;
}
void CfopConf::setCofinsExemptLegalReasonCode(utility::string_t value)
{
    m_CofinsExemptLegalReasonCode = value;
    m_CofinsExemptLegalReasonCodeIsSet = true;
}
bool CfopConf::cofinsExemptLegalReasonCodeIsSet() const
{
    return m_CofinsExemptLegalReasonCodeIsSet;
}
void CfopConf::unsetCofinsExemptLegalReasonCode()
{
    m_CofinsExemptLegalReasonCodeIsSet = false;
}
utility::string_t CfopConf::getCofinsExemptLegalReason() const
{
    return m_CofinsExemptLegalReason;
}
void CfopConf::setCofinsExemptLegalReason(utility::string_t value)
{
    m_CofinsExemptLegalReason = value;
    m_CofinsExemptLegalReasonIsSet = true;
}
bool CfopConf::cofinsExemptLegalReasonIsSet() const
{
    return m_CofinsExemptLegalReasonIsSet;
}
void CfopConf::unsetCofinsExemptLegalReason()
{
    m_CofinsExemptLegalReasonIsSet = false;
}
bool CfopConf::getAllowIPIcreditWhenInGoing() const
{
    return m_AllowIPIcreditWhenInGoing;
}
void CfopConf::setAllowIPIcreditWhenInGoing(bool value)
{
    m_AllowIPIcreditWhenInGoing = value;
    m_AllowIPIcreditWhenInGoingIsSet = true;
}
bool CfopConf::allowIPIcreditWhenInGoingIsSet() const
{
    return m_AllowIPIcreditWhenInGoingIsSet;
}
void CfopConf::unsetAllowIPIcreditWhenInGoing()
{
    m_AllowIPIcreditWhenInGoingIsSet = false;
}
std::vector<std::shared_ptr<IcmsTaxConf>>& CfopConf::getIcmsConf()
{
    return m_IcmsConf;
}
bool CfopConf::icmsConfIsSet() const
{
    return m_IcmsConfIsSet;
}
void CfopConf::unsetIcmsConf()
{
    m_IcmsConfIsSet = false;
}
utility::string_t CfopConf::getName() const
{
    return m_Name;
}
void CfopConf::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t CfopConf::getDescription() const
{
    return m_Description;
}
void CfopConf::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool CfopConf::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void CfopConf::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t CfopConf::getWayType() const
{
    return m_WayType;
}
void CfopConf::setWayType(utility::string_t value)
{
    m_WayType = value;
    m_WayTypeIsSet = true;
}
bool CfopConf::wayTypeIsSet() const
{
    return m_WayTypeIsSet;
}
void CfopConf::unsetWayType()
{
    m_WayTypeIsSet = false;
}
int32_t CfopConf::getCodInState() const
{
    return m_CodInState;
}
void CfopConf::setCodInState(int32_t value)
{
    m_CodInState = value;
    m_CodInStateIsSet = true;
}
bool CfopConf::codInStateIsSet() const
{
    return m_CodInStateIsSet;
}
void CfopConf::unsetCodInState()
{
    m_CodInStateIsSet = false;
}
int32_t CfopConf::getCodOtherState() const
{
    return m_CodOtherState;
}
void CfopConf::setCodOtherState(int32_t value)
{
    m_CodOtherState = value;
    m_CodOtherStateIsSet = true;
}
bool CfopConf::codOtherStateIsSet() const
{
    return m_CodOtherStateIsSet;
}
void CfopConf::unsetCodOtherState()
{
    m_CodOtherStateIsSet = false;
}
int32_t CfopConf::getCodOtherCountry() const
{
    return m_CodOtherCountry;
}
void CfopConf::setCodOtherCountry(int32_t value)
{
    m_CodOtherCountry = value;
    m_CodOtherCountryIsSet = true;
}
bool CfopConf::codOtherCountryIsSet() const
{
    return m_CodOtherCountryIsSet;
}
void CfopConf::unsetCodOtherCountry()
{
    m_CodOtherCountryIsSet = false;
}
std::shared_ptr<CstIcmsEnum> CfopConf::getCstICMSSameState() const
{
    return m_CstICMSSameState;
}
void CfopConf::setCstICMSSameState(std::shared_ptr<CstIcmsEnum> value)
{
    m_CstICMSSameState = value;
    m_CstICMSSameStateIsSet = true;
}
bool CfopConf::cstICMSSameStateIsSet() const
{
    return m_CstICMSSameStateIsSet;
}
void CfopConf::unsetCstICMSSameState()
{
    m_CstICMSSameStateIsSet = false;
}
std::shared_ptr<CstIcmsEnum> CfopConf::getCstICMSOtherState() const
{
    return m_CstICMSOtherState;
}
void CfopConf::setCstICMSOtherState(std::shared_ptr<CstIcmsEnum> value)
{
    m_CstICMSOtherState = value;
    m_CstICMSOtherStateIsSet = true;
}
bool CfopConf::cstICMSOtherStateIsSet() const
{
    return m_CstICMSOtherStateIsSet;
}
void CfopConf::unsetCstICMSOtherState()
{
    m_CstICMSOtherStateIsSet = false;
}
std::shared_ptr<CstIcmsEnum> CfopConf::getCstICMSOtherCountry() const
{
    return m_CstICMSOtherCountry;
}
void CfopConf::setCstICMSOtherCountry(std::shared_ptr<CstIcmsEnum> value)
{
    m_CstICMSOtherCountry = value;
    m_CstICMSOtherCountryIsSet = true;
}
bool CfopConf::cstICMSOtherCountryIsSet() const
{
    return m_CstICMSOtherCountryIsSet;
}
void CfopConf::unsetCstICMSOtherCountry()
{
    m_CstICMSOtherCountryIsSet = false;
}
utility::string_t CfopConf::getProductType() const
{
    return m_ProductType;
}
void CfopConf::setProductType(utility::string_t value)
{
    m_ProductType = value;
    m_ProductTypeIsSet = true;
}
bool CfopConf::productTypeIsSet() const
{
    return m_ProductTypeIsSet;
}
void CfopConf::unsetProductType()
{
    m_ProductTypeIsSet = false;
}
bool CfopConf::getOperationToTaxPayerOtherState() const
{
    return m_OperationToTaxPayerOtherState;
}
void CfopConf::setOperationToTaxPayerOtherState(bool value)
{
    m_OperationToTaxPayerOtherState = value;
    m_OperationToTaxPayerOtherStateIsSet = true;
}
bool CfopConf::operationToTaxPayerOtherStateIsSet() const
{
    return m_OperationToTaxPayerOtherStateIsSet;
}
void CfopConf::unsetOperationToTaxPayerOtherState()
{
    m_OperationToTaxPayerOtherStateIsSet = false;
}
bool CfopConf::getOperationWithST() const
{
    return m_OperationWithST;
}
void CfopConf::setOperationWithST(bool value)
{
    m_OperationWithST = value;
    m_OperationWithSTIsSet = true;
}
bool CfopConf::operationWithSTIsSet() const
{
    return m_OperationWithSTIsSet;
}
void CfopConf::unsetOperationWithST()
{
    m_OperationWithSTIsSet = false;
}
bool CfopConf::getOperationToFreeZone() const
{
    return m_OperationToFreeZone;
}
void CfopConf::setOperationToFreeZone(bool value)
{
    m_OperationToFreeZone = value;
    m_OperationToFreeZoneIsSet = true;
}
bool CfopConf::operationToFreeZoneIsSet() const
{
    return m_OperationToFreeZoneIsSet;
}
void CfopConf::unsetOperationToFreeZone()
{
    m_OperationToFreeZoneIsSet = false;
}
utility::string_t CfopConf::getSpecificForProductClass() const
{
    return m_SpecificForProductClass;
}
void CfopConf::setSpecificForProductClass(utility::string_t value)
{
    m_SpecificForProductClass = value;
    m_SpecificForProductClassIsSet = true;
}
bool CfopConf::specificForProductClassIsSet() const
{
    return m_SpecificForProductClassIsSet;
}
void CfopConf::unsetSpecificForProductClass()
{
    m_SpecificForProductClassIsSet = false;
}

}
}
}
}

