/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Transport_volumes.h
 *
 * 
 */

#ifndef Transport_volumes_H_
#define Transport_volumes_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Transport_volumes
    : public ModelBase
{
public:
    Transport_volumes();
    virtual ~Transport_volumes();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Transport_volumes members

    /// <summary>
    /// Quantity of packages transported
    /// </summary>
    utility::string_t getQVol() const;
    void setQVol(utility::string_t value);
    bool qVolIsSet() const;
    void unsetQVol();
    /// <summary>
    /// package type
    /// </summary>
    utility::string_t getSpecie() const;
    void setSpecie(utility::string_t value);
    bool specieIsSet() const;
    void unsetSpecie();
    /// <summary>
    /// brand
    /// </summary>
    utility::string_t getBrand() const;
    void setBrand(utility::string_t value);
    bool brandIsSet() const;
    void unsetBrand();
    /// <summary>
    /// packages numeration
    /// </summary>
    utility::string_t getVolumeNumeration() const;
    void setVolumeNumeration(utility::string_t value);
    bool volumeNumerationIsSet() const;
    void unsetVolumeNumeration();
    /// <summary>
    /// net weight using Kg
    /// </summary>
    double getNetWeight() const;
    void setNetWeight(double value);
    bool netWeightIsSet() const;
    void unsetNetWeight();
    /// <summary>
    /// gross weight using Kg
    /// </summary>
    double getGrossWeight() const;
    void setGrossWeight(double value);
    bool grossWeightIsSet() const;
    void unsetGrossWeight();
    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getSeal();
    bool sealIsSet() const;
    void unsetSeal();

protected:
    utility::string_t m_QVol;
    bool m_QVolIsSet;
utility::string_t m_Specie;
    bool m_SpecieIsSet;
utility::string_t m_Brand;
    bool m_BrandIsSet;
utility::string_t m_VolumeNumeration;
    bool m_VolumeNumerationIsSet;
double m_NetWeight;
    bool m_NetWeightIsSet;
double m_GrossWeight;
    bool m_GrossWeightIsSet;
std::vector<utility::string_t> m_Seal;
    bool m_SealIsSet;
};

}
}
}
}

#endif /* Transport_volumes_H_ */
