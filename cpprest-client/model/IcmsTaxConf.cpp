/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IcmsTaxConf.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

IcmsTaxConf::IcmsTaxConf()
{
    m_IcmsCST = U("");
    m_IcmsCSTIsSet = false;
    m_MessageCode = U("");
    m_MessageCodeIsSet = false;
    m_RelationShipIsSet = false;
    
}

IcmsTaxConf::~IcmsTaxConf()
{
}

void IcmsTaxConf::validate()
{
    // TODO: implement validation
}

web::json::value IcmsTaxConf::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("state")] = ModelBase::toJson(m_State);
    if(m_IcmsCSTIsSet)
    {
        val[U("icmsCST")] = ModelBase::toJson(m_IcmsCST);
    }
    if(m_MessageCodeIsSet)
    {
        val[U("messageCode")] = ModelBase::toJson(m_MessageCode);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_RelationShip )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("relationShip")] = web::json::value::array(jsonArray);
        }
    }
    

    return val;
}

void IcmsTaxConf::fromJson(web::json::value& val)
{
    std::shared_ptr<StateEnum> newState(new StateEnum());
    newState->fromJson(val[U("state")]);
    setState( newItem );
    if(val.has_field(U("icmsCST")))
    {
        setIcmsCST(ModelBase::stringFromJson(val[U("icmsCST")]));
        
    }
    if(val.has_field(U("messageCode")))
    {
        setMessageCode(ModelBase::stringFromJson(val[U("messageCode")]));
        
    }
    {
        m_RelationShip.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("relationShip")))
        {
        for( auto& item : val[U("relationShip")].as_array() )
        {
            
            if(item.is_null())
            {
                m_RelationShip.push_back( std::shared_ptr<IcmsTaxConfBase>(nullptr) );
            }
            else
            {
                std::shared_ptr<IcmsTaxConfBase> newItem(new IcmsTaxConfBase());
                newItem->fromJson(item);
                m_RelationShip.push_back( newItem );
            }
            
        }
        }
    }
    
}

void IcmsTaxConf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    m_State->toMultipart(multipart, U("state."));
    if(m_IcmsCSTIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("icmsCST"), m_IcmsCST));
        
    }
    if(m_MessageCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("messageCode"), m_MessageCode));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_RelationShip )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("relationShip"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    
}

void IcmsTaxConf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    std::shared_ptr<StateEnum> newState(new StateEnum());
    newState->fromMultiPart(multipart, U("state."));
    setState( newState );
    if(multipart->hasContent(U("icmsCST")))
    {
        setIcmsCST(ModelBase::stringFromHttpContent(multipart->getContent(U("icmsCST"))));
        
    }
    if(multipart->hasContent(U("messageCode")))
    {
        setMessageCode(ModelBase::stringFromHttpContent(multipart->getContent(U("messageCode"))));
        
    }
    {
        m_RelationShip.clear();
        if(multipart->hasContent(U("relationShip")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("relationShip"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_RelationShip.push_back( std::shared_ptr<IcmsTaxConfBase>(nullptr) );
            }
            else
            {
                std::shared_ptr<IcmsTaxConfBase> newItem(new IcmsTaxConfBase());
                newItem->fromJson(item);
                m_RelationShip.push_back( newItem );
            }
            
        }
        }
    }
    
}


std::shared_ptr<StateEnum> IcmsTaxConf::getState() const
{
    return m_State;
}
void IcmsTaxConf::setState(std::shared_ptr<StateEnum> value)
{
    m_State = value;
    
}
utility::string_t IcmsTaxConf::getIcmsCST() const
{
    return m_IcmsCST;
}
void IcmsTaxConf::setIcmsCST(utility::string_t value)
{
    m_IcmsCST = value;
    m_IcmsCSTIsSet = true;
}
bool IcmsTaxConf::icmsCSTIsSet() const
{
    return m_IcmsCSTIsSet;
}
void IcmsTaxConf::unsetIcmsCST()
{
    m_IcmsCSTIsSet = false;
}
utility::string_t IcmsTaxConf::getMessageCode() const
{
    return m_MessageCode;
}
void IcmsTaxConf::setMessageCode(utility::string_t value)
{
    m_MessageCode = value;
    m_MessageCodeIsSet = true;
}
bool IcmsTaxConf::messageCodeIsSet() const
{
    return m_MessageCodeIsSet;
}
void IcmsTaxConf::unsetMessageCode()
{
    m_MessageCodeIsSet = false;
}
std::vector<std::shared_ptr<IcmsTaxConfBase>>& IcmsTaxConf::getRelationShip()
{
    return m_RelationShip;
}
bool IcmsTaxConf::relationShipIsSet() const
{
    return m_RelationShipIsSet;
}
void IcmsTaxConf::unsetRelationShip()
{
    m_RelationShipIsSet = false;
}

}
}
}
}

