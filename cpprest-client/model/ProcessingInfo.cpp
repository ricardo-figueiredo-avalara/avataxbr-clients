/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ProcessingInfo.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ProcessingInfo::ProcessingInfo()
{
    m_VersionId = U("");
    m_VersionIdIsSet = false;
    m_Duration = 0.0;
    m_DurationIsSet = false;
    
}

ProcessingInfo::~ProcessingInfo()
{
}

void ProcessingInfo::validate()
{
    // TODO: implement validation
}

web::json::value ProcessingInfo::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_VersionIdIsSet)
    {
        val[U("versionId")] = ModelBase::toJson(m_VersionId);
    }
    if(m_DurationIsSet)
    {
        val[U("duration")] = ModelBase::toJson(m_Duration);
    }
    

    return val;
}

void ProcessingInfo::fromJson(web::json::value& val)
{
    if(val.has_field(U("versionId")))
    {
        setVersionId(ModelBase::stringFromJson(val[U("versionId")]));
        
    }
    if(val.has_field(U("duration")))
    {
        setDuration(ModelBase::doubleFromJson(val[U("duration")]));
    }
    
}

void ProcessingInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_VersionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("versionId"), m_VersionId));
        
    }
    if(m_DurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("duration"), m_Duration));
    }
    
}

void ProcessingInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("versionId")))
    {
        setVersionId(ModelBase::stringFromHttpContent(multipart->getContent(U("versionId"))));
        
    }
    if(multipart->hasContent(U("duration")))
    {
        setDuration(ModelBase::doubleFromHttpContent(multipart->getContent(U("duration"))));
    }
    
}


utility::string_t ProcessingInfo::getVersionId() const
{
    return m_VersionId;
}
void ProcessingInfo::setVersionId(utility::string_t value)
{
    m_VersionId = value;
    m_VersionIdIsSet = true;
}
bool ProcessingInfo::versionIdIsSet() const
{
    return m_VersionIdIsSet;
}
void ProcessingInfo::unsetVersionId()
{
    m_VersionIdIsSet = false;
}
double ProcessingInfo::getDuration() const
{
    return m_Duration;
}
void ProcessingInfo::setDuration(double value)
{
    m_Duration = value;
    m_DurationIsSet = true;
}
bool ProcessingInfo::durationIsSet() const
{
    return m_DurationIsSet;
}
void ProcessingInfo::unsetDuration()
{
    m_DurationIsSet = false;
}

}
}
}
}

