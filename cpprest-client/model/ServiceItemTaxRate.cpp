/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ServiceItemTaxRate.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ServiceItemTaxRate::ServiceItemTaxRate()
{
    m_TaxType = U("");
    m_TaxTypeIsSet = false;
    m_RateType = U("");
    m_RateTypeIsSet = false;
    m_Rate = 0.0;
    m_RateIsSet = false;
    m_IsExempt = false;
    m_IsExemptIsSet = false;
    m_Discount = 0.0;
    m_DiscountIsSet = false;
    m_Zone1 = 0;
    m_Zone1IsSet = false;
    m_Zone2 = 0;
    m_Zone2IsSet = false;
    m_PeriodIsSet = false;
    m_Reason = U("");
    m_ReasonIsSet = false;
    m_Message = U("");
    m_MessageIsSet = false;
    
}

ServiceItemTaxRate::~ServiceItemTaxRate()
{
}

void ServiceItemTaxRate::validate()
{
    // TODO: implement validation
}

web::json::value ServiceItemTaxRate::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TaxTypeIsSet)
    {
        val[U("taxType")] = ModelBase::toJson(m_TaxType);
    }
    if(m_RateTypeIsSet)
    {
        val[U("rateType")] = ModelBase::toJson(m_RateType);
    }
    if(m_RateIsSet)
    {
        val[U("rate")] = ModelBase::toJson(m_Rate);
    }
    if(m_IsExemptIsSet)
    {
        val[U("isExempt")] = ModelBase::toJson(m_IsExempt);
    }
    if(m_DiscountIsSet)
    {
        val[U("discount")] = ModelBase::toJson(m_Discount);
    }
    if(m_Zone1IsSet)
    {
        val[U("zone1")] = ModelBase::toJson(m_Zone1);
    }
    if(m_Zone2IsSet)
    {
        val[U("zone2")] = ModelBase::toJson(m_Zone2);
    }
    if(m_PeriodIsSet)
    {
        val[U("period")] = ModelBase::toJson(m_Period);
    }
    if(m_ReasonIsSet)
    {
        val[U("reason")] = ModelBase::toJson(m_Reason);
    }
    if(m_MessageIsSet)
    {
        val[U("message")] = ModelBase::toJson(m_Message);
    }
    

    return val;
}

void ServiceItemTaxRate::fromJson(web::json::value& val)
{
    if(val.has_field(U("taxType")))
    {
        setTaxType(ModelBase::stringFromJson(val[U("taxType")]));
        
    }
    if(val.has_field(U("rateType")))
    {
        setRateType(ModelBase::stringFromJson(val[U("rateType")]));
        
    }
    if(val.has_field(U("rate")))
    {
        setRate(ModelBase::doubleFromJson(val[U("rate")]));
    }
    if(val.has_field(U("isExempt")))
    {
        setIsExempt(ModelBase::boolFromJson(val[U("isExempt")]));
    }
    if(val.has_field(U("discount")))
    {
        setDiscount(ModelBase::doubleFromJson(val[U("discount")]));
    }
    if(val.has_field(U("zone1")))
    {
        setZone1(ModelBase::int32_tFromJson(val[U("zone1")]));
    }
    if(val.has_field(U("zone2")))
    {
        setZone2(ModelBase::int32_tFromJson(val[U("zone2")]));
    }
    if(val.has_field(U("period")))
    {
        if(!val[U("period")].is_null())
        {
            std::shared_ptr<ServiceItemTaxRate_period> newItem(new ServiceItemTaxRate_period());
            newItem->fromJson(val[U("period")]);
            setPeriod( newItem );
        }
        
    }
    if(val.has_field(U("reason")))
    {
        setReason(ModelBase::stringFromJson(val[U("reason")]));
        
    }
    if(val.has_field(U("message")))
    {
        setMessage(ModelBase::stringFromJson(val[U("message")]));
        
    }
    
}

void ServiceItemTaxRate::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_TaxTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("taxType"), m_TaxType));
        
    }
    if(m_RateTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("rateType"), m_RateType));
        
    }
    if(m_RateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("rate"), m_Rate));
    }
    if(m_IsExemptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("isExempt"), m_IsExempt));
    }
    if(m_DiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("discount"), m_Discount));
    }
    if(m_Zone1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("zone1"), m_Zone1));
    }
    if(m_Zone2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("zone2"), m_Zone2));
    }
    if(m_PeriodIsSet)
    {
        if (m_Period.get())
        {
            m_Period->toMultipart(multipart, U("period."));
        }
        
    }
    if(m_ReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("reason"), m_Reason));
        
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("message"), m_Message));
        
    }
    
}

void ServiceItemTaxRate::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("taxType")))
    {
        setTaxType(ModelBase::stringFromHttpContent(multipart->getContent(U("taxType"))));
        
    }
    if(multipart->hasContent(U("rateType")))
    {
        setRateType(ModelBase::stringFromHttpContent(multipart->getContent(U("rateType"))));
        
    }
    if(multipart->hasContent(U("rate")))
    {
        setRate(ModelBase::doubleFromHttpContent(multipart->getContent(U("rate"))));
    }
    if(multipart->hasContent(U("isExempt")))
    {
        setIsExempt(ModelBase::boolFromHttpContent(multipart->getContent(U("isExempt"))));
    }
    if(multipart->hasContent(U("discount")))
    {
        setDiscount(ModelBase::doubleFromHttpContent(multipart->getContent(U("discount"))));
    }
    if(multipart->hasContent(U("zone1")))
    {
        setZone1(ModelBase::int32_tFromHttpContent(multipart->getContent(U("zone1"))));
    }
    if(multipart->hasContent(U("zone2")))
    {
        setZone2(ModelBase::int32_tFromHttpContent(multipart->getContent(U("zone2"))));
    }
    if(multipart->hasContent(U("period")))
    {
        if(multipart->hasContent(U("period")))
        {
            std::shared_ptr<ServiceItemTaxRate_period> newItem(new ServiceItemTaxRate_period());
            newItem->fromMultiPart(multipart, U("period."));
            setPeriod( newItem );
        }
        
    }
    if(multipart->hasContent(U("reason")))
    {
        setReason(ModelBase::stringFromHttpContent(multipart->getContent(U("reason"))));
        
    }
    if(multipart->hasContent(U("message")))
    {
        setMessage(ModelBase::stringFromHttpContent(multipart->getContent(U("message"))));
        
    }
    
}


utility::string_t ServiceItemTaxRate::getTaxType() const
{
    return m_TaxType;
}
void ServiceItemTaxRate::setTaxType(utility::string_t value)
{
    m_TaxType = value;
    m_TaxTypeIsSet = true;
}
bool ServiceItemTaxRate::taxTypeIsSet() const
{
    return m_TaxTypeIsSet;
}
void ServiceItemTaxRate::unsetTaxType()
{
    m_TaxTypeIsSet = false;
}
utility::string_t ServiceItemTaxRate::getRateType() const
{
    return m_RateType;
}
void ServiceItemTaxRate::setRateType(utility::string_t value)
{
    m_RateType = value;
    m_RateTypeIsSet = true;
}
bool ServiceItemTaxRate::rateTypeIsSet() const
{
    return m_RateTypeIsSet;
}
void ServiceItemTaxRate::unsetRateType()
{
    m_RateTypeIsSet = false;
}
double ServiceItemTaxRate::getRate() const
{
    return m_Rate;
}
void ServiceItemTaxRate::setRate(double value)
{
    m_Rate = value;
    m_RateIsSet = true;
}
bool ServiceItemTaxRate::rateIsSet() const
{
    return m_RateIsSet;
}
void ServiceItemTaxRate::unsetRate()
{
    m_RateIsSet = false;
}
bool ServiceItemTaxRate::getIsExempt() const
{
    return m_IsExempt;
}
void ServiceItemTaxRate::setIsExempt(bool value)
{
    m_IsExempt = value;
    m_IsExemptIsSet = true;
}
bool ServiceItemTaxRate::isExemptIsSet() const
{
    return m_IsExemptIsSet;
}
void ServiceItemTaxRate::unsetIsExempt()
{
    m_IsExemptIsSet = false;
}
double ServiceItemTaxRate::getDiscount() const
{
    return m_Discount;
}
void ServiceItemTaxRate::setDiscount(double value)
{
    m_Discount = value;
    m_DiscountIsSet = true;
}
bool ServiceItemTaxRate::discountIsSet() const
{
    return m_DiscountIsSet;
}
void ServiceItemTaxRate::unsetDiscount()
{
    m_DiscountIsSet = false;
}
int32_t ServiceItemTaxRate::getZone1() const
{
    return m_Zone1;
}
void ServiceItemTaxRate::setZone1(int32_t value)
{
    m_Zone1 = value;
    m_Zone1IsSet = true;
}
bool ServiceItemTaxRate::zone1IsSet() const
{
    return m_Zone1IsSet;
}
void ServiceItemTaxRate::unsetZone1()
{
    m_Zone1IsSet = false;
}
int32_t ServiceItemTaxRate::getZone2() const
{
    return m_Zone2;
}
void ServiceItemTaxRate::setZone2(int32_t value)
{
    m_Zone2 = value;
    m_Zone2IsSet = true;
}
bool ServiceItemTaxRate::zone2IsSet() const
{
    return m_Zone2IsSet;
}
void ServiceItemTaxRate::unsetZone2()
{
    m_Zone2IsSet = false;
}
std::shared_ptr<ServiceItemTaxRate_period> ServiceItemTaxRate::getPeriod() const
{
    return m_Period;
}
void ServiceItemTaxRate::setPeriod(std::shared_ptr<ServiceItemTaxRate_period> value)
{
    m_Period = value;
    m_PeriodIsSet = true;
}
bool ServiceItemTaxRate::periodIsSet() const
{
    return m_PeriodIsSet;
}
void ServiceItemTaxRate::unsetPeriod()
{
    m_PeriodIsSet = false;
}
utility::string_t ServiceItemTaxRate::getReason() const
{
    return m_Reason;
}
void ServiceItemTaxRate::setReason(utility::string_t value)
{
    m_Reason = value;
    m_ReasonIsSet = true;
}
bool ServiceItemTaxRate::reasonIsSet() const
{
    return m_ReasonIsSet;
}
void ServiceItemTaxRate::unsetReason()
{
    m_ReasonIsSet = false;
}
utility::string_t ServiceItemTaxRate::getMessage() const
{
    return m_Message;
}
void ServiceItemTaxRate::setMessage(utility::string_t value)
{
    m_Message = value;
    m_MessageIsSet = true;
}
bool ServiceItemTaxRate::messageIsSet() const
{
    return m_MessageIsSet;
}
void ServiceItemTaxRate::unsetMessage()
{
    m_MessageIsSet = false;
}

}
}
}
}

