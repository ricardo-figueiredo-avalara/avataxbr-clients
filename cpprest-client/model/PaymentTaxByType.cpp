/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PaymentTaxByType.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PaymentTaxByType::PaymentTaxByType()
{
    m_IrrfIsSet = false;
    m_InssRfIsSet = false;
    m_IssRfIsSet = false;
    m_PisRfIsSet = false;
    m_CofinsRfIsSet = false;
    m_CsllRfIsSet = false;
    
}

PaymentTaxByType::~PaymentTaxByType()
{
}

void PaymentTaxByType::validate()
{
    // TODO: implement validation
}

web::json::value PaymentTaxByType::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IrrfIsSet)
    {
        val[U("irrf")] = ModelBase::toJson(m_Irrf);
    }
    if(m_InssRfIsSet)
    {
        val[U("inssRf")] = ModelBase::toJson(m_InssRf);
    }
    if(m_IssRfIsSet)
    {
        val[U("issRf")] = ModelBase::toJson(m_IssRf);
    }
    if(m_PisRfIsSet)
    {
        val[U("pisRf")] = ModelBase::toJson(m_PisRf);
    }
    if(m_CofinsRfIsSet)
    {
        val[U("cofinsRf")] = ModelBase::toJson(m_CofinsRf);
    }
    if(m_CsllRfIsSet)
    {
        val[U("csllRf")] = ModelBase::toJson(m_CsllRf);
    }
    

    return val;
}

void PaymentTaxByType::fromJson(web::json::value& val)
{
    if(val.has_field(U("irrf")))
    {
        if(!val[U("irrf")].is_null())
        {
            std::shared_ptr<TaxByTypeTax> newItem(new TaxByTypeTax());
            newItem->fromJson(val[U("irrf")]);
            setIrrf( newItem );
        }
        
    }
    if(val.has_field(U("inssRf")))
    {
        if(!val[U("inssRf")].is_null())
        {
            std::shared_ptr<TaxByTypeTax> newItem(new TaxByTypeTax());
            newItem->fromJson(val[U("inssRf")]);
            setInssRf( newItem );
        }
        
    }
    if(val.has_field(U("issRf")))
    {
        if(!val[U("issRf")].is_null())
        {
            std::shared_ptr<TaxByTypeTax> newItem(new TaxByTypeTax());
            newItem->fromJson(val[U("issRf")]);
            setIssRf( newItem );
        }
        
    }
    if(val.has_field(U("pisRf")))
    {
        if(!val[U("pisRf")].is_null())
        {
            std::shared_ptr<TaxByTypeTax> newItem(new TaxByTypeTax());
            newItem->fromJson(val[U("pisRf")]);
            setPisRf( newItem );
        }
        
    }
    if(val.has_field(U("cofinsRf")))
    {
        if(!val[U("cofinsRf")].is_null())
        {
            std::shared_ptr<TaxByTypeTax> newItem(new TaxByTypeTax());
            newItem->fromJson(val[U("cofinsRf")]);
            setCofinsRf( newItem );
        }
        
    }
    if(val.has_field(U("csllRf")))
    {
        if(!val[U("csllRf")].is_null())
        {
            std::shared_ptr<TaxByTypeTax> newItem(new TaxByTypeTax());
            newItem->fromJson(val[U("csllRf")]);
            setCsllRf( newItem );
        }
        
    }
    
}

void PaymentTaxByType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_IrrfIsSet)
    {
        if (m_Irrf.get())
        {
            m_Irrf->toMultipart(multipart, U("irrf."));
        }
        
    }
    if(m_InssRfIsSet)
    {
        if (m_InssRf.get())
        {
            m_InssRf->toMultipart(multipart, U("inssRf."));
        }
        
    }
    if(m_IssRfIsSet)
    {
        if (m_IssRf.get())
        {
            m_IssRf->toMultipart(multipart, U("issRf."));
        }
        
    }
    if(m_PisRfIsSet)
    {
        if (m_PisRf.get())
        {
            m_PisRf->toMultipart(multipart, U("pisRf."));
        }
        
    }
    if(m_CofinsRfIsSet)
    {
        if (m_CofinsRf.get())
        {
            m_CofinsRf->toMultipart(multipart, U("cofinsRf."));
        }
        
    }
    if(m_CsllRfIsSet)
    {
        if (m_CsllRf.get())
        {
            m_CsllRf->toMultipart(multipart, U("csllRf."));
        }
        
    }
    
}

void PaymentTaxByType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("irrf")))
    {
        if(multipart->hasContent(U("irrf")))
        {
            std::shared_ptr<TaxByTypeTax> newItem(new TaxByTypeTax());
            newItem->fromMultiPart(multipart, U("irrf."));
            setIrrf( newItem );
        }
        
    }
    if(multipart->hasContent(U("inssRf")))
    {
        if(multipart->hasContent(U("inssRf")))
        {
            std::shared_ptr<TaxByTypeTax> newItem(new TaxByTypeTax());
            newItem->fromMultiPart(multipart, U("inssRf."));
            setInssRf( newItem );
        }
        
    }
    if(multipart->hasContent(U("issRf")))
    {
        if(multipart->hasContent(U("issRf")))
        {
            std::shared_ptr<TaxByTypeTax> newItem(new TaxByTypeTax());
            newItem->fromMultiPart(multipart, U("issRf."));
            setIssRf( newItem );
        }
        
    }
    if(multipart->hasContent(U("pisRf")))
    {
        if(multipart->hasContent(U("pisRf")))
        {
            std::shared_ptr<TaxByTypeTax> newItem(new TaxByTypeTax());
            newItem->fromMultiPart(multipart, U("pisRf."));
            setPisRf( newItem );
        }
        
    }
    if(multipart->hasContent(U("cofinsRf")))
    {
        if(multipart->hasContent(U("cofinsRf")))
        {
            std::shared_ptr<TaxByTypeTax> newItem(new TaxByTypeTax());
            newItem->fromMultiPart(multipart, U("cofinsRf."));
            setCofinsRf( newItem );
        }
        
    }
    if(multipart->hasContent(U("csllRf")))
    {
        if(multipart->hasContent(U("csllRf")))
        {
            std::shared_ptr<TaxByTypeTax> newItem(new TaxByTypeTax());
            newItem->fromMultiPart(multipart, U("csllRf."));
            setCsllRf( newItem );
        }
        
    }
    
}


std::shared_ptr<TaxByTypeTax> PaymentTaxByType::getIrrf() const
{
    return m_Irrf;
}
void PaymentTaxByType::setIrrf(std::shared_ptr<TaxByTypeTax> value)
{
    m_Irrf = value;
    m_IrrfIsSet = true;
}
bool PaymentTaxByType::irrfIsSet() const
{
    return m_IrrfIsSet;
}
void PaymentTaxByType::unsetIrrf()
{
    m_IrrfIsSet = false;
}
std::shared_ptr<TaxByTypeTax> PaymentTaxByType::getInssRf() const
{
    return m_InssRf;
}
void PaymentTaxByType::setInssRf(std::shared_ptr<TaxByTypeTax> value)
{
    m_InssRf = value;
    m_InssRfIsSet = true;
}
bool PaymentTaxByType::inssRfIsSet() const
{
    return m_InssRfIsSet;
}
void PaymentTaxByType::unsetInssRf()
{
    m_InssRfIsSet = false;
}
std::shared_ptr<TaxByTypeTax> PaymentTaxByType::getIssRf() const
{
    return m_IssRf;
}
void PaymentTaxByType::setIssRf(std::shared_ptr<TaxByTypeTax> value)
{
    m_IssRf = value;
    m_IssRfIsSet = true;
}
bool PaymentTaxByType::issRfIsSet() const
{
    return m_IssRfIsSet;
}
void PaymentTaxByType::unsetIssRf()
{
    m_IssRfIsSet = false;
}
std::shared_ptr<TaxByTypeTax> PaymentTaxByType::getPisRf() const
{
    return m_PisRf;
}
void PaymentTaxByType::setPisRf(std::shared_ptr<TaxByTypeTax> value)
{
    m_PisRf = value;
    m_PisRfIsSet = true;
}
bool PaymentTaxByType::pisRfIsSet() const
{
    return m_PisRfIsSet;
}
void PaymentTaxByType::unsetPisRf()
{
    m_PisRfIsSet = false;
}
std::shared_ptr<TaxByTypeTax> PaymentTaxByType::getCofinsRf() const
{
    return m_CofinsRf;
}
void PaymentTaxByType::setCofinsRf(std::shared_ptr<TaxByTypeTax> value)
{
    m_CofinsRf = value;
    m_CofinsRfIsSet = true;
}
bool PaymentTaxByType::cofinsRfIsSet() const
{
    return m_CofinsRfIsSet;
}
void PaymentTaxByType::unsetCofinsRf()
{
    m_CofinsRfIsSet = false;
}
std::shared_ptr<TaxByTypeTax> PaymentTaxByType::getCsllRf() const
{
    return m_CsllRf;
}
void PaymentTaxByType::setCsllRf(std::shared_ptr<TaxByTypeTax> value)
{
    m_CsllRf = value;
    m_CsllRfIsSet = true;
}
bool PaymentTaxByType::csllRfIsSet() const
{
    return m_CsllRfIsSet;
}
void PaymentTaxByType::unsetCsllRf()
{
    m_CsllRfIsSet = false;
}

}
}
}
}

