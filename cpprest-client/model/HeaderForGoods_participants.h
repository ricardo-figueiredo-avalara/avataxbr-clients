/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * HeaderForGoods_participants.h
 *
 * List of transaction participants, Seller, Buyer, Carrier
 */

#ifndef HeaderForGoods_participants_H_
#define HeaderForGoods_participants_H_


#include "ModelBase.h"

#include "EntityForGoods.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// List of transaction participants, Seller, Buyer, Carrier
/// </summary>
class  HeaderForGoods_participants
    : public ModelBase
{
public:
    HeaderForGoods_participants();
    virtual ~HeaderForGoods_participants();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// HeaderForGoods_participants members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityForGoods> getEntity() const;
    void setEntity(std::shared_ptr<EntityForGoods> value);
    bool entityIsSet() const;
    void unsetEntity();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityForGoods> getTransporter() const;
    void setTransporter(std::shared_ptr<EntityForGoods> value);
    bool transporterIsSet() const;
    void unsetTransporter();

protected:
    std::shared_ptr<EntityForGoods> m_Entity;
    bool m_EntityIsSet;
std::shared_ptr<EntityForGoods> m_Transporter;
    bool m_TransporterIsSet;
};

}
}
}
}

#endif /* HeaderForGoods_participants_H_ */
