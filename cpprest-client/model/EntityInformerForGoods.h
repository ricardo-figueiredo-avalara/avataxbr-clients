/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * EntityInformerForGoods.h
 *
 * 
 */

#ifndef EntityInformerForGoods_H_
#define EntityInformerForGoods_H_


#include "ModelBase.h"

#include "EntityInformerForGoods_federalTaxRegime.h"
#include "Address.h"
#include "EntityType.h"
#include "FederalTaxRegime.h"
#include <cpprest/details/basic_types.h>
#include "Object.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  EntityInformerForGoods
    : public ModelBase
{
public:
    EntityInformerForGoods();
    virtual ~EntityInformerForGoods();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// EntityInformerForGoods members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityType> getType() const;
    void setType(std::shared_ptr<EntityType> value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FederalTaxRegime> getTaxRegime() const;
    void setTaxRegime(std::shared_ptr<FederalTaxRegime> value);
    bool taxRegimeIsSet() const;
    void unsetTaxRegime();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityInformerForGoods_federalTaxRegime> getFederalTaxRegime() const;
    void setFederalTaxRegime(std::shared_ptr<EntityInformerForGoods_federalTaxRegime> value);
    bool federalTaxRegimeIsSet() const;
    void unsetFederalTaxRegime();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCityCode() const;
    void setCityCode(utility::string_t value);
    bool cityCodeIsSet() const;
    void unsetCityCode();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Address> getAddress() const;
    void setAddress(std::shared_ptr<Address> value);
    bool addressIsSet() const;
    void unsetAddress();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getDetails() const;
    void setDetails(std::shared_ptr<Object> value);
    bool detailsIsSet() const;
    void unsetDetails();
    /// <summary>
    /// 
    /// </summary>
    bool getIcmsTaxPayer() const;
    void setIcmsTaxPayer(bool value);
    bool icmsTaxPayerIsSet() const;
    void unsetIcmsTaxPayer();

protected:
    std::shared_ptr<EntityType> m_Type;
    bool m_TypeIsSet;
std::shared_ptr<FederalTaxRegime> m_TaxRegime;
    bool m_TaxRegimeIsSet;
std::shared_ptr<EntityInformerForGoods_federalTaxRegime> m_FederalTaxRegime;
    bool m_FederalTaxRegimeIsSet;
utility::string_t m_CityCode;
    bool m_CityCodeIsSet;
std::shared_ptr<Address> m_Address;
    bool m_AddressIsSet;
std::shared_ptr<Object> m_Details;
    bool m_DetailsIsSet;
bool m_IcmsTaxPayer;
    bool m_IcmsTaxPayerIsSet;
};

}
}
}
}

#endif /* EntityInformerForGoods_H_ */
