/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SalesLinesOut.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SalesLinesOut::SalesLinesOut()
{
    m_LineCode = 0;
    m_LineCodeIsSet = false;
    m_ItemCode = U("");
    m_NumberOfItems = 0.0;
    m_NumberOfItemsIsSet = false;
    m_LineAmount = 0.0;
    m_LineAmountIsSet = false;
    m_ItemDescription = U("");
    m_ItemDescriptionIsSet = false;
    m_LineTaxedDiscount = 0.0;
    m_LineTaxedDiscountIsSet = false;
    m_LineUntaxedDiscount = 0.0;
    m_LineUntaxedDiscountIsSet = false;
    m_TaxDeductionsIsSet = false;
    m_AvalaraGoodsAndServicesType = U("");
    m_AvalaraGoodsAndServicesTypeIsSet = false;
    m_LineNetValue = 0.0;
    m_LineNetValueIsSet = false;
    m_Cst = U("");
    m_CstIsSet = false;
    m_CstRf = U("");
    m_CstRfIsSet = false;
    m_CalculatedTaxIsSet = false;
    
}

SalesLinesOut::~SalesLinesOut()
{
}

void SalesLinesOut::validate()
{
    // TODO: implement validation
}

web::json::value SalesLinesOut::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_LineCodeIsSet)
    {
        val[U("lineCode")] = ModelBase::toJson(m_LineCode);
    }
    val[U("itemCode")] = ModelBase::toJson(m_ItemCode);
    if(m_NumberOfItemsIsSet)
    {
        val[U("numberOfItems")] = ModelBase::toJson(m_NumberOfItems);
    }
    if(m_LineAmountIsSet)
    {
        val[U("lineAmount")] = ModelBase::toJson(m_LineAmount);
    }
    if(m_ItemDescriptionIsSet)
    {
        val[U("itemDescription")] = ModelBase::toJson(m_ItemDescription);
    }
    if(m_LineTaxedDiscountIsSet)
    {
        val[U("lineTaxedDiscount")] = ModelBase::toJson(m_LineTaxedDiscount);
    }
    if(m_LineUntaxedDiscountIsSet)
    {
        val[U("lineUntaxedDiscount")] = ModelBase::toJson(m_LineUntaxedDiscount);
    }
    if(m_TaxDeductionsIsSet)
    {
        val[U("taxDeductions")] = ModelBase::toJson(m_TaxDeductions);
    }
    if(m_AvalaraGoodsAndServicesTypeIsSet)
    {
        val[U("avalaraGoodsAndServicesType")] = ModelBase::toJson(m_AvalaraGoodsAndServicesType);
    }
    if(m_LineNetValueIsSet)
    {
        val[U("lineNetValue")] = ModelBase::toJson(m_LineNetValue);
    }
    if(m_CstIsSet)
    {
        val[U("cst")] = ModelBase::toJson(m_Cst);
    }
    if(m_CstRfIsSet)
    {
        val[U("cstRf")] = ModelBase::toJson(m_CstRf);
    }
    if(m_CalculatedTaxIsSet)
    {
        val[U("calculatedTax")] = ModelBase::toJson(m_CalculatedTax);
    }
    

    return val;
}

void SalesLinesOut::fromJson(web::json::value& val)
{
    if(val.has_field(U("lineCode")))
    {
        setLineCode(ModelBase::int32_tFromJson(val[U("lineCode")]));
    }
    setItemCode(ModelBase::stringFromJson(val[U("itemCode")]));
    if(val.has_field(U("numberOfItems")))
    {
        setNumberOfItems(ModelBase::doubleFromJson(val[U("numberOfItems")]));
    }
    if(val.has_field(U("lineAmount")))
    {
        setLineAmount(ModelBase::doubleFromJson(val[U("lineAmount")]));
    }
    if(val.has_field(U("itemDescription")))
    {
        setItemDescription(ModelBase::stringFromJson(val[U("itemDescription")]));
        
    }
    if(val.has_field(U("lineTaxedDiscount")))
    {
        setLineTaxedDiscount(ModelBase::doubleFromJson(val[U("lineTaxedDiscount")]));
    }
    if(val.has_field(U("lineUntaxedDiscount")))
    {
        setLineUntaxedDiscount(ModelBase::doubleFromJson(val[U("lineUntaxedDiscount")]));
    }
    if(val.has_field(U("taxDeductions")))
    {
        if(!val[U("taxDeductions")].is_null())
        {
            std::shared_ptr<SalesLinesOut_taxDeductions> newItem(new SalesLinesOut_taxDeductions());
            newItem->fromJson(val[U("taxDeductions")]);
            setTaxDeductions( newItem );
        }
        
    }
    if(val.has_field(U("avalaraGoodsAndServicesType")))
    {
        setAvalaraGoodsAndServicesType(ModelBase::stringFromJson(val[U("avalaraGoodsAndServicesType")]));
        
    }
    if(val.has_field(U("lineNetValue")))
    {
        setLineNetValue(ModelBase::doubleFromJson(val[U("lineNetValue")]));
    }
    if(val.has_field(U("cst")))
    {
        setCst(ModelBase::stringFromJson(val[U("cst")]));
        
    }
    if(val.has_field(U("cstRf")))
    {
        setCstRf(ModelBase::stringFromJson(val[U("cstRf")]));
        
    }
    if(val.has_field(U("calculatedTax")))
    {
        if(!val[U("calculatedTax")].is_null())
        {
            std::shared_ptr<SalesCalculatedTax> newItem(new SalesCalculatedTax());
            newItem->fromJson(val[U("calculatedTax")]);
            setCalculatedTax( newItem );
        }
        
    }
    
}

void SalesLinesOut::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_LineCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lineCode"), m_LineCode));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("itemCode"), m_ItemCode));
    if(m_NumberOfItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("numberOfItems"), m_NumberOfItems));
    }
    if(m_LineAmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lineAmount"), m_LineAmount));
    }
    if(m_ItemDescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("itemDescription"), m_ItemDescription));
        
    }
    if(m_LineTaxedDiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lineTaxedDiscount"), m_LineTaxedDiscount));
    }
    if(m_LineUntaxedDiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lineUntaxedDiscount"), m_LineUntaxedDiscount));
    }
    if(m_TaxDeductionsIsSet)
    {
        if (m_TaxDeductions.get())
        {
            m_TaxDeductions->toMultipart(multipart, U("taxDeductions."));
        }
        
    }
    if(m_AvalaraGoodsAndServicesTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("avalaraGoodsAndServicesType"), m_AvalaraGoodsAndServicesType));
        
    }
    if(m_LineNetValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lineNetValue"), m_LineNetValue));
    }
    if(m_CstIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cst"), m_Cst));
        
    }
    if(m_CstRfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cstRf"), m_CstRf));
        
    }
    if(m_CalculatedTaxIsSet)
    {
        if (m_CalculatedTax.get())
        {
            m_CalculatedTax->toMultipart(multipart, U("calculatedTax."));
        }
        
    }
    
}

void SalesLinesOut::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("lineCode")))
    {
        setLineCode(ModelBase::int32_tFromHttpContent(multipart->getContent(U("lineCode"))));
    }
    setItemCode(ModelBase::stringFromHttpContent(multipart->getContent(U("itemCode"))));
    if(multipart->hasContent(U("numberOfItems")))
    {
        setNumberOfItems(ModelBase::doubleFromHttpContent(multipart->getContent(U("numberOfItems"))));
    }
    if(multipart->hasContent(U("lineAmount")))
    {
        setLineAmount(ModelBase::doubleFromHttpContent(multipart->getContent(U("lineAmount"))));
    }
    if(multipart->hasContent(U("itemDescription")))
    {
        setItemDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("itemDescription"))));
        
    }
    if(multipart->hasContent(U("lineTaxedDiscount")))
    {
        setLineTaxedDiscount(ModelBase::doubleFromHttpContent(multipart->getContent(U("lineTaxedDiscount"))));
    }
    if(multipart->hasContent(U("lineUntaxedDiscount")))
    {
        setLineUntaxedDiscount(ModelBase::doubleFromHttpContent(multipart->getContent(U("lineUntaxedDiscount"))));
    }
    if(multipart->hasContent(U("taxDeductions")))
    {
        if(multipart->hasContent(U("taxDeductions")))
        {
            std::shared_ptr<SalesLinesOut_taxDeductions> newItem(new SalesLinesOut_taxDeductions());
            newItem->fromMultiPart(multipart, U("taxDeductions."));
            setTaxDeductions( newItem );
        }
        
    }
    if(multipart->hasContent(U("avalaraGoodsAndServicesType")))
    {
        setAvalaraGoodsAndServicesType(ModelBase::stringFromHttpContent(multipart->getContent(U("avalaraGoodsAndServicesType"))));
        
    }
    if(multipart->hasContent(U("lineNetValue")))
    {
        setLineNetValue(ModelBase::doubleFromHttpContent(multipart->getContent(U("lineNetValue"))));
    }
    if(multipart->hasContent(U("cst")))
    {
        setCst(ModelBase::stringFromHttpContent(multipart->getContent(U("cst"))));
        
    }
    if(multipart->hasContent(U("cstRf")))
    {
        setCstRf(ModelBase::stringFromHttpContent(multipart->getContent(U("cstRf"))));
        
    }
    if(multipart->hasContent(U("calculatedTax")))
    {
        if(multipart->hasContent(U("calculatedTax")))
        {
            std::shared_ptr<SalesCalculatedTax> newItem(new SalesCalculatedTax());
            newItem->fromMultiPart(multipart, U("calculatedTax."));
            setCalculatedTax( newItem );
        }
        
    }
    
}


int32_t SalesLinesOut::getLineCode() const
{
    return m_LineCode;
}
void SalesLinesOut::setLineCode(int32_t value)
{
    m_LineCode = value;
    m_LineCodeIsSet = true;
}
bool SalesLinesOut::lineCodeIsSet() const
{
    return m_LineCodeIsSet;
}
void SalesLinesOut::unsetLineCode()
{
    m_LineCodeIsSet = false;
}
utility::string_t SalesLinesOut::getItemCode() const
{
    return m_ItemCode;
}
void SalesLinesOut::setItemCode(utility::string_t value)
{
    m_ItemCode = value;
    
}
double SalesLinesOut::getNumberOfItems() const
{
    return m_NumberOfItems;
}
void SalesLinesOut::setNumberOfItems(double value)
{
    m_NumberOfItems = value;
    m_NumberOfItemsIsSet = true;
}
bool SalesLinesOut::numberOfItemsIsSet() const
{
    return m_NumberOfItemsIsSet;
}
void SalesLinesOut::unsetNumberOfItems()
{
    m_NumberOfItemsIsSet = false;
}
double SalesLinesOut::getLineAmount() const
{
    return m_LineAmount;
}
void SalesLinesOut::setLineAmount(double value)
{
    m_LineAmount = value;
    m_LineAmountIsSet = true;
}
bool SalesLinesOut::lineAmountIsSet() const
{
    return m_LineAmountIsSet;
}
void SalesLinesOut::unsetLineAmount()
{
    m_LineAmountIsSet = false;
}
utility::string_t SalesLinesOut::getItemDescription() const
{
    return m_ItemDescription;
}
void SalesLinesOut::setItemDescription(utility::string_t value)
{
    m_ItemDescription = value;
    m_ItemDescriptionIsSet = true;
}
bool SalesLinesOut::itemDescriptionIsSet() const
{
    return m_ItemDescriptionIsSet;
}
void SalesLinesOut::unsetItemDescription()
{
    m_ItemDescriptionIsSet = false;
}
double SalesLinesOut::getLineTaxedDiscount() const
{
    return m_LineTaxedDiscount;
}
void SalesLinesOut::setLineTaxedDiscount(double value)
{
    m_LineTaxedDiscount = value;
    m_LineTaxedDiscountIsSet = true;
}
bool SalesLinesOut::lineTaxedDiscountIsSet() const
{
    return m_LineTaxedDiscountIsSet;
}
void SalesLinesOut::unsetLineTaxedDiscount()
{
    m_LineTaxedDiscountIsSet = false;
}
double SalesLinesOut::getLineUntaxedDiscount() const
{
    return m_LineUntaxedDiscount;
}
void SalesLinesOut::setLineUntaxedDiscount(double value)
{
    m_LineUntaxedDiscount = value;
    m_LineUntaxedDiscountIsSet = true;
}
bool SalesLinesOut::lineUntaxedDiscountIsSet() const
{
    return m_LineUntaxedDiscountIsSet;
}
void SalesLinesOut::unsetLineUntaxedDiscount()
{
    m_LineUntaxedDiscountIsSet = false;
}
std::shared_ptr<SalesLinesOut_taxDeductions> SalesLinesOut::getTaxDeductions() const
{
    return m_TaxDeductions;
}
void SalesLinesOut::setTaxDeductions(std::shared_ptr<SalesLinesOut_taxDeductions> value)
{
    m_TaxDeductions = value;
    m_TaxDeductionsIsSet = true;
}
bool SalesLinesOut::taxDeductionsIsSet() const
{
    return m_TaxDeductionsIsSet;
}
void SalesLinesOut::unsetTaxDeductions()
{
    m_TaxDeductionsIsSet = false;
}
utility::string_t SalesLinesOut::getAvalaraGoodsAndServicesType() const
{
    return m_AvalaraGoodsAndServicesType;
}
void SalesLinesOut::setAvalaraGoodsAndServicesType(utility::string_t value)
{
    m_AvalaraGoodsAndServicesType = value;
    m_AvalaraGoodsAndServicesTypeIsSet = true;
}
bool SalesLinesOut::avalaraGoodsAndServicesTypeIsSet() const
{
    return m_AvalaraGoodsAndServicesTypeIsSet;
}
void SalesLinesOut::unsetAvalaraGoodsAndServicesType()
{
    m_AvalaraGoodsAndServicesTypeIsSet = false;
}
double SalesLinesOut::getLineNetValue() const
{
    return m_LineNetValue;
}
void SalesLinesOut::setLineNetValue(double value)
{
    m_LineNetValue = value;
    m_LineNetValueIsSet = true;
}
bool SalesLinesOut::lineNetValueIsSet() const
{
    return m_LineNetValueIsSet;
}
void SalesLinesOut::unsetLineNetValue()
{
    m_LineNetValueIsSet = false;
}
utility::string_t SalesLinesOut::getCst() const
{
    return m_Cst;
}
void SalesLinesOut::setCst(utility::string_t value)
{
    m_Cst = value;
    m_CstIsSet = true;
}
bool SalesLinesOut::cstIsSet() const
{
    return m_CstIsSet;
}
void SalesLinesOut::unsetCst()
{
    m_CstIsSet = false;
}
utility::string_t SalesLinesOut::getCstRf() const
{
    return m_CstRf;
}
void SalesLinesOut::setCstRf(utility::string_t value)
{
    m_CstRf = value;
    m_CstRfIsSet = true;
}
bool SalesLinesOut::cstRfIsSet() const
{
    return m_CstRfIsSet;
}
void SalesLinesOut::unsetCstRf()
{
    m_CstRfIsSet = false;
}
std::shared_ptr<SalesCalculatedTax> SalesLinesOut::getCalculatedTax() const
{
    return m_CalculatedTax;
}
void SalesLinesOut::setCalculatedTax(std::shared_ptr<SalesCalculatedTax> value)
{
    m_CalculatedTax = value;
    m_CalculatedTaxIsSet = true;
}
bool SalesLinesOut::calculatedTaxIsSet() const
{
    return m_CalculatedTaxIsSet;
}
void SalesLinesOut::unsetCalculatedTax()
{
    m_CalculatedTaxIsSet = false;
}

}
}
}
}

