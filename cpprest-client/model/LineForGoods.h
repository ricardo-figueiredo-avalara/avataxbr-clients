/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * LineForGoods.h
 *
 * 
 */

#ifndef LineForGoods_H_
#define LineForGoods_H_


#include "ModelBase.h"

#include "Vehicle.h"
#include "Weapon.h"
#include "LineForGoods_calculatedTax.h"
#include "LineForGoods_di.h"
#include "Fuel.h"
#include "LineForGoods_icmsTaxRelief.h"
#include <cpprest/details/basic_types.h>
#include "LineForGoods_export.h"
#include "Medicine.h"
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  LineForGoods
    : public ModelBase
{
public:
    LineForGoods();
    virtual ~LineForGoods();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LineForGoods members

    /// <summary>
    /// This string is a unique identifier for this line in the transaction
    /// </summary>
    int32_t getLineCode() const;
    void setLineCode(int32_t value);
        /// <summary>
    /// This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states.
    /// </summary>
    utility::string_t getItemCode() const;
    void setItemCode(utility::string_t value);
        /// <summary>
    /// AGAST CODE for itemCode
    /// </summary>
    utility::string_t getAvalaraGoodsAndServicesType() const;
    void setAvalaraGoodsAndServicesType(utility::string_t value);
    bool avalaraGoodsAndServicesTypeIsSet() const;
    void unsetAvalaraGoodsAndServicesType();
    /// <summary>
    /// This decimal 11 integers and 1 to 4 decimals captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1
    /// </summary>
    double getNumberOfItems() const;
    void setNumberOfItems(double value);
        /// <summary>
    /// when is return operation this field inform the percentage of returned itens. This decimal max 3 integers and 2 decimals, v &gt;&#x3D;0.00 and v &lt;&#x3D; 100.00
    /// </summary>
    double getReturnedPercentageAmount() const;
    void setReturnedPercentageAmount(double value);
    bool returnedPercentageAmountIsSet() const;
    void unsetReturnedPercentageAmount();
    /// <summary>
    /// This decimal 11 integers and 1 to 10 decimals captures the unit price of this line.
    /// </summary>
    double getLineUnitPrice() const;
    void setLineUnitPrice(double value);
    bool lineUnitPriceIsSet() const;
    void unsetLineUnitPrice();
    /// <summary>
    /// In its simplest form lineAmount &#x3D; (item price * numberOfItems). If taxIncluded is &#39;true&#39;, lineAmount &#x3D; (item price * numberOfItems + tax).
    /// </summary>
    double getLineAmount() const;
    void setLineAmount(double value);
        /// <summary>
    /// This string captures the description of the item represented by this line, will be used LC 116
    /// </summary>
    utility::string_t getItemDescription() const;
    void setItemDescription(utility::string_t value);
        /// <summary>
    /// Discount conditional, This decimal 13 integers and 0 to 2 decimals
    /// </summary>
    double getLineTaxedDiscount() const;
    void setLineTaxedDiscount(double value);
    bool lineTaxedDiscountIsSet() const;
    void unsetLineTaxedDiscount();
    /// <summary>
    /// discount unconditional, This decimal 13 integers and 0 to 2 decimals
    /// </summary>
    double getLineUntaxedDiscount() const;
    void setLineUntaxedDiscount(double value);
    bool lineUntaxedDiscountIsSet() const;
    void unsetLineUntaxedDiscount();
    /// <summary>
    /// This is a enumeration folowing table
    /// </summary>
    utility::string_t getUseType() const;
    void setUseType(utility::string_t value);
        /// <summary>
    /// Reference to process configurantion of this transaction, See ProcessScenario definition
    /// </summary>
    utility::string_t getProcessScenario() const;
    void setProcessScenario(utility::string_t value);
        /// <summary>
    /// Fiscal Operation Code of transport service
    /// </summary>
    int32_t getCfop() const;
    void setCfop(int32_t value);
    bool cfopIsSet() const;
    void unsetCfop();
    /// <summary>
    /// return if this transaction has stock impact for this process or CFOP
    /// </summary>
    bool getHasStockImpact() const;
    void setHasStockImpact(bool value);
    bool hasStockImpactIsSet() const;
    void unsetHasStockImpact();
    /// <summary>
    /// return if this transaction has finantial impact for this process or CFOP
    /// </summary>
    bool getHasFinantialImpact() const;
    void setHasFinantialImpact(bool value);
    bool hasFinantialImpactIsSet() const;
    void unsetHasFinantialImpact();
    /// <summary>
    /// This decimal 13 integers and 0 to 2 decimals
    /// </summary>
    double getFreightAmount() const;
    void setFreightAmount(double value);
    bool freightAmountIsSet() const;
    void unsetFreightAmount();
    /// <summary>
    /// This decimal 13 integers and 0 to 2 decimals
    /// </summary>
    double getInsuranceAmount() const;
    void setInsuranceAmount(double value);
    bool insuranceAmountIsSet() const;
    void unsetInsuranceAmount();
    /// <summary>
    /// This decimal 13 integers and 0 to 2 decimals
    /// </summary>
    double getOtherCostAmount() const;
    void setOtherCostAmount(double value);
    bool otherCostAmountIsSet() const;
    void unsetOtherCostAmount();
    /// <summary>
    /// The item value will compose the invoice total value.
    /// </summary>
    bool getIndTotType() const;
    void setIndTotType(bool value);
    bool indTotTypeIsSet() const;
    void unsetIndTotType();
    /// <summary>
    /// order number, information used for B2B control process
    /// </summary>
    utility::string_t getOrderNumber() const;
    void setOrderNumber(utility::string_t value);
    bool orderNumberIsSet() const;
    void unsetOrderNumber();
    /// <summary>
    /// number of the item from order number, information used for B2B control process
    /// </summary>
    utility::string_t getOrderItemNumber() const;
    void setOrderItemNumber(utility::string_t value);
    bool orderItemNumberIsSet() const;
    void unsetOrderItemNumber();
    /// <summary>
    /// Gloal Unique identifier (Importation form)
    /// </summary>
    utility::string_t getFciNumber() const;
    void setFciNumber(utility::string_t value);
    bool fciNumberIsSet() const;
    void unsetFciNumber();
    /// <summary>
    /// RECOPI number
    /// </summary>
    utility::string_t getRecopiNumber() const;
    void setRecopiNumber(utility::string_t value);
    bool recopiNumberIsSet() const;
    void unsetRecopiNumber();
    /// <summary>
    /// additional information about product (referenced standard, complementary info, etc)
    /// </summary>
    utility::string_t getInfAdProd() const;
    void setInfAdProd(utility::string_t value);
    bool infAdProdIsSet() const;
    void unsetInfAdProd();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Vehicle> getVehicle() const;
    void setVehicle(std::shared_ptr<Vehicle> value);
    bool vehicleIsSet() const;
    void unsetVehicle();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Medicine> getMedicine() const;
    void setMedicine(std::shared_ptr<Medicine> value);
    bool medicineIsSet() const;
    void unsetMedicine();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Weapon> getWeapon() const;
    void setWeapon(std::shared_ptr<Weapon> value);
    bool weaponIsSet() const;
    void unsetWeapon();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Fuel> getFuel() const;
    void setFuel(std::shared_ptr<Fuel> value);
    bool fuelIsSet() const;
    void unsetFuel();
    /// <summary>
    /// Inform that for this item the Entity referenced is ICMS Substitute
    /// </summary>
    bool getEntityIsIcmsSubstitute() const;
    void setEntityIsIcmsSubstitute(bool value);
    bool entityIsIcmsSubstituteIsSet() const;
    void unsetEntityIsIcmsSubstitute();
    /// <summary>
    /// Inform that this item has ICMS withheld for transport value service.
    /// </summary>
    bool getIsTransportIcmsWithheld() const;
    void setIsTransportIcmsWithheld(bool value);
    bool isTransportIcmsWithheldIsSet() const;
    void unsetIsTransportIcmsWithheld();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LineForGoods_icmsTaxRelief> getIcmsTaxRelief() const;
    void setIcmsTaxRelief(std::shared_ptr<LineForGoods_icmsTaxRelief> value);
    bool icmsTaxReliefIsSet() const;
    void unsetIcmsTaxRelief();
    /// <summary>
    /// Exportation detail
    /// </summary>
    std::vector<std::shared_ptr<LineForGoods_export>>& getExport();
    bool exportIsSet() const;
    void unsetExport();
    /// <summary>
    /// Import declaration
    /// </summary>
    std::vector<std::shared_ptr<LineForGoods_di>>& getDi();
    bool diIsSet() const;
    void unsetDi();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LineForGoods_calculatedTax> getCalculatedTax() const;
    void setCalculatedTax(std::shared_ptr<LineForGoods_calculatedTax> value);
    bool calculatedTaxIsSet() const;
    void unsetCalculatedTax();

protected:
    int32_t m_LineCode;
    utility::string_t m_ItemCode;
    utility::string_t m_AvalaraGoodsAndServicesType;
    bool m_AvalaraGoodsAndServicesTypeIsSet;
double m_NumberOfItems;
    double m_ReturnedPercentageAmount;
    bool m_ReturnedPercentageAmountIsSet;
double m_LineUnitPrice;
    bool m_LineUnitPriceIsSet;
double m_LineAmount;
    utility::string_t m_ItemDescription;
    double m_LineTaxedDiscount;
    bool m_LineTaxedDiscountIsSet;
double m_LineUntaxedDiscount;
    bool m_LineUntaxedDiscountIsSet;
utility::string_t m_UseType;
    utility::string_t m_ProcessScenario;
    int32_t m_Cfop;
    bool m_CfopIsSet;
bool m_HasStockImpact;
    bool m_HasStockImpactIsSet;
bool m_HasFinantialImpact;
    bool m_HasFinantialImpactIsSet;
double m_FreightAmount;
    bool m_FreightAmountIsSet;
double m_InsuranceAmount;
    bool m_InsuranceAmountIsSet;
double m_OtherCostAmount;
    bool m_OtherCostAmountIsSet;
bool m_IndTotType;
    bool m_IndTotTypeIsSet;
utility::string_t m_OrderNumber;
    bool m_OrderNumberIsSet;
utility::string_t m_OrderItemNumber;
    bool m_OrderItemNumberIsSet;
utility::string_t m_FciNumber;
    bool m_FciNumberIsSet;
utility::string_t m_RecopiNumber;
    bool m_RecopiNumberIsSet;
utility::string_t m_InfAdProd;
    bool m_InfAdProdIsSet;
std::shared_ptr<Vehicle> m_Vehicle;
    bool m_VehicleIsSet;
std::shared_ptr<Medicine> m_Medicine;
    bool m_MedicineIsSet;
std::shared_ptr<Weapon> m_Weapon;
    bool m_WeaponIsSet;
std::shared_ptr<Fuel> m_Fuel;
    bool m_FuelIsSet;
bool m_EntityIsIcmsSubstitute;
    bool m_EntityIsIcmsSubstituteIsSet;
bool m_IsTransportIcmsWithheld;
    bool m_IsTransportIcmsWithheldIsSet;
std::shared_ptr<LineForGoods_icmsTaxRelief> m_IcmsTaxRelief;
    bool m_IcmsTaxReliefIsSet;
std::vector<std::shared_ptr<LineForGoods_export>> m_Export;
    bool m_ExportIsSet;
std::vector<std::shared_ptr<LineForGoods_di>> m_Di;
    bool m_DiIsSet;
std::shared_ptr<LineForGoods_calculatedTax> m_CalculatedTax;
    bool m_CalculatedTaxIsSet;
};

}
}
}
}

#endif /* LineForGoods_H_ */
