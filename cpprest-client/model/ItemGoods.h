/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ItemGoods.h
 *
 * 
 */

#ifndef ItemGoods_H_
#define ItemGoods_H_


#include "ModelBase.h"

#include "ItemSimple.h"
#include <cpprest/details/basic_types.h>
#include "UUID.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ItemGoods
    : public ModelBase
{
public:
    ItemGoods();
    virtual ~ItemGoods();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ItemGoods members

    /// <summary>
    /// Company ID
    /// </summary>
    std::shared_ptr<UUID> getCompanyId() const;
    void setCompanyId(std::shared_ptr<UUID> value);
        /// <summary>
    /// ERP Code
    /// </summary>
    utility::string_t getCode() const;
    void setCode(utility::string_t value);
        /// <summary>
    /// Agast Code
    /// </summary>
    utility::string_t getAgast() const;
    void setAgast(utility::string_t value);
        /// <summary>
    /// Item Description
    /// </summary>
    utility::string_t getDescription() const;
    void setDescription(utility::string_t value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// Seal Code for ipi tax control (código do selo para controle de IPI)
    /// </summary>
    utility::string_t getSealCode() const;
    void setSealCode(utility::string_t value);
        /// <summary>
    /// Importation content form number (Número de controle da FCI - Ficha de Conteúdo de Importação)
    /// </summary>
    utility::string_t getNFCI() const;
    void setNFCI(utility::string_t value);
    bool nFCIIsSet() const;
    void unsetNFCI();
    /// <summary>
    /// this field inform that this merchandise or product is ICMS Substitute Must be used when the item is for resale and the company will assume the role of ICMS Substitute (wholesaler, retailer, distributor). Example: when Importing some product the company does not pay IcmsSt at the time of customs clearance but when selling sale the item. Deverá ser utilizado quando a empresa que irá vender a mercadoria sujeita ao ICMS ST for o SUBSTITUTO TRIBUTÁRIO (Distribuidor, atacadista e varejista), como por exemplo das mercadorias IMPORTADAS, neste sentido, a empresa não irá pagar o ICMS ST no desembaraço aduaneiro e irá recolher quando for vender as mesmas. 
    /// </summary>
    bool getIsIcmsStSubstitute() const;
    void setIsIcmsStSubstitute(bool value);
    bool isIcmsStSubstituteIsSet() const;
    void unsetIsIcmsStSubstitute();
    /// <summary>
    /// - &#39;0&#39; # National goods - except those treated in codes 3,4, 5 and 8 - &#39;1&#39; # Foreign goods - Imported directly by seller, except those in code 6 - &#39;2&#39; # Foreign goods - Acquired in the internal market (inside Brazil), except those in code 7 - &#39;3&#39; # National goods - Merchandise or goods with imported content above 40% and with less than or equal to 70% - &#39;4&#39; # National goods from production following &#39;standard basic processes&#39; as stablished by legislation (standard basic processes are devised to separate simple assembly from manufaturing processes) - &#39;5&#39; # National goods - Merchandise or goods with imported content equal or below 40% - &#39;6&#39; # Foreign goods - Directly imported by Seller, without a National Equivalent as listed by Comex and natural gas - &#39;7&#39; # Foreign goods - Acquired inside Brazil, without a National Equivalent  as listed by Comex and natural gas - &#39;8&#39; # National goods - Merchandise or goods with imported content above 70% 
    /// </summary>
    utility::string_t getSource() const;
    void setSource(utility::string_t value);
    bool sourceIsSet() const;
    void unsetSource();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProductType() const;
    void setProductType(utility::string_t value);
    bool productTypeIsSet() const;
    void unsetProductType();
    /// <summary>
    /// Item is merchandise but will be considered product
    /// </summary>
    bool getManufacturerEquivalent() const;
    void setManufacturerEquivalent(bool value);
    bool manufacturerEquivalentIsSet() const;
    void unsetManufacturerEquivalent();
    /// <summary>
    /// Inform that this item will have rights to aprropriate IPI credit
    /// </summary>
    bool getAppropriateIPIcreditWhenInGoing() const;
    void setAppropriateIPIcreditWhenInGoing(bool value);
    bool appropriateIPIcreditWhenInGoingIsSet() const;
    void unsetAppropriateIPIcreditWhenInGoing();
    /// <summary>
    /// Subject to appropriate PIS/COFINS credit, when NO CUMULATIVE
    /// </summary>
    bool getUsuallyAppropriatePISCOFINSCredit() const;
    void setUsuallyAppropriatePISCOFINSCredit(bool value);
    bool usuallyAppropriatePISCOFINSCreditIsSet() const;
    void unsetUsuallyAppropriatePISCOFINSCredit();
    /// <summary>
    /// The credit PIS/COFINS is subject to purchase form companies, but exist some exceptions, when the credit will be a estimated amount
    /// </summary>
    bool getIsPisCofinsEstimatedCredit() const;
    void setIsPisCofinsEstimatedCredit(bool value);
    bool isPisCofinsEstimatedCreditIsSet() const;
    void unsetIsPisCofinsEstimatedCredit();
    /// <summary>
    /// - &#39;01&#39; # Vinculada Exclusivamente a Receita Tributada no Mercado Interno - &#39;02&#39; # Exclusivamente a Receita Não Tributada no Mercado Interno - &#39;03&#39; # Exclusivamente a Receita de Exportação - &#39;04&#39; # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno - &#39;05&#39; # Vinculada a Receitas Tributadas no Mercado Interno e de Exportação - &#39;06&#39; # Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação - &#39;07&#39; # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação 
    /// </summary>
    utility::string_t getPiscofinsRevenueType() const;
    void setPiscofinsRevenueType(utility::string_t value);
    bool piscofinsRevenueTypeIsSet() const;
    void unsetPiscofinsRevenueType();
    /// <summary>
    /// Discount allowed on icms base when PIS/COFINS are Monophase
    /// </summary>
    double getIcmsBaseDiscountForMonoPhaseSocialContr() const;
    void setIcmsBaseDiscountForMonoPhaseSocialContr(double value);
    bool icmsBaseDiscountForMonoPhaseSocialContrIsSet() const;
    void unsetIcmsBaseDiscountForMonoPhaseSocialContr();
    /// <summary>
    /// GTIN NUMBER
    /// </summary>
    utility::string_t getCean() const;
    void setCean(utility::string_t value);
    bool ceanIsSet() const;
    void unsetCean();
    /// <summary>
    /// Nomenclatura de Valor aduaneio e Estatístico - NCM extension code
    /// </summary>
    utility::string_t getNve() const;
    void setNve(utility::string_t value);
    bool nveIsSet() const;
    void unsetNve();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSalesUnit() const;
    void setSalesUnit(utility::string_t value);
    bool salesUnitIsSet() const;
    void unsetSalesUnit();
    /// <summary>
    /// factor to convert sales quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)
    /// </summary>
    double getSalesUnitIPIfactor() const;
    void setSalesUnitIPIfactor(double value);
    bool salesUnitIPIfactorIsSet() const;
    void unsetSalesUnitIPIfactor();
    /// <summary>
    /// factor to convert sales quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
    /// </summary>
    double getSalesUnitIcmsfactor() const;
    void setSalesUnitIcmsfactor(double value);
    bool salesUnitIcmsfactorIsSet() const;
    void unsetSalesUnitIcmsfactor();
    /// <summary>
    /// factor to convert sales quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)
    /// </summary>
    double getSalesUnitIcmsStfactor() const;
    void setSalesUnitIcmsStfactor(double value);
    bool salesUnitIcmsStfactorIsSet() const;
    void unsetSalesUnitIcmsStfactor();
    /// <summary>
    /// factor to convert sales quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
    /// </summary>
    double getSalesUnitPisCofinsfactor() const;
    void setSalesUnitPisCofinsfactor(double value);
    bool salesUnitPisCofinsfactorIsSet() const;
    void unsetSalesUnitPisCofinsfactor();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPurchaseUnit() const;
    void setPurchaseUnit(utility::string_t value);
    bool purchaseUnitIsSet() const;
    void unsetPurchaseUnit();
    /// <summary>
    /// factor to convert purchase quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)
    /// </summary>
    double getPurchaseUnitIPIfactor() const;
    void setPurchaseUnitIPIfactor(double value);
    bool purchaseUnitIPIfactorIsSet() const;
    void unsetPurchaseUnitIPIfactor();
    /// <summary>
    /// factor to convert purchase quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
    /// </summary>
    double getPurchaseUnitIcmsfactor() const;
    void setPurchaseUnitIcmsfactor(double value);
    bool purchaseUnitIcmsfactorIsSet() const;
    void unsetPurchaseUnitIcmsfactor();
    /// <summary>
    /// factor to convert purchase quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)
    /// </summary>
    double getPurchaseUnitIcmsStfactor() const;
    void setPurchaseUnitIcmsStfactor(double value);
    bool purchaseUnitIcmsStfactorIsSet() const;
    void unsetPurchaseUnitIcmsStfactor();
    /// <summary>
    /// factor to convert purchase quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)
    /// </summary>
    double getPurchaseUnitPisCofinsfactor() const;
    void setPurchaseUnitPisCofinsfactor(double value);
    bool purchaseUnitPisCofinsfactorIsSet() const;
    void unsetPurchaseUnitPisCofinsfactor();
    /// <summary>
    /// When the product is new, and will be retail, firt time that it exit it is subject to IPI
    /// </summary>
    bool getFirstUse() const;
    void setFirstUse(bool value);
    bool firstUseIsSet() const;
    void unsetFirstUse();

protected:
    std::shared_ptr<UUID> m_CompanyId;
    utility::string_t m_Code;
    utility::string_t m_Agast;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
utility::string_t m_SealCode;
    utility::string_t m_NFCI;
    bool m_NFCIIsSet;
bool m_IsIcmsStSubstitute;
    bool m_IsIcmsStSubstituteIsSet;
utility::string_t m_Source;
    bool m_SourceIsSet;
utility::string_t m_ProductType;
    bool m_ProductTypeIsSet;
bool m_ManufacturerEquivalent;
    bool m_ManufacturerEquivalentIsSet;
bool m_AppropriateIPIcreditWhenInGoing;
    bool m_AppropriateIPIcreditWhenInGoingIsSet;
bool m_UsuallyAppropriatePISCOFINSCredit;
    bool m_UsuallyAppropriatePISCOFINSCreditIsSet;
bool m_IsPisCofinsEstimatedCredit;
    bool m_IsPisCofinsEstimatedCreditIsSet;
utility::string_t m_PiscofinsRevenueType;
    bool m_PiscofinsRevenueTypeIsSet;
double m_IcmsBaseDiscountForMonoPhaseSocialContr;
    bool m_IcmsBaseDiscountForMonoPhaseSocialContrIsSet;
utility::string_t m_Cean;
    bool m_CeanIsSet;
utility::string_t m_Nve;
    bool m_NveIsSet;
utility::string_t m_SalesUnit;
    bool m_SalesUnitIsSet;
double m_SalesUnitIPIfactor;
    bool m_SalesUnitIPIfactorIsSet;
double m_SalesUnitIcmsfactor;
    bool m_SalesUnitIcmsfactorIsSet;
double m_SalesUnitIcmsStfactor;
    bool m_SalesUnitIcmsStfactorIsSet;
double m_SalesUnitPisCofinsfactor;
    bool m_SalesUnitPisCofinsfactorIsSet;
utility::string_t m_PurchaseUnit;
    bool m_PurchaseUnitIsSet;
double m_PurchaseUnitIPIfactor;
    bool m_PurchaseUnitIPIfactorIsSet;
double m_PurchaseUnitIcmsfactor;
    bool m_PurchaseUnitIcmsfactorIsSet;
double m_PurchaseUnitIcmsStfactor;
    bool m_PurchaseUnitIcmsStfactorIsSet;
double m_PurchaseUnitPisCofinsfactor;
    bool m_PurchaseUnitPisCofinsfactorIsSet;
bool m_FirstUse;
    bool m_FirstUseIsSet;
};

}
}
}
}

#endif /* ItemGoods_H_ */
