/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LegalReason.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

LegalReason::LegalReason()
{
    m_Id = U("");
    m_IdIsSet = false;
    m_Scope = U("");
    m_Disable = false;
    m_DisableIsSet = false;
    m_Description = U("");
    m_Name = U("");
    m_LegalCode = U("");
    m_LegalCodeIsSet = false;
    m_ShowInInvoice = U("");
    m_ShowInInvoiceIsSet = false;
    m_ReferencedProcessesIsSet = false;
    m_TaxScopeIsSet = false;
    
}

LegalReason::~LegalReason()
{
}

void LegalReason::validate()
{
    // TODO: implement validation
}

web::json::value LegalReason::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    val[U("scope")] = ModelBase::toJson(m_Scope);
    if(m_DisableIsSet)
    {
        val[U("disable")] = ModelBase::toJson(m_Disable);
    }
    val[U("description")] = ModelBase::toJson(m_Description);
    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_LegalCodeIsSet)
    {
        val[U("legalCode")] = ModelBase::toJson(m_LegalCode);
    }
    if(m_ShowInInvoiceIsSet)
    {
        val[U("showInInvoice")] = ModelBase::toJson(m_ShowInInvoice);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_ReferencedProcesses )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("referencedProcesses")] = web::json::value::array(jsonArray);
        }
    }
    if(m_TaxScopeIsSet)
    {
        val[U("taxScope")] = ModelBase::toJson(m_TaxScope);
    }
    

    return val;
}

void LegalReason::fromJson(web::json::value& val)
{
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
        
    }
    setScope(ModelBase::stringFromJson(val[U("scope")]));
    if(val.has_field(U("disable")))
    {
        setDisable(ModelBase::boolFromJson(val[U("disable")]));
    }
    setDescription(ModelBase::stringFromJson(val[U("description")]));
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("legalCode")))
    {
        setLegalCode(ModelBase::stringFromJson(val[U("legalCode")]));
        
    }
    if(val.has_field(U("showInInvoice")))
    {
        setShowInInvoice(ModelBase::stringFromJson(val[U("showInInvoice")]));
        
    }
    {
        m_ReferencedProcesses.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("referencedProcesses")))
        {
        for( auto& item : val[U("referencedProcesses")].as_array() )
        {
            
            if(item.is_null())
            {
                m_ReferencedProcesses.push_back( std::shared_ptr<LegalReason_referencedProcesses>(nullptr) );
            }
            else
            {
                std::shared_ptr<LegalReason_referencedProcesses> newItem(new LegalReason_referencedProcesses());
                newItem->fromJson(item);
                m_ReferencedProcesses.push_back( newItem );
            }
            
        }
        }
    }
    if(val.has_field(U("taxScope")))
    {
        if(!val[U("taxScope")].is_null())
        {
            std::shared_ptr<LegalReason_taxScope> newItem(new LegalReason_taxScope());
            newItem->fromJson(val[U("taxScope")]);
            setTaxScope( newItem );
        }
        
    }
    
}

void LegalReason::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("scope"), m_Scope));
    if(m_DisableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("disable"), m_Disable));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_LegalCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("legalCode"), m_LegalCode));
        
    }
    if(m_ShowInInvoiceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("showInInvoice"), m_ShowInInvoice));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_ReferencedProcesses )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("referencedProcesses"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_TaxScopeIsSet)
    {
        if (m_TaxScope.get())
        {
            m_TaxScope->toMultipart(multipart, U("taxScope."));
        }
        
    }
    
}

void LegalReason::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
        
    }
    setScope(ModelBase::stringFromHttpContent(multipart->getContent(U("scope"))));
    if(multipart->hasContent(U("disable")))
    {
        setDisable(ModelBase::boolFromHttpContent(multipart->getContent(U("disable"))));
    }
    setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("legalCode")))
    {
        setLegalCode(ModelBase::stringFromHttpContent(multipart->getContent(U("legalCode"))));
        
    }
    if(multipart->hasContent(U("showInInvoice")))
    {
        setShowInInvoice(ModelBase::stringFromHttpContent(multipart->getContent(U("showInInvoice"))));
        
    }
    {
        m_ReferencedProcesses.clear();
        if(multipart->hasContent(U("referencedProcesses")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("referencedProcesses"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_ReferencedProcesses.push_back( std::shared_ptr<LegalReason_referencedProcesses>(nullptr) );
            }
            else
            {
                std::shared_ptr<LegalReason_referencedProcesses> newItem(new LegalReason_referencedProcesses());
                newItem->fromJson(item);
                m_ReferencedProcesses.push_back( newItem );
            }
            
        }
        }
    }
    if(multipart->hasContent(U("taxScope")))
    {
        if(multipart->hasContent(U("taxScope")))
        {
            std::shared_ptr<LegalReason_taxScope> newItem(new LegalReason_taxScope());
            newItem->fromMultiPart(multipart, U("taxScope."));
            setTaxScope( newItem );
        }
        
    }
    
}


utility::string_t LegalReason::getId() const
{
    return m_Id;
}
void LegalReason::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool LegalReason::idIsSet() const
{
    return m_IdIsSet;
}
void LegalReason::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t LegalReason::getScope() const
{
    return m_Scope;
}
void LegalReason::setScope(utility::string_t value)
{
    m_Scope = value;
    
}
bool LegalReason::getDisable() const
{
    return m_Disable;
}
void LegalReason::setDisable(bool value)
{
    m_Disable = value;
    m_DisableIsSet = true;
}
bool LegalReason::disableIsSet() const
{
    return m_DisableIsSet;
}
void LegalReason::unsetDisable()
{
    m_DisableIsSet = false;
}
utility::string_t LegalReason::getDescription() const
{
    return m_Description;
}
void LegalReason::setDescription(utility::string_t value)
{
    m_Description = value;
    
}
utility::string_t LegalReason::getName() const
{
    return m_Name;
}
void LegalReason::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t LegalReason::getLegalCode() const
{
    return m_LegalCode;
}
void LegalReason::setLegalCode(utility::string_t value)
{
    m_LegalCode = value;
    m_LegalCodeIsSet = true;
}
bool LegalReason::legalCodeIsSet() const
{
    return m_LegalCodeIsSet;
}
void LegalReason::unsetLegalCode()
{
    m_LegalCodeIsSet = false;
}
utility::string_t LegalReason::getShowInInvoice() const
{
    return m_ShowInInvoice;
}
void LegalReason::setShowInInvoice(utility::string_t value)
{
    m_ShowInInvoice = value;
    m_ShowInInvoiceIsSet = true;
}
bool LegalReason::showInInvoiceIsSet() const
{
    return m_ShowInInvoiceIsSet;
}
void LegalReason::unsetShowInInvoice()
{
    m_ShowInInvoiceIsSet = false;
}
std::vector<std::shared_ptr<LegalReason_referencedProcesses>>& LegalReason::getReferencedProcesses()
{
    return m_ReferencedProcesses;
}
bool LegalReason::referencedProcessesIsSet() const
{
    return m_ReferencedProcessesIsSet;
}
void LegalReason::unsetReferencedProcesses()
{
    m_ReferencedProcessesIsSet = false;
}
std::shared_ptr<LegalReason_taxScope> LegalReason::getTaxScope() const
{
    return m_TaxScope;
}
void LegalReason::setTaxScope(std::shared_ptr<LegalReason_taxScope> value)
{
    m_TaxScope = value;
    m_TaxScopeIsSet = true;
}
bool LegalReason::taxScopeIsSet() const
{
    return m_TaxScopeIsSet;
}
void LegalReason::unsetTaxScope()
{
    m_TaxScopeIsSet = false;
}

}
}
}
}

