/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PurchaseInstallmentIn.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PurchaseInstallmentIn::PurchaseInstallmentIn()
{
    m_DocumentNumber = U("");
    m_GrossValue = 0.0;
    
}

PurchaseInstallmentIn::~PurchaseInstallmentIn()
{
}

void PurchaseInstallmentIn::validate()
{
    // TODO: implement validation
}

web::json::value PurchaseInstallmentIn::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("documentNumber")] = ModelBase::toJson(m_DocumentNumber);
    val[U("date")] = ModelBase::toJson(m_date);
    val[U("grossValue")] = ModelBase::toJson(m_GrossValue);
    

    return val;
}

void PurchaseInstallmentIn::fromJson(web::json::value& val)
{
    setDocumentNumber(ModelBase::stringFromJson(val[U("documentNumber")]));
    utility::datetime newdate(utility::datetime());
    newdate->fromJson(val[U("date")]);
    setDate( newItem );
    setGrossValue(ModelBase::doubleFromJson(val[U("grossValue")]));
    
}

void PurchaseInstallmentIn::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("documentNumber"), m_DocumentNumber));
    m_date->toMultipart(multipart, U("date."));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("grossValue"), m_GrossValue));
    
}

void PurchaseInstallmentIn::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setDocumentNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("documentNumber"))));
    utility::datetime newdate(utility::datetime());
    newdate->fromMultiPart(multipart, U("date."));
    setDate( newdate );
    setGrossValue(ModelBase::doubleFromHttpContent(multipart->getContent(U("grossValue"))));
    
}


utility::string_t PurchaseInstallmentIn::getDocumentNumber() const
{
    return m_DocumentNumber;
}
void PurchaseInstallmentIn::setDocumentNumber(utility::string_t value)
{
    m_DocumentNumber = value;
    
}
utility::datetime PurchaseInstallmentIn::getDate() const
{
    return m_date;
}
void PurchaseInstallmentIn::setDate(utility::datetime value)
{
    m_date = value;
    
}
double PurchaseInstallmentIn::getGrossValue() const
{
    return m_GrossValue;
}
void PurchaseInstallmentIn::setGrossValue(double value)
{
    m_GrossValue = value;
    
}

}
}
}
}

