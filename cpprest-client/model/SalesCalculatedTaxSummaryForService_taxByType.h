/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SalesCalculatedTaxSummaryForService_taxByType.h
 *
 * Object with summary of all taxes returned by engine
 */

#ifndef SalesCalculatedTaxSummaryForService_taxByType_H_
#define SalesCalculatedTaxSummaryForService_taxByType_H_


#include "ModelBase.h"

#include "TaxByTypeSummaryForService.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Object with summary of all taxes returned by engine
/// </summary>
class  SalesCalculatedTaxSummaryForService_taxByType
    : public ModelBase
{
public:
    SalesCalculatedTaxSummaryForService_taxByType();
    virtual ~SalesCalculatedTaxSummaryForService_taxByType();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SalesCalculatedTaxSummaryForService_taxByType members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForService> getPisRf() const;
    void setPisRf(std::shared_ptr<TaxByTypeSummaryForService> value);
    bool pisRfIsSet() const;
    void unsetPisRf();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForService> getCofinsRf() const;
    void setCofinsRf(std::shared_ptr<TaxByTypeSummaryForService> value);
    bool cofinsRfIsSet() const;
    void unsetCofinsRf();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForService> getCsllRf() const;
    void setCsllRf(std::shared_ptr<TaxByTypeSummaryForService> value);
    bool csllRfIsSet() const;
    void unsetCsllRf();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForService> getIrrf() const;
    void setIrrf(std::shared_ptr<TaxByTypeSummaryForService> value);
    bool irrfIsSet() const;
    void unsetIrrf();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForService> getInssRf() const;
    void setInssRf(std::shared_ptr<TaxByTypeSummaryForService> value);
    bool inssRfIsSet() const;
    void unsetInssRf();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForService> getPis() const;
    void setPis(std::shared_ptr<TaxByTypeSummaryForService> value);
    bool pisIsSet() const;
    void unsetPis();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForService> getCofins() const;
    void setCofins(std::shared_ptr<TaxByTypeSummaryForService> value);
    bool cofinsIsSet() const;
    void unsetCofins();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForService> getCsll() const;
    void setCsll(std::shared_ptr<TaxByTypeSummaryForService> value);
    bool csllIsSet() const;
    void unsetCsll();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForService> getIssRf() const;
    void setIssRf(std::shared_ptr<TaxByTypeSummaryForService> value);
    bool issRfIsSet() const;
    void unsetIssRf();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForService> getIss() const;
    void setIss(std::shared_ptr<TaxByTypeSummaryForService> value);
    bool issIsSet() const;
    void unsetIss();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForService> getAproxtribCity() const;
    void setAproxtribCity(std::shared_ptr<TaxByTypeSummaryForService> value);
    bool aproxtribCityIsSet() const;
    void unsetAproxtribCity();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForService> getAproxtribFed() const;
    void setAproxtribFed(std::shared_ptr<TaxByTypeSummaryForService> value);
    bool aproxtribFedIsSet() const;
    void unsetAproxtribFed();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForService> getIrpj() const;
    void setIrpj(std::shared_ptr<TaxByTypeSummaryForService> value);
    bool irpjIsSet() const;
    void unsetIrpj();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeSummaryForService> getInss() const;
    void setInss(std::shared_ptr<TaxByTypeSummaryForService> value);
    bool inssIsSet() const;
    void unsetInss();

protected:
    std::shared_ptr<TaxByTypeSummaryForService> m_PisRf;
    bool m_PisRfIsSet;
std::shared_ptr<TaxByTypeSummaryForService> m_CofinsRf;
    bool m_CofinsRfIsSet;
std::shared_ptr<TaxByTypeSummaryForService> m_CsllRf;
    bool m_CsllRfIsSet;
std::shared_ptr<TaxByTypeSummaryForService> m_Irrf;
    bool m_IrrfIsSet;
std::shared_ptr<TaxByTypeSummaryForService> m_InssRf;
    bool m_InssRfIsSet;
std::shared_ptr<TaxByTypeSummaryForService> m_Pis;
    bool m_PisIsSet;
std::shared_ptr<TaxByTypeSummaryForService> m_Cofins;
    bool m_CofinsIsSet;
std::shared_ptr<TaxByTypeSummaryForService> m_Csll;
    bool m_CsllIsSet;
std::shared_ptr<TaxByTypeSummaryForService> m_IssRf;
    bool m_IssRfIsSet;
std::shared_ptr<TaxByTypeSummaryForService> m_Iss;
    bool m_IssIsSet;
std::shared_ptr<TaxByTypeSummaryForService> m_AproxtribCity;
    bool m_AproxtribCityIsSet;
std::shared_ptr<TaxByTypeSummaryForService> m_AproxtribFed;
    bool m_AproxtribFedIsSet;
std::shared_ptr<TaxByTypeSummaryForService> m_Irpj;
    bool m_IrpjIsSet;
std::shared_ptr<TaxByTypeSummaryForService> m_Inss;
    bool m_InssIsSet;
};

}
}
}
}

#endif /* SalesCalculatedTaxSummaryForService_taxByType_H_ */
