/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * LineForGoods_di.h
 *
 * 
 */

#ifndef LineForGoods_di_H_
#define LineForGoods_di_H_


#include "ModelBase.h"

#include "StateEnum.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "LineForGoods_adi.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  LineForGoods_di
    : public ModelBase
{
public:
    LineForGoods_di();
    virtual ~LineForGoods_di();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LineForGoods_di members

    /// <summary>
    /// customs value, valor aduaneiro (II Block of NFe)
    /// </summary>
    double getCustomsValue() const;
    void setCustomsValue(double value);
    bool customsValueIsSet() const;
    void unsetCustomsValue();
    /// <summary>
    /// Import declaration number, DI/DSI/DA/DRI-E (DI/DSI/DA/DRI-E)
    /// </summary>
    utility::string_t getDiNumber() const;
    void setDiNumber(utility::string_t value);
        /// <summary>
    /// Register date of import declaration number, DI/DSI/DA/DRI-E (DI/DSI/DA/DRI-E)
    /// </summary>
    utility::datetime getRegisterDateDI() const;
    void setRegisterDateDI(utility::datetime value);
        /// <summary>
    /// Clerance Site Local do desembaraço aduaneiro 
    /// </summary>
    utility::string_t getClearanceSite() const;
    void setClearanceSite(utility::string_t value);
        /// <summary>
    /// Clerance Site State Estado onde ocorrreu o desembaraço aduaneiro 
    /// </summary>
    std::shared_ptr<StateEnum> getClearanceState() const;
    void setClearanceState(std::shared_ptr<StateEnum> value);
        /// <summary>
    /// Clerance date
    /// </summary>
    utility::datetime getClearanceDate() const;
    void setClearanceDate(utility::datetime value);
    bool clearanceDateIsSet() const;
    void unsetClearanceDate();
    /// <summary>
    /// - &#39;1&#39; # Maritima - &#39;2&#39; # Fluvial - &#39;3&#39; # Lacustre - &#39;4&#39; # Aerea - &#39;5&#39; # Postal - &#39;6&#39; # Ferroviaria - &#39;7&#39; # Rodoviaria - &#39;8&#39; # Conduto - &#39;9&#39; # Meios Proprios - &#39;10&#39; # Entrada/Saida Ficta 
    /// </summary>
    utility::string_t getTransportDIType() const;
    void setTransportDIType(utility::string_t value);
        /// <summary>
    /// Aditional amount to freight to renew merchant marine, This decimal 13 integers and 2 decimals [Valor Adicional ao frete para renovação de marinha mercante] 
    /// </summary>
    double getAfrmmValue() const;
    void setAfrmmValue(double value);
    bool afrmmValueIsSet() const;
    void unsetAfrmmValue();
    /// <summary>
    /// - &#39;1&#39; # On One&#39;s Own [1-por conta propria] - &#39;2&#39; # On Behalf And Order [2-por conta e ordem] - &#39;3&#39; # Order [3-encomenda] 
    /// </summary>
    utility::string_t getIntermediateType() const;
    void setIntermediateType(utility::string_t value);
        /// <summary>
    /// Buyer federal tax id CNPJ do comprador ou encomendante 
    /// </summary>
    utility::string_t getBuyerFederalTaxID() const;
    void setBuyerFederalTaxID(utility::string_t value);
    bool buyerFederalTaxIDIsSet() const;
    void unsetBuyerFederalTaxID();
    /// <summary>
    /// Buyer sate Estado do comprador ou encomendante 
    /// </summary>
    std::shared_ptr<StateEnum> getBuyerState() const;
    void setBuyerState(std::shared_ptr<StateEnum> value);
    bool buyerStateIsSet() const;
    void unsetBuyerState();
    /// <summary>
    /// Exporter code
    /// </summary>
    utility::string_t getExporterCode() const;
    void setExporterCode(utility::string_t value);
    bool exporterCodeIsSet() const;
    void unsetExporterCode();
    /// <summary>
    /// aditional import declaration
    /// </summary>
    std::vector<std::shared_ptr<LineForGoods_adi>>& getAdi();
    
protected:
    double m_CustomsValue;
    bool m_CustomsValueIsSet;
utility::string_t m_DiNumber;
    utility::datetime m_RegisterDateDI;
    utility::string_t m_ClearanceSite;
    std::shared_ptr<StateEnum> m_ClearanceState;
    utility::datetime m_ClearanceDate;
    bool m_ClearanceDateIsSet;
utility::string_t m_TransportDIType;
    double m_AfrmmValue;
    bool m_AfrmmValueIsSet;
utility::string_t m_IntermediateType;
    utility::string_t m_BuyerFederalTaxID;
    bool m_BuyerFederalTaxIDIsSet;
std::shared_ptr<StateEnum> m_BuyerState;
    bool m_BuyerStateIsSet;
utility::string_t m_ExporterCode;
    bool m_ExporterCodeIsSet;
std::vector<std::shared_ptr<LineForGoods_adi>> m_Adi;
    };

}
}
}
}

#endif /* LineForGoods_di_H_ */
