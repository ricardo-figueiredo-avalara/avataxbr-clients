/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PccWithholdingMode.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PccWithholdingMode::PccWithholdingMode()
{
    m_Type = U("");
    m_TypeIsSet = false;
    m_TotalTax = 0.0;
    m_TotalTaxIsSet = false;
    m_PisRfIsSet = false;
    m_CofinsRfIsSet = false;
    m_CsllRfIsSet = false;
    
}

PccWithholdingMode::~PccWithholdingMode()
{
}

void PccWithholdingMode::validate()
{
    // TODO: implement validation
}

web::json::value PccWithholdingMode::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TypeIsSet)
    {
        val[U("type")] = ModelBase::toJson(m_Type);
    }
    if(m_TotalTaxIsSet)
    {
        val[U("totalTax")] = ModelBase::toJson(m_TotalTax);
    }
    if(m_PisRfIsSet)
    {
        val[U("pisRf")] = ModelBase::toJson(m_PisRf);
    }
    if(m_CofinsRfIsSet)
    {
        val[U("cofinsRf")] = ModelBase::toJson(m_CofinsRf);
    }
    if(m_CsllRfIsSet)
    {
        val[U("csllRf")] = ModelBase::toJson(m_CsllRf);
    }
    

    return val;
}

void PccWithholdingMode::fromJson(web::json::value& val)
{
    if(val.has_field(U("type")))
    {
        setType(ModelBase::stringFromJson(val[U("type")]));
        
    }
    if(val.has_field(U("totalTax")))
    {
        setTotalTax(ModelBase::doubleFromJson(val[U("totalTax")]));
    }
    if(val.has_field(U("pisRf")))
    {
        if(!val[U("pisRf")].is_null())
        {
            std::shared_ptr<TaxByTypeTax> newItem(new TaxByTypeTax());
            newItem->fromJson(val[U("pisRf")]);
            setPisRf( newItem );
        }
        
    }
    if(val.has_field(U("cofinsRf")))
    {
        if(!val[U("cofinsRf")].is_null())
        {
            std::shared_ptr<TaxByTypeTax> newItem(new TaxByTypeTax());
            newItem->fromJson(val[U("cofinsRf")]);
            setCofinsRf( newItem );
        }
        
    }
    if(val.has_field(U("csllRf")))
    {
        if(!val[U("csllRf")].is_null())
        {
            std::shared_ptr<TaxByTypeTax> newItem(new TaxByTypeTax());
            newItem->fromJson(val[U("csllRf")]);
            setCsllRf( newItem );
        }
        
    }
    
}

void PccWithholdingMode::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
        
    }
    if(m_TotalTaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("totalTax"), m_TotalTax));
    }
    if(m_PisRfIsSet)
    {
        if (m_PisRf.get())
        {
            m_PisRf->toMultipart(multipart, U("pisRf."));
        }
        
    }
    if(m_CofinsRfIsSet)
    {
        if (m_CofinsRf.get())
        {
            m_CofinsRf->toMultipart(multipart, U("cofinsRf."));
        }
        
    }
    if(m_CsllRfIsSet)
    {
        if (m_CsllRf.get())
        {
            m_CsllRf->toMultipart(multipart, U("csllRf."));
        }
        
    }
    
}

void PccWithholdingMode::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
        
    }
    if(multipart->hasContent(U("totalTax")))
    {
        setTotalTax(ModelBase::doubleFromHttpContent(multipart->getContent(U("totalTax"))));
    }
    if(multipart->hasContent(U("pisRf")))
    {
        if(multipart->hasContent(U("pisRf")))
        {
            std::shared_ptr<TaxByTypeTax> newItem(new TaxByTypeTax());
            newItem->fromMultiPart(multipart, U("pisRf."));
            setPisRf( newItem );
        }
        
    }
    if(multipart->hasContent(U("cofinsRf")))
    {
        if(multipart->hasContent(U("cofinsRf")))
        {
            std::shared_ptr<TaxByTypeTax> newItem(new TaxByTypeTax());
            newItem->fromMultiPart(multipart, U("cofinsRf."));
            setCofinsRf( newItem );
        }
        
    }
    if(multipart->hasContent(U("csllRf")))
    {
        if(multipart->hasContent(U("csllRf")))
        {
            std::shared_ptr<TaxByTypeTax> newItem(new TaxByTypeTax());
            newItem->fromMultiPart(multipart, U("csllRf."));
            setCsllRf( newItem );
        }
        
    }
    
}


utility::string_t PccWithholdingMode::getType() const
{
    return m_Type;
}
void PccWithholdingMode::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool PccWithholdingMode::typeIsSet() const
{
    return m_TypeIsSet;
}
void PccWithholdingMode::unsetType()
{
    m_TypeIsSet = false;
}
double PccWithholdingMode::getTotalTax() const
{
    return m_TotalTax;
}
void PccWithholdingMode::setTotalTax(double value)
{
    m_TotalTax = value;
    m_TotalTaxIsSet = true;
}
bool PccWithholdingMode::totalTaxIsSet() const
{
    return m_TotalTaxIsSet;
}
void PccWithholdingMode::unsetTotalTax()
{
    m_TotalTaxIsSet = false;
}
std::shared_ptr<TaxByTypeTax> PccWithholdingMode::getPisRf() const
{
    return m_PisRf;
}
void PccWithholdingMode::setPisRf(std::shared_ptr<TaxByTypeTax> value)
{
    m_PisRf = value;
    m_PisRfIsSet = true;
}
bool PccWithholdingMode::pisRfIsSet() const
{
    return m_PisRfIsSet;
}
void PccWithholdingMode::unsetPisRf()
{
    m_PisRfIsSet = false;
}
std::shared_ptr<TaxByTypeTax> PccWithholdingMode::getCofinsRf() const
{
    return m_CofinsRf;
}
void PccWithholdingMode::setCofinsRf(std::shared_ptr<TaxByTypeTax> value)
{
    m_CofinsRf = value;
    m_CofinsRfIsSet = true;
}
bool PccWithholdingMode::cofinsRfIsSet() const
{
    return m_CofinsRfIsSet;
}
void PccWithholdingMode::unsetCofinsRf()
{
    m_CofinsRfIsSet = false;
}
std::shared_ptr<TaxByTypeTax> PccWithholdingMode::getCsllRf() const
{
    return m_CsllRf;
}
void PccWithholdingMode::setCsllRf(std::shared_ptr<TaxByTypeTax> value)
{
    m_CsllRf = value;
    m_CsllRfIsSet = true;
}
bool PccWithholdingMode::csllRfIsSet() const
{
    return m_CsllRfIsSet;
}
void PccWithholdingMode::unsetCsllRf()
{
    m_CsllRfIsSet = false;
}

}
}
}
}

