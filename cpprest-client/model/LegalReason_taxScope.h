/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * LegalReason_taxScope.h
 *
 * Filter this message application to specified tax cases. - taxtype - jurisdictionType 
 */

#ifndef LegalReason_taxScope_H_
#define LegalReason_taxScope_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Filter this message application to specified tax cases. - taxtype - jurisdictionType 
/// </summary>
class  LegalReason_taxScope
    : public ModelBase
{
public:
    LegalReason_taxScope();
    virtual ~LegalReason_taxScope();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LegalReason_taxScope members

    /// <summary>
    /// This is the Tax Type to apply legal messages. - &#39;NONE&#39; - &#39;INSS&#39; - &#39;IRRF&#39; - &#39;IRPJ&#39; - &#39;PIS&#39; - &#39;COFINS&#39; - &#39;CSLL&#39; - &#39;IPI&#39; - &#39;ICMS&#39; - &#39;II&#39; - &#39;IOF&#39; - &#39;ISS&#39; - &#39;APROXTOTALTAX&#39; 
    /// </summary>
    utility::string_t getTaxType() const;
    void setTaxType(utility::string_t value);
        /// <summary>
    /// These are the specific tax types to which a message may be applied - &#39;icms&#39; - &#39;icmsSt&#39; - &#39;icmsStSd&#39; - &#39;icmsPartOwn&#39; - &#39;icmsPartDest&#39; - &#39;icmsDifaFCP&#39; - &#39;icmsDifaDest&#39; - &#39;icmsDifaRemet&#39; - &#39;icmsRf&#39; - &#39;icmsDeson&#39; - &#39;icmsCredsn&#39; - &#39;pis&#39; - &#39;pisSt&#39; - &#39;cofins&#39; - &#39;cofinsSt&#39; - &#39;ipi&#39; - &#39;ipiReturned&#39; - &#39;ii&#39; - &#39;iof&#39; 
    /// </summary>
    utility::string_t getSpecializedTaxType() const;
    void setSpecializedTaxType(utility::string_t value);
    bool specializedTaxTypeIsSet() const;
    void unsetSpecializedTaxType();
    /// <summary>
    /// Types of jurisdiction - &#39;NONE&#39; - &#39;City&#39; - &#39;State&#39; - &#39;Country&#39; 
    /// </summary>
    utility::string_t getJurisdictionType() const;
    void setJurisdictionType(utility::string_t value);
        /// <summary>
    /// Code to identify the Jurisdiction
    /// </summary>
    utility::string_t getJurisdictionIbgeCode() const;
    void setJurisdictionIbgeCode(utility::string_t value);
    bool jurisdictionIbgeCodeIsSet() const;
    void unsetJurisdictionIbgeCode();

protected:
    utility::string_t m_TaxType;
    utility::string_t m_SpecializedTaxType;
    bool m_SpecializedTaxTypeIsSet;
utility::string_t m_JurisdictionType;
    utility::string_t m_JurisdictionIbgeCode;
    bool m_JurisdictionIbgeCodeIsSet;
};

}
}
}
}

#endif /* LegalReason_taxScope_H_ */
