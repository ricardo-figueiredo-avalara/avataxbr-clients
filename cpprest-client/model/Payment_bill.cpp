/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Payment_bill.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Payment_bill::Payment_bill()
{
    m_NFat = U("");
    m_NFatIsSet = false;
    m_VOrig = 0.0;
    m_VOrigIsSet = false;
    m_VDiscount = 0.0;
    m_VDiscountIsSet = false;
    m_VNet = 0.0;
    m_VNetIsSet = false;
    
}

Payment_bill::~Payment_bill()
{
}

void Payment_bill::validate()
{
    // TODO: implement validation
}

web::json::value Payment_bill::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NFatIsSet)
    {
        val[U("nFat")] = ModelBase::toJson(m_NFat);
    }
    if(m_VOrigIsSet)
    {
        val[U("vOrig")] = ModelBase::toJson(m_VOrig);
    }
    if(m_VDiscountIsSet)
    {
        val[U("vDiscount")] = ModelBase::toJson(m_VDiscount);
    }
    if(m_VNetIsSet)
    {
        val[U("vNet")] = ModelBase::toJson(m_VNet);
    }
    

    return val;
}

void Payment_bill::fromJson(web::json::value& val)
{
    if(val.has_field(U("nFat")))
    {
        setNFat(ModelBase::stringFromJson(val[U("nFat")]));
        
    }
    if(val.has_field(U("vOrig")))
    {
        setVOrig(ModelBase::doubleFromJson(val[U("vOrig")]));
    }
    if(val.has_field(U("vDiscount")))
    {
        setVDiscount(ModelBase::doubleFromJson(val[U("vDiscount")]));
    }
    if(val.has_field(U("vNet")))
    {
        setVNet(ModelBase::doubleFromJson(val[U("vNet")]));
    }
    
}

void Payment_bill::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_NFatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("nFat"), m_NFat));
        
    }
    if(m_VOrigIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("vOrig"), m_VOrig));
    }
    if(m_VDiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("vDiscount"), m_VDiscount));
    }
    if(m_VNetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("vNet"), m_VNet));
    }
    
}

void Payment_bill::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("nFat")))
    {
        setNFat(ModelBase::stringFromHttpContent(multipart->getContent(U("nFat"))));
        
    }
    if(multipart->hasContent(U("vOrig")))
    {
        setVOrig(ModelBase::doubleFromHttpContent(multipart->getContent(U("vOrig"))));
    }
    if(multipart->hasContent(U("vDiscount")))
    {
        setVDiscount(ModelBase::doubleFromHttpContent(multipart->getContent(U("vDiscount"))));
    }
    if(multipart->hasContent(U("vNet")))
    {
        setVNet(ModelBase::doubleFromHttpContent(multipart->getContent(U("vNet"))));
    }
    
}


utility::string_t Payment_bill::getNFat() const
{
    return m_NFat;
}
void Payment_bill::setNFat(utility::string_t value)
{
    m_NFat = value;
    m_NFatIsSet = true;
}
bool Payment_bill::nFatIsSet() const
{
    return m_NFatIsSet;
}
void Payment_bill::unsetNFat()
{
    m_NFatIsSet = false;
}
double Payment_bill::getVOrig() const
{
    return m_VOrig;
}
void Payment_bill::setVOrig(double value)
{
    m_VOrig = value;
    m_VOrigIsSet = true;
}
bool Payment_bill::vOrigIsSet() const
{
    return m_VOrigIsSet;
}
void Payment_bill::unsetVOrig()
{
    m_VOrigIsSet = false;
}
double Payment_bill::getVDiscount() const
{
    return m_VDiscount;
}
void Payment_bill::setVDiscount(double value)
{
    m_VDiscount = value;
    m_VDiscountIsSet = true;
}
bool Payment_bill::vDiscountIsSet() const
{
    return m_VDiscountIsSet;
}
void Payment_bill::unsetVDiscount()
{
    m_VDiscountIsSet = false;
}
double Payment_bill::getVNet() const
{
    return m_VNet;
}
void Payment_bill::setVNet(double value)
{
    m_VNet = value;
    m_VNetIsSet = true;
}
bool Payment_bill::vNetIsSet() const
{
    return m_VNetIsSet;
}
void Payment_bill::unsetVNet()
{
    m_VNetIsSet = false;
}

}
}
}
}

