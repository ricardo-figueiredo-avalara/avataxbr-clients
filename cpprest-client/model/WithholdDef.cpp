/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "WithholdDef.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

WithholdDef::WithholdDef()
{
    m_ExemptionReasonCode = U("");
    m_ExemptionReasonCodeIsSet = false;
    m_CustomExemptionReasonDescription = U("");
    m_CustomExemptionReasonDescriptionIsSet = false;
    
}

WithholdDef::~WithholdDef()
{
}

void WithholdDef::validate()
{
    // TODO: implement validation
}

web::json::value WithholdDef::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ExemptionReasonCodeIsSet)
    {
        val[U("exemptionReasonCode")] = ModelBase::toJson(m_ExemptionReasonCode);
    }
    if(m_CustomExemptionReasonDescriptionIsSet)
    {
        val[U("customExemptionReasonDescription")] = ModelBase::toJson(m_CustomExemptionReasonDescription);
    }
    

    return val;
}

void WithholdDef::fromJson(web::json::value& val)
{
    if(val.has_field(U("exemptionReasonCode")))
    {
        setExemptionReasonCode(ModelBase::stringFromJson(val[U("exemptionReasonCode")]));
        
    }
    if(val.has_field(U("customExemptionReasonDescription")))
    {
        setCustomExemptionReasonDescription(ModelBase::stringFromJson(val[U("customExemptionReasonDescription")]));
        
    }
    
}

void WithholdDef::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ExemptionReasonCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("exemptionReasonCode"), m_ExemptionReasonCode));
        
    }
    if(m_CustomExemptionReasonDescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("customExemptionReasonDescription"), m_CustomExemptionReasonDescription));
        
    }
    
}

void WithholdDef::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("exemptionReasonCode")))
    {
        setExemptionReasonCode(ModelBase::stringFromHttpContent(multipart->getContent(U("exemptionReasonCode"))));
        
    }
    if(multipart->hasContent(U("customExemptionReasonDescription")))
    {
        setCustomExemptionReasonDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("customExemptionReasonDescription"))));
        
    }
    
}


utility::string_t WithholdDef::getExemptionReasonCode() const
{
    return m_ExemptionReasonCode;
}
void WithholdDef::setExemptionReasonCode(utility::string_t value)
{
    m_ExemptionReasonCode = value;
    m_ExemptionReasonCodeIsSet = true;
}
bool WithholdDef::exemptionReasonCodeIsSet() const
{
    return m_ExemptionReasonCodeIsSet;
}
void WithholdDef::unsetExemptionReasonCode()
{
    m_ExemptionReasonCodeIsSet = false;
}
utility::string_t WithholdDef::getCustomExemptionReasonDescription() const
{
    return m_CustomExemptionReasonDescription;
}
void WithholdDef::setCustomExemptionReasonDescription(utility::string_t value)
{
    m_CustomExemptionReasonDescription = value;
    m_CustomExemptionReasonDescriptionIsSet = true;
}
bool WithholdDef::customExemptionReasonDescriptionIsSet() const
{
    return m_CustomExemptionReasonDescriptionIsSet;
}
void WithholdDef::unsetCustomExemptionReasonDescription()
{
    m_CustomExemptionReasonDescriptionIsSet = false;
}

}
}
}
}

