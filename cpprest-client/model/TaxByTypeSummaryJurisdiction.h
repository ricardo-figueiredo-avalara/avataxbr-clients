/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * TaxByTypeSummaryJurisdiction.h
 *
 * 
 */

#ifndef TaxByTypeSummaryJurisdiction_H_
#define TaxByTypeSummaryJurisdiction_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  TaxByTypeSummaryJurisdiction
    : public ModelBase
{
public:
    TaxByTypeSummaryJurisdiction();
    virtual ~TaxByTypeSummaryJurisdiction();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// TaxByTypeSummaryJurisdiction members

    /// <summary>
    /// Jurisdiction used for calctax amount
    /// </summary>
    utility::string_t getJurisdictionName() const;
    void setJurisdictionName(utility::string_t value);
    bool jurisdictionNameIsSet() const;
    void unsetJurisdictionName();
    /// <summary>
    /// Type of jurisdiction - &#39;City&#39; - &#39;State&#39; - &#39;Country&#39; 
    /// </summary>
    utility::string_t getJurisdictionType() const;
    void setJurisdictionType(utility::string_t value);
    bool jurisdictionTypeIsSet() const;
    void unsetJurisdictionType();
    /// <summary>
    /// sum of referenced tax value by jurisdiction
    /// </summary>
    double getTax() const;
    void setTax(double value);
    bool taxIsSet() const;
    void unsetTax();

protected:
    utility::string_t m_JurisdictionName;
    bool m_JurisdictionNameIsSet;
utility::string_t m_JurisdictionType;
    bool m_JurisdictionTypeIsSet;
double m_Tax;
    bool m_TaxIsSet;
};

}
}
}
}

#endif /* TaxByTypeSummaryJurisdiction_H_ */
