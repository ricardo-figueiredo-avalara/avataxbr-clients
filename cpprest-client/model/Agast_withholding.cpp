/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Agast_withholding.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Agast_withholding::Agast_withholding()
{
    m_IRRF = false;
    m_IRRFIsSet = false;
    m_IRRFLegalReason = U("");
    m_IRRFLegalReasonIsSet = false;
    m_INSSSubjectToDischarge = false;
    m_INSSSubjectToDischargeIsSet = false;
    m_INSS = false;
    m_INSSIsSet = false;
    m_INSSLegalReason = U("");
    m_INSSLegalReasonIsSet = false;
    m_INSsForSimples = false;
    m_INSsForSimplesIsSet = false;
    m_INSSForSimplesLegalReason = U("");
    m_INSSForSimplesLegalReasonIsSet = false;
    m_PISIsSet = false;
    m_COFINSIsSet = false;
    m_CSLLIsSet = false;
    
}

Agast_withholding::~Agast_withholding()
{
}

void Agast_withholding::validate()
{
    // TODO: implement validation
}

web::json::value Agast_withholding::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IRRFIsSet)
    {
        val[U("IRRF")] = ModelBase::toJson(m_IRRF);
    }
    if(m_IRRFLegalReasonIsSet)
    {
        val[U("IRRFLegalReason")] = ModelBase::toJson(m_IRRFLegalReason);
    }
    if(m_INSSSubjectToDischargeIsSet)
    {
        val[U("INSSSubjectToDischarge")] = ModelBase::toJson(m_INSSSubjectToDischarge);
    }
    if(m_INSSIsSet)
    {
        val[U("INSS")] = ModelBase::toJson(m_INSS);
    }
    if(m_INSSLegalReasonIsSet)
    {
        val[U("INSSLegalReason")] = ModelBase::toJson(m_INSSLegalReason);
    }
    if(m_INSsForSimplesIsSet)
    {
        val[U("INSsForSimples")] = ModelBase::toJson(m_INSsForSimples);
    }
    if(m_INSSForSimplesLegalReasonIsSet)
    {
        val[U("INSSForSimplesLegalReason")] = ModelBase::toJson(m_INSSForSimplesLegalReason);
    }
    if(m_PISIsSet)
    {
        val[U("PIS")] = ModelBase::toJson(m_PIS);
    }
    if(m_COFINSIsSet)
    {
        val[U("COFINS")] = ModelBase::toJson(m_COFINS);
    }
    if(m_CSLLIsSet)
    {
        val[U("CSLL")] = ModelBase::toJson(m_CSLL);
    }
    

    return val;
}

void Agast_withholding::fromJson(web::json::value& val)
{
    if(val.has_field(U("IRRF")))
    {
        setIRRF(ModelBase::boolFromJson(val[U("IRRF")]));
    }
    if(val.has_field(U("IRRFLegalReason")))
    {
        setIRRFLegalReason(ModelBase::stringFromJson(val[U("IRRFLegalReason")]));
        
    }
    if(val.has_field(U("INSSSubjectToDischarge")))
    {
        setINSSSubjectToDischarge(ModelBase::boolFromJson(val[U("INSSSubjectToDischarge")]));
    }
    if(val.has_field(U("INSS")))
    {
        setINSS(ModelBase::boolFromJson(val[U("INSS")]));
    }
    if(val.has_field(U("INSSLegalReason")))
    {
        setINSSLegalReason(ModelBase::stringFromJson(val[U("INSSLegalReason")]));
        
    }
    if(val.has_field(U("INSsForSimples")))
    {
        setINSsForSimples(ModelBase::boolFromJson(val[U("INSsForSimples")]));
    }
    if(val.has_field(U("INSSForSimplesLegalReason")))
    {
        setINSSForSimplesLegalReason(ModelBase::stringFromJson(val[U("INSSForSimplesLegalReason")]));
        
    }
    if(val.has_field(U("PIS")))
    {
        if(!val[U("PIS")].is_null())
        {
            std::shared_ptr<Agast_withholding_PIS> newItem(new Agast_withholding_PIS());
            newItem->fromJson(val[U("PIS")]);
            setPIS( newItem );
        }
        
    }
    if(val.has_field(U("COFINS")))
    {
        if(!val[U("COFINS")].is_null())
        {
            std::shared_ptr<Agast_withholding_COFINS> newItem(new Agast_withholding_COFINS());
            newItem->fromJson(val[U("COFINS")]);
            setCOFINS( newItem );
        }
        
    }
    if(val.has_field(U("CSLL")))
    {
        if(!val[U("CSLL")].is_null())
        {
            std::shared_ptr<Agast_withholding_CSLL> newItem(new Agast_withholding_CSLL());
            newItem->fromJson(val[U("CSLL")]);
            setCSLL( newItem );
        }
        
    }
    
}

void Agast_withholding::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_IRRFIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("IRRF"), m_IRRF));
    }
    if(m_IRRFLegalReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("IRRFLegalReason"), m_IRRFLegalReason));
        
    }
    if(m_INSSSubjectToDischargeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("INSSSubjectToDischarge"), m_INSSSubjectToDischarge));
    }
    if(m_INSSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("INSS"), m_INSS));
    }
    if(m_INSSLegalReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("INSSLegalReason"), m_INSSLegalReason));
        
    }
    if(m_INSsForSimplesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("INSsForSimples"), m_INSsForSimples));
    }
    if(m_INSSForSimplesLegalReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("INSSForSimplesLegalReason"), m_INSSForSimplesLegalReason));
        
    }
    if(m_PISIsSet)
    {
        if (m_PIS.get())
        {
            m_PIS->toMultipart(multipart, U("PIS."));
        }
        
    }
    if(m_COFINSIsSet)
    {
        if (m_COFINS.get())
        {
            m_COFINS->toMultipart(multipart, U("COFINS."));
        }
        
    }
    if(m_CSLLIsSet)
    {
        if (m_CSLL.get())
        {
            m_CSLL->toMultipart(multipart, U("CSLL."));
        }
        
    }
    
}

void Agast_withholding::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("IRRF")))
    {
        setIRRF(ModelBase::boolFromHttpContent(multipart->getContent(U("IRRF"))));
    }
    if(multipart->hasContent(U("IRRFLegalReason")))
    {
        setIRRFLegalReason(ModelBase::stringFromHttpContent(multipart->getContent(U("IRRFLegalReason"))));
        
    }
    if(multipart->hasContent(U("INSSSubjectToDischarge")))
    {
        setINSSSubjectToDischarge(ModelBase::boolFromHttpContent(multipart->getContent(U("INSSSubjectToDischarge"))));
    }
    if(multipart->hasContent(U("INSS")))
    {
        setINSS(ModelBase::boolFromHttpContent(multipart->getContent(U("INSS"))));
    }
    if(multipart->hasContent(U("INSSLegalReason")))
    {
        setINSSLegalReason(ModelBase::stringFromHttpContent(multipart->getContent(U("INSSLegalReason"))));
        
    }
    if(multipart->hasContent(U("INSsForSimples")))
    {
        setINSsForSimples(ModelBase::boolFromHttpContent(multipart->getContent(U("INSsForSimples"))));
    }
    if(multipart->hasContent(U("INSSForSimplesLegalReason")))
    {
        setINSSForSimplesLegalReason(ModelBase::stringFromHttpContent(multipart->getContent(U("INSSForSimplesLegalReason"))));
        
    }
    if(multipart->hasContent(U("PIS")))
    {
        if(multipart->hasContent(U("PIS")))
        {
            std::shared_ptr<Agast_withholding_PIS> newItem(new Agast_withholding_PIS());
            newItem->fromMultiPart(multipart, U("PIS."));
            setPIS( newItem );
        }
        
    }
    if(multipart->hasContent(U("COFINS")))
    {
        if(multipart->hasContent(U("COFINS")))
        {
            std::shared_ptr<Agast_withholding_COFINS> newItem(new Agast_withholding_COFINS());
            newItem->fromMultiPart(multipart, U("COFINS."));
            setCOFINS( newItem );
        }
        
    }
    if(multipart->hasContent(U("CSLL")))
    {
        if(multipart->hasContent(U("CSLL")))
        {
            std::shared_ptr<Agast_withholding_CSLL> newItem(new Agast_withholding_CSLL());
            newItem->fromMultiPart(multipart, U("CSLL."));
            setCSLL( newItem );
        }
        
    }
    
}


bool Agast_withholding::getIRRF() const
{
    return m_IRRF;
}
void Agast_withholding::setIRRF(bool value)
{
    m_IRRF = value;
    m_IRRFIsSet = true;
}
bool Agast_withholding::IRRFIsSet() const
{
    return m_IRRFIsSet;
}
void Agast_withholding::unsetIRRF()
{
    m_IRRFIsSet = false;
}
utility::string_t Agast_withholding::getIRRFLegalReason() const
{
    return m_IRRFLegalReason;
}
void Agast_withholding::setIRRFLegalReason(utility::string_t value)
{
    m_IRRFLegalReason = value;
    m_IRRFLegalReasonIsSet = true;
}
bool Agast_withholding::IRRFLegalReasonIsSet() const
{
    return m_IRRFLegalReasonIsSet;
}
void Agast_withholding::unsetIRRFLegalReason()
{
    m_IRRFLegalReasonIsSet = false;
}
bool Agast_withholding::getINSSSubjectToDischarge() const
{
    return m_INSSSubjectToDischarge;
}
void Agast_withholding::setINSSSubjectToDischarge(bool value)
{
    m_INSSSubjectToDischarge = value;
    m_INSSSubjectToDischargeIsSet = true;
}
bool Agast_withholding::INSSSubjectToDischargeIsSet() const
{
    return m_INSSSubjectToDischargeIsSet;
}
void Agast_withholding::unsetINSSSubjectToDischarge()
{
    m_INSSSubjectToDischargeIsSet = false;
}
bool Agast_withholding::getINSS() const
{
    return m_INSS;
}
void Agast_withholding::setINSS(bool value)
{
    m_INSS = value;
    m_INSSIsSet = true;
}
bool Agast_withholding::INSSIsSet() const
{
    return m_INSSIsSet;
}
void Agast_withholding::unsetINSS()
{
    m_INSSIsSet = false;
}
utility::string_t Agast_withholding::getINSSLegalReason() const
{
    return m_INSSLegalReason;
}
void Agast_withholding::setINSSLegalReason(utility::string_t value)
{
    m_INSSLegalReason = value;
    m_INSSLegalReasonIsSet = true;
}
bool Agast_withholding::INSSLegalReasonIsSet() const
{
    return m_INSSLegalReasonIsSet;
}
void Agast_withholding::unsetINSSLegalReason()
{
    m_INSSLegalReasonIsSet = false;
}
bool Agast_withholding::getINSsForSimples() const
{
    return m_INSsForSimples;
}
void Agast_withholding::setINSsForSimples(bool value)
{
    m_INSsForSimples = value;
    m_INSsForSimplesIsSet = true;
}
bool Agast_withholding::INSsForSimplesIsSet() const
{
    return m_INSsForSimplesIsSet;
}
void Agast_withholding::unsetINSsForSimples()
{
    m_INSsForSimplesIsSet = false;
}
utility::string_t Agast_withholding::getINSSForSimplesLegalReason() const
{
    return m_INSSForSimplesLegalReason;
}
void Agast_withholding::setINSSForSimplesLegalReason(utility::string_t value)
{
    m_INSSForSimplesLegalReason = value;
    m_INSSForSimplesLegalReasonIsSet = true;
}
bool Agast_withholding::INSSForSimplesLegalReasonIsSet() const
{
    return m_INSSForSimplesLegalReasonIsSet;
}
void Agast_withholding::unsetINSSForSimplesLegalReason()
{
    m_INSSForSimplesLegalReasonIsSet = false;
}
std::shared_ptr<Agast_withholding_PIS> Agast_withholding::getPIS() const
{
    return m_PIS;
}
void Agast_withholding::setPIS(std::shared_ptr<Agast_withholding_PIS> value)
{
    m_PIS = value;
    m_PISIsSet = true;
}
bool Agast_withholding::PISIsSet() const
{
    return m_PISIsSet;
}
void Agast_withholding::unsetPIS()
{
    m_PISIsSet = false;
}
std::shared_ptr<Agast_withholding_COFINS> Agast_withholding::getCOFINS() const
{
    return m_COFINS;
}
void Agast_withholding::setCOFINS(std::shared_ptr<Agast_withholding_COFINS> value)
{
    m_COFINS = value;
    m_COFINSIsSet = true;
}
bool Agast_withholding::COFINSIsSet() const
{
    return m_COFINSIsSet;
}
void Agast_withholding::unsetCOFINS()
{
    m_COFINSIsSet = false;
}
std::shared_ptr<Agast_withholding_CSLL> Agast_withholding::getCSLL() const
{
    return m_CSLL;
}
void Agast_withholding::setCSLL(std::shared_ptr<Agast_withholding_CSLL> value)
{
    m_CSLL = value;
    m_CSLLIsSet = true;
}
bool Agast_withholding::CSLLIsSet() const
{
    return m_CSLLIsSet;
}
void Agast_withholding::unsetCSLL()
{
    m_CSLLIsSet = false;
}

}
}
}
}

