/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Payment.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Payment::Payment()
{
    m_InstallmentsTerms = 0;
    m_InstallmentsTermsIsSet = false;
    m_BillIsSet = false;
    m_InstallmentIsSet = false;
    m_PaymentModeIsSet = false;
    
}

Payment::~Payment()
{
}

void Payment::validate()
{
    // TODO: implement validation
}

web::json::value Payment::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_InstallmentsTermsIsSet)
    {
        val[U("installmentsTerms")] = ModelBase::toJson(m_InstallmentsTerms);
    }
    if(m_BillIsSet)
    {
        val[U("bill")] = ModelBase::toJson(m_Bill);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Installment )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("installment")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_PaymentMode )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("paymentMode")] = web::json::value::array(jsonArray);
        }
    }
    

    return val;
}

void Payment::fromJson(web::json::value& val)
{
    if(val.has_field(U("installmentsTerms")))
    {
        setInstallmentsTerms(ModelBase::int32_tFromJson(val[U("installmentsTerms")]));
    }
    if(val.has_field(U("bill")))
    {
        if(!val[U("bill")].is_null())
        {
            std::shared_ptr<Payment_bill> newItem(new Payment_bill());
            newItem->fromJson(val[U("bill")]);
            setBill( newItem );
        }
        
    }
    {
        m_Installment.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("installment")))
        {
        for( auto& item : val[U("installment")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Installment.push_back( std::shared_ptr<Payment_installment>(nullptr) );
            }
            else
            {
                std::shared_ptr<Payment_installment> newItem(new Payment_installment());
                newItem->fromJson(item);
                m_Installment.push_back( newItem );
            }
            
        }
        }
    }
    {
        m_PaymentMode.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("paymentMode")))
        {
        for( auto& item : val[U("paymentMode")].as_array() )
        {
            
            if(item.is_null())
            {
                m_PaymentMode.push_back( std::shared_ptr<Payment_paymentMode>(nullptr) );
            }
            else
            {
                std::shared_ptr<Payment_paymentMode> newItem(new Payment_paymentMode());
                newItem->fromJson(item);
                m_PaymentMode.push_back( newItem );
            }
            
        }
        }
    }
    
}

void Payment::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_InstallmentsTermsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("installmentsTerms"), m_InstallmentsTerms));
    }
    if(m_BillIsSet)
    {
        if (m_Bill.get())
        {
            m_Bill->toMultipart(multipart, U("bill."));
        }
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Installment )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("installment"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_PaymentMode )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("paymentMode"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    
}

void Payment::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("installmentsTerms")))
    {
        setInstallmentsTerms(ModelBase::int32_tFromHttpContent(multipart->getContent(U("installmentsTerms"))));
    }
    if(multipart->hasContent(U("bill")))
    {
        if(multipart->hasContent(U("bill")))
        {
            std::shared_ptr<Payment_bill> newItem(new Payment_bill());
            newItem->fromMultiPart(multipart, U("bill."));
            setBill( newItem );
        }
        
    }
    {
        m_Installment.clear();
        if(multipart->hasContent(U("installment")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("installment"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Installment.push_back( std::shared_ptr<Payment_installment>(nullptr) );
            }
            else
            {
                std::shared_ptr<Payment_installment> newItem(new Payment_installment());
                newItem->fromJson(item);
                m_Installment.push_back( newItem );
            }
            
        }
        }
    }
    {
        m_PaymentMode.clear();
        if(multipart->hasContent(U("paymentMode")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("paymentMode"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_PaymentMode.push_back( std::shared_ptr<Payment_paymentMode>(nullptr) );
            }
            else
            {
                std::shared_ptr<Payment_paymentMode> newItem(new Payment_paymentMode());
                newItem->fromJson(item);
                m_PaymentMode.push_back( newItem );
            }
            
        }
        }
    }
    
}


int32_t Payment::getInstallmentsTerms() const
{
    return m_InstallmentsTerms;
}
void Payment::setInstallmentsTerms(int32_t value)
{
    m_InstallmentsTerms = value;
    m_InstallmentsTermsIsSet = true;
}
bool Payment::installmentsTermsIsSet() const
{
    return m_InstallmentsTermsIsSet;
}
void Payment::unsetInstallmentsTerms()
{
    m_InstallmentsTermsIsSet = false;
}
std::shared_ptr<Payment_bill> Payment::getBill() const
{
    return m_Bill;
}
void Payment::setBill(std::shared_ptr<Payment_bill> value)
{
    m_Bill = value;
    m_BillIsSet = true;
}
bool Payment::billIsSet() const
{
    return m_BillIsSet;
}
void Payment::unsetBill()
{
    m_BillIsSet = false;
}
std::vector<std::shared_ptr<Payment_installment>>& Payment::getInstallment()
{
    return m_Installment;
}
bool Payment::installmentIsSet() const
{
    return m_InstallmentIsSet;
}
void Payment::unsetInstallment()
{
    m_InstallmentIsSet = false;
}
std::vector<std::shared_ptr<Payment_paymentMode>>& Payment::getPaymentMode()
{
    return m_PaymentMode;
}
bool Payment::paymentModeIsSet() const
{
    return m_PaymentModeIsSet;
}
void Payment::unsetPaymentMode()
{
    m_PaymentModeIsSet = false;
}

}
}
}
}

