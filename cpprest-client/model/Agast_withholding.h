/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Agast_withholding.h
 *
 * inform if this item is subject to withholding tax on service Transactions, default true
 */

#ifndef Agast_withholding_H_
#define Agast_withholding_H_


#include "ModelBase.h"

#include "Agast_withholding_PIS.h"
#include <cpprest/details/basic_types.h>
#include "Agast_withholding_CSLL.h"
#include "Agast_withholding_COFINS.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// inform if this item is subject to withholding tax on service Transactions, default true
/// </summary>
class  Agast_withholding
    : public ModelBase
{
public:
    Agast_withholding();
    virtual ~Agast_withholding();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Agast_withholding members

    /// <summary>
    /// 
    /// </summary>
    bool getIRRF() const;
    void setIRRF(bool value);
    bool IRRFIsSet() const;
    void unsetIRRF();
    /// <summary>
    /// reference id to TaxLegalReason
    /// </summary>
    utility::string_t getIRRFLegalReason() const;
    void setIRRFLegalReason(utility::string_t value);
    bool IRRFLegalReasonIsSet() const;
    void unsetIRRFLegalReason();
    /// <summary>
    /// Item subjecto to payroll discharge Item sujeto à desoneraçãode folha de pagamento 
    /// </summary>
    bool getINSSSubjectToDischarge() const;
    void setINSSSubjectToDischarge(bool value);
    bool INSSSubjectToDischargeIsSet() const;
    void unsetINSSSubjectToDischarge();
    /// <summary>
    /// 
    /// </summary>
    bool getINSS() const;
    void setINSS(bool value);
    bool INSSIsSet() const;
    void unsetINSS();
    /// <summary>
    /// reference id to TaxLegalReason
    /// </summary>
    utility::string_t getINSSLegalReason() const;
    void setINSSLegalReason(utility::string_t value);
    bool INSSLegalReasonIsSet() const;
    void unsetINSSLegalReason();
    /// <summary>
    /// 
    /// </summary>
    bool getINSsForSimples() const;
    void setINSsForSimples(bool value);
    bool INSsForSimplesIsSet() const;
    void unsetINSsForSimples();
    /// <summary>
    /// reference id to TaxLegalReason
    /// </summary>
    utility::string_t getINSSForSimplesLegalReason() const;
    void setINSSForSimplesLegalReason(utility::string_t value);
    bool INSSForSimplesLegalReasonIsSet() const;
    void unsetINSSForSimplesLegalReason();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Agast_withholding_PIS> getPIS() const;
    void setPIS(std::shared_ptr<Agast_withholding_PIS> value);
    bool PISIsSet() const;
    void unsetPIS();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Agast_withholding_COFINS> getCOFINS() const;
    void setCOFINS(std::shared_ptr<Agast_withholding_COFINS> value);
    bool COFINSIsSet() const;
    void unsetCOFINS();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Agast_withholding_CSLL> getCSLL() const;
    void setCSLL(std::shared_ptr<Agast_withholding_CSLL> value);
    bool CSLLIsSet() const;
    void unsetCSLL();

protected:
    bool m_IRRF;
    bool m_IRRFIsSet;
utility::string_t m_IRRFLegalReason;
    bool m_IRRFLegalReasonIsSet;
bool m_INSSSubjectToDischarge;
    bool m_INSSSubjectToDischargeIsSet;
bool m_INSS;
    bool m_INSSIsSet;
utility::string_t m_INSSLegalReason;
    bool m_INSSLegalReasonIsSet;
bool m_INSsForSimples;
    bool m_INSsForSimplesIsSet;
utility::string_t m_INSSForSimplesLegalReason;
    bool m_INSSForSimplesLegalReasonIsSet;
std::shared_ptr<Agast_withholding_PIS> m_PIS;
    bool m_PISIsSet;
std::shared_ptr<Agast_withholding_COFINS> m_COFINS;
    bool m_COFINSIsSet;
std::shared_ptr<Agast_withholding_CSLL> m_CSLL;
    bool m_CSLLIsSet;
};

}
}
}
}

#endif /* Agast_withholding_H_ */
