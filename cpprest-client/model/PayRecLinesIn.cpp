/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PayRecLinesIn.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PayRecLinesIn::PayRecLinesIn()
{
    m_LineCode = 0;
    m_LineCodeIsSet = false;
    m_LineType = U("");
    m_LineTypeIsSet = false;
    m_ItemCode = U("");
    m_ItemDescription = U("");
    m_ItemDescriptionIsSet = false;
    m_ItemDocNumber = U("");
    m_ItemDocNumberIsSet = false;
    m_LineUntaxedPenality = 0.0;
    m_LineUntaxedPenalityIsSet = false;
    m_LineUntaxedDiscount = 0.0;
    m_LineUntaxedDiscountIsSet = false;
    
}

PayRecLinesIn::~PayRecLinesIn()
{
}

void PayRecLinesIn::validate()
{
    // TODO: implement validation
}

web::json::value PayRecLinesIn::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_LineCodeIsSet)
    {
        val[U("lineCode")] = ModelBase::toJson(m_LineCode);
    }
    if(m_LineTypeIsSet)
    {
        val[U("lineType")] = ModelBase::toJson(m_LineType);
    }
    val[U("itemCode")] = ModelBase::toJson(m_ItemCode);
    if(m_ItemDescriptionIsSet)
    {
        val[U("itemDescription")] = ModelBase::toJson(m_ItemDescription);
    }
    if(m_ItemDocNumberIsSet)
    {
        val[U("itemDocNumber")] = ModelBase::toJson(m_ItemDocNumber);
    }
    if(m_LineUntaxedPenalityIsSet)
    {
        val[U("lineUntaxedPenality")] = ModelBase::toJson(m_LineUntaxedPenality);
    }
    if(m_LineUntaxedDiscountIsSet)
    {
        val[U("lineUntaxedDiscount")] = ModelBase::toJson(m_LineUntaxedDiscount);
    }
    

    return val;
}

void PayRecLinesIn::fromJson(web::json::value& val)
{
    if(val.has_field(U("lineCode")))
    {
        setLineCode(ModelBase::int32_tFromJson(val[U("lineCode")]));
    }
    if(val.has_field(U("lineType")))
    {
        setLineType(ModelBase::stringFromJson(val[U("lineType")]));
        
    }
    setItemCode(ModelBase::stringFromJson(val[U("itemCode")]));
    if(val.has_field(U("itemDescription")))
    {
        setItemDescription(ModelBase::stringFromJson(val[U("itemDescription")]));
        
    }
    if(val.has_field(U("itemDocNumber")))
    {
        setItemDocNumber(ModelBase::stringFromJson(val[U("itemDocNumber")]));
        
    }
    if(val.has_field(U("lineUntaxedPenality")))
    {
        setLineUntaxedPenality(ModelBase::doubleFromJson(val[U("lineUntaxedPenality")]));
    }
    if(val.has_field(U("lineUntaxedDiscount")))
    {
        setLineUntaxedDiscount(ModelBase::doubleFromJson(val[U("lineUntaxedDiscount")]));
    }
    
}

void PayRecLinesIn::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_LineCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lineCode"), m_LineCode));
    }
    if(m_LineTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lineType"), m_LineType));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("itemCode"), m_ItemCode));
    if(m_ItemDescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("itemDescription"), m_ItemDescription));
        
    }
    if(m_ItemDocNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("itemDocNumber"), m_ItemDocNumber));
        
    }
    if(m_LineUntaxedPenalityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lineUntaxedPenality"), m_LineUntaxedPenality));
    }
    if(m_LineUntaxedDiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lineUntaxedDiscount"), m_LineUntaxedDiscount));
    }
    
}

void PayRecLinesIn::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("lineCode")))
    {
        setLineCode(ModelBase::int32_tFromHttpContent(multipart->getContent(U("lineCode"))));
    }
    if(multipart->hasContent(U("lineType")))
    {
        setLineType(ModelBase::stringFromHttpContent(multipart->getContent(U("lineType"))));
        
    }
    setItemCode(ModelBase::stringFromHttpContent(multipart->getContent(U("itemCode"))));
    if(multipart->hasContent(U("itemDescription")))
    {
        setItemDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("itemDescription"))));
        
    }
    if(multipart->hasContent(U("itemDocNumber")))
    {
        setItemDocNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("itemDocNumber"))));
        
    }
    if(multipart->hasContent(U("lineUntaxedPenality")))
    {
        setLineUntaxedPenality(ModelBase::doubleFromHttpContent(multipart->getContent(U("lineUntaxedPenality"))));
    }
    if(multipart->hasContent(U("lineUntaxedDiscount")))
    {
        setLineUntaxedDiscount(ModelBase::doubleFromHttpContent(multipart->getContent(U("lineUntaxedDiscount"))));
    }
    
}


int32_t PayRecLinesIn::getLineCode() const
{
    return m_LineCode;
}
void PayRecLinesIn::setLineCode(int32_t value)
{
    m_LineCode = value;
    m_LineCodeIsSet = true;
}
bool PayRecLinesIn::lineCodeIsSet() const
{
    return m_LineCodeIsSet;
}
void PayRecLinesIn::unsetLineCode()
{
    m_LineCodeIsSet = false;
}
utility::string_t PayRecLinesIn::getLineType() const
{
    return m_LineType;
}
void PayRecLinesIn::setLineType(utility::string_t value)
{
    m_LineType = value;
    m_LineTypeIsSet = true;
}
bool PayRecLinesIn::lineTypeIsSet() const
{
    return m_LineTypeIsSet;
}
void PayRecLinesIn::unsetLineType()
{
    m_LineTypeIsSet = false;
}
utility::string_t PayRecLinesIn::getItemCode() const
{
    return m_ItemCode;
}
void PayRecLinesIn::setItemCode(utility::string_t value)
{
    m_ItemCode = value;
    
}
utility::string_t PayRecLinesIn::getItemDescription() const
{
    return m_ItemDescription;
}
void PayRecLinesIn::setItemDescription(utility::string_t value)
{
    m_ItemDescription = value;
    m_ItemDescriptionIsSet = true;
}
bool PayRecLinesIn::itemDescriptionIsSet() const
{
    return m_ItemDescriptionIsSet;
}
void PayRecLinesIn::unsetItemDescription()
{
    m_ItemDescriptionIsSet = false;
}
utility::string_t PayRecLinesIn::getItemDocNumber() const
{
    return m_ItemDocNumber;
}
void PayRecLinesIn::setItemDocNumber(utility::string_t value)
{
    m_ItemDocNumber = value;
    m_ItemDocNumberIsSet = true;
}
bool PayRecLinesIn::itemDocNumberIsSet() const
{
    return m_ItemDocNumberIsSet;
}
void PayRecLinesIn::unsetItemDocNumber()
{
    m_ItemDocNumberIsSet = false;
}
double PayRecLinesIn::getLineUntaxedPenality() const
{
    return m_LineUntaxedPenality;
}
void PayRecLinesIn::setLineUntaxedPenality(double value)
{
    m_LineUntaxedPenality = value;
    m_LineUntaxedPenalityIsSet = true;
}
bool PayRecLinesIn::lineUntaxedPenalityIsSet() const
{
    return m_LineUntaxedPenalityIsSet;
}
void PayRecLinesIn::unsetLineUntaxedPenality()
{
    m_LineUntaxedPenalityIsSet = false;
}
double PayRecLinesIn::getLineUntaxedDiscount() const
{
    return m_LineUntaxedDiscount;
}
void PayRecLinesIn::setLineUntaxedDiscount(double value)
{
    m_LineUntaxedDiscount = value;
    m_LineUntaxedDiscountIsSet = true;
}
bool PayRecLinesIn::lineUntaxedDiscountIsSet() const
{
    return m_LineUntaxedDiscountIsSet;
}
void PayRecLinesIn::unsetLineUntaxedDiscount()
{
    m_LineUntaxedDiscountIsSet = false;
}

}
}
}
}

