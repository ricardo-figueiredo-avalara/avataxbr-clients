/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * AdditionalInformation.h
 *
 * 
 */

#ifndef AdditionalInformation_H_
#define AdditionalInformation_H_


#include "ModelBase.h"

#include "AdditionalInformation_procRef.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  AdditionalInformation
    : public ModelBase
{
public:
    AdditionalInformation();
    virtual ~AdditionalInformation();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AdditionalInformation members

    /// <summary>
    /// Additional information of fiscal interest
    /// </summary>
    utility::string_t getFiscalInfo() const;
    void setFiscalInfo(utility::string_t value);
    bool fiscalInfoIsSet() const;
    void unsetFiscalInfo();
    /// <summary>
    /// Additional information of user interest
    /// </summary>
    utility::string_t getComplementaryInfo() const;
    void setComplementaryInfo(utility::string_t value);
    bool complementaryInfoIsSet() const;
    void unsetComplementaryInfo();
    /// <summary>
    /// Referenced Process
    /// </summary>
    std::vector<std::shared_ptr<AdditionalInformation_procRef>>& getProcRef();
    bool procRefIsSet() const;
    void unsetProcRef();

protected:
    utility::string_t m_FiscalInfo;
    bool m_FiscalInfoIsSet;
utility::string_t m_ComplementaryInfo;
    bool m_ComplementaryInfoIsSet;
std::vector<std::shared_ptr<AdditionalInformation_procRef>> m_ProcRef;
    bool m_ProcRefIsSet;
};

}
}
}
}

#endif /* AdditionalInformation_H_ */
