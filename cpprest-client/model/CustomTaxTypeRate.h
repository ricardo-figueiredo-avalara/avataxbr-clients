/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * CustomTaxTypeRate.h
 *
 * 
 */

#ifndef CustomTaxTypeRate_H_
#define CustomTaxTypeRate_H_


#include "ModelBase.h"

#include "TaxType.h"
#include <cpprest/details/basic_types.h>
#include "TaxTypeRate.h"
#include "UUID.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  CustomTaxTypeRate
    : public ModelBase
{
public:
    CustomTaxTypeRate();
    virtual ~CustomTaxTypeRate();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CustomTaxTypeRate members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxType> getTaxType() const;
    void setTaxType(std::shared_ptr<TaxType> value);
        /// <summary>
    /// Tax can be calculated by rate or by quantity
    /// </summary>
    utility::string_t getTaxModel() const;
    void setTaxModel(utility::string_t value);
        /// <summary>
    /// Specific tax rate ex 3.5 (3.5%)
    /// </summary>
    double getRate() const;
    void setRate(double value);
    bool rateIsSet() const;
    void unsetRate();
    /// <summary>
    /// Specific tax rate ex 3.5 (3.5%)
    /// </summary>
    double getSrvAmount() const;
    void setSrvAmount(double value);
    bool srvAmountIsSet() const;
    void unsetSrvAmount();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getQuantityUnidBase() const;
    void setQuantityUnidBase(utility::string_t value);
    bool quantityUnidBaseIsSet() const;
    void unsetQuantityUnidBase();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSpecializationType() const;
    void setSpecializationType(utility::string_t value);
    bool specializationTypeIsSet() const;
    void unsetSpecializationType();
    /// <summary>
    /// Company ID
    /// </summary>
    std::shared_ptr<UUID> getCompanyId() const;
    void setCompanyId(std::shared_ptr<UUID> value);
    
protected:
    std::shared_ptr<TaxType> m_TaxType;
    utility::string_t m_TaxModel;
    double m_Rate;
    bool m_RateIsSet;
double m_SrvAmount;
    bool m_SrvAmountIsSet;
utility::string_t m_QuantityUnidBase;
    bool m_QuantityUnidBaseIsSet;
utility::string_t m_SpecializationType;
    bool m_SpecializationTypeIsSet;
std::shared_ptr<UUID> m_CompanyId;
    };

}
}
}
}

#endif /* CustomTaxTypeRate_H_ */
