/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SalesEntity.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SalesEntity::SalesEntity()
{
    m_Name = U("");
    m_NameIsSet = false;
    m_Email = U("");
    m_EmailIsSet = false;
    m_Cnpjcpf = U("");
    m_CnpjcpfIsSet = false;
    m_CityTaxId = U("");
    m_CityTaxIdIsSet = false;
    m_StateTaxId = U("");
    m_StateTaxIdIsSet = false;
    m_Suframa = U("");
    m_SuframaIsSet = false;
    m_Phone = U("");
    m_PhoneIsSet = false;
    m_SpecialTaxRegime = U("");
    m_SpecialTaxRegimeIsSet = false;
    m_SubjectToSRF1234 = false;
    m_SubjectToSRF1234IsSet = false;
    m_RequiredWithholdingISS = false;
    m_RequiredWithholdingISSIsSet = false;
    m_Art = U("");
    m_ArtIsSet = false;
    m_AdminProcess = U("");
    m_AdminProcessIsSet = false;
    m_BuildCode = U("");
    m_BuildCodeIsSet = false;
    
}

SalesEntity::~SalesEntity()
{
}

void SalesEntity::validate()
{
    // TODO: implement validation
}

web::json::value SalesEntity::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    val[U("type")] = ModelBase::toJson(m_Type);
    if(m_EmailIsSet)
    {
        val[U("email")] = ModelBase::toJson(m_Email);
    }
    if(m_CnpjcpfIsSet)
    {
        val[U("cnpjcpf")] = ModelBase::toJson(m_Cnpjcpf);
    }
    if(m_CityTaxIdIsSet)
    {
        val[U("cityTaxId")] = ModelBase::toJson(m_CityTaxId);
    }
    if(m_StateTaxIdIsSet)
    {
        val[U("stateTaxId")] = ModelBase::toJson(m_StateTaxId);
    }
    if(m_SuframaIsSet)
    {
        val[U("suframa")] = ModelBase::toJson(m_Suframa);
    }
    if(m_PhoneIsSet)
    {
        val[U("phone")] = ModelBase::toJson(m_Phone);
    }
    val[U("taxRegime")] = ModelBase::toJson(m_TaxRegime);
    if(m_SpecialTaxRegimeIsSet)
    {
        val[U("specialTaxRegime")] = ModelBase::toJson(m_SpecialTaxRegime);
    }
    if(m_SubjectToSRF1234IsSet)
    {
        val[U("subjectToSRF1234")] = ModelBase::toJson(m_SubjectToSRF1234);
    }
    if(m_RequiredWithholdingISSIsSet)
    {
        val[U("requiredWithholdingISS")] = ModelBase::toJson(m_RequiredWithholdingISS);
    }
    if(m_ArtIsSet)
    {
        val[U("art")] = ModelBase::toJson(m_Art);
    }
    if(m_AdminProcessIsSet)
    {
        val[U("adminProcess")] = ModelBase::toJson(m_AdminProcess);
    }
    if(m_BuildCodeIsSet)
    {
        val[U("buildCode")] = ModelBase::toJson(m_BuildCode);
    }
    

    return val;
}

void SalesEntity::fromJson(web::json::value& val)
{
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
        
    }
    std::shared_ptr<EntityType> newType(new EntityType());
    newType->fromJson(val[U("type")]);
    setType( newItem );
    if(val.has_field(U("email")))
    {
        setEmail(ModelBase::stringFromJson(val[U("email")]));
        
    }
    if(val.has_field(U("cnpjcpf")))
    {
        setCnpjcpf(ModelBase::stringFromJson(val[U("cnpjcpf")]));
        
    }
    if(val.has_field(U("cityTaxId")))
    {
        setCityTaxId(ModelBase::stringFromJson(val[U("cityTaxId")]));
        
    }
    if(val.has_field(U("stateTaxId")))
    {
        setStateTaxId(ModelBase::stringFromJson(val[U("stateTaxId")]));
        
    }
    if(val.has_field(U("suframa")))
    {
        setSuframa(ModelBase::stringFromJson(val[U("suframa")]));
        
    }
    if(val.has_field(U("phone")))
    {
        setPhone(ModelBase::stringFromJson(val[U("phone")]));
        
    }
    std::shared_ptr<FederalTaxRegime> newTaxRegime(new FederalTaxRegime());
    newTaxRegime->fromJson(val[U("taxRegime")]);
    setTaxRegime( newItem );
    if(val.has_field(U("specialTaxRegime")))
    {
        setSpecialTaxRegime(ModelBase::stringFromJson(val[U("specialTaxRegime")]));
        
    }
    if(val.has_field(U("subjectToSRF1234")))
    {
        setSubjectToSRF1234(ModelBase::boolFromJson(val[U("subjectToSRF1234")]));
    }
    if(val.has_field(U("requiredWithholdingISS")))
    {
        setRequiredWithholdingISS(ModelBase::boolFromJson(val[U("requiredWithholdingISS")]));
    }
    if(val.has_field(U("art")))
    {
        setArt(ModelBase::stringFromJson(val[U("art")]));
        
    }
    if(val.has_field(U("adminProcess")))
    {
        setAdminProcess(ModelBase::stringFromJson(val[U("adminProcess")]));
        
    }
    if(val.has_field(U("buildCode")))
    {
        setBuildCode(ModelBase::stringFromJson(val[U("buildCode")]));
        
    }
    
}

void SalesEntity::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    m_Type->toMultipart(multipart, U("type."));
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("email"), m_Email));
        
    }
    if(m_CnpjcpfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cnpjcpf"), m_Cnpjcpf));
        
    }
    if(m_CityTaxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cityTaxId"), m_CityTaxId));
        
    }
    if(m_StateTaxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("stateTaxId"), m_StateTaxId));
        
    }
    if(m_SuframaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("suframa"), m_Suframa));
        
    }
    if(m_PhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("phone"), m_Phone));
        
    }
    m_TaxRegime->toMultipart(multipart, U("taxRegime."));
    if(m_SpecialTaxRegimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("specialTaxRegime"), m_SpecialTaxRegime));
        
    }
    if(m_SubjectToSRF1234IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("subjectToSRF1234"), m_SubjectToSRF1234));
    }
    if(m_RequiredWithholdingISSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("requiredWithholdingISS"), m_RequiredWithholdingISS));
    }
    if(m_ArtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("art"), m_Art));
        
    }
    if(m_AdminProcessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("adminProcess"), m_AdminProcess));
        
    }
    if(m_BuildCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("buildCode"), m_BuildCode));
        
    }
    
}

void SalesEntity::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
        
    }
    std::shared_ptr<EntityType> newType(new EntityType());
    newType->fromMultiPart(multipart, U("type."));
    setType( newType );
    if(multipart->hasContent(U("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("email"))));
        
    }
    if(multipart->hasContent(U("cnpjcpf")))
    {
        setCnpjcpf(ModelBase::stringFromHttpContent(multipart->getContent(U("cnpjcpf"))));
        
    }
    if(multipart->hasContent(U("cityTaxId")))
    {
        setCityTaxId(ModelBase::stringFromHttpContent(multipart->getContent(U("cityTaxId"))));
        
    }
    if(multipart->hasContent(U("stateTaxId")))
    {
        setStateTaxId(ModelBase::stringFromHttpContent(multipart->getContent(U("stateTaxId"))));
        
    }
    if(multipart->hasContent(U("suframa")))
    {
        setSuframa(ModelBase::stringFromHttpContent(multipart->getContent(U("suframa"))));
        
    }
    if(multipart->hasContent(U("phone")))
    {
        setPhone(ModelBase::stringFromHttpContent(multipart->getContent(U("phone"))));
        
    }
    std::shared_ptr<FederalTaxRegime> newTaxRegime(new FederalTaxRegime());
    newTaxRegime->fromMultiPart(multipart, U("taxRegime."));
    setTaxRegime( newTaxRegime );
    if(multipart->hasContent(U("specialTaxRegime")))
    {
        setSpecialTaxRegime(ModelBase::stringFromHttpContent(multipart->getContent(U("specialTaxRegime"))));
        
    }
    if(multipart->hasContent(U("subjectToSRF1234")))
    {
        setSubjectToSRF1234(ModelBase::boolFromHttpContent(multipart->getContent(U("subjectToSRF1234"))));
    }
    if(multipart->hasContent(U("requiredWithholdingISS")))
    {
        setRequiredWithholdingISS(ModelBase::boolFromHttpContent(multipart->getContent(U("requiredWithholdingISS"))));
    }
    if(multipart->hasContent(U("art")))
    {
        setArt(ModelBase::stringFromHttpContent(multipart->getContent(U("art"))));
        
    }
    if(multipart->hasContent(U("adminProcess")))
    {
        setAdminProcess(ModelBase::stringFromHttpContent(multipart->getContent(U("adminProcess"))));
        
    }
    if(multipart->hasContent(U("buildCode")))
    {
        setBuildCode(ModelBase::stringFromHttpContent(multipart->getContent(U("buildCode"))));
        
    }
    
}


utility::string_t SalesEntity::getName() const
{
    return m_Name;
}
void SalesEntity::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool SalesEntity::nameIsSet() const
{
    return m_NameIsSet;
}
void SalesEntity::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<EntityType> SalesEntity::getType() const
{
    return m_Type;
}
void SalesEntity::setType(std::shared_ptr<EntityType> value)
{
    m_Type = value;
    
}
utility::string_t SalesEntity::getEmail() const
{
    return m_Email;
}
void SalesEntity::setEmail(utility::string_t value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool SalesEntity::emailIsSet() const
{
    return m_EmailIsSet;
}
void SalesEntity::unsetEmail()
{
    m_EmailIsSet = false;
}
utility::string_t SalesEntity::getCnpjcpf() const
{
    return m_Cnpjcpf;
}
void SalesEntity::setCnpjcpf(utility::string_t value)
{
    m_Cnpjcpf = value;
    m_CnpjcpfIsSet = true;
}
bool SalesEntity::cnpjcpfIsSet() const
{
    return m_CnpjcpfIsSet;
}
void SalesEntity::unsetCnpjcpf()
{
    m_CnpjcpfIsSet = false;
}
utility::string_t SalesEntity::getCityTaxId() const
{
    return m_CityTaxId;
}
void SalesEntity::setCityTaxId(utility::string_t value)
{
    m_CityTaxId = value;
    m_CityTaxIdIsSet = true;
}
bool SalesEntity::cityTaxIdIsSet() const
{
    return m_CityTaxIdIsSet;
}
void SalesEntity::unsetCityTaxId()
{
    m_CityTaxIdIsSet = false;
}
utility::string_t SalesEntity::getStateTaxId() const
{
    return m_StateTaxId;
}
void SalesEntity::setStateTaxId(utility::string_t value)
{
    m_StateTaxId = value;
    m_StateTaxIdIsSet = true;
}
bool SalesEntity::stateTaxIdIsSet() const
{
    return m_StateTaxIdIsSet;
}
void SalesEntity::unsetStateTaxId()
{
    m_StateTaxIdIsSet = false;
}
utility::string_t SalesEntity::getSuframa() const
{
    return m_Suframa;
}
void SalesEntity::setSuframa(utility::string_t value)
{
    m_Suframa = value;
    m_SuframaIsSet = true;
}
bool SalesEntity::suframaIsSet() const
{
    return m_SuframaIsSet;
}
void SalesEntity::unsetSuframa()
{
    m_SuframaIsSet = false;
}
utility::string_t SalesEntity::getPhone() const
{
    return m_Phone;
}
void SalesEntity::setPhone(utility::string_t value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}
bool SalesEntity::phoneIsSet() const
{
    return m_PhoneIsSet;
}
void SalesEntity::unsetPhone()
{
    m_PhoneIsSet = false;
}
std::shared_ptr<FederalTaxRegime> SalesEntity::getTaxRegime() const
{
    return m_TaxRegime;
}
void SalesEntity::setTaxRegime(std::shared_ptr<FederalTaxRegime> value)
{
    m_TaxRegime = value;
    
}
utility::string_t SalesEntity::getSpecialTaxRegime() const
{
    return m_SpecialTaxRegime;
}
void SalesEntity::setSpecialTaxRegime(utility::string_t value)
{
    m_SpecialTaxRegime = value;
    m_SpecialTaxRegimeIsSet = true;
}
bool SalesEntity::specialTaxRegimeIsSet() const
{
    return m_SpecialTaxRegimeIsSet;
}
void SalesEntity::unsetSpecialTaxRegime()
{
    m_SpecialTaxRegimeIsSet = false;
}
bool SalesEntity::getSubjectToSRF1234() const
{
    return m_SubjectToSRF1234;
}
void SalesEntity::setSubjectToSRF1234(bool value)
{
    m_SubjectToSRF1234 = value;
    m_SubjectToSRF1234IsSet = true;
}
bool SalesEntity::subjectToSRF1234IsSet() const
{
    return m_SubjectToSRF1234IsSet;
}
void SalesEntity::unsetSubjectToSRF1234()
{
    m_SubjectToSRF1234IsSet = false;
}
bool SalesEntity::getRequiredWithholdingISS() const
{
    return m_RequiredWithholdingISS;
}
void SalesEntity::setRequiredWithholdingISS(bool value)
{
    m_RequiredWithholdingISS = value;
    m_RequiredWithholdingISSIsSet = true;
}
bool SalesEntity::requiredWithholdingISSIsSet() const
{
    return m_RequiredWithholdingISSIsSet;
}
void SalesEntity::unsetRequiredWithholdingISS()
{
    m_RequiredWithholdingISSIsSet = false;
}
utility::string_t SalesEntity::getArt() const
{
    return m_Art;
}
void SalesEntity::setArt(utility::string_t value)
{
    m_Art = value;
    m_ArtIsSet = true;
}
bool SalesEntity::artIsSet() const
{
    return m_ArtIsSet;
}
void SalesEntity::unsetArt()
{
    m_ArtIsSet = false;
}
utility::string_t SalesEntity::getAdminProcess() const
{
    return m_AdminProcess;
}
void SalesEntity::setAdminProcess(utility::string_t value)
{
    m_AdminProcess = value;
    m_AdminProcessIsSet = true;
}
bool SalesEntity::adminProcessIsSet() const
{
    return m_AdminProcessIsSet;
}
void SalesEntity::unsetAdminProcess()
{
    m_AdminProcessIsSet = false;
}
utility::string_t SalesEntity::getBuildCode() const
{
    return m_BuildCode;
}
void SalesEntity::setBuildCode(utility::string_t value)
{
    m_BuildCode = value;
    m_BuildCodeIsSet = true;
}
bool SalesEntity::buildCodeIsSet() const
{
    return m_BuildCodeIsSet;
}
void SalesEntity::unsetBuildCode()
{
    m_BuildCodeIsSet = false;
}

}
}
}
}

