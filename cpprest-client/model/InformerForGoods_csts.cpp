/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "InformerForGoods_csts.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

InformerForGoods_csts::InformerForGoods_csts()
{
    m_Icms = U("");
    m_IcmsIsSet = false;
    m_Ipi = U("");
    m_IpiIsSet = false;
    m_PisCofins = U("");
    m_PisCofinsIsSet = false;
    
}

InformerForGoods_csts::~InformerForGoods_csts()
{
}

void InformerForGoods_csts::validate()
{
    // TODO: implement validation
}

web::json::value InformerForGoods_csts::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IcmsIsSet)
    {
        val[U("icms")] = ModelBase::toJson(m_Icms);
    }
    if(m_IpiIsSet)
    {
        val[U("ipi")] = ModelBase::toJson(m_Ipi);
    }
    if(m_PisCofinsIsSet)
    {
        val[U("pisCofins")] = ModelBase::toJson(m_PisCofins);
    }
    

    return val;
}

void InformerForGoods_csts::fromJson(web::json::value& val)
{
    if(val.has_field(U("icms")))
    {
        setIcms(ModelBase::stringFromJson(val[U("icms")]));
        
    }
    if(val.has_field(U("ipi")))
    {
        setIpi(ModelBase::stringFromJson(val[U("ipi")]));
        
    }
    if(val.has_field(U("pisCofins")))
    {
        setPisCofins(ModelBase::stringFromJson(val[U("pisCofins")]));
        
    }
    
}

void InformerForGoods_csts::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_IcmsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("icms"), m_Icms));
        
    }
    if(m_IpiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ipi"), m_Ipi));
        
    }
    if(m_PisCofinsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("pisCofins"), m_PisCofins));
        
    }
    
}

void InformerForGoods_csts::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("icms")))
    {
        setIcms(ModelBase::stringFromHttpContent(multipart->getContent(U("icms"))));
        
    }
    if(multipart->hasContent(U("ipi")))
    {
        setIpi(ModelBase::stringFromHttpContent(multipart->getContent(U("ipi"))));
        
    }
    if(multipart->hasContent(U("pisCofins")))
    {
        setPisCofins(ModelBase::stringFromHttpContent(multipart->getContent(U("pisCofins"))));
        
    }
    
}


utility::string_t InformerForGoods_csts::getIcms() const
{
    return m_Icms;
}
void InformerForGoods_csts::setIcms(utility::string_t value)
{
    m_Icms = value;
    m_IcmsIsSet = true;
}
bool InformerForGoods_csts::icmsIsSet() const
{
    return m_IcmsIsSet;
}
void InformerForGoods_csts::unsetIcms()
{
    m_IcmsIsSet = false;
}
utility::string_t InformerForGoods_csts::getIpi() const
{
    return m_Ipi;
}
void InformerForGoods_csts::setIpi(utility::string_t value)
{
    m_Ipi = value;
    m_IpiIsSet = true;
}
bool InformerForGoods_csts::ipiIsSet() const
{
    return m_IpiIsSet;
}
void InformerForGoods_csts::unsetIpi()
{
    m_IpiIsSet = false;
}
utility::string_t InformerForGoods_csts::getPisCofins() const
{
    return m_PisCofins;
}
void InformerForGoods_csts::setPisCofins(utility::string_t value)
{
    m_PisCofins = value;
    m_PisCofinsIsSet = true;
}
bool InformerForGoods_csts::pisCofinsIsSet() const
{
    return m_PisCofinsIsSet;
}
void InformerForGoods_csts::unsetPisCofins()
{
    m_PisCofinsIsSet = false;
}

}
}
}
}

