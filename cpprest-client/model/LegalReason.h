/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * LegalReason.h
 *
 * Legal Reason (Fundamentação Legal): - &#39;name&#39; - &#39;description&#39; - &#39;scope&#39; 
 */

#ifndef LegalReason_H_
#define LegalReason_H_


#include "ModelBase.h"

#include "LegalReason_referencedProcesses.h"
#include "LegalReason_taxScope.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Legal Reason (Fundamentação Legal): - &#39;name&#39; - &#39;description&#39; - &#39;scope&#39; 
/// </summary>
class  LegalReason
    : public ModelBase
{
public:
    LegalReason();
    virtual ~LegalReason();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LegalReason members

    /// <summary>
    /// Internal ID
    /// </summary>
    utility::string_t getId() const;
    void setId(utility::string_t value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Message scope. May be one of these. general - This message is not linked to any entity (agast/process/cfop) and will be applied to any item in a transacition. (Esta mensagem tem escopo geral, nao está relacionadas diretamente qualquer objeto.); linkedTo - This message is linked to an entity, and its processing will only occur when the context involves it. (Esta mensagens estão relacionadas diretamente a algum objeto como um AGAST por exemplo, um Processo ou uma CFOP.); 
    /// </summary>
    utility::string_t getScope() const;
    void setScope(utility::string_t value);
        /// <summary>
    /// Set this message as no longer valid
    /// </summary>
    bool getDisable() const;
    void setDisable(bool value);
    bool disableIsSet() const;
    void unsetDisable();
    /// <summary>
    /// Legal reason textual description;
    /// </summary>
    utility::string_t getDescription() const;
    void setDescription(utility::string_t value);
        /// <summary>
    /// Short name to this message
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
        /// <summary>
    /// this field inform the official code number
    /// </summary>
    utility::string_t getLegalCode() const;
    void setLegalCode(utility::string_t value);
    bool legalCodeIsSet() const;
    void unsetLegalCode();
    /// <summary>
    /// Optional. Show this message when used in Invoice (NFe, NFCe, others...). Where to show this.
    /// </summary>
    utility::string_t getShowInInvoice() const;
    void setShowInInvoice(utility::string_t value);
    bool showInInvoiceIsSet() const;
    void unsetShowInInvoice();
    /// <summary>
    /// Referenced Process
    /// </summary>
    std::vector<std::shared_ptr<LegalReason_referencedProcesses>>& getReferencedProcesses();
    bool referencedProcessesIsSet() const;
    void unsetReferencedProcesses();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LegalReason_taxScope> getTaxScope() const;
    void setTaxScope(std::shared_ptr<LegalReason_taxScope> value);
    bool taxScopeIsSet() const;
    void unsetTaxScope();

protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
utility::string_t m_Scope;
    bool m_Disable;
    bool m_DisableIsSet;
utility::string_t m_Description;
    utility::string_t m_Name;
    utility::string_t m_LegalCode;
    bool m_LegalCodeIsSet;
utility::string_t m_ShowInInvoice;
    bool m_ShowInInvoiceIsSet;
std::vector<std::shared_ptr<LegalReason_referencedProcesses>> m_ReferencedProcesses;
    bool m_ReferencedProcessesIsSet;
std::shared_ptr<LegalReason_taxScope> m_TaxScope;
    bool m_TaxScopeIsSet;
};

}
}
}
}

#endif /* LegalReason_H_ */
