/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "InformerForGoods.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

InformerForGoods::InformerForGoods()
{
    m_HeaderIsSet = false;
    m_LineIsSet = false;
    m__companyIsSet = false;
    m__entityIsSet = false;
    m_EmitterIsSet = false;
    m_ReceiverIsSet = false;
    m_TransporterIsSet = false;
    m_CstsIsSet = false;
    m_AmountIsSet = false;
    m_DiscountIsSet = false;
    m_QuantityIsSet = false;
    m_UnitPriceIsSet = false;
    m_FreightAmountIsSet = false;
    m_InsuranceAmountIsSet = false;
    m_OtherCostAmountIsSet = false;
    m_ExemptValueIsSet = false;
    
}

InformerForGoods::~InformerForGoods()
{
}

void InformerForGoods::validate()
{
    // TODO: implement validation
}

web::json::value InformerForGoods::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_HeaderIsSet)
    {
        val[U("header")] = ModelBase::toJson(m_Header);
    }
    if(m_LineIsSet)
    {
        val[U("line")] = ModelBase::toJson(m_Line);
    }
    if(m__companyIsSet)
    {
        val[U("_company")] = ModelBase::toJson(m__company);
    }
    if(m__entityIsSet)
    {
        val[U("_entity")] = ModelBase::toJson(m__entity);
    }
    if(m_EmitterIsSet)
    {
        val[U("emitter")] = ModelBase::toJson(m_Emitter);
    }
    if(m_ReceiverIsSet)
    {
        val[U("receiver")] = ModelBase::toJson(m_Receiver);
    }
    if(m_TransporterIsSet)
    {
        val[U("transporter")] = ModelBase::toJson(m_Transporter);
    }
    if(m_CstsIsSet)
    {
        val[U("csts")] = ModelBase::toJson(m_Csts);
    }
    if(m_AmountIsSet)
    {
        val[U("amount")] = ModelBase::toJson(m_Amount);
    }
    if(m_DiscountIsSet)
    {
        val[U("discount")] = ModelBase::toJson(m_Discount);
    }
    if(m_QuantityIsSet)
    {
        val[U("quantity")] = ModelBase::toJson(m_Quantity);
    }
    if(m_UnitPriceIsSet)
    {
        val[U("unitPrice")] = ModelBase::toJson(m_UnitPrice);
    }
    if(m_FreightAmountIsSet)
    {
        val[U("freightAmount")] = ModelBase::toJson(m_FreightAmount);
    }
    if(m_InsuranceAmountIsSet)
    {
        val[U("insuranceAmount")] = ModelBase::toJson(m_InsuranceAmount);
    }
    if(m_OtherCostAmountIsSet)
    {
        val[U("otherCostAmount")] = ModelBase::toJson(m_OtherCostAmount);
    }
    if(m_ExemptValueIsSet)
    {
        val[U("exemptValue")] = ModelBase::toJson(m_ExemptValue);
    }
    

    return val;
}

void InformerForGoods::fromJson(web::json::value& val)
{
    if(val.has_field(U("header")))
    {
        if(!val[U("header")].is_null())
        {
            std::shared_ptr<HeaderForGoods> newItem(new HeaderForGoods());
            newItem->fromJson(val[U("header")]);
            setHeader( newItem );
        }
        
    }
    if(val.has_field(U("line")))
    {
        if(!val[U("line")].is_null())
        {
            std::shared_ptr<LineForGoods> newItem(new LineForGoods());
            newItem->fromJson(val[U("line")]);
            setLine( newItem );
        }
        
    }
    if(val.has_field(U("_company")))
    {
        if(!val[U("_company")].is_null())
        {
            std::shared_ptr<EntityInformerForGoods> newItem(new EntityInformerForGoods());
            newItem->fromJson(val[U("_company")]);
            setCompany( newItem );
        }
        
    }
    if(val.has_field(U("_entity")))
    {
        if(!val[U("_entity")].is_null())
        {
            std::shared_ptr<EntityInformerForGoods> newItem(new EntityInformerForGoods());
            newItem->fromJson(val[U("_entity")]);
            setEntity( newItem );
        }
        
    }
    if(val.has_field(U("emitter")))
    {
        if(!val[U("emitter")].is_null())
        {
            std::shared_ptr<EntityInformerForGoods> newItem(new EntityInformerForGoods());
            newItem->fromJson(val[U("emitter")]);
            setEmitter( newItem );
        }
        
    }
    if(val.has_field(U("receiver")))
    {
        if(!val[U("receiver")].is_null())
        {
            std::shared_ptr<EntityInformerForGoods> newItem(new EntityInformerForGoods());
            newItem->fromJson(val[U("receiver")]);
            setReceiver( newItem );
        }
        
    }
    if(val.has_field(U("transporter")))
    {
        if(!val[U("transporter")].is_null())
        {
            std::shared_ptr<EntityInformerForGoods> newItem(new EntityInformerForGoods());
            newItem->fromJson(val[U("transporter")]);
            setTransporter( newItem );
        }
        
    }
    if(val.has_field(U("csts")))
    {
        if(!val[U("csts")].is_null())
        {
            std::shared_ptr<InformerForGoods_csts> newItem(new InformerForGoods_csts());
            newItem->fromJson(val[U("csts")]);
            setCsts( newItem );
        }
        
    }
    if(val.has_field(U("amount")))
    {
        if(!val[U("amount")].is_null())
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromJson(val[U("amount")]);
            setAmount( newItem );
        }
        
    }
    if(val.has_field(U("discount")))
    {
        if(!val[U("discount")].is_null())
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromJson(val[U("discount")]);
            setDiscount( newItem );
        }
        
    }
    if(val.has_field(U("quantity")))
    {
        if(!val[U("quantity")].is_null())
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromJson(val[U("quantity")]);
            setQuantity( newItem );
        }
        
    }
    if(val.has_field(U("unitPrice")))
    {
        if(!val[U("unitPrice")].is_null())
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromJson(val[U("unitPrice")]);
            setUnitPrice( newItem );
        }
        
    }
    if(val.has_field(U("freightAmount")))
    {
        if(!val[U("freightAmount")].is_null())
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromJson(val[U("freightAmount")]);
            setFreightAmount( newItem );
        }
        
    }
    if(val.has_field(U("insuranceAmount")))
    {
        if(!val[U("insuranceAmount")].is_null())
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromJson(val[U("insuranceAmount")]);
            setInsuranceAmount( newItem );
        }
        
    }
    if(val.has_field(U("otherCostAmount")))
    {
        if(!val[U("otherCostAmount")].is_null())
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromJson(val[U("otherCostAmount")]);
            setOtherCostAmount( newItem );
        }
        
    }
    if(val.has_field(U("exemptValue")))
    {
        if(!val[U("exemptValue")].is_null())
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromJson(val[U("exemptValue")]);
            setExemptValue( newItem );
        }
        
    }
    
}

void InformerForGoods::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_HeaderIsSet)
    {
        if (m_Header.get())
        {
            m_Header->toMultipart(multipart, U("header."));
        }
        
    }
    if(m_LineIsSet)
    {
        if (m_Line.get())
        {
            m_Line->toMultipart(multipart, U("line."));
        }
        
    }
    if(m__companyIsSet)
    {
        if (m__company.get())
        {
            m__company->toMultipart(multipart, U("_company."));
        }
        
    }
    if(m__entityIsSet)
    {
        if (m__entity.get())
        {
            m__entity->toMultipart(multipart, U("_entity."));
        }
        
    }
    if(m_EmitterIsSet)
    {
        if (m_Emitter.get())
        {
            m_Emitter->toMultipart(multipart, U("emitter."));
        }
        
    }
    if(m_ReceiverIsSet)
    {
        if (m_Receiver.get())
        {
            m_Receiver->toMultipart(multipart, U("receiver."));
        }
        
    }
    if(m_TransporterIsSet)
    {
        if (m_Transporter.get())
        {
            m_Transporter->toMultipart(multipart, U("transporter."));
        }
        
    }
    if(m_CstsIsSet)
    {
        if (m_Csts.get())
        {
            m_Csts->toMultipart(multipart, U("csts."));
        }
        
    }
    if(m_AmountIsSet)
    {
        if (m_Amount.get())
        {
            m_Amount->toMultipart(multipart, U("amount."));
        }
        
    }
    if(m_DiscountIsSet)
    {
        if (m_Discount.get())
        {
            m_Discount->toMultipart(multipart, U("discount."));
        }
        
    }
    if(m_QuantityIsSet)
    {
        if (m_Quantity.get())
        {
            m_Quantity->toMultipart(multipart, U("quantity."));
        }
        
    }
    if(m_UnitPriceIsSet)
    {
        if (m_UnitPrice.get())
        {
            m_UnitPrice->toMultipart(multipart, U("unitPrice."));
        }
        
    }
    if(m_FreightAmountIsSet)
    {
        if (m_FreightAmount.get())
        {
            m_FreightAmount->toMultipart(multipart, U("freightAmount."));
        }
        
    }
    if(m_InsuranceAmountIsSet)
    {
        if (m_InsuranceAmount.get())
        {
            m_InsuranceAmount->toMultipart(multipart, U("insuranceAmount."));
        }
        
    }
    if(m_OtherCostAmountIsSet)
    {
        if (m_OtherCostAmount.get())
        {
            m_OtherCostAmount->toMultipart(multipart, U("otherCostAmount."));
        }
        
    }
    if(m_ExemptValueIsSet)
    {
        if (m_ExemptValue.get())
        {
            m_ExemptValue->toMultipart(multipart, U("exemptValue."));
        }
        
    }
    
}

void InformerForGoods::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("header")))
    {
        if(multipart->hasContent(U("header")))
        {
            std::shared_ptr<HeaderForGoods> newItem(new HeaderForGoods());
            newItem->fromMultiPart(multipart, U("header."));
            setHeader( newItem );
        }
        
    }
    if(multipart->hasContent(U("line")))
    {
        if(multipart->hasContent(U("line")))
        {
            std::shared_ptr<LineForGoods> newItem(new LineForGoods());
            newItem->fromMultiPart(multipart, U("line."));
            setLine( newItem );
        }
        
    }
    if(multipart->hasContent(U("_company")))
    {
        if(multipart->hasContent(U("_company")))
        {
            std::shared_ptr<EntityInformerForGoods> newItem(new EntityInformerForGoods());
            newItem->fromMultiPart(multipart, U("_company."));
            setCompany( newItem );
        }
        
    }
    if(multipart->hasContent(U("_entity")))
    {
        if(multipart->hasContent(U("_entity")))
        {
            std::shared_ptr<EntityInformerForGoods> newItem(new EntityInformerForGoods());
            newItem->fromMultiPart(multipart, U("_entity."));
            setEntity( newItem );
        }
        
    }
    if(multipart->hasContent(U("emitter")))
    {
        if(multipart->hasContent(U("emitter")))
        {
            std::shared_ptr<EntityInformerForGoods> newItem(new EntityInformerForGoods());
            newItem->fromMultiPart(multipart, U("emitter."));
            setEmitter( newItem );
        }
        
    }
    if(multipart->hasContent(U("receiver")))
    {
        if(multipart->hasContent(U("receiver")))
        {
            std::shared_ptr<EntityInformerForGoods> newItem(new EntityInformerForGoods());
            newItem->fromMultiPart(multipart, U("receiver."));
            setReceiver( newItem );
        }
        
    }
    if(multipart->hasContent(U("transporter")))
    {
        if(multipart->hasContent(U("transporter")))
        {
            std::shared_ptr<EntityInformerForGoods> newItem(new EntityInformerForGoods());
            newItem->fromMultiPart(multipart, U("transporter."));
            setTransporter( newItem );
        }
        
    }
    if(multipart->hasContent(U("csts")))
    {
        if(multipart->hasContent(U("csts")))
        {
            std::shared_ptr<InformerForGoods_csts> newItem(new InformerForGoods_csts());
            newItem->fromMultiPart(multipart, U("csts."));
            setCsts( newItem );
        }
        
    }
    if(multipart->hasContent(U("amount")))
    {
        if(multipart->hasContent(U("amount")))
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromMultiPart(multipart, U("amount."));
            setAmount( newItem );
        }
        
    }
    if(multipart->hasContent(U("discount")))
    {
        if(multipart->hasContent(U("discount")))
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromMultiPart(multipart, U("discount."));
            setDiscount( newItem );
        }
        
    }
    if(multipart->hasContent(U("quantity")))
    {
        if(multipart->hasContent(U("quantity")))
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromMultiPart(multipart, U("quantity."));
            setQuantity( newItem );
        }
        
    }
    if(multipart->hasContent(U("unitPrice")))
    {
        if(multipart->hasContent(U("unitPrice")))
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromMultiPart(multipart, U("unitPrice."));
            setUnitPrice( newItem );
        }
        
    }
    if(multipart->hasContent(U("freightAmount")))
    {
        if(multipart->hasContent(U("freightAmount")))
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromMultiPart(multipart, U("freightAmount."));
            setFreightAmount( newItem );
        }
        
    }
    if(multipart->hasContent(U("insuranceAmount")))
    {
        if(multipart->hasContent(U("insuranceAmount")))
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromMultiPart(multipart, U("insuranceAmount."));
            setInsuranceAmount( newItem );
        }
        
    }
    if(multipart->hasContent(U("otherCostAmount")))
    {
        if(multipart->hasContent(U("otherCostAmount")))
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromMultiPart(multipart, U("otherCostAmount."));
            setOtherCostAmount( newItem );
        }
        
    }
    if(multipart->hasContent(U("exemptValue")))
    {
        if(multipart->hasContent(U("exemptValue")))
        {
            std::shared_ptr<Number> newItem(0.0);
            newItem->fromMultiPart(multipart, U("exemptValue."));
            setExemptValue( newItem );
        }
        
    }
    
}


std::shared_ptr<HeaderForGoods> InformerForGoods::getHeader() const
{
    return m_Header;
}
void InformerForGoods::setHeader(std::shared_ptr<HeaderForGoods> value)
{
    m_Header = value;
    m_HeaderIsSet = true;
}
bool InformerForGoods::headerIsSet() const
{
    return m_HeaderIsSet;
}
void InformerForGoods::unsetHeader()
{
    m_HeaderIsSet = false;
}
std::shared_ptr<LineForGoods> InformerForGoods::getLine() const
{
    return m_Line;
}
void InformerForGoods::setLine(std::shared_ptr<LineForGoods> value)
{
    m_Line = value;
    m_LineIsSet = true;
}
bool InformerForGoods::lineIsSet() const
{
    return m_LineIsSet;
}
void InformerForGoods::unsetLine()
{
    m_LineIsSet = false;
}
std::shared_ptr<EntityInformerForGoods> InformerForGoods::getCompany() const
{
    return m__company;
}
void InformerForGoods::setCompany(std::shared_ptr<EntityInformerForGoods> value)
{
    m__company = value;
    m__companyIsSet = true;
}
bool InformerForGoods::_companyIsSet() const
{
    return m__companyIsSet;
}
void InformerForGoods::unset_company()
{
    m__companyIsSet = false;
}
std::shared_ptr<EntityInformerForGoods> InformerForGoods::getEntity() const
{
    return m__entity;
}
void InformerForGoods::setEntity(std::shared_ptr<EntityInformerForGoods> value)
{
    m__entity = value;
    m__entityIsSet = true;
}
bool InformerForGoods::_entityIsSet() const
{
    return m__entityIsSet;
}
void InformerForGoods::unset_entity()
{
    m__entityIsSet = false;
}
std::shared_ptr<EntityInformerForGoods> InformerForGoods::getEmitter() const
{
    return m_Emitter;
}
void InformerForGoods::setEmitter(std::shared_ptr<EntityInformerForGoods> value)
{
    m_Emitter = value;
    m_EmitterIsSet = true;
}
bool InformerForGoods::emitterIsSet() const
{
    return m_EmitterIsSet;
}
void InformerForGoods::unsetEmitter()
{
    m_EmitterIsSet = false;
}
std::shared_ptr<EntityInformerForGoods> InformerForGoods::getReceiver() const
{
    return m_Receiver;
}
void InformerForGoods::setReceiver(std::shared_ptr<EntityInformerForGoods> value)
{
    m_Receiver = value;
    m_ReceiverIsSet = true;
}
bool InformerForGoods::receiverIsSet() const
{
    return m_ReceiverIsSet;
}
void InformerForGoods::unsetReceiver()
{
    m_ReceiverIsSet = false;
}
std::shared_ptr<EntityInformerForGoods> InformerForGoods::getTransporter() const
{
    return m_Transporter;
}
void InformerForGoods::setTransporter(std::shared_ptr<EntityInformerForGoods> value)
{
    m_Transporter = value;
    m_TransporterIsSet = true;
}
bool InformerForGoods::transporterIsSet() const
{
    return m_TransporterIsSet;
}
void InformerForGoods::unsetTransporter()
{
    m_TransporterIsSet = false;
}
std::shared_ptr<InformerForGoods_csts> InformerForGoods::getCsts() const
{
    return m_Csts;
}
void InformerForGoods::setCsts(std::shared_ptr<InformerForGoods_csts> value)
{
    m_Csts = value;
    m_CstsIsSet = true;
}
bool InformerForGoods::cstsIsSet() const
{
    return m_CstsIsSet;
}
void InformerForGoods::unsetCsts()
{
    m_CstsIsSet = false;
}
std::shared_ptr<Number> InformerForGoods::getAmount() const
{
    return m_Amount;
}
void InformerForGoods::setAmount(std::shared_ptr<Number> value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}
bool InformerForGoods::amountIsSet() const
{
    return m_AmountIsSet;
}
void InformerForGoods::unsetAmount()
{
    m_AmountIsSet = false;
}
std::shared_ptr<Number> InformerForGoods::getDiscount() const
{
    return m_Discount;
}
void InformerForGoods::setDiscount(std::shared_ptr<Number> value)
{
    m_Discount = value;
    m_DiscountIsSet = true;
}
bool InformerForGoods::discountIsSet() const
{
    return m_DiscountIsSet;
}
void InformerForGoods::unsetDiscount()
{
    m_DiscountIsSet = false;
}
std::shared_ptr<Number> InformerForGoods::getQuantity() const
{
    return m_Quantity;
}
void InformerForGoods::setQuantity(std::shared_ptr<Number> value)
{
    m_Quantity = value;
    m_QuantityIsSet = true;
}
bool InformerForGoods::quantityIsSet() const
{
    return m_QuantityIsSet;
}
void InformerForGoods::unsetQuantity()
{
    m_QuantityIsSet = false;
}
std::shared_ptr<Number> InformerForGoods::getUnitPrice() const
{
    return m_UnitPrice;
}
void InformerForGoods::setUnitPrice(std::shared_ptr<Number> value)
{
    m_UnitPrice = value;
    m_UnitPriceIsSet = true;
}
bool InformerForGoods::unitPriceIsSet() const
{
    return m_UnitPriceIsSet;
}
void InformerForGoods::unsetUnitPrice()
{
    m_UnitPriceIsSet = false;
}
std::shared_ptr<Number> InformerForGoods::getFreightAmount() const
{
    return m_FreightAmount;
}
void InformerForGoods::setFreightAmount(std::shared_ptr<Number> value)
{
    m_FreightAmount = value;
    m_FreightAmountIsSet = true;
}
bool InformerForGoods::freightAmountIsSet() const
{
    return m_FreightAmountIsSet;
}
void InformerForGoods::unsetFreightAmount()
{
    m_FreightAmountIsSet = false;
}
std::shared_ptr<Number> InformerForGoods::getInsuranceAmount() const
{
    return m_InsuranceAmount;
}
void InformerForGoods::setInsuranceAmount(std::shared_ptr<Number> value)
{
    m_InsuranceAmount = value;
    m_InsuranceAmountIsSet = true;
}
bool InformerForGoods::insuranceAmountIsSet() const
{
    return m_InsuranceAmountIsSet;
}
void InformerForGoods::unsetInsuranceAmount()
{
    m_InsuranceAmountIsSet = false;
}
std::shared_ptr<Number> InformerForGoods::getOtherCostAmount() const
{
    return m_OtherCostAmount;
}
void InformerForGoods::setOtherCostAmount(std::shared_ptr<Number> value)
{
    m_OtherCostAmount = value;
    m_OtherCostAmountIsSet = true;
}
bool InformerForGoods::otherCostAmountIsSet() const
{
    return m_OtherCostAmountIsSet;
}
void InformerForGoods::unsetOtherCostAmount()
{
    m_OtherCostAmountIsSet = false;
}
std::shared_ptr<Number> InformerForGoods::getExemptValue() const
{
    return m_ExemptValue;
}
void InformerForGoods::setExemptValue(std::shared_ptr<Number> value)
{
    m_ExemptValue = value;
    m_ExemptValueIsSet = true;
}
bool InformerForGoods::exemptValueIsSet() const
{
    return m_ExemptValueIsSet;
}
void InformerForGoods::unsetExemptValue()
{
    m_ExemptValueIsSet = false;
}

}
}
}
}

