/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SalesTaxesConfig.h
 *
 * 
 */

#ifndef SalesTaxesConfig_H_
#define SalesTaxesConfig_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  SalesTaxesConfig
    : public ModelBase
{
public:
    SalesTaxesConfig();
    virtual ~SalesTaxesConfig();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SalesTaxesConfig members

    /// <summary>
    /// There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. - &#39;T&#39; # TAXABLE - &#39;N&#39; # NOT TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;S&#39; # SPECIFIC RATE 
    /// </summary>
    utility::string_t getAccruableCOFINSTaxation() const;
    void setAccruableCOFINSTaxation(utility::string_t value);
    bool accruableCOFINSTaxationIsSet() const;
    void unsetAccruableCOFINSTaxation();
    /// <summary>
    /// There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - T TAXABLE - E EXEMPT 
    /// </summary>
    utility::string_t getAccruableCSLLTaxation() const;
    void setAccruableCSLLTaxation(utility::string_t value);
    bool accruableCSLLTaxationIsSet() const;
    void unsetAccruableCSLLTaxation();
    /// <summary>
    /// There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.  - &#39;T&#39; # TAXABLE - &#39;N&#39; # NOT TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;S&#39; # SPECIFIC RATE 
    /// </summary>
    utility::string_t getAccruablePISTaxation() const;
    void setAccruablePISTaxation(utility::string_t value);
    bool accruablePISTaxationIsSet() const;
    void unsetAccruablePISTaxation();
    /// <summary>
    /// This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption
    /// </summary>
    utility::string_t getAccruableCOFINSExempCodeTaxation() const;
    void setAccruableCOFINSExempCodeTaxation(utility::string_t value);
    bool accruableCOFINSExempCodeTaxationIsSet() const;
    void unsetAccruableCOFINSExempCodeTaxation();
    /// <summary>
    /// This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption
    /// </summary>
    utility::string_t getAccruablePISExempCodeTaxation() const;
    void setAccruablePISExempCodeTaxation(utility::string_t value);
    bool accruablePISExempCodeTaxationIsSet() const;
    void unsetAccruablePISExempCodeTaxation();
    /// <summary>
    /// Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
    /// </summary>
    bool getWithholdingCOFINS() const;
    void setWithholdingCOFINS(bool value);
    bool withholdingCOFINSIsSet() const;
    void unsetWithholdingCOFINS();
    /// <summary>
    /// Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
    /// </summary>
    bool getWithholdingCSLL() const;
    void setWithholdingCSLL(bool value);
    bool withholdingCSLLIsSet() const;
    void unsetWithholdingCSLL();
    /// <summary>
    /// Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
    /// </summary>
    bool getWithholdingIRRF() const;
    void setWithholdingIRRF(bool value);
    bool withholdingIRRFIsSet() const;
    void unsetWithholdingIRRF();
    /// <summary>
    /// Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.
    /// </summary>
    bool getWithholdingPIS() const;
    void setWithholdingPIS(bool value);
    bool withholdingPISIsSet() const;
    void unsetWithholdingPIS();
    /// <summary>
    /// When property withholdingIRRF is false is mandatory inform the reason
    /// </summary>
    utility::string_t getWithholdIRRFExemptReasonTaxation() const;
    void setWithholdIRRFExemptReasonTaxation(utility::string_t value);
    bool withholdIRRFExemptReasonTaxationIsSet() const;
    void unsetWithholdIRRFExemptReasonTaxation();

protected:
    utility::string_t m_AccruableCOFINSTaxation;
    bool m_AccruableCOFINSTaxationIsSet;
utility::string_t m_AccruableCSLLTaxation;
    bool m_AccruableCSLLTaxationIsSet;
utility::string_t m_AccruablePISTaxation;
    bool m_AccruablePISTaxationIsSet;
utility::string_t m_AccruableCOFINSExempCodeTaxation;
    bool m_AccruableCOFINSExempCodeTaxationIsSet;
utility::string_t m_AccruablePISExempCodeTaxation;
    bool m_AccruablePISExempCodeTaxationIsSet;
bool m_WithholdingCOFINS;
    bool m_WithholdingCOFINSIsSet;
bool m_WithholdingCSLL;
    bool m_WithholdingCSLLIsSet;
bool m_WithholdingIRRF;
    bool m_WithholdingIRRFIsSet;
bool m_WithholdingPIS;
    bool m_WithholdingPISIsSet;
utility::string_t m_WithholdIRRFExemptReasonTaxation;
    bool m_WithholdIRRFExemptReasonTaxationIsSet;
};

}
}
}
}

#endif /* SalesTaxesConfig_H_ */
