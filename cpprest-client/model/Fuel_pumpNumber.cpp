/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Fuel_pumpNumber.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Fuel_pumpNumber::Fuel_pumpNumber()
{
    m_NozzleNumberFuelSupply = U("");
    m_FuelPumpNumber = U("");
    m_FuelTankNumber = U("");
    m_StartValueOfPumpNumber = 0.0;
    m_EndValueOfPumpNumber = 0.0;
    
}

Fuel_pumpNumber::~Fuel_pumpNumber()
{
}

void Fuel_pumpNumber::validate()
{
    // TODO: implement validation
}

web::json::value Fuel_pumpNumber::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("nozzleNumberFuelSupply")] = ModelBase::toJson(m_NozzleNumberFuelSupply);
    val[U("fuelPumpNumber")] = ModelBase::toJson(m_FuelPumpNumber);
    val[U("fuelTankNumber")] = ModelBase::toJson(m_FuelTankNumber);
    val[U("startValueOfPumpNumber")] = ModelBase::toJson(m_StartValueOfPumpNumber);
    val[U("endValueOfPumpNumber")] = ModelBase::toJson(m_EndValueOfPumpNumber);
    

    return val;
}

void Fuel_pumpNumber::fromJson(web::json::value& val)
{
    setNozzleNumberFuelSupply(ModelBase::stringFromJson(val[U("nozzleNumberFuelSupply")]));
    setFuelPumpNumber(ModelBase::stringFromJson(val[U("fuelPumpNumber")]));
    setFuelTankNumber(ModelBase::stringFromJson(val[U("fuelTankNumber")]));
    setStartValueOfPumpNumber(ModelBase::doubleFromJson(val[U("startValueOfPumpNumber")]));
    setEndValueOfPumpNumber(ModelBase::doubleFromJson(val[U("endValueOfPumpNumber")]));
    
}

void Fuel_pumpNumber::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("nozzleNumberFuelSupply"), m_NozzleNumberFuelSupply));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("fuelPumpNumber"), m_FuelPumpNumber));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("fuelTankNumber"), m_FuelTankNumber));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("startValueOfPumpNumber"), m_StartValueOfPumpNumber));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("endValueOfPumpNumber"), m_EndValueOfPumpNumber));
    
}

void Fuel_pumpNumber::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setNozzleNumberFuelSupply(ModelBase::stringFromHttpContent(multipart->getContent(U("nozzleNumberFuelSupply"))));
    setFuelPumpNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("fuelPumpNumber"))));
    setFuelTankNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("fuelTankNumber"))));
    setStartValueOfPumpNumber(ModelBase::doubleFromHttpContent(multipart->getContent(U("startValueOfPumpNumber"))));
    setEndValueOfPumpNumber(ModelBase::doubleFromHttpContent(multipart->getContent(U("endValueOfPumpNumber"))));
    
}


utility::string_t Fuel_pumpNumber::getNozzleNumberFuelSupply() const
{
    return m_NozzleNumberFuelSupply;
}
void Fuel_pumpNumber::setNozzleNumberFuelSupply(utility::string_t value)
{
    m_NozzleNumberFuelSupply = value;
    
}
utility::string_t Fuel_pumpNumber::getFuelPumpNumber() const
{
    return m_FuelPumpNumber;
}
void Fuel_pumpNumber::setFuelPumpNumber(utility::string_t value)
{
    m_FuelPumpNumber = value;
    
}
utility::string_t Fuel_pumpNumber::getFuelTankNumber() const
{
    return m_FuelTankNumber;
}
void Fuel_pumpNumber::setFuelTankNumber(utility::string_t value)
{
    m_FuelTankNumber = value;
    
}
double Fuel_pumpNumber::getStartValueOfPumpNumber() const
{
    return m_StartValueOfPumpNumber;
}
void Fuel_pumpNumber::setStartValueOfPumpNumber(double value)
{
    m_StartValueOfPumpNumber = value;
    
}
double Fuel_pumpNumber::getEndValueOfPumpNumber() const
{
    return m_EndValueOfPumpNumber;
}
void Fuel_pumpNumber::setEndValueOfPumpNumber(double value)
{
    m_EndValueOfPumpNumber = value;
    
}

}
}
}
}

