/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IssConfServiceList_taxRate_ibpt.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

IssConfServiceList_taxRate_ibpt::IssConfServiceList_taxRate_ibpt()
{
    m_NationalFedTax = 0.0;
    m_NationalFedTaxIsSet = false;
    m_CityTax = 0.0;
    m_CityTaxIsSet = false;
    
}

IssConfServiceList_taxRate_ibpt::~IssConfServiceList_taxRate_ibpt()
{
}

void IssConfServiceList_taxRate_ibpt::validate()
{
    // TODO: implement validation
}

web::json::value IssConfServiceList_taxRate_ibpt::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NationalFedTaxIsSet)
    {
        val[U("nationalFedTax")] = ModelBase::toJson(m_NationalFedTax);
    }
    if(m_CityTaxIsSet)
    {
        val[U("cityTax")] = ModelBase::toJson(m_CityTax);
    }
    

    return val;
}

void IssConfServiceList_taxRate_ibpt::fromJson(web::json::value& val)
{
    if(val.has_field(U("nationalFedTax")))
    {
        setNationalFedTax(ModelBase::doubleFromJson(val[U("nationalFedTax")]));
    }
    if(val.has_field(U("cityTax")))
    {
        setCityTax(ModelBase::doubleFromJson(val[U("cityTax")]));
    }
    
}

void IssConfServiceList_taxRate_ibpt::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_NationalFedTaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("nationalFedTax"), m_NationalFedTax));
    }
    if(m_CityTaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cityTax"), m_CityTax));
    }
    
}

void IssConfServiceList_taxRate_ibpt::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("nationalFedTax")))
    {
        setNationalFedTax(ModelBase::doubleFromHttpContent(multipart->getContent(U("nationalFedTax"))));
    }
    if(multipart->hasContent(U("cityTax")))
    {
        setCityTax(ModelBase::doubleFromHttpContent(multipart->getContent(U("cityTax"))));
    }
    
}


double IssConfServiceList_taxRate_ibpt::getNationalFedTax() const
{
    return m_NationalFedTax;
}
void IssConfServiceList_taxRate_ibpt::setNationalFedTax(double value)
{
    m_NationalFedTax = value;
    m_NationalFedTaxIsSet = true;
}
bool IssConfServiceList_taxRate_ibpt::nationalFedTaxIsSet() const
{
    return m_NationalFedTaxIsSet;
}
void IssConfServiceList_taxRate_ibpt::unsetNationalFedTax()
{
    m_NationalFedTaxIsSet = false;
}
double IssConfServiceList_taxRate_ibpt::getCityTax() const
{
    return m_CityTax;
}
void IssConfServiceList_taxRate_ibpt::setCityTax(double value)
{
    m_CityTax = value;
    m_CityTaxIsSet = true;
}
bool IssConfServiceList_taxRate_ibpt::cityTaxIsSet() const
{
    return m_CityTaxIsSet;
}
void IssConfServiceList_taxRate_ibpt::unsetCityTax()
{
    m_CityTaxIsSet = false;
}

}
}
}
}

