/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * VehicleTransp.h
 *
 * Identify type of vehicle used to transport the attributes, except atribute type,  follow rule allOf then only one of this atributes will be informed. 
 */

#ifndef VehicleTransp_H_
#define VehicleTransp_H_


#include "ModelBase.h"

#include "VehicleID.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Identify type of vehicle used to transport the attributes, except atribute type,  follow rule allOf then only one of this atributes will be informed. 
/// </summary>
class  VehicleTransp
    : public ModelBase
{
public:
    VehicleTransp();
    virtual ~VehicleTransp();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// VehicleTransp members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    void setType(utility::string_t value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<VehicleID> getAutomobile() const;
    void setAutomobile(std::shared_ptr<VehicleID> value);
    bool automobileIsSet() const;
    void unsetAutomobile();
    /// <summary>
    /// Trailer
    /// </summary>
    std::vector<std::shared_ptr<VehicleID>>& getTrailer();
    bool trailerIsSet() const;
    void unsetTrailer();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWagon() const;
    void setWagon(utility::string_t value);
    bool wagonIsSet() const;
    void unsetWagon();
    /// <summary>
    /// Ferry
    /// </summary>
    utility::string_t getFerry() const;
    void setFerry(utility::string_t value);
    bool ferryIsSet() const;
    void unsetFerry();

protected:
    utility::string_t m_Type;
    bool m_TypeIsSet;
std::shared_ptr<VehicleID> m_Automobile;
    bool m_AutomobileIsSet;
std::vector<std::shared_ptr<VehicleID>> m_Trailer;
    bool m_TrailerIsSet;
utility::string_t m_Wagon;
    bool m_WagonIsSet;
utility::string_t m_Ferry;
    bool m_FerryIsSet;
};

}
}
}
}

#endif /* VehicleTransp_H_ */
