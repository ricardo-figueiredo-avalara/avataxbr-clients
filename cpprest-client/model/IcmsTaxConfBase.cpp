/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IcmsTaxConfBase.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

IcmsTaxConfBase::IcmsTaxConfBase()
{
    m_IcmsCST = U("");
    m_IcmsCSTIsSet = false;
    m_MessageCode = U("");
    m_MessageCodeIsSet = false;
    
}

IcmsTaxConfBase::~IcmsTaxConfBase()
{
}

void IcmsTaxConfBase::validate()
{
    // TODO: implement validation
}

web::json::value IcmsTaxConfBase::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("state")] = ModelBase::toJson(m_State);
    if(m_IcmsCSTIsSet)
    {
        val[U("icmsCST")] = ModelBase::toJson(m_IcmsCST);
    }
    if(m_MessageCodeIsSet)
    {
        val[U("messageCode")] = ModelBase::toJson(m_MessageCode);
    }
    

    return val;
}

void IcmsTaxConfBase::fromJson(web::json::value& val)
{
    std::shared_ptr<StateEnum> newState(new StateEnum());
    newState->fromJson(val[U("state")]);
    setState( newItem );
    if(val.has_field(U("icmsCST")))
    {
        setIcmsCST(ModelBase::stringFromJson(val[U("icmsCST")]));
        
    }
    if(val.has_field(U("messageCode")))
    {
        setMessageCode(ModelBase::stringFromJson(val[U("messageCode")]));
        
    }
    
}

void IcmsTaxConfBase::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    m_State->toMultipart(multipart, U("state."));
    if(m_IcmsCSTIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("icmsCST"), m_IcmsCST));
        
    }
    if(m_MessageCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("messageCode"), m_MessageCode));
        
    }
    
}

void IcmsTaxConfBase::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    std::shared_ptr<StateEnum> newState(new StateEnum());
    newState->fromMultiPart(multipart, U("state."));
    setState( newState );
    if(multipart->hasContent(U("icmsCST")))
    {
        setIcmsCST(ModelBase::stringFromHttpContent(multipart->getContent(U("icmsCST"))));
        
    }
    if(multipart->hasContent(U("messageCode")))
    {
        setMessageCode(ModelBase::stringFromHttpContent(multipart->getContent(U("messageCode"))));
        
    }
    
}


std::shared_ptr<StateEnum> IcmsTaxConfBase::getState() const
{
    return m_State;
}
void IcmsTaxConfBase::setState(std::shared_ptr<StateEnum> value)
{
    m_State = value;
    
}
utility::string_t IcmsTaxConfBase::getIcmsCST() const
{
    return m_IcmsCST;
}
void IcmsTaxConfBase::setIcmsCST(utility::string_t value)
{
    m_IcmsCST = value;
    m_IcmsCSTIsSet = true;
}
bool IcmsTaxConfBase::icmsCSTIsSet() const
{
    return m_IcmsCSTIsSet;
}
void IcmsTaxConfBase::unsetIcmsCST()
{
    m_IcmsCSTIsSet = false;
}
utility::string_t IcmsTaxConfBase::getMessageCode() const
{
    return m_MessageCode;
}
void IcmsTaxConfBase::setMessageCode(utility::string_t value)
{
    m_MessageCode = value;
    m_MessageCodeIsSet = true;
}
bool IcmsTaxConfBase::messageCodeIsSet() const
{
    return m_MessageCodeIsSet;
}
void IcmsTaxConfBase::unsetMessageCode()
{
    m_MessageCodeIsSet = false;
}

}
}
}
}

