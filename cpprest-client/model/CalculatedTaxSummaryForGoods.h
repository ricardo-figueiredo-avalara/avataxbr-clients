/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * CalculatedTaxSummaryForGoods.h
 *
 * 
 */

#ifndef CalculatedTaxSummaryForGoods_H_
#define CalculatedTaxSummaryForGoods_H_


#include "ModelBase.h"

#include "CalculatedTaxSummaryForGoods_taxByType.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  CalculatedTaxSummaryForGoods
    : public ModelBase
{
public:
    CalculatedTaxSummaryForGoods();
    virtual ~CalculatedTaxSummaryForGoods();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CalculatedTaxSummaryForGoods members

    /// <summary>
    /// Count of lines
    /// </summary>
    int32_t getNumberOfLines() const;
    void setNumberOfLines(int32_t value);
    bool numberOfLinesIsSet() const;
    void unsetNumberOfLines();
    /// <summary>
    /// sum of all line taxed discounts
    /// </summary>
    double getTaxedDiscount() const;
    void setTaxedDiscount(double value);
    bool taxedDiscountIsSet() const;
    void unsetTaxedDiscount();
    /// <summary>
    /// sum of all line untaxed discounts
    /// </summary>
    double getUntaxedDiscount() const;
    void setUntaxedDiscount(double value);
    bool untaxedDiscountIsSet() const;
    void unsetUntaxedDiscount();
    /// <summary>
    /// sum of all line lineAmount attribute
    /// </summary>
    double getSubtotal() const;
    void setSubtotal(double value);
    bool subtotalIsSet() const;
    void unsetSubtotal();
    /// <summary>
    /// sum of all line tax attribute
    /// </summary>
    double getTotalTax() const;
    void setTotalTax(double value);
    bool totalTaxIsSet() const;
    void unsetTotalTax();
    /// <summary>
    /// sum of all line lineAmount attribute + sum of all line tax attribute not VAT - sum of all line lineTaxedDiscount attribute
    /// </summary>
    double getGrandTotal() const;
    void setGrandTotal(double value);
    bool grandTotalIsSet() const;
    void unsetGrandTotal();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CalculatedTaxSummaryForGoods_taxByType> getTaxByType() const;
    void setTaxByType(std::shared_ptr<CalculatedTaxSummaryForGoods_taxByType> value);
    bool taxByTypeIsSet() const;
    void unsetTaxByType();

protected:
    int32_t m_NumberOfLines;
    bool m_NumberOfLinesIsSet;
double m_TaxedDiscount;
    bool m_TaxedDiscountIsSet;
double m_UntaxedDiscount;
    bool m_UntaxedDiscountIsSet;
double m_Subtotal;
    bool m_SubtotalIsSet;
double m_TotalTax;
    bool m_TotalTaxIsSet;
double m_GrandTotal;
    bool m_GrandTotalIsSet;
std::shared_ptr<CalculatedTaxSummaryForGoods_taxByType> m_TaxByType;
    bool m_TaxByTypeIsSet;
};

}
}
}
}

#endif /* CalculatedTaxSummaryForGoods_H_ */
