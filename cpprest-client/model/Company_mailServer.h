/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Company_mailServer.h
 *
 * 
 */

#ifndef Company_mailServer_H_
#define Company_mailServer_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Company_mailServer
    : public ModelBase
{
public:
    Company_mailServer();
    virtual ~Company_mailServer();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Company_mailServer members

    /// <summary>
    /// User for login on email server
    /// </summary>
    utility::string_t getUser() const;
    void setUser(utility::string_t value);
    bool userIsSet() const;
    void unsetUser();
    /// <summary>
    /// Password to login on email server
    /// </summary>
    utility::string_t getPassword() const;
    void setPassword(utility::string_t value);
    bool passwordIsSet() const;
    void unsetPassword();
    /// <summary>
    /// smtp address to email server
    /// </summary>
    utility::string_t getSmtpAddress() const;
    void setSmtpAddress(utility::string_t value);
    bool smtpAddressIsSet() const;
    void unsetSmtpAddress();
    /// <summary>
    /// port
    /// </summary>
    int32_t getPort() const;
    void setPort(int32_t value);
    bool portIsSet() const;
    void unsetPort();
    /// <summary>
    /// email address to identify the sender e-mail, to send a XML and DANFE
    /// </summary>
    utility::string_t getEmailFrom() const;
    void setEmailFrom(utility::string_t value);
    bool emailFromIsSet() const;
    void unsetEmailFrom();
    /// <summary>
    /// protocol SSL or TLS
    /// </summary>
    utility::string_t getProtocol() const;
    void setProtocol(utility::string_t value);
    bool protocolIsSet() const;
    void unsetProtocol();
    /// <summary>
    /// Message to add to email body
    /// </summary>
    utility::string_t getTemplatemessageToEmail() const;
    void setTemplatemessageToEmail(utility::string_t value);
    bool templatemessageToEmailIsSet() const;
    void unsetTemplatemessageToEmail();

protected:
    utility::string_t m_User;
    bool m_UserIsSet;
utility::string_t m_Password;
    bool m_PasswordIsSet;
utility::string_t m_SmtpAddress;
    bool m_SmtpAddressIsSet;
int32_t m_Port;
    bool m_PortIsSet;
utility::string_t m_EmailFrom;
    bool m_EmailFromIsSet;
utility::string_t m_Protocol;
    bool m_ProtocolIsSet;
utility::string_t m_TemplatemessageToEmail;
    bool m_TemplatemessageToEmailIsSet;
};

}
}
}
}

#endif /* Company_mailServer_H_ */
