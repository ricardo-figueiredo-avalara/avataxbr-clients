/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LegalReason_taxScope.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

LegalReason_taxScope::LegalReason_taxScope()
{
    m_TaxType = U("");
    m_SpecializedTaxType = U("");
    m_SpecializedTaxTypeIsSet = false;
    m_JurisdictionType = U("");
    m_JurisdictionIbgeCode = U("");
    m_JurisdictionIbgeCodeIsSet = false;
    
}

LegalReason_taxScope::~LegalReason_taxScope()
{
}

void LegalReason_taxScope::validate()
{
    // TODO: implement validation
}

web::json::value LegalReason_taxScope::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("taxType")] = ModelBase::toJson(m_TaxType);
    if(m_SpecializedTaxTypeIsSet)
    {
        val[U("specializedTaxType")] = ModelBase::toJson(m_SpecializedTaxType);
    }
    val[U("jurisdictionType")] = ModelBase::toJson(m_JurisdictionType);
    if(m_JurisdictionIbgeCodeIsSet)
    {
        val[U("jurisdictionIbgeCode")] = ModelBase::toJson(m_JurisdictionIbgeCode);
    }
    

    return val;
}

void LegalReason_taxScope::fromJson(web::json::value& val)
{
    setTaxType(ModelBase::stringFromJson(val[U("taxType")]));
    if(val.has_field(U("specializedTaxType")))
    {
        setSpecializedTaxType(ModelBase::stringFromJson(val[U("specializedTaxType")]));
        
    }
    setJurisdictionType(ModelBase::stringFromJson(val[U("jurisdictionType")]));
    if(val.has_field(U("jurisdictionIbgeCode")))
    {
        setJurisdictionIbgeCode(ModelBase::stringFromJson(val[U("jurisdictionIbgeCode")]));
        
    }
    
}

void LegalReason_taxScope::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("taxType"), m_TaxType));
    if(m_SpecializedTaxTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("specializedTaxType"), m_SpecializedTaxType));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("jurisdictionType"), m_JurisdictionType));
    if(m_JurisdictionIbgeCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("jurisdictionIbgeCode"), m_JurisdictionIbgeCode));
        
    }
    
}

void LegalReason_taxScope::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setTaxType(ModelBase::stringFromHttpContent(multipart->getContent(U("taxType"))));
    if(multipart->hasContent(U("specializedTaxType")))
    {
        setSpecializedTaxType(ModelBase::stringFromHttpContent(multipart->getContent(U("specializedTaxType"))));
        
    }
    setJurisdictionType(ModelBase::stringFromHttpContent(multipart->getContent(U("jurisdictionType"))));
    if(multipart->hasContent(U("jurisdictionIbgeCode")))
    {
        setJurisdictionIbgeCode(ModelBase::stringFromHttpContent(multipart->getContent(U("jurisdictionIbgeCode"))));
        
    }
    
}


utility::string_t LegalReason_taxScope::getTaxType() const
{
    return m_TaxType;
}
void LegalReason_taxScope::setTaxType(utility::string_t value)
{
    m_TaxType = value;
    
}
utility::string_t LegalReason_taxScope::getSpecializedTaxType() const
{
    return m_SpecializedTaxType;
}
void LegalReason_taxScope::setSpecializedTaxType(utility::string_t value)
{
    m_SpecializedTaxType = value;
    m_SpecializedTaxTypeIsSet = true;
}
bool LegalReason_taxScope::specializedTaxTypeIsSet() const
{
    return m_SpecializedTaxTypeIsSet;
}
void LegalReason_taxScope::unsetSpecializedTaxType()
{
    m_SpecializedTaxTypeIsSet = false;
}
utility::string_t LegalReason_taxScope::getJurisdictionType() const
{
    return m_JurisdictionType;
}
void LegalReason_taxScope::setJurisdictionType(utility::string_t value)
{
    m_JurisdictionType = value;
    
}
utility::string_t LegalReason_taxScope::getJurisdictionIbgeCode() const
{
    return m_JurisdictionIbgeCode;
}
void LegalReason_taxScope::setJurisdictionIbgeCode(utility::string_t value)
{
    m_JurisdictionIbgeCode = value;
    m_JurisdictionIbgeCodeIsSet = true;
}
bool LegalReason_taxScope::jurisdictionIbgeCodeIsSet() const
{
    return m_JurisdictionIbgeCodeIsSet;
}
void LegalReason_taxScope::unsetJurisdictionIbgeCode()
{
    m_JurisdictionIbgeCodeIsSet = false;
}

}
}
}
}

