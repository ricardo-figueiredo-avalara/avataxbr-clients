/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ValidationError.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ValidationError::ValidationError()
{
    m_Message = U("");
    m_MessageIsSet = false;
    m_ErrorsIsSet = false;
    
}

ValidationError::~ValidationError()
{
}

void ValidationError::validate()
{
    // TODO: implement validation
}

web::json::value ValidationError::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_MessageIsSet)
    {
        val[U("message")] = ModelBase::toJson(m_Message);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Errors )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("errors")] = web::json::value::array(jsonArray);
        }
    }
    

    return val;
}

void ValidationError::fromJson(web::json::value& val)
{
    if(val.has_field(U("message")))
    {
        setMessage(ModelBase::stringFromJson(val[U("message")]));
        
    }
    {
        m_Errors.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("errors")))
        {
        for( auto& item : val[U("errors")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Errors.push_back( std::shared_ptr<Error>(nullptr) );
            }
            else
            {
                std::shared_ptr<Error> newItem(new Error());
                newItem->fromJson(item);
                m_Errors.push_back( newItem );
            }
            
        }
        }
    }
    
}

void ValidationError::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("message"), m_Message));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Errors )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("errors"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    
}

void ValidationError::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("message")))
    {
        setMessage(ModelBase::stringFromHttpContent(multipart->getContent(U("message"))));
        
    }
    {
        m_Errors.clear();
        if(multipart->hasContent(U("errors")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("errors"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Errors.push_back( std::shared_ptr<Error>(nullptr) );
            }
            else
            {
                std::shared_ptr<Error> newItem(new Error());
                newItem->fromJson(item);
                m_Errors.push_back( newItem );
            }
            
        }
        }
    }
    
}


utility::string_t ValidationError::getMessage() const
{
    return m_Message;
}
void ValidationError::setMessage(utility::string_t value)
{
    m_Message = value;
    m_MessageIsSet = true;
}
bool ValidationError::messageIsSet() const
{
    return m_MessageIsSet;
}
void ValidationError::unsetMessage()
{
    m_MessageIsSet = false;
}
std::vector<std::shared_ptr<Error>>& ValidationError::getErrors()
{
    return m_Errors;
}
bool ValidationError::errorsIsSet() const
{
    return m_ErrorsIsSet;
}
void ValidationError::unsetErrors()
{
    m_ErrorsIsSet = false;
}

}
}
}
}

