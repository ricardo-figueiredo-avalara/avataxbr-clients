/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Medicine.h
 *
 * 
 */

#ifndef Medicine_H_
#define Medicine_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Medicine
    : public ModelBase
{
public:
    Medicine();
    virtual ~Medicine();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Medicine members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLoteNumber() const;
    void setLoteNumber(utility::string_t value);
        /// <summary>
    /// This is a decimal type with 11 digits including 3 decimal positions.
    /// </summary>
    double getLoteQuantity() const;
    void setLoteQuantity(double value);
        /// <summary>
    /// 
    /// </summary>
    utility::datetime getManufactotyDate() const;
    void setManufactotyDate(utility::datetime value);
        /// <summary>
    /// 
    /// </summary>
    utility::datetime getExpirationDate() const;
    void setExpirationDate(utility::datetime value);
        /// <summary>
    /// This is a decimal type with 15 digits including 2 decimal positions.  Max value to end user.
    /// </summary>
    double getMaxValueToEndUser() const;
    void setMaxValueToEndUser(double value);
    
protected:
    utility::string_t m_LoteNumber;
    double m_LoteQuantity;
    utility::datetime m_ManufactotyDate;
    utility::datetime m_ExpirationDate;
    double m_MaxValueToEndUser;
    };

}
}
}
}

#endif /* Medicine_H_ */
