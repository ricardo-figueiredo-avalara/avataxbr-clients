/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SalesDefaultLocations.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SalesDefaultLocations::SalesDefaultLocations()
{
    m_ServiceRenderedIsSet = false;
    
}

SalesDefaultLocations::~SalesDefaultLocations()
{
}

void SalesDefaultLocations::validate()
{
    // TODO: implement validation
}

web::json::value SalesDefaultLocations::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ServiceRenderedIsSet)
    {
        val[U("serviceRendered")] = ModelBase::toJson(m_ServiceRendered);
    }
    

    return val;
}

void SalesDefaultLocations::fromJson(web::json::value& val)
{
    if(val.has_field(U("serviceRendered")))
    {
        if(!val[U("serviceRendered")].is_null())
        {
            std::shared_ptr<ServiceRendered> newItem(new ServiceRendered());
            newItem->fromJson(val[U("serviceRendered")]);
            setServiceRendered( newItem );
        }
        
    }
    
}

void SalesDefaultLocations::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ServiceRenderedIsSet)
    {
        if (m_ServiceRendered.get())
        {
            m_ServiceRendered->toMultipart(multipart, U("serviceRendered."));
        }
        
    }
    
}

void SalesDefaultLocations::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("serviceRendered")))
    {
        if(multipart->hasContent(U("serviceRendered")))
        {
            std::shared_ptr<ServiceRendered> newItem(new ServiceRendered());
            newItem->fromMultiPart(multipart, U("serviceRendered."));
            setServiceRendered( newItem );
        }
        
    }
    
}


std::shared_ptr<ServiceRendered> SalesDefaultLocations::getServiceRendered() const
{
    return m_ServiceRendered;
}
void SalesDefaultLocations::setServiceRendered(std::shared_ptr<ServiceRendered> value)
{
    m_ServiceRendered = value;
    m_ServiceRenderedIsSet = true;
}
bool SalesDefaultLocations::serviceRenderedIsSet() const
{
    return m_ServiceRenderedIsSet;
}
void SalesDefaultLocations::unsetServiceRendered()
{
    m_ServiceRenderedIsSet = false;
}

}
}
}
}

