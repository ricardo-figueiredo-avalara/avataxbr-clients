/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ServiceItemTaxRate_period.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ServiceItemTaxRate_period::ServiceItemTaxRate_period()
{
    m_StartDateIsSet = false;
    m_ExpirationDateIsSet = false;
    
}

ServiceItemTaxRate_period::~ServiceItemTaxRate_period()
{
}

void ServiceItemTaxRate_period::validate()
{
    // TODO: implement validation
}

web::json::value ServiceItemTaxRate_period::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_StartDateIsSet)
    {
        val[U("startDate")] = ModelBase::toJson(m_StartDate);
    }
    if(m_ExpirationDateIsSet)
    {
        val[U("expirationDate")] = ModelBase::toJson(m_ExpirationDate);
    }
    

    return val;
}

void ServiceItemTaxRate_period::fromJson(web::json::value& val)
{
    if(val.has_field(U("startDate")))
    {
        if(!val[U("startDate")].is_null())
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromJson(val[U("startDate")]);
            setStartDate( newItem );
        }
        
    }
    if(val.has_field(U("expirationDate")))
    {
        if(!val[U("expirationDate")].is_null())
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromJson(val[U("expirationDate")]);
            setExpirationDate( newItem );
        }
        
    }
    
}

void ServiceItemTaxRate_period::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_StartDateIsSet)
    {
        if (m_StartDate.get())
        {
            m_StartDate->toMultipart(multipart, U("startDate."));
        }
        
    }
    if(m_ExpirationDateIsSet)
    {
        if (m_ExpirationDate.get())
        {
            m_ExpirationDate->toMultipart(multipart, U("expirationDate."));
        }
        
    }
    
}

void ServiceItemTaxRate_period::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("startDate")))
    {
        if(multipart->hasContent(U("startDate")))
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromMultiPart(multipart, U("startDate."));
            setStartDate( newItem );
        }
        
    }
    if(multipart->hasContent(U("expirationDate")))
    {
        if(multipart->hasContent(U("expirationDate")))
        {
            utility::datetime newItem(utility::datetime());
            newItem->fromMultiPart(multipart, U("expirationDate."));
            setExpirationDate( newItem );
        }
        
    }
    
}


utility::datetime ServiceItemTaxRate_period::getStartDate() const
{
    return m_StartDate;
}
void ServiceItemTaxRate_period::setStartDate(utility::datetime value)
{
    m_StartDate = value;
    m_StartDateIsSet = true;
}
bool ServiceItemTaxRate_period::startDateIsSet() const
{
    return m_StartDateIsSet;
}
void ServiceItemTaxRate_period::unsetStartDate()
{
    m_StartDateIsSet = false;
}
utility::datetime ServiceItemTaxRate_period::getExpirationDate() const
{
    return m_ExpirationDate;
}
void ServiceItemTaxRate_period::setExpirationDate(utility::datetime value)
{
    m_ExpirationDate = value;
    m_ExpirationDateIsSet = true;
}
bool ServiceItemTaxRate_period::expirationDateIsSet() const
{
    return m_ExpirationDateIsSet;
}
void ServiceItemTaxRate_period::unsetExpirationDate()
{
    m_ExpirationDateIsSet = false;
}

}
}
}
}

