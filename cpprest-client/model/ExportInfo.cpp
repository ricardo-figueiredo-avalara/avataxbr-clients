/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ExportInfo.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ExportInfo::ExportInfo()
{
    m_Place = U("");
    m_PlaceDescription = U("");
    m_PlaceDescriptionIsSet = false;
    
}

ExportInfo::~ExportInfo()
{
}

void ExportInfo::validate()
{
    // TODO: implement validation
}

web::json::value ExportInfo::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("shippingState")] = ModelBase::toJson(m_ShippingState);
    val[U("place")] = ModelBase::toJson(m_Place);
    if(m_PlaceDescriptionIsSet)
    {
        val[U("placeDescription")] = ModelBase::toJson(m_PlaceDescription);
    }
    

    return val;
}

void ExportInfo::fromJson(web::json::value& val)
{
    std::shared_ptr<StateEnum> newShippingState(new StateEnum());
    newShippingState->fromJson(val[U("shippingState")]);
    setShippingState( newItem );
    setPlace(ModelBase::stringFromJson(val[U("place")]));
    if(val.has_field(U("placeDescription")))
    {
        setPlaceDescription(ModelBase::stringFromJson(val[U("placeDescription")]));
        
    }
    
}

void ExportInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    m_ShippingState->toMultipart(multipart, U("shippingState."));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("place"), m_Place));
    if(m_PlaceDescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("placeDescription"), m_PlaceDescription));
        
    }
    
}

void ExportInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    std::shared_ptr<StateEnum> newShippingState(new StateEnum());
    newShippingState->fromMultiPart(multipart, U("shippingState."));
    setShippingState( newShippingState );
    setPlace(ModelBase::stringFromHttpContent(multipart->getContent(U("place"))));
    if(multipart->hasContent(U("placeDescription")))
    {
        setPlaceDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("placeDescription"))));
        
    }
    
}


std::shared_ptr<StateEnum> ExportInfo::getShippingState() const
{
    return m_ShippingState;
}
void ExportInfo::setShippingState(std::shared_ptr<StateEnum> value)
{
    m_ShippingState = value;
    
}
utility::string_t ExportInfo::getPlace() const
{
    return m_Place;
}
void ExportInfo::setPlace(utility::string_t value)
{
    m_Place = value;
    
}
utility::string_t ExportInfo::getPlaceDescription() const
{
    return m_PlaceDescription;
}
void ExportInfo::setPlaceDescription(utility::string_t value)
{
    m_PlaceDescription = value;
    m_PlaceDescriptionIsSet = true;
}
bool ExportInfo::placeDescriptionIsSet() const
{
    return m_PlaceDescriptionIsSet;
}
void ExportInfo::unsetPlaceDescription()
{
    m_PlaceDescriptionIsSet = false;
}

}
}
}
}

