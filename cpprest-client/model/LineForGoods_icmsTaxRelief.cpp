/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LineForGoods_icmsTaxRelief.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

LineForGoods_icmsTaxRelief::LineForGoods_icmsTaxRelief()
{
    m_ReasonCode = U("");
    m_TaxBaseDiscount = 0.0;
    m_TaxBaseDiscountIsSet = false;
    m_TaxAmount = 0.0;
    m_TaxAmountIsSet = false;
    
}

LineForGoods_icmsTaxRelief::~LineForGoods_icmsTaxRelief()
{
}

void LineForGoods_icmsTaxRelief::validate()
{
    // TODO: implement validation
}

web::json::value LineForGoods_icmsTaxRelief::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("reasonCode")] = ModelBase::toJson(m_ReasonCode);
    if(m_TaxBaseDiscountIsSet)
    {
        val[U("taxBaseDiscount")] = ModelBase::toJson(m_TaxBaseDiscount);
    }
    if(m_TaxAmountIsSet)
    {
        val[U("taxAmount")] = ModelBase::toJson(m_TaxAmount);
    }
    

    return val;
}

void LineForGoods_icmsTaxRelief::fromJson(web::json::value& val)
{
    setReasonCode(ModelBase::stringFromJson(val[U("reasonCode")]));
    if(val.has_field(U("taxBaseDiscount")))
    {
        setTaxBaseDiscount(ModelBase::doubleFromJson(val[U("taxBaseDiscount")]));
    }
    if(val.has_field(U("taxAmount")))
    {
        setTaxAmount(ModelBase::doubleFromJson(val[U("taxAmount")]));
    }
    
}

void LineForGoods_icmsTaxRelief::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("reasonCode"), m_ReasonCode));
    if(m_TaxBaseDiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("taxBaseDiscount"), m_TaxBaseDiscount));
    }
    if(m_TaxAmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("taxAmount"), m_TaxAmount));
    }
    
}

void LineForGoods_icmsTaxRelief::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setReasonCode(ModelBase::stringFromHttpContent(multipart->getContent(U("reasonCode"))));
    if(multipart->hasContent(U("taxBaseDiscount")))
    {
        setTaxBaseDiscount(ModelBase::doubleFromHttpContent(multipart->getContent(U("taxBaseDiscount"))));
    }
    if(multipart->hasContent(U("taxAmount")))
    {
        setTaxAmount(ModelBase::doubleFromHttpContent(multipart->getContent(U("taxAmount"))));
    }
    
}


utility::string_t LineForGoods_icmsTaxRelief::getReasonCode() const
{
    return m_ReasonCode;
}
void LineForGoods_icmsTaxRelief::setReasonCode(utility::string_t value)
{
    m_ReasonCode = value;
    
}
double LineForGoods_icmsTaxRelief::getTaxBaseDiscount() const
{
    return m_TaxBaseDiscount;
}
void LineForGoods_icmsTaxRelief::setTaxBaseDiscount(double value)
{
    m_TaxBaseDiscount = value;
    m_TaxBaseDiscountIsSet = true;
}
bool LineForGoods_icmsTaxRelief::taxBaseDiscountIsSet() const
{
    return m_TaxBaseDiscountIsSet;
}
void LineForGoods_icmsTaxRelief::unsetTaxBaseDiscount()
{
    m_TaxBaseDiscountIsSet = false;
}
double LineForGoods_icmsTaxRelief::getTaxAmount() const
{
    return m_TaxAmount;
}
void LineForGoods_icmsTaxRelief::setTaxAmount(double value)
{
    m_TaxAmount = value;
    m_TaxAmountIsSet = true;
}
bool LineForGoods_icmsTaxRelief::taxAmountIsSet() const
{
    return m_TaxAmountIsSet;
}
void LineForGoods_icmsTaxRelief::unsetTaxAmount()
{
    m_TaxAmountIsSet = false;
}

}
}
}
}

