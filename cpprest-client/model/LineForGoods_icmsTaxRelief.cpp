/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LineForGoods_icmsTaxRelief.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

LineForGoods_icmsTaxRelief::LineForGoods_icmsTaxRelief()
{
    m_IcmsTaxReliefReasonCode = 0;
    m_IcmsReliefTaxRate = 0.0;
    m_IcmsReliefTaxRateIsSet = false;
    m_IcmsReliefTaxAmount = 0.0;
    m_IcmsReliefTaxAmountIsSet = false;
    
}

LineForGoods_icmsTaxRelief::~LineForGoods_icmsTaxRelief()
{
}

void LineForGoods_icmsTaxRelief::validate()
{
    // TODO: implement validation
}

web::json::value LineForGoods_icmsTaxRelief::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("icmsTaxReliefReasonCode")] = ModelBase::toJson(m_IcmsTaxReliefReasonCode);
    if(m_IcmsReliefTaxRateIsSet)
    {
        val[U("icmsReliefTaxRate")] = ModelBase::toJson(m_IcmsReliefTaxRate);
    }
    if(m_IcmsReliefTaxAmountIsSet)
    {
        val[U("icmsReliefTaxAmount")] = ModelBase::toJson(m_IcmsReliefTaxAmount);
    }
    

    return val;
}

void LineForGoods_icmsTaxRelief::fromJson(web::json::value& val)
{
    setIcmsTaxReliefReasonCode(ModelBase::int32_tFromJson(val[U("icmsTaxReliefReasonCode")]));
    if(val.has_field(U("icmsReliefTaxRate")))
    {
        setIcmsReliefTaxRate(ModelBase::doubleFromJson(val[U("icmsReliefTaxRate")]));
    }
    if(val.has_field(U("icmsReliefTaxAmount")))
    {
        setIcmsReliefTaxAmount(ModelBase::doubleFromJson(val[U("icmsReliefTaxAmount")]));
    }
    
}

void LineForGoods_icmsTaxRelief::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("icmsTaxReliefReasonCode"), m_IcmsTaxReliefReasonCode));
    if(m_IcmsReliefTaxRateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("icmsReliefTaxRate"), m_IcmsReliefTaxRate));
    }
    if(m_IcmsReliefTaxAmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("icmsReliefTaxAmount"), m_IcmsReliefTaxAmount));
    }
    
}

void LineForGoods_icmsTaxRelief::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setIcmsTaxReliefReasonCode(ModelBase::int32_tFromHttpContent(multipart->getContent(U("icmsTaxReliefReasonCode"))));
    if(multipart->hasContent(U("icmsReliefTaxRate")))
    {
        setIcmsReliefTaxRate(ModelBase::doubleFromHttpContent(multipart->getContent(U("icmsReliefTaxRate"))));
    }
    if(multipart->hasContent(U("icmsReliefTaxAmount")))
    {
        setIcmsReliefTaxAmount(ModelBase::doubleFromHttpContent(multipart->getContent(U("icmsReliefTaxAmount"))));
    }
    
}


int32_t LineForGoods_icmsTaxRelief::getIcmsTaxReliefReasonCode() const
{
    return m_IcmsTaxReliefReasonCode;
}
void LineForGoods_icmsTaxRelief::setIcmsTaxReliefReasonCode(int32_t value)
{
    m_IcmsTaxReliefReasonCode = value;
    
}
double LineForGoods_icmsTaxRelief::getIcmsReliefTaxRate() const
{
    return m_IcmsReliefTaxRate;
}
void LineForGoods_icmsTaxRelief::setIcmsReliefTaxRate(double value)
{
    m_IcmsReliefTaxRate = value;
    m_IcmsReliefTaxRateIsSet = true;
}
bool LineForGoods_icmsTaxRelief::icmsReliefTaxRateIsSet() const
{
    return m_IcmsReliefTaxRateIsSet;
}
void LineForGoods_icmsTaxRelief::unsetIcmsReliefTaxRate()
{
    m_IcmsReliefTaxRateIsSet = false;
}
double LineForGoods_icmsTaxRelief::getIcmsReliefTaxAmount() const
{
    return m_IcmsReliefTaxAmount;
}
void LineForGoods_icmsTaxRelief::setIcmsReliefTaxAmount(double value)
{
    m_IcmsReliefTaxAmount = value;
    m_IcmsReliefTaxAmountIsSet = true;
}
bool LineForGoods_icmsTaxRelief::icmsReliefTaxAmountIsSet() const
{
    return m_IcmsReliefTaxAmountIsSet;
}
void LineForGoods_icmsTaxRelief::unsetIcmsReliefTaxAmount()
{
    m_IcmsReliefTaxAmountIsSet = false;
}

}
}
}
}

