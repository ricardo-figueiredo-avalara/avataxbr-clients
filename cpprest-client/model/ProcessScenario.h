/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ProcessScenario.h
 *
 * 
 */

#ifndef ProcessScenario_H_
#define ProcessScenario_H_


#include "ModelBase.h"

#include "IcmsTaxConf.h"
#include "TaxConf.h"
#include <cpprest/details/basic_types.h>
#include "CfopConf.h"
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ProcessScenario
    : public ModelBase
{
public:
    ProcessScenario();
    virtual ~ProcessScenario();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ProcessScenario members

    /// <summary>
    /// Process code to Identify this configuration, its is unique by Accounty Id or when standard, its has priority when the code match with the standard code.
    /// </summary>
    utility::string_t getCode() const;
    void setCode(utility::string_t value);
        /// <summary>
    /// Inform that the process has inventory impact.
    /// </summary>
    bool getStockImpact() const;
    void setStockImpact(bool value);
    bool stockImpactIsSet() const;
    void unsetStockImpact();
    /// <summary>
    /// Inform that the process has financial impact.
    /// </summary>
    bool getFinancialImpact() const;
    void setFinancialImpact(bool value);
    bool financialImpactIsSet() const;
    void unsetFinancialImpact();
    /// <summary>
    /// Inform if this process is subject to IPI taxation on output process - &#39;50&#39; # Saída Tributada - &#39;51&#39; # Saída Tributável com Alíquota Zero - &#39;52&#39; # Saída Isenta - &#39;53&#39; # Saída Não-Tributada - &#39;54&#39; # Saída Imune 
    /// </summary>
    utility::string_t getCstIPI() const;
    void setCstIPI(utility::string_t value);
    bool cstIPIIsSet() const;
    void unsetCstIPI();
    /// <summary>
    /// Legal tax classificação for IPI (enquadramento) When the processo has CST IPI 52 or 54, is mandatory inform Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo&#x3D;mCnJajU4BKU&#x3D; 
    /// </summary>
    utility::string_t getIpiLegalTaxClass() const;
    void setIpiLegalTaxClass(utility::string_t value);
    bool ipiLegalTaxClassIsSet() const;
    void unsetIpiLegalTaxClass();
    /// <summary>
    /// Inform if this item by nature is subject to PIS taxation or exempt - &#39;T&#39; # TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;N&#39; # NO TAXABLE 
    /// </summary>
    utility::string_t getAccruablePISTaxation() const;
    void setAccruablePISTaxation(utility::string_t value);
    bool accruablePISTaxationIsSet() const;
    void unsetAccruablePISTaxation();
    /// <summary>
    /// When exempt, taxable with zero, suspended, not taxable, this field holds the official code number
    /// </summary>
    utility::string_t getPisExemptLegalReasonCode() const;
    void setPisExemptLegalReasonCode(utility::string_t value);
    bool pisExemptLegalReasonCodeIsSet() const;
    void unsetPisExemptLegalReasonCode();
    /// <summary>
    /// When specifi reason, this field has the description
    /// </summary>
    utility::string_t getPisExemptLegalReason() const;
    void setPisExemptLegalReason(utility::string_t value);
    bool pisExemptLegalReasonIsSet() const;
    void unsetPisExemptLegalReason();
    /// <summary>
    /// Inform if this item by nature is subject to COFINS taxation or exempt - &#39;T&#39; # TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;N&#39; # NO TAXABLE 
    /// </summary>
    utility::string_t getAccruableCOFINSTaxation() const;
    void setAccruableCOFINSTaxation(utility::string_t value);
    bool accruableCOFINSTaxationIsSet() const;
    void unsetAccruableCOFINSTaxation();
    /// <summary>
    /// When exempt, taxable with zero, suspended, not taxable, this field holds the official code number
    /// </summary>
    utility::string_t getCofinsExemptLegalReasonCode() const;
    void setCofinsExemptLegalReasonCode(utility::string_t value);
    bool cofinsExemptLegalReasonCodeIsSet() const;
    void unsetCofinsExemptLegalReasonCode();
    /// <summary>
    /// When specifi reason, this field has the description
    /// </summary>
    utility::string_t getCofinsExemptLegalReason() const;
    void setCofinsExemptLegalReason(utility::string_t value);
    bool cofinsExemptLegalReasonIsSet() const;
    void unsetCofinsExemptLegalReason();
    /// <summary>
    /// Inform that the process allow IPI credit to Input process
    /// </summary>
    bool getAllowIPIcreditWhenInGoing() const;
    void setAllowIPIcreditWhenInGoing(bool value);
    bool allowIPIcreditWhenInGoingIsSet() const;
    void unsetAllowIPIcreditWhenInGoing();
    /// <summary>
    /// the map key is state code
    /// </summary>
    std::vector<std::shared_ptr<IcmsTaxConf>>& getIcmsConf();
    bool icmsConfIsSet() const;
    void unsetIcmsConf();
    /// <summary>
    /// Process name to Identify this configuration
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    void setType(utility::string_t value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// inform if the transaction is an operation to internalizing (receive) item or value
    /// </summary>
    utility::string_t getWayType() const;
    void setWayType(utility::string_t value);
    bool wayTypeIsSet() const;
    void unsetWayType();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getGoal() const;
    void setGoal(utility::string_t value);
    bool goalIsSet() const;
    void unsetGoal();
    /// <summary>
    /// inform that the configuration process overwrites the cfop configuration.
    /// </summary>
    bool getOverWriteCFOP() const;
    void setOverWriteCFOP(bool value);
    bool overWriteCFOPIsSet() const;
    void unsetOverWriteCFOP();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<CfopConf>>& getCfops();
    bool cfopsIsSet() const;
    void unsetCfops();

protected:
    utility::string_t m_Code;
    bool m_StockImpact;
    bool m_StockImpactIsSet;
bool m_FinancialImpact;
    bool m_FinancialImpactIsSet;
utility::string_t m_CstIPI;
    bool m_CstIPIIsSet;
utility::string_t m_IpiLegalTaxClass;
    bool m_IpiLegalTaxClassIsSet;
utility::string_t m_AccruablePISTaxation;
    bool m_AccruablePISTaxationIsSet;
utility::string_t m_PisExemptLegalReasonCode;
    bool m_PisExemptLegalReasonCodeIsSet;
utility::string_t m_PisExemptLegalReason;
    bool m_PisExemptLegalReasonIsSet;
utility::string_t m_AccruableCOFINSTaxation;
    bool m_AccruableCOFINSTaxationIsSet;
utility::string_t m_CofinsExemptLegalReasonCode;
    bool m_CofinsExemptLegalReasonCodeIsSet;
utility::string_t m_CofinsExemptLegalReason;
    bool m_CofinsExemptLegalReasonIsSet;
bool m_AllowIPIcreditWhenInGoing;
    bool m_AllowIPIcreditWhenInGoingIsSet;
std::vector<std::shared_ptr<IcmsTaxConf>> m_IcmsConf;
    bool m_IcmsConfIsSet;
utility::string_t m_Name;
    utility::string_t m_Type;
    bool m_TypeIsSet;
utility::string_t m_WayType;
    bool m_WayTypeIsSet;
utility::string_t m_Goal;
    bool m_GoalIsSet;
bool m_OverWriteCFOP;
    bool m_OverWriteCFOPIsSet;
std::vector<std::shared_ptr<CfopConf>> m_Cfops;
    bool m_CfopsIsSet;
};

}
}
}
}

#endif /* ProcessScenario_H_ */
