/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CustomTaxTypeRate.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

CustomTaxTypeRate::CustomTaxTypeRate()
{
    m_TaxModel = U("");
    m_Rate = 0.0;
    m_RateIsSet = false;
    m_SrvAmount = 0.0;
    m_SrvAmountIsSet = false;
    m_QuantityUnidBase = U("");
    m_QuantityUnidBaseIsSet = false;
    m_SpecializationType = U("");
    m_SpecializationTypeIsSet = false;
    m_ExemptionReasonCode = U("");
    m_ExemptionReasonCodeIsSet = false;
    m_CustomExemptionReasonDescription = U("");
    m_CustomExemptionReasonDescriptionIsSet = false;
    m_WithholdingIsSet = false;
    m_CompanyId = nullptr;
    
}

CustomTaxTypeRate::~CustomTaxTypeRate()
{
}

void CustomTaxTypeRate::validate()
{
    // TODO: implement validation
}

web::json::value CustomTaxTypeRate::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("taxType")] = ModelBase::toJson(m_TaxType);
    val[U("taxModel")] = ModelBase::toJson(m_TaxModel);
    if(m_RateIsSet)
    {
        val[U("rate")] = ModelBase::toJson(m_Rate);
    }
    if(m_SrvAmountIsSet)
    {
        val[U("srvAmount")] = ModelBase::toJson(m_SrvAmount);
    }
    if(m_QuantityUnidBaseIsSet)
    {
        val[U("quantityUnidBase")] = ModelBase::toJson(m_QuantityUnidBase);
    }
    if(m_SpecializationTypeIsSet)
    {
        val[U("specializationType")] = ModelBase::toJson(m_SpecializationType);
    }
    if(m_ExemptionReasonCodeIsSet)
    {
        val[U("exemptionReasonCode")] = ModelBase::toJson(m_ExemptionReasonCode);
    }
    if(m_CustomExemptionReasonDescriptionIsSet)
    {
        val[U("customExemptionReasonDescription")] = ModelBase::toJson(m_CustomExemptionReasonDescription);
    }
    if(m_WithholdingIsSet)
    {
        val[U("withholding")] = ModelBase::toJson(m_Withholding);
    }
    val[U("companyId")] = ModelBase::toJson(m_CompanyId);
    

    return val;
}

void CustomTaxTypeRate::fromJson(web::json::value& val)
{
    std::shared_ptr<TaxType> newTaxType(new TaxType());
    newTaxType->fromJson(val[U("taxType")]);
    setTaxType( newItem );
    setTaxModel(ModelBase::stringFromJson(val[U("taxModel")]));
    if(val.has_field(U("rate")))
    {
        setRate(ModelBase::doubleFromJson(val[U("rate")]));
    }
    if(val.has_field(U("srvAmount")))
    {
        setSrvAmount(ModelBase::doubleFromJson(val[U("srvAmount")]));
    }
    if(val.has_field(U("quantityUnidBase")))
    {
        setQuantityUnidBase(ModelBase::stringFromJson(val[U("quantityUnidBase")]));
        
    }
    if(val.has_field(U("specializationType")))
    {
        setSpecializationType(ModelBase::stringFromJson(val[U("specializationType")]));
        
    }
    if(val.has_field(U("exemptionReasonCode")))
    {
        setExemptionReasonCode(ModelBase::stringFromJson(val[U("exemptionReasonCode")]));
        
    }
    if(val.has_field(U("customExemptionReasonDescription")))
    {
        setCustomExemptionReasonDescription(ModelBase::stringFromJson(val[U("customExemptionReasonDescription")]));
        
    }
    if(val.has_field(U("withholding")))
    {
        if(!val[U("withholding")].is_null())
        {
            std::shared_ptr<TaxTypeRate_withholding> newItem(new TaxTypeRate_withholding());
            newItem->fromJson(val[U("withholding")]);
            setWithholding( newItem );
        }
        
    }
    setCompanyId(ModelBase::stringFromJson(val[U("companyId")]));
    
}

void CustomTaxTypeRate::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    m_TaxType->toMultipart(multipart, U("taxType."));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("taxModel"), m_TaxModel));
    if(m_RateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("rate"), m_Rate));
    }
    if(m_SrvAmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("srvAmount"), m_SrvAmount));
    }
    if(m_QuantityUnidBaseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("quantityUnidBase"), m_QuantityUnidBase));
        
    }
    if(m_SpecializationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("specializationType"), m_SpecializationType));
        
    }
    if(m_ExemptionReasonCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("exemptionReasonCode"), m_ExemptionReasonCode));
        
    }
    if(m_CustomExemptionReasonDescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("customExemptionReasonDescription"), m_CustomExemptionReasonDescription));
        
    }
    if(m_WithholdingIsSet)
    {
        if (m_Withholding.get())
        {
            m_Withholding->toMultipart(multipart, U("withholding."));
        }
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("companyId"), m_CompanyId));
    
}

void CustomTaxTypeRate::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    std::shared_ptr<TaxType> newTaxType(new TaxType());
    newTaxType->fromMultiPart(multipart, U("taxType."));
    setTaxType( newTaxType );
    setTaxModel(ModelBase::stringFromHttpContent(multipart->getContent(U("taxModel"))));
    if(multipart->hasContent(U("rate")))
    {
        setRate(ModelBase::doubleFromHttpContent(multipart->getContent(U("rate"))));
    }
    if(multipart->hasContent(U("srvAmount")))
    {
        setSrvAmount(ModelBase::doubleFromHttpContent(multipart->getContent(U("srvAmount"))));
    }
    if(multipart->hasContent(U("quantityUnidBase")))
    {
        setQuantityUnidBase(ModelBase::stringFromHttpContent(multipart->getContent(U("quantityUnidBase"))));
        
    }
    if(multipart->hasContent(U("specializationType")))
    {
        setSpecializationType(ModelBase::stringFromHttpContent(multipart->getContent(U("specializationType"))));
        
    }
    if(multipart->hasContent(U("exemptionReasonCode")))
    {
        setExemptionReasonCode(ModelBase::stringFromHttpContent(multipart->getContent(U("exemptionReasonCode"))));
        
    }
    if(multipart->hasContent(U("customExemptionReasonDescription")))
    {
        setCustomExemptionReasonDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("customExemptionReasonDescription"))));
        
    }
    if(multipart->hasContent(U("withholding")))
    {
        if(multipart->hasContent(U("withholding")))
        {
            std::shared_ptr<TaxTypeRate_withholding> newItem(new TaxTypeRate_withholding());
            newItem->fromMultiPart(multipart, U("withholding."));
            setWithholding( newItem );
        }
        
    }
    setCompanyId(ModelBase::stringFromHttpContent(multipart->getContent(U("companyId"))));
    
}


std::shared_ptr<TaxType> CustomTaxTypeRate::getTaxType() const
{
    return m_TaxType;
}
void CustomTaxTypeRate::setTaxType(std::shared_ptr<TaxType> value)
{
    m_TaxType = value;
    
}
utility::string_t CustomTaxTypeRate::getTaxModel() const
{
    return m_TaxModel;
}
void CustomTaxTypeRate::setTaxModel(utility::string_t value)
{
    m_TaxModel = value;
    
}
double CustomTaxTypeRate::getRate() const
{
    return m_Rate;
}
void CustomTaxTypeRate::setRate(double value)
{
    m_Rate = value;
    m_RateIsSet = true;
}
bool CustomTaxTypeRate::rateIsSet() const
{
    return m_RateIsSet;
}
void CustomTaxTypeRate::unsetRate()
{
    m_RateIsSet = false;
}
double CustomTaxTypeRate::getSrvAmount() const
{
    return m_SrvAmount;
}
void CustomTaxTypeRate::setSrvAmount(double value)
{
    m_SrvAmount = value;
    m_SrvAmountIsSet = true;
}
bool CustomTaxTypeRate::srvAmountIsSet() const
{
    return m_SrvAmountIsSet;
}
void CustomTaxTypeRate::unsetSrvAmount()
{
    m_SrvAmountIsSet = false;
}
utility::string_t CustomTaxTypeRate::getQuantityUnidBase() const
{
    return m_QuantityUnidBase;
}
void CustomTaxTypeRate::setQuantityUnidBase(utility::string_t value)
{
    m_QuantityUnidBase = value;
    m_QuantityUnidBaseIsSet = true;
}
bool CustomTaxTypeRate::quantityUnidBaseIsSet() const
{
    return m_QuantityUnidBaseIsSet;
}
void CustomTaxTypeRate::unsetQuantityUnidBase()
{
    m_QuantityUnidBaseIsSet = false;
}
utility::string_t CustomTaxTypeRate::getSpecializationType() const
{
    return m_SpecializationType;
}
void CustomTaxTypeRate::setSpecializationType(utility::string_t value)
{
    m_SpecializationType = value;
    m_SpecializationTypeIsSet = true;
}
bool CustomTaxTypeRate::specializationTypeIsSet() const
{
    return m_SpecializationTypeIsSet;
}
void CustomTaxTypeRate::unsetSpecializationType()
{
    m_SpecializationTypeIsSet = false;
}
utility::string_t CustomTaxTypeRate::getExemptionReasonCode() const
{
    return m_ExemptionReasonCode;
}
void CustomTaxTypeRate::setExemptionReasonCode(utility::string_t value)
{
    m_ExemptionReasonCode = value;
    m_ExemptionReasonCodeIsSet = true;
}
bool CustomTaxTypeRate::exemptionReasonCodeIsSet() const
{
    return m_ExemptionReasonCodeIsSet;
}
void CustomTaxTypeRate::unsetExemptionReasonCode()
{
    m_ExemptionReasonCodeIsSet = false;
}
utility::string_t CustomTaxTypeRate::getCustomExemptionReasonDescription() const
{
    return m_CustomExemptionReasonDescription;
}
void CustomTaxTypeRate::setCustomExemptionReasonDescription(utility::string_t value)
{
    m_CustomExemptionReasonDescription = value;
    m_CustomExemptionReasonDescriptionIsSet = true;
}
bool CustomTaxTypeRate::customExemptionReasonDescriptionIsSet() const
{
    return m_CustomExemptionReasonDescriptionIsSet;
}
void CustomTaxTypeRate::unsetCustomExemptionReasonDescription()
{
    m_CustomExemptionReasonDescriptionIsSet = false;
}
std::shared_ptr<TaxTypeRate_withholding> CustomTaxTypeRate::getWithholding() const
{
    return m_Withholding;
}
void CustomTaxTypeRate::setWithholding(std::shared_ptr<TaxTypeRate_withholding> value)
{
    m_Withholding = value;
    m_WithholdingIsSet = true;
}
bool CustomTaxTypeRate::withholdingIsSet() const
{
    return m_WithholdingIsSet;
}
void CustomTaxTypeRate::unsetWithholding()
{
    m_WithholdingIsSet = false;
}
std::shared_ptr<UUID> CustomTaxTypeRate::getCompanyId() const
{
    return m_CompanyId;
}
void CustomTaxTypeRate::setCompanyId(std::shared_ptr<UUID> value)
{
    m_CompanyId = value;
    
}

}
}
}
}

