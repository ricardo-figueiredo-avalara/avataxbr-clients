/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Body_3.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Body_3::Body_3()
{
    m_Content = U("");
    m_ContentIsSet = false;
    
}

Body_3::~Body_3()
{
}

void Body_3::validate()
{
    // TODO: implement validation
}

web::json::value Body_3::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ContentIsSet)
    {
        val[U("content")] = ModelBase::toJson(m_Content);
    }
    

    return val;
}

void Body_3::fromJson(web::json::value& val)
{
    if(val.has_field(U("content")))
    {
        setContent(ModelBase::stringFromJson(val[U("content")]));
        
    }
    
}

void Body_3::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("content"), m_Content));
        
    }
    
}

void Body_3::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("content")))
    {
        setContent(ModelBase::stringFromHttpContent(multipart->getContent(U("content"))));
        
    }
    
}


utility::string_t Body_3::getContent() const
{
    return m_Content;
}
void Body_3::setContent(utility::string_t value)
{
    m_Content = value;
    m_ContentIsSet = true;
}
bool Body_3::contentIsSet() const
{
    return m_ContentIsSet;
}
void Body_3::unsetContent()
{
    m_ContentIsSet = false;
}

}
}
}
}

