/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Agast_codeType.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Agast_codeType::Agast_codeType()
{
    m_Code = 0;
    m_CodeIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    
}

Agast_codeType::~Agast_codeType()
{
}

void Agast_codeType::validate()
{
    // TODO: implement validation
}

web::json::value Agast_codeType::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CodeIsSet)
    {
        val[U("code")] = ModelBase::toJson(m_Code);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    

    return val;
}

void Agast_codeType::fromJson(web::json::value& val)
{
    if(val.has_field(U("code")))
    {
        setCode(ModelBase::int32_tFromJson(val[U("code")]));
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
        
    }
    
}

void Agast_codeType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("code"), m_Code));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    
}

void Agast_codeType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("code")))
    {
        setCode(ModelBase::int32_tFromHttpContent(multipart->getContent(U("code"))));
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
        
    }
    
}


int32_t Agast_codeType::getCode() const
{
    return m_Code;
}
void Agast_codeType::setCode(int32_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}
bool Agast_codeType::codeIsSet() const
{
    return m_CodeIsSet;
}
void Agast_codeType::unsetCode()
{
    m_CodeIsSet = false;
}
utility::string_t Agast_codeType::getName() const
{
    return m_Name;
}
void Agast_codeType::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Agast_codeType::nameIsSet() const
{
    return m_NameIsSet;
}
void Agast_codeType::unsetName()
{
    m_NameIsSet = false;
}

}
}
}
}

