/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SalesTaxesConfig.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SalesTaxesConfig::SalesTaxesConfig()
{
    m_AccruableCOFINSTaxation = U("");
    m_AccruableCOFINSTaxationIsSet = false;
    m_AccruableCSLLTaxation = U("");
    m_AccruableCSLLTaxationIsSet = false;
    m_AccruablePISTaxation = U("");
    m_AccruablePISTaxationIsSet = false;
    m_AccruableCOFINSExempCodeTaxation = U("");
    m_AccruableCOFINSExempCodeTaxationIsSet = false;
    m_AccruablePISExempCodeTaxation = U("");
    m_AccruablePISExempCodeTaxationIsSet = false;
    m_WithholdingCOFINS = false;
    m_WithholdingCOFINSIsSet = false;
    m_WithholdingCSLL = false;
    m_WithholdingCSLLIsSet = false;
    m_WithholdingIRRF = false;
    m_WithholdingIRRFIsSet = false;
    m_WithholdingPIS = false;
    m_WithholdingPISIsSet = false;
    m_WithholdIRRFExemptReasonTaxation = U("");
    m_WithholdIRRFExemptReasonTaxationIsSet = false;
    
}

SalesTaxesConfig::~SalesTaxesConfig()
{
}

void SalesTaxesConfig::validate()
{
    // TODO: implement validation
}

web::json::value SalesTaxesConfig::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AccruableCOFINSTaxationIsSet)
    {
        val[U("accruableCOFINSTaxation")] = ModelBase::toJson(m_AccruableCOFINSTaxation);
    }
    if(m_AccruableCSLLTaxationIsSet)
    {
        val[U("accruableCSLLTaxation")] = ModelBase::toJson(m_AccruableCSLLTaxation);
    }
    if(m_AccruablePISTaxationIsSet)
    {
        val[U("accruablePISTaxation")] = ModelBase::toJson(m_AccruablePISTaxation);
    }
    if(m_AccruableCOFINSExempCodeTaxationIsSet)
    {
        val[U("accruableCOFINSExempCodeTaxation")] = ModelBase::toJson(m_AccruableCOFINSExempCodeTaxation);
    }
    if(m_AccruablePISExempCodeTaxationIsSet)
    {
        val[U("accruablePISExempCodeTaxation")] = ModelBase::toJson(m_AccruablePISExempCodeTaxation);
    }
    if(m_WithholdingCOFINSIsSet)
    {
        val[U("withholdingCOFINS")] = ModelBase::toJson(m_WithholdingCOFINS);
    }
    if(m_WithholdingCSLLIsSet)
    {
        val[U("withholdingCSLL")] = ModelBase::toJson(m_WithholdingCSLL);
    }
    if(m_WithholdingIRRFIsSet)
    {
        val[U("withholdingIRRF")] = ModelBase::toJson(m_WithholdingIRRF);
    }
    if(m_WithholdingPISIsSet)
    {
        val[U("withholdingPIS")] = ModelBase::toJson(m_WithholdingPIS);
    }
    if(m_WithholdIRRFExemptReasonTaxationIsSet)
    {
        val[U("withholdIRRFExemptReasonTaxation")] = ModelBase::toJson(m_WithholdIRRFExemptReasonTaxation);
    }
    

    return val;
}

void SalesTaxesConfig::fromJson(web::json::value& val)
{
    if(val.has_field(U("accruableCOFINSTaxation")))
    {
        setAccruableCOFINSTaxation(ModelBase::stringFromJson(val[U("accruableCOFINSTaxation")]));
        
    }
    if(val.has_field(U("accruableCSLLTaxation")))
    {
        setAccruableCSLLTaxation(ModelBase::stringFromJson(val[U("accruableCSLLTaxation")]));
        
    }
    if(val.has_field(U("accruablePISTaxation")))
    {
        setAccruablePISTaxation(ModelBase::stringFromJson(val[U("accruablePISTaxation")]));
        
    }
    if(val.has_field(U("accruableCOFINSExempCodeTaxation")))
    {
        setAccruableCOFINSExempCodeTaxation(ModelBase::stringFromJson(val[U("accruableCOFINSExempCodeTaxation")]));
        
    }
    if(val.has_field(U("accruablePISExempCodeTaxation")))
    {
        setAccruablePISExempCodeTaxation(ModelBase::stringFromJson(val[U("accruablePISExempCodeTaxation")]));
        
    }
    if(val.has_field(U("withholdingCOFINS")))
    {
        setWithholdingCOFINS(ModelBase::boolFromJson(val[U("withholdingCOFINS")]));
    }
    if(val.has_field(U("withholdingCSLL")))
    {
        setWithholdingCSLL(ModelBase::boolFromJson(val[U("withholdingCSLL")]));
    }
    if(val.has_field(U("withholdingIRRF")))
    {
        setWithholdingIRRF(ModelBase::boolFromJson(val[U("withholdingIRRF")]));
    }
    if(val.has_field(U("withholdingPIS")))
    {
        setWithholdingPIS(ModelBase::boolFromJson(val[U("withholdingPIS")]));
    }
    if(val.has_field(U("withholdIRRFExemptReasonTaxation")))
    {
        setWithholdIRRFExemptReasonTaxation(ModelBase::stringFromJson(val[U("withholdIRRFExemptReasonTaxation")]));
        
    }
    
}

void SalesTaxesConfig::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_AccruableCOFINSTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("accruableCOFINSTaxation"), m_AccruableCOFINSTaxation));
        
    }
    if(m_AccruableCSLLTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("accruableCSLLTaxation"), m_AccruableCSLLTaxation));
        
    }
    if(m_AccruablePISTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("accruablePISTaxation"), m_AccruablePISTaxation));
        
    }
    if(m_AccruableCOFINSExempCodeTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("accruableCOFINSExempCodeTaxation"), m_AccruableCOFINSExempCodeTaxation));
        
    }
    if(m_AccruablePISExempCodeTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("accruablePISExempCodeTaxation"), m_AccruablePISExempCodeTaxation));
        
    }
    if(m_WithholdingCOFINSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("withholdingCOFINS"), m_WithholdingCOFINS));
    }
    if(m_WithholdingCSLLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("withholdingCSLL"), m_WithholdingCSLL));
    }
    if(m_WithholdingIRRFIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("withholdingIRRF"), m_WithholdingIRRF));
    }
    if(m_WithholdingPISIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("withholdingPIS"), m_WithholdingPIS));
    }
    if(m_WithholdIRRFExemptReasonTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("withholdIRRFExemptReasonTaxation"), m_WithholdIRRFExemptReasonTaxation));
        
    }
    
}

void SalesTaxesConfig::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("accruableCOFINSTaxation")))
    {
        setAccruableCOFINSTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("accruableCOFINSTaxation"))));
        
    }
    if(multipart->hasContent(U("accruableCSLLTaxation")))
    {
        setAccruableCSLLTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("accruableCSLLTaxation"))));
        
    }
    if(multipart->hasContent(U("accruablePISTaxation")))
    {
        setAccruablePISTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("accruablePISTaxation"))));
        
    }
    if(multipart->hasContent(U("accruableCOFINSExempCodeTaxation")))
    {
        setAccruableCOFINSExempCodeTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("accruableCOFINSExempCodeTaxation"))));
        
    }
    if(multipart->hasContent(U("accruablePISExempCodeTaxation")))
    {
        setAccruablePISExempCodeTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("accruablePISExempCodeTaxation"))));
        
    }
    if(multipart->hasContent(U("withholdingCOFINS")))
    {
        setWithholdingCOFINS(ModelBase::boolFromHttpContent(multipart->getContent(U("withholdingCOFINS"))));
    }
    if(multipart->hasContent(U("withholdingCSLL")))
    {
        setWithholdingCSLL(ModelBase::boolFromHttpContent(multipart->getContent(U("withholdingCSLL"))));
    }
    if(multipart->hasContent(U("withholdingIRRF")))
    {
        setWithholdingIRRF(ModelBase::boolFromHttpContent(multipart->getContent(U("withholdingIRRF"))));
    }
    if(multipart->hasContent(U("withholdingPIS")))
    {
        setWithholdingPIS(ModelBase::boolFromHttpContent(multipart->getContent(U("withholdingPIS"))));
    }
    if(multipart->hasContent(U("withholdIRRFExemptReasonTaxation")))
    {
        setWithholdIRRFExemptReasonTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("withholdIRRFExemptReasonTaxation"))));
        
    }
    
}


utility::string_t SalesTaxesConfig::getAccruableCOFINSTaxation() const
{
    return m_AccruableCOFINSTaxation;
}
void SalesTaxesConfig::setAccruableCOFINSTaxation(utility::string_t value)
{
    m_AccruableCOFINSTaxation = value;
    m_AccruableCOFINSTaxationIsSet = true;
}
bool SalesTaxesConfig::accruableCOFINSTaxationIsSet() const
{
    return m_AccruableCOFINSTaxationIsSet;
}
void SalesTaxesConfig::unsetAccruableCOFINSTaxation()
{
    m_AccruableCOFINSTaxationIsSet = false;
}
utility::string_t SalesTaxesConfig::getAccruableCSLLTaxation() const
{
    return m_AccruableCSLLTaxation;
}
void SalesTaxesConfig::setAccruableCSLLTaxation(utility::string_t value)
{
    m_AccruableCSLLTaxation = value;
    m_AccruableCSLLTaxationIsSet = true;
}
bool SalesTaxesConfig::accruableCSLLTaxationIsSet() const
{
    return m_AccruableCSLLTaxationIsSet;
}
void SalesTaxesConfig::unsetAccruableCSLLTaxation()
{
    m_AccruableCSLLTaxationIsSet = false;
}
utility::string_t SalesTaxesConfig::getAccruablePISTaxation() const
{
    return m_AccruablePISTaxation;
}
void SalesTaxesConfig::setAccruablePISTaxation(utility::string_t value)
{
    m_AccruablePISTaxation = value;
    m_AccruablePISTaxationIsSet = true;
}
bool SalesTaxesConfig::accruablePISTaxationIsSet() const
{
    return m_AccruablePISTaxationIsSet;
}
void SalesTaxesConfig::unsetAccruablePISTaxation()
{
    m_AccruablePISTaxationIsSet = false;
}
utility::string_t SalesTaxesConfig::getAccruableCOFINSExempCodeTaxation() const
{
    return m_AccruableCOFINSExempCodeTaxation;
}
void SalesTaxesConfig::setAccruableCOFINSExempCodeTaxation(utility::string_t value)
{
    m_AccruableCOFINSExempCodeTaxation = value;
    m_AccruableCOFINSExempCodeTaxationIsSet = true;
}
bool SalesTaxesConfig::accruableCOFINSExempCodeTaxationIsSet() const
{
    return m_AccruableCOFINSExempCodeTaxationIsSet;
}
void SalesTaxesConfig::unsetAccruableCOFINSExempCodeTaxation()
{
    m_AccruableCOFINSExempCodeTaxationIsSet = false;
}
utility::string_t SalesTaxesConfig::getAccruablePISExempCodeTaxation() const
{
    return m_AccruablePISExempCodeTaxation;
}
void SalesTaxesConfig::setAccruablePISExempCodeTaxation(utility::string_t value)
{
    m_AccruablePISExempCodeTaxation = value;
    m_AccruablePISExempCodeTaxationIsSet = true;
}
bool SalesTaxesConfig::accruablePISExempCodeTaxationIsSet() const
{
    return m_AccruablePISExempCodeTaxationIsSet;
}
void SalesTaxesConfig::unsetAccruablePISExempCodeTaxation()
{
    m_AccruablePISExempCodeTaxationIsSet = false;
}
bool SalesTaxesConfig::getWithholdingCOFINS() const
{
    return m_WithholdingCOFINS;
}
void SalesTaxesConfig::setWithholdingCOFINS(bool value)
{
    m_WithholdingCOFINS = value;
    m_WithholdingCOFINSIsSet = true;
}
bool SalesTaxesConfig::withholdingCOFINSIsSet() const
{
    return m_WithholdingCOFINSIsSet;
}
void SalesTaxesConfig::unsetWithholdingCOFINS()
{
    m_WithholdingCOFINSIsSet = false;
}
bool SalesTaxesConfig::getWithholdingCSLL() const
{
    return m_WithholdingCSLL;
}
void SalesTaxesConfig::setWithholdingCSLL(bool value)
{
    m_WithholdingCSLL = value;
    m_WithholdingCSLLIsSet = true;
}
bool SalesTaxesConfig::withholdingCSLLIsSet() const
{
    return m_WithholdingCSLLIsSet;
}
void SalesTaxesConfig::unsetWithholdingCSLL()
{
    m_WithholdingCSLLIsSet = false;
}
bool SalesTaxesConfig::getWithholdingIRRF() const
{
    return m_WithholdingIRRF;
}
void SalesTaxesConfig::setWithholdingIRRF(bool value)
{
    m_WithholdingIRRF = value;
    m_WithholdingIRRFIsSet = true;
}
bool SalesTaxesConfig::withholdingIRRFIsSet() const
{
    return m_WithholdingIRRFIsSet;
}
void SalesTaxesConfig::unsetWithholdingIRRF()
{
    m_WithholdingIRRFIsSet = false;
}
bool SalesTaxesConfig::getWithholdingPIS() const
{
    return m_WithholdingPIS;
}
void SalesTaxesConfig::setWithholdingPIS(bool value)
{
    m_WithholdingPIS = value;
    m_WithholdingPISIsSet = true;
}
bool SalesTaxesConfig::withholdingPISIsSet() const
{
    return m_WithholdingPISIsSet;
}
void SalesTaxesConfig::unsetWithholdingPIS()
{
    m_WithholdingPISIsSet = false;
}
utility::string_t SalesTaxesConfig::getWithholdIRRFExemptReasonTaxation() const
{
    return m_WithholdIRRFExemptReasonTaxation;
}
void SalesTaxesConfig::setWithholdIRRFExemptReasonTaxation(utility::string_t value)
{
    m_WithholdIRRFExemptReasonTaxation = value;
    m_WithholdIRRFExemptReasonTaxationIsSet = true;
}
bool SalesTaxesConfig::withholdIRRFExemptReasonTaxationIsSet() const
{
    return m_WithholdIRRFExemptReasonTaxationIsSet;
}
void SalesTaxesConfig::unsetWithholdIRRFExemptReasonTaxation()
{
    m_WithholdIRRFExemptReasonTaxationIsSet = false;
}

}
}
}
}

