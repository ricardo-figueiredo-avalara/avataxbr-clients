/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Fuel_pumpNumber.h
 *
 * 
 */

#ifndef Fuel_pumpNumber_H_
#define Fuel_pumpNumber_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Fuel_pumpNumber
    : public ModelBase
{
public:
    Fuel_pumpNumber();
    virtual ~Fuel_pumpNumber();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Fuel_pumpNumber members

    /// <summary>
    /// Identification number of nozzle used in the dispensing process.   Numero de identificação do Bico utilizado no abastecimento 
    /// </summary>
    utility::string_t getNozzleNumberFuelSupply() const;
    void setNozzleNumberFuelSupply(utility::string_t value);
        /// <summary>
    /// Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado 
    /// </summary>
    utility::string_t getFuelPumpNumber() const;
    void setFuelPumpNumber(utility::string_t value);
        /// <summary>
    /// Identification number of the Pump connect to the used nozzle.   Numero de identificação da bomba ao qual o bico está interligado 
    /// </summary>
    utility::string_t getFuelTankNumber() const;
    void setFuelTankNumber(utility::string_t value);
        /// <summary>
    /// Valor do Encerrante no ínicio do abastecimento.  Reading of auto-counter (encerrante) at the start of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$ 
    /// </summary>
    double getStartValueOfPumpNumber() const;
    void setStartValueOfPumpNumber(double value);
        /// <summary>
    /// Valor do Encerrante no final do abastecimento.  Reading of auto-counter (encerrante) at the end of the refueling/dispensing. This decimal 12 integers and 3 decimals - R$ 
    /// </summary>
    double getEndValueOfPumpNumber() const;
    void setEndValueOfPumpNumber(double value);
    
protected:
    utility::string_t m_NozzleNumberFuelSupply;
    utility::string_t m_FuelPumpNumber;
    utility::string_t m_FuelTankNumber;
    double m_StartValueOfPumpNumber;
    double m_EndValueOfPumpNumber;
    };

}
}
}
}

#endif /* Fuel_pumpNumber_H_ */
