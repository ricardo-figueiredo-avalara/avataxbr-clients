/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SalesHeaderOut_payment.h
 *
 * 
 */

#ifndef SalesHeaderOut_payment_H_
#define SalesHeaderOut_payment_H_


#include "ModelBase.h"

#include "InstallmentComplete.h"
#include "WithholdingMode.h"
#include "PaymentTerms.h"
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  SalesHeaderOut_payment
    : public ModelBase
{
public:
    SalesHeaderOut_payment();
    virtual ~SalesHeaderOut_payment();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SalesHeaderOut_payment members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PaymentTerms> getTerms() const;
    void setTerms(std::shared_ptr<PaymentTerms> value);
    bool termsIsSet() const;
    void unsetTerms();
    /// <summary>
    /// To avoid having to verify multiple attributes from a Invoice at the time of funds collection which subject to Tax Withholding, this attribute will allow a referenced Invoice to be quickly checked for withholdings during the cash transaction. This is an SALES.Transaction attribute to be consisted in the Tax Engine that can be used during the receivable process. The values are enumeration where each letter identify if that tax has been withheld PCC,xxx, PCx, PxC ...
    /// </summary>
    std::shared_ptr<WithholdingMode> getWithholdingMode() const;
    void setWithholdingMode(std::shared_ptr<WithholdingMode> value);
    bool withholdingModeIsSet() const;
    void unsetWithholdingMode();
    /// <summary>
    /// installments
    /// </summary>
    std::vector<std::shared_ptr<InstallmentComplete>>& getInstallments();
    bool installmentsIsSet() const;
    void unsetInstallments();

protected:
    std::shared_ptr<PaymentTerms> m_Terms;
    bool m_TermsIsSet;
std::shared_ptr<WithholdingMode> m_WithholdingMode;
    bool m_WithholdingModeIsSet;
std::vector<std::shared_ptr<InstallmentComplete>> m_Installments;
    bool m_InstallmentsIsSet;
};

}
}
}
}

#endif /* SalesHeaderOut_payment_H_ */
