/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Payment_paymentMode.h
 *
 * 
 */

#ifndef Payment_paymentMode_H_
#define Payment_paymentMode_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Payment_paymentMode
    : public ModelBase
{
public:
    Payment_paymentMode();
    virtual ~Payment_paymentMode();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Payment_paymentMode members

    /// <summary>
    /// Payment mode - &#39;01&#39; # Dinheiro - &#39;02&#39; # Cheque - &#39;03&#39; # Cartão de Crédito - &#39;04&#39; # Cartão de Débito - &#39;05&#39; # Crédito Loja - &#39;10&#39; # Vale Alimentação - &#39;11&#39; # Vale Refeição - &#39;12&#39; # Vale Presente - &#39;13&#39; # Vale Combustível - &#39;99&#39; # Outros 
    /// </summary>
    utility::string_t getMode() const;
    void setMode(utility::string_t value);
        /// <summary>
    /// payment value
    /// </summary>
    double getValue() const;
    void setValue(double value);
        /// <summary>
    /// - &#39;1&#39; # Payment integrated with system, - &#39;2&#39; # Payment not integrated with system 
    /// </summary>
    utility::string_t getCardTpIntegration() const;
    void setCardTpIntegration(utility::string_t value);
    bool cardTpIntegrationIsSet() const;
    void unsetCardTpIntegration();
    /// <summary>
    /// Federal tax id of accrediting card (credenciadora do cartão)
    /// </summary>
    utility::string_t getCardCNPJ() const;
    void setCardCNPJ(utility::string_t value);
    bool cardCNPJIsSet() const;
    void unsetCardCNPJ();
    /// <summary>
    /// card brand - &#39;01&#39; # Visa - &#39;02&#39; # Mastercard - &#39;03&#39; # American Express - &#39;04&#39; # Sorocred - &#39;99&#39; # Other 
    /// </summary>
    utility::string_t getCardBrand() const;
    void setCardBrand(utility::string_t value);
    bool cardBrandIsSet() const;
    void unsetCardBrand();
    /// <summary>
    /// transaction authorization number
    /// </summary>
    utility::string_t getCardAuthorization() const;
    void setCardAuthorization(utility::string_t value);
    bool cardAuthorizationIsSet() const;
    void unsetCardAuthorization();

protected:
    utility::string_t m_Mode;
    double m_Value;
    utility::string_t m_CardTpIntegration;
    bool m_CardTpIntegrationIsSet;
utility::string_t m_CardCNPJ;
    bool m_CardCNPJIsSet;
utility::string_t m_CardBrand;
    bool m_CardBrandIsSet;
utility::string_t m_CardAuthorization;
    bool m_CardAuthorizationIsSet;
};

}
}
}
}

#endif /* Payment_paymentMode_H_ */
