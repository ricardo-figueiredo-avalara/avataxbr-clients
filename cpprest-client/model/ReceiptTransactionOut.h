/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ReceiptTransactionOut.h
 *
 * 
 */

#ifndef ReceiptTransactionOut_H_
#define ReceiptTransactionOut_H_


#include "ModelBase.h"

#include "PayRecCalculatedTaxSummaryForService.h"
#include "PayRecHeader.h"
#include "PayRecLinesOut.h"
#include <vector>
#include "ProcessingInfo.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ReceiptTransactionOut
    : public ModelBase
{
public:
    ReceiptTransactionOut();
    virtual ~ReceiptTransactionOut();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ReceiptTransactionOut members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PayRecHeader> getHeader() const;
    void setHeader(std::shared_ptr<PayRecHeader> value);
        /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<PayRecLinesOut>>& getLines();
        /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PayRecCalculatedTaxSummaryForService> getCalculatedTaxSummary() const;
    void setCalculatedTaxSummary(std::shared_ptr<PayRecCalculatedTaxSummaryForService> value);
        /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ProcessingInfo> getProcessingInfo() const;
    void setProcessingInfo(std::shared_ptr<ProcessingInfo> value);
    
protected:
    std::shared_ptr<PayRecHeader> m_Header;
    std::vector<std::shared_ptr<PayRecLinesOut>> m_Lines;
    std::shared_ptr<PayRecCalculatedTaxSummaryForService> m_CalculatedTaxSummary;
    std::shared_ptr<ProcessingInfo> m_ProcessingInfo;
    };

}
}
}
}

#endif /* ReceiptTransactionOut_H_ */
