/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Company.h
 *
 * 
 */

#ifndef Company_H_
#define Company_H_


#include "ModelBase.h"

#include "Company_configuration.h"
#include "Company_mailServer.h"
#include "EntityType.h"
#include "FederalTaxRegime.h"
#include <cpprest/details/basic_types.h>
#include "Company_authorizedToDownloadNFe.h"
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Company
    : public ModelBase
{
public:
    Company();
    virtual ~Company();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Company members

    /// <summary>
    /// string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company
    /// </summary>
    utility::string_t getCode() const;
    void setCode(utility::string_t value);
        /// <summary>
    /// Official Company name (Razão Social)
    /// </summary>
    utility::string_t getOfficialName() const;
    void setOfficialName(utility::string_t value);
        /// <summary>
    /// Company name (DBA - Nome de Fantasia),  Used to identify branches/subsidiaries with same name
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityType> getEntityType() const;
    void setEntityType(std::shared_ptr<EntityType> value);
        /// <summary>
    /// Company has participation of state-owned capital (it will be considerated like a government entity)
    /// </summary>
    bool getSubjectToSRF1234() const;
    void setSubjectToSRF1234(bool value);
    bool subjectToSRF1234IsSet() const;
    void unsetSubjectToSRF1234();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FederalTaxRegime> getFederalTaxRegime() const;
    void setFederalTaxRegime(std::shared_ptr<FederalTaxRegime> value);
        /// <summary>
    /// this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn&#39;t mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 
    /// </summary>
    utility::string_t getPisSubjectTo() const;
    void setPisSubjectTo(utility::string_t value);
    bool pisSubjectToIsSet() const;
    void unsetPisSubjectTo();
    /// <summary>
    /// this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn&#39;t mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 
    /// </summary>
    utility::string_t getCofinsSubjectTo() const;
    void setCofinsSubjectTo(utility::string_t value);
    bool cofinsSubjectToIsSet() const;
    void unsetCofinsSubjectTo();
    /// <summary>
    /// this flag informs if this company is subject to this tax the default value for this property is TAXABLE, when set to TAXABLE it doesn&#39;t mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions when set to NOT TAXABLE or EXEMPT, the system will not analise other rules. 
    /// </summary>
    utility::string_t getCsllSubjectTo() const;
    void setCsllSubjectTo(utility::string_t value);
    bool csllSubjectToIsSet() const;
    void unsetCsllSubjectTo();
    /// <summary>
    /// When th company is REAL PROFIT usually it operates under a Non-Cumulative PIS/COFINS regime But exist some services that are always Cumulative regime. If the company has all receipts from Non-Cumulative services this flag will be set to True. This flag informs special conditions to credit of PIS/COFINS when this company is out of Free zone and  purchases from Free Zone Company Quando uma empresa fora da Zona Franca adquire uma produto ou serviço de uma empresa situada na Zona Franca de Manaus, o crédito de PIS E COFINS segue estas aliquotas diferenciadas. Fundamentação, art. 5º da Instrução Normativa SRF nº 546/2005; art. 3º, § 12 da Lei nº 10.637/2002; art. 3º, § 17 da Lei nº 10.833/2003; art. 4º da Lei nº 11.307/2006. DESTINATÁRIO ALÍQUOTAS PIS COFINS a) Venda efetuada a pessoa jurídica estabelecida fora da Zona Franca de Manaus, que apure a Contribuição para o PIS/PASEP no regime de não-cumulatividade débito 0,65% 3% crédito 1% 4,6% c) Venda efetuada a pessoa jurídica estabelecida fora da Zona Franca de Manaus, que apure o imposto de renda com base no lucro real e que tenha sua receita, total ou parcialmente, excluída do regime de incidência não-cumulativa da Contribuição para o PIS/PASEP débito 1,3% 6% crédito 1,65% 7,6% 
    /// </summary>
    bool getReceiptsAreFullNoCumulativePisCofins() const;
    void setReceiptsAreFullNoCumulativePisCofins(bool value);
    bool receiptsAreFullNoCumulativePisCofinsIsSet() const;
    void unsetReceiptsAreFullNoCumulativePisCofins();
    /// <summary>
    /// On purchase transaction, to force withholding INSS this Flag can be set to True
    /// </summary>
    bool getInssWithholdSubjectTo() const;
    void setInssWithholdSubjectTo(bool value);
    bool inssWithholdSubjectToIsSet() const;
    void unsetInssWithholdSubjectTo();
    /// <summary>
    /// On purchase transaction, to force withhold ISS this Flag can be set to True
    /// </summary>
    bool getIssWithholdSubjectTo() const;
    void setIssWithholdSubjectTo(bool value);
    bool issWithholdSubjectToIsSet() const;
    void unsetIssWithholdSubjectTo();
    /// <summary>
    /// On purchase transaction, if this flag is FALSE, the system will not withhold IRRF. if this flag is TRUE the system will analise other rules to define if will have witholding 
    /// </summary>
    bool getIrrfWithholdSubjectTo() const;
    void setIrrfWithholdSubjectTo(bool value);
    bool irrfWithholdSubjectToIsSet() const;
    void unsetIrrfWithholdSubjectTo();
    /// <summary>
    /// Actual ICMS Rate for this company (if the company is Tax Regime Simplified). Aliquota de ICMS da companhia caso Optante do Simples 
    /// </summary>
    double getIcmsRateForSimplestaxregime() const;
    void setIcmsRateForSimplestaxregime(double value);
    bool icmsRateForSimplestaxregimeIsSet() const;
    void unsetIcmsRateForSimplestaxregime();
    /// <summary>
    /// ICMS Exempt when Tax Regime is Simplified because total gross revenue is bellow amount defined by state (see PARANÁ State) Isenção do ICMS no Simples Nacional para faixa de receita bruta 
    /// </summary>
    bool getIsExemptByGrossRevenueForSimplestaxregime() const;
    void setIsExemptByGrossRevenueForSimplestaxregime(bool value);
    bool isExemptByGrossRevenueForSimplestaxregimeIsSet() const;
    void unsetIsExemptByGrossRevenueForSimplestaxregime();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Company_configuration> getConfiguration() const;
    void setConfiguration(std::shared_ptr<Company_configuration> value);
    bool configurationIsSet() const;
    void unsetConfiguration();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Company_mailServer> getMailServer() const;
    void setMailServer(std::shared_ptr<Company_mailServer> value);
    bool mailServerIsSet() const;
    void unsetMailServer();
    /// <summary>
    /// Person or company authorized to downloadNFe
    /// </summary>
    std::vector<std::shared_ptr<Company_authorizedToDownloadNFe>>& getAuthorizedToDownloadNFe();
    bool authorizedToDownloadNFeIsSet() const;
    void unsetAuthorizedToDownloadNFe();

protected:
    utility::string_t m_Code;
    utility::string_t m_OfficialName;
    utility::string_t m_Name;
    std::shared_ptr<EntityType> m_EntityType;
    bool m_SubjectToSRF1234;
    bool m_SubjectToSRF1234IsSet;
std::shared_ptr<FederalTaxRegime> m_FederalTaxRegime;
    utility::string_t m_PisSubjectTo;
    bool m_PisSubjectToIsSet;
utility::string_t m_CofinsSubjectTo;
    bool m_CofinsSubjectToIsSet;
utility::string_t m_CsllSubjectTo;
    bool m_CsllSubjectToIsSet;
bool m_ReceiptsAreFullNoCumulativePisCofins;
    bool m_ReceiptsAreFullNoCumulativePisCofinsIsSet;
bool m_InssWithholdSubjectTo;
    bool m_InssWithholdSubjectToIsSet;
bool m_IssWithholdSubjectTo;
    bool m_IssWithholdSubjectToIsSet;
bool m_IrrfWithholdSubjectTo;
    bool m_IrrfWithholdSubjectToIsSet;
double m_IcmsRateForSimplestaxregime;
    bool m_IcmsRateForSimplestaxregimeIsSet;
bool m_IsExemptByGrossRevenueForSimplestaxregime;
    bool m_IsExemptByGrossRevenueForSimplestaxregimeIsSet;
std::shared_ptr<Company_configuration> m_Configuration;
    bool m_ConfigurationIsSet;
std::shared_ptr<Company_mailServer> m_MailServer;
    bool m_MailServerIsSet;
std::vector<std::shared_ptr<Company_authorizedToDownloadNFe>> m_AuthorizedToDownloadNFe;
    bool m_AuthorizedToDownloadNFeIsSet;
};

}
}
}
}

#endif /* Company_H_ */
