/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IcmsConfByState_icmsSTConf.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

IcmsConfByState_icmsSTConf::IcmsConfByState_icmsSTConf()
{
    m_HasReductionOfMVAForSimples = false;
    m_HasReductionOfMVAForSimplesIsSet = false;
    m_ReductionOfMVAForSimples = 0.0;
    m_ReductionOfMVAForSimplesIsSet = false;
    m_CalcMode = U("");
    m_CalcModeIsSet = false;
    m_MvaRate = 0.0;
    m_MvaRateIsSet = false;
    m_IcmsStBaseDiscount = 0.0;
    m_IcmsStBaseDiscountIsSet = false;
    m_Srp = 0.0;
    m_SrpIsSet = false;
    m_SrpUnit = U("");
    m_SrpUnitIsSet = false;
    
}

IcmsConfByState_icmsSTConf::~IcmsConfByState_icmsSTConf()
{
}

void IcmsConfByState_icmsSTConf::validate()
{
    // TODO: implement validation
}

web::json::value IcmsConfByState_icmsSTConf::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_HasReductionOfMVAForSimplesIsSet)
    {
        val[U("hasReductionOfMVAForSimples")] = ModelBase::toJson(m_HasReductionOfMVAForSimples);
    }
    if(m_ReductionOfMVAForSimplesIsSet)
    {
        val[U("reductionOfMVAForSimples")] = ModelBase::toJson(m_ReductionOfMVAForSimples);
    }
    if(m_CalcModeIsSet)
    {
        val[U("calcMode")] = ModelBase::toJson(m_CalcMode);
    }
    if(m_MvaRateIsSet)
    {
        val[U("mvaRate")] = ModelBase::toJson(m_MvaRate);
    }
    if(m_IcmsStBaseDiscountIsSet)
    {
        val[U("icmsStBaseDiscount")] = ModelBase::toJson(m_IcmsStBaseDiscount);
    }
    if(m_SrpIsSet)
    {
        val[U("srp")] = ModelBase::toJson(m_Srp);
    }
    if(m_SrpUnitIsSet)
    {
        val[U("srpUnit")] = ModelBase::toJson(m_SrpUnit);
    }
    

    return val;
}

void IcmsConfByState_icmsSTConf::fromJson(web::json::value& val)
{
    if(val.has_field(U("hasReductionOfMVAForSimples")))
    {
        setHasReductionOfMVAForSimples(ModelBase::boolFromJson(val[U("hasReductionOfMVAForSimples")]));
    }
    if(val.has_field(U("reductionOfMVAForSimples")))
    {
        setReductionOfMVAForSimples(ModelBase::doubleFromJson(val[U("reductionOfMVAForSimples")]));
    }
    if(val.has_field(U("calcMode")))
    {
        setCalcMode(ModelBase::stringFromJson(val[U("calcMode")]));
        
    }
    if(val.has_field(U("mvaRate")))
    {
        setMvaRate(ModelBase::doubleFromJson(val[U("mvaRate")]));
    }
    if(val.has_field(U("icmsStBaseDiscount")))
    {
        setIcmsStBaseDiscount(ModelBase::doubleFromJson(val[U("icmsStBaseDiscount")]));
    }
    if(val.has_field(U("srp")))
    {
        setSrp(ModelBase::doubleFromJson(val[U("srp")]));
    }
    if(val.has_field(U("srpUnit")))
    {
        setSrpUnit(ModelBase::stringFromJson(val[U("srpUnit")]));
        
    }
    
}

void IcmsConfByState_icmsSTConf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_HasReductionOfMVAForSimplesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("hasReductionOfMVAForSimples"), m_HasReductionOfMVAForSimples));
    }
    if(m_ReductionOfMVAForSimplesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("reductionOfMVAForSimples"), m_ReductionOfMVAForSimples));
    }
    if(m_CalcModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("calcMode"), m_CalcMode));
        
    }
    if(m_MvaRateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("mvaRate"), m_MvaRate));
    }
    if(m_IcmsStBaseDiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("icmsStBaseDiscount"), m_IcmsStBaseDiscount));
    }
    if(m_SrpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("srp"), m_Srp));
    }
    if(m_SrpUnitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("srpUnit"), m_SrpUnit));
        
    }
    
}

void IcmsConfByState_icmsSTConf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("hasReductionOfMVAForSimples")))
    {
        setHasReductionOfMVAForSimples(ModelBase::boolFromHttpContent(multipart->getContent(U("hasReductionOfMVAForSimples"))));
    }
    if(multipart->hasContent(U("reductionOfMVAForSimples")))
    {
        setReductionOfMVAForSimples(ModelBase::doubleFromHttpContent(multipart->getContent(U("reductionOfMVAForSimples"))));
    }
    if(multipart->hasContent(U("calcMode")))
    {
        setCalcMode(ModelBase::stringFromHttpContent(multipart->getContent(U("calcMode"))));
        
    }
    if(multipart->hasContent(U("mvaRate")))
    {
        setMvaRate(ModelBase::doubleFromHttpContent(multipart->getContent(U("mvaRate"))));
    }
    if(multipart->hasContent(U("icmsStBaseDiscount")))
    {
        setIcmsStBaseDiscount(ModelBase::doubleFromHttpContent(multipart->getContent(U("icmsStBaseDiscount"))));
    }
    if(multipart->hasContent(U("srp")))
    {
        setSrp(ModelBase::doubleFromHttpContent(multipart->getContent(U("srp"))));
    }
    if(multipart->hasContent(U("srpUnit")))
    {
        setSrpUnit(ModelBase::stringFromHttpContent(multipart->getContent(U("srpUnit"))));
        
    }
    
}


bool IcmsConfByState_icmsSTConf::getHasReductionOfMVAForSimples() const
{
    return m_HasReductionOfMVAForSimples;
}
void IcmsConfByState_icmsSTConf::setHasReductionOfMVAForSimples(bool value)
{
    m_HasReductionOfMVAForSimples = value;
    m_HasReductionOfMVAForSimplesIsSet = true;
}
bool IcmsConfByState_icmsSTConf::hasReductionOfMVAForSimplesIsSet() const
{
    return m_HasReductionOfMVAForSimplesIsSet;
}
void IcmsConfByState_icmsSTConf::unsetHasReductionOfMVAForSimples()
{
    m_HasReductionOfMVAForSimplesIsSet = false;
}
double IcmsConfByState_icmsSTConf::getReductionOfMVAForSimples() const
{
    return m_ReductionOfMVAForSimples;
}
void IcmsConfByState_icmsSTConf::setReductionOfMVAForSimples(double value)
{
    m_ReductionOfMVAForSimples = value;
    m_ReductionOfMVAForSimplesIsSet = true;
}
bool IcmsConfByState_icmsSTConf::reductionOfMVAForSimplesIsSet() const
{
    return m_ReductionOfMVAForSimplesIsSet;
}
void IcmsConfByState_icmsSTConf::unsetReductionOfMVAForSimples()
{
    m_ReductionOfMVAForSimplesIsSet = false;
}
utility::string_t IcmsConfByState_icmsSTConf::getCalcMode() const
{
    return m_CalcMode;
}
void IcmsConfByState_icmsSTConf::setCalcMode(utility::string_t value)
{
    m_CalcMode = value;
    m_CalcModeIsSet = true;
}
bool IcmsConfByState_icmsSTConf::calcModeIsSet() const
{
    return m_CalcModeIsSet;
}
void IcmsConfByState_icmsSTConf::unsetCalcMode()
{
    m_CalcModeIsSet = false;
}
double IcmsConfByState_icmsSTConf::getMvaRate() const
{
    return m_MvaRate;
}
void IcmsConfByState_icmsSTConf::setMvaRate(double value)
{
    m_MvaRate = value;
    m_MvaRateIsSet = true;
}
bool IcmsConfByState_icmsSTConf::mvaRateIsSet() const
{
    return m_MvaRateIsSet;
}
void IcmsConfByState_icmsSTConf::unsetMvaRate()
{
    m_MvaRateIsSet = false;
}
double IcmsConfByState_icmsSTConf::getIcmsStBaseDiscount() const
{
    return m_IcmsStBaseDiscount;
}
void IcmsConfByState_icmsSTConf::setIcmsStBaseDiscount(double value)
{
    m_IcmsStBaseDiscount = value;
    m_IcmsStBaseDiscountIsSet = true;
}
bool IcmsConfByState_icmsSTConf::icmsStBaseDiscountIsSet() const
{
    return m_IcmsStBaseDiscountIsSet;
}
void IcmsConfByState_icmsSTConf::unsetIcmsStBaseDiscount()
{
    m_IcmsStBaseDiscountIsSet = false;
}
double IcmsConfByState_icmsSTConf::getSrp() const
{
    return m_Srp;
}
void IcmsConfByState_icmsSTConf::setSrp(double value)
{
    m_Srp = value;
    m_SrpIsSet = true;
}
bool IcmsConfByState_icmsSTConf::srpIsSet() const
{
    return m_SrpIsSet;
}
void IcmsConfByState_icmsSTConf::unsetSrp()
{
    m_SrpIsSet = false;
}
utility::string_t IcmsConfByState_icmsSTConf::getSrpUnit() const
{
    return m_SrpUnit;
}
void IcmsConfByState_icmsSTConf::setSrpUnit(utility::string_t value)
{
    m_SrpUnit = value;
    m_SrpUnitIsSet = true;
}
bool IcmsConfByState_icmsSTConf::srpUnitIsSet() const
{
    return m_SrpUnitIsSet;
}
void IcmsConfByState_icmsSTConf::unsetSrpUnit()
{
    m_SrpUnitIsSet = false;
}

}
}
}
}

