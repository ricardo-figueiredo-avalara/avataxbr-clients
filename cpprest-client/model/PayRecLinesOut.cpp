/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PayRecLinesOut.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PayRecLinesOut::PayRecLinesOut()
{
    m_LineCode = 0;
    m_LineCodeIsSet = false;
    m_LineType = U("");
    m_LineTypeIsSet = false;
    m_ItemCode = U("");
    m_ItemDescription = U("");
    m_ItemDescriptionIsSet = false;
    m_ItemDocNumber = U("");
    m_ItemDocNumberIsSet = false;
    m_LineUntaxedPenality = 0.0;
    m_LineUntaxedPenalityIsSet = false;
    m_LineUntaxedDiscount = 0.0;
    m_LineUntaxedDiscountIsSet = false;
    m_LineAmount = 0.0;
    m_LineAmountIsSet = false;
    m_LineNetValue = 0.0;
    m_LineNetValueIsSet = false;
    m_WithholdingModeIsSet = false;
    m_CalculatedTaxIsSet = false;
    
}

PayRecLinesOut::~PayRecLinesOut()
{
}

void PayRecLinesOut::validate()
{
    // TODO: implement validation
}

web::json::value PayRecLinesOut::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_LineCodeIsSet)
    {
        val[U("lineCode")] = ModelBase::toJson(m_LineCode);
    }
    if(m_LineTypeIsSet)
    {
        val[U("lineType")] = ModelBase::toJson(m_LineType);
    }
    val[U("itemCode")] = ModelBase::toJson(m_ItemCode);
    if(m_ItemDescriptionIsSet)
    {
        val[U("itemDescription")] = ModelBase::toJson(m_ItemDescription);
    }
    if(m_ItemDocNumberIsSet)
    {
        val[U("itemDocNumber")] = ModelBase::toJson(m_ItemDocNumber);
    }
    if(m_LineUntaxedPenalityIsSet)
    {
        val[U("lineUntaxedPenality")] = ModelBase::toJson(m_LineUntaxedPenality);
    }
    if(m_LineUntaxedDiscountIsSet)
    {
        val[U("lineUntaxedDiscount")] = ModelBase::toJson(m_LineUntaxedDiscount);
    }
    if(m_LineAmountIsSet)
    {
        val[U("lineAmount")] = ModelBase::toJson(m_LineAmount);
    }
    if(m_LineNetValueIsSet)
    {
        val[U("lineNetValue")] = ModelBase::toJson(m_LineNetValue);
    }
    if(m_WithholdingModeIsSet)
    {
        val[U("withholdingMode")] = ModelBase::toJson(m_WithholdingMode);
    }
    if(m_CalculatedTaxIsSet)
    {
        val[U("calculatedTax")] = ModelBase::toJson(m_CalculatedTax);
    }
    

    return val;
}

void PayRecLinesOut::fromJson(web::json::value& val)
{
    if(val.has_field(U("lineCode")))
    {
        setLineCode(ModelBase::int32_tFromJson(val[U("lineCode")]));
    }
    if(val.has_field(U("lineType")))
    {
        setLineType(ModelBase::stringFromJson(val[U("lineType")]));
        
    }
    setItemCode(ModelBase::stringFromJson(val[U("itemCode")]));
    if(val.has_field(U("itemDescription")))
    {
        setItemDescription(ModelBase::stringFromJson(val[U("itemDescription")]));
        
    }
    if(val.has_field(U("itemDocNumber")))
    {
        setItemDocNumber(ModelBase::stringFromJson(val[U("itemDocNumber")]));
        
    }
    if(val.has_field(U("lineUntaxedPenality")))
    {
        setLineUntaxedPenality(ModelBase::doubleFromJson(val[U("lineUntaxedPenality")]));
    }
    if(val.has_field(U("lineUntaxedDiscount")))
    {
        setLineUntaxedDiscount(ModelBase::doubleFromJson(val[U("lineUntaxedDiscount")]));
    }
    if(val.has_field(U("lineAmount")))
    {
        setLineAmount(ModelBase::doubleFromJson(val[U("lineAmount")]));
    }
    if(val.has_field(U("lineNetValue")))
    {
        setLineNetValue(ModelBase::doubleFromJson(val[U("lineNetValue")]));
    }
    if(val.has_field(U("withholdingMode")))
    {
        if(!val[U("withholdingMode")].is_null())
        {
            std::shared_ptr<WithholdingMode> newItem(new WithholdingMode());
            newItem->fromJson(val[U("withholdingMode")]);
            setWithholdingMode( newItem );
        }
        
    }
    if(val.has_field(U("calculatedTax")))
    {
        if(!val[U("calculatedTax")].is_null())
        {
            std::shared_ptr<PaymentCalculatedTax> newItem(new PaymentCalculatedTax());
            newItem->fromJson(val[U("calculatedTax")]);
            setCalculatedTax( newItem );
        }
        
    }
    
}

void PayRecLinesOut::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_LineCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lineCode"), m_LineCode));
    }
    if(m_LineTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lineType"), m_LineType));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("itemCode"), m_ItemCode));
    if(m_ItemDescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("itemDescription"), m_ItemDescription));
        
    }
    if(m_ItemDocNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("itemDocNumber"), m_ItemDocNumber));
        
    }
    if(m_LineUntaxedPenalityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lineUntaxedPenality"), m_LineUntaxedPenality));
    }
    if(m_LineUntaxedDiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lineUntaxedDiscount"), m_LineUntaxedDiscount));
    }
    if(m_LineAmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lineAmount"), m_LineAmount));
    }
    if(m_LineNetValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lineNetValue"), m_LineNetValue));
    }
    if(m_WithholdingModeIsSet)
    {
        if (m_WithholdingMode.get())
        {
            m_WithholdingMode->toMultipart(multipart, U("withholdingMode."));
        }
        
    }
    if(m_CalculatedTaxIsSet)
    {
        if (m_CalculatedTax.get())
        {
            m_CalculatedTax->toMultipart(multipart, U("calculatedTax."));
        }
        
    }
    
}

void PayRecLinesOut::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("lineCode")))
    {
        setLineCode(ModelBase::int32_tFromHttpContent(multipart->getContent(U("lineCode"))));
    }
    if(multipart->hasContent(U("lineType")))
    {
        setLineType(ModelBase::stringFromHttpContent(multipart->getContent(U("lineType"))));
        
    }
    setItemCode(ModelBase::stringFromHttpContent(multipart->getContent(U("itemCode"))));
    if(multipart->hasContent(U("itemDescription")))
    {
        setItemDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("itemDescription"))));
        
    }
    if(multipart->hasContent(U("itemDocNumber")))
    {
        setItemDocNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("itemDocNumber"))));
        
    }
    if(multipart->hasContent(U("lineUntaxedPenality")))
    {
        setLineUntaxedPenality(ModelBase::doubleFromHttpContent(multipart->getContent(U("lineUntaxedPenality"))));
    }
    if(multipart->hasContent(U("lineUntaxedDiscount")))
    {
        setLineUntaxedDiscount(ModelBase::doubleFromHttpContent(multipart->getContent(U("lineUntaxedDiscount"))));
    }
    if(multipart->hasContent(U("lineAmount")))
    {
        setLineAmount(ModelBase::doubleFromHttpContent(multipart->getContent(U("lineAmount"))));
    }
    if(multipart->hasContent(U("lineNetValue")))
    {
        setLineNetValue(ModelBase::doubleFromHttpContent(multipart->getContent(U("lineNetValue"))));
    }
    if(multipart->hasContent(U("withholdingMode")))
    {
        if(multipart->hasContent(U("withholdingMode")))
        {
            std::shared_ptr<WithholdingMode> newItem(new WithholdingMode());
            newItem->fromMultiPart(multipart, U("withholdingMode."));
            setWithholdingMode( newItem );
        }
        
    }
    if(multipart->hasContent(U("calculatedTax")))
    {
        if(multipart->hasContent(U("calculatedTax")))
        {
            std::shared_ptr<PaymentCalculatedTax> newItem(new PaymentCalculatedTax());
            newItem->fromMultiPart(multipart, U("calculatedTax."));
            setCalculatedTax( newItem );
        }
        
    }
    
}


int32_t PayRecLinesOut::getLineCode() const
{
    return m_LineCode;
}
void PayRecLinesOut::setLineCode(int32_t value)
{
    m_LineCode = value;
    m_LineCodeIsSet = true;
}
bool PayRecLinesOut::lineCodeIsSet() const
{
    return m_LineCodeIsSet;
}
void PayRecLinesOut::unsetLineCode()
{
    m_LineCodeIsSet = false;
}
utility::string_t PayRecLinesOut::getLineType() const
{
    return m_LineType;
}
void PayRecLinesOut::setLineType(utility::string_t value)
{
    m_LineType = value;
    m_LineTypeIsSet = true;
}
bool PayRecLinesOut::lineTypeIsSet() const
{
    return m_LineTypeIsSet;
}
void PayRecLinesOut::unsetLineType()
{
    m_LineTypeIsSet = false;
}
utility::string_t PayRecLinesOut::getItemCode() const
{
    return m_ItemCode;
}
void PayRecLinesOut::setItemCode(utility::string_t value)
{
    m_ItemCode = value;
    
}
utility::string_t PayRecLinesOut::getItemDescription() const
{
    return m_ItemDescription;
}
void PayRecLinesOut::setItemDescription(utility::string_t value)
{
    m_ItemDescription = value;
    m_ItemDescriptionIsSet = true;
}
bool PayRecLinesOut::itemDescriptionIsSet() const
{
    return m_ItemDescriptionIsSet;
}
void PayRecLinesOut::unsetItemDescription()
{
    m_ItemDescriptionIsSet = false;
}
utility::string_t PayRecLinesOut::getItemDocNumber() const
{
    return m_ItemDocNumber;
}
void PayRecLinesOut::setItemDocNumber(utility::string_t value)
{
    m_ItemDocNumber = value;
    m_ItemDocNumberIsSet = true;
}
bool PayRecLinesOut::itemDocNumberIsSet() const
{
    return m_ItemDocNumberIsSet;
}
void PayRecLinesOut::unsetItemDocNumber()
{
    m_ItemDocNumberIsSet = false;
}
double PayRecLinesOut::getLineUntaxedPenality() const
{
    return m_LineUntaxedPenality;
}
void PayRecLinesOut::setLineUntaxedPenality(double value)
{
    m_LineUntaxedPenality = value;
    m_LineUntaxedPenalityIsSet = true;
}
bool PayRecLinesOut::lineUntaxedPenalityIsSet() const
{
    return m_LineUntaxedPenalityIsSet;
}
void PayRecLinesOut::unsetLineUntaxedPenality()
{
    m_LineUntaxedPenalityIsSet = false;
}
double PayRecLinesOut::getLineUntaxedDiscount() const
{
    return m_LineUntaxedDiscount;
}
void PayRecLinesOut::setLineUntaxedDiscount(double value)
{
    m_LineUntaxedDiscount = value;
    m_LineUntaxedDiscountIsSet = true;
}
bool PayRecLinesOut::lineUntaxedDiscountIsSet() const
{
    return m_LineUntaxedDiscountIsSet;
}
void PayRecLinesOut::unsetLineUntaxedDiscount()
{
    m_LineUntaxedDiscountIsSet = false;
}
double PayRecLinesOut::getLineAmount() const
{
    return m_LineAmount;
}
void PayRecLinesOut::setLineAmount(double value)
{
    m_LineAmount = value;
    m_LineAmountIsSet = true;
}
bool PayRecLinesOut::lineAmountIsSet() const
{
    return m_LineAmountIsSet;
}
void PayRecLinesOut::unsetLineAmount()
{
    m_LineAmountIsSet = false;
}
double PayRecLinesOut::getLineNetValue() const
{
    return m_LineNetValue;
}
void PayRecLinesOut::setLineNetValue(double value)
{
    m_LineNetValue = value;
    m_LineNetValueIsSet = true;
}
bool PayRecLinesOut::lineNetValueIsSet() const
{
    return m_LineNetValueIsSet;
}
void PayRecLinesOut::unsetLineNetValue()
{
    m_LineNetValueIsSet = false;
}
std::shared_ptr<WithholdingMode> PayRecLinesOut::getWithholdingMode() const
{
    return m_WithholdingMode;
}
void PayRecLinesOut::setWithholdingMode(std::shared_ptr<WithholdingMode> value)
{
    m_WithholdingMode = value;
    m_WithholdingModeIsSet = true;
}
bool PayRecLinesOut::withholdingModeIsSet() const
{
    return m_WithholdingModeIsSet;
}
void PayRecLinesOut::unsetWithholdingMode()
{
    m_WithholdingModeIsSet = false;
}
std::shared_ptr<PaymentCalculatedTax> PayRecLinesOut::getCalculatedTax() const
{
    return m_CalculatedTax;
}
void PayRecLinesOut::setCalculatedTax(std::shared_ptr<PaymentCalculatedTax> value)
{
    m_CalculatedTax = value;
    m_CalculatedTaxIsSet = true;
}
bool PayRecLinesOut::calculatedTaxIsSet() const
{
    return m_CalculatedTaxIsSet;
}
void PayRecLinesOut::unsetCalculatedTax()
{
    m_CalculatedTaxIsSet = false;
}

}
}
}
}

