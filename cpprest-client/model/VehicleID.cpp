/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "VehicleID.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

VehicleID::VehicleID()
{
    m_LicensePlate = U("");
    m_Rtnc = U("");
    m_RtncIsSet = false;
    
}

VehicleID::~VehicleID()
{
}

void VehicleID::validate()
{
    // TODO: implement validation
}

web::json::value VehicleID::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("licensePlate")] = ModelBase::toJson(m_LicensePlate);
    val[U("stateCode")] = ModelBase::toJson(m_StateCode);
    if(m_RtncIsSet)
    {
        val[U("rtnc")] = ModelBase::toJson(m_Rtnc);
    }
    

    return val;
}

void VehicleID::fromJson(web::json::value& val)
{
    setLicensePlate(ModelBase::stringFromJson(val[U("licensePlate")]));
    std::shared_ptr<StateEnum> newStateCode(new StateEnum());
    newStateCode->fromJson(val[U("stateCode")]);
    setStateCode( newItem );
    if(val.has_field(U("rtnc")))
    {
        setRtnc(ModelBase::stringFromJson(val[U("rtnc")]));
        
    }
    
}

void VehicleID::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("licensePlate"), m_LicensePlate));
    m_StateCode->toMultipart(multipart, U("stateCode."));
    if(m_RtncIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("rtnc"), m_Rtnc));
        
    }
    
}

void VehicleID::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setLicensePlate(ModelBase::stringFromHttpContent(multipart->getContent(U("licensePlate"))));
    std::shared_ptr<StateEnum> newStateCode(new StateEnum());
    newStateCode->fromMultiPart(multipart, U("stateCode."));
    setStateCode( newStateCode );
    if(multipart->hasContent(U("rtnc")))
    {
        setRtnc(ModelBase::stringFromHttpContent(multipart->getContent(U("rtnc"))));
        
    }
    
}


utility::string_t VehicleID::getLicensePlate() const
{
    return m_LicensePlate;
}
void VehicleID::setLicensePlate(utility::string_t value)
{
    m_LicensePlate = value;
    
}
std::shared_ptr<StateEnum> VehicleID::getStateCode() const
{
    return m_StateCode;
}
void VehicleID::setStateCode(std::shared_ptr<StateEnum> value)
{
    m_StateCode = value;
    
}
utility::string_t VehicleID::getRtnc() const
{
    return m_Rtnc;
}
void VehicleID::setRtnc(utility::string_t value)
{
    m_Rtnc = value;
    m_RtncIsSet = true;
}
bool VehicleID::rtncIsSet() const
{
    return m_RtncIsSet;
}
void VehicleID::unsetRtnc()
{
    m_RtncIsSet = false;
}

}
}
}
}

