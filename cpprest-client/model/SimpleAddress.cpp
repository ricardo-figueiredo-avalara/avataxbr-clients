/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SimpleAddress.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SimpleAddress::SimpleAddress()
{
    m_Line1 = U("");
    m_Line2 = U("");
    m_Line3 = U("");
    m_City = U("");
    m_CityIsSet = false;
    m_Zipcode = U("");
    m_StateIsSet = false;
    m_Country = U("");
    
}

SimpleAddress::~SimpleAddress()
{
}

void SimpleAddress::validate()
{
    // TODO: implement validation
}

web::json::value SimpleAddress::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("line1")] = ModelBase::toJson(m_Line1);
    val[U("line2")] = ModelBase::toJson(m_Line2);
    val[U("line3")] = ModelBase::toJson(m_Line3);
    if(m_CityIsSet)
    {
        val[U("city")] = ModelBase::toJson(m_City);
    }
    val[U("zipcode")] = ModelBase::toJson(m_Zipcode);
    if(m_StateIsSet)
    {
        val[U("state")] = ModelBase::toJson(m_State);
    }
    val[U("country")] = ModelBase::toJson(m_Country);
    

    return val;
}

void SimpleAddress::fromJson(web::json::value& val)
{
    setLine1(ModelBase::stringFromJson(val[U("line1")]));
    setLine2(ModelBase::stringFromJson(val[U("line2")]));
    setLine3(ModelBase::stringFromJson(val[U("line3")]));
    if(val.has_field(U("city")))
    {
        setCity(ModelBase::stringFromJson(val[U("city")]));
        
    }
    setZipcode(ModelBase::stringFromJson(val[U("zipcode")]));
    if(val.has_field(U("state")))
    {
        if(!val[U("state")].is_null())
        {
            std::shared_ptr<StateEnum> newItem(new StateEnum());
            newItem->fromJson(val[U("state")]);
            setState( newItem );
        }
        
    }
    setCountry(ModelBase::stringFromJson(val[U("country")]));
    
}

void SimpleAddress::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("line1"), m_Line1));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("line2"), m_Line2));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("line3"), m_Line3));
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("city"), m_City));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("zipcode"), m_Zipcode));
    if(m_StateIsSet)
    {
        if (m_State.get())
        {
            m_State->toMultipart(multipart, U("state."));
        }
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("country"), m_Country));
    
}

void SimpleAddress::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setLine1(ModelBase::stringFromHttpContent(multipart->getContent(U("line1"))));
    setLine2(ModelBase::stringFromHttpContent(multipart->getContent(U("line2"))));
    setLine3(ModelBase::stringFromHttpContent(multipart->getContent(U("line3"))));
    if(multipart->hasContent(U("city")))
    {
        setCity(ModelBase::stringFromHttpContent(multipart->getContent(U("city"))));
        
    }
    setZipcode(ModelBase::stringFromHttpContent(multipart->getContent(U("zipcode"))));
    if(multipart->hasContent(U("state")))
    {
        if(multipart->hasContent(U("state")))
        {
            std::shared_ptr<StateEnum> newItem(new StateEnum());
            newItem->fromMultiPart(multipart, U("state."));
            setState( newItem );
        }
        
    }
    setCountry(ModelBase::stringFromHttpContent(multipart->getContent(U("country"))));
    
}


utility::string_t SimpleAddress::getLine1() const
{
    return m_Line1;
}
void SimpleAddress::setLine1(utility::string_t value)
{
    m_Line1 = value;
    
}
utility::string_t SimpleAddress::getLine2() const
{
    return m_Line2;
}
void SimpleAddress::setLine2(utility::string_t value)
{
    m_Line2 = value;
    
}
utility::string_t SimpleAddress::getLine3() const
{
    return m_Line3;
}
void SimpleAddress::setLine3(utility::string_t value)
{
    m_Line3 = value;
    
}
utility::string_t SimpleAddress::getCity() const
{
    return m_City;
}
void SimpleAddress::setCity(utility::string_t value)
{
    m_City = value;
    m_CityIsSet = true;
}
bool SimpleAddress::cityIsSet() const
{
    return m_CityIsSet;
}
void SimpleAddress::unsetCity()
{
    m_CityIsSet = false;
}
utility::string_t SimpleAddress::getZipcode() const
{
    return m_Zipcode;
}
void SimpleAddress::setZipcode(utility::string_t value)
{
    m_Zipcode = value;
    
}
std::shared_ptr<StateEnum> SimpleAddress::getState() const
{
    return m_State;
}
void SimpleAddress::setState(std::shared_ptr<StateEnum> value)
{
    m_State = value;
    m_StateIsSet = true;
}
bool SimpleAddress::stateIsSet() const
{
    return m_StateIsSet;
}
void SimpleAddress::unsetState()
{
    m_StateIsSet = false;
}
utility::string_t SimpleAddress::getCountry() const
{
    return m_Country;
}
void SimpleAddress::setCountry(utility::string_t value)
{
    m_Country = value;
    
}

}
}
}
}

