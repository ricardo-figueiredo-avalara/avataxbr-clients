/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ItemSimple.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ItemSimple::ItemSimple()
{
    m_CompanyId = nullptr;
    m_Code = U("");
    m_Agast = U("");
    m_Description = U("");
    m_DescriptionIsSet = false;
    
}

ItemSimple::~ItemSimple()
{
}

void ItemSimple::validate()
{
    // TODO: implement validation
}

web::json::value ItemSimple::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("companyId")] = ModelBase::toJson(m_CompanyId);
    val[U("code")] = ModelBase::toJson(m_Code);
    val[U("agast")] = ModelBase::toJson(m_Agast);
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    

    return val;
}

void ItemSimple::fromJson(web::json::value& val)
{
    setCompanyId(ModelBase::stringFromJson(val[U("companyId")]));
    setCode(ModelBase::stringFromJson(val[U("code")]));
    setAgast(ModelBase::stringFromJson(val[U("agast")]));
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
        
    }
    
}

void ItemSimple::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("companyId"), m_CompanyId));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("code"), m_Code));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("agast"), m_Agast));
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    
}

void ItemSimple::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setCompanyId(ModelBase::stringFromHttpContent(multipart->getContent(U("companyId"))));
    setCode(ModelBase::stringFromHttpContent(multipart->getContent(U("code"))));
    setAgast(ModelBase::stringFromHttpContent(multipart->getContent(U("agast"))));
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
        
    }
    
}


std::shared_ptr<UUID> ItemSimple::getCompanyId() const
{
    return m_CompanyId;
}
void ItemSimple::setCompanyId(std::shared_ptr<UUID> value)
{
    m_CompanyId = value;
    
}
utility::string_t ItemSimple::getCode() const
{
    return m_Code;
}
void ItemSimple::setCode(utility::string_t value)
{
    m_Code = value;
    
}
utility::string_t ItemSimple::getAgast() const
{
    return m_Agast;
}
void ItemSimple::setAgast(utility::string_t value)
{
    m_Agast = value;
    
}
utility::string_t ItemSimple::getDescription() const
{
    return m_Description;
}
void ItemSimple::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool ItemSimple::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void ItemSimple::unsetDescription()
{
    m_DescriptionIsSet = false;
}

}
}
}
}

