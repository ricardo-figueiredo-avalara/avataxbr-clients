/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CalculatedTaxSummaryForGoods.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

CalculatedTaxSummaryForGoods::CalculatedTaxSummaryForGoods()
{
    m_NumberOfLines = 0;
    m_NumberOfLinesIsSet = false;
    m_TaxedDiscount = 0.0;
    m_TaxedDiscountIsSet = false;
    m_UntaxedDiscount = 0.0;
    m_UntaxedDiscountIsSet = false;
    m_Subtotal = 0.0;
    m_SubtotalIsSet = false;
    m_TotalTax = 0.0;
    m_TotalTaxIsSet = false;
    m_GrandTotal = 0.0;
    m_GrandTotalIsSet = false;
    m_TaxByTypeIsSet = false;
    
}

CalculatedTaxSummaryForGoods::~CalculatedTaxSummaryForGoods()
{
}

void CalculatedTaxSummaryForGoods::validate()
{
    // TODO: implement validation
}

web::json::value CalculatedTaxSummaryForGoods::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NumberOfLinesIsSet)
    {
        val[U("numberOfLines")] = ModelBase::toJson(m_NumberOfLines);
    }
    if(m_TaxedDiscountIsSet)
    {
        val[U("taxedDiscount")] = ModelBase::toJson(m_TaxedDiscount);
    }
    if(m_UntaxedDiscountIsSet)
    {
        val[U("untaxedDiscount")] = ModelBase::toJson(m_UntaxedDiscount);
    }
    if(m_SubtotalIsSet)
    {
        val[U("subtotal")] = ModelBase::toJson(m_Subtotal);
    }
    if(m_TotalTaxIsSet)
    {
        val[U("totalTax")] = ModelBase::toJson(m_TotalTax);
    }
    if(m_GrandTotalIsSet)
    {
        val[U("grandTotal")] = ModelBase::toJson(m_GrandTotal);
    }
    if(m_TaxByTypeIsSet)
    {
        val[U("taxByType")] = ModelBase::toJson(m_TaxByType);
    }
    

    return val;
}

void CalculatedTaxSummaryForGoods::fromJson(web::json::value& val)
{
    if(val.has_field(U("numberOfLines")))
    {
        setNumberOfLines(ModelBase::int32_tFromJson(val[U("numberOfLines")]));
    }
    if(val.has_field(U("taxedDiscount")))
    {
        setTaxedDiscount(ModelBase::doubleFromJson(val[U("taxedDiscount")]));
    }
    if(val.has_field(U("untaxedDiscount")))
    {
        setUntaxedDiscount(ModelBase::doubleFromJson(val[U("untaxedDiscount")]));
    }
    if(val.has_field(U("subtotal")))
    {
        setSubtotal(ModelBase::doubleFromJson(val[U("subtotal")]));
    }
    if(val.has_field(U("totalTax")))
    {
        setTotalTax(ModelBase::doubleFromJson(val[U("totalTax")]));
    }
    if(val.has_field(U("grandTotal")))
    {
        setGrandTotal(ModelBase::doubleFromJson(val[U("grandTotal")]));
    }
    if(val.has_field(U("taxByType")))
    {
        if(!val[U("taxByType")].is_null())
        {
            std::shared_ptr<CalculatedTaxSummaryForGoods_taxByType> newItem(new CalculatedTaxSummaryForGoods_taxByType());
            newItem->fromJson(val[U("taxByType")]);
            setTaxByType( newItem );
        }
        
    }
    
}

void CalculatedTaxSummaryForGoods::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_NumberOfLinesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("numberOfLines"), m_NumberOfLines));
    }
    if(m_TaxedDiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("taxedDiscount"), m_TaxedDiscount));
    }
    if(m_UntaxedDiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("untaxedDiscount"), m_UntaxedDiscount));
    }
    if(m_SubtotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("subtotal"), m_Subtotal));
    }
    if(m_TotalTaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("totalTax"), m_TotalTax));
    }
    if(m_GrandTotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("grandTotal"), m_GrandTotal));
    }
    if(m_TaxByTypeIsSet)
    {
        if (m_TaxByType.get())
        {
            m_TaxByType->toMultipart(multipart, U("taxByType."));
        }
        
    }
    
}

void CalculatedTaxSummaryForGoods::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("numberOfLines")))
    {
        setNumberOfLines(ModelBase::int32_tFromHttpContent(multipart->getContent(U("numberOfLines"))));
    }
    if(multipart->hasContent(U("taxedDiscount")))
    {
        setTaxedDiscount(ModelBase::doubleFromHttpContent(multipart->getContent(U("taxedDiscount"))));
    }
    if(multipart->hasContent(U("untaxedDiscount")))
    {
        setUntaxedDiscount(ModelBase::doubleFromHttpContent(multipart->getContent(U("untaxedDiscount"))));
    }
    if(multipart->hasContent(U("subtotal")))
    {
        setSubtotal(ModelBase::doubleFromHttpContent(multipart->getContent(U("subtotal"))));
    }
    if(multipart->hasContent(U("totalTax")))
    {
        setTotalTax(ModelBase::doubleFromHttpContent(multipart->getContent(U("totalTax"))));
    }
    if(multipart->hasContent(U("grandTotal")))
    {
        setGrandTotal(ModelBase::doubleFromHttpContent(multipart->getContent(U("grandTotal"))));
    }
    if(multipart->hasContent(U("taxByType")))
    {
        if(multipart->hasContent(U("taxByType")))
        {
            std::shared_ptr<CalculatedTaxSummaryForGoods_taxByType> newItem(new CalculatedTaxSummaryForGoods_taxByType());
            newItem->fromMultiPart(multipart, U("taxByType."));
            setTaxByType( newItem );
        }
        
    }
    
}


int32_t CalculatedTaxSummaryForGoods::getNumberOfLines() const
{
    return m_NumberOfLines;
}
void CalculatedTaxSummaryForGoods::setNumberOfLines(int32_t value)
{
    m_NumberOfLines = value;
    m_NumberOfLinesIsSet = true;
}
bool CalculatedTaxSummaryForGoods::numberOfLinesIsSet() const
{
    return m_NumberOfLinesIsSet;
}
void CalculatedTaxSummaryForGoods::unsetNumberOfLines()
{
    m_NumberOfLinesIsSet = false;
}
double CalculatedTaxSummaryForGoods::getTaxedDiscount() const
{
    return m_TaxedDiscount;
}
void CalculatedTaxSummaryForGoods::setTaxedDiscount(double value)
{
    m_TaxedDiscount = value;
    m_TaxedDiscountIsSet = true;
}
bool CalculatedTaxSummaryForGoods::taxedDiscountIsSet() const
{
    return m_TaxedDiscountIsSet;
}
void CalculatedTaxSummaryForGoods::unsetTaxedDiscount()
{
    m_TaxedDiscountIsSet = false;
}
double CalculatedTaxSummaryForGoods::getUntaxedDiscount() const
{
    return m_UntaxedDiscount;
}
void CalculatedTaxSummaryForGoods::setUntaxedDiscount(double value)
{
    m_UntaxedDiscount = value;
    m_UntaxedDiscountIsSet = true;
}
bool CalculatedTaxSummaryForGoods::untaxedDiscountIsSet() const
{
    return m_UntaxedDiscountIsSet;
}
void CalculatedTaxSummaryForGoods::unsetUntaxedDiscount()
{
    m_UntaxedDiscountIsSet = false;
}
double CalculatedTaxSummaryForGoods::getSubtotal() const
{
    return m_Subtotal;
}
void CalculatedTaxSummaryForGoods::setSubtotal(double value)
{
    m_Subtotal = value;
    m_SubtotalIsSet = true;
}
bool CalculatedTaxSummaryForGoods::subtotalIsSet() const
{
    return m_SubtotalIsSet;
}
void CalculatedTaxSummaryForGoods::unsetSubtotal()
{
    m_SubtotalIsSet = false;
}
double CalculatedTaxSummaryForGoods::getTotalTax() const
{
    return m_TotalTax;
}
void CalculatedTaxSummaryForGoods::setTotalTax(double value)
{
    m_TotalTax = value;
    m_TotalTaxIsSet = true;
}
bool CalculatedTaxSummaryForGoods::totalTaxIsSet() const
{
    return m_TotalTaxIsSet;
}
void CalculatedTaxSummaryForGoods::unsetTotalTax()
{
    m_TotalTaxIsSet = false;
}
double CalculatedTaxSummaryForGoods::getGrandTotal() const
{
    return m_GrandTotal;
}
void CalculatedTaxSummaryForGoods::setGrandTotal(double value)
{
    m_GrandTotal = value;
    m_GrandTotalIsSet = true;
}
bool CalculatedTaxSummaryForGoods::grandTotalIsSet() const
{
    return m_GrandTotalIsSet;
}
void CalculatedTaxSummaryForGoods::unsetGrandTotal()
{
    m_GrandTotalIsSet = false;
}
std::shared_ptr<CalculatedTaxSummaryForGoods_taxByType> CalculatedTaxSummaryForGoods::getTaxByType() const
{
    return m_TaxByType;
}
void CalculatedTaxSummaryForGoods::setTaxByType(std::shared_ptr<CalculatedTaxSummaryForGoods_taxByType> value)
{
    m_TaxByType = value;
    m_TaxByTypeIsSet = true;
}
bool CalculatedTaxSummaryForGoods::taxByTypeIsSet() const
{
    return m_TaxByTypeIsSet;
}
void CalculatedTaxSummaryForGoods::unsetTaxByType()
{
    m_TaxByTypeIsSet = false;
}

}
}
}
}

