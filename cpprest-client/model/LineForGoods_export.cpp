/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LineForGoods_export.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

LineForGoods_export::LineForGoods_export()
{
    m_DrawbackNumber = U("");
    m_DrawbackNumberIsSet = false;
    m_IndExportIsSet = false;
    
}

LineForGoods_export::~LineForGoods_export()
{
}

void LineForGoods_export::validate()
{
    // TODO: implement validation
}

web::json::value LineForGoods_export::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DrawbackNumberIsSet)
    {
        val[U("drawbackNumber")] = ModelBase::toJson(m_DrawbackNumber);
    }
    if(m_IndExportIsSet)
    {
        val[U("indExport")] = ModelBase::toJson(m_IndExport);
    }
    

    return val;
}

void LineForGoods_export::fromJson(web::json::value& val)
{
    if(val.has_field(U("drawbackNumber")))
    {
        setDrawbackNumber(ModelBase::stringFromJson(val[U("drawbackNumber")]));
        
    }
    if(val.has_field(U("indExport")))
    {
        if(!val[U("indExport")].is_null())
        {
            std::shared_ptr<LineForGoods_indExport> newItem(new LineForGoods_indExport());
            newItem->fromJson(val[U("indExport")]);
            setIndExport( newItem );
        }
        
    }
    
}

void LineForGoods_export::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_DrawbackNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("drawbackNumber"), m_DrawbackNumber));
        
    }
    if(m_IndExportIsSet)
    {
        if (m_IndExport.get())
        {
            m_IndExport->toMultipart(multipart, U("indExport."));
        }
        
    }
    
}

void LineForGoods_export::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("drawbackNumber")))
    {
        setDrawbackNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("drawbackNumber"))));
        
    }
    if(multipart->hasContent(U("indExport")))
    {
        if(multipart->hasContent(U("indExport")))
        {
            std::shared_ptr<LineForGoods_indExport> newItem(new LineForGoods_indExport());
            newItem->fromMultiPart(multipart, U("indExport."));
            setIndExport( newItem );
        }
        
    }
    
}


utility::string_t LineForGoods_export::getDrawbackNumber() const
{
    return m_DrawbackNumber;
}
void LineForGoods_export::setDrawbackNumber(utility::string_t value)
{
    m_DrawbackNumber = value;
    m_DrawbackNumberIsSet = true;
}
bool LineForGoods_export::drawbackNumberIsSet() const
{
    return m_DrawbackNumberIsSet;
}
void LineForGoods_export::unsetDrawbackNumber()
{
    m_DrawbackNumberIsSet = false;
}
std::shared_ptr<LineForGoods_indExport> LineForGoods_export::getIndExport() const
{
    return m_IndExport;
}
void LineForGoods_export::setIndExport(std::shared_ptr<LineForGoods_indExport> value)
{
    m_IndExport = value;
    m_IndExportIsSet = true;
}
bool LineForGoods_export::indExportIsSet() const
{
    return m_IndExportIsSet;
}
void LineForGoods_export::unsetIndExport()
{
    m_IndExportIsSet = false;
}

}
}
}
}

