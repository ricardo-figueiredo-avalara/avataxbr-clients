/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CustomAgast.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

CustomAgast::CustomAgast()
{
    m_Code = U("");
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_HsCode = U("");
    m_HsCodeIsSet = false;
    m_Ex = 0;
    m_ExIsSet = false;
    m_Cest = U("");
    m_CestIsSet = false;
    m_Cean = U("");
    m_CeanIsSet = false;
    m_CodeTypeIsSet = false;
    m_CstIPI = U("");
    m_CstIPIIsSet = false;
    m_IpiLegalTaxClass = U("");
    m_IpiLegalTaxClassIsSet = false;
    m_PisCofinsTaxReporting = U("");
    m_PisCofinsTaxReportingIsSet = false;
    m_AccruablePISTaxation = U("");
    m_AccruablePISTaxationIsSet = false;
    m_AccruableCOFINSTaxation = U("");
    m_AccruableCOFINSTaxationIsSet = false;
    m_AccruableCSLLTaxation = U("");
    m_AccruableCSLLTaxationIsSet = false;
    m_IssDueatDestination = false;
    m_IssDueatDestinationIsSet = false;
    m_PisCofinsCreditNotAllowed = false;
    m_PisCofinsCreditNotAllowedIsSet = false;
    m_IssTaxation = U("");
    m_IssTaxationIsSet = false;
    m_FederalTaxRateIsSet = false;
    m_SpecialProductClass = U("");
    m_SpecialProductClassIsSet = false;
    m_IcmsConfIsSet = false;
    m_CompanyId = nullptr;
    
}

CustomAgast::~CustomAgast()
{
}

void CustomAgast::validate()
{
    // TODO: implement validation
}

web::json::value CustomAgast::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("code")] = ModelBase::toJson(m_Code);
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_HsCodeIsSet)
    {
        val[U("hsCode")] = ModelBase::toJson(m_HsCode);
    }
    if(m_ExIsSet)
    {
        val[U("ex")] = ModelBase::toJson(m_Ex);
    }
    if(m_CestIsSet)
    {
        val[U("cest")] = ModelBase::toJson(m_Cest);
    }
    if(m_CeanIsSet)
    {
        val[U("cean")] = ModelBase::toJson(m_Cean);
    }
    if(m_CodeTypeIsSet)
    {
        val[U("codeType")] = ModelBase::toJson(m_CodeType);
    }
    if(m_CstIPIIsSet)
    {
        val[U("cstIPI")] = ModelBase::toJson(m_CstIPI);
    }
    if(m_IpiLegalTaxClassIsSet)
    {
        val[U("ipiLegalTaxClass")] = ModelBase::toJson(m_IpiLegalTaxClass);
    }
    if(m_PisCofinsTaxReportingIsSet)
    {
        val[U("pisCofinsTaxReporting")] = ModelBase::toJson(m_PisCofinsTaxReporting);
    }
    if(m_AccruablePISTaxationIsSet)
    {
        val[U("accruablePISTaxation")] = ModelBase::toJson(m_AccruablePISTaxation);
    }
    if(m_AccruableCOFINSTaxationIsSet)
    {
        val[U("accruableCOFINSTaxation")] = ModelBase::toJson(m_AccruableCOFINSTaxation);
    }
    if(m_AccruableCSLLTaxationIsSet)
    {
        val[U("accruableCSLLTaxation")] = ModelBase::toJson(m_AccruableCSLLTaxation);
    }
    if(m_IssDueatDestinationIsSet)
    {
        val[U("issDueatDestination")] = ModelBase::toJson(m_IssDueatDestination);
    }
    if(m_PisCofinsCreditNotAllowedIsSet)
    {
        val[U("pisCofinsCreditNotAllowed")] = ModelBase::toJson(m_PisCofinsCreditNotAllowed);
    }
    if(m_IssTaxationIsSet)
    {
        val[U("issTaxation")] = ModelBase::toJson(m_IssTaxation);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_FederalTaxRate )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("federalTaxRate")] = web::json::value::array(jsonArray);
        }
    }
    if(m_SpecialProductClassIsSet)
    {
        val[U("specialProductClass")] = ModelBase::toJson(m_SpecialProductClass);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_IcmsConf )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("icmsConf")] = web::json::value::array(jsonArray);
        }
    }
    val[U("companyId")] = ModelBase::toJson(m_CompanyId);
    

    return val;
}

void CustomAgast::fromJson(web::json::value& val)
{
    setCode(ModelBase::stringFromJson(val[U("code")]));
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
        
    }
    if(val.has_field(U("hsCode")))
    {
        setHsCode(ModelBase::stringFromJson(val[U("hsCode")]));
        
    }
    if(val.has_field(U("ex")))
    {
        setEx(ModelBase::int32_tFromJson(val[U("ex")]));
    }
    if(val.has_field(U("cest")))
    {
        setCest(ModelBase::stringFromJson(val[U("cest")]));
        
    }
    if(val.has_field(U("cean")))
    {
        setCean(ModelBase::stringFromJson(val[U("cean")]));
        
    }
    if(val.has_field(U("codeType")))
    {
        if(!val[U("codeType")].is_null())
        {
            std::shared_ptr<Agast_codeType> newItem(new Agast_codeType());
            newItem->fromJson(val[U("codeType")]);
            setCodeType( newItem );
        }
        
    }
    if(val.has_field(U("cstIPI")))
    {
        setCstIPI(ModelBase::stringFromJson(val[U("cstIPI")]));
        
    }
    if(val.has_field(U("ipiLegalTaxClass")))
    {
        setIpiLegalTaxClass(ModelBase::stringFromJson(val[U("ipiLegalTaxClass")]));
        
    }
    if(val.has_field(U("pisCofinsTaxReporting")))
    {
        setPisCofinsTaxReporting(ModelBase::stringFromJson(val[U("pisCofinsTaxReporting")]));
        
    }
    if(val.has_field(U("accruablePISTaxation")))
    {
        setAccruablePISTaxation(ModelBase::stringFromJson(val[U("accruablePISTaxation")]));
        
    }
    if(val.has_field(U("accruableCOFINSTaxation")))
    {
        setAccruableCOFINSTaxation(ModelBase::stringFromJson(val[U("accruableCOFINSTaxation")]));
        
    }
    if(val.has_field(U("accruableCSLLTaxation")))
    {
        setAccruableCSLLTaxation(ModelBase::stringFromJson(val[U("accruableCSLLTaxation")]));
        
    }
    if(val.has_field(U("issDueatDestination")))
    {
        setIssDueatDestination(ModelBase::boolFromJson(val[U("issDueatDestination")]));
    }
    if(val.has_field(U("pisCofinsCreditNotAllowed")))
    {
        setPisCofinsCreditNotAllowed(ModelBase::boolFromJson(val[U("pisCofinsCreditNotAllowed")]));
    }
    if(val.has_field(U("issTaxation")))
    {
        setIssTaxation(ModelBase::stringFromJson(val[U("issTaxation")]));
        
    }
    {
        m_FederalTaxRate.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("federalTaxRate")))
        {
        for( auto& item : val[U("federalTaxRate")].as_array() )
        {
            
            if(item.is_null())
            {
                m_FederalTaxRate.push_back( std::shared_ptr<TaxTypeRate>(nullptr) );
            }
            else
            {
                std::shared_ptr<TaxTypeRate> newItem(new TaxTypeRate());
                newItem->fromJson(item);
                m_FederalTaxRate.push_back( newItem );
            }
            
        }
        }
    }
    if(val.has_field(U("specialProductClass")))
    {
        setSpecialProductClass(ModelBase::stringFromJson(val[U("specialProductClass")]));
        
    }
    {
        m_IcmsConf.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("icmsConf")))
        {
        for( auto& item : val[U("icmsConf")].as_array() )
        {
            
            if(item.is_null())
            {
                m_IcmsConf.push_back( std::shared_ptr<Agast_icmsConf>(nullptr) );
            }
            else
            {
                std::shared_ptr<Agast_icmsConf> newItem(new Agast_icmsConf());
                newItem->fromJson(item);
                m_IcmsConf.push_back( newItem );
            }
            
        }
        }
    }
    setCompanyId(ModelBase::stringFromJson(val[U("companyId")]));
    
}

void CustomAgast::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("code"), m_Code));
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_HsCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("hsCode"), m_HsCode));
        
    }
    if(m_ExIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ex"), m_Ex));
    }
    if(m_CestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cest"), m_Cest));
        
    }
    if(m_CeanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cean"), m_Cean));
        
    }
    if(m_CodeTypeIsSet)
    {
        if (m_CodeType.get())
        {
            m_CodeType->toMultipart(multipart, U("codeType."));
        }
        
    }
    if(m_CstIPIIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cstIPI"), m_CstIPI));
        
    }
    if(m_IpiLegalTaxClassIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ipiLegalTaxClass"), m_IpiLegalTaxClass));
        
    }
    if(m_PisCofinsTaxReportingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("pisCofinsTaxReporting"), m_PisCofinsTaxReporting));
        
    }
    if(m_AccruablePISTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("accruablePISTaxation"), m_AccruablePISTaxation));
        
    }
    if(m_AccruableCOFINSTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("accruableCOFINSTaxation"), m_AccruableCOFINSTaxation));
        
    }
    if(m_AccruableCSLLTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("accruableCSLLTaxation"), m_AccruableCSLLTaxation));
        
    }
    if(m_IssDueatDestinationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("issDueatDestination"), m_IssDueatDestination));
    }
    if(m_PisCofinsCreditNotAllowedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("pisCofinsCreditNotAllowed"), m_PisCofinsCreditNotAllowed));
    }
    if(m_IssTaxationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("issTaxation"), m_IssTaxation));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_FederalTaxRate )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("federalTaxRate"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_SpecialProductClassIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("specialProductClass"), m_SpecialProductClass));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_IcmsConf )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("icmsConf"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("companyId"), m_CompanyId));
    
}

void CustomAgast::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setCode(ModelBase::stringFromHttpContent(multipart->getContent(U("code"))));
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
        
    }
    if(multipart->hasContent(U("hsCode")))
    {
        setHsCode(ModelBase::stringFromHttpContent(multipart->getContent(U("hsCode"))));
        
    }
    if(multipart->hasContent(U("ex")))
    {
        setEx(ModelBase::int32_tFromHttpContent(multipart->getContent(U("ex"))));
    }
    if(multipart->hasContent(U("cest")))
    {
        setCest(ModelBase::stringFromHttpContent(multipart->getContent(U("cest"))));
        
    }
    if(multipart->hasContent(U("cean")))
    {
        setCean(ModelBase::stringFromHttpContent(multipart->getContent(U("cean"))));
        
    }
    if(multipart->hasContent(U("codeType")))
    {
        if(multipart->hasContent(U("codeType")))
        {
            std::shared_ptr<Agast_codeType> newItem(new Agast_codeType());
            newItem->fromMultiPart(multipart, U("codeType."));
            setCodeType( newItem );
        }
        
    }
    if(multipart->hasContent(U("cstIPI")))
    {
        setCstIPI(ModelBase::stringFromHttpContent(multipart->getContent(U("cstIPI"))));
        
    }
    if(multipart->hasContent(U("ipiLegalTaxClass")))
    {
        setIpiLegalTaxClass(ModelBase::stringFromHttpContent(multipart->getContent(U("ipiLegalTaxClass"))));
        
    }
    if(multipart->hasContent(U("pisCofinsTaxReporting")))
    {
        setPisCofinsTaxReporting(ModelBase::stringFromHttpContent(multipart->getContent(U("pisCofinsTaxReporting"))));
        
    }
    if(multipart->hasContent(U("accruablePISTaxation")))
    {
        setAccruablePISTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("accruablePISTaxation"))));
        
    }
    if(multipart->hasContent(U("accruableCOFINSTaxation")))
    {
        setAccruableCOFINSTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("accruableCOFINSTaxation"))));
        
    }
    if(multipart->hasContent(U("accruableCSLLTaxation")))
    {
        setAccruableCSLLTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("accruableCSLLTaxation"))));
        
    }
    if(multipart->hasContent(U("issDueatDestination")))
    {
        setIssDueatDestination(ModelBase::boolFromHttpContent(multipart->getContent(U("issDueatDestination"))));
    }
    if(multipart->hasContent(U("pisCofinsCreditNotAllowed")))
    {
        setPisCofinsCreditNotAllowed(ModelBase::boolFromHttpContent(multipart->getContent(U("pisCofinsCreditNotAllowed"))));
    }
    if(multipart->hasContent(U("issTaxation")))
    {
        setIssTaxation(ModelBase::stringFromHttpContent(multipart->getContent(U("issTaxation"))));
        
    }
    {
        m_FederalTaxRate.clear();
        if(multipart->hasContent(U("federalTaxRate")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("federalTaxRate"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_FederalTaxRate.push_back( std::shared_ptr<TaxTypeRate>(nullptr) );
            }
            else
            {
                std::shared_ptr<TaxTypeRate> newItem(new TaxTypeRate());
                newItem->fromJson(item);
                m_FederalTaxRate.push_back( newItem );
            }
            
        }
        }
    }
    if(multipart->hasContent(U("specialProductClass")))
    {
        setSpecialProductClass(ModelBase::stringFromHttpContent(multipart->getContent(U("specialProductClass"))));
        
    }
    {
        m_IcmsConf.clear();
        if(multipart->hasContent(U("icmsConf")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("icmsConf"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_IcmsConf.push_back( std::shared_ptr<Agast_icmsConf>(nullptr) );
            }
            else
            {
                std::shared_ptr<Agast_icmsConf> newItem(new Agast_icmsConf());
                newItem->fromJson(item);
                m_IcmsConf.push_back( newItem );
            }
            
        }
        }
    }
    setCompanyId(ModelBase::stringFromHttpContent(multipart->getContent(U("companyId"))));
    
}


utility::string_t CustomAgast::getCode() const
{
    return m_Code;
}
void CustomAgast::setCode(utility::string_t value)
{
    m_Code = value;
    
}
utility::string_t CustomAgast::getDescription() const
{
    return m_Description;
}
void CustomAgast::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool CustomAgast::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void CustomAgast::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t CustomAgast::getHsCode() const
{
    return m_HsCode;
}
void CustomAgast::setHsCode(utility::string_t value)
{
    m_HsCode = value;
    m_HsCodeIsSet = true;
}
bool CustomAgast::hsCodeIsSet() const
{
    return m_HsCodeIsSet;
}
void CustomAgast::unsetHsCode()
{
    m_HsCodeIsSet = false;
}
int32_t CustomAgast::getEx() const
{
    return m_Ex;
}
void CustomAgast::setEx(int32_t value)
{
    m_Ex = value;
    m_ExIsSet = true;
}
bool CustomAgast::exIsSet() const
{
    return m_ExIsSet;
}
void CustomAgast::unsetEx()
{
    m_ExIsSet = false;
}
utility::string_t CustomAgast::getCest() const
{
    return m_Cest;
}
void CustomAgast::setCest(utility::string_t value)
{
    m_Cest = value;
    m_CestIsSet = true;
}
bool CustomAgast::cestIsSet() const
{
    return m_CestIsSet;
}
void CustomAgast::unsetCest()
{
    m_CestIsSet = false;
}
utility::string_t CustomAgast::getCean() const
{
    return m_Cean;
}
void CustomAgast::setCean(utility::string_t value)
{
    m_Cean = value;
    m_CeanIsSet = true;
}
bool CustomAgast::ceanIsSet() const
{
    return m_CeanIsSet;
}
void CustomAgast::unsetCean()
{
    m_CeanIsSet = false;
}
std::shared_ptr<Agast_codeType> CustomAgast::getCodeType() const
{
    return m_CodeType;
}
void CustomAgast::setCodeType(std::shared_ptr<Agast_codeType> value)
{
    m_CodeType = value;
    m_CodeTypeIsSet = true;
}
bool CustomAgast::codeTypeIsSet() const
{
    return m_CodeTypeIsSet;
}
void CustomAgast::unsetCodeType()
{
    m_CodeTypeIsSet = false;
}
utility::string_t CustomAgast::getCstIPI() const
{
    return m_CstIPI;
}
void CustomAgast::setCstIPI(utility::string_t value)
{
    m_CstIPI = value;
    m_CstIPIIsSet = true;
}
bool CustomAgast::cstIPIIsSet() const
{
    return m_CstIPIIsSet;
}
void CustomAgast::unsetCstIPI()
{
    m_CstIPIIsSet = false;
}
utility::string_t CustomAgast::getIpiLegalTaxClass() const
{
    return m_IpiLegalTaxClass;
}
void CustomAgast::setIpiLegalTaxClass(utility::string_t value)
{
    m_IpiLegalTaxClass = value;
    m_IpiLegalTaxClassIsSet = true;
}
bool CustomAgast::ipiLegalTaxClassIsSet() const
{
    return m_IpiLegalTaxClassIsSet;
}
void CustomAgast::unsetIpiLegalTaxClass()
{
    m_IpiLegalTaxClassIsSet = false;
}
utility::string_t CustomAgast::getPisCofinsTaxReporting() const
{
    return m_PisCofinsTaxReporting;
}
void CustomAgast::setPisCofinsTaxReporting(utility::string_t value)
{
    m_PisCofinsTaxReporting = value;
    m_PisCofinsTaxReportingIsSet = true;
}
bool CustomAgast::pisCofinsTaxReportingIsSet() const
{
    return m_PisCofinsTaxReportingIsSet;
}
void CustomAgast::unsetPisCofinsTaxReporting()
{
    m_PisCofinsTaxReportingIsSet = false;
}
utility::string_t CustomAgast::getAccruablePISTaxation() const
{
    return m_AccruablePISTaxation;
}
void CustomAgast::setAccruablePISTaxation(utility::string_t value)
{
    m_AccruablePISTaxation = value;
    m_AccruablePISTaxationIsSet = true;
}
bool CustomAgast::accruablePISTaxationIsSet() const
{
    return m_AccruablePISTaxationIsSet;
}
void CustomAgast::unsetAccruablePISTaxation()
{
    m_AccruablePISTaxationIsSet = false;
}
utility::string_t CustomAgast::getAccruableCOFINSTaxation() const
{
    return m_AccruableCOFINSTaxation;
}
void CustomAgast::setAccruableCOFINSTaxation(utility::string_t value)
{
    m_AccruableCOFINSTaxation = value;
    m_AccruableCOFINSTaxationIsSet = true;
}
bool CustomAgast::accruableCOFINSTaxationIsSet() const
{
    return m_AccruableCOFINSTaxationIsSet;
}
void CustomAgast::unsetAccruableCOFINSTaxation()
{
    m_AccruableCOFINSTaxationIsSet = false;
}
utility::string_t CustomAgast::getAccruableCSLLTaxation() const
{
    return m_AccruableCSLLTaxation;
}
void CustomAgast::setAccruableCSLLTaxation(utility::string_t value)
{
    m_AccruableCSLLTaxation = value;
    m_AccruableCSLLTaxationIsSet = true;
}
bool CustomAgast::accruableCSLLTaxationIsSet() const
{
    return m_AccruableCSLLTaxationIsSet;
}
void CustomAgast::unsetAccruableCSLLTaxation()
{
    m_AccruableCSLLTaxationIsSet = false;
}
bool CustomAgast::getIssDueatDestination() const
{
    return m_IssDueatDestination;
}
void CustomAgast::setIssDueatDestination(bool value)
{
    m_IssDueatDestination = value;
    m_IssDueatDestinationIsSet = true;
}
bool CustomAgast::issDueatDestinationIsSet() const
{
    return m_IssDueatDestinationIsSet;
}
void CustomAgast::unsetIssDueatDestination()
{
    m_IssDueatDestinationIsSet = false;
}
bool CustomAgast::getPisCofinsCreditNotAllowed() const
{
    return m_PisCofinsCreditNotAllowed;
}
void CustomAgast::setPisCofinsCreditNotAllowed(bool value)
{
    m_PisCofinsCreditNotAllowed = value;
    m_PisCofinsCreditNotAllowedIsSet = true;
}
bool CustomAgast::pisCofinsCreditNotAllowedIsSet() const
{
    return m_PisCofinsCreditNotAllowedIsSet;
}
void CustomAgast::unsetPisCofinsCreditNotAllowed()
{
    m_PisCofinsCreditNotAllowedIsSet = false;
}
utility::string_t CustomAgast::getIssTaxation() const
{
    return m_IssTaxation;
}
void CustomAgast::setIssTaxation(utility::string_t value)
{
    m_IssTaxation = value;
    m_IssTaxationIsSet = true;
}
bool CustomAgast::issTaxationIsSet() const
{
    return m_IssTaxationIsSet;
}
void CustomAgast::unsetIssTaxation()
{
    m_IssTaxationIsSet = false;
}
std::vector<std::shared_ptr<TaxTypeRate>>& CustomAgast::getFederalTaxRate()
{
    return m_FederalTaxRate;
}
bool CustomAgast::federalTaxRateIsSet() const
{
    return m_FederalTaxRateIsSet;
}
void CustomAgast::unsetFederalTaxRate()
{
    m_FederalTaxRateIsSet = false;
}
utility::string_t CustomAgast::getSpecialProductClass() const
{
    return m_SpecialProductClass;
}
void CustomAgast::setSpecialProductClass(utility::string_t value)
{
    m_SpecialProductClass = value;
    m_SpecialProductClassIsSet = true;
}
bool CustomAgast::specialProductClassIsSet() const
{
    return m_SpecialProductClassIsSet;
}
void CustomAgast::unsetSpecialProductClass()
{
    m_SpecialProductClassIsSet = false;
}
std::vector<std::shared_ptr<Agast_icmsConf>>& CustomAgast::getIcmsConf()
{
    return m_IcmsConf;
}
bool CustomAgast::icmsConfIsSet() const
{
    return m_IcmsConfIsSet;
}
void CustomAgast::unsetIcmsConf()
{
    m_IcmsConfIsSet = false;
}
std::shared_ptr<UUID> CustomAgast::getCompanyId() const
{
    return m_CompanyId;
}
void CustomAgast::setCompanyId(std::shared_ptr<UUID> value)
{
    m_CompanyId = value;
    
}

}
}
}
}

