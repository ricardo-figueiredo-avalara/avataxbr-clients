/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IssConfByCity.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

IssConfByCity::IssConfByCity()
{
    m_CityCode = 0;
    m_Name = U("");
    m_NameIsSet = false;
    m_StateIsSet = false;
    m_IssWhDestOtherCities = false;
    m_IssWhDestOtherCitiesIsSet = false;
    m_IssWhDestSameCity = false;
    m_IssWhDestSameCityIsSet = false;
    m_IssWhOriginUnregSeller = false;
    m_IssWhOriginUnregSellerIsSet = false;
    m_ServiceListIsSet = false;
    
}

IssConfByCity::~IssConfByCity()
{
}

void IssConfByCity::validate()
{
    // TODO: implement validation
}

web::json::value IssConfByCity::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("cityCode")] = ModelBase::toJson(m_CityCode);
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_StateIsSet)
    {
        val[U("state")] = ModelBase::toJson(m_State);
    }
    if(m_IssWhDestOtherCitiesIsSet)
    {
        val[U("issWhDestOtherCities")] = ModelBase::toJson(m_IssWhDestOtherCities);
    }
    if(m_IssWhDestSameCityIsSet)
    {
        val[U("issWhDestSameCity")] = ModelBase::toJson(m_IssWhDestSameCity);
    }
    if(m_IssWhOriginUnregSellerIsSet)
    {
        val[U("issWhOriginUnregSeller")] = ModelBase::toJson(m_IssWhOriginUnregSeller);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_ServiceList )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("serviceList")] = web::json::value::array(jsonArray);
        }
    }
    

    return val;
}

void IssConfByCity::fromJson(web::json::value& val)
{
    setCityCode(ModelBase::int64_tFromJson(val[U("cityCode")]));
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
        
    }
    if(val.has_field(U("state")))
    {
        if(!val[U("state")].is_null())
        {
            std::shared_ptr<StateEnum> newItem(new StateEnum());
            newItem->fromJson(val[U("state")]);
            setState( newItem );
        }
        
    }
    if(val.has_field(U("issWhDestOtherCities")))
    {
        setIssWhDestOtherCities(ModelBase::boolFromJson(val[U("issWhDestOtherCities")]));
    }
    if(val.has_field(U("issWhDestSameCity")))
    {
        setIssWhDestSameCity(ModelBase::boolFromJson(val[U("issWhDestSameCity")]));
    }
    if(val.has_field(U("issWhOriginUnregSeller")))
    {
        setIssWhOriginUnregSeller(ModelBase::boolFromJson(val[U("issWhOriginUnregSeller")]));
    }
    {
        m_ServiceList.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("serviceList")))
        {
        for( auto& item : val[U("serviceList")].as_array() )
        {
            
            if(item.is_null())
            {
                m_ServiceList.push_back( std::shared_ptr<IssConfServiceList>(nullptr) );
            }
            else
            {
                std::shared_ptr<IssConfServiceList> newItem(new IssConfServiceList());
                newItem->fromJson(item);
                m_ServiceList.push_back( newItem );
            }
            
        }
        }
    }
    
}

void IssConfByCity::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("cityCode"), m_CityCode));
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_StateIsSet)
    {
        if (m_State.get())
        {
            m_State->toMultipart(multipart, U("state."));
        }
        
    }
    if(m_IssWhDestOtherCitiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("issWhDestOtherCities"), m_IssWhDestOtherCities));
    }
    if(m_IssWhDestSameCityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("issWhDestSameCity"), m_IssWhDestSameCity));
    }
    if(m_IssWhOriginUnregSellerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("issWhOriginUnregSeller"), m_IssWhOriginUnregSeller));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_ServiceList )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("serviceList"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    
}

void IssConfByCity::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setCityCode(ModelBase::int64_tFromHttpContent(multipart->getContent(U("cityCode"))));
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
        
    }
    if(multipart->hasContent(U("state")))
    {
        if(multipart->hasContent(U("state")))
        {
            std::shared_ptr<StateEnum> newItem(new StateEnum());
            newItem->fromMultiPart(multipart, U("state."));
            setState( newItem );
        }
        
    }
    if(multipart->hasContent(U("issWhDestOtherCities")))
    {
        setIssWhDestOtherCities(ModelBase::boolFromHttpContent(multipart->getContent(U("issWhDestOtherCities"))));
    }
    if(multipart->hasContent(U("issWhDestSameCity")))
    {
        setIssWhDestSameCity(ModelBase::boolFromHttpContent(multipart->getContent(U("issWhDestSameCity"))));
    }
    if(multipart->hasContent(U("issWhOriginUnregSeller")))
    {
        setIssWhOriginUnregSeller(ModelBase::boolFromHttpContent(multipart->getContent(U("issWhOriginUnregSeller"))));
    }
    {
        m_ServiceList.clear();
        if(multipart->hasContent(U("serviceList")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("serviceList"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_ServiceList.push_back( std::shared_ptr<IssConfServiceList>(nullptr) );
            }
            else
            {
                std::shared_ptr<IssConfServiceList> newItem(new IssConfServiceList());
                newItem->fromJson(item);
                m_ServiceList.push_back( newItem );
            }
            
        }
        }
    }
    
}


int64_t IssConfByCity::getCityCode() const
{
    return m_CityCode;
}
void IssConfByCity::setCityCode(int64_t value)
{
    m_CityCode = value;
    
}
utility::string_t IssConfByCity::getName() const
{
    return m_Name;
}
void IssConfByCity::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool IssConfByCity::nameIsSet() const
{
    return m_NameIsSet;
}
void IssConfByCity::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<StateEnum> IssConfByCity::getState() const
{
    return m_State;
}
void IssConfByCity::setState(std::shared_ptr<StateEnum> value)
{
    m_State = value;
    m_StateIsSet = true;
}
bool IssConfByCity::stateIsSet() const
{
    return m_StateIsSet;
}
void IssConfByCity::unsetState()
{
    m_StateIsSet = false;
}
bool IssConfByCity::getIssWhDestOtherCities() const
{
    return m_IssWhDestOtherCities;
}
void IssConfByCity::setIssWhDestOtherCities(bool value)
{
    m_IssWhDestOtherCities = value;
    m_IssWhDestOtherCitiesIsSet = true;
}
bool IssConfByCity::issWhDestOtherCitiesIsSet() const
{
    return m_IssWhDestOtherCitiesIsSet;
}
void IssConfByCity::unsetIssWhDestOtherCities()
{
    m_IssWhDestOtherCitiesIsSet = false;
}
bool IssConfByCity::getIssWhDestSameCity() const
{
    return m_IssWhDestSameCity;
}
void IssConfByCity::setIssWhDestSameCity(bool value)
{
    m_IssWhDestSameCity = value;
    m_IssWhDestSameCityIsSet = true;
}
bool IssConfByCity::issWhDestSameCityIsSet() const
{
    return m_IssWhDestSameCityIsSet;
}
void IssConfByCity::unsetIssWhDestSameCity()
{
    m_IssWhDestSameCityIsSet = false;
}
bool IssConfByCity::getIssWhOriginUnregSeller() const
{
    return m_IssWhOriginUnregSeller;
}
void IssConfByCity::setIssWhOriginUnregSeller(bool value)
{
    m_IssWhOriginUnregSeller = value;
    m_IssWhOriginUnregSellerIsSet = true;
}
bool IssConfByCity::issWhOriginUnregSellerIsSet() const
{
    return m_IssWhOriginUnregSellerIsSet;
}
void IssConfByCity::unsetIssWhOriginUnregSeller()
{
    m_IssWhOriginUnregSellerIsSet = false;
}
std::vector<std::shared_ptr<IssConfServiceList>>& IssConfByCity::getServiceList()
{
    return m_ServiceList;
}
bool IssConfByCity::serviceListIsSet() const
{
    return m_ServiceListIsSet;
}
void IssConfByCity::unsetServiceList()
{
    m_ServiceListIsSet = false;
}

}
}
}
}

