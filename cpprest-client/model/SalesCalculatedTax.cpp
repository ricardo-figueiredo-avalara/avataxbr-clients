/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SalesCalculatedTax.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SalesCalculatedTax::SalesCalculatedTax()
{
    m_TaxByTypeIsSet = false;
    m_Tax = 0.0;
    m_TaxIsSet = false;
    m_DetailsIsSet = false;
    
}

SalesCalculatedTax::~SalesCalculatedTax()
{
}

void SalesCalculatedTax::validate()
{
    // TODO: implement validation
}

web::json::value SalesCalculatedTax::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TaxByTypeIsSet)
    {
        val[U("taxByType")] = ModelBase::toJson(m_TaxByType);
    }
    if(m_TaxIsSet)
    {
        val[U("tax")] = ModelBase::toJson(m_Tax);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Details )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("details")] = web::json::value::array(jsonArray);
        }
    }
    

    return val;
}

void SalesCalculatedTax::fromJson(web::json::value& val)
{
    if(val.has_field(U("taxByType")))
    {
        if(!val[U("taxByType")].is_null())
        {
            std::shared_ptr<SalesTaxByType> newItem(new SalesTaxByType());
            newItem->fromJson(val[U("taxByType")]);
            setTaxByType( newItem );
        }
        
    }
    if(val.has_field(U("tax")))
    {
        setTax(ModelBase::doubleFromJson(val[U("tax")]));
    }
    {
        m_Details.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("details")))
        {
        for( auto& item : val[U("details")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Details.push_back( std::shared_ptr<SalesTaxByTypeDetail>(nullptr) );
            }
            else
            {
                std::shared_ptr<SalesTaxByTypeDetail> newItem(new SalesTaxByTypeDetail());
                newItem->fromJson(item);
                m_Details.push_back( newItem );
            }
            
        }
        }
    }
    
}

void SalesCalculatedTax::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_TaxByTypeIsSet)
    {
        if (m_TaxByType.get())
        {
            m_TaxByType->toMultipart(multipart, U("taxByType."));
        }
        
    }
    if(m_TaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("tax"), m_Tax));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Details )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("details"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    
}

void SalesCalculatedTax::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("taxByType")))
    {
        if(multipart->hasContent(U("taxByType")))
        {
            std::shared_ptr<SalesTaxByType> newItem(new SalesTaxByType());
            newItem->fromMultiPart(multipart, U("taxByType."));
            setTaxByType( newItem );
        }
        
    }
    if(multipart->hasContent(U("tax")))
    {
        setTax(ModelBase::doubleFromHttpContent(multipart->getContent(U("tax"))));
    }
    {
        m_Details.clear();
        if(multipart->hasContent(U("details")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("details"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Details.push_back( std::shared_ptr<SalesTaxByTypeDetail>(nullptr) );
            }
            else
            {
                std::shared_ptr<SalesTaxByTypeDetail> newItem(new SalesTaxByTypeDetail());
                newItem->fromJson(item);
                m_Details.push_back( newItem );
            }
            
        }
        }
    }
    
}


std::shared_ptr<SalesTaxByType> SalesCalculatedTax::getTaxByType() const
{
    return m_TaxByType;
}
void SalesCalculatedTax::setTaxByType(std::shared_ptr<SalesTaxByType> value)
{
    m_TaxByType = value;
    m_TaxByTypeIsSet = true;
}
bool SalesCalculatedTax::taxByTypeIsSet() const
{
    return m_TaxByTypeIsSet;
}
void SalesCalculatedTax::unsetTaxByType()
{
    m_TaxByTypeIsSet = false;
}
double SalesCalculatedTax::getTax() const
{
    return m_Tax;
}
void SalesCalculatedTax::setTax(double value)
{
    m_Tax = value;
    m_TaxIsSet = true;
}
bool SalesCalculatedTax::taxIsSet() const
{
    return m_TaxIsSet;
}
void SalesCalculatedTax::unsetTax()
{
    m_TaxIsSet = false;
}
std::vector<std::shared_ptr<SalesTaxByTypeDetail>>& SalesCalculatedTax::getDetails()
{
    return m_Details;
}
bool SalesCalculatedTax::detailsIsSet() const
{
    return m_DetailsIsSet;
}
void SalesCalculatedTax::unsetDetails()
{
    m_DetailsIsSet = false;
}

}
}
}
}

