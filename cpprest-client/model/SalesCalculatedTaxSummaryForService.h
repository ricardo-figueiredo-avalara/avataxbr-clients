/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SalesCalculatedTaxSummaryForService.h
 *
 * 
 */

#ifndef SalesCalculatedTaxSummaryForService_H_
#define SalesCalculatedTaxSummaryForService_H_


#include "ModelBase.h"

#include "SalesCalculatedTaxSummaryForService_taxByType.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  SalesCalculatedTaxSummaryForService
    : public ModelBase
{
public:
    SalesCalculatedTaxSummaryForService();
    virtual ~SalesCalculatedTaxSummaryForService();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SalesCalculatedTaxSummaryForService members

    /// <summary>
    /// Count of lines
    /// </summary>
    int32_t getNumberOfLines() const;
    void setNumberOfLines(int32_t value);
    bool numberOfLinesIsSet() const;
    void unsetNumberOfLines();
    /// <summary>
    /// sum of all line tax attribute
    /// </summary>
    double getSubtotal() const;
    void setSubtotal(double value);
    bool subtotalIsSet() const;
    void unsetSubtotal();
    /// <summary>
    /// sum of all line lineAmount attribute
    /// </summary>
    double getTotalTax() const;
    void setTotalTax(double value);
    bool totalTaxIsSet() const;
    void unsetTotalTax();
    /// <summary>
    /// sum of all line lineAmount attribute - sum of all line tax attribute - sum of all line lineTaxedDiscount attribute
    /// </summary>
    double getGrandTotal() const;
    void setGrandTotal(double value);
    bool grandTotalIsSet() const;
    void unsetGrandTotal();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SalesCalculatedTaxSummaryForService_taxByType> getTaxByType() const;
    void setTaxByType(std::shared_ptr<SalesCalculatedTaxSummaryForService_taxByType> value);
    bool taxByTypeIsSet() const;
    void unsetTaxByType();

protected:
    int32_t m_NumberOfLines;
    bool m_NumberOfLinesIsSet;
double m_Subtotal;
    bool m_SubtotalIsSet;
double m_TotalTax;
    bool m_TotalTaxIsSet;
double m_GrandTotal;
    bool m_GrandTotalIsSet;
std::shared_ptr<SalesCalculatedTaxSummaryForService_taxByType> m_TaxByType;
    bool m_TaxByTypeIsSet;
};

}
}
}
}

#endif /* SalesCalculatedTaxSummaryForService_H_ */
