/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * IcmsConfInterState.h
 *
 * 
 */

#ifndef IcmsConfInterState_H_
#define IcmsConfInterState_H_


#include "ModelBase.h"

#include "StateEnum.h"
#include <cpprest/details/basic_types.h>
#include "IcmsConfInterState_icmsSTConf.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  IcmsConfInterState
    : public ModelBase
{
public:
    IcmsConfInterState();
    virtual ~IcmsConfInterState();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// IcmsConfInterState members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<StateEnum> getState() const;
    void setState(std::shared_ptr<StateEnum> value);
    bool stateIsSet() const;
    void unsetState();
    /// <summary>
    /// how this ICMS will be calculed for itens linked to this configuration
    /// </summary>
    utility::string_t getCalcMode() const;
    void setCalcMode(utility::string_t value);
    bool calcModeIsSet() const;
    void unsetCalcMode();
    /// <summary>
    /// discount if the item is subject to monophase PIS/COFINS when operation interstate
    /// </summary>
    double getDiscountRateForMonoPhase() const;
    void setDiscountRateForMonoPhase(double value);
    bool discountRateForMonoPhaseIsSet() const;
    void unsetDiscountRateForMonoPhase();
    /// <summary>
    /// ICMS rate
    /// </summary>
    double getRate() const;
    void setRate(double value);
    bool rateIsSet() const;
    void unsetRate();
    /// <summary>
    /// FCP rate (Fundo de Combate Ã  Probreza / Fund Against Poverty
    /// </summary>
    double getFcpRate() const;
    void setFcpRate(double value);
    bool fcpRateIsSet() const;
    void unsetFcpRate();
    /// <summary>
    /// ICMS rate
    /// </summary>
    double getIcmsBaseDiscount() const;
    void setIcmsBaseDiscount(double value);
    bool icmsBaseDiscountIsSet() const;
    void unsetIcmsBaseDiscount();
    /// <summary>
    /// SRP or MMSRP amount base for this icms configuration
    /// </summary>
    double getMsrp() const;
    void setMsrp(double value);
    bool msrpIsSet() const;
    void unsetMsrp();
    /// <summary>
    /// ICMS MVA rate to define calc base
    /// </summary>
    double getMvaRate() const;
    void setMvaRate(double value);
    bool mvaRateIsSet() const;
    void unsetMvaRate();
    /// <summary>
    /// unit used to SRP amount value
    /// </summary>
    utility::string_t getMsrpUnit() const;
    void setMsrpUnit(utility::string_t value);
    bool msrpUnitIsSet() const;
    void unsetMsrpUnit();
    /// <summary>
    /// Code for the ICM legal reason, this message will be placed on invoice.
    /// </summary>
    utility::string_t getIcmsLegalReason() const;
    void setIcmsLegalReason(utility::string_t value);
    bool icmsLegalReasonIsSet() const;
    void unsetIcmsLegalReason();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<IcmsConfInterState_icmsSTConf> getIcmsSTConf() const;
    void setIcmsSTConf(std::shared_ptr<IcmsConfInterState_icmsSTConf> value);
    bool icmsSTConfIsSet() const;
    void unsetIcmsSTConf();

protected:
    std::shared_ptr<StateEnum> m_State;
    bool m_StateIsSet;
utility::string_t m_CalcMode;
    bool m_CalcModeIsSet;
double m_DiscountRateForMonoPhase;
    bool m_DiscountRateForMonoPhaseIsSet;
double m_Rate;
    bool m_RateIsSet;
double m_FcpRate;
    bool m_FcpRateIsSet;
double m_IcmsBaseDiscount;
    bool m_IcmsBaseDiscountIsSet;
double m_Msrp;
    bool m_MsrpIsSet;
double m_MvaRate;
    bool m_MvaRateIsSet;
utility::string_t m_MsrpUnit;
    bool m_MsrpUnitIsSet;
utility::string_t m_IcmsLegalReason;
    bool m_IcmsLegalReasonIsSet;
std::shared_ptr<IcmsConfInterState_icmsSTConf> m_IcmsSTConf;
    bool m_IcmsSTConfIsSet;
};

}
}
}
}

#endif /* IcmsConfInterState_H_ */
