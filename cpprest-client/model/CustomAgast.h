/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * CustomAgast.h
 *
 * 
 */

#ifndef CustomAgast_H_
#define CustomAgast_H_


#include "ModelBase.h"

#include "Agast_codeType.h"
#include "Agast_icmsConf.h"
#include "Agast.h"
#include <cpprest/details/basic_types.h>
#include "TaxTypeRate.h"
#include <vector>
#include "UUID.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  CustomAgast
    : public ModelBase
{
public:
    CustomAgast();
    virtual ~CustomAgast();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CustomAgast members

    /// <summary>
    /// Agast Code. AGAST (Avalara Goods and Services Types) are preset products with default tax definitions available to be used as provided or copied to create an specific comapany item.
    /// </summary>
    utility::string_t getCode() const;
    void setCode(utility::string_t value);
        /// <summary>
    /// Agast Description
    /// </summary>
    utility::string_t getDescription() const;
    void setDescription(utility::string_t value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// harmonized code, NCM or LC 116
    /// </summary>
    utility::string_t getHsCode() const;
    void setHsCode(utility::string_t value);
    bool hsCodeIsSet() const;
    void unsetHsCode();
    /// <summary>
    /// hsCode Exception for IPI tax
    /// </summary>
    int32_t getEx() const;
    void setEx(int32_t value);
    bool exIsSet() const;
    void unsetEx();
    /// <summary>
    /// tax substitution code - Codigo especificador da Substuicao Tributaria
    /// </summary>
    utility::string_t getCest() const;
    void setCest(utility::string_t value);
    bool cestIsSet() const;
    void unsetCest();
    /// <summary>
    /// GTIN NUMBER
    /// </summary>
    utility::string_t getCean() const;
    void setCean(utility::string_t value);
    bool ceanIsSet() const;
    void unsetCean();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Agast_codeType> getCodeType() const;
    void setCodeType(std::shared_ptr<Agast_codeType> value);
    bool codeTypeIsSet() const;
    void unsetCodeType();
    /// <summary>
    /// Inform if this process is subject to IPI taxation on output process - &#39;50&#39; # Saída Tributada - &#39;51&#39; # Saída Tributável com Alíquota Zero - &#39;52&#39; # Saída Isenta - &#39;53&#39; # Saída Não-Tributada - &#39;54&#39; # Saída Imune 
    /// </summary>
    utility::string_t getCstIPI() const;
    void setCstIPI(utility::string_t value);
    bool cstIPIIsSet() const;
    void unsetCstIPI();
    /// <summary>
    /// Legal tax classificação for IPI (enquadramento tributário) When the process has CST IPI 52 or 54, it is mandatory to inform a Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo&#x3D;mCnJajU4BKU&#x3D; 
    /// </summary>
    utility::string_t getIpiLegalTaxClass() const;
    void setIpiLegalTaxClass(utility::string_t value);
    bool ipiLegalTaxClassIsSet() const;
    void unsetIpiLegalTaxClass();
    /// <summary>
    /// when the company is Real Profit inform if this item is cumulative or no cumulative by default
    /// </summary>
    utility::string_t getPisCofinsTaxReporting() const;
    void setPisCofinsTaxReporting(utility::string_t value);
    bool pisCofinsTaxReportingIsSet() const;
    void unsetPisCofinsTaxReporting();
    /// <summary>
    /// Inform if this item by nature is subject to PIS taxation or exempt - &#39;T&#39; # TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;N&#39; # NO TAXABLE 
    /// </summary>
    utility::string_t getAccruablePISTaxation() const;
    void setAccruablePISTaxation(utility::string_t value);
    bool accruablePISTaxationIsSet() const;
    void unsetAccruablePISTaxation();
    /// <summary>
    /// Inform if this item by nature is subject to COFINS taxation or exempt - &#39;T&#39; # TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;N&#39; # NO TAXABLE 
    /// </summary>
    utility::string_t getAccruableCOFINSTaxation() const;
    void setAccruableCOFINSTaxation(utility::string_t value);
    bool accruableCOFINSTaxationIsSet() const;
    void unsetAccruableCOFINSTaxation();
    /// <summary>
    /// Inform if this item by nature is subject to CSLL taxation or exempt - &#39;T&#39; # TAXABLE - &#39;E&#39; # EXEMPT 
    /// </summary>
    utility::string_t getAccruableCSLLTaxation() const;
    void setAccruableCSLLTaxation(utility::string_t value);
    bool accruableCSLLTaxationIsSet() const;
    void unsetAccruableCSLLTaxation();
    /// <summary>
    /// for service items with City Jurisdiction, inform where the ISS tax is due
    /// </summary>
    bool getIssDueatDestination() const;
    void setIssDueatDestination(bool value);
    bool issDueatDestinationIsSet() const;
    void unsetIssDueatDestination();
    /// <summary>
    /// on Real Profit Purchase transaction, inform if this item allows tax credits when it is non-cumulative
    /// </summary>
    bool getPisCofinsCreditNotAllowed() const;
    void setPisCofinsCreditNotAllowed(bool value);
    bool pisCofinsCreditNotAllowedIsSet() const;
    void unsetPisCofinsCreditNotAllowed();
    /// <summary>
    /// - &#39;T&#39; # TAXABLE - TRIBUTÁVEL INCLUSIVE PARA EXPORTAÇÃO&#39; - &#39;E&#39; # TAXABLE WITH EXEMPTION FOR EXPORTS - ISENTO PARA SERVIÇOS PRESTADOS AO EXTERIOR (DEFAULT) - &#39;F&#39; # EXEMPT - &#39;A&#39; # SUSPENDED FOR ADMINISTRATIVE REASON - &#39;L&#39; # SUSPENDED FOR LEGAL DECISION - &#39;I&#39; # IMMUNE 
    /// </summary>
    utility::string_t getIssTaxation() const;
    void setIssTaxation(utility::string_t value);
    bool issTaxationIsSet() const;
    void unsetIssTaxation();
    /// <summary>
    /// This is an array of tax object related to an agast.
    /// </summary>
    std::vector<std::shared_ptr<TaxTypeRate>>& getFederalTaxRate();
    bool federalTaxRateIsSet() const;
    void unsetFederalTaxRate();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSpecialProductClass() const;
    void setSpecialProductClass(utility::string_t value);
    bool specialProductClassIsSet() const;
    void unsetSpecialProductClass();
    /// <summary>
    /// One per State
    /// </summary>
    std::vector<std::shared_ptr<Agast_icmsConf>>& getIcmsConf();
    bool icmsConfIsSet() const;
    void unsetIcmsConf();
    /// <summary>
    /// Company ID
    /// </summary>
    std::shared_ptr<UUID> getCompanyId() const;
    void setCompanyId(std::shared_ptr<UUID> value);
    
protected:
    utility::string_t m_Code;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
utility::string_t m_HsCode;
    bool m_HsCodeIsSet;
int32_t m_Ex;
    bool m_ExIsSet;
utility::string_t m_Cest;
    bool m_CestIsSet;
utility::string_t m_Cean;
    bool m_CeanIsSet;
std::shared_ptr<Agast_codeType> m_CodeType;
    bool m_CodeTypeIsSet;
utility::string_t m_CstIPI;
    bool m_CstIPIIsSet;
utility::string_t m_IpiLegalTaxClass;
    bool m_IpiLegalTaxClassIsSet;
utility::string_t m_PisCofinsTaxReporting;
    bool m_PisCofinsTaxReportingIsSet;
utility::string_t m_AccruablePISTaxation;
    bool m_AccruablePISTaxationIsSet;
utility::string_t m_AccruableCOFINSTaxation;
    bool m_AccruableCOFINSTaxationIsSet;
utility::string_t m_AccruableCSLLTaxation;
    bool m_AccruableCSLLTaxationIsSet;
bool m_IssDueatDestination;
    bool m_IssDueatDestinationIsSet;
bool m_PisCofinsCreditNotAllowed;
    bool m_PisCofinsCreditNotAllowedIsSet;
utility::string_t m_IssTaxation;
    bool m_IssTaxationIsSet;
std::vector<std::shared_ptr<TaxTypeRate>> m_FederalTaxRate;
    bool m_FederalTaxRateIsSet;
utility::string_t m_SpecialProductClass;
    bool m_SpecialProductClassIsSet;
std::vector<std::shared_ptr<Agast_icmsConf>> m_IcmsConf;
    bool m_IcmsConfIsSet;
std::shared_ptr<UUID> m_CompanyId;
    };

}
}
}
}

#endif /* CustomAgast_H_ */
