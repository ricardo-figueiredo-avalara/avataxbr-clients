/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PurchaseHeaderOut_payment.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PurchaseHeaderOut_payment::PurchaseHeaderOut_payment()
{
    m_TermsIsSet = false;
    m_WithholdingModeIsSet = false;
    m_InstallmentsIsSet = false;
    
}

PurchaseHeaderOut_payment::~PurchaseHeaderOut_payment()
{
}

void PurchaseHeaderOut_payment::validate()
{
    // TODO: implement validation
}

web::json::value PurchaseHeaderOut_payment::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TermsIsSet)
    {
        val[U("terms")] = ModelBase::toJson(m_Terms);
    }
    if(m_WithholdingModeIsSet)
    {
        val[U("withholdingMode")] = ModelBase::toJson(m_WithholdingMode);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Installments )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("installments")] = web::json::value::array(jsonArray);
        }
    }
    

    return val;
}

void PurchaseHeaderOut_payment::fromJson(web::json::value& val)
{
    if(val.has_field(U("terms")))
    {
        if(!val[U("terms")].is_null())
        {
            std::shared_ptr<PaymentTerms> newItem(new PaymentTerms());
            newItem->fromJson(val[U("terms")]);
            setTerms( newItem );
        }
        
    }
    if(val.has_field(U("withholdingMode")))
    {
        if(!val[U("withholdingMode")].is_null())
        {
            std::shared_ptr<WithholdingMode> newItem(new WithholdingMode());
            newItem->fromJson(val[U("withholdingMode")]);
            setWithholdingMode( newItem );
        }
        
    }
    {
        m_Installments.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("installments")))
        {
        for( auto& item : val[U("installments")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Installments.push_back( std::shared_ptr<InstallmentComplete>(nullptr) );
            }
            else
            {
                std::shared_ptr<InstallmentComplete> newItem(new InstallmentComplete());
                newItem->fromJson(item);
                m_Installments.push_back( newItem );
            }
            
        }
        }
    }
    
}

void PurchaseHeaderOut_payment::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_TermsIsSet)
    {
        if (m_Terms.get())
        {
            m_Terms->toMultipart(multipart, U("terms."));
        }
        
    }
    if(m_WithholdingModeIsSet)
    {
        if (m_WithholdingMode.get())
        {
            m_WithholdingMode->toMultipart(multipart, U("withholdingMode."));
        }
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Installments )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("installments"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    
}

void PurchaseHeaderOut_payment::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("terms")))
    {
        if(multipart->hasContent(U("terms")))
        {
            std::shared_ptr<PaymentTerms> newItem(new PaymentTerms());
            newItem->fromMultiPart(multipart, U("terms."));
            setTerms( newItem );
        }
        
    }
    if(multipart->hasContent(U("withholdingMode")))
    {
        if(multipart->hasContent(U("withholdingMode")))
        {
            std::shared_ptr<WithholdingMode> newItem(new WithholdingMode());
            newItem->fromMultiPart(multipart, U("withholdingMode."));
            setWithholdingMode( newItem );
        }
        
    }
    {
        m_Installments.clear();
        if(multipart->hasContent(U("installments")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("installments"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Installments.push_back( std::shared_ptr<InstallmentComplete>(nullptr) );
            }
            else
            {
                std::shared_ptr<InstallmentComplete> newItem(new InstallmentComplete());
                newItem->fromJson(item);
                m_Installments.push_back( newItem );
            }
            
        }
        }
    }
    
}


std::shared_ptr<PaymentTerms> PurchaseHeaderOut_payment::getTerms() const
{
    return m_Terms;
}
void PurchaseHeaderOut_payment::setTerms(std::shared_ptr<PaymentTerms> value)
{
    m_Terms = value;
    m_TermsIsSet = true;
}
bool PurchaseHeaderOut_payment::termsIsSet() const
{
    return m_TermsIsSet;
}
void PurchaseHeaderOut_payment::unsetTerms()
{
    m_TermsIsSet = false;
}
std::shared_ptr<WithholdingMode> PurchaseHeaderOut_payment::getWithholdingMode() const
{
    return m_WithholdingMode;
}
void PurchaseHeaderOut_payment::setWithholdingMode(std::shared_ptr<WithholdingMode> value)
{
    m_WithholdingMode = value;
    m_WithholdingModeIsSet = true;
}
bool PurchaseHeaderOut_payment::withholdingModeIsSet() const
{
    return m_WithholdingModeIsSet;
}
void PurchaseHeaderOut_payment::unsetWithholdingMode()
{
    m_WithholdingModeIsSet = false;
}
std::vector<std::shared_ptr<InstallmentComplete>>& PurchaseHeaderOut_payment::getInstallments()
{
    return m_Installments;
}
bool PurchaseHeaderOut_payment::installmentsIsSet() const
{
    return m_InstallmentsIsSet;
}
void PurchaseHeaderOut_payment::unsetInstallments()
{
    m_InstallmentsIsSet = false;
}

}
}
}
}

