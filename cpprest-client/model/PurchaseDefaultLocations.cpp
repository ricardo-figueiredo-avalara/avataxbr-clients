/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PurchaseDefaultLocations.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PurchaseDefaultLocations::PurchaseDefaultLocations()
{
    m_PointOfOrderOriginIsSet = false;
    
}

PurchaseDefaultLocations::~PurchaseDefaultLocations()
{
}

void PurchaseDefaultLocations::validate()
{
    // TODO: implement validation
}

web::json::value PurchaseDefaultLocations::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_PointOfOrderOriginIsSet)
    {
        val[U("PointOfOrderOrigin")] = ModelBase::toJson(m_PointOfOrderOrigin);
    }
    

    return val;
}

void PurchaseDefaultLocations::fromJson(web::json::value& val)
{
    if(val.has_field(U("PointOfOrderOrigin")))
    {
        if(!val[U("PointOfOrderOrigin")].is_null())
        {
            std::shared_ptr<PointOfOrderOrigin> newItem(new PointOfOrderOrigin());
            newItem->fromJson(val[U("PointOfOrderOrigin")]);
            setPointOfOrderOrigin( newItem );
        }
        
    }
    
}

void PurchaseDefaultLocations::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_PointOfOrderOriginIsSet)
    {
        if (m_PointOfOrderOrigin.get())
        {
            m_PointOfOrderOrigin->toMultipart(multipart, U("PointOfOrderOrigin."));
        }
        
    }
    
}

void PurchaseDefaultLocations::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("PointOfOrderOrigin")))
    {
        if(multipart->hasContent(U("PointOfOrderOrigin")))
        {
            std::shared_ptr<PointOfOrderOrigin> newItem(new PointOfOrderOrigin());
            newItem->fromMultiPart(multipart, U("PointOfOrderOrigin."));
            setPointOfOrderOrigin( newItem );
        }
        
    }
    
}


std::shared_ptr<PointOfOrderOrigin> PurchaseDefaultLocations::getPointOfOrderOrigin() const
{
    return m_PointOfOrderOrigin;
}
void PurchaseDefaultLocations::setPointOfOrderOrigin(std::shared_ptr<PointOfOrderOrigin> value)
{
    m_PointOfOrderOrigin = value;
    m_PointOfOrderOriginIsSet = true;
}
bool PurchaseDefaultLocations::PointOfOrderOriginIsSet() const
{
    return m_PointOfOrderOriginIsSet;
}
void PurchaseDefaultLocations::unsetPointOfOrderOrigin()
{
    m_PointOfOrderOriginIsSet = false;
}

}
}
}
}

