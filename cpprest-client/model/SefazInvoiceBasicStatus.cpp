/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SefazInvoiceBasicStatus.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SefazInvoiceBasicStatus::SefazInvoiceBasicStatus()
{
    m_Code = U("");
    m_CodeIsSet = false;
    m_Desc = U("");
    m_DescIsSet = false;
    
}

SefazInvoiceBasicStatus::~SefazInvoiceBasicStatus()
{
}

void SefazInvoiceBasicStatus::validate()
{
    // TODO: implement validation
}

web::json::value SefazInvoiceBasicStatus::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CodeIsSet)
    {
        val[U("code")] = ModelBase::toJson(m_Code);
    }
    if(m_DescIsSet)
    {
        val[U("desc")] = ModelBase::toJson(m_Desc);
    }
    

    return val;
}

void SefazInvoiceBasicStatus::fromJson(web::json::value& val)
{
    if(val.has_field(U("code")))
    {
        setCode(ModelBase::stringFromJson(val[U("code")]));
        
    }
    if(val.has_field(U("desc")))
    {
        setDesc(ModelBase::stringFromJson(val[U("desc")]));
        
    }
    
}

void SefazInvoiceBasicStatus::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("code"), m_Code));
        
    }
    if(m_DescIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("desc"), m_Desc));
        
    }
    
}

void SefazInvoiceBasicStatus::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("code")))
    {
        setCode(ModelBase::stringFromHttpContent(multipart->getContent(U("code"))));
        
    }
    if(multipart->hasContent(U("desc")))
    {
        setDesc(ModelBase::stringFromHttpContent(multipart->getContent(U("desc"))));
        
    }
    
}


utility::string_t SefazInvoiceBasicStatus::getCode() const
{
    return m_Code;
}
void SefazInvoiceBasicStatus::setCode(utility::string_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}
bool SefazInvoiceBasicStatus::codeIsSet() const
{
    return m_CodeIsSet;
}
void SefazInvoiceBasicStatus::unsetCode()
{
    m_CodeIsSet = false;
}
utility::string_t SefazInvoiceBasicStatus::getDesc() const
{
    return m_Desc;
}
void SefazInvoiceBasicStatus::setDesc(utility::string_t value)
{
    m_Desc = value;
    m_DescIsSet = true;
}
bool SefazInvoiceBasicStatus::descIsSet() const
{
    return m_DescIsSet;
}
void SefazInvoiceBasicStatus::unsetDesc()
{
    m_DescIsSet = false;
}

}
}
}
}

