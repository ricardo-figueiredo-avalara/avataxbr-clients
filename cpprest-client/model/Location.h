/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Location.h
 *
 * 
 */

#ifndef Location_H_
#define Location_H_


#include "ModelBase.h"

#include "Location_secondaryStateTaxId.h"
#include "StateEnum.h"
#include "Address.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "UUID.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Location
    : public ModelBase
{
public:
    Location();
    virtual ~Location();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Location members

    /// <summary>
    /// Street Name
    /// </summary>
    utility::string_t getStreet() const;
    void setStreet(utility::string_t value);
    bool streetIsSet() const;
    void unsetStreet();
    /// <summary>
    /// Neighborhood Name
    /// </summary>
    utility::string_t getNeighborhood() const;
    void setNeighborhood(utility::string_t value);
    bool neighborhoodIsSet() const;
    void unsetNeighborhood();
    /// <summary>
    /// Brazilian Zip Code
    /// </summary>
    utility::string_t getZipcode() const;
    void setZipcode(utility::string_t value);
        /// <summary>
    /// City Code (IBGE)
    /// </summary>
    utility::string_t getCityCode() const;
    void setCityCode(utility::string_t value);
    bool cityCodeIsSet() const;
    void unsetCityCode();
    /// <summary>
    /// City Name
    /// </summary>
    utility::string_t getCityName() const;
    void setCityName(utility::string_t value);
    bool cityNameIsSet() const;
    void unsetCityName();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<StateEnum> getState() const;
    void setState(std::shared_ptr<StateEnum> value);
    bool stateIsSet() const;
    void unsetState();
    /// <summary>
    /// Country Code
    /// </summary>
    utility::string_t getCountryCode() const;
    void setCountryCode(utility::string_t value);
    bool countryCodeIsSet() const;
    void unsetCountryCode();
    /// <summary>
    /// Use ISO 3166-1 alpha-3 codes
    /// </summary>
    utility::string_t getCountry() const;
    void setCountry(utility::string_t value);
    bool countryIsSet() const;
    void unsetCountry();
    /// <summary>
    /// House number
    /// </summary>
    utility::string_t getNumber() const;
    void setNumber(utility::string_t value);
    bool numberIsSet() const;
    void unsetNumber();
    /// <summary>
    /// Any other information about the address (Room, Suite, Floor, etc)).
    /// </summary>
    utility::string_t getComplement() const;
    void setComplement(utility::string_t value);
    bool complementIsSet() const;
    void unsetComplement();
    /// <summary>
    /// Phone number
    /// </summary>
    utility::string_t getPhone() const;
    void setPhone(utility::string_t value);
    bool phoneIsSet() const;
    void unsetPhone();
    /// <summary>
    /// Company ID
    /// </summary>
    std::shared_ptr<UUID> getCompanyId() const;
    void setCompanyId(std::shared_ptr<UUID> value);
        /// <summary>
    /// this property identify the location, it is unique for this company
    /// </summary>
    utility::string_t getCode() const;
    void setCode(utility::string_t value);
        /// <summary>
    /// this property identify the location, it is unique for this company
    /// </summary>
    utility::string_t getType() const;
    void setType(utility::string_t value);
        /// <summary>
    /// Email
    /// </summary>
    utility::string_t getEmail() const;
    void setEmail(utility::string_t value);
    bool emailIsSet() const;
    void unsetEmail();
    /// <summary>
    /// Federal tax id, CNPJ or CPF
    /// </summary>
    utility::string_t getFederalTaxId() const;
    void setFederalTaxId(utility::string_t value);
    bool federalTaxIdIsSet() const;
    void unsetFederalTaxId();
    /// <summary>
    /// state tax id for this location
    /// </summary>
    utility::string_t getStateTaxId() const;
    void setStateTaxId(utility::string_t value);
    bool stateTaxIdIsSet() const;
    void unsetStateTaxId();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Location_secondaryStateTaxId>>& getSecondaryStateTaxId();
    bool secondaryStateTaxIdIsSet() const;
    void unsetSecondaryStateTaxId();
    /// <summary>
    /// City Tax ID
    /// </summary>
    utility::string_t getCityTaxId() const;
    void setCityTaxId(utility::string_t value);
    bool cityTaxIdIsSet() const;
    void unsetCityTaxId();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSuframa() const;
    void setSuframa(utility::string_t value);
    bool suframaIsSet() const;
    void unsetSuframa();
    /// <summary>
    /// Main location activity
    /// </summary>
    utility::string_t getMainActivity() const;
    void setMainActivity(utility::string_t value);
    bool mainActivityIsSet() const;
    void unsetMainActivity();
    /// <summary>
    /// - &#39;edi&#39; # City hall has web service and the integration is automatic - &#39;xml&#39; # Create RPS specific to City, bat does not have webservice integration - &#39;rps&#39; # Create a generic RPS, NF is by hands 
    /// </summary>
    utility::string_t getNfseProcessModel() const;
    void setNfseProcessModel(utility::string_t value);
    bool nfseProcessModelIsSet() const;
    void unsetNfseProcessModel();

protected:
    utility::string_t m_Street;
    bool m_StreetIsSet;
utility::string_t m_Neighborhood;
    bool m_NeighborhoodIsSet;
utility::string_t m_Zipcode;
    utility::string_t m_CityCode;
    bool m_CityCodeIsSet;
utility::string_t m_CityName;
    bool m_CityNameIsSet;
std::shared_ptr<StateEnum> m_State;
    bool m_StateIsSet;
utility::string_t m_CountryCode;
    bool m_CountryCodeIsSet;
utility::string_t m_Country;
    bool m_CountryIsSet;
utility::string_t m_Number;
    bool m_NumberIsSet;
utility::string_t m_Complement;
    bool m_ComplementIsSet;
utility::string_t m_Phone;
    bool m_PhoneIsSet;
std::shared_ptr<UUID> m_CompanyId;
    utility::string_t m_Code;
    utility::string_t m_Type;
    utility::string_t m_Email;
    bool m_EmailIsSet;
utility::string_t m_FederalTaxId;
    bool m_FederalTaxIdIsSet;
utility::string_t m_StateTaxId;
    bool m_StateTaxIdIsSet;
std::vector<std::shared_ptr<Location_secondaryStateTaxId>> m_SecondaryStateTaxId;
    bool m_SecondaryStateTaxIdIsSet;
utility::string_t m_CityTaxId;
    bool m_CityTaxIdIsSet;
utility::string_t m_Suframa;
    bool m_SuframaIsSet;
utility::string_t m_MainActivity;
    bool m_MainActivityIsSet;
utility::string_t m_NfseProcessModel;
    bool m_NfseProcessModelIsSet;
};

}
}
}
}

#endif /* Location_H_ */
