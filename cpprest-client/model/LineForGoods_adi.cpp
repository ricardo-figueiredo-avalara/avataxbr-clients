/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LineForGoods_adi.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

LineForGoods_adi::LineForGoods_adi()
{
    m_AddNumber = 0;
    m_SequentialNumber = 0;
    m_ManufacturerCode = U("");
    m_AdiDiscount = 0.0;
    m_AdiDiscountIsSet = false;
    m_DrawbackNumber = U("");
    m_DrawbackNumberIsSet = false;
    
}

LineForGoods_adi::~LineForGoods_adi()
{
}

void LineForGoods_adi::validate()
{
    // TODO: implement validation
}

web::json::value LineForGoods_adi::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("addNumber")] = ModelBase::toJson(m_AddNumber);
    val[U("sequentialNumber")] = ModelBase::toJson(m_SequentialNumber);
    val[U("manufacturerCode")] = ModelBase::toJson(m_ManufacturerCode);
    if(m_AdiDiscountIsSet)
    {
        val[U("adiDiscount")] = ModelBase::toJson(m_AdiDiscount);
    }
    if(m_DrawbackNumberIsSet)
    {
        val[U("drawbackNumber")] = ModelBase::toJson(m_DrawbackNumber);
    }
    

    return val;
}

void LineForGoods_adi::fromJson(web::json::value& val)
{
    setAddNumber(ModelBase::int32_tFromJson(val[U("addNumber")]));
    setSequentialNumber(ModelBase::int32_tFromJson(val[U("sequentialNumber")]));
    setManufacturerCode(ModelBase::stringFromJson(val[U("manufacturerCode")]));
    if(val.has_field(U("adiDiscount")))
    {
        setAdiDiscount(ModelBase::doubleFromJson(val[U("adiDiscount")]));
    }
    if(val.has_field(U("drawbackNumber")))
    {
        setDrawbackNumber(ModelBase::stringFromJson(val[U("drawbackNumber")]));
        
    }
    
}

void LineForGoods_adi::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("addNumber"), m_AddNumber));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("sequentialNumber"), m_SequentialNumber));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("manufacturerCode"), m_ManufacturerCode));
    if(m_AdiDiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("adiDiscount"), m_AdiDiscount));
    }
    if(m_DrawbackNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("drawbackNumber"), m_DrawbackNumber));
        
    }
    
}

void LineForGoods_adi::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setAddNumber(ModelBase::int32_tFromHttpContent(multipart->getContent(U("addNumber"))));
    setSequentialNumber(ModelBase::int32_tFromHttpContent(multipart->getContent(U("sequentialNumber"))));
    setManufacturerCode(ModelBase::stringFromHttpContent(multipart->getContent(U("manufacturerCode"))));
    if(multipart->hasContent(U("adiDiscount")))
    {
        setAdiDiscount(ModelBase::doubleFromHttpContent(multipart->getContent(U("adiDiscount"))));
    }
    if(multipart->hasContent(U("drawbackNumber")))
    {
        setDrawbackNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("drawbackNumber"))));
        
    }
    
}


int32_t LineForGoods_adi::getAddNumber() const
{
    return m_AddNumber;
}
void LineForGoods_adi::setAddNumber(int32_t value)
{
    m_AddNumber = value;
    
}
int32_t LineForGoods_adi::getSequentialNumber() const
{
    return m_SequentialNumber;
}
void LineForGoods_adi::setSequentialNumber(int32_t value)
{
    m_SequentialNumber = value;
    
}
utility::string_t LineForGoods_adi::getManufacturerCode() const
{
    return m_ManufacturerCode;
}
void LineForGoods_adi::setManufacturerCode(utility::string_t value)
{
    m_ManufacturerCode = value;
    
}
double LineForGoods_adi::getAdiDiscount() const
{
    return m_AdiDiscount;
}
void LineForGoods_adi::setAdiDiscount(double value)
{
    m_AdiDiscount = value;
    m_AdiDiscountIsSet = true;
}
bool LineForGoods_adi::adiDiscountIsSet() const
{
    return m_AdiDiscountIsSet;
}
void LineForGoods_adi::unsetAdiDiscount()
{
    m_AdiDiscountIsSet = false;
}
utility::string_t LineForGoods_adi::getDrawbackNumber() const
{
    return m_DrawbackNumber;
}
void LineForGoods_adi::setDrawbackNumber(utility::string_t value)
{
    m_DrawbackNumber = value;
    m_DrawbackNumberIsSet = true;
}
bool LineForGoods_adi::drawbackNumberIsSet() const
{
    return m_DrawbackNumberIsSet;
}
void LineForGoods_adi::unsetDrawbackNumber()
{
    m_DrawbackNumberIsSet = false;
}

}
}
}
}

