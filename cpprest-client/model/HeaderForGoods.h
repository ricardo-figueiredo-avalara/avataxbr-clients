/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * HeaderForGoods.h
 *
 * 
 */

#ifndef HeaderForGoods_H_
#define HeaderForGoods_H_


#include "ModelBase.h"

#include "PurchaseInfo.h"
#include "NRef.h"
#include "Transport.h"
#include "HeaderForGoods_participants.h"
#include "Payment.h"
#include <cpprest/details/basic_types.h>
#include "AdditionalInformation.h"
#include "DefaultLocations.h"
#include "ExportInfo.h"
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  HeaderForGoods
    : public ModelBase
{
public:
    HeaderForGoods();
    virtual ~HeaderForGoods();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// HeaderForGoods members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMessageType() const;
    void setMessageType(utility::string_t value);
    bool messageTypeIsSet() const;
    void unsetMessageType();
    /// <summary>
    /// This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode on the next line.
    /// </summary>
    utility::string_t getAccountId() const;
    void setAccountId(utility::string_t value);
        /// <summary>
    /// string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company
    /// </summary>
    utility::string_t getCompanyCode() const;
    void setCompanyCode(utility::string_t value);
        /// <summary>
    /// This string is a code maintained by the client application to uniquely identify a document in the client&#39;s systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc. When has this field, the transaction will be stored
    /// </summary>
    utility::string_t getDocumentCode() const;
    void setDocumentCode(utility::string_t value);
    bool documentCodeIsSet() const;
    void unsetDocumentCode();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<HeaderForGoods_participants> getParticipants() const;
    void setParticipants(std::shared_ptr<HeaderForGoods_participants> value);
    bool participantsIsSet() const;
    void unsetParticipants();
    /// <summary>
    /// This is the public NF id. With this number is possible get invoice information directly from government.
    /// </summary>
    utility::string_t getNfAccessKey() const;
    void setNfAccessKey(utility::string_t value);
    bool nfAccessKeyIsSet() const;
    void unsetNfAccessKey();
    /// <summary>
    /// qr code printed on DANFE;
    /// </summary>
    utility::string_t getNfceQrCode() const;
    void setNfceQrCode(utility::string_t value);
    bool nfceQrCodeIsSet() const;
    void unsetNfceQrCode();
    /// <summary>
    /// This string indicates the type of transaction for which tax should be calculated.
    /// </summary>
    utility::string_t getTransactionType() const;
    void setTransactionType(utility::string_t value);
        /// <summary>
    /// This string indicates the type of transaction for which tax should be calculated. - &#39;01&#39; # Nota Fiscal 1/1A - &#39;1B&#39; # Nota Fiscal Avulsa - &#39;02&#39; # Nota Fiscal de Venda a-Consumidor - &#39;2D&#39; # Cupom Fiscal - &#39;2E&#39; # Cupom Fiscal-Bilhete de Passagem - &#39;04&#39; # Nota Fiscal de Produtor - &#39;06&#39; # Nota Fiscal/Conta de Energia Elétrica - &#39;07&#39; # Nota Fiscal de Serviço de Transporte - &#39;08&#39; # Conhecimento de Transporte Rodoviário de-Cargas - &#39;8B&#39; # Conhecimento de Transporte de-Cargas Avulso - &#39;09&#39; # Conhecimento de Transporte Aquaviário de-Cargas - &#39;10&#39; # Conhecimento Aéreo - &#39;11&#39; # Conhecimento de Transporte Ferroviário de-Cargas - &#39;13&#39; # Bilhete de Passagem Rodoviário - &#39;14&#39; # Bilhete de Passagem Aquaviário - &#39;15&#39; # Bilhete de Passagem e-Nota de-Bagagem - &#39;16&#39; # Bilhete de Passagem Ferroviário - &#39;18&#39; # Resumo de Movimento Diário - &#39;21&#39; # Nota Fiscal de Serviço de-Comunicação - &#39;22&#39; # Nota Fiscal de Serviço de Telecomunicação - &#39;26&#39; # Conhecimento de Transporte Multimodal de-Cargas - &#39;27&#39; # Nota Fiscal De Transporte Ferroviário De-Carga - &#39;28&#39; # Nota Fiscal/Conta de Fornecimento de Gás-Canalizado - &#39;29&#39; # Nota Fiscal/Conta de Fornecimento de Água-Canalizada - &#39;55&#39; # Nota Fiscal Eletrônica (NF-e) - &#39;57&#39; # Conhecimento de Transporte Eletrônico (CT-e) - &#39;59&#39; # Cupom Fiscal Eletrônico (CF-e-SAT) - &#39;60&#39; # Cupom Fiscal Eletrônico (CF-e-ECF) - &#39;65&#39; # Nota Fiscal Eletrônica ao-Consumidor Final (NFC-e) 
    /// </summary>
    utility::string_t getTransactionModel() const;
    void setTransactionModel(utility::string_t value);
        /// <summary>
    /// Natureza da Opreração - &#39;Describe kind of this transaction, summary
    /// </summary>
    utility::string_t getTransactionClass() const;
    void setTransactionClass(utility::string_t value);
    bool transactionClassIsSet() const;
    void unsetTransactionClass();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEDocCreatorType() const;
    void setEDocCreatorType(utility::string_t value);
        /// <summary>
    /// This Flag is used only when eDocCreatorType is other and the return show Taxes using eDocCreator perspective or self perspective.
    /// </summary>
    bool getEDocCreatorPerspective() const;
    void setEDocCreatorPerspective(bool value);
    bool eDocCreatorPerspectiveIsSet() const;
    void unsetEDocCreatorPerspective();
    /// <summary>
    /// This string is a code maintained by the client application and recorded in CUP to uniquely identify the party with whom the company (identified by companyCode) is transacting. It is unique within the context of a Company.
    /// </summary>
    utility::string_t getEntityCode() const;
    void setEntityCode(utility::string_t value);
        /// <summary>
    /// currency code
    /// </summary>
    utility::string_t getCurrency() const;
    void setCurrency(utility::string_t value);
        /// <summary>
    /// This string contains a previously configured company code which may also have codes needed for tax return purposes. These codes are maintained through the customer portal. Main company address identity
    /// </summary>
    utility::string_t getCompanyLocation() const;
    void setCompanyLocation(utility::string_t value);
        /// <summary>
    /// This string is the transaction date in ISO 8601 format, create transaction date
    /// </summary>
    utility::string_t getTransactionDate() const;
    void setTransactionDate(utility::string_t value);
        /// <summary>
    /// This string is the transaction date in ISO 8601 format, when products were shipped, can be empty or absent
    /// </summary>
    utility::string_t getShippingDate() const;
    void setShippingDate(utility::string_t value);
    bool shippingDateIsSet() const;
    void unsetShippingDate();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AdditionalInformation> getAdditionalInfo() const;
    void setAdditionalInfo(std::shared_ptr<AdditionalInformation> value);
    bool additionalInfoIsSet() const;
    void unsetAdditionalInfo();
    /// <summary>
    /// how the document will be printed - &#39;0&#39; # without DANFE; - &#39;1&#39; # DANFe Letter; - &#39;2&#39; # DANFe Landscape; - &#39;3&#39; # DANFe Simplified; - &#39;4&#39; # DANFe NFC-e; - &#39;5&#39; # DANFe NFC-e e-mail 
    /// </summary>
    utility::string_t getTpImp() const;
    void setTpImp(utility::string_t value);
    bool tpImpIsSet() const;
    void unsetTpImp();
    /// <summary>
    /// This indicator inform transaction target place, when is AUTOMATIC the company address and entity address are analyzed to identify type of transaction target place 1- same state; 2 - interstate; 3-with exterior. Exist some cases where is necessary force this situation like when buyer from another state buy something in loco, the address are from different states, but transaction no.  Identificador de Local de destino da operação, na opção AUTOMATIC endereços da Companhia e da entidade destino são analisados para saber se é uma operação dentro do mesmo estado, interestadual ou com o exterior. Há situações onde é necessário forçar este indicador como por exemplo  Quando uma pessoa com endereço em outro estado, compra uma mercadoria de forma presencial, é uma operação interna apesar dos endereços dos envolvidos estarem em estados distintos. - 0 # AUTOMATIC - DEFAULT - 1 # Interna; - 2 # Interestadual; - 3 # Exterior) 
    /// </summary>
    int32_t getIdDest() const;
    void setIdDest(int32_t value);
    bool idDestIsSet() const;
    void unsetIdDest();
    /// <summary>
    /// Presence indicator - &#39;0&#39; # Not applicable - &#39;1&#39; # Presential; - &#39;2&#39; # Remote, internet; - &#39;3&#39; # Remote, phone; - &#39;4&#39; # NFC-e home delivery; - &#39;9&#39; # Remote, others 
    /// </summary>
    utility::string_t getIndPres() const;
    void setIndPres(utility::string_t value);
    bool indPresIsSet() const;
    void unsetIndPres();
    /// <summary>
    /// Invoice number, sequential unique by invoice serial (Número da nota fiscal)
    /// </summary>
    int32_t getInvoiceNumber() const;
    void setInvoiceNumber(int32_t value);
        /// <summary>
    /// Invoice number, sequential unique by invoice serial (Número da nota fiscal) 
    /// </summary>
    int32_t getInvoiceSerial() const;
    void setInvoiceSerial(int32_t value);
        /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DefaultLocations> getDefaultLocations() const;
    void setDefaultLocations(std::shared_ptr<DefaultLocations> value);
    bool defaultLocationsIsSet() const;
    void unsetDefaultLocations();
    /// <summary>
    /// Shipment
    /// </summary>
    std::shared_ptr<Transport> getTransport() const;
    void setTransport(std::shared_ptr<Transport> value);
    bool transportIsSet() const;
    void unsetTransport();
    /// <summary>
    /// Transactions or other invoices referenced
    /// </summary>
    std::vector<std::shared_ptr<NRef>>& getNfRef();
    bool nfRefIsSet() const;
    void unsetNfRef();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Payment> getPayment() const;
    void setPayment(std::shared_ptr<Payment> value);
        /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PurchaseInfo> getPurchaseInfo() const;
    void setPurchaseInfo(std::shared_ptr<PurchaseInfo> value);
    bool purchaseInfoIsSet() const;
    void unsetPurchaseInfo();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ExportInfo> getExport() const;
    void setExport(std::shared_ptr<ExportInfo> value);
    bool exportIsSet() const;
    void unsetExport();

protected:
    utility::string_t m_MessageType;
    bool m_MessageTypeIsSet;
utility::string_t m_AccountId;
    utility::string_t m_CompanyCode;
    utility::string_t m_DocumentCode;
    bool m_DocumentCodeIsSet;
std::shared_ptr<HeaderForGoods_participants> m_Participants;
    bool m_ParticipantsIsSet;
utility::string_t m_NfAccessKey;
    bool m_NfAccessKeyIsSet;
utility::string_t m_NfceQrCode;
    bool m_NfceQrCodeIsSet;
utility::string_t m_TransactionType;
    utility::string_t m_TransactionModel;
    utility::string_t m_TransactionClass;
    bool m_TransactionClassIsSet;
utility::string_t m_EDocCreatorType;
    bool m_EDocCreatorPerspective;
    bool m_EDocCreatorPerspectiveIsSet;
utility::string_t m_EntityCode;
    utility::string_t m_Currency;
    utility::string_t m_CompanyLocation;
    utility::string_t m_TransactionDate;
    utility::string_t m_ShippingDate;
    bool m_ShippingDateIsSet;
std::shared_ptr<AdditionalInformation> m_AdditionalInfo;
    bool m_AdditionalInfoIsSet;
utility::string_t m_TpImp;
    bool m_TpImpIsSet;
int32_t m_IdDest;
    bool m_IdDestIsSet;
utility::string_t m_IndPres;
    bool m_IndPresIsSet;
int32_t m_InvoiceNumber;
    int32_t m_InvoiceSerial;
    std::shared_ptr<DefaultLocations> m_DefaultLocations;
    bool m_DefaultLocationsIsSet;
std::shared_ptr<Transport> m_Transport;
    bool m_TransportIsSet;
std::vector<std::shared_ptr<NRef>> m_NfRef;
    bool m_NfRefIsSet;
std::shared_ptr<Payment> m_Payment;
    std::shared_ptr<PurchaseInfo> m_PurchaseInfo;
    bool m_PurchaseInfoIsSet;
std::shared_ptr<ExportInfo> m_Export;
    bool m_ExportIsSet;
};

}
}
}
}

#endif /* HeaderForGoods_H_ */
