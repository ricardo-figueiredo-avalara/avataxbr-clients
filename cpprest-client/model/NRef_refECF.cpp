/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NRef_refECF.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

NRef_refECF::NRef_refECF()
{
    m_NECF = U("");
    m_NCOO = U("");
    m_ModECF = U("");
    
}

NRef_refECF::~NRef_refECF()
{
}

void NRef_refECF::validate()
{
    // TODO: implement validation
}

web::json::value NRef_refECF::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("nECF")] = ModelBase::toJson(m_NECF);
    val[U("nCOO")] = ModelBase::toJson(m_NCOO);
    val[U("modECF")] = ModelBase::toJson(m_ModECF);
    

    return val;
}

void NRef_refECF::fromJson(web::json::value& val)
{
    setNECF(ModelBase::stringFromJson(val[U("nECF")]));
    setNCOO(ModelBase::stringFromJson(val[U("nCOO")]));
    setModECF(ModelBase::stringFromJson(val[U("modECF")]));
    
}

void NRef_refECF::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("nECF"), m_NECF));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("nCOO"), m_NCOO));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("modECF"), m_ModECF));
    
}

void NRef_refECF::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setNECF(ModelBase::stringFromHttpContent(multipart->getContent(U("nECF"))));
    setNCOO(ModelBase::stringFromHttpContent(multipart->getContent(U("nCOO"))));
    setModECF(ModelBase::stringFromHttpContent(multipart->getContent(U("modECF"))));
    
}


utility::string_t NRef_refECF::getNECF() const
{
    return m_NECF;
}
void NRef_refECF::setNECF(utility::string_t value)
{
    m_NECF = value;
    
}
utility::string_t NRef_refECF::getNCOO() const
{
    return m_NCOO;
}
void NRef_refECF::setNCOO(utility::string_t value)
{
    m_NCOO = value;
    
}
utility::string_t NRef_refECF::getModECF() const
{
    return m_ModECF;
}
void NRef_refECF::setModECF(utility::string_t value)
{
    m_ModECF = value;
    
}

}
}
}
}

