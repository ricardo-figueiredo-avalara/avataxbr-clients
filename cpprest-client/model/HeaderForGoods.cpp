/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "HeaderForGoods.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

HeaderForGoods::HeaderForGoods()
{
    m_MessageType = U("");
    m_MessageTypeIsSet = false;
    m_AccountId = U("");
    m_CompanyCode = U("");
    m_DocumentCode = U("");
    m_DocumentCodeIsSet = false;
    m_ParticipantsIsSet = false;
    m_NfAccessKey = U("");
    m_NfAccessKeyIsSet = false;
    m_NfceQrCode = U("");
    m_NfceQrCodeIsSet = false;
    m_TransactionType = U("");
    m_TransactionModel = U("");
    m_TransactionModelIsSet = false;
    m_TransactionClass = U("");
    m_TransactionClassIsSet = false;
    m_EDocCreatorType = U("");
    m_EDocCreatorPerspective = false;
    m_EDocCreatorPerspectiveIsSet = false;
    m_EntityCode = U("");
    m_EntityCodeIsSet = false;
    m_Currency = U("");
    m_CurrencyIsSet = false;
    m_CompanyLocation = U("");
    m_TransactionDate = U("");
    m_TransactionDateIsSet = false;
    m_ShippingDate = U("");
    m_ShippingDateIsSet = false;
    m_AdditionalInfoIsSet = false;
    m_TpImp = U("");
    m_TpImpIsSet = false;
    m_IdDest = 0;
    m_IdDestIsSet = false;
    m_IndPres = U("");
    m_IndPresIsSet = false;
    m_InvoiceNumber = 0;
    m_InvoiceNumberIsSet = false;
    m_InvoiceSerial = 0;
    m_InvoiceSerialIsSet = false;
    m_DefaultLocationsIsSet = false;
    m_TransportIsSet = false;
    m_NfRefIsSet = false;
    m_PaymentIsSet = false;
    m_PurchaseInfoIsSet = false;
    m_ExportIsSet = false;
    
}

HeaderForGoods::~HeaderForGoods()
{
}

void HeaderForGoods::validate()
{
    // TODO: implement validation
}

web::json::value HeaderForGoods::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_MessageTypeIsSet)
    {
        val[U("messageType")] = ModelBase::toJson(m_MessageType);
    }
    val[U("accountId")] = ModelBase::toJson(m_AccountId);
    val[U("companyCode")] = ModelBase::toJson(m_CompanyCode);
    if(m_DocumentCodeIsSet)
    {
        val[U("documentCode")] = ModelBase::toJson(m_DocumentCode);
    }
    if(m_ParticipantsIsSet)
    {
        val[U("participants")] = ModelBase::toJson(m_Participants);
    }
    if(m_NfAccessKeyIsSet)
    {
        val[U("nfAccessKey")] = ModelBase::toJson(m_NfAccessKey);
    }
    if(m_NfceQrCodeIsSet)
    {
        val[U("nfceQrCode")] = ModelBase::toJson(m_NfceQrCode);
    }
    val[U("transactionType")] = ModelBase::toJson(m_TransactionType);
    if(m_TransactionModelIsSet)
    {
        val[U("transactionModel")] = ModelBase::toJson(m_TransactionModel);
    }
    if(m_TransactionClassIsSet)
    {
        val[U("transactionClass")] = ModelBase::toJson(m_TransactionClass);
    }
    val[U("eDocCreatorType")] = ModelBase::toJson(m_EDocCreatorType);
    if(m_EDocCreatorPerspectiveIsSet)
    {
        val[U("eDocCreatorPerspective")] = ModelBase::toJson(m_EDocCreatorPerspective);
    }
    if(m_EntityCodeIsSet)
    {
        val[U("entityCode")] = ModelBase::toJson(m_EntityCode);
    }
    if(m_CurrencyIsSet)
    {
        val[U("currency")] = ModelBase::toJson(m_Currency);
    }
    val[U("companyLocation")] = ModelBase::toJson(m_CompanyLocation);
    if(m_TransactionDateIsSet)
    {
        val[U("transactionDate")] = ModelBase::toJson(m_TransactionDate);
    }
    if(m_ShippingDateIsSet)
    {
        val[U("shippingDate")] = ModelBase::toJson(m_ShippingDate);
    }
    if(m_AdditionalInfoIsSet)
    {
        val[U("additionalInfo")] = ModelBase::toJson(m_AdditionalInfo);
    }
    if(m_TpImpIsSet)
    {
        val[U("tpImp")] = ModelBase::toJson(m_TpImp);
    }
    if(m_IdDestIsSet)
    {
        val[U("idDest")] = ModelBase::toJson(m_IdDest);
    }
    if(m_IndPresIsSet)
    {
        val[U("indPres")] = ModelBase::toJson(m_IndPres);
    }
    if(m_InvoiceNumberIsSet)
    {
        val[U("invoiceNumber")] = ModelBase::toJson(m_InvoiceNumber);
    }
    if(m_InvoiceSerialIsSet)
    {
        val[U("invoiceSerial")] = ModelBase::toJson(m_InvoiceSerial);
    }
    if(m_DefaultLocationsIsSet)
    {
        val[U("defaultLocations")] = ModelBase::toJson(m_DefaultLocations);
    }
    if(m_TransportIsSet)
    {
        val[U("transport")] = ModelBase::toJson(m_Transport);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_NfRef )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("nfRef")] = web::json::value::array(jsonArray);
        }
    }
    if(m_PaymentIsSet)
    {
        val[U("payment")] = ModelBase::toJson(m_Payment);
    }
    if(m_PurchaseInfoIsSet)
    {
        val[U("purchaseInfo")] = ModelBase::toJson(m_PurchaseInfo);
    }
    if(m_ExportIsSet)
    {
        val[U("export")] = ModelBase::toJson(m_Export);
    }
    

    return val;
}

void HeaderForGoods::fromJson(web::json::value& val)
{
    if(val.has_field(U("messageType")))
    {
        setMessageType(ModelBase::stringFromJson(val[U("messageType")]));
        
    }
    setAccountId(ModelBase::stringFromJson(val[U("accountId")]));
    setCompanyCode(ModelBase::stringFromJson(val[U("companyCode")]));
    if(val.has_field(U("documentCode")))
    {
        setDocumentCode(ModelBase::stringFromJson(val[U("documentCode")]));
        
    }
    if(val.has_field(U("participants")))
    {
        if(!val[U("participants")].is_null())
        {
            std::shared_ptr<HeaderForGoods_participants> newItem(new HeaderForGoods_participants());
            newItem->fromJson(val[U("participants")]);
            setParticipants( newItem );
        }
        
    }
    if(val.has_field(U("nfAccessKey")))
    {
        setNfAccessKey(ModelBase::stringFromJson(val[U("nfAccessKey")]));
        
    }
    if(val.has_field(U("nfceQrCode")))
    {
        setNfceQrCode(ModelBase::stringFromJson(val[U("nfceQrCode")]));
        
    }
    setTransactionType(ModelBase::stringFromJson(val[U("transactionType")]));
    if(val.has_field(U("transactionModel")))
    {
        setTransactionModel(ModelBase::stringFromJson(val[U("transactionModel")]));
        
    }
    if(val.has_field(U("transactionClass")))
    {
        setTransactionClass(ModelBase::stringFromJson(val[U("transactionClass")]));
        
    }
    setEDocCreatorType(ModelBase::stringFromJson(val[U("eDocCreatorType")]));
    if(val.has_field(U("eDocCreatorPerspective")))
    {
        setEDocCreatorPerspective(ModelBase::boolFromJson(val[U("eDocCreatorPerspective")]));
    }
    if(val.has_field(U("entityCode")))
    {
        setEntityCode(ModelBase::stringFromJson(val[U("entityCode")]));
        
    }
    if(val.has_field(U("currency")))
    {
        setCurrency(ModelBase::stringFromJson(val[U("currency")]));
        
    }
    setCompanyLocation(ModelBase::stringFromJson(val[U("companyLocation")]));
    if(val.has_field(U("transactionDate")))
    {
        setTransactionDate(ModelBase::stringFromJson(val[U("transactionDate")]));
        
    }
    if(val.has_field(U("shippingDate")))
    {
        setShippingDate(ModelBase::stringFromJson(val[U("shippingDate")]));
        
    }
    if(val.has_field(U("additionalInfo")))
    {
        if(!val[U("additionalInfo")].is_null())
        {
            std::shared_ptr<AdditionalInformation> newItem(new AdditionalInformation());
            newItem->fromJson(val[U("additionalInfo")]);
            setAdditionalInfo( newItem );
        }
        
    }
    if(val.has_field(U("tpImp")))
    {
        setTpImp(ModelBase::stringFromJson(val[U("tpImp")]));
        
    }
    if(val.has_field(U("idDest")))
    {
        setIdDest(ModelBase::int32_tFromJson(val[U("idDest")]));
    }
    if(val.has_field(U("indPres")))
    {
        setIndPres(ModelBase::stringFromJson(val[U("indPres")]));
        
    }
    if(val.has_field(U("invoiceNumber")))
    {
        setInvoiceNumber(ModelBase::int32_tFromJson(val[U("invoiceNumber")]));
    }
    if(val.has_field(U("invoiceSerial")))
    {
        setInvoiceSerial(ModelBase::int32_tFromJson(val[U("invoiceSerial")]));
    }
    if(val.has_field(U("defaultLocations")))
    {
        if(!val[U("defaultLocations")].is_null())
        {
            std::shared_ptr<DefaultLocations> newItem(new DefaultLocations());
            newItem->fromJson(val[U("defaultLocations")]);
            setDefaultLocations( newItem );
        }
        
    }
    if(val.has_field(U("transport")))
    {
        if(!val[U("transport")].is_null())
        {
            std::shared_ptr<Transport> newItem(new Transport());
            newItem->fromJson(val[U("transport")]);
            setTransport( newItem );
        }
        
    }
    {
        m_NfRef.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("nfRef")))
        {
        for( auto& item : val[U("nfRef")].as_array() )
        {
            
            if(item.is_null())
            {
                m_NfRef.push_back( std::shared_ptr<NRef>(nullptr) );
            }
            else
            {
                std::shared_ptr<NRef> newItem(new NRef());
                newItem->fromJson(item);
                m_NfRef.push_back( newItem );
            }
            
        }
        }
    }
    if(val.has_field(U("payment")))
    {
        if(!val[U("payment")].is_null())
        {
            std::shared_ptr<Payment> newItem(new Payment());
            newItem->fromJson(val[U("payment")]);
            setPayment( newItem );
        }
        
    }
    if(val.has_field(U("purchaseInfo")))
    {
        if(!val[U("purchaseInfo")].is_null())
        {
            std::shared_ptr<PurchaseInfo> newItem(new PurchaseInfo());
            newItem->fromJson(val[U("purchaseInfo")]);
            setPurchaseInfo( newItem );
        }
        
    }
    if(val.has_field(U("export")))
    {
        if(!val[U("export")].is_null())
        {
            std::shared_ptr<ExportInfo> newItem(new ExportInfo());
            newItem->fromJson(val[U("export")]);
            setExport( newItem );
        }
        
    }
    
}

void HeaderForGoods::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_MessageTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("messageType"), m_MessageType));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("accountId"), m_AccountId));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("companyCode"), m_CompanyCode));
    if(m_DocumentCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("documentCode"), m_DocumentCode));
        
    }
    if(m_ParticipantsIsSet)
    {
        if (m_Participants.get())
        {
            m_Participants->toMultipart(multipart, U("participants."));
        }
        
    }
    if(m_NfAccessKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("nfAccessKey"), m_NfAccessKey));
        
    }
    if(m_NfceQrCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("nfceQrCode"), m_NfceQrCode));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("transactionType"), m_TransactionType));
    if(m_TransactionModelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("transactionModel"), m_TransactionModel));
        
    }
    if(m_TransactionClassIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("transactionClass"), m_TransactionClass));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("eDocCreatorType"), m_EDocCreatorType));
    if(m_EDocCreatorPerspectiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("eDocCreatorPerspective"), m_EDocCreatorPerspective));
    }
    if(m_EntityCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("entityCode"), m_EntityCode));
        
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("currency"), m_Currency));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("companyLocation"), m_CompanyLocation));
    if(m_TransactionDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("transactionDate"), m_TransactionDate));
        
    }
    if(m_ShippingDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("shippingDate"), m_ShippingDate));
        
    }
    if(m_AdditionalInfoIsSet)
    {
        if (m_AdditionalInfo.get())
        {
            m_AdditionalInfo->toMultipart(multipart, U("additionalInfo."));
        }
        
    }
    if(m_TpImpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("tpImp"), m_TpImp));
        
    }
    if(m_IdDestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("idDest"), m_IdDest));
    }
    if(m_IndPresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("indPres"), m_IndPres));
        
    }
    if(m_InvoiceNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("invoiceNumber"), m_InvoiceNumber));
    }
    if(m_InvoiceSerialIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("invoiceSerial"), m_InvoiceSerial));
    }
    if(m_DefaultLocationsIsSet)
    {
        if (m_DefaultLocations.get())
        {
            m_DefaultLocations->toMultipart(multipart, U("defaultLocations."));
        }
        
    }
    if(m_TransportIsSet)
    {
        if (m_Transport.get())
        {
            m_Transport->toMultipart(multipart, U("transport."));
        }
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_NfRef )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("nfRef"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_PaymentIsSet)
    {
        if (m_Payment.get())
        {
            m_Payment->toMultipart(multipart, U("payment."));
        }
        
    }
    if(m_PurchaseInfoIsSet)
    {
        if (m_PurchaseInfo.get())
        {
            m_PurchaseInfo->toMultipart(multipart, U("purchaseInfo."));
        }
        
    }
    if(m_ExportIsSet)
    {
        if (m_Export.get())
        {
            m_Export->toMultipart(multipart, U("export."));
        }
        
    }
    
}

void HeaderForGoods::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("messageType")))
    {
        setMessageType(ModelBase::stringFromHttpContent(multipart->getContent(U("messageType"))));
        
    }
    setAccountId(ModelBase::stringFromHttpContent(multipart->getContent(U("accountId"))));
    setCompanyCode(ModelBase::stringFromHttpContent(multipart->getContent(U("companyCode"))));
    if(multipart->hasContent(U("documentCode")))
    {
        setDocumentCode(ModelBase::stringFromHttpContent(multipart->getContent(U("documentCode"))));
        
    }
    if(multipart->hasContent(U("participants")))
    {
        if(multipart->hasContent(U("participants")))
        {
            std::shared_ptr<HeaderForGoods_participants> newItem(new HeaderForGoods_participants());
            newItem->fromMultiPart(multipart, U("participants."));
            setParticipants( newItem );
        }
        
    }
    if(multipart->hasContent(U("nfAccessKey")))
    {
        setNfAccessKey(ModelBase::stringFromHttpContent(multipart->getContent(U("nfAccessKey"))));
        
    }
    if(multipart->hasContent(U("nfceQrCode")))
    {
        setNfceQrCode(ModelBase::stringFromHttpContent(multipart->getContent(U("nfceQrCode"))));
        
    }
    setTransactionType(ModelBase::stringFromHttpContent(multipart->getContent(U("transactionType"))));
    if(multipart->hasContent(U("transactionModel")))
    {
        setTransactionModel(ModelBase::stringFromHttpContent(multipart->getContent(U("transactionModel"))));
        
    }
    if(multipart->hasContent(U("transactionClass")))
    {
        setTransactionClass(ModelBase::stringFromHttpContent(multipart->getContent(U("transactionClass"))));
        
    }
    setEDocCreatorType(ModelBase::stringFromHttpContent(multipart->getContent(U("eDocCreatorType"))));
    if(multipart->hasContent(U("eDocCreatorPerspective")))
    {
        setEDocCreatorPerspective(ModelBase::boolFromHttpContent(multipart->getContent(U("eDocCreatorPerspective"))));
    }
    if(multipart->hasContent(U("entityCode")))
    {
        setEntityCode(ModelBase::stringFromHttpContent(multipart->getContent(U("entityCode"))));
        
    }
    if(multipart->hasContent(U("currency")))
    {
        setCurrency(ModelBase::stringFromHttpContent(multipart->getContent(U("currency"))));
        
    }
    setCompanyLocation(ModelBase::stringFromHttpContent(multipart->getContent(U("companyLocation"))));
    if(multipart->hasContent(U("transactionDate")))
    {
        setTransactionDate(ModelBase::stringFromHttpContent(multipart->getContent(U("transactionDate"))));
        
    }
    if(multipart->hasContent(U("shippingDate")))
    {
        setShippingDate(ModelBase::stringFromHttpContent(multipart->getContent(U("shippingDate"))));
        
    }
    if(multipart->hasContent(U("additionalInfo")))
    {
        if(multipart->hasContent(U("additionalInfo")))
        {
            std::shared_ptr<AdditionalInformation> newItem(new AdditionalInformation());
            newItem->fromMultiPart(multipart, U("additionalInfo."));
            setAdditionalInfo( newItem );
        }
        
    }
    if(multipart->hasContent(U("tpImp")))
    {
        setTpImp(ModelBase::stringFromHttpContent(multipart->getContent(U("tpImp"))));
        
    }
    if(multipart->hasContent(U("idDest")))
    {
        setIdDest(ModelBase::int32_tFromHttpContent(multipart->getContent(U("idDest"))));
    }
    if(multipart->hasContent(U("indPres")))
    {
        setIndPres(ModelBase::stringFromHttpContent(multipart->getContent(U("indPres"))));
        
    }
    if(multipart->hasContent(U("invoiceNumber")))
    {
        setInvoiceNumber(ModelBase::int32_tFromHttpContent(multipart->getContent(U("invoiceNumber"))));
    }
    if(multipart->hasContent(U("invoiceSerial")))
    {
        setInvoiceSerial(ModelBase::int32_tFromHttpContent(multipart->getContent(U("invoiceSerial"))));
    }
    if(multipart->hasContent(U("defaultLocations")))
    {
        if(multipart->hasContent(U("defaultLocations")))
        {
            std::shared_ptr<DefaultLocations> newItem(new DefaultLocations());
            newItem->fromMultiPart(multipart, U("defaultLocations."));
            setDefaultLocations( newItem );
        }
        
    }
    if(multipart->hasContent(U("transport")))
    {
        if(multipart->hasContent(U("transport")))
        {
            std::shared_ptr<Transport> newItem(new Transport());
            newItem->fromMultiPart(multipart, U("transport."));
            setTransport( newItem );
        }
        
    }
    {
        m_NfRef.clear();
        if(multipart->hasContent(U("nfRef")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("nfRef"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_NfRef.push_back( std::shared_ptr<NRef>(nullptr) );
            }
            else
            {
                std::shared_ptr<NRef> newItem(new NRef());
                newItem->fromJson(item);
                m_NfRef.push_back( newItem );
            }
            
        }
        }
    }
    if(multipart->hasContent(U("payment")))
    {
        if(multipart->hasContent(U("payment")))
        {
            std::shared_ptr<Payment> newItem(new Payment());
            newItem->fromMultiPart(multipart, U("payment."));
            setPayment( newItem );
        }
        
    }
    if(multipart->hasContent(U("purchaseInfo")))
    {
        if(multipart->hasContent(U("purchaseInfo")))
        {
            std::shared_ptr<PurchaseInfo> newItem(new PurchaseInfo());
            newItem->fromMultiPart(multipart, U("purchaseInfo."));
            setPurchaseInfo( newItem );
        }
        
    }
    if(multipart->hasContent(U("export")))
    {
        if(multipart->hasContent(U("export")))
        {
            std::shared_ptr<ExportInfo> newItem(new ExportInfo());
            newItem->fromMultiPart(multipart, U("export."));
            setExport( newItem );
        }
        
    }
    
}


utility::string_t HeaderForGoods::getMessageType() const
{
    return m_MessageType;
}
void HeaderForGoods::setMessageType(utility::string_t value)
{
    m_MessageType = value;
    m_MessageTypeIsSet = true;
}
bool HeaderForGoods::messageTypeIsSet() const
{
    return m_MessageTypeIsSet;
}
void HeaderForGoods::unsetMessageType()
{
    m_MessageTypeIsSet = false;
}
utility::string_t HeaderForGoods::getAccountId() const
{
    return m_AccountId;
}
void HeaderForGoods::setAccountId(utility::string_t value)
{
    m_AccountId = value;
    
}
utility::string_t HeaderForGoods::getCompanyCode() const
{
    return m_CompanyCode;
}
void HeaderForGoods::setCompanyCode(utility::string_t value)
{
    m_CompanyCode = value;
    
}
utility::string_t HeaderForGoods::getDocumentCode() const
{
    return m_DocumentCode;
}
void HeaderForGoods::setDocumentCode(utility::string_t value)
{
    m_DocumentCode = value;
    m_DocumentCodeIsSet = true;
}
bool HeaderForGoods::documentCodeIsSet() const
{
    return m_DocumentCodeIsSet;
}
void HeaderForGoods::unsetDocumentCode()
{
    m_DocumentCodeIsSet = false;
}
std::shared_ptr<HeaderForGoods_participants> HeaderForGoods::getParticipants() const
{
    return m_Participants;
}
void HeaderForGoods::setParticipants(std::shared_ptr<HeaderForGoods_participants> value)
{
    m_Participants = value;
    m_ParticipantsIsSet = true;
}
bool HeaderForGoods::participantsIsSet() const
{
    return m_ParticipantsIsSet;
}
void HeaderForGoods::unsetParticipants()
{
    m_ParticipantsIsSet = false;
}
utility::string_t HeaderForGoods::getNfAccessKey() const
{
    return m_NfAccessKey;
}
void HeaderForGoods::setNfAccessKey(utility::string_t value)
{
    m_NfAccessKey = value;
    m_NfAccessKeyIsSet = true;
}
bool HeaderForGoods::nfAccessKeyIsSet() const
{
    return m_NfAccessKeyIsSet;
}
void HeaderForGoods::unsetNfAccessKey()
{
    m_NfAccessKeyIsSet = false;
}
utility::string_t HeaderForGoods::getNfceQrCode() const
{
    return m_NfceQrCode;
}
void HeaderForGoods::setNfceQrCode(utility::string_t value)
{
    m_NfceQrCode = value;
    m_NfceQrCodeIsSet = true;
}
bool HeaderForGoods::nfceQrCodeIsSet() const
{
    return m_NfceQrCodeIsSet;
}
void HeaderForGoods::unsetNfceQrCode()
{
    m_NfceQrCodeIsSet = false;
}
utility::string_t HeaderForGoods::getTransactionType() const
{
    return m_TransactionType;
}
void HeaderForGoods::setTransactionType(utility::string_t value)
{
    m_TransactionType = value;
    
}
utility::string_t HeaderForGoods::getTransactionModel() const
{
    return m_TransactionModel;
}
void HeaderForGoods::setTransactionModel(utility::string_t value)
{
    m_TransactionModel = value;
    m_TransactionModelIsSet = true;
}
bool HeaderForGoods::transactionModelIsSet() const
{
    return m_TransactionModelIsSet;
}
void HeaderForGoods::unsetTransactionModel()
{
    m_TransactionModelIsSet = false;
}
utility::string_t HeaderForGoods::getTransactionClass() const
{
    return m_TransactionClass;
}
void HeaderForGoods::setTransactionClass(utility::string_t value)
{
    m_TransactionClass = value;
    m_TransactionClassIsSet = true;
}
bool HeaderForGoods::transactionClassIsSet() const
{
    return m_TransactionClassIsSet;
}
void HeaderForGoods::unsetTransactionClass()
{
    m_TransactionClassIsSet = false;
}
utility::string_t HeaderForGoods::getEDocCreatorType() const
{
    return m_EDocCreatorType;
}
void HeaderForGoods::setEDocCreatorType(utility::string_t value)
{
    m_EDocCreatorType = value;
    
}
bool HeaderForGoods::getEDocCreatorPerspective() const
{
    return m_EDocCreatorPerspective;
}
void HeaderForGoods::setEDocCreatorPerspective(bool value)
{
    m_EDocCreatorPerspective = value;
    m_EDocCreatorPerspectiveIsSet = true;
}
bool HeaderForGoods::eDocCreatorPerspectiveIsSet() const
{
    return m_EDocCreatorPerspectiveIsSet;
}
void HeaderForGoods::unsetEDocCreatorPerspective()
{
    m_EDocCreatorPerspectiveIsSet = false;
}
utility::string_t HeaderForGoods::getEntityCode() const
{
    return m_EntityCode;
}
void HeaderForGoods::setEntityCode(utility::string_t value)
{
    m_EntityCode = value;
    m_EntityCodeIsSet = true;
}
bool HeaderForGoods::entityCodeIsSet() const
{
    return m_EntityCodeIsSet;
}
void HeaderForGoods::unsetEntityCode()
{
    m_EntityCodeIsSet = false;
}
utility::string_t HeaderForGoods::getCurrency() const
{
    return m_Currency;
}
void HeaderForGoods::setCurrency(utility::string_t value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}
bool HeaderForGoods::currencyIsSet() const
{
    return m_CurrencyIsSet;
}
void HeaderForGoods::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
utility::string_t HeaderForGoods::getCompanyLocation() const
{
    return m_CompanyLocation;
}
void HeaderForGoods::setCompanyLocation(utility::string_t value)
{
    m_CompanyLocation = value;
    
}
utility::string_t HeaderForGoods::getTransactionDate() const
{
    return m_TransactionDate;
}
void HeaderForGoods::setTransactionDate(utility::string_t value)
{
    m_TransactionDate = value;
    m_TransactionDateIsSet = true;
}
bool HeaderForGoods::transactionDateIsSet() const
{
    return m_TransactionDateIsSet;
}
void HeaderForGoods::unsetTransactionDate()
{
    m_TransactionDateIsSet = false;
}
utility::string_t HeaderForGoods::getShippingDate() const
{
    return m_ShippingDate;
}
void HeaderForGoods::setShippingDate(utility::string_t value)
{
    m_ShippingDate = value;
    m_ShippingDateIsSet = true;
}
bool HeaderForGoods::shippingDateIsSet() const
{
    return m_ShippingDateIsSet;
}
void HeaderForGoods::unsetShippingDate()
{
    m_ShippingDateIsSet = false;
}
std::shared_ptr<AdditionalInformation> HeaderForGoods::getAdditionalInfo() const
{
    return m_AdditionalInfo;
}
void HeaderForGoods::setAdditionalInfo(std::shared_ptr<AdditionalInformation> value)
{
    m_AdditionalInfo = value;
    m_AdditionalInfoIsSet = true;
}
bool HeaderForGoods::additionalInfoIsSet() const
{
    return m_AdditionalInfoIsSet;
}
void HeaderForGoods::unsetAdditionalInfo()
{
    m_AdditionalInfoIsSet = false;
}
utility::string_t HeaderForGoods::getTpImp() const
{
    return m_TpImp;
}
void HeaderForGoods::setTpImp(utility::string_t value)
{
    m_TpImp = value;
    m_TpImpIsSet = true;
}
bool HeaderForGoods::tpImpIsSet() const
{
    return m_TpImpIsSet;
}
void HeaderForGoods::unsetTpImp()
{
    m_TpImpIsSet = false;
}
int32_t HeaderForGoods::getIdDest() const
{
    return m_IdDest;
}
void HeaderForGoods::setIdDest(int32_t value)
{
    m_IdDest = value;
    m_IdDestIsSet = true;
}
bool HeaderForGoods::idDestIsSet() const
{
    return m_IdDestIsSet;
}
void HeaderForGoods::unsetIdDest()
{
    m_IdDestIsSet = false;
}
utility::string_t HeaderForGoods::getIndPres() const
{
    return m_IndPres;
}
void HeaderForGoods::setIndPres(utility::string_t value)
{
    m_IndPres = value;
    m_IndPresIsSet = true;
}
bool HeaderForGoods::indPresIsSet() const
{
    return m_IndPresIsSet;
}
void HeaderForGoods::unsetIndPres()
{
    m_IndPresIsSet = false;
}
int32_t HeaderForGoods::getInvoiceNumber() const
{
    return m_InvoiceNumber;
}
void HeaderForGoods::setInvoiceNumber(int32_t value)
{
    m_InvoiceNumber = value;
    m_InvoiceNumberIsSet = true;
}
bool HeaderForGoods::invoiceNumberIsSet() const
{
    return m_InvoiceNumberIsSet;
}
void HeaderForGoods::unsetInvoiceNumber()
{
    m_InvoiceNumberIsSet = false;
}
int32_t HeaderForGoods::getInvoiceSerial() const
{
    return m_InvoiceSerial;
}
void HeaderForGoods::setInvoiceSerial(int32_t value)
{
    m_InvoiceSerial = value;
    m_InvoiceSerialIsSet = true;
}
bool HeaderForGoods::invoiceSerialIsSet() const
{
    return m_InvoiceSerialIsSet;
}
void HeaderForGoods::unsetInvoiceSerial()
{
    m_InvoiceSerialIsSet = false;
}
std::shared_ptr<DefaultLocations> HeaderForGoods::getDefaultLocations() const
{
    return m_DefaultLocations;
}
void HeaderForGoods::setDefaultLocations(std::shared_ptr<DefaultLocations> value)
{
    m_DefaultLocations = value;
    m_DefaultLocationsIsSet = true;
}
bool HeaderForGoods::defaultLocationsIsSet() const
{
    return m_DefaultLocationsIsSet;
}
void HeaderForGoods::unsetDefaultLocations()
{
    m_DefaultLocationsIsSet = false;
}
std::shared_ptr<Transport> HeaderForGoods::getTransport() const
{
    return m_Transport;
}
void HeaderForGoods::setTransport(std::shared_ptr<Transport> value)
{
    m_Transport = value;
    m_TransportIsSet = true;
}
bool HeaderForGoods::transportIsSet() const
{
    return m_TransportIsSet;
}
void HeaderForGoods::unsetTransport()
{
    m_TransportIsSet = false;
}
std::vector<std::shared_ptr<NRef>>& HeaderForGoods::getNfRef()
{
    return m_NfRef;
}
bool HeaderForGoods::nfRefIsSet() const
{
    return m_NfRefIsSet;
}
void HeaderForGoods::unsetNfRef()
{
    m_NfRefIsSet = false;
}
std::shared_ptr<Payment> HeaderForGoods::getPayment() const
{
    return m_Payment;
}
void HeaderForGoods::setPayment(std::shared_ptr<Payment> value)
{
    m_Payment = value;
    m_PaymentIsSet = true;
}
bool HeaderForGoods::paymentIsSet() const
{
    return m_PaymentIsSet;
}
void HeaderForGoods::unsetPayment()
{
    m_PaymentIsSet = false;
}
std::shared_ptr<PurchaseInfo> HeaderForGoods::getPurchaseInfo() const
{
    return m_PurchaseInfo;
}
void HeaderForGoods::setPurchaseInfo(std::shared_ptr<PurchaseInfo> value)
{
    m_PurchaseInfo = value;
    m_PurchaseInfoIsSet = true;
}
bool HeaderForGoods::purchaseInfoIsSet() const
{
    return m_PurchaseInfoIsSet;
}
void HeaderForGoods::unsetPurchaseInfo()
{
    m_PurchaseInfoIsSet = false;
}
std::shared_ptr<ExportInfo> HeaderForGoods::getExport() const
{
    return m_Export;
}
void HeaderForGoods::setExport(std::shared_ptr<ExportInfo> value)
{
    m_Export = value;
    m_ExportIsSet = true;
}
bool HeaderForGoods::exportIsSet() const
{
    return m_ExportIsSet;
}
void HeaderForGoods::unsetExport()
{
    m_ExportIsSet = false;
}

}
}
}
}

