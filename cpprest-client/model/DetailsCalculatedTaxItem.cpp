/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "DetailsCalculatedTaxItem.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

DetailsCalculatedTaxItem::DetailsCalculatedTaxItem()
{
    m_LocationType = U("");
    m_LocationTypeIsSet = false;
    m_JurisdictionName = U("");
    m_JurisdictionNameIsSet = false;
    m_JurisdictionType = U("");
    m_JurisdictionTypeIsSet = false;
    m_TaxType = U("");
    m_TaxTypeIsSet = false;
    m_RateType = U("");
    m_RateTypeIsSet = false;
    m_Scenario = U("");
    m_ScenarioIsSet = false;
    m_SubtotalTaxable = 0.0;
    m_SubtotalTaxableIsSet = false;
    m_Rate = 0.0;
    m_RateIsSet = false;
    m_Tax = 0.0;
    m_TaxIsSet = false;
    m_ExemptionCode = U("");
    m_ExemptionCodeIsSet = false;
    m_SignificantLocationsIsSet = false;
    m_TaxRuleType = U("");
    m_TaxRuleTypeIsSet = false;
    m_Source = 0;
    m_SourceIsSet = false;
    m_CstB = U("");
    m_CstBIsSet = false;
    m_ModBC = U("");
    m_ModBCIsSet = false;
    m_Cst = U("");
    m_CstIsSet = false;
    
}

DetailsCalculatedTaxItem::~DetailsCalculatedTaxItem()
{
}

void DetailsCalculatedTaxItem::validate()
{
    // TODO: implement validation
}

web::json::value DetailsCalculatedTaxItem::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_LocationTypeIsSet)
    {
        val[U("locationType")] = ModelBase::toJson(m_LocationType);
    }
    if(m_JurisdictionNameIsSet)
    {
        val[U("jurisdictionName")] = ModelBase::toJson(m_JurisdictionName);
    }
    if(m_JurisdictionTypeIsSet)
    {
        val[U("jurisdictionType")] = ModelBase::toJson(m_JurisdictionType);
    }
    if(m_TaxTypeIsSet)
    {
        val[U("taxType")] = ModelBase::toJson(m_TaxType);
    }
    if(m_RateTypeIsSet)
    {
        val[U("rateType")] = ModelBase::toJson(m_RateType);
    }
    if(m_ScenarioIsSet)
    {
        val[U("scenario")] = ModelBase::toJson(m_Scenario);
    }
    if(m_SubtotalTaxableIsSet)
    {
        val[U("subtotalTaxable")] = ModelBase::toJson(m_SubtotalTaxable);
    }
    if(m_RateIsSet)
    {
        val[U("rate")] = ModelBase::toJson(m_Rate);
    }
    if(m_TaxIsSet)
    {
        val[U("tax")] = ModelBase::toJson(m_Tax);
    }
    if(m_ExemptionCodeIsSet)
    {
        val[U("exemptionCode")] = ModelBase::toJson(m_ExemptionCode);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_SignificantLocations )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("significantLocations")] = web::json::value::array(jsonArray);
        }
    }
    if(m_TaxRuleTypeIsSet)
    {
        val[U("taxRuleType")] = ModelBase::toJson(m_TaxRuleType);
    }
    if(m_SourceIsSet)
    {
        val[U("source")] = ModelBase::toJson(m_Source);
    }
    if(m_CstBIsSet)
    {
        val[U("cstB")] = ModelBase::toJson(m_CstB);
    }
    if(m_ModBCIsSet)
    {
        val[U("modBC")] = ModelBase::toJson(m_ModBC);
    }
    if(m_CstIsSet)
    {
        val[U("cst")] = ModelBase::toJson(m_Cst);
    }
    

    return val;
}

void DetailsCalculatedTaxItem::fromJson(web::json::value& val)
{
    if(val.has_field(U("locationType")))
    {
        setLocationType(ModelBase::stringFromJson(val[U("locationType")]));
        
    }
    if(val.has_field(U("jurisdictionName")))
    {
        setJurisdictionName(ModelBase::stringFromJson(val[U("jurisdictionName")]));
        
    }
    if(val.has_field(U("jurisdictionType")))
    {
        setJurisdictionType(ModelBase::stringFromJson(val[U("jurisdictionType")]));
        
    }
    if(val.has_field(U("taxType")))
    {
        setTaxType(ModelBase::stringFromJson(val[U("taxType")]));
        
    }
    if(val.has_field(U("rateType")))
    {
        setRateType(ModelBase::stringFromJson(val[U("rateType")]));
        
    }
    if(val.has_field(U("scenario")))
    {
        setScenario(ModelBase::stringFromJson(val[U("scenario")]));
        
    }
    if(val.has_field(U("subtotalTaxable")))
    {
        setSubtotalTaxable(ModelBase::doubleFromJson(val[U("subtotalTaxable")]));
    }
    if(val.has_field(U("rate")))
    {
        setRate(ModelBase::doubleFromJson(val[U("rate")]));
    }
    if(val.has_field(U("tax")))
    {
        setTax(ModelBase::doubleFromJson(val[U("tax")]));
    }
    if(val.has_field(U("exemptionCode")))
    {
        setExemptionCode(ModelBase::stringFromJson(val[U("exemptionCode")]));
        
    }
    {
        m_SignificantLocations.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("significantLocations")))
        {
        for( auto& item : val[U("significantLocations")].as_array() )
        {
            m_SignificantLocations.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    if(val.has_field(U("taxRuleType")))
    {
        setTaxRuleType(ModelBase::stringFromJson(val[U("taxRuleType")]));
        
    }
    if(val.has_field(U("source")))
    {
        setSource(ModelBase::int32_tFromJson(val[U("source")]));
    }
    if(val.has_field(U("cstB")))
    {
        setCstB(ModelBase::stringFromJson(val[U("cstB")]));
        
    }
    if(val.has_field(U("modBC")))
    {
        setModBC(ModelBase::stringFromJson(val[U("modBC")]));
        
    }
    if(val.has_field(U("cst")))
    {
        setCst(ModelBase::stringFromJson(val[U("cst")]));
        
    }
    
}

void DetailsCalculatedTaxItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_LocationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("locationType"), m_LocationType));
        
    }
    if(m_JurisdictionNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("jurisdictionName"), m_JurisdictionName));
        
    }
    if(m_JurisdictionTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("jurisdictionType"), m_JurisdictionType));
        
    }
    if(m_TaxTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("taxType"), m_TaxType));
        
    }
    if(m_RateTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("rateType"), m_RateType));
        
    }
    if(m_ScenarioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("scenario"), m_Scenario));
        
    }
    if(m_SubtotalTaxableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("subtotalTaxable"), m_SubtotalTaxable));
    }
    if(m_RateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("rate"), m_Rate));
    }
    if(m_TaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("tax"), m_Tax));
    }
    if(m_ExemptionCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("exemptionCode"), m_ExemptionCode));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_SignificantLocations )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("significantLocations"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_TaxRuleTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("taxRuleType"), m_TaxRuleType));
        
    }
    if(m_SourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("source"), m_Source));
    }
    if(m_CstBIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cstB"), m_CstB));
        
    }
    if(m_ModBCIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("modBC"), m_ModBC));
        
    }
    if(m_CstIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cst"), m_Cst));
        
    }
    
}

void DetailsCalculatedTaxItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("locationType")))
    {
        setLocationType(ModelBase::stringFromHttpContent(multipart->getContent(U("locationType"))));
        
    }
    if(multipart->hasContent(U("jurisdictionName")))
    {
        setJurisdictionName(ModelBase::stringFromHttpContent(multipart->getContent(U("jurisdictionName"))));
        
    }
    if(multipart->hasContent(U("jurisdictionType")))
    {
        setJurisdictionType(ModelBase::stringFromHttpContent(multipart->getContent(U("jurisdictionType"))));
        
    }
    if(multipart->hasContent(U("taxType")))
    {
        setTaxType(ModelBase::stringFromHttpContent(multipart->getContent(U("taxType"))));
        
    }
    if(multipart->hasContent(U("rateType")))
    {
        setRateType(ModelBase::stringFromHttpContent(multipart->getContent(U("rateType"))));
        
    }
    if(multipart->hasContent(U("scenario")))
    {
        setScenario(ModelBase::stringFromHttpContent(multipart->getContent(U("scenario"))));
        
    }
    if(multipart->hasContent(U("subtotalTaxable")))
    {
        setSubtotalTaxable(ModelBase::doubleFromHttpContent(multipart->getContent(U("subtotalTaxable"))));
    }
    if(multipart->hasContent(U("rate")))
    {
        setRate(ModelBase::doubleFromHttpContent(multipart->getContent(U("rate"))));
    }
    if(multipart->hasContent(U("tax")))
    {
        setTax(ModelBase::doubleFromHttpContent(multipart->getContent(U("tax"))));
    }
    if(multipart->hasContent(U("exemptionCode")))
    {
        setExemptionCode(ModelBase::stringFromHttpContent(multipart->getContent(U("exemptionCode"))));
        
    }
    {
        m_SignificantLocations.clear();
        if(multipart->hasContent(U("significantLocations")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("significantLocations"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_SignificantLocations.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    if(multipart->hasContent(U("taxRuleType")))
    {
        setTaxRuleType(ModelBase::stringFromHttpContent(multipart->getContent(U("taxRuleType"))));
        
    }
    if(multipart->hasContent(U("source")))
    {
        setSource(ModelBase::int32_tFromHttpContent(multipart->getContent(U("source"))));
    }
    if(multipart->hasContent(U("cstB")))
    {
        setCstB(ModelBase::stringFromHttpContent(multipart->getContent(U("cstB"))));
        
    }
    if(multipart->hasContent(U("modBC")))
    {
        setModBC(ModelBase::stringFromHttpContent(multipart->getContent(U("modBC"))));
        
    }
    if(multipart->hasContent(U("cst")))
    {
        setCst(ModelBase::stringFromHttpContent(multipart->getContent(U("cst"))));
        
    }
    
}


utility::string_t DetailsCalculatedTaxItem::getLocationType() const
{
    return m_LocationType;
}
void DetailsCalculatedTaxItem::setLocationType(utility::string_t value)
{
    m_LocationType = value;
    m_LocationTypeIsSet = true;
}
bool DetailsCalculatedTaxItem::locationTypeIsSet() const
{
    return m_LocationTypeIsSet;
}
void DetailsCalculatedTaxItem::unsetLocationType()
{
    m_LocationTypeIsSet = false;
}
utility::string_t DetailsCalculatedTaxItem::getJurisdictionName() const
{
    return m_JurisdictionName;
}
void DetailsCalculatedTaxItem::setJurisdictionName(utility::string_t value)
{
    m_JurisdictionName = value;
    m_JurisdictionNameIsSet = true;
}
bool DetailsCalculatedTaxItem::jurisdictionNameIsSet() const
{
    return m_JurisdictionNameIsSet;
}
void DetailsCalculatedTaxItem::unsetJurisdictionName()
{
    m_JurisdictionNameIsSet = false;
}
utility::string_t DetailsCalculatedTaxItem::getJurisdictionType() const
{
    return m_JurisdictionType;
}
void DetailsCalculatedTaxItem::setJurisdictionType(utility::string_t value)
{
    m_JurisdictionType = value;
    m_JurisdictionTypeIsSet = true;
}
bool DetailsCalculatedTaxItem::jurisdictionTypeIsSet() const
{
    return m_JurisdictionTypeIsSet;
}
void DetailsCalculatedTaxItem::unsetJurisdictionType()
{
    m_JurisdictionTypeIsSet = false;
}
utility::string_t DetailsCalculatedTaxItem::getTaxType() const
{
    return m_TaxType;
}
void DetailsCalculatedTaxItem::setTaxType(utility::string_t value)
{
    m_TaxType = value;
    m_TaxTypeIsSet = true;
}
bool DetailsCalculatedTaxItem::taxTypeIsSet() const
{
    return m_TaxTypeIsSet;
}
void DetailsCalculatedTaxItem::unsetTaxType()
{
    m_TaxTypeIsSet = false;
}
utility::string_t DetailsCalculatedTaxItem::getRateType() const
{
    return m_RateType;
}
void DetailsCalculatedTaxItem::setRateType(utility::string_t value)
{
    m_RateType = value;
    m_RateTypeIsSet = true;
}
bool DetailsCalculatedTaxItem::rateTypeIsSet() const
{
    return m_RateTypeIsSet;
}
void DetailsCalculatedTaxItem::unsetRateType()
{
    m_RateTypeIsSet = false;
}
utility::string_t DetailsCalculatedTaxItem::getScenario() const
{
    return m_Scenario;
}
void DetailsCalculatedTaxItem::setScenario(utility::string_t value)
{
    m_Scenario = value;
    m_ScenarioIsSet = true;
}
bool DetailsCalculatedTaxItem::scenarioIsSet() const
{
    return m_ScenarioIsSet;
}
void DetailsCalculatedTaxItem::unsetScenario()
{
    m_ScenarioIsSet = false;
}
double DetailsCalculatedTaxItem::getSubtotalTaxable() const
{
    return m_SubtotalTaxable;
}
void DetailsCalculatedTaxItem::setSubtotalTaxable(double value)
{
    m_SubtotalTaxable = value;
    m_SubtotalTaxableIsSet = true;
}
bool DetailsCalculatedTaxItem::subtotalTaxableIsSet() const
{
    return m_SubtotalTaxableIsSet;
}
void DetailsCalculatedTaxItem::unsetSubtotalTaxable()
{
    m_SubtotalTaxableIsSet = false;
}
double DetailsCalculatedTaxItem::getRate() const
{
    return m_Rate;
}
void DetailsCalculatedTaxItem::setRate(double value)
{
    m_Rate = value;
    m_RateIsSet = true;
}
bool DetailsCalculatedTaxItem::rateIsSet() const
{
    return m_RateIsSet;
}
void DetailsCalculatedTaxItem::unsetRate()
{
    m_RateIsSet = false;
}
double DetailsCalculatedTaxItem::getTax() const
{
    return m_Tax;
}
void DetailsCalculatedTaxItem::setTax(double value)
{
    m_Tax = value;
    m_TaxIsSet = true;
}
bool DetailsCalculatedTaxItem::taxIsSet() const
{
    return m_TaxIsSet;
}
void DetailsCalculatedTaxItem::unsetTax()
{
    m_TaxIsSet = false;
}
utility::string_t DetailsCalculatedTaxItem::getExemptionCode() const
{
    return m_ExemptionCode;
}
void DetailsCalculatedTaxItem::setExemptionCode(utility::string_t value)
{
    m_ExemptionCode = value;
    m_ExemptionCodeIsSet = true;
}
bool DetailsCalculatedTaxItem::exemptionCodeIsSet() const
{
    return m_ExemptionCodeIsSet;
}
void DetailsCalculatedTaxItem::unsetExemptionCode()
{
    m_ExemptionCodeIsSet = false;
}
std::vector<utility::string_t>& DetailsCalculatedTaxItem::getSignificantLocations()
{
    return m_SignificantLocations;
}
bool DetailsCalculatedTaxItem::significantLocationsIsSet() const
{
    return m_SignificantLocationsIsSet;
}
void DetailsCalculatedTaxItem::unsetSignificantLocations()
{
    m_SignificantLocationsIsSet = false;
}
utility::string_t DetailsCalculatedTaxItem::getTaxRuleType() const
{
    return m_TaxRuleType;
}
void DetailsCalculatedTaxItem::setTaxRuleType(utility::string_t value)
{
    m_TaxRuleType = value;
    m_TaxRuleTypeIsSet = true;
}
bool DetailsCalculatedTaxItem::taxRuleTypeIsSet() const
{
    return m_TaxRuleTypeIsSet;
}
void DetailsCalculatedTaxItem::unsetTaxRuleType()
{
    m_TaxRuleTypeIsSet = false;
}
int32_t DetailsCalculatedTaxItem::getSource() const
{
    return m_Source;
}
void DetailsCalculatedTaxItem::setSource(int32_t value)
{
    m_Source = value;
    m_SourceIsSet = true;
}
bool DetailsCalculatedTaxItem::sourceIsSet() const
{
    return m_SourceIsSet;
}
void DetailsCalculatedTaxItem::unsetSource()
{
    m_SourceIsSet = false;
}
utility::string_t DetailsCalculatedTaxItem::getCstB() const
{
    return m_CstB;
}
void DetailsCalculatedTaxItem::setCstB(utility::string_t value)
{
    m_CstB = value;
    m_CstBIsSet = true;
}
bool DetailsCalculatedTaxItem::cstBIsSet() const
{
    return m_CstBIsSet;
}
void DetailsCalculatedTaxItem::unsetCstB()
{
    m_CstBIsSet = false;
}
utility::string_t DetailsCalculatedTaxItem::getModBC() const
{
    return m_ModBC;
}
void DetailsCalculatedTaxItem::setModBC(utility::string_t value)
{
    m_ModBC = value;
    m_ModBCIsSet = true;
}
bool DetailsCalculatedTaxItem::modBCIsSet() const
{
    return m_ModBCIsSet;
}
void DetailsCalculatedTaxItem::unsetModBC()
{
    m_ModBCIsSet = false;
}
utility::string_t DetailsCalculatedTaxItem::getCst() const
{
    return m_Cst;
}
void DetailsCalculatedTaxItem::setCst(utility::string_t value)
{
    m_Cst = value;
    m_CstIsSet = true;
}
bool DetailsCalculatedTaxItem::cstIsSet() const
{
    return m_CstIsSet;
}
void DetailsCalculatedTaxItem::unsetCst()
{
    m_CstIsSet = false;
}

}
}
}
}

