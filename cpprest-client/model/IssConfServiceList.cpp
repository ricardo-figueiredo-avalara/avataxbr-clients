/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IssConfServiceList.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

IssConfServiceList::IssConfServiceList()
{
    m_Agast = U("");
    m_AgastIsSet = false;
    m_CityServiceCode = U("");
    m_CityServiceCodeIsSet = false;
    m_TaxRateIsSet = false;
    
}

IssConfServiceList::~IssConfServiceList()
{
}

void IssConfServiceList::validate()
{
    // TODO: implement validation
}

web::json::value IssConfServiceList::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AgastIsSet)
    {
        val[U("agast")] = ModelBase::toJson(m_Agast);
    }
    if(m_CityServiceCodeIsSet)
    {
        val[U("cityServiceCode")] = ModelBase::toJson(m_CityServiceCode);
    }
    if(m_TaxRateIsSet)
    {
        val[U("taxRate")] = ModelBase::toJson(m_TaxRate);
    }
    

    return val;
}

void IssConfServiceList::fromJson(web::json::value& val)
{
    if(val.has_field(U("agast")))
    {
        setAgast(ModelBase::stringFromJson(val[U("agast")]));
        
    }
    if(val.has_field(U("cityServiceCode")))
    {
        setCityServiceCode(ModelBase::stringFromJson(val[U("cityServiceCode")]));
        
    }
    if(val.has_field(U("taxRate")))
    {
        if(!val[U("taxRate")].is_null())
        {
            std::shared_ptr<IssConfServiceList_taxRate> newItem(new IssConfServiceList_taxRate());
            newItem->fromJson(val[U("taxRate")]);
            setTaxRate( newItem );
        }
        
    }
    
}

void IssConfServiceList::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_AgastIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("agast"), m_Agast));
        
    }
    if(m_CityServiceCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cityServiceCode"), m_CityServiceCode));
        
    }
    if(m_TaxRateIsSet)
    {
        if (m_TaxRate.get())
        {
            m_TaxRate->toMultipart(multipart, U("taxRate."));
        }
        
    }
    
}

void IssConfServiceList::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("agast")))
    {
        setAgast(ModelBase::stringFromHttpContent(multipart->getContent(U("agast"))));
        
    }
    if(multipart->hasContent(U("cityServiceCode")))
    {
        setCityServiceCode(ModelBase::stringFromHttpContent(multipart->getContent(U("cityServiceCode"))));
        
    }
    if(multipart->hasContent(U("taxRate")))
    {
        if(multipart->hasContent(U("taxRate")))
        {
            std::shared_ptr<IssConfServiceList_taxRate> newItem(new IssConfServiceList_taxRate());
            newItem->fromMultiPart(multipart, U("taxRate."));
            setTaxRate( newItem );
        }
        
    }
    
}


utility::string_t IssConfServiceList::getAgast() const
{
    return m_Agast;
}
void IssConfServiceList::setAgast(utility::string_t value)
{
    m_Agast = value;
    m_AgastIsSet = true;
}
bool IssConfServiceList::agastIsSet() const
{
    return m_AgastIsSet;
}
void IssConfServiceList::unsetAgast()
{
    m_AgastIsSet = false;
}
utility::string_t IssConfServiceList::getCityServiceCode() const
{
    return m_CityServiceCode;
}
void IssConfServiceList::setCityServiceCode(utility::string_t value)
{
    m_CityServiceCode = value;
    m_CityServiceCodeIsSet = true;
}
bool IssConfServiceList::cityServiceCodeIsSet() const
{
    return m_CityServiceCodeIsSet;
}
void IssConfServiceList::unsetCityServiceCode()
{
    m_CityServiceCodeIsSet = false;
}
std::shared_ptr<IssConfServiceList_taxRate> IssConfServiceList::getTaxRate() const
{
    return m_TaxRate;
}
void IssConfServiceList::setTaxRate(std::shared_ptr<IssConfServiceList_taxRate> value)
{
    m_TaxRate = value;
    m_TaxRateIsSet = true;
}
bool IssConfServiceList::taxRateIsSet() const
{
    return m_TaxRateIsSet;
}
void IssConfServiceList::unsetTaxRate()
{
    m_TaxRateIsSet = false;
}

}
}
}
}

