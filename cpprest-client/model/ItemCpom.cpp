/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ItemCpom.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ItemCpom::ItemCpom()
{
    m_CompanyId = nullptr;
    m_CityCode = U("");
    m_ItemCode = U("");
    m_Code = U("");
    
}

ItemCpom::~ItemCpom()
{
}

void ItemCpom::validate()
{
    // TODO: implement validation
}

web::json::value ItemCpom::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("companyId")] = ModelBase::toJson(m_CompanyId);
    val[U("cityCode")] = ModelBase::toJson(m_CityCode);
    val[U("itemCode")] = ModelBase::toJson(m_ItemCode);
    val[U("code")] = ModelBase::toJson(m_Code);
    

    return val;
}

void ItemCpom::fromJson(web::json::value& val)
{
    setCompanyId(ModelBase::stringFromJson(val[U("companyId")]));
    setCityCode(ModelBase::stringFromJson(val[U("cityCode")]));
    setItemCode(ModelBase::stringFromJson(val[U("itemCode")]));
    setCode(ModelBase::stringFromJson(val[U("code")]));
    
}

void ItemCpom::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("companyId"), m_CompanyId));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("cityCode"), m_CityCode));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("itemCode"), m_ItemCode));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("code"), m_Code));
    
}

void ItemCpom::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setCompanyId(ModelBase::stringFromHttpContent(multipart->getContent(U("companyId"))));
    setCityCode(ModelBase::stringFromHttpContent(multipart->getContent(U("cityCode"))));
    setItemCode(ModelBase::stringFromHttpContent(multipart->getContent(U("itemCode"))));
    setCode(ModelBase::stringFromHttpContent(multipart->getContent(U("code"))));
    
}


std::shared_ptr<UUID> ItemCpom::getCompanyId() const
{
    return m_CompanyId;
}
void ItemCpom::setCompanyId(std::shared_ptr<UUID> value)
{
    m_CompanyId = value;
    
}
utility::string_t ItemCpom::getCityCode() const
{
    return m_CityCode;
}
void ItemCpom::setCityCode(utility::string_t value)
{
    m_CityCode = value;
    
}
utility::string_t ItemCpom::getItemCode() const
{
    return m_ItemCode;
}
void ItemCpom::setItemCode(utility::string_t value)
{
    m_ItemCode = value;
    
}
utility::string_t ItemCpom::getCode() const
{
    return m_Code;
}
void ItemCpom::setCode(utility::string_t value)
{
    m_Code = value;
    
}

}
}
}
}

