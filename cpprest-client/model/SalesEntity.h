/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SalesEntity.h
 *
 * 
 */

#ifndef SalesEntity_H_
#define SalesEntity_H_


#include "ModelBase.h"

#include "EntityType.h"
#include "FederalTaxRegime.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  SalesEntity
    : public ModelBase
{
public:
    SalesEntity();
    virtual ~SalesEntity();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SalesEntity members

    /// <summary>
    /// SERVICE BUYER NAME OFFICIAL
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityType> getType() const;
    void setType(std::shared_ptr<EntityType> value);
        /// <summary>
    /// Entity Email
    /// </summary>
    utility::string_t getEmail() const;
    void setEmail(utility::string_t value);
    bool emailIsSet() const;
    void unsetEmail();
    /// <summary>
    /// CNPJ/CPF of Sales Buyer, if CPF pattern is &#39;[0-9]{11}&#39; if CNPJ pattern is &#39;[0-9]{14}&#39;
    /// </summary>
    utility::string_t getCnpjcpf() const;
    void setCnpjcpf(utility::string_t value);
    bool cnpjcpfIsSet() const;
    void unsetCnpjcpf();
    /// <summary>
    /// City Tax ID
    /// </summary>
    utility::string_t getCityTaxId() const;
    void setCityTaxId(utility::string_t value);
    bool cityTaxIdIsSet() const;
    void unsetCityTaxId();
    /// <summary>
    /// State Tax ID
    /// </summary>
    utility::string_t getStateTaxId() const;
    void setStateTaxId(utility::string_t value);
    bool stateTaxIdIsSet() const;
    void unsetStateTaxId();
    /// <summary>
    /// Suframa ID
    /// </summary>
    utility::string_t getSuframa() const;
    void setSuframa(utility::string_t value);
    bool suframaIsSet() const;
    void unsetSuframa();
    /// <summary>
    /// Entity Phone
    /// </summary>
    utility::string_t getPhone() const;
    void setPhone(utility::string_t value);
    bool phoneIsSet() const;
    void unsetPhone();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FederalTaxRegime> getTaxRegime() const;
    void setTaxRegime(std::shared_ptr<FederalTaxRegime> value);
        /// <summary>
    /// Entity Special Tax Regime  - &#39;MEM&#39; # Microempresa municipal - &#39;EST&#39; # Estimativa - &#39;SPR&#39; # Sociedade de profissionais - &#39;COP&#39; # Cooperativa - &#39;MEI&#39; # Microempresário Individual (MEI) - &#39;MPP&#39; # Microempresário e Empresa de Pequeno Porte (ME EPP) 
    /// </summary>
    utility::string_t getSpecialTaxRegime() const;
    void setSpecialTaxRegime(utility::string_t value);
    bool specialTaxRegimeIsSet() const;
    void unsetSpecialTaxRegime();
    /// <summary>
    /// Companies subject to rule follow same rule of Government
    /// </summary>
    bool getSubjectToSRF1234() const;
    void setSubjectToSRF1234(bool value);
    bool subjectToSRF1234IsSet() const;
    void unsetSubjectToSRF1234();
    /// <summary>
    /// If Withholding ISS is required, independently the rules applied.
    /// </summary>
    bool getRequiredWithholdingISS() const;
    void setRequiredWithholdingISS(bool value);
    bool requiredWithholdingISSIsSet() const;
    void unsetRequiredWithholdingISS();
    /// <summary>
    /// technical note. Anota\\u00e7\\u00e3o de Responsabilidade T\\u00e9cnica-ART, estabelece que todos os contratos referentes à  execu\\u00e7\\u00e3o de servi\\u00e7os ou obras de Engenharia, Agronomia, Geologia, Geografia ou Meteorologia dever\\u00e3o ser objeto de anota\\u00e7\\u00e3o no Conselho Regional de Engenharia e Agronomia
    /// </summary>
    utility::string_t getArt() const;
    void setArt(utility::string_t value);
    bool artIsSet() const;
    void unsetArt();
    /// <summary>
    /// PROCESS NUMBER TO ISS SUSPENDED FOR ADMINISTRATIVE PROCESS
    /// </summary>
    utility::string_t getAdminProcess() const;
    void setAdminProcess(utility::string_t value);
    bool adminProcessIsSet() const;
    void unsetAdminProcess();
    /// <summary>
    /// Business code. Código da obra OBRA
    /// </summary>
    utility::string_t getBuildCode() const;
    void setBuildCode(utility::string_t value);
    bool buildCodeIsSet() const;
    void unsetBuildCode();

protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
std::shared_ptr<EntityType> m_Type;
    utility::string_t m_Email;
    bool m_EmailIsSet;
utility::string_t m_Cnpjcpf;
    bool m_CnpjcpfIsSet;
utility::string_t m_CityTaxId;
    bool m_CityTaxIdIsSet;
utility::string_t m_StateTaxId;
    bool m_StateTaxIdIsSet;
utility::string_t m_Suframa;
    bool m_SuframaIsSet;
utility::string_t m_Phone;
    bool m_PhoneIsSet;
std::shared_ptr<FederalTaxRegime> m_TaxRegime;
    utility::string_t m_SpecialTaxRegime;
    bool m_SpecialTaxRegimeIsSet;
bool m_SubjectToSRF1234;
    bool m_SubjectToSRF1234IsSet;
bool m_RequiredWithholdingISS;
    bool m_RequiredWithholdingISSIsSet;
utility::string_t m_Art;
    bool m_ArtIsSet;
utility::string_t m_AdminProcess;
    bool m_AdminProcessIsSet;
utility::string_t m_BuildCode;
    bool m_BuildCodeIsSet;
};

}
}
}
}

#endif /* SalesEntity_H_ */
