/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Body_4.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Body_4::Body_4()
{
    m_StartDate = utility::datetime();
    m_StartDateIsSet = false;
    m_FinishDate = utility::datetime();
    m_FinishDateIsSet = false;
    
}

Body_4::~Body_4()
{
}

void Body_4::validate()
{
    // TODO: implement validation
}

web::json::value Body_4::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_StartDateIsSet)
    {
        val[U("startDate")] = ModelBase::toJson(m_StartDate);
    }
    if(m_FinishDateIsSet)
    {
        val[U("finishDate")] = ModelBase::toJson(m_FinishDate);
    }
    

    return val;
}

void Body_4::fromJson(web::json::value& val)
{
    if(val.has_field(U("startDate")))
    {
        setStartDate(ModelBase::dateFromJson(val[U("startDate")]));
        
    }
    if(val.has_field(U("finishDate")))
    {
        setFinishDate(ModelBase::dateFromJson(val[U("finishDate")]));
        
    }
    
}

void Body_4::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_StartDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("startDate"), m_StartDate));
        
    }
    if(m_FinishDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("finishDate"), m_FinishDate));
        
    }
    
}

void Body_4::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("startDate")))
    {
        setStartDate(ModelBase::dateFromHttpContent(multipart->getContent(U("startDate"))));
        
    }
    if(multipart->hasContent(U("finishDate")))
    {
        setFinishDate(ModelBase::dateFromHttpContent(multipart->getContent(U("finishDate"))));
        
    }
    
}


utility::datetime Body_4::getStartDate() const
{
    return m_StartDate;
}
void Body_4::setStartDate(utility::datetime value)
{
    m_StartDate = value;
    m_StartDateIsSet = true;
}
bool Body_4::startDateIsSet() const
{
    return m_StartDateIsSet;
}
void Body_4::unsetStartDate()
{
    m_StartDateIsSet = false;
}
utility::datetime Body_4::getFinishDate() const
{
    return m_FinishDate;
}
void Body_4::setFinishDate(utility::datetime value)
{
    m_FinishDate = value;
    m_FinishDateIsSet = true;
}
bool Body_4::finishDateIsSet() const
{
    return m_FinishDateIsSet;
}
void Body_4::unsetFinishDate()
{
    m_FinishDateIsSet = false;
}

}
}
}
}

