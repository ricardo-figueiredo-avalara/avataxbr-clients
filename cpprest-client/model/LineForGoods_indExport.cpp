/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LineForGoods_indExport.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

LineForGoods_indExport::LineForGoods_indExport()
{
    m_RegisterNumber = U("");
    m_AccessKey = U("");
    m_Quantity = 0.0;
    
}

LineForGoods_indExport::~LineForGoods_indExport()
{
}

void LineForGoods_indExport::validate()
{
    // TODO: implement validation
}

web::json::value LineForGoods_indExport::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("registerNumber")] = ModelBase::toJson(m_RegisterNumber);
    val[U("accessKey")] = ModelBase::toJson(m_AccessKey);
    val[U("quantity")] = ModelBase::toJson(m_Quantity);
    

    return val;
}

void LineForGoods_indExport::fromJson(web::json::value& val)
{
    setRegisterNumber(ModelBase::stringFromJson(val[U("registerNumber")]));
    setAccessKey(ModelBase::stringFromJson(val[U("accessKey")]));
    setQuantity(ModelBase::doubleFromJson(val[U("quantity")]));
    
}

void LineForGoods_indExport::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("registerNumber"), m_RegisterNumber));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("accessKey"), m_AccessKey));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("quantity"), m_Quantity));
    
}

void LineForGoods_indExport::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setRegisterNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("registerNumber"))));
    setAccessKey(ModelBase::stringFromHttpContent(multipart->getContent(U("accessKey"))));
    setQuantity(ModelBase::doubleFromHttpContent(multipart->getContent(U("quantity"))));
    
}


utility::string_t LineForGoods_indExport::getRegisterNumber() const
{
    return m_RegisterNumber;
}
void LineForGoods_indExport::setRegisterNumber(utility::string_t value)
{
    m_RegisterNumber = value;
    
}
utility::string_t LineForGoods_indExport::getAccessKey() const
{
    return m_AccessKey;
}
void LineForGoods_indExport::setAccessKey(utility::string_t value)
{
    m_AccessKey = value;
    
}
double LineForGoods_indExport::getQuantity() const
{
    return m_Quantity;
}
void LineForGoods_indExport::setQuantity(double value)
{
    m_Quantity = value;
    
}

}
}
}
}

