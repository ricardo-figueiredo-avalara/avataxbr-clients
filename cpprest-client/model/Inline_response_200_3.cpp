/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Inline_response_200_3.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Inline_response_200_3::Inline_response_200_3()
{
    m_Contingency = false;
    m_ContingencyIsSet = false;
    m_StartDate = utility::datetime();
    m_StartDateIsSet = false;
    m_FinishDate = utility::datetime();
    m_FinishDateIsSet = false;
    
}

Inline_response_200_3::~Inline_response_200_3()
{
}

void Inline_response_200_3::validate()
{
    // TODO: implement validation
}

web::json::value Inline_response_200_3::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ContingencyIsSet)
    {
        val[U("contingency")] = ModelBase::toJson(m_Contingency);
    }
    if(m_StartDateIsSet)
    {
        val[U("startDate")] = ModelBase::toJson(m_StartDate);
    }
    if(m_FinishDateIsSet)
    {
        val[U("finishDate")] = ModelBase::toJson(m_FinishDate);
    }
    

    return val;
}

void Inline_response_200_3::fromJson(web::json::value& val)
{
    if(val.has_field(U("contingency")))
    {
        setContingency(ModelBase::boolFromJson(val[U("contingency")]));
    }
    if(val.has_field(U("startDate")))
    {
        setStartDate(ModelBase::dateFromJson(val[U("startDate")]));
        
    }
    if(val.has_field(U("finishDate")))
    {
        setFinishDate(ModelBase::dateFromJson(val[U("finishDate")]));
        
    }
    
}

void Inline_response_200_3::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ContingencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("contingency"), m_Contingency));
    }
    if(m_StartDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("startDate"), m_StartDate));
        
    }
    if(m_FinishDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("finishDate"), m_FinishDate));
        
    }
    
}

void Inline_response_200_3::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("contingency")))
    {
        setContingency(ModelBase::boolFromHttpContent(multipart->getContent(U("contingency"))));
    }
    if(multipart->hasContent(U("startDate")))
    {
        setStartDate(ModelBase::dateFromHttpContent(multipart->getContent(U("startDate"))));
        
    }
    if(multipart->hasContent(U("finishDate")))
    {
        setFinishDate(ModelBase::dateFromHttpContent(multipart->getContent(U("finishDate"))));
        
    }
    
}


bool Inline_response_200_3::getContingency() const
{
    return m_Contingency;
}
void Inline_response_200_3::setContingency(bool value)
{
    m_Contingency = value;
    m_ContingencyIsSet = true;
}
bool Inline_response_200_3::contingencyIsSet() const
{
    return m_ContingencyIsSet;
}
void Inline_response_200_3::unsetContingency()
{
    m_ContingencyIsSet = false;
}
utility::datetime Inline_response_200_3::getStartDate() const
{
    return m_StartDate;
}
void Inline_response_200_3::setStartDate(utility::datetime value)
{
    m_StartDate = value;
    m_StartDateIsSet = true;
}
bool Inline_response_200_3::startDateIsSet() const
{
    return m_StartDateIsSet;
}
void Inline_response_200_3::unsetStartDate()
{
    m_StartDateIsSet = false;
}
utility::datetime Inline_response_200_3::getFinishDate() const
{
    return m_FinishDate;
}
void Inline_response_200_3::setFinishDate(utility::datetime value)
{
    m_FinishDate = value;
    m_FinishDateIsSet = true;
}
bool Inline_response_200_3::finishDateIsSet() const
{
    return m_FinishDateIsSet;
}
void Inline_response_200_3::unsetFinishDate()
{
    m_FinishDateIsSet = false;
}

}
}
}
}

