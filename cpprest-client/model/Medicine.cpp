/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Medicine.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Medicine::Medicine()
{
    m_LoteNumber = U("");
    m_LoteQuantity = 0.0;
    m_MaxValueToEndUser = 0.0;
    
}

Medicine::~Medicine()
{
}

void Medicine::validate()
{
    // TODO: implement validation
}

web::json::value Medicine::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("loteNumber")] = ModelBase::toJson(m_LoteNumber);
    val[U("loteQuantity")] = ModelBase::toJson(m_LoteQuantity);
    val[U("manufactotyDate")] = ModelBase::toJson(m_ManufactotyDate);
    val[U("expirationDate")] = ModelBase::toJson(m_ExpirationDate);
    val[U("maxValueToEndUser")] = ModelBase::toJson(m_MaxValueToEndUser);
    

    return val;
}

void Medicine::fromJson(web::json::value& val)
{
    setLoteNumber(ModelBase::stringFromJson(val[U("loteNumber")]));
    setLoteQuantity(ModelBase::doubleFromJson(val[U("loteQuantity")]));
    utility::datetime newManufactotyDate(utility::datetime());
    newManufactotyDate->fromJson(val[U("manufactotyDate")]);
    setManufactotyDate( newItem );
    utility::datetime newExpirationDate(utility::datetime());
    newExpirationDate->fromJson(val[U("expirationDate")]);
    setExpirationDate( newItem );
    setMaxValueToEndUser(ModelBase::doubleFromJson(val[U("maxValueToEndUser")]));
    
}

void Medicine::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("loteNumber"), m_LoteNumber));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("loteQuantity"), m_LoteQuantity));
    m_ManufactotyDate->toMultipart(multipart, U("manufactotyDate."));
    m_ExpirationDate->toMultipart(multipart, U("expirationDate."));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("maxValueToEndUser"), m_MaxValueToEndUser));
    
}

void Medicine::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setLoteNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("loteNumber"))));
    setLoteQuantity(ModelBase::doubleFromHttpContent(multipart->getContent(U("loteQuantity"))));
    utility::datetime newManufactotyDate(utility::datetime());
    newManufactotyDate->fromMultiPart(multipart, U("manufactotyDate."));
    setManufactotyDate( newManufactotyDate );
    utility::datetime newExpirationDate(utility::datetime());
    newExpirationDate->fromMultiPart(multipart, U("expirationDate."));
    setExpirationDate( newExpirationDate );
    setMaxValueToEndUser(ModelBase::doubleFromHttpContent(multipart->getContent(U("maxValueToEndUser"))));
    
}


utility::string_t Medicine::getLoteNumber() const
{
    return m_LoteNumber;
}
void Medicine::setLoteNumber(utility::string_t value)
{
    m_LoteNumber = value;
    
}
double Medicine::getLoteQuantity() const
{
    return m_LoteQuantity;
}
void Medicine::setLoteQuantity(double value)
{
    m_LoteQuantity = value;
    
}
utility::datetime Medicine::getManufactotyDate() const
{
    return m_ManufactotyDate;
}
void Medicine::setManufactotyDate(utility::datetime value)
{
    m_ManufactotyDate = value;
    
}
utility::datetime Medicine::getExpirationDate() const
{
    return m_ExpirationDate;
}
void Medicine::setExpirationDate(utility::datetime value)
{
    m_ExpirationDate = value;
    
}
double Medicine::getMaxValueToEndUser() const
{
    return m_MaxValueToEndUser;
}
void Medicine::setMaxValueToEndUser(double value)
{
    m_MaxValueToEndUser = value;
    
}

}
}
}
}

