/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Company_configuration.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Company_configuration::Company_configuration()
{
    m_Certificate = U("");
    m_CertificateIsSet = false;
    m_Certificatepwd = U("");
    m_CertificatepwdIsSet = false;
    m_Certificateexpiration = utility::datetime();
    m_CertificateexpirationIsSet = false;
    m_Logo = U("");
    m_LogoIsSet = false;
    m_TpImpNFe = U("");
    m_TpImpNFeIsSet = false;
    m_TpImpNFCe = U("");
    m_TpImpNFCeIsSet = false;
    
}

Company_configuration::~Company_configuration()
{
}

void Company_configuration::validate()
{
    // TODO: implement validation
}

web::json::value Company_configuration::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CertificateIsSet)
    {
        val[U("certificate")] = ModelBase::toJson(m_Certificate);
    }
    if(m_CertificatepwdIsSet)
    {
        val[U("certificatepwd")] = ModelBase::toJson(m_Certificatepwd);
    }
    if(m_CertificateexpirationIsSet)
    {
        val[U("certificateexpiration")] = ModelBase::toJson(m_Certificateexpiration);
    }
    if(m_LogoIsSet)
    {
        val[U("logo")] = ModelBase::toJson(m_Logo);
    }
    if(m_TpImpNFeIsSet)
    {
        val[U("tpImpNFe")] = ModelBase::toJson(m_TpImpNFe);
    }
    if(m_TpImpNFCeIsSet)
    {
        val[U("tpImpNFCe")] = ModelBase::toJson(m_TpImpNFCe);
    }
    

    return val;
}

void Company_configuration::fromJson(web::json::value& val)
{
    if(val.has_field(U("certificate")))
    {
        setCertificate(ModelBase::stringFromJson(val[U("certificate")]));
        
    }
    if(val.has_field(U("certificatepwd")))
    {
        setCertificatepwd(ModelBase::stringFromJson(val[U("certificatepwd")]));
        
    }
    if(val.has_field(U("certificateexpiration")))
    {
        setCertificateexpiration(ModelBase::dateFromJson(val[U("certificateexpiration")]));
        
    }
    if(val.has_field(U("logo")))
    {
        setLogo(ModelBase::stringFromJson(val[U("logo")]));
        
    }
    if(val.has_field(U("tpImpNFe")))
    {
        setTpImpNFe(ModelBase::stringFromJson(val[U("tpImpNFe")]));
        
    }
    if(val.has_field(U("tpImpNFCe")))
    {
        setTpImpNFCe(ModelBase::stringFromJson(val[U("tpImpNFCe")]));
        
    }
    
}

void Company_configuration::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CertificateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("certificate"), m_Certificate));
        
    }
    if(m_CertificatepwdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("certificatepwd"), m_Certificatepwd));
        
    }
    if(m_CertificateexpirationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("certificateexpiration"), m_Certificateexpiration));
        
    }
    if(m_LogoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("logo"), m_Logo));
        
    }
    if(m_TpImpNFeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("tpImpNFe"), m_TpImpNFe));
        
    }
    if(m_TpImpNFCeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("tpImpNFCe"), m_TpImpNFCe));
        
    }
    
}

void Company_configuration::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("certificate")))
    {
        setCertificate(ModelBase::stringFromHttpContent(multipart->getContent(U("certificate"))));
        
    }
    if(multipart->hasContent(U("certificatepwd")))
    {
        setCertificatepwd(ModelBase::stringFromHttpContent(multipart->getContent(U("certificatepwd"))));
        
    }
    if(multipart->hasContent(U("certificateexpiration")))
    {
        setCertificateexpiration(ModelBase::dateFromHttpContent(multipart->getContent(U("certificateexpiration"))));
        
    }
    if(multipart->hasContent(U("logo")))
    {
        setLogo(ModelBase::stringFromHttpContent(multipart->getContent(U("logo"))));
        
    }
    if(multipart->hasContent(U("tpImpNFe")))
    {
        setTpImpNFe(ModelBase::stringFromHttpContent(multipart->getContent(U("tpImpNFe"))));
        
    }
    if(multipart->hasContent(U("tpImpNFCe")))
    {
        setTpImpNFCe(ModelBase::stringFromHttpContent(multipart->getContent(U("tpImpNFCe"))));
        
    }
    
}


utility::string_t Company_configuration::getCertificate() const
{
    return m_Certificate;
}
void Company_configuration::setCertificate(utility::string_t value)
{
    m_Certificate = value;
    m_CertificateIsSet = true;
}
bool Company_configuration::certificateIsSet() const
{
    return m_CertificateIsSet;
}
void Company_configuration::unsetCertificate()
{
    m_CertificateIsSet = false;
}
utility::string_t Company_configuration::getCertificatepwd() const
{
    return m_Certificatepwd;
}
void Company_configuration::setCertificatepwd(utility::string_t value)
{
    m_Certificatepwd = value;
    m_CertificatepwdIsSet = true;
}
bool Company_configuration::certificatepwdIsSet() const
{
    return m_CertificatepwdIsSet;
}
void Company_configuration::unsetCertificatepwd()
{
    m_CertificatepwdIsSet = false;
}
utility::datetime Company_configuration::getCertificateexpiration() const
{
    return m_Certificateexpiration;
}
void Company_configuration::setCertificateexpiration(utility::datetime value)
{
    m_Certificateexpiration = value;
    m_CertificateexpirationIsSet = true;
}
bool Company_configuration::certificateexpirationIsSet() const
{
    return m_CertificateexpirationIsSet;
}
void Company_configuration::unsetCertificateexpiration()
{
    m_CertificateexpirationIsSet = false;
}
utility::string_t Company_configuration::getLogo() const
{
    return m_Logo;
}
void Company_configuration::setLogo(utility::string_t value)
{
    m_Logo = value;
    m_LogoIsSet = true;
}
bool Company_configuration::logoIsSet() const
{
    return m_LogoIsSet;
}
void Company_configuration::unsetLogo()
{
    m_LogoIsSet = false;
}
utility::string_t Company_configuration::getTpImpNFe() const
{
    return m_TpImpNFe;
}
void Company_configuration::setTpImpNFe(utility::string_t value)
{
    m_TpImpNFe = value;
    m_TpImpNFeIsSet = true;
}
bool Company_configuration::tpImpNFeIsSet() const
{
    return m_TpImpNFeIsSet;
}
void Company_configuration::unsetTpImpNFe()
{
    m_TpImpNFeIsSet = false;
}
utility::string_t Company_configuration::getTpImpNFCe() const
{
    return m_TpImpNFCe;
}
void Company_configuration::setTpImpNFCe(utility::string_t value)
{
    m_TpImpNFCe = value;
    m_TpImpNFCeIsSet = true;
}
bool Company_configuration::tpImpNFCeIsSet() const
{
    return m_TpImpNFCeIsSet;
}
void Company_configuration::unsetTpImpNFCe()
{
    m_TpImpNFCeIsSet = false;
}

}
}
}
}

