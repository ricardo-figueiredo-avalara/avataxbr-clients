/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LegalReason_referencedProcesses.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

LegalReason_referencedProcesses::LegalReason_referencedProcesses()
{
    m_NProc = U("");
    m_NProcIsSet = false;
    m_IndProc = U("");
    m_IndProcIsSet = false;
    
}

LegalReason_referencedProcesses::~LegalReason_referencedProcesses()
{
}

void LegalReason_referencedProcesses::validate()
{
    // TODO: implement validation
}

web::json::value LegalReason_referencedProcesses::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NProcIsSet)
    {
        val[U("nProc")] = ModelBase::toJson(m_NProc);
    }
    if(m_IndProcIsSet)
    {
        val[U("indProc")] = ModelBase::toJson(m_IndProc);
    }
    

    return val;
}

void LegalReason_referencedProcesses::fromJson(web::json::value& val)
{
    if(val.has_field(U("nProc")))
    {
        setNProc(ModelBase::stringFromJson(val[U("nProc")]));
        
    }
    if(val.has_field(U("indProc")))
    {
        setIndProc(ModelBase::stringFromJson(val[U("indProc")]));
        
    }
    
}

void LegalReason_referencedProcesses::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_NProcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("nProc"), m_NProc));
        
    }
    if(m_IndProcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("indProc"), m_IndProc));
        
    }
    
}

void LegalReason_referencedProcesses::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("nProc")))
    {
        setNProc(ModelBase::stringFromHttpContent(multipart->getContent(U("nProc"))));
        
    }
    if(multipart->hasContent(U("indProc")))
    {
        setIndProc(ModelBase::stringFromHttpContent(multipart->getContent(U("indProc"))));
        
    }
    
}


utility::string_t LegalReason_referencedProcesses::getNProc() const
{
    return m_NProc;
}
void LegalReason_referencedProcesses::setNProc(utility::string_t value)
{
    m_NProc = value;
    m_NProcIsSet = true;
}
bool LegalReason_referencedProcesses::nProcIsSet() const
{
    return m_NProcIsSet;
}
void LegalReason_referencedProcesses::unsetNProc()
{
    m_NProcIsSet = false;
}
utility::string_t LegalReason_referencedProcesses::getIndProc() const
{
    return m_IndProc;
}
void LegalReason_referencedProcesses::setIndProc(utility::string_t value)
{
    m_IndProc = value;
    m_IndProcIsSet = true;
}
bool LegalReason_referencedProcesses::indProcIsSet() const
{
    return m_IndProcIsSet;
}
void LegalReason_referencedProcesses::unsetIndProc()
{
    m_IndProcIsSet = false;
}

}
}
}
}

