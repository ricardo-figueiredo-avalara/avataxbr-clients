/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PurchaseCalculatedTaxSummaryForService.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PurchaseCalculatedTaxSummaryForService::PurchaseCalculatedTaxSummaryForService()
{
    m_NumberOfLines = 0;
    m_NumberOfLinesIsSet = false;
    m_Subtotal = 0.0;
    m_SubtotalIsSet = false;
    m_TotalTax = 0.0;
    m_TotalTaxIsSet = false;
    m_GrandTotal = 0.0;
    m_GrandTotalIsSet = false;
    m_TaxByTypeIsSet = false;
    
}

PurchaseCalculatedTaxSummaryForService::~PurchaseCalculatedTaxSummaryForService()
{
}

void PurchaseCalculatedTaxSummaryForService::validate()
{
    // TODO: implement validation
}

web::json::value PurchaseCalculatedTaxSummaryForService::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NumberOfLinesIsSet)
    {
        val[U("numberOfLines")] = ModelBase::toJson(m_NumberOfLines);
    }
    if(m_SubtotalIsSet)
    {
        val[U("subtotal")] = ModelBase::toJson(m_Subtotal);
    }
    if(m_TotalTaxIsSet)
    {
        val[U("totalTax")] = ModelBase::toJson(m_TotalTax);
    }
    if(m_GrandTotalIsSet)
    {
        val[U("grandTotal")] = ModelBase::toJson(m_GrandTotal);
    }
    if(m_TaxByTypeIsSet)
    {
        val[U("taxByType")] = ModelBase::toJson(m_TaxByType);
    }
    

    return val;
}

void PurchaseCalculatedTaxSummaryForService::fromJson(web::json::value& val)
{
    if(val.has_field(U("numberOfLines")))
    {
        setNumberOfLines(ModelBase::int32_tFromJson(val[U("numberOfLines")]));
    }
    if(val.has_field(U("subtotal")))
    {
        setSubtotal(ModelBase::doubleFromJson(val[U("subtotal")]));
    }
    if(val.has_field(U("totalTax")))
    {
        setTotalTax(ModelBase::doubleFromJson(val[U("totalTax")]));
    }
    if(val.has_field(U("grandTotal")))
    {
        setGrandTotal(ModelBase::doubleFromJson(val[U("grandTotal")]));
    }
    if(val.has_field(U("taxByType")))
    {
        if(!val[U("taxByType")].is_null())
        {
            std::shared_ptr<PurchaseCalculatedTaxSummaryForService_taxByType> newItem(new PurchaseCalculatedTaxSummaryForService_taxByType());
            newItem->fromJson(val[U("taxByType")]);
            setTaxByType( newItem );
        }
        
    }
    
}

void PurchaseCalculatedTaxSummaryForService::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_NumberOfLinesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("numberOfLines"), m_NumberOfLines));
    }
    if(m_SubtotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("subtotal"), m_Subtotal));
    }
    if(m_TotalTaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("totalTax"), m_TotalTax));
    }
    if(m_GrandTotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("grandTotal"), m_GrandTotal));
    }
    if(m_TaxByTypeIsSet)
    {
        if (m_TaxByType.get())
        {
            m_TaxByType->toMultipart(multipart, U("taxByType."));
        }
        
    }
    
}

void PurchaseCalculatedTaxSummaryForService::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("numberOfLines")))
    {
        setNumberOfLines(ModelBase::int32_tFromHttpContent(multipart->getContent(U("numberOfLines"))));
    }
    if(multipart->hasContent(U("subtotal")))
    {
        setSubtotal(ModelBase::doubleFromHttpContent(multipart->getContent(U("subtotal"))));
    }
    if(multipart->hasContent(U("totalTax")))
    {
        setTotalTax(ModelBase::doubleFromHttpContent(multipart->getContent(U("totalTax"))));
    }
    if(multipart->hasContent(U("grandTotal")))
    {
        setGrandTotal(ModelBase::doubleFromHttpContent(multipart->getContent(U("grandTotal"))));
    }
    if(multipart->hasContent(U("taxByType")))
    {
        if(multipart->hasContent(U("taxByType")))
        {
            std::shared_ptr<PurchaseCalculatedTaxSummaryForService_taxByType> newItem(new PurchaseCalculatedTaxSummaryForService_taxByType());
            newItem->fromMultiPart(multipart, U("taxByType."));
            setTaxByType( newItem );
        }
        
    }
    
}


int32_t PurchaseCalculatedTaxSummaryForService::getNumberOfLines() const
{
    return m_NumberOfLines;
}
void PurchaseCalculatedTaxSummaryForService::setNumberOfLines(int32_t value)
{
    m_NumberOfLines = value;
    m_NumberOfLinesIsSet = true;
}
bool PurchaseCalculatedTaxSummaryForService::numberOfLinesIsSet() const
{
    return m_NumberOfLinesIsSet;
}
void PurchaseCalculatedTaxSummaryForService::unsetNumberOfLines()
{
    m_NumberOfLinesIsSet = false;
}
double PurchaseCalculatedTaxSummaryForService::getSubtotal() const
{
    return m_Subtotal;
}
void PurchaseCalculatedTaxSummaryForService::setSubtotal(double value)
{
    m_Subtotal = value;
    m_SubtotalIsSet = true;
}
bool PurchaseCalculatedTaxSummaryForService::subtotalIsSet() const
{
    return m_SubtotalIsSet;
}
void PurchaseCalculatedTaxSummaryForService::unsetSubtotal()
{
    m_SubtotalIsSet = false;
}
double PurchaseCalculatedTaxSummaryForService::getTotalTax() const
{
    return m_TotalTax;
}
void PurchaseCalculatedTaxSummaryForService::setTotalTax(double value)
{
    m_TotalTax = value;
    m_TotalTaxIsSet = true;
}
bool PurchaseCalculatedTaxSummaryForService::totalTaxIsSet() const
{
    return m_TotalTaxIsSet;
}
void PurchaseCalculatedTaxSummaryForService::unsetTotalTax()
{
    m_TotalTaxIsSet = false;
}
double PurchaseCalculatedTaxSummaryForService::getGrandTotal() const
{
    return m_GrandTotal;
}
void PurchaseCalculatedTaxSummaryForService::setGrandTotal(double value)
{
    m_GrandTotal = value;
    m_GrandTotalIsSet = true;
}
bool PurchaseCalculatedTaxSummaryForService::grandTotalIsSet() const
{
    return m_GrandTotalIsSet;
}
void PurchaseCalculatedTaxSummaryForService::unsetGrandTotal()
{
    m_GrandTotalIsSet = false;
}
std::shared_ptr<PurchaseCalculatedTaxSummaryForService_taxByType> PurchaseCalculatedTaxSummaryForService::getTaxByType() const
{
    return m_TaxByType;
}
void PurchaseCalculatedTaxSummaryForService::setTaxByType(std::shared_ptr<PurchaseCalculatedTaxSummaryForService_taxByType> value)
{
    m_TaxByType = value;
    m_TaxByTypeIsSet = true;
}
bool PurchaseCalculatedTaxSummaryForService::taxByTypeIsSet() const
{
    return m_TaxByTypeIsSet;
}
void PurchaseCalculatedTaxSummaryForService::unsetTaxByType()
{
    m_TaxByTypeIsSet = false;
}

}
}
}
}

