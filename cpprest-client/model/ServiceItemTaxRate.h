/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ServiceItemTaxRate.h
 *
 * 
 */

#ifndef ServiceItemTaxRate_H_
#define ServiceItemTaxRate_H_


#include "ModelBase.h"

#include "ServiceItemTaxRate_period.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ServiceItemTaxRate
    : public ModelBase
{
public:
    ServiceItemTaxRate();
    virtual ~ServiceItemTaxRate();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ServiceItemTaxRate members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTaxType() const;
    void setTaxType(utility::string_t value);
    bool taxTypeIsSet() const;
    void unsetTaxType();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRateType() const;
    void setRateType(utility::string_t value);
    bool rateTypeIsSet() const;
    void unsetRateType();
    /// <summary>
    /// 
    /// </summary>
    double getRate() const;
    void setRate(double value);
    bool rateIsSet() const;
    void unsetRate();
    /// <summary>
    /// 
    /// </summary>
    bool getIsExempt() const;
    void setIsExempt(bool value);
    bool isExemptIsSet() const;
    void unsetIsExempt();
    /// <summary>
    /// 
    /// </summary>
    double getDiscount() const;
    void setDiscount(double value);
    bool discountIsSet() const;
    void unsetDiscount();
    /// <summary>
    /// 
    /// </summary>
    int32_t getZone1() const;
    void setZone1(int32_t value);
    bool zone1IsSet() const;
    void unsetZone1();
    /// <summary>
    /// 
    /// </summary>
    int32_t getZone2() const;
    void setZone2(int32_t value);
    bool zone2IsSet() const;
    void unsetZone2();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ServiceItemTaxRate_period> getPeriod() const;
    void setPeriod(std::shared_ptr<ServiceItemTaxRate_period> value);
    bool periodIsSet() const;
    void unsetPeriod();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReason() const;
    void setReason(utility::string_t value);
    bool reasonIsSet() const;
    void unsetReason();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMessage() const;
    void setMessage(utility::string_t value);
    bool messageIsSet() const;
    void unsetMessage();

protected:
    utility::string_t m_TaxType;
    bool m_TaxTypeIsSet;
utility::string_t m_RateType;
    bool m_RateTypeIsSet;
double m_Rate;
    bool m_RateIsSet;
bool m_IsExempt;
    bool m_IsExemptIsSet;
double m_Discount;
    bool m_DiscountIsSet;
int32_t m_Zone1;
    bool m_Zone1IsSet;
int32_t m_Zone2;
    bool m_Zone2IsSet;
std::shared_ptr<ServiceItemTaxRate_period> m_Period;
    bool m_PeriodIsSet;
utility::string_t m_Reason;
    bool m_ReasonIsSet;
utility::string_t m_Message;
    bool m_MessageIsSet;
};

}
}
}
}

#endif /* ServiceItemTaxRate_H_ */
