/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * PccWithholdingMode.h
 *
 * 
 */

#ifndef PccWithholdingMode_H_
#define PccWithholdingMode_H_


#include "ModelBase.h"

#include "TaxByTypeTax.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  PccWithholdingMode
    : public ModelBase
{
public:
    PccWithholdingMode();
    virtual ~PccWithholdingMode();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PccWithholdingMode members

    /// <summary>
    /// Inform if this group of tax are calculated considering the threashold by PCC or Individualy (each tax separately)
    /// </summary>
    utility::string_t getType() const;
    void setType(utility::string_t value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// this attribute occurs only for CSRF type, When CRSF mode, this is sum of pisRf, CofinsRf and CsllRf
    /// </summary>
    double getTotalTax() const;
    void setTotalTax(double value);
    bool totalTaxIsSet() const;
    void unsetTotalTax();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeTax> getPisRf() const;
    void setPisRf(std::shared_ptr<TaxByTypeTax> value);
    bool pisRfIsSet() const;
    void unsetPisRf();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeTax> getCofinsRf() const;
    void setCofinsRf(std::shared_ptr<TaxByTypeTax> value);
    bool cofinsRfIsSet() const;
    void unsetCofinsRf();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TaxByTypeTax> getCsllRf() const;
    void setCsllRf(std::shared_ptr<TaxByTypeTax> value);
    bool csllRfIsSet() const;
    void unsetCsllRf();

protected:
    utility::string_t m_Type;
    bool m_TypeIsSet;
double m_TotalTax;
    bool m_TotalTaxIsSet;
std::shared_ptr<TaxByTypeTax> m_PisRf;
    bool m_PisRfIsSet;
std::shared_ptr<TaxByTypeTax> m_CofinsRf;
    bool m_CofinsRfIsSet;
std::shared_ptr<TaxByTypeTax> m_CsllRf;
    bool m_CsllRfIsSet;
};

}
}
}
}

#endif /* PccWithholdingMode_H_ */
