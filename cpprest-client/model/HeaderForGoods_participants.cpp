/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "HeaderForGoods_participants.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

HeaderForGoods_participants::HeaderForGoods_participants()
{
    m_EntityIsSet = false;
    m_TransporterIsSet = false;
    
}

HeaderForGoods_participants::~HeaderForGoods_participants()
{
}

void HeaderForGoods_participants::validate()
{
    // TODO: implement validation
}

web::json::value HeaderForGoods_participants::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EntityIsSet)
    {
        val[U("entity")] = ModelBase::toJson(m_Entity);
    }
    if(m_TransporterIsSet)
    {
        val[U("transporter")] = ModelBase::toJson(m_Transporter);
    }
    

    return val;
}

void HeaderForGoods_participants::fromJson(web::json::value& val)
{
    if(val.has_field(U("entity")))
    {
        if(!val[U("entity")].is_null())
        {
            std::shared_ptr<EntityForGoods> newItem(new EntityForGoods());
            newItem->fromJson(val[U("entity")]);
            setEntity( newItem );
        }
        
    }
    if(val.has_field(U("transporter")))
    {
        if(!val[U("transporter")].is_null())
        {
            std::shared_ptr<EntityForGoods> newItem(new EntityForGoods());
            newItem->fromJson(val[U("transporter")]);
            setTransporter( newItem );
        }
        
    }
    
}

void HeaderForGoods_participants::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_EntityIsSet)
    {
        if (m_Entity.get())
        {
            m_Entity->toMultipart(multipart, U("entity."));
        }
        
    }
    if(m_TransporterIsSet)
    {
        if (m_Transporter.get())
        {
            m_Transporter->toMultipart(multipart, U("transporter."));
        }
        
    }
    
}

void HeaderForGoods_participants::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("entity")))
    {
        if(multipart->hasContent(U("entity")))
        {
            std::shared_ptr<EntityForGoods> newItem(new EntityForGoods());
            newItem->fromMultiPart(multipart, U("entity."));
            setEntity( newItem );
        }
        
    }
    if(multipart->hasContent(U("transporter")))
    {
        if(multipart->hasContent(U("transporter")))
        {
            std::shared_ptr<EntityForGoods> newItem(new EntityForGoods());
            newItem->fromMultiPart(multipart, U("transporter."));
            setTransporter( newItem );
        }
        
    }
    
}


std::shared_ptr<EntityForGoods> HeaderForGoods_participants::getEntity() const
{
    return m_Entity;
}
void HeaderForGoods_participants::setEntity(std::shared_ptr<EntityForGoods> value)
{
    m_Entity = value;
    m_EntityIsSet = true;
}
bool HeaderForGoods_participants::entityIsSet() const
{
    return m_EntityIsSet;
}
void HeaderForGoods_participants::unsetEntity()
{
    m_EntityIsSet = false;
}
std::shared_ptr<EntityForGoods> HeaderForGoods_participants::getTransporter() const
{
    return m_Transporter;
}
void HeaderForGoods_participants::setTransporter(std::shared_ptr<EntityForGoods> value)
{
    m_Transporter = value;
    m_TransporterIsSet = true;
}
bool HeaderForGoods_participants::transporterIsSet() const
{
    return m_TransporterIsSet;
}
void HeaderForGoods_participants::unsetTransporter()
{
    m_TransporterIsSet = false;
}

}
}
}
}

