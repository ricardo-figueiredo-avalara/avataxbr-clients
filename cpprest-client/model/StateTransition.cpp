/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "StateTransition.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

StateTransition::StateTransition()
{
    m_Type = U("");
    m_Comment = U("");
    m_CommentIsSet = false;
    
}

StateTransition::~StateTransition()
{
}

void StateTransition::validate()
{
    // TODO: implement validation
}

web::json::value StateTransition::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("type")] = ModelBase::toJson(m_Type);
    if(m_CommentIsSet)
    {
        val[U("comment")] = ModelBase::toJson(m_Comment);
    }
    

    return val;
}

void StateTransition::fromJson(web::json::value& val)
{
    setType(ModelBase::stringFromJson(val[U("type")]));
    if(val.has_field(U("comment")))
    {
        setComment(ModelBase::stringFromJson(val[U("comment")]));
        
    }
    
}

void StateTransition::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
    if(m_CommentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("comment"), m_Comment));
        
    }
    
}

void StateTransition::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    if(multipart->hasContent(U("comment")))
    {
        setComment(ModelBase::stringFromHttpContent(multipart->getContent(U("comment"))));
        
    }
    
}


utility::string_t StateTransition::getType() const
{
    return m_Type;
}
void StateTransition::setType(utility::string_t value)
{
    m_Type = value;
    
}
utility::string_t StateTransition::getComment() const
{
    return m_Comment;
}
void StateTransition::setComment(utility::string_t value)
{
    m_Comment = value;
    m_CommentIsSet = true;
}
bool StateTransition::commentIsSet() const
{
    return m_CommentIsSet;
}
void StateTransition::unsetComment()
{
    m_CommentIsSet = false;
}

}
}
}
}

