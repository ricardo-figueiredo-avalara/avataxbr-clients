/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "EntityInformerForGoods.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

EntityInformerForGoods::EntityInformerForGoods()
{
    m_TypeIsSet = false;
    m_TaxRegimeIsSet = false;
    m_FederalTaxRegimeIsSet = false;
    m_CityCode = U("");
    m_CityCodeIsSet = false;
    m_AddressIsSet = false;
    m_DetailsIsSet = false;
    m_IcmsTaxPayer = false;
    m_IcmsTaxPayerIsSet = false;
    
}

EntityInformerForGoods::~EntityInformerForGoods()
{
}

void EntityInformerForGoods::validate()
{
    // TODO: implement validation
}

web::json::value EntityInformerForGoods::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TypeIsSet)
    {
        val[U("type")] = ModelBase::toJson(m_Type);
    }
    if(m_TaxRegimeIsSet)
    {
        val[U("taxRegime")] = ModelBase::toJson(m_TaxRegime);
    }
    if(m_FederalTaxRegimeIsSet)
    {
        val[U("federalTaxRegime")] = ModelBase::toJson(m_FederalTaxRegime);
    }
    if(m_CityCodeIsSet)
    {
        val[U("cityCode")] = ModelBase::toJson(m_CityCode);
    }
    if(m_AddressIsSet)
    {
        val[U("address")] = ModelBase::toJson(m_Address);
    }
    if(m_DetailsIsSet)
    {
        val[U("details")] = ModelBase::toJson(m_Details);
    }
    if(m_IcmsTaxPayerIsSet)
    {
        val[U("icmsTaxPayer")] = ModelBase::toJson(m_IcmsTaxPayer);
    }
    

    return val;
}

void EntityInformerForGoods::fromJson(web::json::value& val)
{
    if(val.has_field(U("type")))
    {
        if(!val[U("type")].is_null())
        {
            std::shared_ptr<EntityType> newItem(new EntityType());
            newItem->fromJson(val[U("type")]);
            setType( newItem );
        }
        
    }
    if(val.has_field(U("taxRegime")))
    {
        if(!val[U("taxRegime")].is_null())
        {
            std::shared_ptr<FederalTaxRegime> newItem(new FederalTaxRegime());
            newItem->fromJson(val[U("taxRegime")]);
            setTaxRegime( newItem );
        }
        
    }
    if(val.has_field(U("federalTaxRegime")))
    {
        if(!val[U("federalTaxRegime")].is_null())
        {
            std::shared_ptr<EntityInformerForGoods_federalTaxRegime> newItem(new EntityInformerForGoods_federalTaxRegime());
            newItem->fromJson(val[U("federalTaxRegime")]);
            setFederalTaxRegime( newItem );
        }
        
    }
    if(val.has_field(U("cityCode")))
    {
        setCityCode(ModelBase::stringFromJson(val[U("cityCode")]));
        
    }
    if(val.has_field(U("address")))
    {
        if(!val[U("address")].is_null())
        {
            std::shared_ptr<Address> newItem(new Address());
            newItem->fromJson(val[U("address")]);
            setAddress( newItem );
        }
        
    }
    if(val.has_field(U("details")))
    {
        if(!val[U("details")].is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("details")]);
            setDetails( newItem );
        }
        
    }
    if(val.has_field(U("icmsTaxPayer")))
    {
        setIcmsTaxPayer(ModelBase::boolFromJson(val[U("icmsTaxPayer")]));
    }
    
}

void EntityInformerForGoods::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_TypeIsSet)
    {
        if (m_Type.get())
        {
            m_Type->toMultipart(multipart, U("type."));
        }
        
    }
    if(m_TaxRegimeIsSet)
    {
        if (m_TaxRegime.get())
        {
            m_TaxRegime->toMultipart(multipart, U("taxRegime."));
        }
        
    }
    if(m_FederalTaxRegimeIsSet)
    {
        if (m_FederalTaxRegime.get())
        {
            m_FederalTaxRegime->toMultipart(multipart, U("federalTaxRegime."));
        }
        
    }
    if(m_CityCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cityCode"), m_CityCode));
        
    }
    if(m_AddressIsSet)
    {
        if (m_Address.get())
        {
            m_Address->toMultipart(multipart, U("address."));
        }
        
    }
    if(m_DetailsIsSet)
    {
        if (m_Details.get())
        {
            m_Details->toMultipart(multipart, U("details."));
        }
        
    }
    if(m_IcmsTaxPayerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("icmsTaxPayer"), m_IcmsTaxPayer));
    }
    
}

void EntityInformerForGoods::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("type")))
    {
        if(multipart->hasContent(U("type")))
        {
            std::shared_ptr<EntityType> newItem(new EntityType());
            newItem->fromMultiPart(multipart, U("type."));
            setType( newItem );
        }
        
    }
    if(multipart->hasContent(U("taxRegime")))
    {
        if(multipart->hasContent(U("taxRegime")))
        {
            std::shared_ptr<FederalTaxRegime> newItem(new FederalTaxRegime());
            newItem->fromMultiPart(multipart, U("taxRegime."));
            setTaxRegime( newItem );
        }
        
    }
    if(multipart->hasContent(U("federalTaxRegime")))
    {
        if(multipart->hasContent(U("federalTaxRegime")))
        {
            std::shared_ptr<EntityInformerForGoods_federalTaxRegime> newItem(new EntityInformerForGoods_federalTaxRegime());
            newItem->fromMultiPart(multipart, U("federalTaxRegime."));
            setFederalTaxRegime( newItem );
        }
        
    }
    if(multipart->hasContent(U("cityCode")))
    {
        setCityCode(ModelBase::stringFromHttpContent(multipart->getContent(U("cityCode"))));
        
    }
    if(multipart->hasContent(U("address")))
    {
        if(multipart->hasContent(U("address")))
        {
            std::shared_ptr<Address> newItem(new Address());
            newItem->fromMultiPart(multipart, U("address."));
            setAddress( newItem );
        }
        
    }
    if(multipart->hasContent(U("details")))
    {
        if(multipart->hasContent(U("details")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("details."));
            setDetails( newItem );
        }
        
    }
    if(multipart->hasContent(U("icmsTaxPayer")))
    {
        setIcmsTaxPayer(ModelBase::boolFromHttpContent(multipart->getContent(U("icmsTaxPayer"))));
    }
    
}


std::shared_ptr<EntityType> EntityInformerForGoods::getType() const
{
    return m_Type;
}
void EntityInformerForGoods::setType(std::shared_ptr<EntityType> value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool EntityInformerForGoods::typeIsSet() const
{
    return m_TypeIsSet;
}
void EntityInformerForGoods::unsetType()
{
    m_TypeIsSet = false;
}
std::shared_ptr<FederalTaxRegime> EntityInformerForGoods::getTaxRegime() const
{
    return m_TaxRegime;
}
void EntityInformerForGoods::setTaxRegime(std::shared_ptr<FederalTaxRegime> value)
{
    m_TaxRegime = value;
    m_TaxRegimeIsSet = true;
}
bool EntityInformerForGoods::taxRegimeIsSet() const
{
    return m_TaxRegimeIsSet;
}
void EntityInformerForGoods::unsetTaxRegime()
{
    m_TaxRegimeIsSet = false;
}
std::shared_ptr<EntityInformerForGoods_federalTaxRegime> EntityInformerForGoods::getFederalTaxRegime() const
{
    return m_FederalTaxRegime;
}
void EntityInformerForGoods::setFederalTaxRegime(std::shared_ptr<EntityInformerForGoods_federalTaxRegime> value)
{
    m_FederalTaxRegime = value;
    m_FederalTaxRegimeIsSet = true;
}
bool EntityInformerForGoods::federalTaxRegimeIsSet() const
{
    return m_FederalTaxRegimeIsSet;
}
void EntityInformerForGoods::unsetFederalTaxRegime()
{
    m_FederalTaxRegimeIsSet = false;
}
utility::string_t EntityInformerForGoods::getCityCode() const
{
    return m_CityCode;
}
void EntityInformerForGoods::setCityCode(utility::string_t value)
{
    m_CityCode = value;
    m_CityCodeIsSet = true;
}
bool EntityInformerForGoods::cityCodeIsSet() const
{
    return m_CityCodeIsSet;
}
void EntityInformerForGoods::unsetCityCode()
{
    m_CityCodeIsSet = false;
}
std::shared_ptr<Address> EntityInformerForGoods::getAddress() const
{
    return m_Address;
}
void EntityInformerForGoods::setAddress(std::shared_ptr<Address> value)
{
    m_Address = value;
    m_AddressIsSet = true;
}
bool EntityInformerForGoods::addressIsSet() const
{
    return m_AddressIsSet;
}
void EntityInformerForGoods::unsetAddress()
{
    m_AddressIsSet = false;
}
std::shared_ptr<Object> EntityInformerForGoods::getDetails() const
{
    return m_Details;
}
void EntityInformerForGoods::setDetails(std::shared_ptr<Object> value)
{
    m_Details = value;
    m_DetailsIsSet = true;
}
bool EntityInformerForGoods::detailsIsSet() const
{
    return m_DetailsIsSet;
}
void EntityInformerForGoods::unsetDetails()
{
    m_DetailsIsSet = false;
}
bool EntityInformerForGoods::getIcmsTaxPayer() const
{
    return m_IcmsTaxPayer;
}
void EntityInformerForGoods::setIcmsTaxPayer(bool value)
{
    m_IcmsTaxPayer = value;
    m_IcmsTaxPayerIsSet = true;
}
bool EntityInformerForGoods::icmsTaxPayerIsSet() const
{
    return m_IcmsTaxPayerIsSet;
}
void EntityInformerForGoods::unsetIcmsTaxPayer()
{
    m_IcmsTaxPayerIsSet = false;
}

}
}
}
}

