/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NRef_refFarmerNF.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

NRef_refFarmerNF::NRef_refFarmerNF()
{
    m_Yymm = U("");
    m_FederalTaxId = U("");
    m_StateTaxId = U("");
    m_Model = U("");
    m_Serie = U("");
    m_Number = U("");
    
}

NRef_refFarmerNF::~NRef_refFarmerNF()
{
}

void NRef_refFarmerNF::validate()
{
    // TODO: implement validation
}

web::json::value NRef_refFarmerNF::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("stateCd")] = ModelBase::toJson(m_StateCd);
    val[U("yymm")] = ModelBase::toJson(m_Yymm);
    val[U("federalTaxId")] = ModelBase::toJson(m_FederalTaxId);
    val[U("stateTaxId")] = ModelBase::toJson(m_StateTaxId);
    val[U("model")] = ModelBase::toJson(m_Model);
    val[U("serie")] = ModelBase::toJson(m_Serie);
    val[U("number")] = ModelBase::toJson(m_Number);
    

    return val;
}

void NRef_refFarmerNF::fromJson(web::json::value& val)
{
    std::shared_ptr<StateEnum> newStateCd(new StateEnum());
    newStateCd->fromJson(val[U("stateCd")]);
    setStateCd( newItem );
    setYymm(ModelBase::stringFromJson(val[U("yymm")]));
    setFederalTaxId(ModelBase::stringFromJson(val[U("federalTaxId")]));
    setStateTaxId(ModelBase::stringFromJson(val[U("stateTaxId")]));
    setModel(ModelBase::stringFromJson(val[U("model")]));
    setSerie(ModelBase::stringFromJson(val[U("serie")]));
    setNumber(ModelBase::stringFromJson(val[U("number")]));
    
}

void NRef_refFarmerNF::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    m_StateCd->toMultipart(multipart, U("stateCd."));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("yymm"), m_Yymm));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("federalTaxId"), m_FederalTaxId));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("stateTaxId"), m_StateTaxId));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("model"), m_Model));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("serie"), m_Serie));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("number"), m_Number));
    
}

void NRef_refFarmerNF::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    std::shared_ptr<StateEnum> newStateCd(new StateEnum());
    newStateCd->fromMultiPart(multipart, U("stateCd."));
    setStateCd( newStateCd );
    setYymm(ModelBase::stringFromHttpContent(multipart->getContent(U("yymm"))));
    setFederalTaxId(ModelBase::stringFromHttpContent(multipart->getContent(U("federalTaxId"))));
    setStateTaxId(ModelBase::stringFromHttpContent(multipart->getContent(U("stateTaxId"))));
    setModel(ModelBase::stringFromHttpContent(multipart->getContent(U("model"))));
    setSerie(ModelBase::stringFromHttpContent(multipart->getContent(U("serie"))));
    setNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("number"))));
    
}


std::shared_ptr<StateEnum> NRef_refFarmerNF::getStateCd() const
{
    return m_StateCd;
}
void NRef_refFarmerNF::setStateCd(std::shared_ptr<StateEnum> value)
{
    m_StateCd = value;
    
}
utility::string_t NRef_refFarmerNF::getYymm() const
{
    return m_Yymm;
}
void NRef_refFarmerNF::setYymm(utility::string_t value)
{
    m_Yymm = value;
    
}
utility::string_t NRef_refFarmerNF::getFederalTaxId() const
{
    return m_FederalTaxId;
}
void NRef_refFarmerNF::setFederalTaxId(utility::string_t value)
{
    m_FederalTaxId = value;
    
}
utility::string_t NRef_refFarmerNF::getStateTaxId() const
{
    return m_StateTaxId;
}
void NRef_refFarmerNF::setStateTaxId(utility::string_t value)
{
    m_StateTaxId = value;
    
}
utility::string_t NRef_refFarmerNF::getModel() const
{
    return m_Model;
}
void NRef_refFarmerNF::setModel(utility::string_t value)
{
    m_Model = value;
    
}
utility::string_t NRef_refFarmerNF::getSerie() const
{
    return m_Serie;
}
void NRef_refFarmerNF::setSerie(utility::string_t value)
{
    m_Serie = value;
    
}
utility::string_t NRef_refFarmerNF::getNumber() const
{
    return m_Number;
}
void NRef_refFarmerNF::setNumber(utility::string_t value)
{
    m_Number = value;
    
}

}
}
}
}

