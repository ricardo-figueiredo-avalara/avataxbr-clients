/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IcmsConfInterState.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

IcmsConfInterState::IcmsConfInterState()
{
    m_StateIsSet = false;
    m_CalcMode = U("");
    m_CalcModeIsSet = false;
    m_DiscountRateForMonoPhase = 0.0;
    m_DiscountRateForMonoPhaseIsSet = false;
    m_Rate = 0.0;
    m_RateIsSet = false;
    m_FcpRate = 0.0;
    m_FcpRateIsSet = false;
    m_IcmsBaseDiscount = 0.0;
    m_IcmsBaseDiscountIsSet = false;
    m_Msrp = 0.0;
    m_MsrpIsSet = false;
    m_MvaRate = 0.0;
    m_MvaRateIsSet = false;
    m_MsrpUnit = U("");
    m_MsrpUnitIsSet = false;
    m_IcmsLegalReason = U("");
    m_IcmsLegalReasonIsSet = false;
    m_IcmsSTConfIsSet = false;
    
}

IcmsConfInterState::~IcmsConfInterState()
{
}

void IcmsConfInterState::validate()
{
    // TODO: implement validation
}

web::json::value IcmsConfInterState::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_StateIsSet)
    {
        val[U("state")] = ModelBase::toJson(m_State);
    }
    if(m_CalcModeIsSet)
    {
        val[U("calcMode")] = ModelBase::toJson(m_CalcMode);
    }
    if(m_DiscountRateForMonoPhaseIsSet)
    {
        val[U("discountRateForMonoPhase")] = ModelBase::toJson(m_DiscountRateForMonoPhase);
    }
    if(m_RateIsSet)
    {
        val[U("rate")] = ModelBase::toJson(m_Rate);
    }
    if(m_FcpRateIsSet)
    {
        val[U("fcpRate")] = ModelBase::toJson(m_FcpRate);
    }
    if(m_IcmsBaseDiscountIsSet)
    {
        val[U("icmsBaseDiscount")] = ModelBase::toJson(m_IcmsBaseDiscount);
    }
    if(m_MsrpIsSet)
    {
        val[U("msrp")] = ModelBase::toJson(m_Msrp);
    }
    if(m_MvaRateIsSet)
    {
        val[U("mvaRate")] = ModelBase::toJson(m_MvaRate);
    }
    if(m_MsrpUnitIsSet)
    {
        val[U("msrpUnit")] = ModelBase::toJson(m_MsrpUnit);
    }
    if(m_IcmsLegalReasonIsSet)
    {
        val[U("icmsLegalReason")] = ModelBase::toJson(m_IcmsLegalReason);
    }
    if(m_IcmsSTConfIsSet)
    {
        val[U("icmsSTConf")] = ModelBase::toJson(m_IcmsSTConf);
    }
    

    return val;
}

void IcmsConfInterState::fromJson(web::json::value& val)
{
    if(val.has_field(U("state")))
    {
        if(!val[U("state")].is_null())
        {
            std::shared_ptr<StateEnum> newItem(new StateEnum());
            newItem->fromJson(val[U("state")]);
            setState( newItem );
        }
        
    }
    if(val.has_field(U("calcMode")))
    {
        setCalcMode(ModelBase::stringFromJson(val[U("calcMode")]));
        
    }
    if(val.has_field(U("discountRateForMonoPhase")))
    {
        setDiscountRateForMonoPhase(ModelBase::doubleFromJson(val[U("discountRateForMonoPhase")]));
    }
    if(val.has_field(U("rate")))
    {
        setRate(ModelBase::doubleFromJson(val[U("rate")]));
    }
    if(val.has_field(U("fcpRate")))
    {
        setFcpRate(ModelBase::doubleFromJson(val[U("fcpRate")]));
    }
    if(val.has_field(U("icmsBaseDiscount")))
    {
        setIcmsBaseDiscount(ModelBase::doubleFromJson(val[U("icmsBaseDiscount")]));
    }
    if(val.has_field(U("msrp")))
    {
        setMsrp(ModelBase::doubleFromJson(val[U("msrp")]));
    }
    if(val.has_field(U("mvaRate")))
    {
        setMvaRate(ModelBase::doubleFromJson(val[U("mvaRate")]));
    }
    if(val.has_field(U("msrpUnit")))
    {
        setMsrpUnit(ModelBase::stringFromJson(val[U("msrpUnit")]));
        
    }
    if(val.has_field(U("icmsLegalReason")))
    {
        setIcmsLegalReason(ModelBase::stringFromJson(val[U("icmsLegalReason")]));
        
    }
    if(val.has_field(U("icmsSTConf")))
    {
        if(!val[U("icmsSTConf")].is_null())
        {
            std::shared_ptr<IcmsConfInterState_icmsSTConf> newItem(new IcmsConfInterState_icmsSTConf());
            newItem->fromJson(val[U("icmsSTConf")]);
            setIcmsSTConf( newItem );
        }
        
    }
    
}

void IcmsConfInterState::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_StateIsSet)
    {
        if (m_State.get())
        {
            m_State->toMultipart(multipart, U("state."));
        }
        
    }
    if(m_CalcModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("calcMode"), m_CalcMode));
        
    }
    if(m_DiscountRateForMonoPhaseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("discountRateForMonoPhase"), m_DiscountRateForMonoPhase));
    }
    if(m_RateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("rate"), m_Rate));
    }
    if(m_FcpRateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("fcpRate"), m_FcpRate));
    }
    if(m_IcmsBaseDiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("icmsBaseDiscount"), m_IcmsBaseDiscount));
    }
    if(m_MsrpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("msrp"), m_Msrp));
    }
    if(m_MvaRateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("mvaRate"), m_MvaRate));
    }
    if(m_MsrpUnitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("msrpUnit"), m_MsrpUnit));
        
    }
    if(m_IcmsLegalReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("icmsLegalReason"), m_IcmsLegalReason));
        
    }
    if(m_IcmsSTConfIsSet)
    {
        if (m_IcmsSTConf.get())
        {
            m_IcmsSTConf->toMultipart(multipart, U("icmsSTConf."));
        }
        
    }
    
}

void IcmsConfInterState::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("state")))
    {
        if(multipart->hasContent(U("state")))
        {
            std::shared_ptr<StateEnum> newItem(new StateEnum());
            newItem->fromMultiPart(multipart, U("state."));
            setState( newItem );
        }
        
    }
    if(multipart->hasContent(U("calcMode")))
    {
        setCalcMode(ModelBase::stringFromHttpContent(multipart->getContent(U("calcMode"))));
        
    }
    if(multipart->hasContent(U("discountRateForMonoPhase")))
    {
        setDiscountRateForMonoPhase(ModelBase::doubleFromHttpContent(multipart->getContent(U("discountRateForMonoPhase"))));
    }
    if(multipart->hasContent(U("rate")))
    {
        setRate(ModelBase::doubleFromHttpContent(multipart->getContent(U("rate"))));
    }
    if(multipart->hasContent(U("fcpRate")))
    {
        setFcpRate(ModelBase::doubleFromHttpContent(multipart->getContent(U("fcpRate"))));
    }
    if(multipart->hasContent(U("icmsBaseDiscount")))
    {
        setIcmsBaseDiscount(ModelBase::doubleFromHttpContent(multipart->getContent(U("icmsBaseDiscount"))));
    }
    if(multipart->hasContent(U("msrp")))
    {
        setMsrp(ModelBase::doubleFromHttpContent(multipart->getContent(U("msrp"))));
    }
    if(multipart->hasContent(U("mvaRate")))
    {
        setMvaRate(ModelBase::doubleFromHttpContent(multipart->getContent(U("mvaRate"))));
    }
    if(multipart->hasContent(U("msrpUnit")))
    {
        setMsrpUnit(ModelBase::stringFromHttpContent(multipart->getContent(U("msrpUnit"))));
        
    }
    if(multipart->hasContent(U("icmsLegalReason")))
    {
        setIcmsLegalReason(ModelBase::stringFromHttpContent(multipart->getContent(U("icmsLegalReason"))));
        
    }
    if(multipart->hasContent(U("icmsSTConf")))
    {
        if(multipart->hasContent(U("icmsSTConf")))
        {
            std::shared_ptr<IcmsConfInterState_icmsSTConf> newItem(new IcmsConfInterState_icmsSTConf());
            newItem->fromMultiPart(multipart, U("icmsSTConf."));
            setIcmsSTConf( newItem );
        }
        
    }
    
}


std::shared_ptr<StateEnum> IcmsConfInterState::getState() const
{
    return m_State;
}
void IcmsConfInterState::setState(std::shared_ptr<StateEnum> value)
{
    m_State = value;
    m_StateIsSet = true;
}
bool IcmsConfInterState::stateIsSet() const
{
    return m_StateIsSet;
}
void IcmsConfInterState::unsetState()
{
    m_StateIsSet = false;
}
utility::string_t IcmsConfInterState::getCalcMode() const
{
    return m_CalcMode;
}
void IcmsConfInterState::setCalcMode(utility::string_t value)
{
    m_CalcMode = value;
    m_CalcModeIsSet = true;
}
bool IcmsConfInterState::calcModeIsSet() const
{
    return m_CalcModeIsSet;
}
void IcmsConfInterState::unsetCalcMode()
{
    m_CalcModeIsSet = false;
}
double IcmsConfInterState::getDiscountRateForMonoPhase() const
{
    return m_DiscountRateForMonoPhase;
}
void IcmsConfInterState::setDiscountRateForMonoPhase(double value)
{
    m_DiscountRateForMonoPhase = value;
    m_DiscountRateForMonoPhaseIsSet = true;
}
bool IcmsConfInterState::discountRateForMonoPhaseIsSet() const
{
    return m_DiscountRateForMonoPhaseIsSet;
}
void IcmsConfInterState::unsetDiscountRateForMonoPhase()
{
    m_DiscountRateForMonoPhaseIsSet = false;
}
double IcmsConfInterState::getRate() const
{
    return m_Rate;
}
void IcmsConfInterState::setRate(double value)
{
    m_Rate = value;
    m_RateIsSet = true;
}
bool IcmsConfInterState::rateIsSet() const
{
    return m_RateIsSet;
}
void IcmsConfInterState::unsetRate()
{
    m_RateIsSet = false;
}
double IcmsConfInterState::getFcpRate() const
{
    return m_FcpRate;
}
void IcmsConfInterState::setFcpRate(double value)
{
    m_FcpRate = value;
    m_FcpRateIsSet = true;
}
bool IcmsConfInterState::fcpRateIsSet() const
{
    return m_FcpRateIsSet;
}
void IcmsConfInterState::unsetFcpRate()
{
    m_FcpRateIsSet = false;
}
double IcmsConfInterState::getIcmsBaseDiscount() const
{
    return m_IcmsBaseDiscount;
}
void IcmsConfInterState::setIcmsBaseDiscount(double value)
{
    m_IcmsBaseDiscount = value;
    m_IcmsBaseDiscountIsSet = true;
}
bool IcmsConfInterState::icmsBaseDiscountIsSet() const
{
    return m_IcmsBaseDiscountIsSet;
}
void IcmsConfInterState::unsetIcmsBaseDiscount()
{
    m_IcmsBaseDiscountIsSet = false;
}
double IcmsConfInterState::getMsrp() const
{
    return m_Msrp;
}
void IcmsConfInterState::setMsrp(double value)
{
    m_Msrp = value;
    m_MsrpIsSet = true;
}
bool IcmsConfInterState::msrpIsSet() const
{
    return m_MsrpIsSet;
}
void IcmsConfInterState::unsetMsrp()
{
    m_MsrpIsSet = false;
}
double IcmsConfInterState::getMvaRate() const
{
    return m_MvaRate;
}
void IcmsConfInterState::setMvaRate(double value)
{
    m_MvaRate = value;
    m_MvaRateIsSet = true;
}
bool IcmsConfInterState::mvaRateIsSet() const
{
    return m_MvaRateIsSet;
}
void IcmsConfInterState::unsetMvaRate()
{
    m_MvaRateIsSet = false;
}
utility::string_t IcmsConfInterState::getMsrpUnit() const
{
    return m_MsrpUnit;
}
void IcmsConfInterState::setMsrpUnit(utility::string_t value)
{
    m_MsrpUnit = value;
    m_MsrpUnitIsSet = true;
}
bool IcmsConfInterState::msrpUnitIsSet() const
{
    return m_MsrpUnitIsSet;
}
void IcmsConfInterState::unsetMsrpUnit()
{
    m_MsrpUnitIsSet = false;
}
utility::string_t IcmsConfInterState::getIcmsLegalReason() const
{
    return m_IcmsLegalReason;
}
void IcmsConfInterState::setIcmsLegalReason(utility::string_t value)
{
    m_IcmsLegalReason = value;
    m_IcmsLegalReasonIsSet = true;
}
bool IcmsConfInterState::icmsLegalReasonIsSet() const
{
    return m_IcmsLegalReasonIsSet;
}
void IcmsConfInterState::unsetIcmsLegalReason()
{
    m_IcmsLegalReasonIsSet = false;
}
std::shared_ptr<IcmsConfInterState_icmsSTConf> IcmsConfInterState::getIcmsSTConf() const
{
    return m_IcmsSTConf;
}
void IcmsConfInterState::setIcmsSTConf(std::shared_ptr<IcmsConfInterState_icmsSTConf> value)
{
    m_IcmsSTConf = value;
    m_IcmsSTConfIsSet = true;
}
bool IcmsConfInterState::icmsSTConfIsSet() const
{
    return m_IcmsSTConfIsSet;
}
void IcmsConfInterState::unsetIcmsSTConf()
{
    m_IcmsSTConfIsSet = false;
}

}
}
}
}

