/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "DefaultLocations.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

DefaultLocations::DefaultLocations()
{
    m_EntityIsSet = false;
    m_CompanyIsSet = false;
    m_TransporterIsSet = false;
    m_DeliveryLocationIsSet = false;
    m_PickupLocationIsSet = false;
    
}

DefaultLocations::~DefaultLocations()
{
}

void DefaultLocations::validate()
{
    // TODO: implement validation
}

web::json::value DefaultLocations::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EntityIsSet)
    {
        val[U("entity")] = ModelBase::toJson(m_Entity);
    }
    if(m_CompanyIsSet)
    {
        val[U("company")] = ModelBase::toJson(m_Company);
    }
    if(m_TransporterIsSet)
    {
        val[U("transporter")] = ModelBase::toJson(m_Transporter);
    }
    if(m_DeliveryLocationIsSet)
    {
        val[U("deliveryLocation")] = ModelBase::toJson(m_DeliveryLocation);
    }
    if(m_PickupLocationIsSet)
    {
        val[U("pickupLocation")] = ModelBase::toJson(m_PickupLocation);
    }
    

    return val;
}

void DefaultLocations::fromJson(web::json::value& val)
{
    if(val.has_field(U("entity")))
    {
        if(!val[U("entity")].is_null())
        {
            std::shared_ptr<EntityLocation> newItem(new EntityLocation());
            newItem->fromJson(val[U("entity")]);
            setEntity( newItem );
        }
        
    }
    if(val.has_field(U("company")))
    {
        if(!val[U("company")].is_null())
        {
            std::shared_ptr<EntityLocation> newItem(new EntityLocation());
            newItem->fromJson(val[U("company")]);
            setCompany( newItem );
        }
        
    }
    if(val.has_field(U("transporter")))
    {
        if(!val[U("transporter")].is_null())
        {
            std::shared_ptr<EntityLocation> newItem(new EntityLocation());
            newItem->fromJson(val[U("transporter")]);
            setTransporter( newItem );
        }
        
    }
    if(val.has_field(U("deliveryLocation")))
    {
        if(!val[U("deliveryLocation")].is_null())
        {
            std::shared_ptr<EntityLocation> newItem(new EntityLocation());
            newItem->fromJson(val[U("deliveryLocation")]);
            setDeliveryLocation( newItem );
        }
        
    }
    if(val.has_field(U("pickupLocation")))
    {
        if(!val[U("pickupLocation")].is_null())
        {
            std::shared_ptr<EntityLocation> newItem(new EntityLocation());
            newItem->fromJson(val[U("pickupLocation")]);
            setPickupLocation( newItem );
        }
        
    }
    
}

void DefaultLocations::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_EntityIsSet)
    {
        if (m_Entity.get())
        {
            m_Entity->toMultipart(multipart, U("entity."));
        }
        
    }
    if(m_CompanyIsSet)
    {
        if (m_Company.get())
        {
            m_Company->toMultipart(multipart, U("company."));
        }
        
    }
    if(m_TransporterIsSet)
    {
        if (m_Transporter.get())
        {
            m_Transporter->toMultipart(multipart, U("transporter."));
        }
        
    }
    if(m_DeliveryLocationIsSet)
    {
        if (m_DeliveryLocation.get())
        {
            m_DeliveryLocation->toMultipart(multipart, U("deliveryLocation."));
        }
        
    }
    if(m_PickupLocationIsSet)
    {
        if (m_PickupLocation.get())
        {
            m_PickupLocation->toMultipart(multipart, U("pickupLocation."));
        }
        
    }
    
}

void DefaultLocations::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("entity")))
    {
        if(multipart->hasContent(U("entity")))
        {
            std::shared_ptr<EntityLocation> newItem(new EntityLocation());
            newItem->fromMultiPart(multipart, U("entity."));
            setEntity( newItem );
        }
        
    }
    if(multipart->hasContent(U("company")))
    {
        if(multipart->hasContent(U("company")))
        {
            std::shared_ptr<EntityLocation> newItem(new EntityLocation());
            newItem->fromMultiPart(multipart, U("company."));
            setCompany( newItem );
        }
        
    }
    if(multipart->hasContent(U("transporter")))
    {
        if(multipart->hasContent(U("transporter")))
        {
            std::shared_ptr<EntityLocation> newItem(new EntityLocation());
            newItem->fromMultiPart(multipart, U("transporter."));
            setTransporter( newItem );
        }
        
    }
    if(multipart->hasContent(U("deliveryLocation")))
    {
        if(multipart->hasContent(U("deliveryLocation")))
        {
            std::shared_ptr<EntityLocation> newItem(new EntityLocation());
            newItem->fromMultiPart(multipart, U("deliveryLocation."));
            setDeliveryLocation( newItem );
        }
        
    }
    if(multipart->hasContent(U("pickupLocation")))
    {
        if(multipart->hasContent(U("pickupLocation")))
        {
            std::shared_ptr<EntityLocation> newItem(new EntityLocation());
            newItem->fromMultiPart(multipart, U("pickupLocation."));
            setPickupLocation( newItem );
        }
        
    }
    
}


std::shared_ptr<EntityLocation> DefaultLocations::getEntity() const
{
    return m_Entity;
}
void DefaultLocations::setEntity(std::shared_ptr<EntityLocation> value)
{
    m_Entity = value;
    m_EntityIsSet = true;
}
bool DefaultLocations::entityIsSet() const
{
    return m_EntityIsSet;
}
void DefaultLocations::unsetEntity()
{
    m_EntityIsSet = false;
}
std::shared_ptr<EntityLocation> DefaultLocations::getCompany() const
{
    return m_Company;
}
void DefaultLocations::setCompany(std::shared_ptr<EntityLocation> value)
{
    m_Company = value;
    m_CompanyIsSet = true;
}
bool DefaultLocations::companyIsSet() const
{
    return m_CompanyIsSet;
}
void DefaultLocations::unsetCompany()
{
    m_CompanyIsSet = false;
}
std::shared_ptr<EntityLocation> DefaultLocations::getTransporter() const
{
    return m_Transporter;
}
void DefaultLocations::setTransporter(std::shared_ptr<EntityLocation> value)
{
    m_Transporter = value;
    m_TransporterIsSet = true;
}
bool DefaultLocations::transporterIsSet() const
{
    return m_TransporterIsSet;
}
void DefaultLocations::unsetTransporter()
{
    m_TransporterIsSet = false;
}
std::shared_ptr<EntityLocation> DefaultLocations::getDeliveryLocation() const
{
    return m_DeliveryLocation;
}
void DefaultLocations::setDeliveryLocation(std::shared_ptr<EntityLocation> value)
{
    m_DeliveryLocation = value;
    m_DeliveryLocationIsSet = true;
}
bool DefaultLocations::deliveryLocationIsSet() const
{
    return m_DeliveryLocationIsSet;
}
void DefaultLocations::unsetDeliveryLocation()
{
    m_DeliveryLocationIsSet = false;
}
std::shared_ptr<EntityLocation> DefaultLocations::getPickupLocation() const
{
    return m_PickupLocation;
}
void DefaultLocations::setPickupLocation(std::shared_ptr<EntityLocation> value)
{
    m_PickupLocation = value;
    m_PickupLocationIsSet = true;
}
bool DefaultLocations::pickupLocationIsSet() const
{
    return m_PickupLocationIsSet;
}
void DefaultLocations::unsetPickupLocation()
{
    m_PickupLocationIsSet = false;
}

}
}
}
}

