/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IcmsConfByState.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

IcmsConfByState::IcmsConfByState()
{
    m_Code = U("");
    m_Name = U("");
    m_NameIsSet = false;
    m_StartDate = utility::datetime();
    m_StartDateIsSet = false;
    m_ExpirationDate = utility::datetime();
    m_ExpirationDateIsSet = false;
    m_Inactive = false;
    m_InactiveIsSet = false;
    m_SubjectToST = false;
    m_SubjectToSTIsSet = false;
    m_IcmsCST = U("");
    m_IcmsCSTIsSet = false;
    m_CalcMode = U("");
    m_CalcModeIsSet = false;
    m_DiscountRateForMonoPhase = 0.0;
    m_DiscountRateForMonoPhaseIsSet = false;
    m_Rate = 0.0;
    m_RateIsSet = false;
    m_IcmsBaseDiscount = 0.0;
    m_IcmsBaseDiscountIsSet = false;
    m_Msrp = 0.0;
    m_MsrpIsSet = false;
    m_MvaRate = 0.0;
    m_MvaRateIsSet = false;
    m_MsrpUnit = U("");
    m_MsrpUnitIsSet = false;
    m_IcmsLegalReason = U("");
    m_IcmsLegalReasonIsSet = false;
    m_FcpRate = 0.0;
    m_FcpRateIsSet = false;
    m_IcmsSTConfIsSet = false;
    m_IcmsInterStateConfIsSet = false;
    
}

IcmsConfByState::~IcmsConfByState()
{
}

void IcmsConfByState::validate()
{
    // TODO: implement validation
}

web::json::value IcmsConfByState::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("code")] = ModelBase::toJson(m_Code);
    val[U("state")] = ModelBase::toJson(m_State);
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_StartDateIsSet)
    {
        val[U("startDate")] = ModelBase::toJson(m_StartDate);
    }
    if(m_ExpirationDateIsSet)
    {
        val[U("expirationDate")] = ModelBase::toJson(m_ExpirationDate);
    }
    if(m_InactiveIsSet)
    {
        val[U("inactive")] = ModelBase::toJson(m_Inactive);
    }
    if(m_SubjectToSTIsSet)
    {
        val[U("subjectToST")] = ModelBase::toJson(m_SubjectToST);
    }
    if(m_IcmsCSTIsSet)
    {
        val[U("icmsCST")] = ModelBase::toJson(m_IcmsCST);
    }
    if(m_CalcModeIsSet)
    {
        val[U("calcMode")] = ModelBase::toJson(m_CalcMode);
    }
    if(m_DiscountRateForMonoPhaseIsSet)
    {
        val[U("discountRateForMonoPhase")] = ModelBase::toJson(m_DiscountRateForMonoPhase);
    }
    if(m_RateIsSet)
    {
        val[U("rate")] = ModelBase::toJson(m_Rate);
    }
    if(m_IcmsBaseDiscountIsSet)
    {
        val[U("icmsBaseDiscount")] = ModelBase::toJson(m_IcmsBaseDiscount);
    }
    if(m_MsrpIsSet)
    {
        val[U("msrp")] = ModelBase::toJson(m_Msrp);
    }
    if(m_MvaRateIsSet)
    {
        val[U("mvaRate")] = ModelBase::toJson(m_MvaRate);
    }
    if(m_MsrpUnitIsSet)
    {
        val[U("msrpUnit")] = ModelBase::toJson(m_MsrpUnit);
    }
    if(m_IcmsLegalReasonIsSet)
    {
        val[U("icmsLegalReason")] = ModelBase::toJson(m_IcmsLegalReason);
    }
    if(m_FcpRateIsSet)
    {
        val[U("fcpRate")] = ModelBase::toJson(m_FcpRate);
    }
    if(m_IcmsSTConfIsSet)
    {
        val[U("icmsSTConf")] = ModelBase::toJson(m_IcmsSTConf);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_IcmsInterStateConf )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("icmsInterStateConf")] = web::json::value::array(jsonArray);
        }
    }
    

    return val;
}

void IcmsConfByState::fromJson(web::json::value& val)
{
    setCode(ModelBase::stringFromJson(val[U("code")]));
    std::shared_ptr<StateEnum> newState(new StateEnum());
    newState->fromJson(val[U("state")]);
    setState( newItem );
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
        
    }
    if(val.has_field(U("startDate")))
    {
        setStartDate(ModelBase::dateFromJson(val[U("startDate")]));
        
    }
    if(val.has_field(U("expirationDate")))
    {
        setExpirationDate(ModelBase::dateFromJson(val[U("expirationDate")]));
        
    }
    if(val.has_field(U("inactive")))
    {
        setInactive(ModelBase::boolFromJson(val[U("inactive")]));
    }
    if(val.has_field(U("subjectToST")))
    {
        setSubjectToST(ModelBase::boolFromJson(val[U("subjectToST")]));
    }
    if(val.has_field(U("icmsCST")))
    {
        setIcmsCST(ModelBase::stringFromJson(val[U("icmsCST")]));
        
    }
    if(val.has_field(U("calcMode")))
    {
        setCalcMode(ModelBase::stringFromJson(val[U("calcMode")]));
        
    }
    if(val.has_field(U("discountRateForMonoPhase")))
    {
        setDiscountRateForMonoPhase(ModelBase::doubleFromJson(val[U("discountRateForMonoPhase")]));
    }
    if(val.has_field(U("rate")))
    {
        setRate(ModelBase::doubleFromJson(val[U("rate")]));
    }
    if(val.has_field(U("icmsBaseDiscount")))
    {
        setIcmsBaseDiscount(ModelBase::doubleFromJson(val[U("icmsBaseDiscount")]));
    }
    if(val.has_field(U("msrp")))
    {
        setMsrp(ModelBase::doubleFromJson(val[U("msrp")]));
    }
    if(val.has_field(U("mvaRate")))
    {
        setMvaRate(ModelBase::doubleFromJson(val[U("mvaRate")]));
    }
    if(val.has_field(U("msrpUnit")))
    {
        setMsrpUnit(ModelBase::stringFromJson(val[U("msrpUnit")]));
        
    }
    if(val.has_field(U("icmsLegalReason")))
    {
        setIcmsLegalReason(ModelBase::stringFromJson(val[U("icmsLegalReason")]));
        
    }
    if(val.has_field(U("fcpRate")))
    {
        setFcpRate(ModelBase::doubleFromJson(val[U("fcpRate")]));
    }
    if(val.has_field(U("icmsSTConf")))
    {
        if(!val[U("icmsSTConf")].is_null())
        {
            std::shared_ptr<IcmsConfByState_icmsSTConf> newItem(new IcmsConfByState_icmsSTConf());
            newItem->fromJson(val[U("icmsSTConf")]);
            setIcmsSTConf( newItem );
        }
        
    }
    {
        m_IcmsInterStateConf.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("icmsInterStateConf")))
        {
        for( auto& item : val[U("icmsInterStateConf")].as_array() )
        {
            
            if(item.is_null())
            {
                m_IcmsInterStateConf.push_back( std::shared_ptr<IcmsConfInterState>(nullptr) );
            }
            else
            {
                std::shared_ptr<IcmsConfInterState> newItem(new IcmsConfInterState());
                newItem->fromJson(item);
                m_IcmsInterStateConf.push_back( newItem );
            }
            
        }
        }
    }
    
}

void IcmsConfByState::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("code"), m_Code));
    m_State->toMultipart(multipart, U("state."));
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_StartDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("startDate"), m_StartDate));
        
    }
    if(m_ExpirationDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("expirationDate"), m_ExpirationDate));
        
    }
    if(m_InactiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("inactive"), m_Inactive));
    }
    if(m_SubjectToSTIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("subjectToST"), m_SubjectToST));
    }
    if(m_IcmsCSTIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("icmsCST"), m_IcmsCST));
        
    }
    if(m_CalcModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("calcMode"), m_CalcMode));
        
    }
    if(m_DiscountRateForMonoPhaseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("discountRateForMonoPhase"), m_DiscountRateForMonoPhase));
    }
    if(m_RateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("rate"), m_Rate));
    }
    if(m_IcmsBaseDiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("icmsBaseDiscount"), m_IcmsBaseDiscount));
    }
    if(m_MsrpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("msrp"), m_Msrp));
    }
    if(m_MvaRateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("mvaRate"), m_MvaRate));
    }
    if(m_MsrpUnitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("msrpUnit"), m_MsrpUnit));
        
    }
    if(m_IcmsLegalReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("icmsLegalReason"), m_IcmsLegalReason));
        
    }
    if(m_FcpRateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("fcpRate"), m_FcpRate));
    }
    if(m_IcmsSTConfIsSet)
    {
        if (m_IcmsSTConf.get())
        {
            m_IcmsSTConf->toMultipart(multipart, U("icmsSTConf."));
        }
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_IcmsInterStateConf )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("icmsInterStateConf"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    
}

void IcmsConfByState::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setCode(ModelBase::stringFromHttpContent(multipart->getContent(U("code"))));
    std::shared_ptr<StateEnum> newState(new StateEnum());
    newState->fromMultiPart(multipart, U("state."));
    setState( newState );
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
        
    }
    if(multipart->hasContent(U("startDate")))
    {
        setStartDate(ModelBase::dateFromHttpContent(multipart->getContent(U("startDate"))));
        
    }
    if(multipart->hasContent(U("expirationDate")))
    {
        setExpirationDate(ModelBase::dateFromHttpContent(multipart->getContent(U("expirationDate"))));
        
    }
    if(multipart->hasContent(U("inactive")))
    {
        setInactive(ModelBase::boolFromHttpContent(multipart->getContent(U("inactive"))));
    }
    if(multipart->hasContent(U("subjectToST")))
    {
        setSubjectToST(ModelBase::boolFromHttpContent(multipart->getContent(U("subjectToST"))));
    }
    if(multipart->hasContent(U("icmsCST")))
    {
        setIcmsCST(ModelBase::stringFromHttpContent(multipart->getContent(U("icmsCST"))));
        
    }
    if(multipart->hasContent(U("calcMode")))
    {
        setCalcMode(ModelBase::stringFromHttpContent(multipart->getContent(U("calcMode"))));
        
    }
    if(multipart->hasContent(U("discountRateForMonoPhase")))
    {
        setDiscountRateForMonoPhase(ModelBase::doubleFromHttpContent(multipart->getContent(U("discountRateForMonoPhase"))));
    }
    if(multipart->hasContent(U("rate")))
    {
        setRate(ModelBase::doubleFromHttpContent(multipart->getContent(U("rate"))));
    }
    if(multipart->hasContent(U("icmsBaseDiscount")))
    {
        setIcmsBaseDiscount(ModelBase::doubleFromHttpContent(multipart->getContent(U("icmsBaseDiscount"))));
    }
    if(multipart->hasContent(U("msrp")))
    {
        setMsrp(ModelBase::doubleFromHttpContent(multipart->getContent(U("msrp"))));
    }
    if(multipart->hasContent(U("mvaRate")))
    {
        setMvaRate(ModelBase::doubleFromHttpContent(multipart->getContent(U("mvaRate"))));
    }
    if(multipart->hasContent(U("msrpUnit")))
    {
        setMsrpUnit(ModelBase::stringFromHttpContent(multipart->getContent(U("msrpUnit"))));
        
    }
    if(multipart->hasContent(U("icmsLegalReason")))
    {
        setIcmsLegalReason(ModelBase::stringFromHttpContent(multipart->getContent(U("icmsLegalReason"))));
        
    }
    if(multipart->hasContent(U("fcpRate")))
    {
        setFcpRate(ModelBase::doubleFromHttpContent(multipart->getContent(U("fcpRate"))));
    }
    if(multipart->hasContent(U("icmsSTConf")))
    {
        if(multipart->hasContent(U("icmsSTConf")))
        {
            std::shared_ptr<IcmsConfByState_icmsSTConf> newItem(new IcmsConfByState_icmsSTConf());
            newItem->fromMultiPart(multipart, U("icmsSTConf."));
            setIcmsSTConf( newItem );
        }
        
    }
    {
        m_IcmsInterStateConf.clear();
        if(multipart->hasContent(U("icmsInterStateConf")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("icmsInterStateConf"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_IcmsInterStateConf.push_back( std::shared_ptr<IcmsConfInterState>(nullptr) );
            }
            else
            {
                std::shared_ptr<IcmsConfInterState> newItem(new IcmsConfInterState());
                newItem->fromJson(item);
                m_IcmsInterStateConf.push_back( newItem );
            }
            
        }
        }
    }
    
}


utility::string_t IcmsConfByState::getCode() const
{
    return m_Code;
}
void IcmsConfByState::setCode(utility::string_t value)
{
    m_Code = value;
    
}
std::shared_ptr<StateEnum> IcmsConfByState::getState() const
{
    return m_State;
}
void IcmsConfByState::setState(std::shared_ptr<StateEnum> value)
{
    m_State = value;
    
}
utility::string_t IcmsConfByState::getName() const
{
    return m_Name;
}
void IcmsConfByState::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool IcmsConfByState::nameIsSet() const
{
    return m_NameIsSet;
}
void IcmsConfByState::unsetName()
{
    m_NameIsSet = false;
}
utility::datetime IcmsConfByState::getStartDate() const
{
    return m_StartDate;
}
void IcmsConfByState::setStartDate(utility::datetime value)
{
    m_StartDate = value;
    m_StartDateIsSet = true;
}
bool IcmsConfByState::startDateIsSet() const
{
    return m_StartDateIsSet;
}
void IcmsConfByState::unsetStartDate()
{
    m_StartDateIsSet = false;
}
utility::datetime IcmsConfByState::getExpirationDate() const
{
    return m_ExpirationDate;
}
void IcmsConfByState::setExpirationDate(utility::datetime value)
{
    m_ExpirationDate = value;
    m_ExpirationDateIsSet = true;
}
bool IcmsConfByState::expirationDateIsSet() const
{
    return m_ExpirationDateIsSet;
}
void IcmsConfByState::unsetExpirationDate()
{
    m_ExpirationDateIsSet = false;
}
bool IcmsConfByState::getInactive() const
{
    return m_Inactive;
}
void IcmsConfByState::setInactive(bool value)
{
    m_Inactive = value;
    m_InactiveIsSet = true;
}
bool IcmsConfByState::inactiveIsSet() const
{
    return m_InactiveIsSet;
}
void IcmsConfByState::unsetInactive()
{
    m_InactiveIsSet = false;
}
bool IcmsConfByState::getSubjectToST() const
{
    return m_SubjectToST;
}
void IcmsConfByState::setSubjectToST(bool value)
{
    m_SubjectToST = value;
    m_SubjectToSTIsSet = true;
}
bool IcmsConfByState::subjectToSTIsSet() const
{
    return m_SubjectToSTIsSet;
}
void IcmsConfByState::unsetSubjectToST()
{
    m_SubjectToSTIsSet = false;
}
utility::string_t IcmsConfByState::getIcmsCST() const
{
    return m_IcmsCST;
}
void IcmsConfByState::setIcmsCST(utility::string_t value)
{
    m_IcmsCST = value;
    m_IcmsCSTIsSet = true;
}
bool IcmsConfByState::icmsCSTIsSet() const
{
    return m_IcmsCSTIsSet;
}
void IcmsConfByState::unsetIcmsCST()
{
    m_IcmsCSTIsSet = false;
}
utility::string_t IcmsConfByState::getCalcMode() const
{
    return m_CalcMode;
}
void IcmsConfByState::setCalcMode(utility::string_t value)
{
    m_CalcMode = value;
    m_CalcModeIsSet = true;
}
bool IcmsConfByState::calcModeIsSet() const
{
    return m_CalcModeIsSet;
}
void IcmsConfByState::unsetCalcMode()
{
    m_CalcModeIsSet = false;
}
double IcmsConfByState::getDiscountRateForMonoPhase() const
{
    return m_DiscountRateForMonoPhase;
}
void IcmsConfByState::setDiscountRateForMonoPhase(double value)
{
    m_DiscountRateForMonoPhase = value;
    m_DiscountRateForMonoPhaseIsSet = true;
}
bool IcmsConfByState::discountRateForMonoPhaseIsSet() const
{
    return m_DiscountRateForMonoPhaseIsSet;
}
void IcmsConfByState::unsetDiscountRateForMonoPhase()
{
    m_DiscountRateForMonoPhaseIsSet = false;
}
double IcmsConfByState::getRate() const
{
    return m_Rate;
}
void IcmsConfByState::setRate(double value)
{
    m_Rate = value;
    m_RateIsSet = true;
}
bool IcmsConfByState::rateIsSet() const
{
    return m_RateIsSet;
}
void IcmsConfByState::unsetRate()
{
    m_RateIsSet = false;
}
double IcmsConfByState::getIcmsBaseDiscount() const
{
    return m_IcmsBaseDiscount;
}
void IcmsConfByState::setIcmsBaseDiscount(double value)
{
    m_IcmsBaseDiscount = value;
    m_IcmsBaseDiscountIsSet = true;
}
bool IcmsConfByState::icmsBaseDiscountIsSet() const
{
    return m_IcmsBaseDiscountIsSet;
}
void IcmsConfByState::unsetIcmsBaseDiscount()
{
    m_IcmsBaseDiscountIsSet = false;
}
double IcmsConfByState::getMsrp() const
{
    return m_Msrp;
}
void IcmsConfByState::setMsrp(double value)
{
    m_Msrp = value;
    m_MsrpIsSet = true;
}
bool IcmsConfByState::msrpIsSet() const
{
    return m_MsrpIsSet;
}
void IcmsConfByState::unsetMsrp()
{
    m_MsrpIsSet = false;
}
double IcmsConfByState::getMvaRate() const
{
    return m_MvaRate;
}
void IcmsConfByState::setMvaRate(double value)
{
    m_MvaRate = value;
    m_MvaRateIsSet = true;
}
bool IcmsConfByState::mvaRateIsSet() const
{
    return m_MvaRateIsSet;
}
void IcmsConfByState::unsetMvaRate()
{
    m_MvaRateIsSet = false;
}
utility::string_t IcmsConfByState::getMsrpUnit() const
{
    return m_MsrpUnit;
}
void IcmsConfByState::setMsrpUnit(utility::string_t value)
{
    m_MsrpUnit = value;
    m_MsrpUnitIsSet = true;
}
bool IcmsConfByState::msrpUnitIsSet() const
{
    return m_MsrpUnitIsSet;
}
void IcmsConfByState::unsetMsrpUnit()
{
    m_MsrpUnitIsSet = false;
}
utility::string_t IcmsConfByState::getIcmsLegalReason() const
{
    return m_IcmsLegalReason;
}
void IcmsConfByState::setIcmsLegalReason(utility::string_t value)
{
    m_IcmsLegalReason = value;
    m_IcmsLegalReasonIsSet = true;
}
bool IcmsConfByState::icmsLegalReasonIsSet() const
{
    return m_IcmsLegalReasonIsSet;
}
void IcmsConfByState::unsetIcmsLegalReason()
{
    m_IcmsLegalReasonIsSet = false;
}
double IcmsConfByState::getFcpRate() const
{
    return m_FcpRate;
}
void IcmsConfByState::setFcpRate(double value)
{
    m_FcpRate = value;
    m_FcpRateIsSet = true;
}
bool IcmsConfByState::fcpRateIsSet() const
{
    return m_FcpRateIsSet;
}
void IcmsConfByState::unsetFcpRate()
{
    m_FcpRateIsSet = false;
}
std::shared_ptr<IcmsConfByState_icmsSTConf> IcmsConfByState::getIcmsSTConf() const
{
    return m_IcmsSTConf;
}
void IcmsConfByState::setIcmsSTConf(std::shared_ptr<IcmsConfByState_icmsSTConf> value)
{
    m_IcmsSTConf = value;
    m_IcmsSTConfIsSet = true;
}
bool IcmsConfByState::icmsSTConfIsSet() const
{
    return m_IcmsSTConfIsSet;
}
void IcmsConfByState::unsetIcmsSTConf()
{
    m_IcmsSTConfIsSet = false;
}
std::vector<std::shared_ptr<IcmsConfInterState>>& IcmsConfByState::getIcmsInterStateConf()
{
    return m_IcmsInterStateConf;
}
bool IcmsConfByState::icmsInterStateConfIsSet() const
{
    return m_IcmsInterStateConfIsSet;
}
void IcmsConfByState::unsetIcmsInterStateConf()
{
    m_IcmsInterStateConfIsSet = false;
}

}
}
}
}

