/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * EntityForGoods.h
 *
 * 
 */

#ifndef EntityForGoods_H_
#define EntityForGoods_H_


#include "ModelBase.h"

#include "Entity.h"
#include "EntityType.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  EntityForGoods
    : public ModelBase
{
public:
    EntityForGoods();
    virtual ~EntityForGoods();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// EntityForGoods members

    /// <summary>
    /// Entity name, official name (Razão Social)
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// - &#39;transporter&#39; - &#39;sender&#39; # REMETENTE - &#39;dispatcher&#39; # EXPEDITOR - &#39;receiver&#39; # RECEIVER - &#39;addressee&#39; # DESTINATÁRIO - &#39;other&#39; # OUTRO 
    /// </summary>
    utility::string_t getRole() const;
    void setRole(utility::string_t value);
    bool roleIsSet() const;
    void unsetRole();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityType> getType() const;
    void setType(std::shared_ptr<EntityType> value);
        /// <summary>
    /// CNPJ/CPF of Sales Buyer, if CPF pattern is &#39;[0-9]{11}&#39; if CNPJ pattern is &#39;[0-9]{14}&#39;
    /// </summary>
    utility::string_t getFederalTaxId() const;
    void setFederalTaxId(utility::string_t value);
        /// <summary>
    /// City Tax ID
    /// </summary>
    utility::string_t getCityTaxId() const;
    void setCityTaxId(utility::string_t value);
    bool cityTaxIdIsSet() const;
    void unsetCityTaxId();
    /// <summary>
    /// State Tax ID
    /// </summary>
    utility::string_t getStateTaxId() const;
    void setStateTaxId(utility::string_t value);
    bool stateTaxIdIsSet() const;
    void unsetStateTaxId();
    /// <summary>
    /// Suframa ID
    /// </summary>
    utility::string_t getSuframa() const;
    void setSuframa(utility::string_t value);
    bool suframaIsSet() const;
    void unsetSuframa();
    /// <summary>
    /// Entity Phone
    /// </summary>
    utility::string_t getPhone() const;
    void setPhone(utility::string_t value);
    bool phoneIsSet() const;
    void unsetPhone();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTaxRegime() const;
    void setTaxRegime(utility::string_t value);
    bool taxRegimeIsSet() const;
    void unsetTaxRegime();
    /// <summary>
    /// Entity Email
    /// </summary>
    utility::string_t getEmail() const;
    void setEmail(utility::string_t value);
    bool emailIsSet() const;
    void unsetEmail();
    /// <summary>
    /// Companies subject to follow same rules of Government entities (Instrução Normativa: SRF1234)
    /// </summary>
    bool getSubjectToSRF1234() const;
    void setSubjectToSRF1234(bool value);
    bool subjectToSRF1234IsSet() const;
    void unsetSubjectToSRF1234();
    /// <summary>
    /// Inform if the entity is ICMS tax payer.
    /// </summary>
    bool getIcmsTaxPayer() const;
    void setIcmsTaxPayer(bool value);
    bool icmsTaxPayerIsSet() const;
    void unsetIcmsTaxPayer();

protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
utility::string_t m_Role;
    bool m_RoleIsSet;
std::shared_ptr<EntityType> m_Type;
    utility::string_t m_FederalTaxId;
    utility::string_t m_CityTaxId;
    bool m_CityTaxIdIsSet;
utility::string_t m_StateTaxId;
    bool m_StateTaxIdIsSet;
utility::string_t m_Suframa;
    bool m_SuframaIsSet;
utility::string_t m_Phone;
    bool m_PhoneIsSet;
utility::string_t m_TaxRegime;
    bool m_TaxRegimeIsSet;
utility::string_t m_Email;
    bool m_EmailIsSet;
bool m_SubjectToSRF1234;
    bool m_SubjectToSRF1234IsSet;
bool m_IcmsTaxPayer;
    bool m_IcmsTaxPayerIsSet;
};

}
}
}
}

#endif /* EntityForGoods_H_ */
