/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Inline_response_200.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Inline_response_200::Inline_response_200()
{
    m_Token = U("");
    m_TokenIsSet = false;
    m_Expired = utility::datetime();
    m_ExpiredIsSet = false;
    
}

Inline_response_200::~Inline_response_200()
{
}

void Inline_response_200::validate()
{
    // TODO: implement validation
}

web::json::value Inline_response_200::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TokenIsSet)
    {
        val[U("token")] = ModelBase::toJson(m_Token);
    }
    if(m_ExpiredIsSet)
    {
        val[U("expired")] = ModelBase::toJson(m_Expired);
    }
    

    return val;
}

void Inline_response_200::fromJson(web::json::value& val)
{
    if(val.has_field(U("token")))
    {
        setToken(ModelBase::stringFromJson(val[U("token")]));
        
    }
    if(val.has_field(U("expired")))
    {
        setExpired(ModelBase::dateFromJson(val[U("expired")]));
        
    }
    
}

void Inline_response_200::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_TokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("token"), m_Token));
        
    }
    if(m_ExpiredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("expired"), m_Expired));
        
    }
    
}

void Inline_response_200::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("token")))
    {
        setToken(ModelBase::stringFromHttpContent(multipart->getContent(U("token"))));
        
    }
    if(multipart->hasContent(U("expired")))
    {
        setExpired(ModelBase::dateFromHttpContent(multipart->getContent(U("expired"))));
        
    }
    
}


utility::string_t Inline_response_200::getToken() const
{
    return m_Token;
}
void Inline_response_200::setToken(utility::string_t value)
{
    m_Token = value;
    m_TokenIsSet = true;
}
bool Inline_response_200::tokenIsSet() const
{
    return m_TokenIsSet;
}
void Inline_response_200::unsetToken()
{
    m_TokenIsSet = false;
}
utility::datetime Inline_response_200::getExpired() const
{
    return m_Expired;
}
void Inline_response_200::setExpired(utility::datetime value)
{
    m_Expired = value;
    m_ExpiredIsSet = true;
}
bool Inline_response_200::expiredIsSet() const
{
    return m_ExpiredIsSet;
}
void Inline_response_200::unsetExpired()
{
    m_ExpiredIsSet = false;
}

}
}
}
}

