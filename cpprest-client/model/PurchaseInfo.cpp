/**
 * AvaTax Brazil
 * The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PurchaseInfo.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PurchaseInfo::PurchaseInfo()
{
    m_GovernmentOrder = U("");
    m_GovernmentOrderIsSet = false;
    m_OrderNumber = U("");
    m_OrderNumberIsSet = false;
    m_ContractNumber = U("");
    m_ContractNumberIsSet = false;
    
}

PurchaseInfo::~PurchaseInfo()
{
}

void PurchaseInfo::validate()
{
    // TODO: implement validation
}

web::json::value PurchaseInfo::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_GovernmentOrderIsSet)
    {
        val[U("governmentOrder")] = ModelBase::toJson(m_GovernmentOrder);
    }
    if(m_OrderNumberIsSet)
    {
        val[U("orderNumber")] = ModelBase::toJson(m_OrderNumber);
    }
    if(m_ContractNumberIsSet)
    {
        val[U("contractNumber")] = ModelBase::toJson(m_ContractNumber);
    }
    

    return val;
}

void PurchaseInfo::fromJson(web::json::value& val)
{
    if(val.has_field(U("governmentOrder")))
    {
        setGovernmentOrder(ModelBase::stringFromJson(val[U("governmentOrder")]));
        
    }
    if(val.has_field(U("orderNumber")))
    {
        setOrderNumber(ModelBase::stringFromJson(val[U("orderNumber")]));
        
    }
    if(val.has_field(U("contractNumber")))
    {
        setContractNumber(ModelBase::stringFromJson(val[U("contractNumber")]));
        
    }
    
}

void PurchaseInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_GovernmentOrderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("governmentOrder"), m_GovernmentOrder));
        
    }
    if(m_OrderNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("orderNumber"), m_OrderNumber));
        
    }
    if(m_ContractNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("contractNumber"), m_ContractNumber));
        
    }
    
}

void PurchaseInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("governmentOrder")))
    {
        setGovernmentOrder(ModelBase::stringFromHttpContent(multipart->getContent(U("governmentOrder"))));
        
    }
    if(multipart->hasContent(U("orderNumber")))
    {
        setOrderNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("orderNumber"))));
        
    }
    if(multipart->hasContent(U("contractNumber")))
    {
        setContractNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("contractNumber"))));
        
    }
    
}


utility::string_t PurchaseInfo::getGovernmentOrder() const
{
    return m_GovernmentOrder;
}
void PurchaseInfo::setGovernmentOrder(utility::string_t value)
{
    m_GovernmentOrder = value;
    m_GovernmentOrderIsSet = true;
}
bool PurchaseInfo::governmentOrderIsSet() const
{
    return m_GovernmentOrderIsSet;
}
void PurchaseInfo::unsetGovernmentOrder()
{
    m_GovernmentOrderIsSet = false;
}
utility::string_t PurchaseInfo::getOrderNumber() const
{
    return m_OrderNumber;
}
void PurchaseInfo::setOrderNumber(utility::string_t value)
{
    m_OrderNumber = value;
    m_OrderNumberIsSet = true;
}
bool PurchaseInfo::orderNumberIsSet() const
{
    return m_OrderNumberIsSet;
}
void PurchaseInfo::unsetOrderNumber()
{
    m_OrderNumberIsSet = false;
}
utility::string_t PurchaseInfo::getContractNumber() const
{
    return m_ContractNumber;
}
void PurchaseInfo::setContractNumber(utility::string_t value)
{
    m_ContractNumber = value;
    m_ContractNumberIsSet = true;
}
bool PurchaseInfo::contractNumberIsSet() const
{
    return m_ContractNumberIsSet;
}
void PurchaseInfo::unsetContractNumber()
{
    m_ContractNumberIsSet = false;
}

}
}
}
}

