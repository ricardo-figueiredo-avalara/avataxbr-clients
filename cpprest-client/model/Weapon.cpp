/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Weapon.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Weapon::Weapon()
{
    m_WeaponRestrictionType = U("");
    m_SerieNumber = U("");
    m_GunBarrelSerieNumber = U("");
    m_WeaponDescription = U("");
    
}

Weapon::~Weapon()
{
}

void Weapon::validate()
{
    // TODO: implement validation
}

web::json::value Weapon::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("weaponRestrictionType")] = ModelBase::toJson(m_WeaponRestrictionType);
    val[U("serieNumber")] = ModelBase::toJson(m_SerieNumber);
    val[U("gunBarrelSerieNumber")] = ModelBase::toJson(m_GunBarrelSerieNumber);
    val[U("weaponDescription")] = ModelBase::toJson(m_WeaponDescription);
    

    return val;
}

void Weapon::fromJson(web::json::value& val)
{
    setWeaponRestrictionType(ModelBase::stringFromJson(val[U("weaponRestrictionType")]));
    setSerieNumber(ModelBase::stringFromJson(val[U("serieNumber")]));
    setGunBarrelSerieNumber(ModelBase::stringFromJson(val[U("gunBarrelSerieNumber")]));
    setWeaponDescription(ModelBase::stringFromJson(val[U("weaponDescription")]));
    
}

void Weapon::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("weaponRestrictionType"), m_WeaponRestrictionType));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("serieNumber"), m_SerieNumber));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("gunBarrelSerieNumber"), m_GunBarrelSerieNumber));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("weaponDescription"), m_WeaponDescription));
    
}

void Weapon::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setWeaponRestrictionType(ModelBase::stringFromHttpContent(multipart->getContent(U("weaponRestrictionType"))));
    setSerieNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("serieNumber"))));
    setGunBarrelSerieNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("gunBarrelSerieNumber"))));
    setWeaponDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("weaponDescription"))));
    
}


utility::string_t Weapon::getWeaponRestrictionType() const
{
    return m_WeaponRestrictionType;
}
void Weapon::setWeaponRestrictionType(utility::string_t value)
{
    m_WeaponRestrictionType = value;
    
}
utility::string_t Weapon::getSerieNumber() const
{
    return m_SerieNumber;
}
void Weapon::setSerieNumber(utility::string_t value)
{
    m_SerieNumber = value;
    
}
utility::string_t Weapon::getGunBarrelSerieNumber() const
{
    return m_GunBarrelSerieNumber;
}
void Weapon::setGunBarrelSerieNumber(utility::string_t value)
{
    m_GunBarrelSerieNumber = value;
    
}
utility::string_t Weapon::getWeaponDescription() const
{
    return m_WeaponDescription;
}
void Weapon::setWeaponDescription(utility::string_t value)
{
    m_WeaponDescription = value;
    
}

}
}
}
}

