/**
 * BR16 - API
 * This documentation is about service accessories that will compose the product BR16, this services are essencial to maintenance and configuration of accounts
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * InformerForGoods.h
 *
 * Internal Type used to references all taxes.
 */

#ifndef InformerForGoods_H_
#define InformerForGoods_H_


#include "ModelBase.h"

#include "Number.h"
#include "InformerForGoods_csts.h"
#include "HeaderForGoods.h"
#include "LineForGoods.h"
#include "EntityInformerForGoods.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Internal Type used to references all taxes.
/// </summary>
class  InformerForGoods
    : public ModelBase
{
public:
    InformerForGoods();
    virtual ~InformerForGoods();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// InformerForGoods members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<HeaderForGoods> getHeader() const;
    void setHeader(std::shared_ptr<HeaderForGoods> value);
    bool headerIsSet() const;
    void unsetHeader();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LineForGoods> getLine() const;
    void setLine(std::shared_ptr<LineForGoods> value);
    bool lineIsSet() const;
    void unsetLine();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityInformerForGoods> getCompany() const;
    void setCompany(std::shared_ptr<EntityInformerForGoods> value);
    bool _companyIsSet() const;
    void unset_company();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityInformerForGoods> getEntity() const;
    void setEntity(std::shared_ptr<EntityInformerForGoods> value);
    bool _entityIsSet() const;
    void unset_entity();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityInformerForGoods> getEmitter() const;
    void setEmitter(std::shared_ptr<EntityInformerForGoods> value);
    bool emitterIsSet() const;
    void unsetEmitter();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityInformerForGoods> getReceiver() const;
    void setReceiver(std::shared_ptr<EntityInformerForGoods> value);
    bool receiverIsSet() const;
    void unsetReceiver();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EntityInformerForGoods> getTransporter() const;
    void setTransporter(std::shared_ptr<EntityInformerForGoods> value);
    bool transporterIsSet() const;
    void unsetTransporter();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<InformerForGoods_csts> getCsts() const;
    void setCsts(std::shared_ptr<InformerForGoods_csts> value);
    bool cstsIsSet() const;
    void unsetCsts();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Number> getAmount() const;
    void setAmount(std::shared_ptr<Number> value);
    bool amountIsSet() const;
    void unsetAmount();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Number> getDiscount() const;
    void setDiscount(std::shared_ptr<Number> value);
    bool discountIsSet() const;
    void unsetDiscount();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Number> getQuantity() const;
    void setQuantity(std::shared_ptr<Number> value);
    bool quantityIsSet() const;
    void unsetQuantity();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Number> getUnitPrice() const;
    void setUnitPrice(std::shared_ptr<Number> value);
    bool unitPriceIsSet() const;
    void unsetUnitPrice();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Number> getFreightAmount() const;
    void setFreightAmount(std::shared_ptr<Number> value);
    bool freightAmountIsSet() const;
    void unsetFreightAmount();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Number> getInsuranceAmount() const;
    void setInsuranceAmount(std::shared_ptr<Number> value);
    bool insuranceAmountIsSet() const;
    void unsetInsuranceAmount();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Number> getOtherCostAmount() const;
    void setOtherCostAmount(std::shared_ptr<Number> value);
    bool otherCostAmountIsSet() const;
    void unsetOtherCostAmount();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Number> getExemptValue() const;
    void setExemptValue(std::shared_ptr<Number> value);
    bool exemptValueIsSet() const;
    void unsetExemptValue();

protected:
    std::shared_ptr<HeaderForGoods> m_Header;
    bool m_HeaderIsSet;
std::shared_ptr<LineForGoods> m_Line;
    bool m_LineIsSet;
std::shared_ptr<EntityInformerForGoods> m__company;
    bool m__companyIsSet;
std::shared_ptr<EntityInformerForGoods> m__entity;
    bool m__entityIsSet;
std::shared_ptr<EntityInformerForGoods> m_Emitter;
    bool m_EmitterIsSet;
std::shared_ptr<EntityInformerForGoods> m_Receiver;
    bool m_ReceiverIsSet;
std::shared_ptr<EntityInformerForGoods> m_Transporter;
    bool m_TransporterIsSet;
std::shared_ptr<InformerForGoods_csts> m_Csts;
    bool m_CstsIsSet;
std::shared_ptr<Number> m_Amount;
    bool m_AmountIsSet;
std::shared_ptr<Number> m_Discount;
    bool m_DiscountIsSet;
std::shared_ptr<Number> m_Quantity;
    bool m_QuantityIsSet;
std::shared_ptr<Number> m_UnitPrice;
    bool m_UnitPriceIsSet;
std::shared_ptr<Number> m_FreightAmount;
    bool m_FreightAmountIsSet;
std::shared_ptr<Number> m_InsuranceAmount;
    bool m_InsuranceAmountIsSet;
std::shared_ptr<Number> m_OtherCostAmount;
    bool m_OtherCostAmountIsSet;
std::shared_ptr<Number> m_ExemptValue;
    bool m_ExemptValueIsSet;
};

}
}
}
}

#endif /* InformerForGoods_H_ */
