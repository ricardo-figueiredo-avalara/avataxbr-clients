// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [AccountCompany]
            Decoders.addDecoder(clazz: [AccountCompany].self) { (source: AnyObject) -> [AccountCompany] in
                return Decoders.decode(clazz: [AccountCompany].self, source: source)
            }
            // Decoder for AccountCompany
            Decoders.addDecoder(clazz: AccountCompany.self) { (source: AnyObject) -> AccountCompany in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AccountCompany()
                instance.companyId = Decoders.decodeOptional(clazz: NSUUID.self, source: sourceDictionary["companyId"])
                instance.companyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyCode"])
                instance.companyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyName"])
                return instance
            }


            // Decoder for [AdditionalInformation]
            Decoders.addDecoder(clazz: [AdditionalInformation].self) { (source: AnyObject) -> [AdditionalInformation] in
                return Decoders.decode(clazz: [AdditionalInformation].self, source: source)
            }
            // Decoder for AdditionalInformation
            Decoders.addDecoder(clazz: AdditionalInformation.self) { (source: AnyObject) -> AdditionalInformation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AdditionalInformation()
                instance.fiscalInfo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fiscalInfo"])
                instance.complementaryInfo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["complementaryInfo"])
                instance.procRef = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["procRef"])
                return instance
            }


            // Decoder for [AdditionalInformationProcRef]
            Decoders.addDecoder(clazz: [AdditionalInformationProcRef].self) { (source: AnyObject) -> [AdditionalInformationProcRef] in
                return Decoders.decode(clazz: [AdditionalInformationProcRef].self, source: source)
            }
            // Decoder for AdditionalInformationProcRef
            Decoders.addDecoder(clazz: AdditionalInformationProcRef.self) { (source: AnyObject) -> AdditionalInformationProcRef in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AdditionalInformationProcRef()
                instance.nProc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nProc"])
                instance.indProc = AdditionalInformationProcRef.IndProc(rawValue: (sourceDictionary["indProc"] as? String) ?? "") 
                return instance
            }


            // Decoder for [Address]
            Decoders.addDecoder(clazz: [Address].self) { (source: AnyObject) -> [Address] in
                return Decoders.decode(clazz: [Address].self, source: source)
            }
            // Decoder for Address
            Decoders.addDecoder(clazz: Address.self) { (source: AnyObject) -> Address in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Address()
                instance.street = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street"])
                instance.neighborhood = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["neighborhood"])
                instance.zipcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zipcode"])
                instance.cityCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityCode"])
                instance.cityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityName"])
                instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryCode"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                return instance
            }


            // Decoder for [Agast]
            Decoders.addDecoder(clazz: [Agast].self) { (source: AnyObject) -> [Agast] in
                return Decoders.decode(clazz: [Agast].self, source: source)
            }
            // Decoder for Agast
            Decoders.addDecoder(clazz: Agast.self) { (source: AnyObject) -> Agast in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Agast()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.hsCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hsCode"])
                instance.ex = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ex"])
                instance.cest = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cest"])
                instance.cean = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cean"])
                instance.codeType = Decoders.decodeOptional(clazz: AgastCodeType.self, source: sourceDictionary["codeType"])
                instance.cstIPI = Agast.CstIPI(rawValue: (sourceDictionary["cstIPI"] as? String) ?? "") 
                instance.ipiLegalTaxClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipiLegalTaxClass"])
                instance.pisCofinsTaxReporting = Agast.PisCofinsTaxReporting(rawValue: (sourceDictionary["pisCofinsTaxReporting"] as? String) ?? "") 
                instance.accruablePISTaxation = Agast.AccruablePISTaxation(rawValue: (sourceDictionary["accruablePISTaxation"] as? String) ?? "") 
                instance.pisExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReasonCode"])
                instance.pisExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReason"])
                instance.accruableCOFINSTaxation = Agast.AccruableCOFINSTaxation(rawValue: (sourceDictionary["accruableCOFINSTaxation"] as? String) ?? "") 
                instance.cofinsExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReasonCode"])
                instance.cofinsExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReason"])
                instance.accruableCSLLTaxation = Agast.AccruableCSLLTaxation(rawValue: (sourceDictionary["accruableCSLLTaxation"] as? String) ?? "") 
                instance.csllExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["csllExemptLegalReason"])
                instance.csllExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["csllExemptLegalReasonCode"])
                instance.withholding = Decoders.decodeOptional(clazz: AgastWithholding.self, source: sourceDictionary["withholding"])
                instance.issDueatDestination = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["issDueatDestination"])
                instance.pisCofinsCreditNotAllowed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["pisCofinsCreditNotAllowed"])
                instance.issTaxation = Agast.IssTaxation(rawValue: (sourceDictionary["issTaxation"] as? String) ?? "") 
                instance.federalTaxRate = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["federalTaxRate"])
                instance.specialProductClass = Agast.SpecialProductClass(rawValue: (sourceDictionary["specialProductClass"] as? String) ?? "") 
                instance.icmsConf = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["icmsConf"])
                return instance
            }


            // Decoder for [AgastCodeType]
            Decoders.addDecoder(clazz: [AgastCodeType].self) { (source: AnyObject) -> [AgastCodeType] in
                return Decoders.decode(clazz: [AgastCodeType].self, source: source)
            }
            // Decoder for AgastCodeType
            Decoders.addDecoder(clazz: AgastCodeType.self) { (source: AnyObject) -> AgastCodeType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AgastCodeType()
                instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"])
                instance.name = AgastCodeType.Name(rawValue: (sourceDictionary["name"] as? String) ?? "") 
                return instance
            }


            // Decoder for [AgastExtendForSefaz]
            Decoders.addDecoder(clazz: [AgastExtendForSefaz].self) { (source: AnyObject) -> [AgastExtendForSefaz] in
                return Decoders.decode(clazz: [AgastExtendForSefaz].self, source: source)
            }
            // Decoder for AgastExtendForSefaz
            Decoders.addDecoder(clazz: AgastExtendForSefaz.self) { (source: AnyObject) -> AgastExtendForSefaz in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AgastExtendForSefaz()
                instance.hsCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hsCode"])
                instance.ex = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ex"])
                instance.cest = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cest"])
                instance.cean = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cean"])
                instance.nve = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nve"])
                instance.unit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unit"])
                instance.unitTaxable = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitTaxable"])
                instance.nFCI = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nFCI"])
                return instance
            }


            // Decoder for [AgastIcmsConf]
            Decoders.addDecoder(clazz: [AgastIcmsConf].self) { (source: AnyObject) -> [AgastIcmsConf] in
                return Decoders.decode(clazz: [AgastIcmsConf].self, source: source)
            }
            // Decoder for AgastIcmsConf
            Decoders.addDecoder(clazz: AgastIcmsConf.self) { (source: AnyObject) -> AgastIcmsConf in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AgastIcmsConf()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"])
                return instance
            }


            // Decoder for [AgastWithholding]
            Decoders.addDecoder(clazz: [AgastWithholding].self) { (source: AnyObject) -> [AgastWithholding] in
                return Decoders.decode(clazz: [AgastWithholding].self, source: source)
            }
            // Decoder for AgastWithholding
            Decoders.addDecoder(clazz: AgastWithholding.self) { (source: AnyObject) -> AgastWithholding in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AgastWithholding()
                instance.IRRF = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["IRRF"])
                instance.iRRFLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["IRRFLegalReason"])
                instance.iNSSSubjectToDischarge = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["INSSSubjectToDischarge"])
                instance.INSS = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["INSS"])
                instance.iNSSLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["INSSLegalReason"])
                instance.iNSsForSimples = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["INSsForSimples"])
                instance.iNSSForSimplesLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["INSSForSimplesLegalReason"])
                instance.PIS = Decoders.decodeOptional(clazz: AgastWithholdingPIS.self, source: sourceDictionary["PIS"])
                instance.COFINS = Decoders.decodeOptional(clazz: AgastWithholdingCOFINS.self, source: sourceDictionary["COFINS"])
                instance.CSLL = Decoders.decodeOptional(clazz: AgastWithholdingCSLL.self, source: sourceDictionary["CSLL"])
                return instance
            }


            // Decoder for [AgastWithholdingCOFINS]
            Decoders.addDecoder(clazz: [AgastWithholdingCOFINS].self) { (source: AnyObject) -> [AgastWithholdingCOFINS] in
                return Decoders.decode(clazz: [AgastWithholdingCOFINS].self, source: source)
            }
            // Decoder for AgastWithholdingCOFINS
            Decoders.addDecoder(clazz: AgastWithholdingCOFINS.self) { (source: AnyObject) -> AgastWithholdingCOFINS in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AgastWithholdingCOFINS()
                instance.legalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["legalReason"])
                instance.business = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["business"])
                instance.businessLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["businessLegalReason"])
                instance.federalGovernment = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["federalGovernment"])
                instance.federalGovernmentLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["federalGovernmentLegalReason"])
                instance.stateGovernment = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stateGovernment"])
                instance.stateGovernmentLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateGovernmentLegalReason"])
                instance.cityGovernment = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["cityGovernment"])
                instance.cityGovernmentLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityGovernmentLegalReason"])
                return instance
            }


            // Decoder for [AgastWithholdingCSLL]
            Decoders.addDecoder(clazz: [AgastWithholdingCSLL].self) { (source: AnyObject) -> [AgastWithholdingCSLL] in
                return Decoders.decode(clazz: [AgastWithholdingCSLL].self, source: source)
            }
            // Decoder for AgastWithholdingCSLL
            Decoders.addDecoder(clazz: AgastWithholdingCSLL.self) { (source: AnyObject) -> AgastWithholdingCSLL in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AgastWithholdingCSLL()
                instance.legalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["legalReason"])
                instance.business = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["business"])
                instance.businessLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["businessLegalReason"])
                instance.federalGovernment = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["federalGovernment"])
                instance.federalGovernmentLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["federalGovernmentLegalReason"])
                instance.stateGovernment = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stateGovernment"])
                instance.stateGovernmentLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateGovernmentLegalReason"])
                instance.cityGovernment = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["cityGovernment"])
                instance.cityGovernmentLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityGovernmentLegalReason"])
                return instance
            }


            // Decoder for [AgastWithholdingPIS]
            Decoders.addDecoder(clazz: [AgastWithholdingPIS].self) { (source: AnyObject) -> [AgastWithholdingPIS] in
                return Decoders.decode(clazz: [AgastWithholdingPIS].self, source: source)
            }
            // Decoder for AgastWithholdingPIS
            Decoders.addDecoder(clazz: AgastWithholdingPIS.self) { (source: AnyObject) -> AgastWithholdingPIS in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AgastWithholdingPIS()
                instance.legalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["legalReason"])
                instance.business = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["business"])
                instance.businessLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["businessLegalReason"])
                instance.federalGovernment = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["federalGovernment"])
                instance.federalGovernmentLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["federalGovernmentLegalReason"])
                instance.stateGovernment = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stateGovernment"])
                instance.stateGovernmentLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateGovernmentLegalReason"])
                instance.cityGovernment = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["cityGovernment"])
                instance.cityGovernmentLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityGovernmentLegalReason"])
                return instance
            }


            // Decoder for [Body]
            Decoders.addDecoder(clazz: [Body].self) { (source: AnyObject) -> [Body] in
                return Decoders.decode(clazz: [Body].self, source: source)
            }
            // Decoder for Body
            Decoders.addDecoder(clazz: Body.self) { (source: AnyObject) -> Body in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Body()
                instance.companyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyCode"])
                return instance
            }


            // Decoder for [Body1]
            Decoders.addDecoder(clazz: [Body1].self) { (source: AnyObject) -> [Body1] in
                return Decoders.decode(clazz: [Body1].self, source: source)
            }
            // Decoder for Body1
            Decoders.addDecoder(clazz: Body1.self) { (source: AnyObject) -> Body1 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Body1()
                instance.newCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["newCode"])
                return instance
            }


            // Decoder for [Body2]
            Decoders.addDecoder(clazz: [Body2].self) { (source: AnyObject) -> [Body2] in
                return Decoders.decode(clazz: [Body2].self, source: source)
            }
            // Decoder for Body2
            Decoders.addDecoder(clazz: Body2.self) { (source: AnyObject) -> Body2 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Body2()
                instance.content = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content"])
                return instance
            }


            // Decoder for [Body3]
            Decoders.addDecoder(clazz: [Body3].self) { (source: AnyObject) -> [Body3] in
                return Decoders.decode(clazz: [Body3].self, source: source)
            }
            // Decoder for Body3
            Decoders.addDecoder(clazz: Body3.self) { (source: AnyObject) -> Body3 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Body3()
                instance.content = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content"])
                return instance
            }


            // Decoder for [Body4]
            Decoders.addDecoder(clazz: [Body4].self) { (source: AnyObject) -> [Body4] in
                return Decoders.decode(clazz: [Body4].self, source: source)
            }
            // Decoder for Body4
            Decoders.addDecoder(clazz: Body4.self) { (source: AnyObject) -> Body4 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Body4()
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startDate"])
                instance.finishDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["finishDate"])
                return instance
            }


            // Decoder for [CSTPistCofinsEnum]
            Decoders.addDecoder(clazz: [CSTPistCofinsEnum].self) { (source: AnyObject) -> [CSTPistCofinsEnum] in
                return Decoders.decode(clazz: [CSTPistCofinsEnum].self, source: source)
            }
            // Decoder for CSTPistCofinsEnum
            Decoders.addDecoder(clazz: CSTPistCofinsEnum.self) { (source: AnyObject) -> CSTPistCofinsEnum in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CSTPistCofinsEnum()
                return instance
            }


            // Decoder for [CSTTableAEnum]
            Decoders.addDecoder(clazz: [CSTTableAEnum].self) { (source: AnyObject) -> [CSTTableAEnum] in
                return Decoders.decode(clazz: [CSTTableAEnum].self, source: source)
            }
            // Decoder for CSTTableAEnum
            Decoders.addDecoder(clazz: CSTTableAEnum.self) { (source: AnyObject) -> CSTTableAEnum in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CSTTableAEnum()
                return instance
            }


            // Decoder for [CSTTableBEnum]
            Decoders.addDecoder(clazz: [CSTTableBEnum].self) { (source: AnyObject) -> [CSTTableBEnum] in
                return Decoders.decode(clazz: [CSTTableBEnum].self, source: source)
            }
            // Decoder for CSTTableBEnum
            Decoders.addDecoder(clazz: CSTTableBEnum.self) { (source: AnyObject) -> CSTTableBEnum in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CSTTableBEnum()
                return instance
            }


            // Decoder for [CalcModelEnum]
            Decoders.addDecoder(clazz: [CalcModelEnum].self) { (source: AnyObject) -> [CalcModelEnum] in
                return Decoders.decode(clazz: [CalcModelEnum].self, source: source)
            }
            // Decoder for CalcModelEnum
            Decoders.addDecoder(clazz: CalcModelEnum.self) { (source: AnyObject) -> CalcModelEnum in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CalcModelEnum()
                return instance
            }


            // Decoder for [CalculatedTaxSummaryForGoods]
            Decoders.addDecoder(clazz: [CalculatedTaxSummaryForGoods].self) { (source: AnyObject) -> [CalculatedTaxSummaryForGoods] in
                return Decoders.decode(clazz: [CalculatedTaxSummaryForGoods].self, source: source)
            }
            // Decoder for CalculatedTaxSummaryForGoods
            Decoders.addDecoder(clazz: CalculatedTaxSummaryForGoods.self) { (source: AnyObject) -> CalculatedTaxSummaryForGoods in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CalculatedTaxSummaryForGoods()
                instance.numberOfLines = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfLines"])
                instance.taxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["taxedDiscount"])
                instance.untaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["untaxedDiscount"])
                instance.subtotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotal"])
                instance.totalTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["totalTax"])
                instance.grandTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grandTotal"])
                instance.taxByType = Decoders.decodeOptional(clazz: CalculatedTaxSummaryForGoodsTaxByType.self, source: sourceDictionary["taxByType"])
                return instance
            }


            // Decoder for [CalculatedTaxSummaryForGoodsTaxByType]
            Decoders.addDecoder(clazz: [CalculatedTaxSummaryForGoodsTaxByType].self) { (source: AnyObject) -> [CalculatedTaxSummaryForGoodsTaxByType] in
                return Decoders.decode(clazz: [CalculatedTaxSummaryForGoodsTaxByType].self, source: source)
            }
            // Decoder for CalculatedTaxSummaryForGoodsTaxByType
            Decoders.addDecoder(clazz: CalculatedTaxSummaryForGoodsTaxByType.self) { (source: AnyObject) -> CalculatedTaxSummaryForGoodsTaxByType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CalculatedTaxSummaryForGoodsTaxByType()
                instance.icms = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icms"])
                instance.icmsSt = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsSt"])
                instance.icmsStSd = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsStSd"])
                instance.icmsPartOwn = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsPartOwn"])
                instance.icmsPartDest = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsPartDest"])
                instance.icmsDifaFCP = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsDifaFCP"])
                instance.icmsDifaDest = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsDifaDest"])
                instance.icmsDifaRemet = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsDifaRemet"])
                instance.icmsRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsRf"])
                instance.icmsDeson = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsDeson"])
                instance.icmsCredsn = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["icmsCredsn"])
                instance.pis = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["pis"])
                instance.pisSt = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["pisSt"])
                instance.cofins = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["cofins"])
                instance.cofinsSt = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["cofinsSt"])
                instance.ipi = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["ipi"])
                instance.ipiReturned = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["ipiReturned"])
                instance.ii = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["ii"])
                instance.iof = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["iof"])
                instance.aproxtribState = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["aproxtribState"])
                instance.aproxtribFed = Decoders.decodeOptional(clazz: TaxByTypeSummaryForGoods.self, source: sourceDictionary["aproxtribFed"])
                return instance
            }


            // Decoder for [CfopConf]
            Decoders.addDecoder(clazz: [CfopConf].self) { (source: AnyObject) -> [CfopConf] in
                return Decoders.decode(clazz: [CfopConf].self, source: source)
            }
            // Decoder for CfopConf
            Decoders.addDecoder(clazz: CfopConf.self) { (source: AnyObject) -> CfopConf in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CfopConf()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.stockImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stockImpact"])
                instance.financialImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["financialImpact"])
                instance.cstIPI = CfopConf.CstIPI(rawValue: (sourceDictionary["cstIPI"] as? String) ?? "") 
                instance.ipiLegalTaxClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipiLegalTaxClass"])
                instance.accruablePISTaxation = CfopConf.AccruablePISTaxation(rawValue: (sourceDictionary["accruablePISTaxation"] as? String) ?? "") 
                instance.pisExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReasonCode"])
                instance.pisExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReason"])
                instance.accruableCOFINSTaxation = CfopConf.AccruableCOFINSTaxation(rawValue: (sourceDictionary["accruableCOFINSTaxation"] as? String) ?? "") 
                instance.cofinsExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReasonCode"])
                instance.cofinsExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReason"])
                instance.allowIPIcreditWhenInGoing = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowIPIcreditWhenInGoing"])
                instance.icmsConf = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["icmsConf"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.wayType = CfopConf.WayType(rawValue: (sourceDictionary["wayType"] as? String) ?? "") 
                instance.codInState = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["codInState"])
                instance.codOtherState = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["codOtherState"])
                instance.codOtherCountry = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["codOtherCountry"])
                instance.cstICMSSameState = Decoders.decodeOptional(clazz: CstIcmsEnum.self, source: sourceDictionary["cstICMSSameState"])
                instance.cstICMSOtherState = Decoders.decodeOptional(clazz: CstIcmsEnum.self, source: sourceDictionary["cstICMSOtherState"])
                instance.cstICMSOtherCountry = Decoders.decodeOptional(clazz: CstIcmsEnum.self, source: sourceDictionary["cstICMSOtherCountry"])
                instance.productType = CfopConf.ProductType(rawValue: (sourceDictionary["productType"] as? String) ?? "") 
                instance.operationToTaxPayerOtherState = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["operationToTaxPayerOtherState"])
                instance.operationWithST = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["operationWithST"])
                instance.operationToFreeZone = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["operationToFreeZone"])
                instance.specificForProductClass = CfopConf.SpecificForProductClass(rawValue: (sourceDictionary["specificForProductClass"] as? String) ?? "") 
                return instance
            }


            // Decoder for [Company]
            Decoders.addDecoder(clazz: [Company].self) { (source: AnyObject) -> [Company] in
                return Decoders.decode(clazz: [Company].self, source: source)
            }
            // Decoder for Company
            Decoders.addDecoder(clazz: Company.self) { (source: AnyObject) -> Company in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Company()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.officialName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["officialName"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.entityType = Decoders.decodeOptional(clazz: EntityType.self, source: sourceDictionary["entityType"])
                instance.subjectToSRF1234 = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["subjectToSRF1234"])
                instance.federalTaxRegime = Decoders.decodeOptional(clazz: FederalTaxRegime.self, source: sourceDictionary["federalTaxRegime"])
                instance.pisSubjectTo = Company.PisSubjectTo(rawValue: (sourceDictionary["pisSubjectTo"] as? String) ?? "") 
                instance.cofinsSubjectTo = Company.CofinsSubjectTo(rawValue: (sourceDictionary["cofinsSubjectTo"] as? String) ?? "") 
                instance.csllSubjectTo = Company.CsllSubjectTo(rawValue: (sourceDictionary["csllSubjectTo"] as? String) ?? "") 
                instance.receiptsAreFullNoCumulativePisCofins = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["receiptsAreFullNoCumulativePisCofins"])
                instance.inssWithholdSubjectTo = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["inssWithholdSubjectTo"])
                instance.issWithholdSubjectTo = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["issWithholdSubjectTo"])
                instance.irrfWithholdSubjectTo = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["irrfWithholdSubjectTo"])
                instance.icmsRateForSimplestaxregime = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["icmsRateForSimplestaxregime"])
                instance.isExemptByGrossRevenueForSimplestaxregime = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isExemptByGrossRevenueForSimplestaxregime"])
                instance.configuration = Decoders.decodeOptional(clazz: CompanyConfiguration.self, source: sourceDictionary["configuration"])
                instance.mailServer = Decoders.decodeOptional(clazz: CompanyMailServer.self, source: sourceDictionary["mailServer"])
                instance.authorizedToDownloadNFe = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["authorizedToDownloadNFe"])
                return instance
            }


            // Decoder for [CompanyAuthorizedToDownloadNFe]
            Decoders.addDecoder(clazz: [CompanyAuthorizedToDownloadNFe].self) { (source: AnyObject) -> [CompanyAuthorizedToDownloadNFe] in
                return Decoders.decode(clazz: [CompanyAuthorizedToDownloadNFe].self, source: source)
            }
            // Decoder for CompanyAuthorizedToDownloadNFe
            Decoders.addDecoder(clazz: CompanyAuthorizedToDownloadNFe.self) { (source: AnyObject) -> CompanyAuthorizedToDownloadNFe in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CompanyAuthorizedToDownloadNFe()
                instance.federalTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["federalTaxId"])
                return instance
            }


            // Decoder for [CompanyConfiguration]
            Decoders.addDecoder(clazz: [CompanyConfiguration].self) { (source: AnyObject) -> [CompanyConfiguration] in
                return Decoders.decode(clazz: [CompanyConfiguration].self, source: source)
            }
            // Decoder for CompanyConfiguration
            Decoders.addDecoder(clazz: CompanyConfiguration.self) { (source: AnyObject) -> CompanyConfiguration in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CompanyConfiguration()
                instance.certificate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["certificate"])
                instance.certificatepwd = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["certificatepwd"])
                instance.certificateexpiration = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["certificateexpiration"])
                instance.logo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["logo"])
                instance.tpImpNFe = CompanyConfiguration.TpImpNFe(rawValue: (sourceDictionary["tpImpNFe"] as? String) ?? "") 
                instance.tpImpNFCe = CompanyConfiguration.TpImpNFCe(rawValue: (sourceDictionary["tpImpNFCe"] as? String) ?? "") 
                return instance
            }


            // Decoder for [CompanyMailServer]
            Decoders.addDecoder(clazz: [CompanyMailServer].self) { (source: AnyObject) -> [CompanyMailServer] in
                return Decoders.decode(clazz: [CompanyMailServer].self, source: source)
            }
            // Decoder for CompanyMailServer
            Decoders.addDecoder(clazz: CompanyMailServer.self) { (source: AnyObject) -> CompanyMailServer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CompanyMailServer()
                instance.user = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["user"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.smtpAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["smtpAddress"])
                instance.port = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["port"])
                instance.emailFrom = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emailFrom"])
                instance._protocol = CompanyMailServer.ModelProtocol(rawValue: (sourceDictionary["protocol"] as? String) ?? "") 
                instance.templatemessageToEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["templatemessageToEmail"])
                return instance
            }


            // Decoder for [CstIcmsEnum]
            Decoders.addDecoder(clazz: [CstIcmsEnum].self) { (source: AnyObject) -> [CstIcmsEnum] in
                return Decoders.decode(clazz: [CstIcmsEnum].self, source: source)
            }
            // Decoder for CstIcmsEnum
            Decoders.addDecoder(clazz: CstIcmsEnum.self) { (source: AnyObject) -> CstIcmsEnum in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CstIcmsEnum()
                return instance
            }


            // Decoder for [CustomAgast]
            Decoders.addDecoder(clazz: [CustomAgast].self) { (source: AnyObject) -> [CustomAgast] in
                return Decoders.decode(clazz: [CustomAgast].self, source: source)
            }
            // Decoder for CustomAgast
            Decoders.addDecoder(clazz: CustomAgast.self) { (source: AnyObject) -> CustomAgast in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CustomAgast()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.hsCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hsCode"])
                instance.ex = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ex"])
                instance.cest = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cest"])
                instance.cean = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cean"])
                instance.codeType = Decoders.decodeOptional(clazz: AgastCodeType.self, source: sourceDictionary["codeType"])
                instance.cstIPI = CustomAgast.CstIPI(rawValue: (sourceDictionary["cstIPI"] as? String) ?? "") 
                instance.ipiLegalTaxClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipiLegalTaxClass"])
                instance.pisCofinsTaxReporting = CustomAgast.PisCofinsTaxReporting(rawValue: (sourceDictionary["pisCofinsTaxReporting"] as? String) ?? "") 
                instance.accruablePISTaxation = CustomAgast.AccruablePISTaxation(rawValue: (sourceDictionary["accruablePISTaxation"] as? String) ?? "") 
                instance.pisExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReasonCode"])
                instance.pisExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReason"])
                instance.accruableCOFINSTaxation = CustomAgast.AccruableCOFINSTaxation(rawValue: (sourceDictionary["accruableCOFINSTaxation"] as? String) ?? "") 
                instance.cofinsExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReasonCode"])
                instance.cofinsExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReason"])
                instance.accruableCSLLTaxation = CustomAgast.AccruableCSLLTaxation(rawValue: (sourceDictionary["accruableCSLLTaxation"] as? String) ?? "") 
                instance.csllExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["csllExemptLegalReason"])
                instance.csllExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["csllExemptLegalReasonCode"])
                instance.withholding = Decoders.decodeOptional(clazz: AgastWithholding.self, source: sourceDictionary["withholding"])
                instance.issDueatDestination = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["issDueatDestination"])
                instance.pisCofinsCreditNotAllowed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["pisCofinsCreditNotAllowed"])
                instance.issTaxation = CustomAgast.IssTaxation(rawValue: (sourceDictionary["issTaxation"] as? String) ?? "") 
                instance.federalTaxRate = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["federalTaxRate"])
                instance.specialProductClass = CustomAgast.SpecialProductClass(rawValue: (sourceDictionary["specialProductClass"] as? String) ?? "") 
                instance.icmsConf = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["icmsConf"])
                instance.companyId = Decoders.decodeOptional(clazz: NSUUID.self, source: sourceDictionary["companyId"])
                return instance
            }


            // Decoder for [CustomIcmsConfByState]
            Decoders.addDecoder(clazz: [CustomIcmsConfByState].self) { (source: AnyObject) -> [CustomIcmsConfByState] in
                return Decoders.decode(clazz: [CustomIcmsConfByState].self, source: source)
            }
            // Decoder for CustomIcmsConfByState
            Decoders.addDecoder(clazz: CustomIcmsConfByState.self) { (source: AnyObject) -> CustomIcmsConfByState in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CustomIcmsConfByState()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startDate"])
                instance.expirationDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["expirationDate"])
                instance.inactive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["inactive"])
                instance.subjectToST = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["subjectToST"])
                instance.icmsCST = CustomIcmsConfByState.IcmsCST(rawValue: (sourceDictionary["icmsCST"] as? String) ?? "") 
                instance.calcMode = CustomIcmsConfByState.CalcMode(rawValue: (sourceDictionary["calcMode"] as? String) ?? "") 
                instance.discountRateForMonoPhase = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discountRateForMonoPhase"])
                instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"])
                instance.icmsBaseDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["icmsBaseDiscount"])
                instance.msrp = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["msrp"])
                instance.mvaRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["mvaRate"])
                instance.msrpUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msrpUnit"])
                instance.icmsLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icmsLegalReason"])
                instance.fcpRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["fcpRate"])
                instance.icmsSTConf = Decoders.decodeOptional(clazz: IcmsConfByStateIcmsSTConf.self, source: sourceDictionary["icmsSTConf"])
                instance.icmsInterStateConf = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["icmsInterStateConf"])
                instance.companyId = Decoders.decodeOptional(clazz: NSUUID.self, source: sourceDictionary["companyId"])
                return instance
            }


            // Decoder for [CustomProcessScenario]
            Decoders.addDecoder(clazz: [CustomProcessScenario].self) { (source: AnyObject) -> [CustomProcessScenario] in
                return Decoders.decode(clazz: [CustomProcessScenario].self, source: source)
            }
            // Decoder for CustomProcessScenario
            Decoders.addDecoder(clazz: CustomProcessScenario.self) { (source: AnyObject) -> CustomProcessScenario in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CustomProcessScenario()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.stockImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stockImpact"])
                instance.financialImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["financialImpact"])
                instance.cstIPI = CustomProcessScenario.CstIPI(rawValue: (sourceDictionary["cstIPI"] as? String) ?? "") 
                instance.ipiLegalTaxClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipiLegalTaxClass"])
                instance.accruablePISTaxation = CustomProcessScenario.AccruablePISTaxation(rawValue: (sourceDictionary["accruablePISTaxation"] as? String) ?? "") 
                instance.pisExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReasonCode"])
                instance.pisExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReason"])
                instance.accruableCOFINSTaxation = CustomProcessScenario.AccruableCOFINSTaxation(rawValue: (sourceDictionary["accruableCOFINSTaxation"] as? String) ?? "") 
                instance.cofinsExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReasonCode"])
                instance.cofinsExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReason"])
                instance.allowIPIcreditWhenInGoing = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowIPIcreditWhenInGoing"])
                instance.icmsConf = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["icmsConf"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = CustomProcessScenario.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.wayType = CustomProcessScenario.WayType(rawValue: (sourceDictionary["wayType"] as? String) ?? "") 
                instance.goal = CustomProcessScenario.Goal(rawValue: (sourceDictionary["goal"] as? String) ?? "") 
                instance.overWriteCFOP = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["overWriteCFOP"])
                instance.cfops = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["cfops"])
                instance.companyId = Decoders.decodeOptional(clazz: NSUUID.self, source: sourceDictionary["companyId"])
                return instance
            }


            // Decoder for [CustomTaxTypeRate]
            Decoders.addDecoder(clazz: [CustomTaxTypeRate].self) { (source: AnyObject) -> [CustomTaxTypeRate] in
                return Decoders.decode(clazz: [CustomTaxTypeRate].self, source: source)
            }
            // Decoder for CustomTaxTypeRate
            Decoders.addDecoder(clazz: CustomTaxTypeRate.self) { (source: AnyObject) -> CustomTaxTypeRate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CustomTaxTypeRate()
                instance.taxType = Decoders.decodeOptional(clazz: TaxType.self, source: sourceDictionary["taxType"])
                instance.taxModel = CustomTaxTypeRate.TaxModel(rawValue: (sourceDictionary["taxModel"] as? String) ?? "") 
                instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"])
                instance.srvAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["srvAmount"])
                instance.quantityUnidBase = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["quantityUnidBase"])
                instance.specializationType = CustomTaxTypeRate.SpecializationType(rawValue: (sourceDictionary["specializationType"] as? String) ?? "") 
                instance.companyId = Decoders.decodeOptional(clazz: NSUUID.self, source: sourceDictionary["companyId"])
                return instance
            }


            // Decoder for [DefaultLocations]
            Decoders.addDecoder(clazz: [DefaultLocations].self) { (source: AnyObject) -> [DefaultLocations] in
                return Decoders.decode(clazz: [DefaultLocations].self, source: source)
            }
            // Decoder for DefaultLocations
            Decoders.addDecoder(clazz: DefaultLocations.self) { (source: AnyObject) -> DefaultLocations in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DefaultLocations()
                instance.entity = Decoders.decodeOptional(clazz: EntityLocation.self, source: sourceDictionary["entity"])
                instance.company = Decoders.decodeOptional(clazz: EntityLocation.self, source: sourceDictionary["company"])
                instance.transporter = Decoders.decodeOptional(clazz: EntityLocation.self, source: sourceDictionary["transporter"])
                instance.deliveryLocation = Decoders.decodeOptional(clazz: EntityLocation.self, source: sourceDictionary["deliveryLocation"])
                instance.pickupLocation = Decoders.decodeOptional(clazz: EntityLocation.self, source: sourceDictionary["pickupLocation"])
                return instance
            }


            // Decoder for [DetailsCalculatedTax]
            Decoders.addDecoder(clazz: [DetailsCalculatedTax].self) { (source: AnyObject) -> [DetailsCalculatedTax] in
                return Decoders.decode(clazz: [DetailsCalculatedTax].self, source: source)
            }
            // Decoder for DetailsCalculatedTax
            Decoders.addDecoder(clazz: DetailsCalculatedTax.self) { (source: AnyObject) -> DetailsCalculatedTax in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DetailsCalculatedTax()
                instance.locationType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locationType"])
                instance.jurisdictionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jurisdictionName"])
                instance.jurisdictionType = DetailsCalculatedTax.JurisdictionType(rawValue: (sourceDictionary["jurisdictionType"] as? String) ?? "") 
                instance.taxType = DetailsCalculatedTax.TaxType(rawValue: (sourceDictionary["taxType"] as? String) ?? "") 
                instance.rateType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rateType"])
                instance.scenario = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scenario"])
                instance.subtotalTaxable = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotalTaxable"])
                instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"])
                instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"])
                instance.exemptionCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["exemptionCode"])
                instance.significantLocations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["significantLocations"])
                instance.taxRuleType = DetailsCalculatedTax.TaxRuleType(rawValue: (sourceDictionary["taxRuleType"] as? String) ?? "") 
                return instance
            }


            // Decoder for [DetailsCalculatedTaxItem]
            Decoders.addDecoder(clazz: [DetailsCalculatedTaxItem].self) { (source: AnyObject) -> [DetailsCalculatedTaxItem] in
                return Decoders.decode(clazz: [DetailsCalculatedTaxItem].self, source: source)
            }
            // Decoder for DetailsCalculatedTaxItem
            Decoders.addDecoder(clazz: DetailsCalculatedTaxItem.self) { (source: AnyObject) -> DetailsCalculatedTaxItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DetailsCalculatedTaxItem()
                instance.locationType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locationType"])
                instance.jurisdictionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jurisdictionName"])
                instance.jurisdictionType = DetailsCalculatedTaxItem.JurisdictionType(rawValue: (sourceDictionary["jurisdictionType"] as? String) ?? "") 
                instance.taxType = DetailsCalculatedTaxItem.TaxType(rawValue: (sourceDictionary["taxType"] as? String) ?? "") 
                instance.rateType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rateType"])
                instance.scenario = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scenario"])
                instance.subtotalTaxable = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotalTaxable"])
                instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"])
                instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"])
                instance.exemptionCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["exemptionCode"])
                instance.significantLocations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["significantLocations"])
                instance.taxRuleType = DetailsCalculatedTaxItem.TaxRuleType(rawValue: (sourceDictionary["taxRuleType"] as? String) ?? "") 
                instance.source = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["source"])
                instance.cstB = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cstB"])
                instance.modBC = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modBC"])
                instance.cst = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cst"])
                return instance
            }


            // Decoder for [Entity]
            Decoders.addDecoder(clazz: [Entity].self) { (source: AnyObject) -> [Entity] in
                return Decoders.decode(clazz: [Entity].self, source: source)
            }
            // Decoder for Entity
            Decoders.addDecoder(clazz: Entity.self) { (source: AnyObject) -> Entity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Entity()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.role = Entity.Role(rawValue: (sourceDictionary["role"] as? String) ?? "") 
                instance.type = Decoders.decodeOptional(clazz: EntityType.self, source: sourceDictionary["type"])
                instance.federalTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["federalTaxId"])
                instance.cityTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityTaxId"])
                instance.stateTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateTaxId"])
                instance.suframa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["suframa"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.taxRegime = Entity.TaxRegime(rawValue: (sourceDictionary["taxRegime"] as? String) ?? "") 
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.subjectToSRF1234 = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["subjectToSRF1234"])
                return instance
            }


            // Decoder for [EntityForGoods]
            Decoders.addDecoder(clazz: [EntityForGoods].self) { (source: AnyObject) -> [EntityForGoods] in
                return Decoders.decode(clazz: [EntityForGoods].self, source: source)
            }
            // Decoder for EntityForGoods
            Decoders.addDecoder(clazz: EntityForGoods.self) { (source: AnyObject) -> EntityForGoods in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EntityForGoods()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.role = EntityForGoods.Role(rawValue: (sourceDictionary["role"] as? String) ?? "") 
                instance.type = Decoders.decodeOptional(clazz: EntityType.self, source: sourceDictionary["type"])
                instance.federalTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["federalTaxId"])
                instance.cityTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityTaxId"])
                instance.stateTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateTaxId"])
                instance.suframa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["suframa"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.taxRegime = EntityForGoods.TaxRegime(rawValue: (sourceDictionary["taxRegime"] as? String) ?? "") 
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.subjectToSRF1234 = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["subjectToSRF1234"])
                instance.icmsTaxPayer = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["icmsTaxPayer"])
                return instance
            }


            // Decoder for [EntityInformerForGoods]
            Decoders.addDecoder(clazz: [EntityInformerForGoods].self) { (source: AnyObject) -> [EntityInformerForGoods] in
                return Decoders.decode(clazz: [EntityInformerForGoods].self, source: source)
            }
            // Decoder for EntityInformerForGoods
            Decoders.addDecoder(clazz: EntityInformerForGoods.self) { (source: AnyObject) -> EntityInformerForGoods in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EntityInformerForGoods()
                instance.type = Decoders.decodeOptional(clazz: EntityType.self, source: sourceDictionary["type"])
                instance.taxRegime = Decoders.decodeOptional(clazz: FederalTaxRegime.self, source: sourceDictionary["taxRegime"])
                instance.federalTaxRegime = Decoders.decodeOptional(clazz: EntityInformerForGoodsFederalTaxRegime.self, source: sourceDictionary["federalTaxRegime"])
                instance.cityCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityCode"])
                instance.address = Decoders.decodeOptional(clazz: Address.self, source: sourceDictionary["address"])
                instance.details = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["details"])
                instance.icmsTaxPayer = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["icmsTaxPayer"])
                return instance
            }


            // Decoder for [EntityInformerForGoodsFederalTaxRegime]
            Decoders.addDecoder(clazz: [EntityInformerForGoodsFederalTaxRegime].self) { (source: AnyObject) -> [EntityInformerForGoodsFederalTaxRegime] in
                return Decoders.decode(clazz: [EntityInformerForGoodsFederalTaxRegime].self, source: source)
            }
            // Decoder for EntityInformerForGoodsFederalTaxRegime
            Decoders.addDecoder(clazz: EntityInformerForGoodsFederalTaxRegime.self) { (source: AnyObject) -> EntityInformerForGoodsFederalTaxRegime in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EntityInformerForGoodsFederalTaxRegime()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.abbr = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["abbr"])
                return instance
            }


            // Decoder for [EntityLocation]
            Decoders.addDecoder(clazz: [EntityLocation].self) { (source: AnyObject) -> [EntityLocation] in
                return Decoders.decode(clazz: [EntityLocation].self, source: source)
            }
            // Decoder for EntityLocation
            Decoders.addDecoder(clazz: EntityLocation.self) { (source: AnyObject) -> EntityLocation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EntityLocation()
                instance.street = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street"])
                instance.neighborhood = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["neighborhood"])
                instance.zipcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zipcode"])
                instance.cityCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityCode"])
                instance.cityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityName"])
                instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryCode"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                return instance
            }


            // Decoder for [EntityType]
            Decoders.addDecoder(clazz: [EntityType].self) { (source: AnyObject) -> [EntityType] in
                return Decoders.decode(clazz: [EntityType].self, source: source)
            }
            // Decoder for EntityType
            Decoders.addDecoder(clazz: EntityType.self) { (source: AnyObject) -> EntityType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EntityType()
                return instance
            }


            // Decoder for [Error]
            Decoders.addDecoder(clazz: [Error].self) { (source: AnyObject) -> [Error] in
                return Decoders.decode(clazz: [Error].self, source: source)
            }
            // Decoder for Error
            Decoders.addDecoder(clazz: Error.self) { (source: AnyObject) -> Error in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Error()
                instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.field = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["field"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance._in = Error.In(rawValue: (sourceDictionary["in"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ExportInfo]
            Decoders.addDecoder(clazz: [ExportInfo].self) { (source: AnyObject) -> [ExportInfo] in
                return Decoders.decode(clazz: [ExportInfo].self, source: source)
            }
            // Decoder for ExportInfo
            Decoders.addDecoder(clazz: ExportInfo.self) { (source: AnyObject) -> ExportInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExportInfo()
                instance.shippingState = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["shippingState"])
                instance.place = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["place"])
                instance.placeDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["placeDescription"])
                return instance
            }


            // Decoder for [FederalTaxRegime]
            Decoders.addDecoder(clazz: [FederalTaxRegime].self) { (source: AnyObject) -> [FederalTaxRegime] in
                return Decoders.decode(clazz: [FederalTaxRegime].self, source: source)
            }
            // Decoder for FederalTaxRegime
            Decoders.addDecoder(clazz: FederalTaxRegime.self) { (source: AnyObject) -> FederalTaxRegime in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FederalTaxRegime()
                return instance
            }


            // Decoder for [Fuel]
            Decoders.addDecoder(clazz: [Fuel].self) { (source: AnyObject) -> [Fuel] in
                return Decoders.decode(clazz: [Fuel].self, source: source)
            }
            // Decoder for Fuel
            Decoders.addDecoder(clazz: Fuel.self) { (source: AnyObject) -> Fuel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Fuel()
                instance.prodANPCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["prodANPCode"])
                instance.perMixGN = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["perMixGN"])
                instance.authorizationCodeCODIF = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authorizationCodeCODIF"])
                instance.quantityOnRoomTemperature = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["quantityOnRoomTemperature"])
                instance.stateCodeOfUndUser = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["stateCodeOfUndUser"])
                instance.cide = Decoders.decodeOptional(clazz: FuelCide.self, source: sourceDictionary["cide"])
                instance.pumpNumber = Decoders.decodeOptional(clazz: FuelPumpNumber.self, source: sourceDictionary["pumpNumber"])
                return instance
            }


            // Decoder for [FuelCide]
            Decoders.addDecoder(clazz: [FuelCide].self) { (source: AnyObject) -> [FuelCide] in
                return Decoders.decode(clazz: [FuelCide].self, source: source)
            }
            // Decoder for FuelCide
            Decoders.addDecoder(clazz: FuelCide.self) { (source: AnyObject) -> FuelCide in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FuelCide()
                instance.baseCalcCIDE = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["baseCalcCIDE"])
                instance.rateCIDE = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rateCIDE"])
                instance.valueCIDE = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["valueCIDE"])
                return instance
            }


            // Decoder for [FuelPumpNumber]
            Decoders.addDecoder(clazz: [FuelPumpNumber].self) { (source: AnyObject) -> [FuelPumpNumber] in
                return Decoders.decode(clazz: [FuelPumpNumber].self, source: source)
            }
            // Decoder for FuelPumpNumber
            Decoders.addDecoder(clazz: FuelPumpNumber.self) { (source: AnyObject) -> FuelPumpNumber in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FuelPumpNumber()
                instance.nozzleNumberFuelSupply = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nozzleNumberFuelSupply"])
                instance.fuelPumpNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fuelPumpNumber"])
                instance.fuelTankNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fuelTankNumber"])
                instance.startValueOfPumpNumber = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["startValueOfPumpNumber"])
                instance.endValueOfPumpNumber = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["endValueOfPumpNumber"])
                return instance
            }


            // Decoder for [HeaderBaseInfo]
            Decoders.addDecoder(clazz: [HeaderBaseInfo].self) { (source: AnyObject) -> [HeaderBaseInfo] in
                return Decoders.decode(clazz: [HeaderBaseInfo].self, source: source)
            }
            // Decoder for HeaderBaseInfo
            Decoders.addDecoder(clazz: HeaderBaseInfo.self) { (source: AnyObject) -> HeaderBaseInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HeaderBaseInfo()
                instance.accountId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountId"])
                instance.companyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyCode"])
                instance.transactionType = HeaderBaseInfo.TransactionType(rawValue: (sourceDictionary["transactionType"] as? String) ?? "") 
                instance.documentCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentCode"])
                instance.currency = HeaderBaseInfo.Currency(rawValue: (sourceDictionary["currency"] as? String) ?? "") 
                instance.transactionDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["transactionDate"])
                instance.taxCalculationDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["taxCalculationDate"])
                instance.companyLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyLocation"])
                return instance
            }


            // Decoder for [HeaderForGoods]
            Decoders.addDecoder(clazz: [HeaderForGoods].self) { (source: AnyObject) -> [HeaderForGoods] in
                return Decoders.decode(clazz: [HeaderForGoods].self, source: source)
            }
            // Decoder for HeaderForGoods
            Decoders.addDecoder(clazz: HeaderForGoods.self) { (source: AnyObject) -> HeaderForGoods in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HeaderForGoods()
                instance.messageType = HeaderForGoods.MessageType(rawValue: (sourceDictionary["messageType"] as? String) ?? "") 
                instance.accountId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountId"])
                instance.companyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyCode"])
                instance.documentCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentCode"])
                instance.participants = Decoders.decodeOptional(clazz: HeaderForGoodsParticipants.self, source: sourceDictionary["participants"])
                instance.nfAccessKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nfAccessKey"])
                instance.nfceQrCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nfceQrCode"])
                instance.transactionType = HeaderForGoods.TransactionType(rawValue: (sourceDictionary["transactionType"] as? String) ?? "") 
                instance.transactionModel = HeaderForGoods.TransactionModel(rawValue: (sourceDictionary["transactionModel"] as? String) ?? "") 
                instance.transactionClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transactionClass"])
                instance.eDocCreatorType = HeaderForGoods.EDocCreatorType(rawValue: (sourceDictionary["eDocCreatorType"] as? String) ?? "") 
                instance.eDocCreatorPerspective = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eDocCreatorPerspective"])
                instance.entityCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["entityCode"])
                instance.currency = HeaderForGoods.Currency(rawValue: (sourceDictionary["currency"] as? String) ?? "") 
                instance.companyLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyLocation"])
                instance.transactionDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transactionDate"])
                instance.shippingDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shippingDate"])
                instance.additionalInfo = Decoders.decodeOptional(clazz: AdditionalInformation.self, source: sourceDictionary["additionalInfo"])
                instance.tpImp = HeaderForGoods.TpImp(rawValue: (sourceDictionary["tpImp"] as? String) ?? "") 
                instance.idDest = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["idDest"])
                instance.indPres = HeaderForGoods.IndPres(rawValue: (sourceDictionary["indPres"] as? String) ?? "") 
                instance.invoiceNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoiceNumber"])
                instance.invoiceSerial = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoiceSerial"])
                instance.defaultLocations = Decoders.decodeOptional(clazz: DefaultLocations.self, source: sourceDictionary["defaultLocations"])
                instance.transport = Decoders.decodeOptional(clazz: Transport.self, source: sourceDictionary["transport"])
                instance.nfRef = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["nfRef"])
                instance.payment = Decoders.decodeOptional(clazz: Payment.self, source: sourceDictionary["payment"])
                instance.purchaseInfo = Decoders.decodeOptional(clazz: PurchaseInfo.self, source: sourceDictionary["purchaseInfo"])
                instance.export = Decoders.decodeOptional(clazz: ExportInfo.self, source: sourceDictionary["export"])
                return instance
            }


            // Decoder for [HeaderForGoodsParticipants]
            Decoders.addDecoder(clazz: [HeaderForGoodsParticipants].self) { (source: AnyObject) -> [HeaderForGoodsParticipants] in
                return Decoders.decode(clazz: [HeaderForGoodsParticipants].self, source: source)
            }
            // Decoder for HeaderForGoodsParticipants
            Decoders.addDecoder(clazz: HeaderForGoodsParticipants.self) { (source: AnyObject) -> HeaderForGoodsParticipants in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HeaderForGoodsParticipants()
                instance.entity = Decoders.decodeOptional(clazz: EntityForGoods.self, source: sourceDictionary["entity"])
                instance.transporter = Decoders.decodeOptional(clazz: EntityForGoods.self, source: sourceDictionary["transporter"])
                return instance
            }


            // Decoder for [IbptConf]
            Decoders.addDecoder(clazz: [IbptConf].self) { (source: AnyObject) -> [IbptConf] in
                return Decoders.decode(clazz: [IbptConf].self, source: source)
            }
            // Decoder for IbptConf
            Decoders.addDecoder(clazz: IbptConf.self) { (source: AnyObject) -> IbptConf in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IbptConf()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.list = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["list"])
                return instance
            }


            // Decoder for [IcmsConfByState]
            Decoders.addDecoder(clazz: [IcmsConfByState].self) { (source: AnyObject) -> [IcmsConfByState] in
                return Decoders.decode(clazz: [IcmsConfByState].self, source: source)
            }
            // Decoder for IcmsConfByState
            Decoders.addDecoder(clazz: IcmsConfByState.self) { (source: AnyObject) -> IcmsConfByState in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IcmsConfByState()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startDate"])
                instance.expirationDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["expirationDate"])
                instance.inactive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["inactive"])
                instance.subjectToST = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["subjectToST"])
                instance.icmsCST = IcmsConfByState.IcmsCST(rawValue: (sourceDictionary["icmsCST"] as? String) ?? "") 
                instance.calcMode = IcmsConfByState.CalcMode(rawValue: (sourceDictionary["calcMode"] as? String) ?? "") 
                instance.discountRateForMonoPhase = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discountRateForMonoPhase"])
                instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"])
                instance.icmsBaseDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["icmsBaseDiscount"])
                instance.msrp = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["msrp"])
                instance.mvaRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["mvaRate"])
                instance.msrpUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msrpUnit"])
                instance.icmsLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icmsLegalReason"])
                instance.fcpRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["fcpRate"])
                instance.icmsSTConf = Decoders.decodeOptional(clazz: IcmsConfByStateIcmsSTConf.self, source: sourceDictionary["icmsSTConf"])
                instance.icmsInterStateConf = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["icmsInterStateConf"])
                return instance
            }


            // Decoder for [IcmsConfByStateIcmsSTConf]
            Decoders.addDecoder(clazz: [IcmsConfByStateIcmsSTConf].self) { (source: AnyObject) -> [IcmsConfByStateIcmsSTConf] in
                return Decoders.decode(clazz: [IcmsConfByStateIcmsSTConf].self, source: source)
            }
            // Decoder for IcmsConfByStateIcmsSTConf
            Decoders.addDecoder(clazz: IcmsConfByStateIcmsSTConf.self) { (source: AnyObject) -> IcmsConfByStateIcmsSTConf in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IcmsConfByStateIcmsSTConf()
                instance.hasReductionOfMVAForSimples = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasReductionOfMVAForSimples"])
                instance.reductionOfMVAForSimples = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["reductionOfMVAForSimples"])
                instance.calcMode = IcmsConfByStateIcmsSTConf.CalcMode(rawValue: (sourceDictionary["calcMode"] as? String) ?? "") 
                instance.mvaRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["mvaRate"])
                instance.icmsStBaseDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["icmsStBaseDiscount"])
                instance.srp = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["srp"])
                instance.srpUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["srpUnit"])
                return instance
            }


            // Decoder for [IcmsConfInterState]
            Decoders.addDecoder(clazz: [IcmsConfInterState].self) { (source: AnyObject) -> [IcmsConfInterState] in
                return Decoders.decode(clazz: [IcmsConfInterState].self, source: source)
            }
            // Decoder for IcmsConfInterState
            Decoders.addDecoder(clazz: IcmsConfInterState.self) { (source: AnyObject) -> IcmsConfInterState in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IcmsConfInterState()
                instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"])
                instance.calcMode = IcmsConfInterState.CalcMode(rawValue: (sourceDictionary["calcMode"] as? String) ?? "") 
                instance.discountRateForMonoPhase = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discountRateForMonoPhase"])
                instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"])
                instance.fcpRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["fcpRate"])
                instance.icmsBaseDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["icmsBaseDiscount"])
                instance.msrp = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["msrp"])
                instance.mvaRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["mvaRate"])
                instance.msrpUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msrpUnit"])
                instance.icmsLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icmsLegalReason"])
                instance.icmsSTConf = Decoders.decodeOptional(clazz: IcmsConfInterStateIcmsSTConf.self, source: sourceDictionary["icmsSTConf"])
                return instance
            }


            // Decoder for [IcmsConfInterStateIcmsSTConf]
            Decoders.addDecoder(clazz: [IcmsConfInterStateIcmsSTConf].self) { (source: AnyObject) -> [IcmsConfInterStateIcmsSTConf] in
                return Decoders.decode(clazz: [IcmsConfInterStateIcmsSTConf].self, source: source)
            }
            // Decoder for IcmsConfInterStateIcmsSTConf
            Decoders.addDecoder(clazz: IcmsConfInterStateIcmsSTConf.self) { (source: AnyObject) -> IcmsConfInterStateIcmsSTConf in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IcmsConfInterStateIcmsSTConf()
                instance.protocolType = IcmsConfInterStateIcmsSTConf.ProtocolType(rawValue: (sourceDictionary["protocolType"] as? String) ?? "") 
                instance.hasReductionOfMVAForSimples = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasReductionOfMVAForSimples"])
                instance.reductionOfMVAForSimples = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["reductionOfMVAForSimples"])
                instance.calcMode = IcmsConfInterStateIcmsSTConf.CalcMode(rawValue: (sourceDictionary["calcMode"] as? String) ?? "") 
                instance.icmsStBaseDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["icmsStBaseDiscount"])
                instance.mvaRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["mvaRate"])
                instance.srp = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["srp"])
                instance.srpUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["srpUnit"])
                return instance
            }


            // Decoder for [IcmsTaxConf]
            Decoders.addDecoder(clazz: [IcmsTaxConf].self) { (source: AnyObject) -> [IcmsTaxConf] in
                return Decoders.decode(clazz: [IcmsTaxConf].self, source: source)
            }
            // Decoder for IcmsTaxConf
            Decoders.addDecoder(clazz: IcmsTaxConf.self) { (source: AnyObject) -> IcmsTaxConf in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IcmsTaxConf()
                instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"])
                instance.icmsCST = IcmsTaxConf.IcmsCST(rawValue: (sourceDictionary["icmsCST"] as? String) ?? "") 
                instance.messageCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["messageCode"])
                instance.relationShip = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["relationShip"])
                return instance
            }


            // Decoder for [IcmsTaxConfBase]
            Decoders.addDecoder(clazz: [IcmsTaxConfBase].self) { (source: AnyObject) -> [IcmsTaxConfBase] in
                return Decoders.decode(clazz: [IcmsTaxConfBase].self, source: source)
            }
            // Decoder for IcmsTaxConfBase
            Decoders.addDecoder(clazz: IcmsTaxConfBase.self) { (source: AnyObject) -> IcmsTaxConfBase in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IcmsTaxConfBase()
                instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"])
                instance.icmsCST = IcmsTaxConfBase.IcmsCST(rawValue: (sourceDictionary["icmsCST"] as? String) ?? "") 
                instance.messageCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["messageCode"])
                return instance
            }


            // Decoder for [InformerForGoods]
            Decoders.addDecoder(clazz: [InformerForGoods].self) { (source: AnyObject) -> [InformerForGoods] in
                return Decoders.decode(clazz: [InformerForGoods].self, source: source)
            }
            // Decoder for InformerForGoods
            Decoders.addDecoder(clazz: InformerForGoods.self) { (source: AnyObject) -> InformerForGoods in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InformerForGoods()
                instance.header = Decoders.decodeOptional(clazz: HeaderForGoods.self, source: sourceDictionary["header"])
                instance.line = Decoders.decodeOptional(clazz: LineForGoods.self, source: sourceDictionary["line"])
                instance.company = Decoders.decodeOptional(clazz: EntityInformerForGoods.self, source: sourceDictionary["_company"])
                instance.entity = Decoders.decodeOptional(clazz: EntityInformerForGoods.self, source: sourceDictionary["_entity"])
                instance.emitter = Decoders.decodeOptional(clazz: EntityInformerForGoods.self, source: sourceDictionary["emitter"])
                instance.receiver = Decoders.decodeOptional(clazz: EntityInformerForGoods.self, source: sourceDictionary["receiver"])
                instance.transporter = Decoders.decodeOptional(clazz: EntityInformerForGoods.self, source: sourceDictionary["transporter"])
                instance.csts = Decoders.decodeOptional(clazz: InformerForGoodsCsts.self, source: sourceDictionary["csts"])
                instance.amount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["amount"])
                instance.discount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount"])
                instance.quantity = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["quantity"])
                instance.unitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["unitPrice"])
                instance.freightAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["freightAmount"])
                instance.insuranceAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["insuranceAmount"])
                instance.otherCostAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["otherCostAmount"])
                instance.exemptValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["exemptValue"])
                return instance
            }


            // Decoder for [InformerForGoodsCsts]
            Decoders.addDecoder(clazz: [InformerForGoodsCsts].self) { (source: AnyObject) -> [InformerForGoodsCsts] in
                return Decoders.decode(clazz: [InformerForGoodsCsts].self, source: source)
            }
            // Decoder for InformerForGoodsCsts
            Decoders.addDecoder(clazz: InformerForGoodsCsts.self) { (source: AnyObject) -> InformerForGoodsCsts in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InformerForGoodsCsts()
                instance.icms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icms"])
                instance.ipi = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipi"])
                instance.pisCofins = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisCofins"])
                return instance
            }


            // Decoder for [InlineResponse200]
            Decoders.addDecoder(clazz: [InlineResponse200].self) { (source: AnyObject) -> [InlineResponse200] in
                return Decoders.decode(clazz: [InlineResponse200].self, source: source)
            }
            // Decoder for InlineResponse200
            Decoders.addDecoder(clazz: InlineResponse200.self) { (source: AnyObject) -> InlineResponse200 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse200()
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                instance.expired = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["expired"])
                return instance
            }


            // Decoder for [InlineResponse2001]
            Decoders.addDecoder(clazz: [InlineResponse2001].self) { (source: AnyObject) -> [InlineResponse2001] in
                return Decoders.decode(clazz: [InlineResponse2001].self, source: source)
            }
            // Decoder for InlineResponse2001
            Decoders.addDecoder(clazz: InlineResponse2001.self) { (source: AnyObject) -> InlineResponse2001 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2001()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                return instance
            }


            // Decoder for [InlineResponse2002]
            Decoders.addDecoder(clazz: [InlineResponse2002].self) { (source: AnyObject) -> [InlineResponse2002] in
                return Decoders.decode(clazz: [InlineResponse2002].self, source: source)
            }
            // Decoder for InlineResponse2002
            Decoders.addDecoder(clazz: InlineResponse2002.self) { (source: AnyObject) -> InlineResponse2002 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2002()
                instance.companyId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyId"])
                return instance
            }


            // Decoder for [InlineResponse2003]
            Decoders.addDecoder(clazz: [InlineResponse2003].self) { (source: AnyObject) -> [InlineResponse2003] in
                return Decoders.decode(clazz: [InlineResponse2003].self, source: source)
            }
            // Decoder for InlineResponse2003
            Decoders.addDecoder(clazz: InlineResponse2003.self) { (source: AnyObject) -> InlineResponse2003 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2003()
                instance.contingency = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["contingency"])
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startDate"])
                instance.finishDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["finishDate"])
                return instance
            }


            // Decoder for [InlineResponse2004]
            Decoders.addDecoder(clazz: [InlineResponse2004].self) { (source: AnyObject) -> [InlineResponse2004] in
                return Decoders.decode(clazz: [InlineResponse2004].self, source: source)
            }
            // Decoder for InlineResponse2004
            Decoders.addDecoder(clazz: InlineResponse2004.self) { (source: AnyObject) -> InlineResponse2004 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse2004()
                instance.environment = InlineResponse2004.Environment(rawValue: (sourceDictionary["environment"] as? String) ?? "") 
                return instance
            }


            // Decoder for [InlineResponse201]
            Decoders.addDecoder(clazz: [InlineResponse201].self) { (source: AnyObject) -> [InlineResponse201] in
                return Decoders.decode(clazz: [InlineResponse201].self, source: source)
            }
            // Decoder for InlineResponse201
            Decoders.addDecoder(clazz: InlineResponse201.self) { (source: AnyObject) -> InlineResponse201 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse201()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [InstallmentComplete]
            Decoders.addDecoder(clazz: [InstallmentComplete].self) { (source: AnyObject) -> [InstallmentComplete] in
                return Decoders.decode(clazz: [InstallmentComplete].self, source: source)
            }
            // Decoder for InstallmentComplete
            Decoders.addDecoder(clazz: InstallmentComplete.self) { (source: AnyObject) -> InstallmentComplete in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InstallmentComplete()
                instance.documentNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentNumber"])
                instance.date = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["date"])
                instance.grossValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grossValue"])
                instance.netValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["netValue"])
                instance.withholdingMode = Decoders.decodeOptional(clazz: WithholdingMode.self, source: sourceDictionary["withholdingMode"])
                instance.withholdingPIS = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["withholdingPIS"])
                instance.withholdingCOFINS = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["withholdingCOFINS"])
                instance.withholdingCSLL = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["withholdingCSLL"])
                return instance
            }


            // Decoder for [IpbtConfItem]
            Decoders.addDecoder(clazz: [IpbtConfItem].self) { (source: AnyObject) -> [IpbtConfItem] in
                return Decoders.decode(clazz: [IpbtConfItem].self, source: source)
            }
            // Decoder for IpbtConfItem
            Decoders.addDecoder(clazz: IpbtConfItem.self) { (source: AnyObject) -> IpbtConfItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IpbtConfItem()
                instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"])
                instance.federalTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["federalTax"])
                instance.importTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["importTax"])
                instance.stateTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["stateTax"])
                instance.cityTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["cityTax"])
                instance.source = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source"])
                return instance
            }


            // Decoder for [IssConfByCity]
            Decoders.addDecoder(clazz: [IssConfByCity].self) { (source: AnyObject) -> [IssConfByCity] in
                return Decoders.decode(clazz: [IssConfByCity].self, source: source)
            }
            // Decoder for IssConfByCity
            Decoders.addDecoder(clazz: IssConfByCity.self) { (source: AnyObject) -> IssConfByCity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IssConfByCity()
                instance.cityCode = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["cityCode"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"])
                instance.issWhDestOtherCities = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["issWhDestOtherCities"])
                instance.issWhDestSameCity = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["issWhDestSameCity"])
                instance.issWhOriginUnregSeller = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["issWhOriginUnregSeller"])
                instance.serviceList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["serviceList"])
                return instance
            }


            // Decoder for [IssConfServiceList]
            Decoders.addDecoder(clazz: [IssConfServiceList].self) { (source: AnyObject) -> [IssConfServiceList] in
                return Decoders.decode(clazz: [IssConfServiceList].self, source: source)
            }
            // Decoder for IssConfServiceList
            Decoders.addDecoder(clazz: IssConfServiceList.self) { (source: AnyObject) -> IssConfServiceList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IssConfServiceList()
                instance.agast = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["agast"])
                instance.cityServiceCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityServiceCode"])
                instance.taxRate = Decoders.decodeOptional(clazz: IssConfServiceListTaxRate.self, source: sourceDictionary["taxRate"])
                return instance
            }


            // Decoder for [IssConfServiceListTaxRate]
            Decoders.addDecoder(clazz: [IssConfServiceListTaxRate].self) { (source: AnyObject) -> [IssConfServiceListTaxRate] in
                return Decoders.decode(clazz: [IssConfServiceListTaxRate].self, source: source)
            }
            // Decoder for IssConfServiceListTaxRate
            Decoders.addDecoder(clazz: IssConfServiceListTaxRate.self) { (source: AnyObject) -> IssConfServiceListTaxRate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IssConfServiceListTaxRate()
                instance.ISS = Decoders.decodeOptional(clazz: ServiceItemTaxRate.self, source: sourceDictionary["ISS"])
                instance.ISS_RF = Decoders.decodeOptional(clazz: ServiceItemTaxRate.self, source: sourceDictionary["ISS_RF"])
                instance.ISS_E = Decoders.decodeOptional(clazz: ServiceItemTaxRate.self, source: sourceDictionary["ISS_E"])
                instance.ISS_I = Decoders.decodeOptional(clazz: ServiceItemTaxRate.self, source: sourceDictionary["ISS_I"])
                instance.ibpt = Decoders.decodeOptional(clazz: IssConfServiceListTaxRateIbpt.self, source: sourceDictionary["ibpt"])
                return instance
            }


            // Decoder for [IssConfServiceListTaxRateIbpt]
            Decoders.addDecoder(clazz: [IssConfServiceListTaxRateIbpt].self) { (source: AnyObject) -> [IssConfServiceListTaxRateIbpt] in
                return Decoders.decode(clazz: [IssConfServiceListTaxRateIbpt].self, source: source)
            }
            // Decoder for IssConfServiceListTaxRateIbpt
            Decoders.addDecoder(clazz: IssConfServiceListTaxRateIbpt.self) { (source: AnyObject) -> IssConfServiceListTaxRateIbpt in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IssConfServiceListTaxRateIbpt()
                instance.nationalFedTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["nationalFedTax"])
                instance.cityTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["cityTax"])
                return instance
            }


            // Decoder for [ItemCpom]
            Decoders.addDecoder(clazz: [ItemCpom].self) { (source: AnyObject) -> [ItemCpom] in
                return Decoders.decode(clazz: [ItemCpom].self, source: source)
            }
            // Decoder for ItemCpom
            Decoders.addDecoder(clazz: ItemCpom.self) { (source: AnyObject) -> ItemCpom in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ItemCpom()
                instance.companyId = Decoders.decodeOptional(clazz: NSUUID.self, source: sourceDictionary["companyId"])
                instance.cityCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityCode"])
                instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"])
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                return instance
            }


            // Decoder for [ItemGoods]
            Decoders.addDecoder(clazz: [ItemGoods].self) { (source: AnyObject) -> [ItemGoods] in
                return Decoders.decode(clazz: [ItemGoods].self, source: source)
            }
            // Decoder for ItemGoods
            Decoders.addDecoder(clazz: ItemGoods.self) { (source: AnyObject) -> ItemGoods in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ItemGoods()
                instance.companyId = Decoders.decodeOptional(clazz: NSUUID.self, source: sourceDictionary["companyId"])
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.agast = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["agast"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.sealCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sealCode"])
                instance.nFCI = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nFCI"])
                instance.isIcmsStSubstitute = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isIcmsStSubstitute"])
                instance.source = ItemGoods.Source(rawValue: (sourceDictionary["source"] as? String) ?? "") 
                instance.productType = ItemGoods.ProductType(rawValue: (sourceDictionary["productType"] as? String) ?? "") 
                instance.manufacturerEquivalent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["manufacturerEquivalent"])
                instance.appropriateIPIcreditWhenInGoing = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["appropriateIPIcreditWhenInGoing"])
                instance.usuallyAppropriatePISCOFINSCredit = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["usuallyAppropriatePISCOFINSCredit"])
                instance.isPisCofinsEstimatedCredit = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isPisCofinsEstimatedCredit"])
                instance.piscofinsRevenueType = ItemGoods.PiscofinsRevenueType(rawValue: (sourceDictionary["piscofinsRevenueType"] as? String) ?? "") 
                instance.icmsBaseDiscountForMonoPhaseSocialContr = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["icmsBaseDiscountForMonoPhaseSocialContr"])
                instance.cean = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cean"])
                instance.nve = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nve"])
                instance.salesUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["salesUnit"])
                instance.salesUnitIPIfactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["salesUnitIPIfactor"])
                instance.salesUnitIcmsfactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["salesUnitIcmsfactor"])
                instance.salesUnitIcmsStfactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["salesUnitIcmsStfactor"])
                instance.salesUnitPisCofinsfactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["salesUnitPisCofinsfactor"])
                instance.purchaseUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purchaseUnit"])
                instance.purchaseUnitIPIfactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["purchaseUnitIPIfactor"])
                instance.purchaseUnitIcmsfactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["purchaseUnitIcmsfactor"])
                instance.purchaseUnitIcmsStfactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["purchaseUnitIcmsStfactor"])
                instance.purchaseUnitPisCofinsfactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["purchaseUnitPisCofinsfactor"])
                instance.firstUse = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["firstUse"])
                return instance
            }


            // Decoder for [ItemSimple]
            Decoders.addDecoder(clazz: [ItemSimple].self) { (source: AnyObject) -> [ItemSimple] in
                return Decoders.decode(clazz: [ItemSimple].self, source: source)
            }
            // Decoder for ItemSimple
            Decoders.addDecoder(clazz: ItemSimple.self) { (source: AnyObject) -> ItemSimple in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ItemSimple()
                instance.companyId = Decoders.decodeOptional(clazz: NSUUID.self, source: sourceDictionary["companyId"])
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.agast = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["agast"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                return instance
            }


            // Decoder for [LegalReason]
            Decoders.addDecoder(clazz: [LegalReason].self) { (source: AnyObject) -> [LegalReason] in
                return Decoders.decode(clazz: [LegalReason].self, source: source)
            }
            // Decoder for LegalReason
            Decoders.addDecoder(clazz: LegalReason.self) { (source: AnyObject) -> LegalReason in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LegalReason()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.scope = LegalReason.Scope(rawValue: (sourceDictionary["scope"] as? String) ?? "") 
                instance.disable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["disable"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.legalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["legalCode"])
                instance.showInInvoice = LegalReason.ShowInInvoice(rawValue: (sourceDictionary["showInInvoice"] as? String) ?? "") 
                instance.referencedProcesses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["referencedProcesses"])
                instance.taxScope = Decoders.decodeOptional(clazz: LegalReasonTaxScope.self, source: sourceDictionary["taxScope"])
                return instance
            }


            // Decoder for [LegalReasonReferencedProcesses]
            Decoders.addDecoder(clazz: [LegalReasonReferencedProcesses].self) { (source: AnyObject) -> [LegalReasonReferencedProcesses] in
                return Decoders.decode(clazz: [LegalReasonReferencedProcesses].self, source: source)
            }
            // Decoder for LegalReasonReferencedProcesses
            Decoders.addDecoder(clazz: LegalReasonReferencedProcesses.self) { (source: AnyObject) -> LegalReasonReferencedProcesses in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LegalReasonReferencedProcesses()
                instance.nProc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nProc"])
                instance.indProc = LegalReasonReferencedProcesses.IndProc(rawValue: (sourceDictionary["indProc"] as? String) ?? "") 
                return instance
            }


            // Decoder for [LegalReasonTaxScope]
            Decoders.addDecoder(clazz: [LegalReasonTaxScope].self) { (source: AnyObject) -> [LegalReasonTaxScope] in
                return Decoders.decode(clazz: [LegalReasonTaxScope].self, source: source)
            }
            // Decoder for LegalReasonTaxScope
            Decoders.addDecoder(clazz: LegalReasonTaxScope.self) { (source: AnyObject) -> LegalReasonTaxScope in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LegalReasonTaxScope()
                instance.taxType = LegalReasonTaxScope.TaxType(rawValue: (sourceDictionary["taxType"] as? String) ?? "") 
                instance.specializedTaxType = LegalReasonTaxScope.SpecializedTaxType(rawValue: (sourceDictionary["specializedTaxType"] as? String) ?? "") 
                instance.jurisdictionType = LegalReasonTaxScope.JurisdictionType(rawValue: (sourceDictionary["jurisdictionType"] as? String) ?? "") 
                instance.jurisdictionIbgeCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jurisdictionIbgeCode"])
                return instance
            }


            // Decoder for [LineForGoods]
            Decoders.addDecoder(clazz: [LineForGoods].self) { (source: AnyObject) -> [LineForGoods] in
                return Decoders.decode(clazz: [LineForGoods].self, source: source)
            }
            // Decoder for LineForGoods
            Decoders.addDecoder(clazz: LineForGoods.self) { (source: AnyObject) -> LineForGoods in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LineForGoods()
                instance.lineCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lineCode"])
                instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"])
                instance.avalaraGoodsAndServicesType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avalaraGoodsAndServicesType"])
                instance.numberOfItems = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["numberOfItems"])
                instance.returnedPercentageAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["returnedPercentageAmount"])
                instance.lineUnitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUnitPrice"])
                instance.lineAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineAmount"])
                instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"])
                instance.lineTaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineTaxedDiscount"])
                instance.lineUntaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedDiscount"])
                instance.useType = LineForGoods.UseType(rawValue: (sourceDictionary["useType"] as? String) ?? "") 
                instance.processScenario = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["processScenario"])
                instance.cfop = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["cfop"])
                instance.hasStockImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasStockImpact"])
                instance.hasFinantialImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasFinantialImpact"])
                instance.freightAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["freightAmount"])
                instance.insuranceAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["insuranceAmount"])
                instance.otherCostAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["otherCostAmount"])
                instance.indTotType = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["indTotType"])
                instance.orderNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderNumber"])
                instance.orderItemNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderItemNumber"])
                instance.fciNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fciNumber"])
                instance.recopiNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recopiNumber"])
                instance.infAdProd = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["infAdProd"])
                instance.vehicle = Decoders.decodeOptional(clazz: Vehicle.self, source: sourceDictionary["vehicle"])
                instance.medicine = Decoders.decodeOptional(clazz: Medicine.self, source: sourceDictionary["medicine"])
                instance.weapon = Decoders.decodeOptional(clazz: Weapon.self, source: sourceDictionary["weapon"])
                instance.fuel = Decoders.decodeOptional(clazz: Fuel.self, source: sourceDictionary["fuel"])
                instance.entityIsIcmsSubstitute = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["entityIsIcmsSubstitute"])
                instance.isTransportIcmsWithheld = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isTransportIcmsWithheld"])
                instance.icmsTaxRelief = Decoders.decodeOptional(clazz: LineForGoodsIcmsTaxRelief.self, source: sourceDictionary["icmsTaxRelief"])
                instance.export = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["export"])
                instance.di = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["di"])
                instance.calculatedTax = Decoders.decodeOptional(clazz: LineForGoodsCalculatedTax.self, source: sourceDictionary["calculatedTax"])
                return instance
            }


            // Decoder for [LineForGoodsAdi]
            Decoders.addDecoder(clazz: [LineForGoodsAdi].self) { (source: AnyObject) -> [LineForGoodsAdi] in
                return Decoders.decode(clazz: [LineForGoodsAdi].self, source: source)
            }
            // Decoder for LineForGoodsAdi
            Decoders.addDecoder(clazz: LineForGoodsAdi.self) { (source: AnyObject) -> LineForGoodsAdi in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LineForGoodsAdi()
                instance.addNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["addNumber"])
                instance.sequentialNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sequentialNumber"])
                instance.manufacturerCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["manufacturerCode"])
                instance.adiDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["adiDiscount"])
                instance.drawbackNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["drawbackNumber"])
                return instance
            }


            // Decoder for [LineForGoodsCalculatedTax]
            Decoders.addDecoder(clazz: [LineForGoodsCalculatedTax].self) { (source: AnyObject) -> [LineForGoodsCalculatedTax] in
                return Decoders.decode(clazz: [LineForGoodsCalculatedTax].self, source: source)
            }
            // Decoder for LineForGoodsCalculatedTax
            Decoders.addDecoder(clazz: LineForGoodsCalculatedTax.self) { (source: AnyObject) -> LineForGoodsCalculatedTax in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LineForGoodsCalculatedTax()
                instance.taxByType = Decoders.decodeOptional(clazz: LineForGoodsCalculatedTaxTaxByType.self, source: sourceDictionary["taxByType"])
                instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"])
                instance.details = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["details"])
                return instance
            }


            // Decoder for [LineForGoodsCalculatedTaxTaxByType]
            Decoders.addDecoder(clazz: [LineForGoodsCalculatedTaxTaxByType].self) { (source: AnyObject) -> [LineForGoodsCalculatedTaxTaxByType] in
                return Decoders.decode(clazz: [LineForGoodsCalculatedTaxTaxByType].self, source: source)
            }
            // Decoder for LineForGoodsCalculatedTaxTaxByType
            Decoders.addDecoder(clazz: LineForGoodsCalculatedTaxTaxByType.self) { (source: AnyObject) -> LineForGoodsCalculatedTaxTaxByType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LineForGoodsCalculatedTaxTaxByType()
                instance.icms = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icms"])
                instance.icmsSt = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsSt"])
                instance.icmsStSd = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsStSd"])
                instance.icmsPartOwn = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsPartOwn"])
                instance.icmsPartDest = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsPartDest"])
                instance.icmsDifaFCP = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsDifaFCP"])
                instance.icmsDifaDest = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsDifaDest"])
                instance.icmsDifaRemet = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsDifaRemet"])
                instance.icmsRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsRf"])
                instance.icmsDeson = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsDeson"])
                instance.icmsCredsn = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["icmsCredsn"])
                instance.pis = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["pis"])
                instance.pisSt = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["pisSt"])
                instance.cofins = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["cofins"])
                instance.cofinsSt = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["cofinsSt"])
                instance.ipi = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["ipi"])
                instance.ipiReturned = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["ipiReturned"])
                instance.ii = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["ii"])
                instance.iof = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["iof"])
                instance.aproxtribState = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["aproxtribState"])
                instance.aproxtribFed = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["aproxtribFed"])
                return instance
            }


            // Decoder for [LineForGoodsDi]
            Decoders.addDecoder(clazz: [LineForGoodsDi].self) { (source: AnyObject) -> [LineForGoodsDi] in
                return Decoders.decode(clazz: [LineForGoodsDi].self, source: source)
            }
            // Decoder for LineForGoodsDi
            Decoders.addDecoder(clazz: LineForGoodsDi.self) { (source: AnyObject) -> LineForGoodsDi in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LineForGoodsDi()
                instance.customsValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["customsValue"])
                instance.diNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["diNumber"])
                instance.registerDateDI = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["registerDateDI"])
                instance.clearanceSite = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clearanceSite"])
                instance.clearanceState = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["clearanceState"])
                instance.clearanceDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["clearanceDate"])
                instance.transportDIType = LineForGoodsDi.TransportDIType(rawValue: (sourceDictionary["transportDIType"] as? String) ?? "") 
                instance.afrmmValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["afrmmValue"])
                instance.intermediateType = LineForGoodsDi.IntermediateType(rawValue: (sourceDictionary["intermediateType"] as? String) ?? "") 
                instance.buyerFederalTaxID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["buyerFederalTaxID"])
                instance.buyerState = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["buyerState"])
                instance.exporterCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["exporterCode"])
                instance.adi = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["adi"])
                return instance
            }


            // Decoder for [LineForGoodsExport]
            Decoders.addDecoder(clazz: [LineForGoodsExport].self) { (source: AnyObject) -> [LineForGoodsExport] in
                return Decoders.decode(clazz: [LineForGoodsExport].self, source: source)
            }
            // Decoder for LineForGoodsExport
            Decoders.addDecoder(clazz: LineForGoodsExport.self) { (source: AnyObject) -> LineForGoodsExport in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LineForGoodsExport()
                instance.drawbackNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["drawbackNumber"])
                instance.indExport = Decoders.decodeOptional(clazz: LineForGoodsIndExport.self, source: sourceDictionary["indExport"])
                return instance
            }


            // Decoder for [LineForGoodsIcmsTaxRelief]
            Decoders.addDecoder(clazz: [LineForGoodsIcmsTaxRelief].self) { (source: AnyObject) -> [LineForGoodsIcmsTaxRelief] in
                return Decoders.decode(clazz: [LineForGoodsIcmsTaxRelief].self, source: source)
            }
            // Decoder for LineForGoodsIcmsTaxRelief
            Decoders.addDecoder(clazz: LineForGoodsIcmsTaxRelief.self) { (source: AnyObject) -> LineForGoodsIcmsTaxRelief in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LineForGoodsIcmsTaxRelief()
                instance.reasonCode = LineForGoodsIcmsTaxRelief.ReasonCode(rawValue: (sourceDictionary["reasonCode"] as? String) ?? "") 
                instance.taxBaseDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["taxBaseDiscount"])
                instance.taxAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["taxAmount"])
                return instance
            }


            // Decoder for [LineForGoodsIndExport]
            Decoders.addDecoder(clazz: [LineForGoodsIndExport].self) { (source: AnyObject) -> [LineForGoodsIndExport] in
                return Decoders.decode(clazz: [LineForGoodsIndExport].self, source: source)
            }
            // Decoder for LineForGoodsIndExport
            Decoders.addDecoder(clazz: LineForGoodsIndExport.self) { (source: AnyObject) -> LineForGoodsIndExport in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LineForGoodsIndExport()
                instance.registerNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["registerNumber"])
                instance.accessKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accessKey"])
                instance.quantity = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["quantity"])
                return instance
            }


            // Decoder for [LineForSefazGoods]
            Decoders.addDecoder(clazz: [LineForSefazGoods].self) { (source: AnyObject) -> [LineForSefazGoods] in
                return Decoders.decode(clazz: [LineForSefazGoods].self, source: source)
            }
            // Decoder for LineForSefazGoods
            Decoders.addDecoder(clazz: LineForSefazGoods.self) { (source: AnyObject) -> LineForSefazGoods in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LineForSefazGoods()
                instance.lineCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lineCode"])
                instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"])
                instance.avalaraGoodsAndServicesType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avalaraGoodsAndServicesType"])
                instance.numberOfItems = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["numberOfItems"])
                instance.returnedPercentageAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["returnedPercentageAmount"])
                instance.lineUnitPrice = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUnitPrice"])
                instance.lineAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineAmount"])
                instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"])
                instance.lineTaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineTaxedDiscount"])
                instance.lineUntaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedDiscount"])
                instance.useType = LineForSefazGoods.UseType(rawValue: (sourceDictionary["useType"] as? String) ?? "") 
                instance.processScenario = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["processScenario"])
                instance.cfop = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["cfop"])
                instance.hasStockImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasStockImpact"])
                instance.hasFinantialImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasFinantialImpact"])
                instance.freightAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["freightAmount"])
                instance.insuranceAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["insuranceAmount"])
                instance.otherCostAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["otherCostAmount"])
                instance.indTotType = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["indTotType"])
                instance.orderNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderNumber"])
                instance.orderItemNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderItemNumber"])
                instance.fciNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fciNumber"])
                instance.recopiNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recopiNumber"])
                instance.infAdProd = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["infAdProd"])
                instance.vehicle = Decoders.decodeOptional(clazz: Vehicle.self, source: sourceDictionary["vehicle"])
                instance.medicine = Decoders.decodeOptional(clazz: Medicine.self, source: sourceDictionary["medicine"])
                instance.weapon = Decoders.decodeOptional(clazz: Weapon.self, source: sourceDictionary["weapon"])
                instance.fuel = Decoders.decodeOptional(clazz: Fuel.self, source: sourceDictionary["fuel"])
                instance.entityIsIcmsSubstitute = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["entityIsIcmsSubstitute"])
                instance.isTransportIcmsWithheld = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isTransportIcmsWithheld"])
                instance.icmsTaxRelief = Decoders.decodeOptional(clazz: LineForGoodsIcmsTaxRelief.self, source: sourceDictionary["icmsTaxRelief"])
                instance.export = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["export"])
                instance.di = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["di"])
                instance.calculatedTax = Decoders.decodeOptional(clazz: LineForGoodsCalculatedTax.self, source: sourceDictionary["calculatedTax"])
                instance.extend = Decoders.decodeOptional(clazz: AgastExtendForSefaz.self, source: sourceDictionary["extend"])
                return instance
            }


            // Decoder for [Location]
            Decoders.addDecoder(clazz: [Location].self) { (source: AnyObject) -> [Location] in
                return Decoders.decode(clazz: [Location].self, source: source)
            }
            // Decoder for Location
            Decoders.addDecoder(clazz: Location.self) { (source: AnyObject) -> Location in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Location()
                instance.street = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street"])
                instance.neighborhood = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["neighborhood"])
                instance.zipcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zipcode"])
                instance.cityCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityCode"])
                instance.cityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityName"])
                instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryCode"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"])
                instance.complement = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["complement"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.companyId = Decoders.decodeOptional(clazz: NSUUID.self, source: sourceDictionary["companyId"])
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.type = Location.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.federalTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["federalTaxId"])
                instance.stateTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateTaxId"])
                instance.secondaryStateTaxId = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["secondaryStateTaxId"])
                instance.cityTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityTaxId"])
                instance.suframa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["suframa"])
                instance.mainActivity = Location.MainActivity(rawValue: (sourceDictionary["mainActivity"] as? String) ?? "") 
                instance.nfseProcessModel = Location.NfseProcessModel(rawValue: (sourceDictionary["nfseProcessModel"] as? String) ?? "") 
                return instance
            }


            // Decoder for [LocationSecondaryStateTaxId]
            Decoders.addDecoder(clazz: [LocationSecondaryStateTaxId].self) { (source: AnyObject) -> [LocationSecondaryStateTaxId] in
                return Decoders.decode(clazz: [LocationSecondaryStateTaxId].self, source: source)
            }
            // Decoder for LocationSecondaryStateTaxId
            Decoders.addDecoder(clazz: LocationSecondaryStateTaxId.self) { (source: AnyObject) -> LocationSecondaryStateTaxId in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = LocationSecondaryStateTaxId()
                instance.stateTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateTaxId"])
                instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"])
                return instance
            }


            // Decoder for [Medicine]
            Decoders.addDecoder(clazz: [Medicine].self) { (source: AnyObject) -> [Medicine] in
                return Decoders.decode(clazz: [Medicine].self, source: source)
            }
            // Decoder for Medicine
            Decoders.addDecoder(clazz: Medicine.self) { (source: AnyObject) -> Medicine in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Medicine()
                instance.loteNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["loteNumber"])
                instance.loteQuantity = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["loteQuantity"])
                instance.manufactotyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["manufactotyDate"])
                instance.expirationDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["expirationDate"])
                instance.maxValueToEndUser = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["maxValueToEndUser"])
                return instance
            }


            // Decoder for [Message]
            Decoders.addDecoder(clazz: [Message].self) { (source: AnyObject) -> [Message] in
                return Decoders.decode(clazz: [Message].self, source: source)
            }
            // Decoder for Message
            Decoders.addDecoder(clazz: Message.self) { (source: AnyObject) -> Message in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Message()
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                return instance
            }


            // Decoder for [NRef]
            Decoders.addDecoder(clazz: [NRef].self) { (source: AnyObject) -> [NRef] in
                return Decoders.decode(clazz: [NRef].self, source: source)
            }
            // Decoder for NRef
            Decoders.addDecoder(clazz: NRef.self) { (source: AnyObject) -> NRef in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NRef()
                instance.type = NRef.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.refNFe = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["refNFe"])
                instance.refCTe = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["refCTe"])
                instance.refECF = Decoders.decodeOptional(clazz: NRefRefECF.self, source: sourceDictionary["refECF"])
                instance.refNF = Decoders.decodeOptional(clazz: NRefRefNF.self, source: sourceDictionary["refNF"])
                instance.refFarmerNF = Decoders.decodeOptional(clazz: NRefRefFarmerNF.self, source: sourceDictionary["refFarmerNF"])
                return instance
            }


            // Decoder for [NRefRefECF]
            Decoders.addDecoder(clazz: [NRefRefECF].self) { (source: AnyObject) -> [NRefRefECF] in
                return Decoders.decode(clazz: [NRefRefECF].self, source: source)
            }
            // Decoder for NRefRefECF
            Decoders.addDecoder(clazz: NRefRefECF.self) { (source: AnyObject) -> NRefRefECF in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NRefRefECF()
                instance.nECF = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nECF"])
                instance.nCOO = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nCOO"])
                instance.modECF = NRefRefECF.ModECF(rawValue: (sourceDictionary["modECF"] as? String) ?? "") 
                return instance
            }


            // Decoder for [NRefRefFarmerNF]
            Decoders.addDecoder(clazz: [NRefRefFarmerNF].self) { (source: AnyObject) -> [NRefRefFarmerNF] in
                return Decoders.decode(clazz: [NRefRefFarmerNF].self, source: source)
            }
            // Decoder for NRefRefFarmerNF
            Decoders.addDecoder(clazz: NRefRefFarmerNF.self) { (source: AnyObject) -> NRefRefFarmerNF in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NRefRefFarmerNF()
                instance.stateCd = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["stateCd"])
                instance.yymm = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["yymm"])
                instance.federalTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["federalTaxId"])
                instance.stateTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateTaxId"])
                instance.model = NRefRefFarmerNF.Model(rawValue: (sourceDictionary["model"] as? String) ?? "") 
                instance.serie = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serie"])
                instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"])
                return instance
            }


            // Decoder for [NRefRefNF]
            Decoders.addDecoder(clazz: [NRefRefNF].self) { (source: AnyObject) -> [NRefRefNF] in
                return Decoders.decode(clazz: [NRefRefNF].self, source: source)
            }
            // Decoder for NRefRefNF
            Decoders.addDecoder(clazz: NRefRefNF.self) { (source: AnyObject) -> NRefRefNF in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NRefRefNF()
                instance.stateCd = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["stateCd"])
                instance.yymm = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["yymm"])
                instance.federalTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["federalTaxId"])
                instance.serie = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serie"])
                instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"])
                return instance
            }


            // Decoder for [PayRecCalculatedTaxSummaryForService]
            Decoders.addDecoder(clazz: [PayRecCalculatedTaxSummaryForService].self) { (source: AnyObject) -> [PayRecCalculatedTaxSummaryForService] in
                return Decoders.decode(clazz: [PayRecCalculatedTaxSummaryForService].self, source: source)
            }
            // Decoder for PayRecCalculatedTaxSummaryForService
            Decoders.addDecoder(clazz: PayRecCalculatedTaxSummaryForService.self) { (source: AnyObject) -> PayRecCalculatedTaxSummaryForService in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PayRecCalculatedTaxSummaryForService()
                instance.numberOfLines = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfLines"])
                instance.subtotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotal"])
                instance.totalTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["totalTax"])
                instance.grandTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grandTotal"])
                instance.pccWithholdingModes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["pccWithholdingModes"])
                instance.taxByType = Decoders.decodeOptional(clazz: PayRecCalculatedTaxSummaryForServiceTaxByType.self, source: sourceDictionary["taxByType"])
                return instance
            }


            // Decoder for [PayRecCalculatedTaxSummaryForServiceTaxByType]
            Decoders.addDecoder(clazz: [PayRecCalculatedTaxSummaryForServiceTaxByType].self) { (source: AnyObject) -> [PayRecCalculatedTaxSummaryForServiceTaxByType] in
                return Decoders.decode(clazz: [PayRecCalculatedTaxSummaryForServiceTaxByType].self, source: source)
            }
            // Decoder for PayRecCalculatedTaxSummaryForServiceTaxByType
            Decoders.addDecoder(clazz: PayRecCalculatedTaxSummaryForServiceTaxByType.self) { (source: AnyObject) -> PayRecCalculatedTaxSummaryForServiceTaxByType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PayRecCalculatedTaxSummaryForServiceTaxByType()
                instance.issRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["issRf"])
                instance.pisRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["pisRf"])
                instance.cofinsRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["cofinsRf"])
                instance.csllRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["csllRf"])
                instance.irrf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["irrf"])
                instance.inssRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["inssRf"])
                return instance
            }


            // Decoder for [PayRecHeader]
            Decoders.addDecoder(clazz: [PayRecHeader].self) { (source: AnyObject) -> [PayRecHeader] in
                return Decoders.decode(clazz: [PayRecHeader].self, source: source)
            }
            // Decoder for PayRecHeader
            Decoders.addDecoder(clazz: PayRecHeader.self) { (source: AnyObject) -> PayRecHeader in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PayRecHeader()
                instance.accountId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountId"])
                instance.companyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyCode"])
                instance.transactionType = PayRecHeader.TransactionType(rawValue: (sourceDictionary["transactionType"] as? String) ?? "") 
                instance.documentCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentCode"])
                instance.currency = PayRecHeader.Currency(rawValue: (sourceDictionary["currency"] as? String) ?? "") 
                instance.transactionDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["transactionDate"])
                instance.taxCalculationDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["taxCalculationDate"])
                instance.vendorCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendorCode"])
                instance.paymentMode = PayRecHeader.PaymentMode(rawValue: (sourceDictionary["paymentMode"] as? String) ?? "") 
                return instance
            }


            // Decoder for [PayRecLinesIn]
            Decoders.addDecoder(clazz: [PayRecLinesIn].self) { (source: AnyObject) -> [PayRecLinesIn] in
                return Decoders.decode(clazz: [PayRecLinesIn].self, source: source)
            }
            // Decoder for PayRecLinesIn
            Decoders.addDecoder(clazz: PayRecLinesIn.self) { (source: AnyObject) -> PayRecLinesIn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PayRecLinesIn()
                instance.lineCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lineCode"])
                instance.lineType = PayRecLinesIn.LineType(rawValue: (sourceDictionary["lineType"] as? String) ?? "") 
                instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"])
                instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"])
                instance.itemDocNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDocNumber"])
                instance.lineUntaxedPenality = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedPenality"])
                instance.lineUntaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedDiscount"])
                return instance
            }


            // Decoder for [PayRecLinesOut]
            Decoders.addDecoder(clazz: [PayRecLinesOut].self) { (source: AnyObject) -> [PayRecLinesOut] in
                return Decoders.decode(clazz: [PayRecLinesOut].self, source: source)
            }
            // Decoder for PayRecLinesOut
            Decoders.addDecoder(clazz: PayRecLinesOut.self) { (source: AnyObject) -> PayRecLinesOut in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PayRecLinesOut()
                instance.lineCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lineCode"])
                instance.lineType = PayRecLinesOut.LineType(rawValue: (sourceDictionary["lineType"] as? String) ?? "") 
                instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"])
                instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"])
                instance.itemDocNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDocNumber"])
                instance.lineUntaxedPenality = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedPenality"])
                instance.lineUntaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedDiscount"])
                instance.lineAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineAmount"])
                instance.lineNetValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineNetValue"])
                instance.withholdingMode = Decoders.decodeOptional(clazz: WithholdingMode.self, source: sourceDictionary["withholdingMode"])
                instance.calculatedTax = Decoders.decodeOptional(clazz: PaymentCalculatedTax.self, source: sourceDictionary["calculatedTax"])
                return instance
            }


            // Decoder for [Payment]
            Decoders.addDecoder(clazz: [Payment].self) { (source: AnyObject) -> [Payment] in
                return Decoders.decode(clazz: [Payment].self, source: source)
            }
            // Decoder for Payment
            Decoders.addDecoder(clazz: Payment.self) { (source: AnyObject) -> Payment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Payment()
                instance.installmentsTerms = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["installmentsTerms"])
                instance.bill = Decoders.decodeOptional(clazz: PaymentBill.self, source: sourceDictionary["bill"])
                instance.installment = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["installment"])
                instance.paymentMode = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["paymentMode"])
                return instance
            }


            // Decoder for [PaymentBill]
            Decoders.addDecoder(clazz: [PaymentBill].self) { (source: AnyObject) -> [PaymentBill] in
                return Decoders.decode(clazz: [PaymentBill].self, source: source)
            }
            // Decoder for PaymentBill
            Decoders.addDecoder(clazz: PaymentBill.self) { (source: AnyObject) -> PaymentBill in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PaymentBill()
                instance.nFat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nFat"])
                instance.vOrig = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["vOrig"])
                instance.vDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["vDiscount"])
                instance.vNet = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["vNet"])
                return instance
            }


            // Decoder for [PaymentCalculatedTax]
            Decoders.addDecoder(clazz: [PaymentCalculatedTax].self) { (source: AnyObject) -> [PaymentCalculatedTax] in
                return Decoders.decode(clazz: [PaymentCalculatedTax].self, source: source)
            }
            // Decoder for PaymentCalculatedTax
            Decoders.addDecoder(clazz: PaymentCalculatedTax.self) { (source: AnyObject) -> PaymentCalculatedTax in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PaymentCalculatedTax()
                instance.taxByType = Decoders.decodeOptional(clazz: PaymentTaxByType.self, source: sourceDictionary["taxByType"])
                instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"])
                return instance
            }


            // Decoder for [PaymentInstallment]
            Decoders.addDecoder(clazz: [PaymentInstallment].self) { (source: AnyObject) -> [PaymentInstallment] in
                return Decoders.decode(clazz: [PaymentInstallment].self, source: source)
            }
            // Decoder for PaymentInstallment
            Decoders.addDecoder(clazz: PaymentInstallment.self) { (source: AnyObject) -> PaymentInstallment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PaymentInstallment()
                instance.documentNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentNumber"])
                instance.date = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["date"])
                instance.grossValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grossValue"])
                return instance
            }


            // Decoder for [PaymentLinesIn]
            Decoders.addDecoder(clazz: [PaymentLinesIn].self) { (source: AnyObject) -> [PaymentLinesIn] in
                return Decoders.decode(clazz: [PaymentLinesIn].self, source: source)
            }
            // Decoder for PaymentLinesIn
            Decoders.addDecoder(clazz: PaymentLinesIn.self) { (source: AnyObject) -> PaymentLinesIn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PaymentLinesIn()
                instance.lineCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lineCode"])
                instance.lineType = PaymentLinesIn.LineType(rawValue: (sourceDictionary["lineType"] as? String) ?? "") 
                instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"])
                instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"])
                instance.itemDocNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDocNumber"])
                instance.lineUntaxedPenality = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedPenality"])
                instance.lineUntaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedDiscount"])
                instance.lineNetValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineNetValue"])
                return instance
            }


            // Decoder for [PaymentPaymentMode]
            Decoders.addDecoder(clazz: [PaymentPaymentMode].self) { (source: AnyObject) -> [PaymentPaymentMode] in
                return Decoders.decode(clazz: [PaymentPaymentMode].self, source: source)
            }
            // Decoder for PaymentPaymentMode
            Decoders.addDecoder(clazz: PaymentPaymentMode.self) { (source: AnyObject) -> PaymentPaymentMode in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PaymentPaymentMode()
                instance.mode = PaymentPaymentMode.Mode(rawValue: (sourceDictionary["mode"] as? String) ?? "") 
                instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"])
                instance.cardTpIntegration = PaymentPaymentMode.CardTpIntegration(rawValue: (sourceDictionary["cardTpIntegration"] as? String) ?? "") 
                instance.cardCNPJ = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cardCNPJ"])
                instance.cardBrand = PaymentPaymentMode.CardBrand(rawValue: (sourceDictionary["cardBrand"] as? String) ?? "") 
                instance.cardAuthorization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cardAuthorization"])
                return instance
            }


            // Decoder for [PaymentTaxByType]
            Decoders.addDecoder(clazz: [PaymentTaxByType].self) { (source: AnyObject) -> [PaymentTaxByType] in
                return Decoders.decode(clazz: [PaymentTaxByType].self, source: source)
            }
            // Decoder for PaymentTaxByType
            Decoders.addDecoder(clazz: PaymentTaxByType.self) { (source: AnyObject) -> PaymentTaxByType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PaymentTaxByType()
                instance.irrf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["irrf"])
                instance.inssRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["inssRf"])
                instance.issRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["issRf"])
                instance.pisRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["pisRf"])
                instance.cofinsRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["cofinsRf"])
                instance.csllRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["csllRf"])
                return instance
            }


            // Decoder for [PaymentTerms]
            Decoders.addDecoder(clazz: [PaymentTerms].self) { (source: AnyObject) -> [PaymentTerms] in
                return Decoders.decode(clazz: [PaymentTerms].self, source: source)
            }
            // Decoder for PaymentTerms
            Decoders.addDecoder(clazz: PaymentTerms.self) { (source: AnyObject) -> PaymentTerms in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PaymentTerms()
                return instance
            }


            // Decoder for [PaymentTransactionIn]
            Decoders.addDecoder(clazz: [PaymentTransactionIn].self) { (source: AnyObject) -> [PaymentTransactionIn] in
                return Decoders.decode(clazz: [PaymentTransactionIn].self, source: source)
            }
            // Decoder for PaymentTransactionIn
            Decoders.addDecoder(clazz: PaymentTransactionIn.self) { (source: AnyObject) -> PaymentTransactionIn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PaymentTransactionIn()
                instance.header = Decoders.decodeOptional(clazz: PayRecHeader.self, source: sourceDictionary["header"])
                instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"])
                return instance
            }


            // Decoder for [PaymentTransactionOut]
            Decoders.addDecoder(clazz: [PaymentTransactionOut].self) { (source: AnyObject) -> [PaymentTransactionOut] in
                return Decoders.decode(clazz: [PaymentTransactionOut].self, source: source)
            }
            // Decoder for PaymentTransactionOut
            Decoders.addDecoder(clazz: PaymentTransactionOut.self) { (source: AnyObject) -> PaymentTransactionOut in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PaymentTransactionOut()
                instance.header = Decoders.decodeOptional(clazz: PayRecHeader.self, source: sourceDictionary["header"])
                instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"])
                instance.calculatedTaxSummary = Decoders.decodeOptional(clazz: PayRecCalculatedTaxSummaryForService.self, source: sourceDictionary["calculatedTaxSummary"])
                instance.processingInfo = Decoders.decodeOptional(clazz: ProcessingInfo.self, source: sourceDictionary["processingInfo"])
                return instance
            }


            // Decoder for [PccWithholdingMode]
            Decoders.addDecoder(clazz: [PccWithholdingMode].self) { (source: AnyObject) -> [PccWithholdingMode] in
                return Decoders.decode(clazz: [PccWithholdingMode].self, source: source)
            }
            // Decoder for PccWithholdingMode
            Decoders.addDecoder(clazz: PccWithholdingMode.self) { (source: AnyObject) -> PccWithholdingMode in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PccWithholdingMode()
                instance.type = PccWithholdingMode.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.totalTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["totalTax"])
                instance.pisRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["pisRf"])
                instance.cofinsRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["cofinsRf"])
                instance.csllRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["csllRf"])
                return instance
            }


            // Decoder for [PointOfOrderOrigin]
            Decoders.addDecoder(clazz: [PointOfOrderOrigin].self) { (source: AnyObject) -> [PointOfOrderOrigin] in
                return Decoders.decode(clazz: [PointOfOrderOrigin].self, source: source)
            }
            // Decoder for PointOfOrderOrigin
            Decoders.addDecoder(clazz: PointOfOrderOrigin.self) { (source: AnyObject) -> PointOfOrderOrigin in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PointOfOrderOrigin()
                instance.address = Decoders.decodeOptional(clazz: SimpleAddress.self, source: sourceDictionary["address"])
                return instance
            }


            // Decoder for [ProcessScenario]
            Decoders.addDecoder(clazz: [ProcessScenario].self) { (source: AnyObject) -> [ProcessScenario] in
                return Decoders.decode(clazz: [ProcessScenario].self, source: source)
            }
            // Decoder for ProcessScenario
            Decoders.addDecoder(clazz: ProcessScenario.self) { (source: AnyObject) -> ProcessScenario in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProcessScenario()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.stockImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stockImpact"])
                instance.financialImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["financialImpact"])
                instance.cstIPI = ProcessScenario.CstIPI(rawValue: (sourceDictionary["cstIPI"] as? String) ?? "") 
                instance.ipiLegalTaxClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipiLegalTaxClass"])
                instance.accruablePISTaxation = ProcessScenario.AccruablePISTaxation(rawValue: (sourceDictionary["accruablePISTaxation"] as? String) ?? "") 
                instance.pisExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReasonCode"])
                instance.pisExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReason"])
                instance.accruableCOFINSTaxation = ProcessScenario.AccruableCOFINSTaxation(rawValue: (sourceDictionary["accruableCOFINSTaxation"] as? String) ?? "") 
                instance.cofinsExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReasonCode"])
                instance.cofinsExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReason"])
                instance.allowIPIcreditWhenInGoing = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowIPIcreditWhenInGoing"])
                instance.icmsConf = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["icmsConf"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = ProcessScenario.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.wayType = ProcessScenario.WayType(rawValue: (sourceDictionary["wayType"] as? String) ?? "") 
                instance.goal = ProcessScenario.Goal(rawValue: (sourceDictionary["goal"] as? String) ?? "") 
                instance.overWriteCFOP = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["overWriteCFOP"])
                instance.cfops = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["cfops"])
                return instance
            }


            // Decoder for [ProcessingInfo]
            Decoders.addDecoder(clazz: [ProcessingInfo].self) { (source: AnyObject) -> [ProcessingInfo] in
                return Decoders.decode(clazz: [ProcessingInfo].self, source: source)
            }
            // Decoder for ProcessingInfo
            Decoders.addDecoder(clazz: ProcessingInfo.self) { (source: AnyObject) -> ProcessingInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProcessingInfo()
                instance.versionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["versionId"])
                instance.duration = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["duration"])
                return instance
            }


            // Decoder for [PurchaseCalculatedTax]
            Decoders.addDecoder(clazz: [PurchaseCalculatedTax].self) { (source: AnyObject) -> [PurchaseCalculatedTax] in
                return Decoders.decode(clazz: [PurchaseCalculatedTax].self, source: source)
            }
            // Decoder for PurchaseCalculatedTax
            Decoders.addDecoder(clazz: PurchaseCalculatedTax.self) { (source: AnyObject) -> PurchaseCalculatedTax in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PurchaseCalculatedTax()
                instance.taxByType = Decoders.decodeOptional(clazz: PurchaseTaxByType.self, source: sourceDictionary["taxByType"])
                instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"])
                instance.details = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["details"])
                return instance
            }


            // Decoder for [PurchaseCalculatedTaxSummaryForService]
            Decoders.addDecoder(clazz: [PurchaseCalculatedTaxSummaryForService].self) { (source: AnyObject) -> [PurchaseCalculatedTaxSummaryForService] in
                return Decoders.decode(clazz: [PurchaseCalculatedTaxSummaryForService].self, source: source)
            }
            // Decoder for PurchaseCalculatedTaxSummaryForService
            Decoders.addDecoder(clazz: PurchaseCalculatedTaxSummaryForService.self) { (source: AnyObject) -> PurchaseCalculatedTaxSummaryForService in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PurchaseCalculatedTaxSummaryForService()
                instance.numberOfLines = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfLines"])
                instance.subtotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotal"])
                instance.totalTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["totalTax"])
                instance.grandTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grandTotal"])
                instance.taxByType = Decoders.decodeOptional(clazz: PurchaseCalculatedTaxSummaryForServiceTaxByType.self, source: sourceDictionary["taxByType"])
                return instance
            }


            // Decoder for [PurchaseCalculatedTaxSummaryForServiceTaxByType]
            Decoders.addDecoder(clazz: [PurchaseCalculatedTaxSummaryForServiceTaxByType].self) { (source: AnyObject) -> [PurchaseCalculatedTaxSummaryForServiceTaxByType] in
                return Decoders.decode(clazz: [PurchaseCalculatedTaxSummaryForServiceTaxByType].self, source: source)
            }
            // Decoder for PurchaseCalculatedTaxSummaryForServiceTaxByType
            Decoders.addDecoder(clazz: PurchaseCalculatedTaxSummaryForServiceTaxByType.self) { (source: AnyObject) -> PurchaseCalculatedTaxSummaryForServiceTaxByType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PurchaseCalculatedTaxSummaryForServiceTaxByType()
                instance.issRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["issRf"])
                instance.pisRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["pisRf"])
                instance.cofinsRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["cofinsRf"])
                instance.csllRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["csllRf"])
                instance.irrf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["irrf"])
                instance.inssRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["inssRf"])
                instance.inssAr = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["inssAr"])
                instance.pis = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["pis"])
                instance.cofins = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["cofins"])
                return instance
            }


            // Decoder for [PurchaseDefaultLocations]
            Decoders.addDecoder(clazz: [PurchaseDefaultLocations].self) { (source: AnyObject) -> [PurchaseDefaultLocations] in
                return Decoders.decode(clazz: [PurchaseDefaultLocations].self, source: source)
            }
            // Decoder for PurchaseDefaultLocations
            Decoders.addDecoder(clazz: PurchaseDefaultLocations.self) { (source: AnyObject) -> PurchaseDefaultLocations in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PurchaseDefaultLocations()
                instance.pointOfOrderOrigin = Decoders.decodeOptional(clazz: PointOfOrderOrigin.self, source: sourceDictionary["PointOfOrderOrigin"])
                return instance
            }


            // Decoder for [PurchaseEntity]
            Decoders.addDecoder(clazz: [PurchaseEntity].self) { (source: AnyObject) -> [PurchaseEntity] in
                return Decoders.decode(clazz: [PurchaseEntity].self, source: source)
            }
            // Decoder for PurchaseEntity
            Decoders.addDecoder(clazz: PurchaseEntity.self) { (source: AnyObject) -> PurchaseEntity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PurchaseEntity()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = Decoders.decodeOptional(clazz: EntityType.self, source: sourceDictionary["type"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.cnpjcpf = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cnpjcpf"])
                instance.cityTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityTaxId"])
                instance.stateTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateTaxId"])
                instance.suframa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["suframa"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.taxRegime = Decoders.decodeOptional(clazz: FederalTaxRegime.self, source: sourceDictionary["taxRegime"])
                instance.hasCpom = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasCpom"])
                instance.subjectWithholdingIrrf = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["subjectWithholdingIrrf"])
                instance.inssPreviousContrib = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["inssPreviousContrib"])
                instance.inssBasisDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["inssBasisDiscount"])
                instance.issRfRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["issRfRate"])
                return instance
            }


            // Decoder for [PurchaseHeaderIn]
            Decoders.addDecoder(clazz: [PurchaseHeaderIn].self) { (source: AnyObject) -> [PurchaseHeaderIn] in
                return Decoders.decode(clazz: [PurchaseHeaderIn].self, source: source)
            }
            // Decoder for PurchaseHeaderIn
            Decoders.addDecoder(clazz: PurchaseHeaderIn.self) { (source: AnyObject) -> PurchaseHeaderIn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PurchaseHeaderIn()
                instance.accountId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountId"])
                instance.companyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyCode"])
                instance.transactionType = PurchaseHeaderIn.TransactionType(rawValue: (sourceDictionary["transactionType"] as? String) ?? "") 
                instance.documentCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentCode"])
                instance.currency = PurchaseHeaderIn.Currency(rawValue: (sourceDictionary["currency"] as? String) ?? "") 
                instance.transactionDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["transactionDate"])
                instance.taxCalculationDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["taxCalculationDate"])
                instance.companyLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyLocation"])
                instance.vendorCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendorCode"])
                instance.purchaseOrderNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purchaseOrderNumber"])
                instance.entity = Decoders.decodeOptional(clazz: PurchaseEntity.self, source: sourceDictionary["entity"])
                instance.payment = Decoders.decodeOptional(clazz: PurchaseHeaderInPayment.self, source: sourceDictionary["payment"])
                instance.taxesConfig = Decoders.decodeOptional(clazz: PurchaseTaxesConfig.self, source: sourceDictionary["taxesConfig"])
                instance.defaultLocations = Decoders.decodeOptional(clazz: PurchaseDefaultLocations.self, source: sourceDictionary["defaultLocations"])
                return instance
            }


            // Decoder for [PurchaseHeaderInPayment]
            Decoders.addDecoder(clazz: [PurchaseHeaderInPayment].self) { (source: AnyObject) -> [PurchaseHeaderInPayment] in
                return Decoders.decode(clazz: [PurchaseHeaderInPayment].self, source: source)
            }
            // Decoder for PurchaseHeaderInPayment
            Decoders.addDecoder(clazz: PurchaseHeaderInPayment.self) { (source: AnyObject) -> PurchaseHeaderInPayment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PurchaseHeaderInPayment()
                instance.terms = Decoders.decodeOptional(clazz: PaymentTerms.self, source: sourceDictionary["terms"])
                instance.installments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["installments"])
                return instance
            }


            // Decoder for [PurchaseHeaderOut]
            Decoders.addDecoder(clazz: [PurchaseHeaderOut].self) { (source: AnyObject) -> [PurchaseHeaderOut] in
                return Decoders.decode(clazz: [PurchaseHeaderOut].self, source: source)
            }
            // Decoder for PurchaseHeaderOut
            Decoders.addDecoder(clazz: PurchaseHeaderOut.self) { (source: AnyObject) -> PurchaseHeaderOut in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PurchaseHeaderOut()
                instance.accountId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountId"])
                instance.companyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyCode"])
                instance.transactionType = PurchaseHeaderOut.TransactionType(rawValue: (sourceDictionary["transactionType"] as? String) ?? "") 
                instance.documentCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentCode"])
                instance.currency = PurchaseHeaderOut.Currency(rawValue: (sourceDictionary["currency"] as? String) ?? "") 
                instance.transactionDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["transactionDate"])
                instance.taxCalculationDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["taxCalculationDate"])
                instance.companyLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyLocation"])
                instance.vendorCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vendorCode"])
                instance.purchaseOrderNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purchaseOrderNumber"])
                instance.entity = Decoders.decodeOptional(clazz: PurchaseEntity.self, source: sourceDictionary["entity"])
                instance.payment = Decoders.decodeOptional(clazz: PurchaseHeaderOutPayment.self, source: sourceDictionary["payment"])
                instance.taxesConfig = Decoders.decodeOptional(clazz: PurchaseTaxesConfig.self, source: sourceDictionary["taxesConfig"])
                instance.defaultLocations = Decoders.decodeOptional(clazz: PurchaseDefaultLocations.self, source: sourceDictionary["defaultLocations"])
                return instance
            }


            // Decoder for [PurchaseHeaderOutPayment]
            Decoders.addDecoder(clazz: [PurchaseHeaderOutPayment].self) { (source: AnyObject) -> [PurchaseHeaderOutPayment] in
                return Decoders.decode(clazz: [PurchaseHeaderOutPayment].self, source: source)
            }
            // Decoder for PurchaseHeaderOutPayment
            Decoders.addDecoder(clazz: PurchaseHeaderOutPayment.self) { (source: AnyObject) -> PurchaseHeaderOutPayment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PurchaseHeaderOutPayment()
                instance.terms = Decoders.decodeOptional(clazz: PaymentTerms.self, source: sourceDictionary["terms"])
                instance.withholdingMode = Decoders.decodeOptional(clazz: WithholdingMode.self, source: sourceDictionary["withholdingMode"])
                instance.installments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["installments"])
                return instance
            }


            // Decoder for [PurchaseInfo]
            Decoders.addDecoder(clazz: [PurchaseInfo].self) { (source: AnyObject) -> [PurchaseInfo] in
                return Decoders.decode(clazz: [PurchaseInfo].self, source: source)
            }
            // Decoder for PurchaseInfo
            Decoders.addDecoder(clazz: PurchaseInfo.self) { (source: AnyObject) -> PurchaseInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PurchaseInfo()
                instance.governmentOrder = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["governmentOrder"])
                instance.orderNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderNumber"])
                instance.contractNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contractNumber"])
                return instance
            }


            // Decoder for [PurchaseInstallmentIn]
            Decoders.addDecoder(clazz: [PurchaseInstallmentIn].self) { (source: AnyObject) -> [PurchaseInstallmentIn] in
                return Decoders.decode(clazz: [PurchaseInstallmentIn].self, source: source)
            }
            // Decoder for PurchaseInstallmentIn
            Decoders.addDecoder(clazz: PurchaseInstallmentIn.self) { (source: AnyObject) -> PurchaseInstallmentIn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PurchaseInstallmentIn()
                instance.documentNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentNumber"])
                instance.date = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["date"])
                instance.grossValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grossValue"])
                return instance
            }


            // Decoder for [PurchaseLinesIn]
            Decoders.addDecoder(clazz: [PurchaseLinesIn].self) { (source: AnyObject) -> [PurchaseLinesIn] in
                return Decoders.decode(clazz: [PurchaseLinesIn].self, source: source)
            }
            // Decoder for PurchaseLinesIn
            Decoders.addDecoder(clazz: PurchaseLinesIn.self) { (source: AnyObject) -> PurchaseLinesIn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PurchaseLinesIn()
                instance.lineCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lineCode"])
                instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"])
                instance.numberOfItems = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["numberOfItems"])
                instance.lineAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineAmount"])
                instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"])
                instance.lineTaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineTaxedDiscount"])
                instance.lineUntaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedDiscount"])
                instance.useType = PurchaseLinesIn.UseType(rawValue: (sourceDictionary["useType"] as? String) ?? "") 
                instance.taxDeductions = Decoders.decodeOptional(clazz: SalesLinesOutTaxDeductions.self, source: sourceDictionary["taxDeductions"])
                return instance
            }


            // Decoder for [PurchaseLinesOut]
            Decoders.addDecoder(clazz: [PurchaseLinesOut].self) { (source: AnyObject) -> [PurchaseLinesOut] in
                return Decoders.decode(clazz: [PurchaseLinesOut].self, source: source)
            }
            // Decoder for PurchaseLinesOut
            Decoders.addDecoder(clazz: PurchaseLinesOut.self) { (source: AnyObject) -> PurchaseLinesOut in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PurchaseLinesOut()
                instance.lineCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lineCode"])
                instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"])
                instance.numberOfItems = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["numberOfItems"])
                instance.lineAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineAmount"])
                instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"])
                instance.lineTaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineTaxedDiscount"])
                instance.lineUntaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedDiscount"])
                instance.useType = PurchaseLinesOut.UseType(rawValue: (sourceDictionary["useType"] as? String) ?? "") 
                instance.taxDeductions = Decoders.decodeOptional(clazz: SalesLinesOutTaxDeductions.self, source: sourceDictionary["taxDeductions"])
                instance.avalaraGoodsAndServicesType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avalaraGoodsAndServicesType"])
                instance.lineNetValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineNetValue"])
                instance.calculatedTax = Decoders.decodeOptional(clazz: PurchaseCalculatedTax.self, source: sourceDictionary["calculatedTax"])
                return instance
            }


            // Decoder for [PurchaseTaxByType]
            Decoders.addDecoder(clazz: [PurchaseTaxByType].self) { (source: AnyObject) -> [PurchaseTaxByType] in
                return Decoders.decode(clazz: [PurchaseTaxByType].self, source: source)
            }
            // Decoder for PurchaseTaxByType
            Decoders.addDecoder(clazz: PurchaseTaxByType.self) { (source: AnyObject) -> PurchaseTaxByType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PurchaseTaxByType()
                instance.issRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["issRf"])
                instance.pisRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["pisRf"])
                instance.cofinsRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["cofinsRf"])
                instance.csllRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["csllRf"])
                instance.irrf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["irrf"])
                instance.inssRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["inssRf"])
                instance.inssAr = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["inssAr"])
                instance.pis = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["pis"])
                instance.cofins = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["cofins"])
                return instance
            }


            // Decoder for [PurchaseTaxByTypeDetail]
            Decoders.addDecoder(clazz: [PurchaseTaxByTypeDetail].self) { (source: AnyObject) -> [PurchaseTaxByTypeDetail] in
                return Decoders.decode(clazz: [PurchaseTaxByTypeDetail].self, source: source)
            }
            // Decoder for PurchaseTaxByTypeDetail
            Decoders.addDecoder(clazz: PurchaseTaxByTypeDetail.self) { (source: AnyObject) -> PurchaseTaxByTypeDetail in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PurchaseTaxByTypeDetail()
                instance.locationType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locationType"])
                instance.jurisdictionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jurisdictionName"])
                instance.jurisdictionType = PurchaseTaxByTypeDetail.JurisdictionType(rawValue: (sourceDictionary["jurisdictionType"] as? String) ?? "") 
                instance.taxType = PurchaseTaxByTypeDetail.TaxType(rawValue: (sourceDictionary["taxType"] as? String) ?? "") 
                instance.rateType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rateType"])
                instance.scenario = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scenario"])
                instance.subtotalTaxable = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotalTaxable"])
                instance.subtotalExempt = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotalExempt"])
                instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"])
                instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"])
                instance.exemptionCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["exemptionCode"])
                instance.significantLocations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["significantLocations"])
                instance.taxRuleType = PurchaseTaxByTypeDetail.TaxRuleType(rawValue: (sourceDictionary["taxRuleType"] as? String) ?? "") 
                return instance
            }


            // Decoder for [PurchaseTaxesConfig]
            Decoders.addDecoder(clazz: [PurchaseTaxesConfig].self) { (source: AnyObject) -> [PurchaseTaxesConfig] in
                return Decoders.decode(clazz: [PurchaseTaxesConfig].self, source: source)
            }
            // Decoder for PurchaseTaxesConfig
            Decoders.addDecoder(clazz: PurchaseTaxesConfig.self) { (source: AnyObject) -> PurchaseTaxesConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PurchaseTaxesConfig()
                instance.entityAccruableCOFINSTaxation = PurchaseTaxesConfig.EntityAccruableCOFINSTaxation(rawValue: (sourceDictionary["entityAccruableCOFINSTaxation"] as? String) ?? "") 
                instance.entityAccruableCSLLTaxation = PurchaseTaxesConfig.EntityAccruableCSLLTaxation(rawValue: (sourceDictionary["entityAccruableCSLLTaxation"] as? String) ?? "") 
                instance.entityAccruablePISTaxation = PurchaseTaxesConfig.EntityAccruablePISTaxation(rawValue: (sourceDictionary["entityAccruablePISTaxation"] as? String) ?? "") 
                instance.accruableCOFINSExempCodeTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accruableCOFINSExempCodeTaxation"])
                instance.accruablePISExempCodeTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accruablePISExempCodeTaxation"])
                instance.accruablePISExemptReasonTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accruablePISExemptReasonTaxation"])
                instance.accruableCOFINSExemptReasonTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accruableCOFINSExemptReasonTaxation"])
                instance.accruableCSLLExemptReasonTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accruableCSLLExemptReasonTaxation"])
                instance.withholdingPIS = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["withholdingPIS"])
                instance.withholdingCOFINS = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["withholdingCOFINS"])
                instance.withholdingCSLL = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["withholdingCSLL"])
                instance.withholdingIRRF = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["withholdingIRRF"])
                instance.withholdCOFINSExemptReasonTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["withholdCOFINSExemptReasonTaxation"])
                instance.withholdCSLLExemptReasonTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["withholdCSLLExemptReasonTaxation"])
                instance.withholdPISExemptReasonTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["withholdPISExemptReasonTaxation"])
                return instance
            }


            // Decoder for [PurchaseTransactionIn]
            Decoders.addDecoder(clazz: [PurchaseTransactionIn].self) { (source: AnyObject) -> [PurchaseTransactionIn] in
                return Decoders.decode(clazz: [PurchaseTransactionIn].self, source: source)
            }
            // Decoder for PurchaseTransactionIn
            Decoders.addDecoder(clazz: PurchaseTransactionIn.self) { (source: AnyObject) -> PurchaseTransactionIn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PurchaseTransactionIn()
                instance.header = Decoders.decodeOptional(clazz: PurchaseHeaderIn.self, source: sourceDictionary["header"])
                instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"])
                return instance
            }


            // Decoder for [PurchaseTransactionOut]
            Decoders.addDecoder(clazz: [PurchaseTransactionOut].self) { (source: AnyObject) -> [PurchaseTransactionOut] in
                return Decoders.decode(clazz: [PurchaseTransactionOut].self, source: source)
            }
            // Decoder for PurchaseTransactionOut
            Decoders.addDecoder(clazz: PurchaseTransactionOut.self) { (source: AnyObject) -> PurchaseTransactionOut in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PurchaseTransactionOut()
                instance.header = Decoders.decodeOptional(clazz: PurchaseHeaderOut.self, source: sourceDictionary["header"])
                instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"])
                instance.calculatedTaxSummary = Decoders.decodeOptional(clazz: PurchaseCalculatedTaxSummaryForService.self, source: sourceDictionary["calculatedTaxSummary"])
                instance.processingInfo = Decoders.decodeOptional(clazz: ProcessingInfo.self, source: sourceDictionary["processingInfo"])
                return instance
            }


            // Decoder for [ReceiptTransactionIn]
            Decoders.addDecoder(clazz: [ReceiptTransactionIn].self) { (source: AnyObject) -> [ReceiptTransactionIn] in
                return Decoders.decode(clazz: [ReceiptTransactionIn].self, source: source)
            }
            // Decoder for ReceiptTransactionIn
            Decoders.addDecoder(clazz: ReceiptTransactionIn.self) { (source: AnyObject) -> ReceiptTransactionIn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ReceiptTransactionIn()
                instance.header = Decoders.decodeOptional(clazz: PayRecHeader.self, source: sourceDictionary["header"])
                instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"])
                return instance
            }


            // Decoder for [ReceiptTransactionOut]
            Decoders.addDecoder(clazz: [ReceiptTransactionOut].self) { (source: AnyObject) -> [ReceiptTransactionOut] in
                return Decoders.decode(clazz: [ReceiptTransactionOut].self, source: source)
            }
            // Decoder for ReceiptTransactionOut
            Decoders.addDecoder(clazz: ReceiptTransactionOut.self) { (source: AnyObject) -> ReceiptTransactionOut in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ReceiptTransactionOut()
                instance.header = Decoders.decodeOptional(clazz: PayRecHeader.self, source: sourceDictionary["header"])
                instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"])
                instance.calculatedTaxSummary = Decoders.decodeOptional(clazz: PayRecCalculatedTaxSummaryForService.self, source: sourceDictionary["calculatedTaxSummary"])
                instance.processingInfo = Decoders.decodeOptional(clazz: ProcessingInfo.self, source: sourceDictionary["processingInfo"])
                return instance
            }


            // Decoder for [SalesCalculatedTax]
            Decoders.addDecoder(clazz: [SalesCalculatedTax].self) { (source: AnyObject) -> [SalesCalculatedTax] in
                return Decoders.decode(clazz: [SalesCalculatedTax].self, source: source)
            }
            // Decoder for SalesCalculatedTax
            Decoders.addDecoder(clazz: SalesCalculatedTax.self) { (source: AnyObject) -> SalesCalculatedTax in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesCalculatedTax()
                instance.taxByType = Decoders.decodeOptional(clazz: SalesTaxByType.self, source: sourceDictionary["taxByType"])
                instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"])
                instance.details = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["details"])
                return instance
            }


            // Decoder for [SalesCalculatedTaxSummaryForService]
            Decoders.addDecoder(clazz: [SalesCalculatedTaxSummaryForService].self) { (source: AnyObject) -> [SalesCalculatedTaxSummaryForService] in
                return Decoders.decode(clazz: [SalesCalculatedTaxSummaryForService].self, source: source)
            }
            // Decoder for SalesCalculatedTaxSummaryForService
            Decoders.addDecoder(clazz: SalesCalculatedTaxSummaryForService.self) { (source: AnyObject) -> SalesCalculatedTaxSummaryForService in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesCalculatedTaxSummaryForService()
                instance.numberOfLines = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfLines"])
                instance.subtotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotal"])
                instance.totalTax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["totalTax"])
                instance.grandTotal = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grandTotal"])
                instance.taxByType = Decoders.decodeOptional(clazz: SalesCalculatedTaxSummaryForServiceTaxByType.self, source: sourceDictionary["taxByType"])
                return instance
            }


            // Decoder for [SalesCalculatedTaxSummaryForServiceTaxByType]
            Decoders.addDecoder(clazz: [SalesCalculatedTaxSummaryForServiceTaxByType].self) { (source: AnyObject) -> [SalesCalculatedTaxSummaryForServiceTaxByType] in
                return Decoders.decode(clazz: [SalesCalculatedTaxSummaryForServiceTaxByType].self, source: source)
            }
            // Decoder for SalesCalculatedTaxSummaryForServiceTaxByType
            Decoders.addDecoder(clazz: SalesCalculatedTaxSummaryForServiceTaxByType.self) { (source: AnyObject) -> SalesCalculatedTaxSummaryForServiceTaxByType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesCalculatedTaxSummaryForServiceTaxByType()
                instance.pisRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["pisRf"])
                instance.cofinsRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["cofinsRf"])
                instance.csllRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["csllRf"])
                instance.irrf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["irrf"])
                instance.inssRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["inssRf"])
                instance.pis = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["pis"])
                instance.cofins = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["cofins"])
                instance.csll = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["csll"])
                instance.issRf = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["issRf"])
                instance.iss = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["iss"])
                instance.aproxtribCity = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["aproxtribCity"])
                instance.aproxtribFed = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["aproxtribFed"])
                instance.irpj = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["irpj"])
                instance.inss = Decoders.decodeOptional(clazz: TaxByTypeSummaryForService.self, source: sourceDictionary["inss"])
                return instance
            }


            // Decoder for [SalesDefaultLocations]
            Decoders.addDecoder(clazz: [SalesDefaultLocations].self) { (source: AnyObject) -> [SalesDefaultLocations] in
                return Decoders.decode(clazz: [SalesDefaultLocations].self, source: source)
            }
            // Decoder for SalesDefaultLocations
            Decoders.addDecoder(clazz: SalesDefaultLocations.self) { (source: AnyObject) -> SalesDefaultLocations in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesDefaultLocations()
                instance.serviceRendered = Decoders.decodeOptional(clazz: ServiceRendered.self, source: sourceDictionary["serviceRendered"])
                return instance
            }


            // Decoder for [SalesEntity]
            Decoders.addDecoder(clazz: [SalesEntity].self) { (source: AnyObject) -> [SalesEntity] in
                return Decoders.decode(clazz: [SalesEntity].self, source: source)
            }
            // Decoder for SalesEntity
            Decoders.addDecoder(clazz: SalesEntity.self) { (source: AnyObject) -> SalesEntity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesEntity()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = Decoders.decodeOptional(clazz: EntityType.self, source: sourceDictionary["type"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.cnpjcpf = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cnpjcpf"])
                instance.cityTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityTaxId"])
                instance.stateTaxId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateTaxId"])
                instance.suframa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["suframa"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.taxRegime = Decoders.decodeOptional(clazz: FederalTaxRegime.self, source: sourceDictionary["taxRegime"])
                instance.specialTaxRegime = SalesEntity.SpecialTaxRegime(rawValue: (sourceDictionary["specialTaxRegime"] as? String) ?? "") 
                instance.subjectToSRF1234 = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["subjectToSRF1234"])
                instance.requiredWithholdingISS = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["requiredWithholdingISS"])
                instance.art = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["art"])
                instance.adminProcess = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["adminProcess"])
                instance.buildCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["buildCode"])
                return instance
            }


            // Decoder for [SalesHeaderIn]
            Decoders.addDecoder(clazz: [SalesHeaderIn].self) { (source: AnyObject) -> [SalesHeaderIn] in
                return Decoders.decode(clazz: [SalesHeaderIn].self, source: source)
            }
            // Decoder for SalesHeaderIn
            Decoders.addDecoder(clazz: SalesHeaderIn.self) { (source: AnyObject) -> SalesHeaderIn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesHeaderIn()
                instance.accountId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountId"])
                instance.companyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyCode"])
                instance.transactionType = SalesHeaderIn.TransactionType(rawValue: (sourceDictionary["transactionType"] as? String) ?? "") 
                instance.documentCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentCode"])
                instance.currency = SalesHeaderIn.Currency(rawValue: (sourceDictionary["currency"] as? String) ?? "") 
                instance.transactionDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["transactionDate"])
                instance.taxCalculationDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["taxCalculationDate"])
                instance.companyLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyLocation"])
                instance.customerCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customerCode"])
                instance.purchaseOrderNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purchaseOrderNumber"])
                instance.rpsNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["rpsNumber"])
                instance.rpsSerie = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rpsSerie"])
                instance.discriminationIn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["discriminationIn"])
                instance.entity = Decoders.decodeOptional(clazz: SalesEntity.self, source: sourceDictionary["entity"])
                instance.payment = Decoders.decodeOptional(clazz: SalesHeaderInPayment.self, source: sourceDictionary["payment"])
                instance.taxesConfig = Decoders.decodeOptional(clazz: SalesTaxesConfig.self, source: sourceDictionary["taxesConfig"])
                instance.defaultLocations = Decoders.decodeOptional(clazz: SalesDefaultLocations.self, source: sourceDictionary["defaultLocations"])
                return instance
            }


            // Decoder for [SalesHeaderInPayment]
            Decoders.addDecoder(clazz: [SalesHeaderInPayment].self) { (source: AnyObject) -> [SalesHeaderInPayment] in
                return Decoders.decode(clazz: [SalesHeaderInPayment].self, source: source)
            }
            // Decoder for SalesHeaderInPayment
            Decoders.addDecoder(clazz: SalesHeaderInPayment.self) { (source: AnyObject) -> SalesHeaderInPayment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesHeaderInPayment()
                instance.terms = Decoders.decodeOptional(clazz: PaymentTerms.self, source: sourceDictionary["terms"])
                instance.installments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["installments"])
                return instance
            }


            // Decoder for [SalesHeaderOut]
            Decoders.addDecoder(clazz: [SalesHeaderOut].self) { (source: AnyObject) -> [SalesHeaderOut] in
                return Decoders.decode(clazz: [SalesHeaderOut].self, source: source)
            }
            // Decoder for SalesHeaderOut
            Decoders.addDecoder(clazz: SalesHeaderOut.self) { (source: AnyObject) -> SalesHeaderOut in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesHeaderOut()
                instance.accountId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountId"])
                instance.companyCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyCode"])
                instance.transactionType = SalesHeaderOut.TransactionType(rawValue: (sourceDictionary["transactionType"] as? String) ?? "") 
                instance.documentCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentCode"])
                instance.currency = SalesHeaderOut.Currency(rawValue: (sourceDictionary["currency"] as? String) ?? "") 
                instance.transactionDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["transactionDate"])
                instance.taxCalculationDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["taxCalculationDate"])
                instance.companyLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyLocation"])
                instance.customerCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customerCode"])
                instance.purchaseOrderNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purchaseOrderNumber"])
                instance.rpsNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["rpsNumber"])
                instance.rpsSerie = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rpsSerie"])
                instance.discriminationIn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["discriminationIn"])
                instance.entity = Decoders.decodeOptional(clazz: SalesEntity.self, source: sourceDictionary["entity"])
                instance.payment = Decoders.decodeOptional(clazz: SalesHeaderOutPayment.self, source: sourceDictionary["payment"])
                instance.taxesConfig = Decoders.decodeOptional(clazz: SalesTaxesConfig.self, source: sourceDictionary["taxesConfig"])
                instance.defaultLocations = Decoders.decodeOptional(clazz: SalesDefaultLocations.self, source: sourceDictionary["defaultLocations"])
                instance.discriminationOut = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["discriminationOut"])
                instance.xml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["xml"])
                instance.ediSyncState = SalesHeaderOut.EdiSyncState(rawValue: (sourceDictionary["ediSyncState"] as? String) ?? "") 
                return instance
            }


            // Decoder for [SalesHeaderOutPayment]
            Decoders.addDecoder(clazz: [SalesHeaderOutPayment].self) { (source: AnyObject) -> [SalesHeaderOutPayment] in
                return Decoders.decode(clazz: [SalesHeaderOutPayment].self, source: source)
            }
            // Decoder for SalesHeaderOutPayment
            Decoders.addDecoder(clazz: SalesHeaderOutPayment.self) { (source: AnyObject) -> SalesHeaderOutPayment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesHeaderOutPayment()
                instance.terms = Decoders.decodeOptional(clazz: PaymentTerms.self, source: sourceDictionary["terms"])
                instance.withholdingMode = Decoders.decodeOptional(clazz: WithholdingMode.self, source: sourceDictionary["withholdingMode"])
                instance.installments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["installments"])
                return instance
            }


            // Decoder for [SalesInstallmentIn]
            Decoders.addDecoder(clazz: [SalesInstallmentIn].self) { (source: AnyObject) -> [SalesInstallmentIn] in
                return Decoders.decode(clazz: [SalesInstallmentIn].self, source: source)
            }
            // Decoder for SalesInstallmentIn
            Decoders.addDecoder(clazz: SalesInstallmentIn.self) { (source: AnyObject) -> SalesInstallmentIn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesInstallmentIn()
                instance.documentNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentNumber"])
                instance.date = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["date"])
                instance.grossValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grossValue"])
                return instance
            }


            // Decoder for [SalesLinesIn]
            Decoders.addDecoder(clazz: [SalesLinesIn].self) { (source: AnyObject) -> [SalesLinesIn] in
                return Decoders.decode(clazz: [SalesLinesIn].self, source: source)
            }
            // Decoder for SalesLinesIn
            Decoders.addDecoder(clazz: SalesLinesIn.self) { (source: AnyObject) -> SalesLinesIn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesLinesIn()
                instance.lineCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lineCode"])
                instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"])
                instance.numberOfItems = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["numberOfItems"])
                instance.lineAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineAmount"])
                instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"])
                instance.lineTaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineTaxedDiscount"])
                instance.lineUntaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedDiscount"])
                instance.taxDeductions = Decoders.decodeOptional(clazz: SalesLinesInTaxDeductions.self, source: sourceDictionary["taxDeductions"])
                return instance
            }


            // Decoder for [SalesLinesInTaxDeductions]
            Decoders.addDecoder(clazz: [SalesLinesInTaxDeductions].self) { (source: AnyObject) -> [SalesLinesInTaxDeductions] in
                return Decoders.decode(clazz: [SalesLinesInTaxDeductions].self, source: source)
            }
            // Decoder for SalesLinesInTaxDeductions
            Decoders.addDecoder(clazz: SalesLinesInTaxDeductions.self) { (source: AnyObject) -> SalesLinesInTaxDeductions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesLinesInTaxDeductions()
                instance.iss = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["iss"])
                return instance
            }


            // Decoder for [SalesLinesOut]
            Decoders.addDecoder(clazz: [SalesLinesOut].self) { (source: AnyObject) -> [SalesLinesOut] in
                return Decoders.decode(clazz: [SalesLinesOut].self, source: source)
            }
            // Decoder for SalesLinesOut
            Decoders.addDecoder(clazz: SalesLinesOut.self) { (source: AnyObject) -> SalesLinesOut in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesLinesOut()
                instance.lineCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lineCode"])
                instance.itemCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemCode"])
                instance.numberOfItems = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["numberOfItems"])
                instance.lineAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineAmount"])
                instance.itemDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["itemDescription"])
                instance.lineTaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineTaxedDiscount"])
                instance.lineUntaxedDiscount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineUntaxedDiscount"])
                instance.taxDeductions = Decoders.decodeOptional(clazz: SalesLinesOutTaxDeductions.self, source: sourceDictionary["taxDeductions"])
                instance.avalaraGoodsAndServicesType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avalaraGoodsAndServicesType"])
                instance.lineNetValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lineNetValue"])
                instance.cst = SalesLinesOut.Cst(rawValue: (sourceDictionary["cst"] as? String) ?? "") 
                instance.cstRf = SalesLinesOut.CstRf(rawValue: (sourceDictionary["cstRf"] as? String) ?? "") 
                instance.calculatedTax = Decoders.decodeOptional(clazz: SalesCalculatedTax.self, source: sourceDictionary["calculatedTax"])
                return instance
            }


            // Decoder for [SalesLinesOutTaxDeductions]
            Decoders.addDecoder(clazz: [SalesLinesOutTaxDeductions].self) { (source: AnyObject) -> [SalesLinesOutTaxDeductions] in
                return Decoders.decode(clazz: [SalesLinesOutTaxDeductions].self, source: source)
            }
            // Decoder for SalesLinesOutTaxDeductions
            Decoders.addDecoder(clazz: SalesLinesOutTaxDeductions.self) { (source: AnyObject) -> SalesLinesOutTaxDeductions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesLinesOutTaxDeductions()
                instance.iss = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["iss"])
                return instance
            }


            // Decoder for [SalesTaxByType]
            Decoders.addDecoder(clazz: [SalesTaxByType].self) { (source: AnyObject) -> [SalesTaxByType] in
                return Decoders.decode(clazz: [SalesTaxByType].self, source: source)
            }
            // Decoder for SalesTaxByType
            Decoders.addDecoder(clazz: SalesTaxByType.self) { (source: AnyObject) -> SalesTaxByType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesTaxByType()
                instance.pisRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["pisRf"])
                instance.cofinsRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["cofinsRf"])
                instance.csllRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["csllRf"])
                instance.irrf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["irrf"])
                instance.inssRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["inssRf"])
                instance.pis = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["pis"])
                instance.cofins = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["cofins"])
                instance.csll = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["csll"])
                instance.issRf = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["issRf"])
                instance.iss = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["iss"])
                instance.aproxtribCity = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["aproxtribCity"])
                instance.aproxtribFed = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["aproxtribFed"])
                instance.irpj = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["irpj"])
                instance.inss = Decoders.decodeOptional(clazz: TaxByTypeTax.self, source: sourceDictionary["inss"])
                return instance
            }


            // Decoder for [SalesTaxByTypeDetail]
            Decoders.addDecoder(clazz: [SalesTaxByTypeDetail].self) { (source: AnyObject) -> [SalesTaxByTypeDetail] in
                return Decoders.decode(clazz: [SalesTaxByTypeDetail].self, source: source)
            }
            // Decoder for SalesTaxByTypeDetail
            Decoders.addDecoder(clazz: SalesTaxByTypeDetail.self) { (source: AnyObject) -> SalesTaxByTypeDetail in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesTaxByTypeDetail()
                instance.locationType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locationType"])
                instance.jurisdictionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jurisdictionName"])
                instance.jurisdictionType = SalesTaxByTypeDetail.JurisdictionType(rawValue: (sourceDictionary["jurisdictionType"] as? String) ?? "") 
                instance.taxType = SalesTaxByTypeDetail.TaxType(rawValue: (sourceDictionary["taxType"] as? String) ?? "") 
                instance.rateType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rateType"])
                instance.scenario = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scenario"])
                instance.subtotalTaxable = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotalTaxable"])
                instance.subtotalExempt = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["subtotalExempt"])
                instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"])
                instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"])
                instance.exemptionCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["exemptionCode"])
                instance.significantLocations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["significantLocations"])
                instance.taxRuleType = SalesTaxByTypeDetail.TaxRuleType(rawValue: (sourceDictionary["taxRuleType"] as? String) ?? "") 
                return instance
            }


            // Decoder for [SalesTaxesConfig]
            Decoders.addDecoder(clazz: [SalesTaxesConfig].self) { (source: AnyObject) -> [SalesTaxesConfig] in
                return Decoders.decode(clazz: [SalesTaxesConfig].self, source: source)
            }
            // Decoder for SalesTaxesConfig
            Decoders.addDecoder(clazz: SalesTaxesConfig.self) { (source: AnyObject) -> SalesTaxesConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesTaxesConfig()
                instance.accruableCOFINSTaxation = SalesTaxesConfig.AccruableCOFINSTaxation(rawValue: (sourceDictionary["accruableCOFINSTaxation"] as? String) ?? "") 
                instance.accruableCSLLTaxation = SalesTaxesConfig.AccruableCSLLTaxation(rawValue: (sourceDictionary["accruableCSLLTaxation"] as? String) ?? "") 
                instance.accruablePISTaxation = SalesTaxesConfig.AccruablePISTaxation(rawValue: (sourceDictionary["accruablePISTaxation"] as? String) ?? "") 
                instance.accruableCOFINSExempCodeTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accruableCOFINSExempCodeTaxation"])
                instance.accruablePISExempCodeTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accruablePISExempCodeTaxation"])
                instance.withholdingCOFINS = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["withholdingCOFINS"])
                instance.withholdingCSLL = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["withholdingCSLL"])
                instance.withholdingIRRF = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["withholdingIRRF"])
                instance.withholdingPIS = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["withholdingPIS"])
                instance.withholdIRRFExemptReasonTaxation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["withholdIRRFExemptReasonTaxation"])
                return instance
            }


            // Decoder for [SalesTransactionIn]
            Decoders.addDecoder(clazz: [SalesTransactionIn].self) { (source: AnyObject) -> [SalesTransactionIn] in
                return Decoders.decode(clazz: [SalesTransactionIn].self, source: source)
            }
            // Decoder for SalesTransactionIn
            Decoders.addDecoder(clazz: SalesTransactionIn.self) { (source: AnyObject) -> SalesTransactionIn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesTransactionIn()
                instance.header = Decoders.decodeOptional(clazz: SalesHeaderIn.self, source: sourceDictionary["header"])
                instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"])
                return instance
            }


            // Decoder for [SalesTransactionOut]
            Decoders.addDecoder(clazz: [SalesTransactionOut].self) { (source: AnyObject) -> [SalesTransactionOut] in
                return Decoders.decode(clazz: [SalesTransactionOut].self, source: source)
            }
            // Decoder for SalesTransactionOut
            Decoders.addDecoder(clazz: SalesTransactionOut.self) { (source: AnyObject) -> SalesTransactionOut in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SalesTransactionOut()
                instance.header = Decoders.decodeOptional(clazz: SalesHeaderOut.self, source: sourceDictionary["header"])
                instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"])
                instance.calculatedTaxSummary = Decoders.decodeOptional(clazz: SalesCalculatedTaxSummaryForService.self, source: sourceDictionary["calculatedTaxSummary"])
                instance.processingInfo = Decoders.decodeOptional(clazz: ProcessingInfo.self, source: sourceDictionary["processingInfo"])
                return instance
            }


            // Decoder for [SefazDisableRangeIn]
            Decoders.addDecoder(clazz: [SefazDisableRangeIn].self) { (source: AnyObject) -> [SefazDisableRangeIn] in
                return Decoders.decode(clazz: [SefazDisableRangeIn].self, source: source)
            }
            // Decoder for SefazDisableRangeIn
            Decoders.addDecoder(clazz: SefazDisableRangeIn.self) { (source: AnyObject) -> SefazDisableRangeIn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SefazDisableRangeIn()
                instance.companyLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyLocation"])
                instance.transactionModel = SefazDisableRangeIn.TransactionModel(rawValue: (sourceDictionary["transactionModel"] as? String) ?? "") 
                instance.invoiceSerial = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["invoiceSerial"])
                instance.year = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["year"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.invoiceNumberInit = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["invoiceNumberInit"])
                instance.invoiceNumberEnd = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["invoiceNumberEnd"])
                return instance
            }


            // Decoder for [SefazInvoiceBasicStatus]
            Decoders.addDecoder(clazz: [SefazInvoiceBasicStatus].self) { (source: AnyObject) -> [SefazInvoiceBasicStatus] in
                return Decoders.decode(clazz: [SefazInvoiceBasicStatus].self, source: source)
            }
            // Decoder for SefazInvoiceBasicStatus
            Decoders.addDecoder(clazz: SefazInvoiceBasicStatus.self) { (source: AnyObject) -> SefazInvoiceBasicStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SefazInvoiceBasicStatus()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.desc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["desc"])
                return instance
            }


            // Decoder for [SefazInvoiceStatus]
            Decoders.addDecoder(clazz: [SefazInvoiceStatus].self) { (source: AnyObject) -> [SefazInvoiceStatus] in
                return Decoders.decode(clazz: [SefazInvoiceStatus].self, source: source)
            }
            // Decoder for SefazInvoiceStatus
            Decoders.addDecoder(clazz: SefazInvoiceStatus.self) { (source: AnyObject) -> SefazInvoiceStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SefazInvoiceStatus()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.desc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["desc"])
                instance._protocol = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["protocol"])
                instance.rec = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rec"])
                instance.date = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["date"])
                instance.environment = SefazInvoiceStatus.Environment(rawValue: (sourceDictionary["environment"] as? String) ?? "") 
                instance.appVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["appVersion"])
                return instance
            }


            // Decoder for [SefazItDeleteIn]
            Decoders.addDecoder(clazz: [SefazItDeleteIn].self) { (source: AnyObject) -> [SefazItDeleteIn] in
                return Decoders.decode(clazz: [SefazItDeleteIn].self, source: source)
            }
            // Decoder for SefazItDeleteIn
            Decoders.addDecoder(clazz: SefazItDeleteIn.self) { (source: AnyObject) -> SefazItDeleteIn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SefazItDeleteIn()
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                return instance
            }


            // Decoder for [SefazItGetOut]
            Decoders.addDecoder(clazz: [SefazItGetOut].self) { (source: AnyObject) -> [SefazItGetOut] in
                return Decoders.decode(clazz: [SefazItGetOut].self, source: source)
            }
            // Decoder for SefazItGetOut
            Decoders.addDecoder(clazz: SefazItGetOut.self) { (source: AnyObject) -> SefazItGetOut in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SefazItGetOut()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.xml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["xml"])
                instance.status = Decoders.decodeOptional(clazz: SefazInvoiceStatus.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [SefazItPutIn]
            Decoders.addDecoder(clazz: [SefazItPutIn].self) { (source: AnyObject) -> [SefazItPutIn] in
                return Decoders.decode(clazz: [SefazItPutIn].self, source: source)
            }
            // Decoder for SefazItPutIn
            Decoders.addDecoder(clazz: SefazItPutIn.self) { (source: AnyObject) -> SefazItPutIn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SefazItPutIn()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"])
                return instance
            }


            // Decoder for [SefazPostOut]
            Decoders.addDecoder(clazz: [SefazPostOut].self) { (source: AnyObject) -> [SefazPostOut] in
                return Decoders.decode(clazz: [SefazPostOut].self, source: source)
            }
            // Decoder for SefazPostOut
            Decoders.addDecoder(clazz: SefazPostOut.self) { (source: AnyObject) -> SefazPostOut in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SefazPostOut()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.documentCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentCode"])
                instance.status = Decoders.decodeOptional(clazz: SefazInvoiceStatus.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [ServiceItemTaxRate]
            Decoders.addDecoder(clazz: [ServiceItemTaxRate].self) { (source: AnyObject) -> [ServiceItemTaxRate] in
                return Decoders.decode(clazz: [ServiceItemTaxRate].self, source: source)
            }
            // Decoder for ServiceItemTaxRate
            Decoders.addDecoder(clazz: ServiceItemTaxRate.self) { (source: AnyObject) -> ServiceItemTaxRate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ServiceItemTaxRate()
                instance.taxType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["taxType"])
                instance.rateType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rateType"])
                instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"])
                instance.isExempt = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isExempt"])
                instance.discount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["discount"])
                instance.zone1 = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["zone1"])
                instance.zone2 = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["zone2"])
                instance.period = Decoders.decodeOptional(clazz: ServiceItemTaxRatePeriod.self, source: sourceDictionary["period"])
                instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                return instance
            }


            // Decoder for [ServiceItemTaxRatePeriod]
            Decoders.addDecoder(clazz: [ServiceItemTaxRatePeriod].self) { (source: AnyObject) -> [ServiceItemTaxRatePeriod] in
                return Decoders.decode(clazz: [ServiceItemTaxRatePeriod].self, source: source)
            }
            // Decoder for ServiceItemTaxRatePeriod
            Decoders.addDecoder(clazz: ServiceItemTaxRatePeriod.self) { (source: AnyObject) -> ServiceItemTaxRatePeriod in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ServiceItemTaxRatePeriod()
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startDate"])
                instance.expirationDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["expirationDate"])
                return instance
            }


            // Decoder for [ServiceRendered]
            Decoders.addDecoder(clazz: [ServiceRendered].self) { (source: AnyObject) -> [ServiceRendered] in
                return Decoders.decode(clazz: [ServiceRendered].self, source: source)
            }
            // Decoder for ServiceRendered
            Decoders.addDecoder(clazz: ServiceRendered.self) { (source: AnyObject) -> ServiceRendered in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ServiceRendered()
                instance.address = Decoders.decodeOptional(clazz: SimpleAddress.self, source: sourceDictionary["address"])
                return instance
            }


            // Decoder for [SimpleAddress]
            Decoders.addDecoder(clazz: [SimpleAddress].self) { (source: AnyObject) -> [SimpleAddress] in
                return Decoders.decode(clazz: [SimpleAddress].self, source: source)
            }
            // Decoder for SimpleAddress
            Decoders.addDecoder(clazz: SimpleAddress.self) { (source: AnyObject) -> SimpleAddress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SimpleAddress()
                instance.line1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["line1"])
                instance.line2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["line2"])
                instance.line3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["line3"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.zipcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zipcode"])
                instance.state = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["state"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                return instance
            }


            // Decoder for [StateEnum]
            Decoders.addDecoder(clazz: [StateEnum].self) { (source: AnyObject) -> [StateEnum] in
                return Decoders.decode(clazz: [StateEnum].self, source: source)
            }
            // Decoder for StateEnum
            Decoders.addDecoder(clazz: StateEnum.self) { (source: AnyObject) -> StateEnum in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StateEnum()
                return instance
            }


            // Decoder for [StateTransition]
            Decoders.addDecoder(clazz: [StateTransition].self) { (source: AnyObject) -> [StateTransition] in
                return Decoders.decode(clazz: [StateTransition].self, source: source)
            }
            // Decoder for StateTransition
            Decoders.addDecoder(clazz: StateTransition.self) { (source: AnyObject) -> StateTransition in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StateTransition()
                instance.type = StateTransition.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.comment = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["comment"])
                return instance
            }


            // Decoder for [TaxByTypeSummaryForGoods]
            Decoders.addDecoder(clazz: [TaxByTypeSummaryForGoods].self) { (source: AnyObject) -> [TaxByTypeSummaryForGoods] in
                return Decoders.decode(clazz: [TaxByTypeSummaryForGoods].self, source: source)
            }
            // Decoder for TaxByTypeSummaryForGoods
            Decoders.addDecoder(clazz: TaxByTypeSummaryForGoods.self) { (source: AnyObject) -> TaxByTypeSummaryForGoods in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaxByTypeSummaryForGoods()
                instance.calcbase = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["calcbase"])
                instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"])
                instance.jurisdictions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["jurisdictions"])
                return instance
            }


            // Decoder for [TaxByTypeSummaryForService]
            Decoders.addDecoder(clazz: [TaxByTypeSummaryForService].self) { (source: AnyObject) -> [TaxByTypeSummaryForService] in
                return Decoders.decode(clazz: [TaxByTypeSummaryForService].self, source: source)
            }
            // Decoder for TaxByTypeSummaryForService
            Decoders.addDecoder(clazz: TaxByTypeSummaryForService.self) { (source: AnyObject) -> TaxByTypeSummaryForService in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaxByTypeSummaryForService()
                instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"])
                instance.jurisdictions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["jurisdictions"])
                return instance
            }


            // Decoder for [TaxByTypeSummaryJurisdiction]
            Decoders.addDecoder(clazz: [TaxByTypeSummaryJurisdiction].self) { (source: AnyObject) -> [TaxByTypeSummaryJurisdiction] in
                return Decoders.decode(clazz: [TaxByTypeSummaryJurisdiction].self, source: source)
            }
            // Decoder for TaxByTypeSummaryJurisdiction
            Decoders.addDecoder(clazz: TaxByTypeSummaryJurisdiction.self) { (source: AnyObject) -> TaxByTypeSummaryJurisdiction in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaxByTypeSummaryJurisdiction()
                instance.jurisdictionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jurisdictionName"])
                instance.jurisdictionType = TaxByTypeSummaryJurisdiction.JurisdictionType(rawValue: (sourceDictionary["jurisdictionType"] as? String) ?? "") 
                instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"])
                return instance
            }


            // Decoder for [TaxByTypeSummaryJurisdictionForGoods]
            Decoders.addDecoder(clazz: [TaxByTypeSummaryJurisdictionForGoods].self) { (source: AnyObject) -> [TaxByTypeSummaryJurisdictionForGoods] in
                return Decoders.decode(clazz: [TaxByTypeSummaryJurisdictionForGoods].self, source: source)
            }
            // Decoder for TaxByTypeSummaryJurisdictionForGoods
            Decoders.addDecoder(clazz: TaxByTypeSummaryJurisdictionForGoods.self) { (source: AnyObject) -> TaxByTypeSummaryJurisdictionForGoods in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaxByTypeSummaryJurisdictionForGoods()
                instance.jurisdictionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jurisdictionName"])
                instance.jurisdictionType = TaxByTypeSummaryJurisdictionForGoods.JurisdictionType(rawValue: (sourceDictionary["jurisdictionType"] as? String) ?? "") 
                instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"])
                return instance
            }


            // Decoder for [TaxByTypeTax]
            Decoders.addDecoder(clazz: [TaxByTypeTax].self) { (source: AnyObject) -> [TaxByTypeTax] in
                return Decoders.decode(clazz: [TaxByTypeTax].self, source: source)
            }
            // Decoder for TaxByTypeTax
            Decoders.addDecoder(clazz: TaxByTypeTax.self) { (source: AnyObject) -> TaxByTypeTax in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaxByTypeTax()
                instance.tax = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tax"])
                return instance
            }


            // Decoder for [TaxConf]
            Decoders.addDecoder(clazz: [TaxConf].self) { (source: AnyObject) -> [TaxConf] in
                return Decoders.decode(clazz: [TaxConf].self, source: source)
            }
            // Decoder for TaxConf
            Decoders.addDecoder(clazz: TaxConf.self) { (source: AnyObject) -> TaxConf in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaxConf()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.stockImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stockImpact"])
                instance.financialImpact = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["financialImpact"])
                instance.cstIPI = TaxConf.CstIPI(rawValue: (sourceDictionary["cstIPI"] as? String) ?? "") 
                instance.ipiLegalTaxClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipiLegalTaxClass"])
                instance.accruablePISTaxation = TaxConf.AccruablePISTaxation(rawValue: (sourceDictionary["accruablePISTaxation"] as? String) ?? "") 
                instance.pisExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReasonCode"])
                instance.pisExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pisExemptLegalReason"])
                instance.accruableCOFINSTaxation = TaxConf.AccruableCOFINSTaxation(rawValue: (sourceDictionary["accruableCOFINSTaxation"] as? String) ?? "") 
                instance.cofinsExemptLegalReasonCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReasonCode"])
                instance.cofinsExemptLegalReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cofinsExemptLegalReason"])
                instance.allowIPIcreditWhenInGoing = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowIPIcreditWhenInGoing"])
                instance.icmsConf = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["icmsConf"])
                return instance
            }


            // Decoder for [TaxType]
            Decoders.addDecoder(clazz: [TaxType].self) { (source: AnyObject) -> [TaxType] in
                return Decoders.decode(clazz: [TaxType].self, source: source)
            }
            // Decoder for TaxType
            Decoders.addDecoder(clazz: TaxType.self) { (source: AnyObject) -> TaxType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaxType()
                return instance
            }


            // Decoder for [TaxTypeRate]
            Decoders.addDecoder(clazz: [TaxTypeRate].self) { (source: AnyObject) -> [TaxTypeRate] in
                return Decoders.decode(clazz: [TaxTypeRate].self, source: source)
            }
            // Decoder for TaxTypeRate
            Decoders.addDecoder(clazz: TaxTypeRate.self) { (source: AnyObject) -> TaxTypeRate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TaxTypeRate()
                instance.taxType = Decoders.decodeOptional(clazz: TaxType.self, source: sourceDictionary["taxType"])
                instance.taxModel = TaxTypeRate.TaxModel(rawValue: (sourceDictionary["taxModel"] as? String) ?? "") 
                instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"])
                instance.srvAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["srvAmount"])
                instance.quantityUnidBase = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["quantityUnidBase"])
                instance.specializationType = TaxTypeRate.SpecializationType(rawValue: (sourceDictionary["specializationType"] as? String) ?? "") 
                return instance
            }


            // Decoder for [TransactionForGoodsIn]
            Decoders.addDecoder(clazz: [TransactionForGoodsIn].self) { (source: AnyObject) -> [TransactionForGoodsIn] in
                return Decoders.decode(clazz: [TransactionForGoodsIn].self, source: source)
            }
            // Decoder for TransactionForGoodsIn
            Decoders.addDecoder(clazz: TransactionForGoodsIn.self) { (source: AnyObject) -> TransactionForGoodsIn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TransactionForGoodsIn()
                instance.header = Decoders.decodeOptional(clazz: HeaderForGoods.self, source: sourceDictionary["header"])
                instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"])
                return instance
            }


            // Decoder for [TransactionForGoodsOut]
            Decoders.addDecoder(clazz: [TransactionForGoodsOut].self) { (source: AnyObject) -> [TransactionForGoodsOut] in
                return Decoders.decode(clazz: [TransactionForGoodsOut].self, source: source)
            }
            // Decoder for TransactionForGoodsOut
            Decoders.addDecoder(clazz: TransactionForGoodsOut.self) { (source: AnyObject) -> TransactionForGoodsOut in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TransactionForGoodsOut()
                instance.header = Decoders.decodeOptional(clazz: HeaderForGoods.self, source: sourceDictionary["header"])
                instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"])
                instance.calculatedTaxSummary = Decoders.decodeOptional(clazz: CalculatedTaxSummaryForGoods.self, source: sourceDictionary["calculatedTaxSummary"])
                instance.processingInfo = Decoders.decodeOptional(clazz: ProcessingInfo.self, source: sourceDictionary["processingInfo"])
                return instance
            }


            // Decoder for [TransactionForSefazGoods]
            Decoders.addDecoder(clazz: [TransactionForSefazGoods].self) { (source: AnyObject) -> [TransactionForSefazGoods] in
                return Decoders.decode(clazz: [TransactionForSefazGoods].self, source: source)
            }
            // Decoder for TransactionForSefazGoods
            Decoders.addDecoder(clazz: TransactionForSefazGoods.self) { (source: AnyObject) -> TransactionForSefazGoods in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TransactionForSefazGoods()
                instance.header = Decoders.decodeOptional(clazz: HeaderForGoods.self, source: sourceDictionary["header"])
                instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"])
                instance.calculatedTaxSummary = Decoders.decodeOptional(clazz: CalculatedTaxSummaryForGoods.self, source: sourceDictionary["calculatedTaxSummary"])
                return instance
            }


            // Decoder for [TransactionForSefazGoodsList]
            Decoders.addDecoder(clazz: [TransactionForSefazGoodsList].self) { (source: AnyObject) -> [TransactionForSefazGoodsList] in
                return Decoders.decode(clazz: [TransactionForSefazGoodsList].self, source: source)
            }
            // Decoder for TransactionForSefazGoodsList
            Decoders.addDecoder(clazz: TransactionForSefazGoodsList.self) { (source: AnyObject) -> TransactionForSefazGoodsList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TransactionForSefazGoodsList()
                return instance
            }


            // Decoder for [Transport]
            Decoders.addDecoder(clazz: [Transport].self) { (source: AnyObject) -> [Transport] in
                return Decoders.decode(clazz: [Transport].self, source: source)
            }
            // Decoder for Transport
            Decoders.addDecoder(clazz: Transport.self) { (source: AnyObject) -> Transport in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Transport()
                instance.modFreight = Transport.ModFreight(rawValue: (sourceDictionary["modFreight"] as? String) ?? "") 
                instance.withholdICMSTransport = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["withholdICMSTransport"])
                instance.volumes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["volumes"])
                instance.vehicle = Decoders.decodeOptional(clazz: VehicleTransp.self, source: sourceDictionary["vehicle"])
                return instance
            }


            // Decoder for [TransportVolumes]
            Decoders.addDecoder(clazz: [TransportVolumes].self) { (source: AnyObject) -> [TransportVolumes] in
                return Decoders.decode(clazz: [TransportVolumes].self, source: source)
            }
            // Decoder for TransportVolumes
            Decoders.addDecoder(clazz: TransportVolumes.self) { (source: AnyObject) -> TransportVolumes in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TransportVolumes()
                instance.qVol = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["qVol"])
                instance.specie = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["specie"])
                instance.brand = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["brand"])
                instance.volumeNumeration = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["volumeNumeration"])
                instance.netWeight = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["netWeight"])
                instance.grossWeight = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["grossWeight"])
                instance.seal = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["seal"])
                return instance
            }


            // Decoder for [ValidationError]
            Decoders.addDecoder(clazz: [ValidationError].self) { (source: AnyObject) -> [ValidationError] in
                return Decoders.decode(clazz: [ValidationError].self, source: source)
            }
            // Decoder for ValidationError
            Decoders.addDecoder(clazz: ValidationError.self) { (source: AnyObject) -> ValidationError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ValidationError()
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.errors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["errors"])
                return instance
            }


            // Decoder for [Vehicle]
            Decoders.addDecoder(clazz: [Vehicle].self) { (source: AnyObject) -> [Vehicle] in
                return Decoders.decode(clazz: [Vehicle].self, source: source)
            }
            // Decoder for Vehicle
            Decoders.addDecoder(clazz: Vehicle.self) { (source: AnyObject) -> Vehicle in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Vehicle()
                instance.tpOp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["tpOp"])
                instance.chassisNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["chassisNumber"])
                instance.colorCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["colorCode"])
                instance.colorName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["colorName"])
                instance.cvPower = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cvPower"])
                instance.cylinderVolumCC = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cylinderVolumCC"])
                instance.netWeight = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["netWeight"])
                instance.grossWeight = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["grossWeight"])
                instance.serialNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serialNumber"])
                instance.fuelType = Vehicle.FuelType(rawValue: (sourceDictionary["fuelType"] as? String) ?? "") 
                instance.engineNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["engineNumber"])
                instance.cmt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cmt"])
                instance.lengthBetweenAxis = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lengthBetweenAxis"])
                instance.modelYear = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modelYear"])
                instance.manufactoryYear = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["manufactoryYear"])
                instance.paintType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["paintType"])
                instance.vehicleRENAVAMType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vehicleRENAVAMType"])
                instance.specieRENAVAMType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["specieRENAVAMType"])
                instance.modelRENAVAMCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modelRENAVAMCode"])
                instance.colorDENATRANCode = Vehicle.ColorDENATRANCode(rawValue: (sourceDictionary["colorDENATRANCode"] as? String) ?? "") 
                instance.vin = Vehicle.Vin(rawValue: (sourceDictionary["vin"] as? String) ?? "") 
                instance.vehicleManufactoryStatus = Vehicle.VehicleManufactoryStatus(rawValue: (sourceDictionary["vehicleManufactoryStatus"] as? String) ?? "") 
                instance.maxOccupantsQuantity = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["maxOccupantsQuantity"])
                instance.restrictionType = Vehicle.RestrictionType(rawValue: (sourceDictionary["restrictionType"] as? String) ?? "") 
                return instance
            }


            // Decoder for [VehicleID]
            Decoders.addDecoder(clazz: [VehicleID].self) { (source: AnyObject) -> [VehicleID] in
                return Decoders.decode(clazz: [VehicleID].self, source: source)
            }
            // Decoder for VehicleID
            Decoders.addDecoder(clazz: VehicleID.self) { (source: AnyObject) -> VehicleID in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VehicleID()
                instance.licensePlate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["licensePlate"])
                instance.stateCode = Decoders.decodeOptional(clazz: StateEnum.self, source: sourceDictionary["stateCode"])
                instance.rtnc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rtnc"])
                return instance
            }


            // Decoder for [VehicleTransp]
            Decoders.addDecoder(clazz: [VehicleTransp].self) { (source: AnyObject) -> [VehicleTransp] in
                return Decoders.decode(clazz: [VehicleTransp].self, source: source)
            }
            // Decoder for VehicleTransp
            Decoders.addDecoder(clazz: VehicleTransp.self) { (source: AnyObject) -> VehicleTransp in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VehicleTransp()
                instance.type = VehicleTransp.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.automobile = Decoders.decodeOptional(clazz: VehicleID.self, source: sourceDictionary["automobile"])
                instance.trailer = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["trailer"])
                instance.wagon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wagon"])
                instance.ferry = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ferry"])
                return instance
            }


            // Decoder for [Weapon]
            Decoders.addDecoder(clazz: [Weapon].self) { (source: AnyObject) -> [Weapon] in
                return Decoders.decode(clazz: [Weapon].self, source: source)
            }
            // Decoder for Weapon
            Decoders.addDecoder(clazz: Weapon.self) { (source: AnyObject) -> Weapon in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Weapon()
                instance.weaponRestrictionType = Weapon.WeaponRestrictionType(rawValue: (sourceDictionary["weaponRestrictionType"] as? String) ?? "") 
                instance.serieNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serieNumber"])
                instance.gunBarrelSerieNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gunBarrelSerieNumber"])
                instance.weaponDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["weaponDescription"])
                return instance
            }


            // Decoder for [WithholdingMode]
            Decoders.addDecoder(clazz: [WithholdingMode].self) { (source: AnyObject) -> [WithholdingMode] in
                return Decoders.decode(clazz: [WithholdingMode].self, source: source)
            }
            // Decoder for WithholdingMode
            Decoders.addDecoder(clazz: WithholdingMode.self) { (source: AnyObject) -> WithholdingMode in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = WithholdingMode()
                return instance
            }
        }
    }
}
