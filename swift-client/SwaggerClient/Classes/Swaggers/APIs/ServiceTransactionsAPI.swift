//
// ServiceTransactionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ServiceTransactionsAPI: APIBase {
    /**
     * enum for parameter transactionType
     */
    public enum TransactionType_transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet: String { 
        case Sale = "sale"
        case Purchase = "purchase"
        case Receipt = "receipt"
        case Payment = "payment"
    }

    /**
     Retrieve transactions
     
     - parameter accountId: (path) Account ID 
     - parameter companyCode: (path) Company Code 
     - parameter transactionType: (path) Transaction Type (sale, purchase, receipts or payment) 
     - parameter documentCode: (path) Document Code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet(accountId accountId: NSUUID, companyCode: String, transactionType: TransactionType_transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet, documentCode: String, completion: ((error: ErrorType?) -> Void)) {
        transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithRequestBuilder(accountId: accountId, companyCode: companyCode, transactionType: transactionType, documentCode: documentCode).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Retrieve transactions
     - GET /transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}
     - Retrieve a single transaction
     
     - parameter accountId: (path) Account ID 
     - parameter companyCode: (path) Company Code 
     - parameter transactionType: (path) Transaction Type (sale, purchase, receipts or payment) 
     - parameter documentCode: (path) Document Code 

     - returns: RequestBuilder<Void> 
     */
    public class func transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGetWithRequestBuilder(accountId accountId: NSUUID, companyCode: String, transactionType: TransactionType_transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeGet, documentCode: String) -> RequestBuilder<Void> {
        var path = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}"
        path = path.stringByReplacingOccurrencesOfString("{accountId}", withString: "\(accountId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{companyCode}", withString: "\(companyCode)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{transactionType}", withString: "\(transactionType.rawValue)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{documentCode}", withString: "\(documentCode)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     * enum for parameter transactionType
     */
    public enum TransactionType_transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost: String { 
        case Sale = "sale"
        case Purchase = "purchase"
        case Receipt = "receipt"
        case Payment = "payment"
    }

    /**
     Transaction State Transition
     
     - parameter accountId: (path) Account ID 
     - parameter companyCode: (path) Company Code 
     - parameter transactionType: (path) Transaction Type (sale, purchase, receipts or payment) 
     - parameter documentCode: (path) Document Code 
     - parameter body: (body) Transaction Message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost(accountId accountId: NSUUID, companyCode: String, transactionType: TransactionType_transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost, documentCode: String, body: StateTransition, completion: ((error: ErrorType?) -> Void)) {
        transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostWithRequestBuilder(accountId: accountId, companyCode: companyCode, transactionType: transactionType, documentCode: documentCode, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Transaction State Transition
     - POST /transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/stateTransitions
     - Transaction State Transition Voided  Send this event to a Recorded tax transaction record to mark it as voided.  Recorded -> Voided UnVoided  Send this event to a Voided tax transaction record to mark it as recorded.  Voided -> Recorded Reconciled  Send this event to a Recorded tax transaction record to indicate that it has been reconciled with client systems and to prevent it from being edited prior to filing. This is useful when a transaction will be filed and you do not want it to change again to facilitate auditing and reconciliation. Recorded -> Reconciled UnReconciled  Send this event to a Reconciled tax transaction record to indicate that it has not been reconciled and may need to be edited. This is useful when a Tax transaction was erroniously put into the reconciled state.  Reconciled -> Recorded Filed Send this event to a Reconciled transaction to indicate that it has been part of a tax filing by the client system. Reconciled -> Filed UnFiled Send this event to a Filed transaction to indicate that it has NOT been part of a tax filing by the client system.  Filed -> Reconciled FiledByAvalara  This event can only be sent by Avalara Systems. Reconciled -> FiledByAvalara 
     
     - parameter accountId: (path) Account ID 
     - parameter companyCode: (path) Company Code 
     - parameter transactionType: (path) Transaction Type (sale, purchase, receipts or payment) 
     - parameter documentCode: (path) Document Code 
     - parameter body: (body) Transaction Message 

     - returns: RequestBuilder<Void> 
     */
    public class func transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPostWithRequestBuilder(accountId accountId: NSUUID, companyCode: String, transactionType: TransactionType_transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeDocumentCodeStateTransitionsPost, documentCode: String, body: StateTransition) -> RequestBuilder<Void> {
        var path = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}/{documentCode}/stateTransitions"
        path = path.stringByReplacingOccurrencesOfString("{accountId}", withString: "\(accountId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{companyCode}", withString: "\(companyCode)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{transactionType}", withString: "\(transactionType.rawValue)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{documentCode}", withString: "\(documentCode)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     * enum for parameter transactionType
     */
    public enum TransactionType_transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet: String { 
        case Sale = "sale"
        case Purchase = "purchase"
        case Receipt = "receipt"
        case Payment = "payment"
    }

    /**
     Retrieve transactions
     
     - parameter accountId: (path) Account ID 
     - parameter companyCode: (path) Company Code 
     - parameter transactionType: (path) Transaction Type (sale, purchase, receipts or payment) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet(accountId accountId: NSUUID, companyCode: String, transactionType: TransactionType_transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet, completion: ((error: ErrorType?) -> Void)) {
        transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithRequestBuilder(accountId: accountId, companyCode: companyCode, transactionType: transactionType).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Retrieve transactions
     - GET /transactions/account/{accountId}/company/{companyCode}/{transactionType}
     - Retrieve a list of transactions
     
     - parameter accountId: (path) Account ID 
     - parameter companyCode: (path) Company Code 
     - parameter transactionType: (path) Transaction Type (sale, purchase, receipts or payment) 

     - returns: RequestBuilder<Void> 
     */
    public class func transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGetWithRequestBuilder(accountId accountId: NSUUID, companyCode: String, transactionType: TransactionType_transactionsAccountAccountIdCompanyCompanyCodeTransactionTypeGet) -> RequestBuilder<Void> {
        var path = "/transactions/account/{accountId}/company/{companyCode}/{transactionType}"
        path = path.stringByReplacingOccurrencesOfString("{accountId}", withString: "\(accountId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{companyCode}", withString: "\(companyCode)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{transactionType}", withString: "\(transactionType.rawValue)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Calculation Method
     
     - parameter body: (body) Transaction Message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func transactionsservicePaymentPost(body body: PaymentTransactionIn, completion: ((data: PaymentTransactionOut?, error: ErrorType?) -> Void)) {
        transactionsservicePaymentPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Calculation Method
     - POST /transactions?service-payment
     - Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     - examples: [{contentType=application/json, example={
  "processingInfo" : {
    "duration" : 1.3579000000000001069366817318950779736042022705078125,
    "versionId" : "aeiou"
  },
  "header" : {
    "companyCode" : "aeiou",
    "transactionType" : "aeiou",
    "documentCode" : "aeiou",
    "accountId" : "aeiou",
    "paymentMode" : "aeiou",
    "currency" : "aeiou",
    "taxCalculationDate" : "2000-01-23",
    "transactionDate" : "2000-01-23",
    "vendorCode" : "aeiou"
  },
  "lines" : [ "" ],
  "calculatedTaxSummary" : {
    "totalTax" : 1.3579000000000001069366817318950779736042022705078125,
    "numberOfLines" : 123,
    "grandTotal" : 1.3579000000000001069366817318950779736042022705078125,
    "subtotal" : 1.3579000000000001069366817318950779736042022705078125,
    "pccWithholdingModes" : [ {
      "totalTax" : 1.3579000000000001069366817318950779736042022705078125,
      "csllRf" : "",
      "pisRf" : {
        "tax" : 1.3579000000000001069366817318950779736042022705078125
      },
      "cofinsRf" : "",
      "type" : "aeiou"
    } ],
    "taxByType" : {
      "issRf" : {
        "tax" : 1.3579000000000001069366817318950779736042022705078125,
        "jurisdictions" : [ {
          "jurisdictionType" : "aeiou",
          "jurisdictionName" : "aeiou",
          "tax" : 1.3579000000000001069366817318950779736042022705078125
        } ]
      },
      "csllRf" : "",
      "pisRf" : "",
      "cofinsRf" : "",
      "inssRf" : "",
      "irrf" : ""
    }
  }
}}]
     
     - parameter body: (body) Transaction Message 

     - returns: RequestBuilder<PaymentTransactionOut> 
     */
    public class func transactionsservicePaymentPostWithRequestBuilder(body body: PaymentTransactionIn) -> RequestBuilder<PaymentTransactionOut> {
        let path = "/transactions?service-payment"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PaymentTransactionOut>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Calculation Method
     
     - parameter body: (body) Transaction Message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func transactionsservicePurchasePost(body body: PurchaseTransactionIn, completion: ((data: PurchaseTransactionOut?, error: ErrorType?) -> Void)) {
        transactionsservicePurchasePostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Calculation Method
     - POST /transactions?service-purchase
     - Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     - examples: [{contentType=application/json, example={
  "processingInfo" : {
    "duration" : 1.3579000000000001069366817318950779736042022705078125,
    "versionId" : "aeiou"
  },
  "header" : "",
  "lines" : [ "" ],
  "calculatedTaxSummary" : {
    "totalTax" : 1.3579000000000001069366817318950779736042022705078125,
    "numberOfLines" : 123,
    "grandTotal" : 1.3579000000000001069366817318950779736042022705078125,
    "subtotal" : 1.3579000000000001069366817318950779736042022705078125,
    "taxByType" : {
      "issRf" : {
        "tax" : 1.3579000000000001069366817318950779736042022705078125,
        "jurisdictions" : [ {
          "jurisdictionType" : "aeiou",
          "jurisdictionName" : "aeiou",
          "tax" : 1.3579000000000001069366817318950779736042022705078125
        } ]
      },
      "csllRf" : "",
      "pisRf" : "",
      "inssAr" : "",
      "cofinsRf" : "",
      "inssRf" : "",
      "pis" : "",
      "irrf" : "",
      "cofins" : ""
    }
  }
}}]
     
     - parameter body: (body) Transaction Message 

     - returns: RequestBuilder<PurchaseTransactionOut> 
     */
    public class func transactionsservicePurchasePostWithRequestBuilder(body body: PurchaseTransactionIn) -> RequestBuilder<PurchaseTransactionOut> {
        let path = "/transactions?service-purchase"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<PurchaseTransactionOut>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Calculation Method
     
     - parameter body: (body) Transaction Message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func transactionsserviceReceiptPost(body body: ReceiptTransactionIn, completion: ((data: ReceiptTransactionOut?, error: ErrorType?) -> Void)) {
        transactionsserviceReceiptPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Calculation Method
     - POST /transactions?service-receipt
     - Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     - examples: [{contentType=application/json, example={
  "processingInfo" : {
    "duration" : 1.3579000000000001069366817318950779736042022705078125,
    "versionId" : "aeiou"
  },
  "header" : {
    "companyCode" : "aeiou",
    "transactionType" : "aeiou",
    "documentCode" : "aeiou",
    "accountId" : "aeiou",
    "paymentMode" : "aeiou",
    "currency" : "aeiou",
    "taxCalculationDate" : "2000-01-23",
    "transactionDate" : "2000-01-23",
    "vendorCode" : "aeiou"
  },
  "lines" : [ "" ],
  "calculatedTaxSummary" : {
    "totalTax" : 1.3579000000000001069366817318950779736042022705078125,
    "numberOfLines" : 123,
    "grandTotal" : 1.3579000000000001069366817318950779736042022705078125,
    "subtotal" : 1.3579000000000001069366817318950779736042022705078125,
    "pccWithholdingModes" : [ {
      "totalTax" : 1.3579000000000001069366817318950779736042022705078125,
      "csllRf" : "",
      "pisRf" : {
        "tax" : 1.3579000000000001069366817318950779736042022705078125
      },
      "cofinsRf" : "",
      "type" : "aeiou"
    } ],
    "taxByType" : {
      "issRf" : {
        "tax" : 1.3579000000000001069366817318950779736042022705078125,
        "jurisdictions" : [ {
          "jurisdictionType" : "aeiou",
          "jurisdictionName" : "aeiou",
          "tax" : 1.3579000000000001069366817318950779736042022705078125
        } ]
      },
      "csllRf" : "",
      "pisRf" : "",
      "cofinsRf" : "",
      "inssRf" : "",
      "irrf" : ""
    }
  }
}}]
     
     - parameter body: (body) Transaction Message 

     - returns: RequestBuilder<ReceiptTransactionOut> 
     */
    public class func transactionsserviceReceiptPostWithRequestBuilder(body body: ReceiptTransactionIn) -> RequestBuilder<ReceiptTransactionOut> {
        let path = "/transactions?service-receipt"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ReceiptTransactionOut>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Calculation Method
     
     - parameter body: (body) Transaction Message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func transactionsserviceSalesPost(body body: SalesTransactionIn, completion: ((data: SalesTransactionOut?, error: ErrorType?) -> Void)) {
        transactionsserviceSalesPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Calculation Method
     - POST /transactions?service-sales
     - Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.
     - examples: [{contentType=application/json, example={
  "processingInfo" : {
    "duration" : 1.3579000000000001069366817318950779736042022705078125,
    "versionId" : "aeiou"
  },
  "header" : "",
  "lines" : [ "" ],
  "calculatedTaxSummary" : {
    "totalTax" : 1.3579000000000001069366817318950779736042022705078125,
    "numberOfLines" : 123,
    "grandTotal" : 1.3579000000000001069366817318950779736042022705078125,
    "subtotal" : 1.3579000000000001069366817318950779736042022705078125,
    "taxByType" : {
      "issRf" : "",
      "iss" : "",
      "inssRf" : "",
      "irrf" : "",
      "aproxtribCity" : "",
      "cofins" : "",
      "irpj" : "",
      "csllRf" : "",
      "inss" : "",
      "pisRf" : {
        "tax" : 1.3579000000000001069366817318950779736042022705078125,
        "jurisdictions" : [ {
          "jurisdictionType" : "aeiou",
          "jurisdictionName" : "aeiou",
          "tax" : 1.3579000000000001069366817318950779736042022705078125
        } ]
      },
      "cofinsRf" : "",
      "aproxtribFed" : "",
      "pis" : "",
      "csll" : ""
    }
  }
}}]
     
     - parameter body: (body) Transaction Message 

     - returns: RequestBuilder<SalesTransactionOut> 
     */
    public class func transactionsserviceSalesPostWithRequestBuilder(body body: SalesTransactionIn) -> RequestBuilder<SalesTransactionOut> {
        let path = "/transactions?service-sales"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SalesTransactionOut>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
