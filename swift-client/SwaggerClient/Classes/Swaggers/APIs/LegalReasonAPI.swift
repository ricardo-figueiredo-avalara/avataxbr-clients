//
// LegalReasonAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class LegalReasonAPI: APIBase {
    /**
     Create Legal Reason.
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createReason_(body body: LegalReason, completion: ((data: InlineResponse201?, error: ErrorType?) -> Void)) {
        createReason_WithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create Legal Reason.
     - POST /taxconf/legal-reason
     - examples: [{contentType=application/json, example={
  "id" : 123
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<InlineResponse201> 
     */
    public class func createReason_WithRequestBuilder(body body: LegalReason) -> RequestBuilder<InlineResponse201> {
        let path = "/taxconf/legal-reason"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse201>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a Legal Reason entry.
     
     - parameter uuid: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteReason_(uuid uuid: String, completion: ((error: ErrorType?) -> Void)) {
        deleteReason_WithRequestBuilder(uuid: uuid).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a Legal Reason entry.
     - DELETE /taxconf/legal-reason/{uuid}
     
     - parameter uuid: (path)  

     - returns: RequestBuilder<Void> 
     */
    public class func deleteReason_WithRequestBuilder(uuid uuid: String) -> RequestBuilder<Void> {
        var path = "/taxconf/legal-reason/{uuid}"
        path = path.stringByReplacingOccurrencesOfString("{uuid}", withString: "\(uuid)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get single Legal Reason.
     
     - parameter uuid: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getReason_(uuid uuid: String, completion: ((data: ProcessScenario?, error: ErrorType?) -> Void)) {
        getReason_WithRequestBuilder(uuid: uuid).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get single Legal Reason.
     - GET /taxconf/legal-reason/{uuid}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter uuid: (path)  

     - returns: RequestBuilder<ProcessScenario> 
     */
    public class func getReason_WithRequestBuilder(uuid uuid: String) -> RequestBuilder<ProcessScenario> {
        var path = "/taxconf/legal-reason/{uuid}"
        path = path.stringByReplacingOccurrencesOfString("{uuid}", withString: "\(uuid)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ProcessScenario>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List Legal Reasons.
     
     - parameter companyId: (query) Filters by company domain entries. Provide \&quot;global\&quot; to retrive only \&quot;global\&quot; entries. CompanyId searches also match global entries.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listReason(companyId companyId: String? = nil, completion: ((data: [LegalReason]?, error: ErrorType?) -> Void)) {
        listReasonWithRequestBuilder(companyId: companyId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List Legal Reasons.
     - GET /taxconf/legal-reason
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - responseHeaders: [X-Pagination-Current-Page(Double), X-Pagination-Limit(Double), X-Pagination-Total-Pages(Double), X-Pagination-Total-Count(Double)]
     - examples: [{contentType=application/json, example=[ {
  "taxScope" : {
    "jurisdictionType" : "aeiou",
    "specializedTaxType" : "aeiou",
    "taxType" : "aeiou",
    "jurisdictionIbgeCode" : "aeiou"
  },
  "disable" : true,
  "scope" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "legalCode" : "aeiou",
  "id" : "aeiou",
  "showInInvoice" : "aeiou",
  "referencedProcesses" : [ {
    "nProc" : "aeiou",
    "indProc" : "aeiou"
  } ]
} ]}]
     
     - parameter companyId: (query) Filters by company domain entries. Provide \&quot;global\&quot; to retrive only \&quot;global\&quot; entries. CompanyId searches also match global entries.  (optional)

     - returns: RequestBuilder<[LegalReason]> 
     */
    public class func listReasonWithRequestBuilder(companyId companyId: String? = nil) -> RequestBuilder<[LegalReason]> {
        let path = "/taxconf/legal-reason"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "companyId": companyId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[LegalReason]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update Legal Reason.
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateReason_(body body: LegalReason, completion: ((error: ErrorType?) -> Void)) {
        updateReason_WithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update Legal Reason.
     - PUT /taxconf/legal-reason
     
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    public class func updateReason_WithRequestBuilder(body body: LegalReason) -> RequestBuilder<Void> {
        let path = "/taxconf/legal-reason"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
