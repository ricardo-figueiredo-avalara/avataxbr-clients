//
// CompanyFilesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class CompanyFilesAPI: APIBase {
    /**

     - parameter companyId: (path) Company ID 
     - parameter companyId2: (path) Company ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func companiesCompanyIdNfseCertificateDelete(companyId companyId: NSUUID, companyId2: NSUUID, completion: ((error: ErrorType?) -> Void)) {
        companiesCompanyIdNfseCertificateDeleteWithRequestBuilder(companyId: companyId, companyId2: companyId2).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - DELETE /companies/{companyId}/nfse-certificate
     - Deletes a company file store.  
     
     - parameter companyId: (path) Company ID 
     - parameter companyId2: (path) Company ID 

     - returns: RequestBuilder<Void> 
     */
    public class func companiesCompanyIdNfseCertificateDeleteWithRequestBuilder(companyId companyId: NSUUID, companyId2: NSUUID) -> RequestBuilder<Void> {
        var path = "/companies/{companyId}/nfse-certificate"
        path = path.stringByReplacingOccurrencesOfString("{companyId}", withString: "\(companyId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{companyId}", withString: "\(companyId2)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter companyId: (path) Company ID 
     - parameter companyId2: (path) Company ID 
     - parameter peek: (query) Use this parameter to check the existence of the file without downloading it. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func companiesCompanyIdNfseCertificateGet(companyId companyId: NSUUID, companyId2: NSUUID, peek: Double? = nil, completion: ((error: ErrorType?) -> Void)) {
        companiesCompanyIdNfseCertificateGetWithRequestBuilder(companyId: companyId, companyId2: companyId2, peek: peek).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - GET /companies/{companyId}/nfse-certificate
     - Gets an existing NFSe certificate file for this company. 
     
     - parameter companyId: (path) Company ID 
     - parameter companyId2: (path) Company ID 
     - parameter peek: (query) Use this parameter to check the existence of the file without downloading it. (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func companiesCompanyIdNfseCertificateGetWithRequestBuilder(companyId companyId: NSUUID, companyId2: NSUUID, peek: Double? = nil) -> RequestBuilder<Void> {
        var path = "/companies/{companyId}/nfse-certificate"
        path = path.stringByReplacingOccurrencesOfString("{companyId}", withString: "\(companyId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{companyId}", withString: "\(companyId2)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "peek": peek
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter companyId: (path) Company ID 
     - parameter body: (body) Content 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func companiesCompanyIdNfseCertificatePost(companyId companyId: NSUUID, body: Body3, completion: ((data: InlineResponse2002?, error: ErrorType?) -> Void)) {
        companiesCompanyIdNfseCertificatePostWithRequestBuilder(companyId: companyId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /companies/{companyId}/nfse-certificate
     - If it still not exists, uploads a new NFSe Certificate file for this company. Send the file as a base64 string. 
     - examples: [{contentType=application/json, example={
  "companyId" : "aeiou"
}}]
     
     - parameter companyId: (path) Company ID 
     - parameter body: (body) Content 

     - returns: RequestBuilder<InlineResponse2002> 
     */
    public class func companiesCompanyIdNfseCertificatePostWithRequestBuilder(companyId companyId: NSUUID, body: Body3) -> RequestBuilder<InlineResponse2002> {
        var path = "/companies/{companyId}/nfse-certificate"
        path = path.stringByReplacingOccurrencesOfString("{companyId}", withString: "\(companyId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter companyId: (path) Company ID 
     - parameter companyId2: (path) Company ID 
     - parameter body: (body) Content 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func companiesCompanyIdNfseCertificatePut(companyId companyId: NSUUID, companyId2: NSUUID, body: Body2, completion: ((data: InlineResponse2002?, error: ErrorType?) -> Void)) {
        companiesCompanyIdNfseCertificatePutWithRequestBuilder(companyId: companyId, companyId2: companyId2, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PUT /companies/{companyId}/nfse-certificate
     - Updates an existing NFSe certificate file for this company. Send the file as a base64 string. 
     - examples: [{contentType=application/json, example={
  "companyId" : "aeiou"
}}]
     
     - parameter companyId: (path) Company ID 
     - parameter companyId2: (path) Company ID 
     - parameter body: (body) Content 

     - returns: RequestBuilder<InlineResponse2002> 
     */
    public class func companiesCompanyIdNfseCertificatePutWithRequestBuilder(companyId companyId: NSUUID, companyId2: NSUUID, body: Body2) -> RequestBuilder<InlineResponse2002> {
        var path = "/companies/{companyId}/nfse-certificate"
        path = path.stringByReplacingOccurrencesOfString("{companyId}", withString: "\(companyId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{companyId}", withString: "\(companyId2)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
