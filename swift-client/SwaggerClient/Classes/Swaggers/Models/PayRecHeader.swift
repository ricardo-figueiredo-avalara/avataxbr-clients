//
// PayRecHeader.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class PayRecHeader: JSONEncodable {
    public enum TransactionType: String { 
        case Sale = "Sale"
        case Purchase = "Purchase"
        case Payment = "Payment"
        case Receipt = "Receipt"
    }
    public enum Currency: String { 
        case Brl = "BRL"
    }
    public enum PaymentMode: String { 
        case Calculate = "CALCULATE"
        case Asis = "ASIS"
    }
    /** This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode on the next line. */
    public var accountId: String?
    /** This string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company */
    public var companyCode: String?
    /** This string indicates the type of transaction for which tax should be calculated. - &#39;Sale&#39; - &#39;Purchase&#39; - &#39;Payment&#39; - &#39;Receipt&#39;  */
    public var transactionType: TransactionType?
    /** This string is a code maintained by the client application to uniquely identify a document in the client&#39;s systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc. When has this field, the transaction will be stored */
    public var documentCode: String?
    /** currency code. &#39;BRL&#39; for Brazilian Reais. */
    public var currency: Currency?
    /** This string is the transaction date in ISO 8601 format (which may be different from the date the tax calculation is performed) */
    public var transactionDate: NSDate?
    /** accrual date, This string is the date, in ISO 8601 format, on which tax is to be calculated for this transaction (normally tax is calculated on the date the transaction is performed as captured in the transactionDate field). This is useful for layaways and other deferred transactions. */
    public var taxCalculationDate: NSDate?
    /** This string is a code maintained by the client application to uniquely identify the party with whom the company (identified by companyCode) is transacting. It is unique within the context of an Account. */
    public var vendorCode: String?
    /** - &#39;CALCULATE&#39; - &#39;ASIS&#39; When ASIS, the transaction is stored without executing tax determination (no Calculation).  */
    public var paymentMode: PaymentMode?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["accountId"] = self.accountId
        nillableDictionary["companyCode"] = self.companyCode
        nillableDictionary["transactionType"] = self.transactionType?.rawValue
        nillableDictionary["documentCode"] = self.documentCode
        nillableDictionary["currency"] = self.currency?.rawValue
        nillableDictionary["transactionDate"] = self.transactionDate?.encodeToJSON()
        nillableDictionary["taxCalculationDate"] = self.taxCalculationDate?.encodeToJSON()
        nillableDictionary["vendorCode"] = self.vendorCode
        nillableDictionary["paymentMode"] = self.paymentMode?.rawValue
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
