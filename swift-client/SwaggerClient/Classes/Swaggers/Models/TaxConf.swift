//
// TaxConf.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class TaxConf: JSONEncodable {
    public enum CstIPI: String { 
        case T = "T"
        case Z = "Z"
        case E = "E"
        case H = "H"
        case N = "N"
        case I = "I"
        case O = "O"
        case Oz = "OZ"
    }
    public enum AccruablePISTaxation: String { 
        case T = "T"
        case Z = "Z"
        case E = "E"
        case H = "H"
        case N = "N"
        case O = "O"
        case Oz = "OZ"
    }
    public enum AccruableCOFINSTaxation: String { 
        case T = "T"
        case Z = "Z"
        case E = "E"
        case H = "H"
        case N = "N"
        case O = "O"
        case Oz = "OZ"
    }
    /** main unique identificator */
    public var code: String?
    /** Inform that the process has inventory impact. */
    public var stockImpact: Bool?
    /** Inform that the process has financial impact. */
    public var financialImpact: Bool?
    /** Inform if this process is subject to IPI taxation on output process - &#39;T&#39;  # TAXABLE - &#39;Z&#39;  # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39;  # EXEMPT - &#39;H&#39;  # SUSPENDED - &#39;N&#39;  # NO TAXABLE     - &#39;I&#39;  # IMMUNE - &#39;O&#39;  # OTHER - &#39;OZ&#39; # OTHER AND ZERO VALUES  */
    public var cstIPI: CstIPI?
    /** Legal tax classificação for IPI (enquadramento) When the processo has CST IPI 52 or 54, is mandatory inform Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo&#x3D;mCnJajU4BKU&#x3D;  */
    public var ipiLegalTaxClass: String?
    /** Inform if this item by nature is subject to PIS taxation or exempt - &#39;T&#39; # TAXABLE - &#39;Z&#39; # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39; # EXEMPT - &#39;H&#39; # SUSPENDED - &#39;N&#39; # NO TAXABLE - &#39;O&#39; # OTHER - &#39;OZ&#39;# OTHER AND ZERO VALUES  */
    public var accruablePISTaxation: AccruablePISTaxation?
    /** When exempt, taxable with zero, suspended, not taxable, this field holds the official code number */
    public var pisExemptLegalReasonCode: String?
    /** When specifi reason, this field has the description */
    public var pisExemptLegalReason: String?
    /** Inform if this item by nature is subject to COFINS taxation or exempt - &#39;T&#39;  # TAXABLE - &#39;Z&#39;  # TAXABLE WITH RATE&#x3D;0.00 - &#39;E&#39;  # EXEMPT - &#39;H&#39;  # SUSPENDED - &#39;N&#39;  # NO TAXABLE     - &#39;O&#39;  # OTHER - &#39;OZ&#39; # OTHER AND ZERO VALUES  */
    public var accruableCOFINSTaxation: AccruableCOFINSTaxation?
    /** When exempt, taxable with zero, suspended, not taxable, this field holds the official code number */
    public var cofinsExemptLegalReasonCode: String?
    /** When specifi reason, this field has the description */
    public var cofinsExemptLegalReason: String?
    /** Inform that the process allow IPI credit to Input process */
    public var allowIPIcreditWhenInGoing: Bool?
    /** the map key is state code */
    public var icmsConf: [IcmsTaxConf]?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["code"] = self.code
        nillableDictionary["stockImpact"] = self.stockImpact
        nillableDictionary["financialImpact"] = self.financialImpact
        nillableDictionary["cstIPI"] = self.cstIPI?.rawValue
        nillableDictionary["ipiLegalTaxClass"] = self.ipiLegalTaxClass
        nillableDictionary["accruablePISTaxation"] = self.accruablePISTaxation?.rawValue
        nillableDictionary["pisExemptLegalReasonCode"] = self.pisExemptLegalReasonCode
        nillableDictionary["pisExemptLegalReason"] = self.pisExemptLegalReason
        nillableDictionary["accruableCOFINSTaxation"] = self.accruableCOFINSTaxation?.rawValue
        nillableDictionary["cofinsExemptLegalReasonCode"] = self.cofinsExemptLegalReasonCode
        nillableDictionary["cofinsExemptLegalReason"] = self.cofinsExemptLegalReason
        nillableDictionary["allowIPIcreditWhenInGoing"] = self.allowIPIcreditWhenInGoing
        nillableDictionary["icmsConf"] = self.icmsConf?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
