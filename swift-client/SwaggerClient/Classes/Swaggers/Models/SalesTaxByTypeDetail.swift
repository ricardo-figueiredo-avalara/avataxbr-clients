//
// SalesTaxByTypeDetail.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class SalesTaxByTypeDetail: JSONEncodable {
    public enum JurisdictionType: String { 
        case City = "city"
        case State = "state"
        case Country = "country"
    }
    public enum TaxType: String { 
        case Aproxtribcity = "aproxtribCity"
        case Aproxtribfed = "aproxtribFed"
        case Pis = "pis"
        case Pisrf = "pisRf"
        case Cofins = "cofins"
        case Cofinsrf = "cofinsRf"
        case Csll = "csll"
        case Csllrf = "csllRf"
        case Irrf = "irrf"
        case Inss = "inss"
        case Inssrf = "inssRf"
        case Iss = "iss"
        case Issrf = "issRf"
        case Irpj = "irpj"
    }
    public enum TaxRuleType: String { 
        case Seller = "SELLER"
        case Buyer = "BUYER"
        case Transaction = "TRANSACTION"
        case Item = "ITEM"
        case Tax = "TAX"
    }
    /** This string captures the applicable location type. Location used for calc. Buyer or Seller */
    public var locationType: String?
    /** Jurisdiction used for calctax amount */
    public var jurisdictionName: String?
    /** Type of jurisdiction - &#39;city&#39; - &#39;state&#39; - &#39;country&#39;  */
    public var jurisdictionType: JurisdictionType?
    /** Tax identificator - &#39;aproxtribCity&#39; - &#39;aproxtribFed&#39; - &#39;pis&#39; - &#39;pisRf&#39; - &#39;cofins&#39; - &#39;cofinsRf&#39; - &#39;csll&#39; - &#39;csllRf&#39; - &#39;irrf&#39; - &#39;inss&#39; - &#39;inssRf&#39; - &#39;iss&#39; - &#39;issRf&#39; - &#39;irpj&#39;  */
    public var taxType: TaxType?
    /** Name of configuration rate */
    public var rateType: String?
    /** This string captures the transaction scenario used to calculate the tax for this tax type. Scenarios are specific to the tax type. This field provides information about how the tax engine interpreted the transaction information that was passed in. */
    public var scenario: String?
    /** This decimal captures how much of the lineAmount was taxable by this tax, calc base */
    public var subtotalTaxable: Double?
    /** This decimal captures how much of the lineAmount was non-taxed. This is simply the line amount minus the taxable. */
    public var subtotalExempt: Double?
    /** This decimal captures the tax rate for this tax.3.00 (3%) */
    public var rate: Double?
    /** This decimal captures how much of the lineAmount was taxable by this tax */
    public var tax: Double?
    /** This string is required if is exempt */
    public var exemptionCode: String?
    /** This element captures the list of locations that contributed to the tax determination. for BR16 Service is Buyer and Seller Address */
    public var significantLocations: [String]?
    /** This string with type of rule - &#39;SELLER&#39; - &#39;BUYER&#39; - &#39;TRANSACTION&#39; - &#39;ITEM&#39; - &#39;TAX&#39;  */
    public var taxRuleType: TaxRuleType?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["locationType"] = self.locationType
        nillableDictionary["jurisdictionName"] = self.jurisdictionName
        nillableDictionary["jurisdictionType"] = self.jurisdictionType?.rawValue
        nillableDictionary["taxType"] = self.taxType?.rawValue
        nillableDictionary["rateType"] = self.rateType
        nillableDictionary["scenario"] = self.scenario
        nillableDictionary["subtotalTaxable"] = self.subtotalTaxable
        nillableDictionary["subtotalExempt"] = self.subtotalExempt
        nillableDictionary["rate"] = self.rate
        nillableDictionary["tax"] = self.tax
        nillableDictionary["exemptionCode"] = self.exemptionCode
        nillableDictionary["significantLocations"] = self.significantLocations?.encodeToJSON()
        nillableDictionary["taxRuleType"] = self.taxRuleType?.rawValue
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
