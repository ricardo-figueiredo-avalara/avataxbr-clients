//
// SalesLinesOut.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class SalesLinesOut: JSONEncodable {
    public enum Cst: String { 
        case Number01 = "01"
        case Number02 = "02"
        case Number03 = "03"
        case Number04 = "04"
        case Number05 = "05"
        case Number21 = "21"
        case Number22 = "22"
        case Number23 = "23"
        case Number24 = "24"
        case Number25 = "25"
        case Number40 = "40"
    }
    public enum CstRf: String { 
        case Number61 = "61"
        case Number62 = "62"
        case Number63 = "63"
        case Number64 = "64"
        case Number65 = "65"
        case Number66 = "66"
        case Number67 = "67"
        case Number68 = "68"
        case Number69 = "69"
        case Number70 = "70"
        case Number71 = "71"
        case Number72 = "72"
    }
    /** This string is a unique identifier for this line in the transaction */
    public var lineCode: Int32?
    /** This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states. */
    public var itemCode: String?
    /** This decimal captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1 */
    public var numberOfItems: Double?
    /** This decimal captures the total cost of this line. In its simplest form lineAmount &#x3D; (item price * numberOfItems). */
    public var lineAmount: Double?
    /** This string captures the description of the item represented by this line, will be used LC 116 */
    public var itemDescription: String?
    /** Conditional discount */
    public var lineTaxedDiscount: Double?
    /** Unconditional discount */
    public var lineUntaxedDiscount: Double?
    public var taxDeductions: SalesLinesOutTaxDeductions?
    /** AGAST CODE for itemCode */
    public var avalaraGoodsAndServicesType: String?
    /** This decimal captures the total cost of this line. In its simplest form lineNetValue &#x3D; (lineAmount - discountTaxable - sum of whithholdings). */
    public var lineNetValue: Double?
    /** - &#39;01&#39; # ORIGIN MODE - &#39;02&#39; # ORIGIN MODE BUT EXEMPT - &#39;03&#39; # ORIGIN MODE BUT IMMUNE - &#39;04&#39; # ORIGIN MODE BUT SUSPENDED FOR LEGAL REASON - &#39;05&#39; # ORIGIN MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON - &#39;21&#39; # DESTINATION MODE - &#39;22&#39; # DESTINATION MODE BUT EXEMPT - &#39;23&#39; # DESTINATION MODE BUT IMMUNE - &#39;24&#39; # DESTINATION MODE BUT SUSPENDED - &#39;25&#39; # DESTINATION MODE BUT SUSPENDED - &#39;40&#39; # FOREIGN IMMUNE MODE  */
    public var cst: Cst?
    /** - &#39;61&#39; # WITHHOLD NORMAL MODE - &#39;62&#39; # WITHHOLD NORMAL MODE BUT EXEMPT - &#39;63&#39; # WITHHOLD NORMAL MODE BUT IMMUNE - &#39;64&#39; # WITHHOLD NORMAL MODE BUT SUSPENDED FOR LEGAL REASON - &#39;65&#39; # WITHHOLD NORMAL MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON - &#39;66&#39; # WITHHOLD FORCED MODE - &#39;67&#39; # WITHHOLD FORCED MODE BUT EXEMPT - &#39;68&#39; # WITHHOLD FORCED MODE BUT IMMUNE - &#39;69&#39; # WITHHOLD FORCED MODE BUT SUSPENDED FOR LEGAL REASON - &#39;70&#39; # WITHHOLD FORCED MODE BUT SUSPENDED FOR ADMINISTRATIVE PROCESS - &#39;71&#39; # NO WITHHOLD MODE - &#39;72&#39; # NO WITHHOLD FOREIGN MODE  */
    public var cstRf: CstRf?
    public var calculatedTax: SalesCalculatedTax?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["lineCode"] = self.lineCode?.encodeToJSON()
        nillableDictionary["itemCode"] = self.itemCode
        nillableDictionary["numberOfItems"] = self.numberOfItems
        nillableDictionary["lineAmount"] = self.lineAmount
        nillableDictionary["itemDescription"] = self.itemDescription
        nillableDictionary["lineTaxedDiscount"] = self.lineTaxedDiscount
        nillableDictionary["lineUntaxedDiscount"] = self.lineUntaxedDiscount
        nillableDictionary["taxDeductions"] = self.taxDeductions?.encodeToJSON()
        nillableDictionary["avalaraGoodsAndServicesType"] = self.avalaraGoodsAndServicesType
        nillableDictionary["lineNetValue"] = self.lineNetValue
        nillableDictionary["cst"] = self.cst?.rawValue
        nillableDictionary["cstRf"] = self.cstRf?.rawValue
        nillableDictionary["calculatedTax"] = self.calculatedTax?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
