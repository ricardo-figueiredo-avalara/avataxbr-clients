//
// HeaderForGoods.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class HeaderForGoods: JSONEncodable {
    public enum MessageType: String { 
        case Goods = "goods"
    }
    public enum TransactionType: String { 
        case Sales = "Sales"
        case Purchase = "Purchase"
        case SalesReturn = "SalesReturn"
        case PurchaseReturn = "PurchaseReturn"
        case TransferReturn = "TransferReturn"
        case Shipping = "Shipping"
        case ShippingReturn = "ShippingReturn"
        case Transfer = "Transfer"
        case ReceiptAdjustment = "ReceiptAdjustment"
        case TransferAdjustment = "TransferAdjustment"
    }
    public enum TransactionModel: String { 
        case Number01 = "01"
        case Number1B = "1B"
        case Number02 = "02"
        case Number2D = "2D"
        case Number2E = "2E"
        case Number04 = "04"
        case Number06 = "06"
        case Number07 = "07"
        case Number08 = "08"
        case Number8B = "8B"
        case Number09 = "09"
        case Number10 = "10"
        case Number11 = "11"
        case Number13 = "13"
        case Number14 = "14"
        case Number15 = "15"
        case Number16 = "16"
        case Number18 = "18"
        case Number21 = "21"
        case Number22 = "22"
        case Number26 = "26"
        case Number27 = "27"
        case Number28 = "28"
        case Number29 = "29"
        case Number55 = "55"
        case Number57 = "57"
        case Number59 = "59"
        case Number60 = "60"
        case Number65 = "65"
    }
    public enum EDocCreatorType: String { 
        case Self = "self"
        case Other = "other"
    }
    public enum Currency: String { 
        case Brl = "BRL"
    }
    public enum TpImp: String { 
        case Number0 = "0"
        case Number1 = "1"
        case Number2 = "2"
        case Number3 = "3"
        case Number4 = "4"
        case Number5 = "5"
    }
    public enum IndPres: String { 
        case Number0 = "0"
        case Number1 = "1"
        case Number2 = "2"
        case Number3 = "3"
        case Number4 = "4"
        case Number9 = "9"
    }
    public var messageType: MessageType?
    /** This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode on the next line. */
    public var accountId: String?
    /** string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company */
    public var companyCode: String?
    /** This string is a code maintained by the client application to uniquely identify a document in the client&#39;s systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc. When has this field, the transaction will be stored */
    public var documentCode: String?
    public var participants: HeaderForGoodsParticipants?
    /** This is the public NF id. With this number is possible get invoice information directly from government. */
    public var nfAccessKey: String?
    /** qr code printed on DANFE; */
    public var nfceQrCode: String?
    /** This string indicates the type of transaction for which tax should be calculated. */
    public var transactionType: TransactionType?
    /** This string indicates the type of transaction for which tax should be calculated. - &#39;01&#39; # Nota Fiscal 1/1A - &#39;1B&#39; # Nota Fiscal Avulsa - &#39;02&#39; # Nota Fiscal de Venda a-Consumidor - &#39;2D&#39; # Cupom Fiscal - &#39;2E&#39; # Cupom Fiscal-Bilhete de Passagem - &#39;04&#39; # Nota Fiscal de Produtor - &#39;06&#39; # Nota Fiscal/Conta de Energia Elétrica - &#39;07&#39; # Nota Fiscal de Serviço de Transporte - &#39;08&#39; # Conhecimento de Transporte Rodoviário de-Cargas - &#39;8B&#39; # Conhecimento de Transporte de-Cargas Avulso - &#39;09&#39; # Conhecimento de Transporte Aquaviário de-Cargas - &#39;10&#39; # Conhecimento Aéreo - &#39;11&#39; # Conhecimento de Transporte Ferroviário de-Cargas - &#39;13&#39; # Bilhete de Passagem Rodoviário - &#39;14&#39; # Bilhete de Passagem Aquaviário - &#39;15&#39; # Bilhete de Passagem e-Nota de-Bagagem - &#39;16&#39; # Bilhete de Passagem Ferroviário - &#39;18&#39; # Resumo de Movimento Diário - &#39;21&#39; # Nota Fiscal de Serviço de-Comunicação - &#39;22&#39; # Nota Fiscal de Serviço de Telecomunicação - &#39;26&#39; # Conhecimento de Transporte Multimodal de-Cargas - &#39;27&#39; # Nota Fiscal De Transporte Ferroviário De-Carga - &#39;28&#39; # Nota Fiscal/Conta de Fornecimento de Gás-Canalizado - &#39;29&#39; # Nota Fiscal/Conta de Fornecimento de Água-Canalizada - &#39;55&#39; # Nota Fiscal Eletrônica (NF-e) - &#39;57&#39; # Conhecimento de Transporte Eletrônico (CT-e) - &#39;59&#39; # Cupom Fiscal Eletrônico (CF-e-SAT) - &#39;60&#39; # Cupom Fiscal Eletrônico (CF-e-ECF) - &#39;65&#39; # Nota Fiscal Eletrônica ao-Consumidor Final (NFC-e)  */
    public var transactionModel: TransactionModel?
    /** Natureza da Opreração - &#39;Describe kind of this transaction, summary */
    public var transactionClass: String?
    public var eDocCreatorType: EDocCreatorType?
    /** This Flag is used only when eDocCreatorType is other and the return show Taxes using eDocCreator perspective or self perspective. */
    public var eDocCreatorPerspective: Bool?
    /** This string is a code maintained by the client application and recorded in CUP to uniquely identify the party with whom the company (identified by companyCode) is transacting. It is unique within the context of a Company. */
    public var entityCode: String?
    /** currency code */
    public var currency: Currency?
    /** This string contains a previously configured company code which may also have codes needed for tax return purposes. These codes are maintained through the customer portal. Main company address identity */
    public var companyLocation: String?
    /** This string is the transaction date in ISO 8601 format, create transaction date */
    public var transactionDate: String?
    /** This string is the transaction date in ISO 8601 format, when products were shipped, can be empty or absent */
    public var shippingDate: String?
    public var additionalInfo: AdditionalInformation?
    /** how the document will be printed - &#39;0&#39; # without DANFE; - &#39;1&#39; # DANFe Letter; - &#39;2&#39; # DANFe Landscape; - &#39;3&#39; # DANFe Simplified; - &#39;4&#39; # DANFe NFC-e; - &#39;5&#39; # DANFe NFC-e e-mail  */
    public var tpImp: TpImp?
    /** This indicator inform transaction target place, when is AUTOMATIC the company address and entity address are analyzed to identify type of transaction target place 1- same state; 2 - interstate; 3-with exterior. Exist some cases where is necessary force this situation like when buyer from another state buy something in loco, the address are from different states, but transaction no.  Identificador de Local de destino da operação, na opção AUTOMATIC endereços da Companhia e da entidade destino são analisados para saber se é uma operação dentro do mesmo estado, interestadual ou com o exterior. Há situações onde é necessário forçar este indicador como por exemplo  Quando uma pessoa com endereço em outro estado, compra uma mercadoria de forma presencial, é uma operação interna apesar dos endereços dos envolvidos estarem em estados distintos. - 0 # AUTOMATIC - DEFAULT - 1 # Interna; - 2 # Interestadual; - 3 # Exterior)  */
    public var idDest: Int32?
    /** Presence indicator - &#39;0&#39; # Not applicable - &#39;1&#39; # Presential; - &#39;2&#39; # Remote, internet; - &#39;3&#39; # Remote, phone; - &#39;4&#39; # NFC-e home delivery; - &#39;9&#39; # Remote, others  */
    public var indPres: IndPres?
    /** Invoice number, sequential unique by invoice serial (Número da nota fiscal) */
    public var invoiceNumber: Int32?
    /** Invoice number, sequential unique by invoice serial (Número da nota fiscal)  */
    public var invoiceSerial: Int32?
    public var defaultLocations: DefaultLocations?
    /** Shipment */
    public var transport: Transport?
    /** Transactions or other invoices referenced */
    public var nfRef: [NRef]?
    public var payment: Payment?
    public var purchaseInfo: PurchaseInfo?
    public var export: ExportInfo?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["messageType"] = self.messageType?.rawValue
        nillableDictionary["accountId"] = self.accountId
        nillableDictionary["companyCode"] = self.companyCode
        nillableDictionary["documentCode"] = self.documentCode
        nillableDictionary["participants"] = self.participants?.encodeToJSON()
        nillableDictionary["nfAccessKey"] = self.nfAccessKey
        nillableDictionary["nfceQrCode"] = self.nfceQrCode
        nillableDictionary["transactionType"] = self.transactionType?.rawValue
        nillableDictionary["transactionModel"] = self.transactionModel?.rawValue
        nillableDictionary["transactionClass"] = self.transactionClass
        nillableDictionary["eDocCreatorType"] = self.eDocCreatorType?.rawValue
        nillableDictionary["eDocCreatorPerspective"] = self.eDocCreatorPerspective
        nillableDictionary["entityCode"] = self.entityCode
        nillableDictionary["currency"] = self.currency?.rawValue
        nillableDictionary["companyLocation"] = self.companyLocation
        nillableDictionary["transactionDate"] = self.transactionDate
        nillableDictionary["shippingDate"] = self.shippingDate
        nillableDictionary["additionalInfo"] = self.additionalInfo?.encodeToJSON()
        nillableDictionary["tpImp"] = self.tpImp?.rawValue
        nillableDictionary["idDest"] = self.idDest?.encodeToJSON()
        nillableDictionary["indPres"] = self.indPres?.rawValue
        nillableDictionary["invoiceNumber"] = self.invoiceNumber?.encodeToJSON()
        nillableDictionary["invoiceSerial"] = self.invoiceSerial?.encodeToJSON()
        nillableDictionary["defaultLocations"] = self.defaultLocations?.encodeToJSON()
        nillableDictionary["transport"] = self.transport?.encodeToJSON()
        nillableDictionary["nfRef"] = self.nfRef?.encodeToJSON()
        nillableDictionary["payment"] = self.payment?.encodeToJSON()
        nillableDictionary["purchaseInfo"] = self.purchaseInfo?.encodeToJSON()
        nillableDictionary["export"] = self.export?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
